
Gesture PAJ7620U2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005620  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080057b4  080057b4  000157b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080057ec  080057ec  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080057ec  080057ec  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080057ec  080057ec  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080057ec  080057ec  000157ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080057f0  080057f0  000157f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080057f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000508  2000000c  08005800  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000514  08005800  00020514  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fd96  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002170  00000000  00000000  0002fdd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c50  00000000  00000000  00031f48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b88  00000000  00000000  00032b98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000212f4  00000000  00000000  00033720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f64d  00000000  00000000  00054a14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ca395  00000000  00000000  00064061  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012e3f6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003340  00000000  00000000  0012e44c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800579c 	.word	0x0800579c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	0800579c 	.word	0x0800579c

080001d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d8:	f000 fbb0 	bl	800093c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001dc:	f000 f80e 	bl	80001fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001e0:	f000 f968 	bl	80004b4 <MX_GPIO_Init>
  MX_RTC_Init();
 80001e4:	f000 f8ba 	bl	800035c <MX_RTC_Init>
  MX_USART3_UART_Init();
 80001e8:	f000 f90e 	bl	8000408 <MX_USART3_UART_Init>
  MX_USB_PCD_Init();
 80001ec:	f000 f93c 	bl	8000468 <MX_USB_PCD_Init>
  MX_I2C1_Init();
 80001f0:	f000 f874 	bl	80002dc <MX_I2C1_Init>
  MX_UART4_Init();
 80001f4:	f000 f8d8 	bl	80003a8 <MX_UART4_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001f8:	e7fe      	b.n	80001f8 <main+0x24>
	...

080001fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b0a6      	sub	sp, #152	; 0x98
 8000200:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000202:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000206:	2228      	movs	r2, #40	; 0x28
 8000208:	2100      	movs	r1, #0
 800020a:	4618      	mov	r0, r3
 800020c:	f005 fabe 	bl	800578c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000210:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000214:	2200      	movs	r2, #0
 8000216:	601a      	str	r2, [r3, #0]
 8000218:	605a      	str	r2, [r3, #4]
 800021a:	609a      	str	r2, [r3, #8]
 800021c:	60da      	str	r2, [r3, #12]
 800021e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000220:	1d3b      	adds	r3, r7, #4
 8000222:	2258      	movs	r2, #88	; 0x58
 8000224:	2100      	movs	r1, #0
 8000226:	4618      	mov	r0, r3
 8000228:	f005 fab0 	bl	800578c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 800022c:	230b      	movs	r3, #11
 800022e:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000230:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000234:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000236:	2301      	movs	r3, #1
 8000238:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800023a:	2310      	movs	r3, #16
 800023c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000240:	2301      	movs	r3, #1
 8000242:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000246:	2302      	movs	r3, #2
 8000248:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800024c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000250:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000254:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000258:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800025c:	2300      	movs	r3, #0
 800025e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000262:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000266:	4618      	mov	r0, r3
 8000268:	f002 f882 	bl	8002370 <HAL_RCC_OscConfig>
 800026c:	4603      	mov	r3, r0
 800026e:	2b00      	cmp	r3, #0
 8000270:	d001      	beq.n	8000276 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000272:	f000 f9c1 	bl	80005f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000276:	230f      	movs	r3, #15
 8000278:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800027a:	2302      	movs	r3, #2
 800027c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800027e:	2300      	movs	r3, #0
 8000280:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000282:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000286:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000288:	2300      	movs	r3, #0
 800028a:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800028c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000290:	2102      	movs	r1, #2
 8000292:	4618      	mov	r0, r3
 8000294:	f002 ff82 	bl	800319c <HAL_RCC_ClockConfig>
 8000298:	4603      	mov	r3, r0
 800029a:	2b00      	cmp	r3, #0
 800029c:	d001      	beq.n	80002a2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800029e:	f000 f9ab 	bl	80005f8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART3
 80002a2:	4b0d      	ldr	r3, [pc, #52]	; (80002d8 <SystemClock_Config+0xdc>)
 80002a4:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80002a6:	2300      	movs	r3, #0
 80002a8:	617b      	str	r3, [r7, #20]
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80002aa:	2300      	movs	r3, #0
 80002ac:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80002ae:	2300      	movs	r3, #0
 80002b0:	623b      	str	r3, [r7, #32]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80002b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80002b6:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80002b8:	2300      	movs	r3, #0
 80002ba:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002bc:	1d3b      	adds	r3, r7, #4
 80002be:	4618      	mov	r0, r3
 80002c0:	f003 f9a2 	bl	8003608 <HAL_RCCEx_PeriphCLKConfig>
 80002c4:	4603      	mov	r3, r0
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d001      	beq.n	80002ce <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80002ca:	f000 f995 	bl	80005f8 <Error_Handler>
  }
}
 80002ce:	bf00      	nop
 80002d0:	3798      	adds	r7, #152	; 0x98
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bd80      	pop	{r7, pc}
 80002d6:	bf00      	nop
 80002d8:	0003002c 	.word	0x0003002c

080002dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80002e0:	4b1b      	ldr	r3, [pc, #108]	; (8000350 <MX_I2C1_Init+0x74>)
 80002e2:	4a1c      	ldr	r2, [pc, #112]	; (8000354 <MX_I2C1_Init+0x78>)
 80002e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80002e6:	4b1a      	ldr	r3, [pc, #104]	; (8000350 <MX_I2C1_Init+0x74>)
 80002e8:	4a1b      	ldr	r2, [pc, #108]	; (8000358 <MX_I2C1_Init+0x7c>)
 80002ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80002ec:	4b18      	ldr	r3, [pc, #96]	; (8000350 <MX_I2C1_Init+0x74>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002f2:	4b17      	ldr	r3, [pc, #92]	; (8000350 <MX_I2C1_Init+0x74>)
 80002f4:	2201      	movs	r2, #1
 80002f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002f8:	4b15      	ldr	r3, [pc, #84]	; (8000350 <MX_I2C1_Init+0x74>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80002fe:	4b14      	ldr	r3, [pc, #80]	; (8000350 <MX_I2C1_Init+0x74>)
 8000300:	2200      	movs	r2, #0
 8000302:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000304:	4b12      	ldr	r3, [pc, #72]	; (8000350 <MX_I2C1_Init+0x74>)
 8000306:	2200      	movs	r2, #0
 8000308:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800030a:	4b11      	ldr	r3, [pc, #68]	; (8000350 <MX_I2C1_Init+0x74>)
 800030c:	2200      	movs	r2, #0
 800030e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000310:	4b0f      	ldr	r3, [pc, #60]	; (8000350 <MX_I2C1_Init+0x74>)
 8000312:	2200      	movs	r2, #0
 8000314:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000316:	480e      	ldr	r0, [pc, #56]	; (8000350 <MX_I2C1_Init+0x74>)
 8000318:	f000 fe2a 	bl	8000f70 <HAL_I2C_Init>
 800031c:	4603      	mov	r3, r0
 800031e:	2b00      	cmp	r3, #0
 8000320:	d001      	beq.n	8000326 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000322:	f000 f969 	bl	80005f8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000326:	2100      	movs	r1, #0
 8000328:	4809      	ldr	r0, [pc, #36]	; (8000350 <MX_I2C1_Init+0x74>)
 800032a:	f000 feb0 	bl	800108e <HAL_I2CEx_ConfigAnalogFilter>
 800032e:	4603      	mov	r3, r0
 8000330:	2b00      	cmp	r3, #0
 8000332:	d001      	beq.n	8000338 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000334:	f000 f960 	bl	80005f8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000338:	2100      	movs	r1, #0
 800033a:	4805      	ldr	r0, [pc, #20]	; (8000350 <MX_I2C1_Init+0x74>)
 800033c:	f000 fef2 	bl	8001124 <HAL_I2CEx_ConfigDigitalFilter>
 8000340:	4603      	mov	r3, r0
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000346:	f000 f957 	bl	80005f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800034a:	bf00      	nop
 800034c:	bd80      	pop	{r7, pc}
 800034e:	bf00      	nop
 8000350:	200000ac 	.word	0x200000ac
 8000354:	40005400 	.word	0x40005400
 8000358:	2000090e 	.word	0x2000090e

0800035c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000360:	4b0f      	ldr	r3, [pc, #60]	; (80003a0 <MX_RTC_Init+0x44>)
 8000362:	4a10      	ldr	r2, [pc, #64]	; (80003a4 <MX_RTC_Init+0x48>)
 8000364:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000366:	4b0e      	ldr	r3, [pc, #56]	; (80003a0 <MX_RTC_Init+0x44>)
 8000368:	2200      	movs	r2, #0
 800036a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800036c:	4b0c      	ldr	r3, [pc, #48]	; (80003a0 <MX_RTC_Init+0x44>)
 800036e:	227f      	movs	r2, #127	; 0x7f
 8000370:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000372:	4b0b      	ldr	r3, [pc, #44]	; (80003a0 <MX_RTC_Init+0x44>)
 8000374:	22ff      	movs	r2, #255	; 0xff
 8000376:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000378:	4b09      	ldr	r3, [pc, #36]	; (80003a0 <MX_RTC_Init+0x44>)
 800037a:	2200      	movs	r2, #0
 800037c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800037e:	4b08      	ldr	r3, [pc, #32]	; (80003a0 <MX_RTC_Init+0x44>)
 8000380:	2200      	movs	r2, #0
 8000382:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000384:	4b06      	ldr	r3, [pc, #24]	; (80003a0 <MX_RTC_Init+0x44>)
 8000386:	2200      	movs	r2, #0
 8000388:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800038a:	4805      	ldr	r0, [pc, #20]	; (80003a0 <MX_RTC_Init+0x44>)
 800038c:	f003 fb5a 	bl	8003a44 <HAL_RTC_Init>
 8000390:	4603      	mov	r3, r0
 8000392:	2b00      	cmp	r3, #0
 8000394:	d001      	beq.n	800039a <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000396:	f000 f92f 	bl	80005f8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800039a:	bf00      	nop
 800039c:	bd80      	pop	{r7, pc}
 800039e:	bf00      	nop
 80003a0:	2000017c 	.word	0x2000017c
 80003a4:	40002800 	.word	0x40002800

080003a8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80003ac:	4b14      	ldr	r3, [pc, #80]	; (8000400 <MX_UART4_Init+0x58>)
 80003ae:	4a15      	ldr	r2, [pc, #84]	; (8000404 <MX_UART4_Init+0x5c>)
 80003b0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80003b2:	4b13      	ldr	r3, [pc, #76]	; (8000400 <MX_UART4_Init+0x58>)
 80003b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80003b8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80003ba:	4b11      	ldr	r3, [pc, #68]	; (8000400 <MX_UART4_Init+0x58>)
 80003bc:	2200      	movs	r2, #0
 80003be:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80003c0:	4b0f      	ldr	r3, [pc, #60]	; (8000400 <MX_UART4_Init+0x58>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80003c6:	4b0e      	ldr	r3, [pc, #56]	; (8000400 <MX_UART4_Init+0x58>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80003cc:	4b0c      	ldr	r3, [pc, #48]	; (8000400 <MX_UART4_Init+0x58>)
 80003ce:	220c      	movs	r2, #12
 80003d0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003d2:	4b0b      	ldr	r3, [pc, #44]	; (8000400 <MX_UART4_Init+0x58>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80003d8:	4b09      	ldr	r3, [pc, #36]	; (8000400 <MX_UART4_Init+0x58>)
 80003da:	2200      	movs	r2, #0
 80003dc:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003de:	4b08      	ldr	r3, [pc, #32]	; (8000400 <MX_UART4_Init+0x58>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80003e4:	4b06      	ldr	r3, [pc, #24]	; (8000400 <MX_UART4_Init+0x58>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80003ea:	4805      	ldr	r0, [pc, #20]	; (8000400 <MX_UART4_Init+0x58>)
 80003ec:	f003 fc0f 	bl	8003c0e <HAL_UART_Init>
 80003f0:	4603      	mov	r3, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d001      	beq.n	80003fa <MX_UART4_Init+0x52>
  {
    Error_Handler();
 80003f6:	f000 f8ff 	bl	80005f8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80003fa:	bf00      	nop
 80003fc:	bd80      	pop	{r7, pc}
 80003fe:	bf00      	nop
 8000400:	200001a0 	.word	0x200001a0
 8000404:	40004c00 	.word	0x40004c00

08000408 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800040c:	4b14      	ldr	r3, [pc, #80]	; (8000460 <MX_USART3_UART_Init+0x58>)
 800040e:	4a15      	ldr	r2, [pc, #84]	; (8000464 <MX_USART3_UART_Init+0x5c>)
 8000410:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8000412:	4b13      	ldr	r3, [pc, #76]	; (8000460 <MX_USART3_UART_Init+0x58>)
 8000414:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000418:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800041a:	4b11      	ldr	r3, [pc, #68]	; (8000460 <MX_USART3_UART_Init+0x58>)
 800041c:	2200      	movs	r2, #0
 800041e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000420:	4b0f      	ldr	r3, [pc, #60]	; (8000460 <MX_USART3_UART_Init+0x58>)
 8000422:	2200      	movs	r2, #0
 8000424:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000426:	4b0e      	ldr	r3, [pc, #56]	; (8000460 <MX_USART3_UART_Init+0x58>)
 8000428:	2200      	movs	r2, #0
 800042a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800042c:	4b0c      	ldr	r3, [pc, #48]	; (8000460 <MX_USART3_UART_Init+0x58>)
 800042e:	220c      	movs	r2, #12
 8000430:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000432:	4b0b      	ldr	r3, [pc, #44]	; (8000460 <MX_USART3_UART_Init+0x58>)
 8000434:	2200      	movs	r2, #0
 8000436:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000438:	4b09      	ldr	r3, [pc, #36]	; (8000460 <MX_USART3_UART_Init+0x58>)
 800043a:	2200      	movs	r2, #0
 800043c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800043e:	4b08      	ldr	r3, [pc, #32]	; (8000460 <MX_USART3_UART_Init+0x58>)
 8000440:	2200      	movs	r2, #0
 8000442:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000444:	4b06      	ldr	r3, [pc, #24]	; (8000460 <MX_USART3_UART_Init+0x58>)
 8000446:	2200      	movs	r2, #0
 8000448:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800044a:	4805      	ldr	r0, [pc, #20]	; (8000460 <MX_USART3_UART_Init+0x58>)
 800044c:	f003 fbdf 	bl	8003c0e <HAL_UART_Init>
 8000450:	4603      	mov	r3, r0
 8000452:	2b00      	cmp	r3, #0
 8000454:	d001      	beq.n	800045a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000456:	f000 f8cf 	bl	80005f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800045a:	bf00      	nop
 800045c:	bd80      	pop	{r7, pc}
 800045e:	bf00      	nop
 8000460:	20000028 	.word	0x20000028
 8000464:	40004800 	.word	0x40004800

08000468 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 800046c:	4b0f      	ldr	r3, [pc, #60]	; (80004ac <MX_USB_PCD_Init+0x44>)
 800046e:	4a10      	ldr	r2, [pc, #64]	; (80004b0 <MX_USB_PCD_Init+0x48>)
 8000470:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000472:	4b0e      	ldr	r3, [pc, #56]	; (80004ac <MX_USB_PCD_Init+0x44>)
 8000474:	2208      	movs	r2, #8
 8000476:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000478:	4b0c      	ldr	r3, [pc, #48]	; (80004ac <MX_USB_PCD_Init+0x44>)
 800047a:	2202      	movs	r2, #2
 800047c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800047e:	4b0b      	ldr	r3, [pc, #44]	; (80004ac <MX_USB_PCD_Init+0x44>)
 8000480:	2202      	movs	r2, #2
 8000482:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000484:	4b09      	ldr	r3, [pc, #36]	; (80004ac <MX_USB_PCD_Init+0x44>)
 8000486:	2200      	movs	r2, #0
 8000488:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800048a:	4b08      	ldr	r3, [pc, #32]	; (80004ac <MX_USB_PCD_Init+0x44>)
 800048c:	2200      	movs	r2, #0
 800048e:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000490:	4b06      	ldr	r3, [pc, #24]	; (80004ac <MX_USB_PCD_Init+0x44>)
 8000492:	2200      	movs	r2, #0
 8000494:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000496:	4805      	ldr	r0, [pc, #20]	; (80004ac <MX_USB_PCD_Init+0x44>)
 8000498:	f000 fe90 	bl	80011bc <HAL_PCD_Init>
 800049c:	4603      	mov	r3, r0
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d001      	beq.n	80004a6 <MX_USB_PCD_Init+0x3e>
  {
    Error_Handler();
 80004a2:	f000 f8a9 	bl	80005f8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80004a6:	bf00      	nop
 80004a8:	bd80      	pop	{r7, pc}
 80004aa:	bf00      	nop
 80004ac:	20000224 	.word	0x20000224
 80004b0:	40005c00 	.word	0x40005c00

080004b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b08c      	sub	sp, #48	; 0x30
 80004b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ba:	f107 031c 	add.w	r3, r7, #28
 80004be:	2200      	movs	r2, #0
 80004c0:	601a      	str	r2, [r3, #0]
 80004c2:	605a      	str	r2, [r3, #4]
 80004c4:	609a      	str	r2, [r3, #8]
 80004c6:	60da      	str	r2, [r3, #12]
 80004c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004ca:	4b46      	ldr	r3, [pc, #280]	; (80005e4 <MX_GPIO_Init+0x130>)
 80004cc:	695b      	ldr	r3, [r3, #20]
 80004ce:	4a45      	ldr	r2, [pc, #276]	; (80005e4 <MX_GPIO_Init+0x130>)
 80004d0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80004d4:	6153      	str	r3, [r2, #20]
 80004d6:	4b43      	ldr	r3, [pc, #268]	; (80005e4 <MX_GPIO_Init+0x130>)
 80004d8:	695b      	ldr	r3, [r3, #20]
 80004da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80004de:	61bb      	str	r3, [r7, #24]
 80004e0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004e2:	4b40      	ldr	r3, [pc, #256]	; (80005e4 <MX_GPIO_Init+0x130>)
 80004e4:	695b      	ldr	r3, [r3, #20]
 80004e6:	4a3f      	ldr	r2, [pc, #252]	; (80005e4 <MX_GPIO_Init+0x130>)
 80004e8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80004ec:	6153      	str	r3, [r2, #20]
 80004ee:	4b3d      	ldr	r3, [pc, #244]	; (80005e4 <MX_GPIO_Init+0x130>)
 80004f0:	695b      	ldr	r3, [r3, #20]
 80004f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80004f6:	617b      	str	r3, [r7, #20]
 80004f8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004fa:	4b3a      	ldr	r3, [pc, #232]	; (80005e4 <MX_GPIO_Init+0x130>)
 80004fc:	695b      	ldr	r3, [r3, #20]
 80004fe:	4a39      	ldr	r2, [pc, #228]	; (80005e4 <MX_GPIO_Init+0x130>)
 8000500:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000504:	6153      	str	r3, [r2, #20]
 8000506:	4b37      	ldr	r3, [pc, #220]	; (80005e4 <MX_GPIO_Init+0x130>)
 8000508:	695b      	ldr	r3, [r3, #20]
 800050a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800050e:	613b      	str	r3, [r7, #16]
 8000510:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000512:	4b34      	ldr	r3, [pc, #208]	; (80005e4 <MX_GPIO_Init+0x130>)
 8000514:	695b      	ldr	r3, [r3, #20]
 8000516:	4a33      	ldr	r2, [pc, #204]	; (80005e4 <MX_GPIO_Init+0x130>)
 8000518:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800051c:	6153      	str	r3, [r2, #20]
 800051e:	4b31      	ldr	r3, [pc, #196]	; (80005e4 <MX_GPIO_Init+0x130>)
 8000520:	695b      	ldr	r3, [r3, #20]
 8000522:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000526:	60fb      	str	r3, [r7, #12]
 8000528:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800052a:	4b2e      	ldr	r3, [pc, #184]	; (80005e4 <MX_GPIO_Init+0x130>)
 800052c:	695b      	ldr	r3, [r3, #20]
 800052e:	4a2d      	ldr	r2, [pc, #180]	; (80005e4 <MX_GPIO_Init+0x130>)
 8000530:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000534:	6153      	str	r3, [r2, #20]
 8000536:	4b2b      	ldr	r3, [pc, #172]	; (80005e4 <MX_GPIO_Init+0x130>)
 8000538:	695b      	ldr	r3, [r3, #20]
 800053a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800053e:	60bb      	str	r3, [r7, #8]
 8000540:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000542:	4b28      	ldr	r3, [pc, #160]	; (80005e4 <MX_GPIO_Init+0x130>)
 8000544:	695b      	ldr	r3, [r3, #20]
 8000546:	4a27      	ldr	r2, [pc, #156]	; (80005e4 <MX_GPIO_Init+0x130>)
 8000548:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800054c:	6153      	str	r3, [r2, #20]
 800054e:	4b25      	ldr	r3, [pc, #148]	; (80005e4 <MX_GPIO_Init+0x130>)
 8000550:	695b      	ldr	r3, [r3, #20]
 8000552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000556:	607b      	str	r3, [r7, #4]
 8000558:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800055a:	2200      	movs	r2, #0
 800055c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000560:	4821      	ldr	r0, [pc, #132]	; (80005e8 <MX_GPIO_Init+0x134>)
 8000562:	f000 fced 	bl	8000f40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000566:	2200      	movs	r2, #0
 8000568:	2140      	movs	r1, #64	; 0x40
 800056a:	4820      	ldr	r0, [pc, #128]	; (80005ec <MX_GPIO_Init+0x138>)
 800056c:	f000 fce8 	bl	8000f40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000570:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000574:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000576:	4b1e      	ldr	r3, [pc, #120]	; (80005f0 <MX_GPIO_Init+0x13c>)
 8000578:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057a:	2300      	movs	r3, #0
 800057c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800057e:	f107 031c 	add.w	r3, r7, #28
 8000582:	4619      	mov	r1, r3
 8000584:	481b      	ldr	r0, [pc, #108]	; (80005f4 <MX_GPIO_Init+0x140>)
 8000586:	f000 fb51 	bl	8000c2c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800058a:	f244 0381 	movw	r3, #16513	; 0x4081
 800058e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000590:	2301      	movs	r3, #1
 8000592:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000594:	2300      	movs	r3, #0
 8000596:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000598:	2300      	movs	r3, #0
 800059a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800059c:	f107 031c 	add.w	r3, r7, #28
 80005a0:	4619      	mov	r1, r3
 80005a2:	4811      	ldr	r0, [pc, #68]	; (80005e8 <MX_GPIO_Init+0x134>)
 80005a4:	f000 fb42 	bl	8000c2c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80005a8:	2340      	movs	r3, #64	; 0x40
 80005aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ac:	2301      	movs	r3, #1
 80005ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b0:	2300      	movs	r3, #0
 80005b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005b4:	2300      	movs	r3, #0
 80005b6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80005b8:	f107 031c 	add.w	r3, r7, #28
 80005bc:	4619      	mov	r1, r3
 80005be:	480b      	ldr	r0, [pc, #44]	; (80005ec <MX_GPIO_Init+0x138>)
 80005c0:	f000 fb34 	bl	8000c2c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80005c4:	2380      	movs	r3, #128	; 0x80
 80005c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005c8:	2300      	movs	r3, #0
 80005ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005cc:	2300      	movs	r3, #0
 80005ce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80005d0:	f107 031c 	add.w	r3, r7, #28
 80005d4:	4619      	mov	r1, r3
 80005d6:	4805      	ldr	r0, [pc, #20]	; (80005ec <MX_GPIO_Init+0x138>)
 80005d8:	f000 fb28 	bl	8000c2c <HAL_GPIO_Init>

}
 80005dc:	bf00      	nop
 80005de:	3730      	adds	r7, #48	; 0x30
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	40021000 	.word	0x40021000
 80005e8:	48000400 	.word	0x48000400
 80005ec:	48001800 	.word	0x48001800
 80005f0:	10110000 	.word	0x10110000
 80005f4:	48000800 	.word	0x48000800

080005f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005fc:	b672      	cpsid	i
}
 80005fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000600:	e7fe      	b.n	8000600 <Error_Handler+0x8>
	...

08000604 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000604:	b480      	push	{r7}
 8000606:	b083      	sub	sp, #12
 8000608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800060a:	4b0f      	ldr	r3, [pc, #60]	; (8000648 <HAL_MspInit+0x44>)
 800060c:	699b      	ldr	r3, [r3, #24]
 800060e:	4a0e      	ldr	r2, [pc, #56]	; (8000648 <HAL_MspInit+0x44>)
 8000610:	f043 0301 	orr.w	r3, r3, #1
 8000614:	6193      	str	r3, [r2, #24]
 8000616:	4b0c      	ldr	r3, [pc, #48]	; (8000648 <HAL_MspInit+0x44>)
 8000618:	699b      	ldr	r3, [r3, #24]
 800061a:	f003 0301 	and.w	r3, r3, #1
 800061e:	607b      	str	r3, [r7, #4]
 8000620:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000622:	4b09      	ldr	r3, [pc, #36]	; (8000648 <HAL_MspInit+0x44>)
 8000624:	69db      	ldr	r3, [r3, #28]
 8000626:	4a08      	ldr	r2, [pc, #32]	; (8000648 <HAL_MspInit+0x44>)
 8000628:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800062c:	61d3      	str	r3, [r2, #28]
 800062e:	4b06      	ldr	r3, [pc, #24]	; (8000648 <HAL_MspInit+0x44>)
 8000630:	69db      	ldr	r3, [r3, #28]
 8000632:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000636:	603b      	str	r3, [r7, #0]
 8000638:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800063a:	bf00      	nop
 800063c:	370c      	adds	r7, #12
 800063e:	46bd      	mov	sp, r7
 8000640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop
 8000648:	40021000 	.word	0x40021000

0800064c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b08a      	sub	sp, #40	; 0x28
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000654:	f107 0314 	add.w	r3, r7, #20
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
 800065c:	605a      	str	r2, [r3, #4]
 800065e:	609a      	str	r2, [r3, #8]
 8000660:	60da      	str	r2, [r3, #12]
 8000662:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4a17      	ldr	r2, [pc, #92]	; (80006c8 <HAL_I2C_MspInit+0x7c>)
 800066a:	4293      	cmp	r3, r2
 800066c:	d128      	bne.n	80006c0 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800066e:	4b17      	ldr	r3, [pc, #92]	; (80006cc <HAL_I2C_MspInit+0x80>)
 8000670:	695b      	ldr	r3, [r3, #20]
 8000672:	4a16      	ldr	r2, [pc, #88]	; (80006cc <HAL_I2C_MspInit+0x80>)
 8000674:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000678:	6153      	str	r3, [r2, #20]
 800067a:	4b14      	ldr	r3, [pc, #80]	; (80006cc <HAL_I2C_MspInit+0x80>)
 800067c:	695b      	ldr	r3, [r3, #20]
 800067e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000682:	613b      	str	r3, [r7, #16]
 8000684:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000686:	f44f 7340 	mov.w	r3, #768	; 0x300
 800068a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800068c:	2312      	movs	r3, #18
 800068e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000690:	2301      	movs	r3, #1
 8000692:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000694:	2303      	movs	r3, #3
 8000696:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000698:	2304      	movs	r3, #4
 800069a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800069c:	f107 0314 	add.w	r3, r7, #20
 80006a0:	4619      	mov	r1, r3
 80006a2:	480b      	ldr	r0, [pc, #44]	; (80006d0 <HAL_I2C_MspInit+0x84>)
 80006a4:	f000 fac2 	bl	8000c2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80006a8:	4b08      	ldr	r3, [pc, #32]	; (80006cc <HAL_I2C_MspInit+0x80>)
 80006aa:	69db      	ldr	r3, [r3, #28]
 80006ac:	4a07      	ldr	r2, [pc, #28]	; (80006cc <HAL_I2C_MspInit+0x80>)
 80006ae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006b2:	61d3      	str	r3, [r2, #28]
 80006b4:	4b05      	ldr	r3, [pc, #20]	; (80006cc <HAL_I2C_MspInit+0x80>)
 80006b6:	69db      	ldr	r3, [r3, #28]
 80006b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006bc:	60fb      	str	r3, [r7, #12]
 80006be:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80006c0:	bf00      	nop
 80006c2:	3728      	adds	r7, #40	; 0x28
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	40005400 	.word	0x40005400
 80006cc:	40021000 	.word	0x40021000
 80006d0:	48000400 	.word	0x48000400

080006d4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b085      	sub	sp, #20
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4a0d      	ldr	r2, [pc, #52]	; (8000718 <HAL_RTC_MspInit+0x44>)
 80006e2:	4293      	cmp	r3, r2
 80006e4:	d111      	bne.n	800070a <HAL_RTC_MspInit+0x36>
 80006e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80006ea:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	fa93 f3a3 	rbit	r3, r3
 80006f2:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80006f4:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80006f6:	fab3 f383 	clz	r3, r3
 80006fa:	b2db      	uxtb	r3, r3
 80006fc:	461a      	mov	r2, r3
 80006fe:	4b07      	ldr	r3, [pc, #28]	; (800071c <HAL_RTC_MspInit+0x48>)
 8000700:	4413      	add	r3, r2
 8000702:	009b      	lsls	r3, r3, #2
 8000704:	461a      	mov	r2, r3
 8000706:	2301      	movs	r3, #1
 8000708:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800070a:	bf00      	nop
 800070c:	3714      	adds	r7, #20
 800070e:	46bd      	mov	sp, r7
 8000710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000714:	4770      	bx	lr
 8000716:	bf00      	nop
 8000718:	40002800 	.word	0x40002800
 800071c:	10908100 	.word	0x10908100

08000720 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b08c      	sub	sp, #48	; 0x30
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000728:	f107 031c 	add.w	r3, r7, #28
 800072c:	2200      	movs	r2, #0
 800072e:	601a      	str	r2, [r3, #0]
 8000730:	605a      	str	r2, [r3, #4]
 8000732:	609a      	str	r2, [r3, #8]
 8000734:	60da      	str	r2, [r3, #12]
 8000736:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a2f      	ldr	r2, [pc, #188]	; (80007fc <HAL_UART_MspInit+0xdc>)
 800073e:	4293      	cmp	r3, r2
 8000740:	d129      	bne.n	8000796 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000742:	4b2f      	ldr	r3, [pc, #188]	; (8000800 <HAL_UART_MspInit+0xe0>)
 8000744:	69db      	ldr	r3, [r3, #28]
 8000746:	4a2e      	ldr	r2, [pc, #184]	; (8000800 <HAL_UART_MspInit+0xe0>)
 8000748:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800074c:	61d3      	str	r3, [r2, #28]
 800074e:	4b2c      	ldr	r3, [pc, #176]	; (8000800 <HAL_UART_MspInit+0xe0>)
 8000750:	69db      	ldr	r3, [r3, #28]
 8000752:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000756:	61bb      	str	r3, [r7, #24]
 8000758:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800075a:	4b29      	ldr	r3, [pc, #164]	; (8000800 <HAL_UART_MspInit+0xe0>)
 800075c:	695b      	ldr	r3, [r3, #20]
 800075e:	4a28      	ldr	r2, [pc, #160]	; (8000800 <HAL_UART_MspInit+0xe0>)
 8000760:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000764:	6153      	str	r3, [r2, #20]
 8000766:	4b26      	ldr	r3, [pc, #152]	; (8000800 <HAL_UART_MspInit+0xe0>)
 8000768:	695b      	ldr	r3, [r3, #20]
 800076a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800076e:	617b      	str	r3, [r7, #20]
 8000770:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000772:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000776:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000778:	2302      	movs	r3, #2
 800077a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077c:	2300      	movs	r3, #0
 800077e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000780:	2303      	movs	r3, #3
 8000782:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8000784:	2305      	movs	r3, #5
 8000786:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000788:	f107 031c 	add.w	r3, r7, #28
 800078c:	4619      	mov	r1, r3
 800078e:	481d      	ldr	r0, [pc, #116]	; (8000804 <HAL_UART_MspInit+0xe4>)
 8000790:	f000 fa4c 	bl	8000c2c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000794:	e02d      	b.n	80007f2 <HAL_UART_MspInit+0xd2>
  else if(huart->Instance==USART3)
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	4a1b      	ldr	r2, [pc, #108]	; (8000808 <HAL_UART_MspInit+0xe8>)
 800079c:	4293      	cmp	r3, r2
 800079e:	d128      	bne.n	80007f2 <HAL_UART_MspInit+0xd2>
    __HAL_RCC_USART3_CLK_ENABLE();
 80007a0:	4b17      	ldr	r3, [pc, #92]	; (8000800 <HAL_UART_MspInit+0xe0>)
 80007a2:	69db      	ldr	r3, [r3, #28]
 80007a4:	4a16      	ldr	r2, [pc, #88]	; (8000800 <HAL_UART_MspInit+0xe0>)
 80007a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80007aa:	61d3      	str	r3, [r2, #28]
 80007ac:	4b14      	ldr	r3, [pc, #80]	; (8000800 <HAL_UART_MspInit+0xe0>)
 80007ae:	69db      	ldr	r3, [r3, #28]
 80007b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80007b4:	613b      	str	r3, [r7, #16]
 80007b6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80007b8:	4b11      	ldr	r3, [pc, #68]	; (8000800 <HAL_UART_MspInit+0xe0>)
 80007ba:	695b      	ldr	r3, [r3, #20]
 80007bc:	4a10      	ldr	r2, [pc, #64]	; (8000800 <HAL_UART_MspInit+0xe0>)
 80007be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80007c2:	6153      	str	r3, [r2, #20]
 80007c4:	4b0e      	ldr	r3, [pc, #56]	; (8000800 <HAL_UART_MspInit+0xe0>)
 80007c6:	695b      	ldr	r3, [r3, #20]
 80007c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80007cc:	60fb      	str	r3, [r7, #12]
 80007ce:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80007d0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80007d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d6:	2302      	movs	r3, #2
 80007d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007da:	2300      	movs	r3, #0
 80007dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007de:	2303      	movs	r3, #3
 80007e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80007e2:	2307      	movs	r3, #7
 80007e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007e6:	f107 031c 	add.w	r3, r7, #28
 80007ea:	4619      	mov	r1, r3
 80007ec:	4807      	ldr	r0, [pc, #28]	; (800080c <HAL_UART_MspInit+0xec>)
 80007ee:	f000 fa1d 	bl	8000c2c <HAL_GPIO_Init>
}
 80007f2:	bf00      	nop
 80007f4:	3730      	adds	r7, #48	; 0x30
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	40004c00 	.word	0x40004c00
 8000800:	40021000 	.word	0x40021000
 8000804:	48000800 	.word	0x48000800
 8000808:	40004800 	.word	0x40004800
 800080c:	48000c00 	.word	0x48000c00

08000810 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b084      	sub	sp, #16
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4a0d      	ldr	r2, [pc, #52]	; (8000854 <HAL_PCD_MspInit+0x44>)
 800081e:	4293      	cmp	r3, r2
 8000820:	d113      	bne.n	800084a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000822:	4b0d      	ldr	r3, [pc, #52]	; (8000858 <HAL_PCD_MspInit+0x48>)
 8000824:	69db      	ldr	r3, [r3, #28]
 8000826:	4a0c      	ldr	r2, [pc, #48]	; (8000858 <HAL_PCD_MspInit+0x48>)
 8000828:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800082c:	61d3      	str	r3, [r2, #28]
 800082e:	4b0a      	ldr	r3, [pc, #40]	; (8000858 <HAL_PCD_MspInit+0x48>)
 8000830:	69db      	ldr	r3, [r3, #28]
 8000832:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000836:	60fb      	str	r3, [r7, #12]
 8000838:	68fb      	ldr	r3, [r7, #12]
    /* USB interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 800083a:	2200      	movs	r2, #0
 800083c:	2100      	movs	r1, #0
 800083e:	2014      	movs	r0, #20
 8000840:	f000 f9bd 	bl	8000bbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 8000844:	2014      	movs	r0, #20
 8000846:	f000 f9d6 	bl	8000bf6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 800084a:	bf00      	nop
 800084c:	3710      	adds	r7, #16
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	40005c00 	.word	0x40005c00
 8000858:	40021000 	.word	0x40021000

0800085c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000860:	e7fe      	b.n	8000860 <NMI_Handler+0x4>

08000862 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000862:	b480      	push	{r7}
 8000864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000866:	e7fe      	b.n	8000866 <HardFault_Handler+0x4>

08000868 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800086c:	e7fe      	b.n	800086c <MemManage_Handler+0x4>

0800086e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800086e:	b480      	push	{r7}
 8000870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000872:	e7fe      	b.n	8000872 <BusFault_Handler+0x4>

08000874 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000878:	e7fe      	b.n	8000878 <UsageFault_Handler+0x4>

0800087a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800087a:	b480      	push	{r7}
 800087c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800087e:	bf00      	nop
 8000880:	46bd      	mov	sp, r7
 8000882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000886:	4770      	bx	lr

08000888 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800088c:	bf00      	nop
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr

08000896 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000896:	b480      	push	{r7}
 8000898:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800089a:	bf00      	nop
 800089c:	46bd      	mov	sp, r7
 800089e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a2:	4770      	bx	lr

080008a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008a8:	f000 f88e 	bl	80009c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008ac:	bf00      	nop
 80008ae:	bd80      	pop	{r7, pc}

080008b0 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80008b4:	4802      	ldr	r0, [pc, #8]	; (80008c0 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 80008b6:	f000 fd5f 	bl	8001378 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	20000224 	.word	0x20000224

080008c4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008c8:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <SystemInit+0x20>)
 80008ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008ce:	4a05      	ldr	r2, [pc, #20]	; (80008e4 <SystemInit+0x20>)
 80008d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008d8:	bf00      	nop
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop
 80008e4:	e000ed00 	.word	0xe000ed00

080008e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80008e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000920 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008ec:	480d      	ldr	r0, [pc, #52]	; (8000924 <LoopForever+0x6>)
  ldr r1, =_edata
 80008ee:	490e      	ldr	r1, [pc, #56]	; (8000928 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008f0:	4a0e      	ldr	r2, [pc, #56]	; (800092c <LoopForever+0xe>)
  movs r3, #0
 80008f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008f4:	e002      	b.n	80008fc <LoopCopyDataInit>

080008f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008fa:	3304      	adds	r3, #4

080008fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000900:	d3f9      	bcc.n	80008f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000902:	4a0b      	ldr	r2, [pc, #44]	; (8000930 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000904:	4c0b      	ldr	r4, [pc, #44]	; (8000934 <LoopForever+0x16>)
  movs r3, #0
 8000906:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000908:	e001      	b.n	800090e <LoopFillZerobss>

0800090a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800090a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800090c:	3204      	adds	r2, #4

0800090e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800090e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000910:	d3fb      	bcc.n	800090a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000912:	f7ff ffd7 	bl	80008c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000916:	f004 ff15 	bl	8005744 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800091a:	f7ff fc5b 	bl	80001d4 <main>

0800091e <LoopForever>:

LoopForever:
    b LoopForever
 800091e:	e7fe      	b.n	800091e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000920:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000924:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000928:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800092c:	080057f4 	.word	0x080057f4
  ldr r2, =_sbss
 8000930:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000934:	20000514 	.word	0x20000514

08000938 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000938:	e7fe      	b.n	8000938 <ADC1_2_IRQHandler>
	...

0800093c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000940:	4b08      	ldr	r3, [pc, #32]	; (8000964 <HAL_Init+0x28>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a07      	ldr	r2, [pc, #28]	; (8000964 <HAL_Init+0x28>)
 8000946:	f043 0310 	orr.w	r3, r3, #16
 800094a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800094c:	2003      	movs	r0, #3
 800094e:	f000 f92b 	bl	8000ba8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000952:	2000      	movs	r0, #0
 8000954:	f000 f808 	bl	8000968 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000958:	f7ff fe54 	bl	8000604 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800095c:	2300      	movs	r3, #0
}
 800095e:	4618      	mov	r0, r3
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	40022000 	.word	0x40022000

08000968 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000970:	4b12      	ldr	r3, [pc, #72]	; (80009bc <HAL_InitTick+0x54>)
 8000972:	681a      	ldr	r2, [r3, #0]
 8000974:	4b12      	ldr	r3, [pc, #72]	; (80009c0 <HAL_InitTick+0x58>)
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	4619      	mov	r1, r3
 800097a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800097e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000982:	fbb2 f3f3 	udiv	r3, r2, r3
 8000986:	4618      	mov	r0, r3
 8000988:	f000 f943 	bl	8000c12 <HAL_SYSTICK_Config>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000992:	2301      	movs	r3, #1
 8000994:	e00e      	b.n	80009b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	2b0f      	cmp	r3, #15
 800099a:	d80a      	bhi.n	80009b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800099c:	2200      	movs	r2, #0
 800099e:	6879      	ldr	r1, [r7, #4]
 80009a0:	f04f 30ff 	mov.w	r0, #4294967295
 80009a4:	f000 f90b 	bl	8000bbe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009a8:	4a06      	ldr	r2, [pc, #24]	; (80009c4 <HAL_InitTick+0x5c>)
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80009ae:	2300      	movs	r3, #0
 80009b0:	e000      	b.n	80009b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009b2:	2301      	movs	r3, #1
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	3708      	adds	r7, #8
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	20000000 	.word	0x20000000
 80009c0:	20000008 	.word	0x20000008
 80009c4:	20000004 	.word	0x20000004

080009c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009cc:	4b06      	ldr	r3, [pc, #24]	; (80009e8 <HAL_IncTick+0x20>)
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	461a      	mov	r2, r3
 80009d2:	4b06      	ldr	r3, [pc, #24]	; (80009ec <HAL_IncTick+0x24>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	4413      	add	r3, r2
 80009d8:	4a04      	ldr	r2, [pc, #16]	; (80009ec <HAL_IncTick+0x24>)
 80009da:	6013      	str	r3, [r2, #0]
}
 80009dc:	bf00      	nop
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	20000008 	.word	0x20000008
 80009ec:	20000510 	.word	0x20000510

080009f0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  return uwTick;  
 80009f4:	4b03      	ldr	r3, [pc, #12]	; (8000a04 <HAL_GetTick+0x14>)
 80009f6:	681b      	ldr	r3, [r3, #0]
}
 80009f8:	4618      	mov	r0, r3
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop
 8000a04:	20000510 	.word	0x20000510

08000a08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b085      	sub	sp, #20
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	f003 0307 	and.w	r3, r3, #7
 8000a16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a18:	4b0c      	ldr	r3, [pc, #48]	; (8000a4c <__NVIC_SetPriorityGrouping+0x44>)
 8000a1a:	68db      	ldr	r3, [r3, #12]
 8000a1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a1e:	68ba      	ldr	r2, [r7, #8]
 8000a20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a24:	4013      	ands	r3, r2
 8000a26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a2c:	68bb      	ldr	r3, [r7, #8]
 8000a2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a3a:	4a04      	ldr	r2, [pc, #16]	; (8000a4c <__NVIC_SetPriorityGrouping+0x44>)
 8000a3c:	68bb      	ldr	r3, [r7, #8]
 8000a3e:	60d3      	str	r3, [r2, #12]
}
 8000a40:	bf00      	nop
 8000a42:	3714      	adds	r7, #20
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr
 8000a4c:	e000ed00 	.word	0xe000ed00

08000a50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a54:	4b04      	ldr	r3, [pc, #16]	; (8000a68 <__NVIC_GetPriorityGrouping+0x18>)
 8000a56:	68db      	ldr	r3, [r3, #12]
 8000a58:	0a1b      	lsrs	r3, r3, #8
 8000a5a:	f003 0307 	and.w	r3, r3, #7
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr
 8000a68:	e000ed00 	.word	0xe000ed00

08000a6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	4603      	mov	r3, r0
 8000a74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	db0b      	blt.n	8000a96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a7e:	79fb      	ldrb	r3, [r7, #7]
 8000a80:	f003 021f 	and.w	r2, r3, #31
 8000a84:	4907      	ldr	r1, [pc, #28]	; (8000aa4 <__NVIC_EnableIRQ+0x38>)
 8000a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a8a:	095b      	lsrs	r3, r3, #5
 8000a8c:	2001      	movs	r0, #1
 8000a8e:	fa00 f202 	lsl.w	r2, r0, r2
 8000a92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a96:	bf00      	nop
 8000a98:	370c      	adds	r7, #12
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop
 8000aa4:	e000e100 	.word	0xe000e100

08000aa8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b083      	sub	sp, #12
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	4603      	mov	r3, r0
 8000ab0:	6039      	str	r1, [r7, #0]
 8000ab2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ab4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	db0a      	blt.n	8000ad2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	b2da      	uxtb	r2, r3
 8000ac0:	490c      	ldr	r1, [pc, #48]	; (8000af4 <__NVIC_SetPriority+0x4c>)
 8000ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac6:	0112      	lsls	r2, r2, #4
 8000ac8:	b2d2      	uxtb	r2, r2
 8000aca:	440b      	add	r3, r1
 8000acc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ad0:	e00a      	b.n	8000ae8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	b2da      	uxtb	r2, r3
 8000ad6:	4908      	ldr	r1, [pc, #32]	; (8000af8 <__NVIC_SetPriority+0x50>)
 8000ad8:	79fb      	ldrb	r3, [r7, #7]
 8000ada:	f003 030f 	and.w	r3, r3, #15
 8000ade:	3b04      	subs	r3, #4
 8000ae0:	0112      	lsls	r2, r2, #4
 8000ae2:	b2d2      	uxtb	r2, r2
 8000ae4:	440b      	add	r3, r1
 8000ae6:	761a      	strb	r2, [r3, #24]
}
 8000ae8:	bf00      	nop
 8000aea:	370c      	adds	r7, #12
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr
 8000af4:	e000e100 	.word	0xe000e100
 8000af8:	e000ed00 	.word	0xe000ed00

08000afc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b089      	sub	sp, #36	; 0x24
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	60f8      	str	r0, [r7, #12]
 8000b04:	60b9      	str	r1, [r7, #8]
 8000b06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	f003 0307 	and.w	r3, r3, #7
 8000b0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b10:	69fb      	ldr	r3, [r7, #28]
 8000b12:	f1c3 0307 	rsb	r3, r3, #7
 8000b16:	2b04      	cmp	r3, #4
 8000b18:	bf28      	it	cs
 8000b1a:	2304      	movcs	r3, #4
 8000b1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b1e:	69fb      	ldr	r3, [r7, #28]
 8000b20:	3304      	adds	r3, #4
 8000b22:	2b06      	cmp	r3, #6
 8000b24:	d902      	bls.n	8000b2c <NVIC_EncodePriority+0x30>
 8000b26:	69fb      	ldr	r3, [r7, #28]
 8000b28:	3b03      	subs	r3, #3
 8000b2a:	e000      	b.n	8000b2e <NVIC_EncodePriority+0x32>
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b30:	f04f 32ff 	mov.w	r2, #4294967295
 8000b34:	69bb      	ldr	r3, [r7, #24]
 8000b36:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3a:	43da      	mvns	r2, r3
 8000b3c:	68bb      	ldr	r3, [r7, #8]
 8000b3e:	401a      	ands	r2, r3
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b44:	f04f 31ff 	mov.w	r1, #4294967295
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b4e:	43d9      	mvns	r1, r3
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b54:	4313      	orrs	r3, r2
         );
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	3724      	adds	r7, #36	; 0x24
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
	...

08000b64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	3b01      	subs	r3, #1
 8000b70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b74:	d301      	bcc.n	8000b7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b76:	2301      	movs	r3, #1
 8000b78:	e00f      	b.n	8000b9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b7a:	4a0a      	ldr	r2, [pc, #40]	; (8000ba4 <SysTick_Config+0x40>)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	3b01      	subs	r3, #1
 8000b80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b82:	210f      	movs	r1, #15
 8000b84:	f04f 30ff 	mov.w	r0, #4294967295
 8000b88:	f7ff ff8e 	bl	8000aa8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b8c:	4b05      	ldr	r3, [pc, #20]	; (8000ba4 <SysTick_Config+0x40>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b92:	4b04      	ldr	r3, [pc, #16]	; (8000ba4 <SysTick_Config+0x40>)
 8000b94:	2207      	movs	r2, #7
 8000b96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b98:	2300      	movs	r3, #0
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	3708      	adds	r7, #8
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	e000e010 	.word	0xe000e010

08000ba8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bb0:	6878      	ldr	r0, [r7, #4]
 8000bb2:	f7ff ff29 	bl	8000a08 <__NVIC_SetPriorityGrouping>
}
 8000bb6:	bf00      	nop
 8000bb8:	3708      	adds	r7, #8
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}

08000bbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bbe:	b580      	push	{r7, lr}
 8000bc0:	b086      	sub	sp, #24
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	60b9      	str	r1, [r7, #8]
 8000bc8:	607a      	str	r2, [r7, #4]
 8000bca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bd0:	f7ff ff3e 	bl	8000a50 <__NVIC_GetPriorityGrouping>
 8000bd4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bd6:	687a      	ldr	r2, [r7, #4]
 8000bd8:	68b9      	ldr	r1, [r7, #8]
 8000bda:	6978      	ldr	r0, [r7, #20]
 8000bdc:	f7ff ff8e 	bl	8000afc <NVIC_EncodePriority>
 8000be0:	4602      	mov	r2, r0
 8000be2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000be6:	4611      	mov	r1, r2
 8000be8:	4618      	mov	r0, r3
 8000bea:	f7ff ff5d 	bl	8000aa8 <__NVIC_SetPriority>
}
 8000bee:	bf00      	nop
 8000bf0:	3718      	adds	r7, #24
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}

08000bf6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bf6:	b580      	push	{r7, lr}
 8000bf8:	b082      	sub	sp, #8
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c04:	4618      	mov	r0, r3
 8000c06:	f7ff ff31 	bl	8000a6c <__NVIC_EnableIRQ>
}
 8000c0a:	bf00      	nop
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}

08000c12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c12:	b580      	push	{r7, lr}
 8000c14:	b082      	sub	sp, #8
 8000c16:	af00      	add	r7, sp, #0
 8000c18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c1a:	6878      	ldr	r0, [r7, #4]
 8000c1c:	f7ff ffa2 	bl	8000b64 <SysTick_Config>
 8000c20:	4603      	mov	r3, r0
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	3708      	adds	r7, #8
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
	...

08000c2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b087      	sub	sp, #28
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
 8000c34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c36:	2300      	movs	r3, #0
 8000c38:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c3a:	e160      	b.n	8000efe <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	681a      	ldr	r2, [r3, #0]
 8000c40:	2101      	movs	r1, #1
 8000c42:	697b      	ldr	r3, [r7, #20]
 8000c44:	fa01 f303 	lsl.w	r3, r1, r3
 8000c48:	4013      	ands	r3, r2
 8000c4a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	f000 8152 	beq.w	8000ef8 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	685b      	ldr	r3, [r3, #4]
 8000c58:	2b01      	cmp	r3, #1
 8000c5a:	d00b      	beq.n	8000c74 <HAL_GPIO_Init+0x48>
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	2b02      	cmp	r3, #2
 8000c62:	d007      	beq.n	8000c74 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c68:	2b11      	cmp	r3, #17
 8000c6a:	d003      	beq.n	8000c74 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	2b12      	cmp	r3, #18
 8000c72:	d130      	bne.n	8000cd6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	689b      	ldr	r3, [r3, #8]
 8000c78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	005b      	lsls	r3, r3, #1
 8000c7e:	2203      	movs	r2, #3
 8000c80:	fa02 f303 	lsl.w	r3, r2, r3
 8000c84:	43db      	mvns	r3, r3
 8000c86:	693a      	ldr	r2, [r7, #16]
 8000c88:	4013      	ands	r3, r2
 8000c8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	68da      	ldr	r2, [r3, #12]
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	005b      	lsls	r3, r3, #1
 8000c94:	fa02 f303 	lsl.w	r3, r2, r3
 8000c98:	693a      	ldr	r2, [r7, #16]
 8000c9a:	4313      	orrs	r3, r2
 8000c9c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	693a      	ldr	r2, [r7, #16]
 8000ca2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	685b      	ldr	r3, [r3, #4]
 8000ca8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000caa:	2201      	movs	r2, #1
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb2:	43db      	mvns	r3, r3
 8000cb4:	693a      	ldr	r2, [r7, #16]
 8000cb6:	4013      	ands	r3, r2
 8000cb8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	091b      	lsrs	r3, r3, #4
 8000cc0:	f003 0201 	and.w	r2, r3, #1
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cca:	693a      	ldr	r2, [r7, #16]
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	693a      	ldr	r2, [r7, #16]
 8000cd4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	68db      	ldr	r3, [r3, #12]
 8000cda:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	005b      	lsls	r3, r3, #1
 8000ce0:	2203      	movs	r2, #3
 8000ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce6:	43db      	mvns	r3, r3
 8000ce8:	693a      	ldr	r2, [r7, #16]
 8000cea:	4013      	ands	r3, r2
 8000cec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	689a      	ldr	r2, [r3, #8]
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	005b      	lsls	r3, r3, #1
 8000cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfa:	693a      	ldr	r2, [r7, #16]
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	693a      	ldr	r2, [r7, #16]
 8000d04:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	2b02      	cmp	r3, #2
 8000d0c:	d003      	beq.n	8000d16 <HAL_GPIO_Init+0xea>
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	2b12      	cmp	r3, #18
 8000d14:	d123      	bne.n	8000d5e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	08da      	lsrs	r2, r3, #3
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	3208      	adds	r2, #8
 8000d1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d22:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	f003 0307 	and.w	r3, r3, #7
 8000d2a:	009b      	lsls	r3, r3, #2
 8000d2c:	220f      	movs	r2, #15
 8000d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d32:	43db      	mvns	r3, r3
 8000d34:	693a      	ldr	r2, [r7, #16]
 8000d36:	4013      	ands	r3, r2
 8000d38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	691a      	ldr	r2, [r3, #16]
 8000d3e:	697b      	ldr	r3, [r7, #20]
 8000d40:	f003 0307 	and.w	r3, r3, #7
 8000d44:	009b      	lsls	r3, r3, #2
 8000d46:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4a:	693a      	ldr	r2, [r7, #16]
 8000d4c:	4313      	orrs	r3, r2
 8000d4e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	08da      	lsrs	r2, r3, #3
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	3208      	adds	r2, #8
 8000d58:	6939      	ldr	r1, [r7, #16]
 8000d5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	005b      	lsls	r3, r3, #1
 8000d68:	2203      	movs	r2, #3
 8000d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6e:	43db      	mvns	r3, r3
 8000d70:	693a      	ldr	r2, [r7, #16]
 8000d72:	4013      	ands	r3, r2
 8000d74:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	f003 0203 	and.w	r2, r3, #3
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	005b      	lsls	r3, r3, #1
 8000d82:	fa02 f303 	lsl.w	r3, r2, r3
 8000d86:	693a      	ldr	r2, [r7, #16]
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	693a      	ldr	r2, [r7, #16]
 8000d90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	f000 80ac 	beq.w	8000ef8 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000da0:	4b5e      	ldr	r3, [pc, #376]	; (8000f1c <HAL_GPIO_Init+0x2f0>)
 8000da2:	699b      	ldr	r3, [r3, #24]
 8000da4:	4a5d      	ldr	r2, [pc, #372]	; (8000f1c <HAL_GPIO_Init+0x2f0>)
 8000da6:	f043 0301 	orr.w	r3, r3, #1
 8000daa:	6193      	str	r3, [r2, #24]
 8000dac:	4b5b      	ldr	r3, [pc, #364]	; (8000f1c <HAL_GPIO_Init+0x2f0>)
 8000dae:	699b      	ldr	r3, [r3, #24]
 8000db0:	f003 0301 	and.w	r3, r3, #1
 8000db4:	60bb      	str	r3, [r7, #8]
 8000db6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000db8:	4a59      	ldr	r2, [pc, #356]	; (8000f20 <HAL_GPIO_Init+0x2f4>)
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	089b      	lsrs	r3, r3, #2
 8000dbe:	3302      	adds	r3, #2
 8000dc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dc4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	f003 0303 	and.w	r3, r3, #3
 8000dcc:	009b      	lsls	r3, r3, #2
 8000dce:	220f      	movs	r2, #15
 8000dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd4:	43db      	mvns	r3, r3
 8000dd6:	693a      	ldr	r2, [r7, #16]
 8000dd8:	4013      	ands	r3, r2
 8000dda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000de2:	d025      	beq.n	8000e30 <HAL_GPIO_Init+0x204>
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	4a4f      	ldr	r2, [pc, #316]	; (8000f24 <HAL_GPIO_Init+0x2f8>)
 8000de8:	4293      	cmp	r3, r2
 8000dea:	d01f      	beq.n	8000e2c <HAL_GPIO_Init+0x200>
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	4a4e      	ldr	r2, [pc, #312]	; (8000f28 <HAL_GPIO_Init+0x2fc>)
 8000df0:	4293      	cmp	r3, r2
 8000df2:	d019      	beq.n	8000e28 <HAL_GPIO_Init+0x1fc>
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	4a4d      	ldr	r2, [pc, #308]	; (8000f2c <HAL_GPIO_Init+0x300>)
 8000df8:	4293      	cmp	r3, r2
 8000dfa:	d013      	beq.n	8000e24 <HAL_GPIO_Init+0x1f8>
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	4a4c      	ldr	r2, [pc, #304]	; (8000f30 <HAL_GPIO_Init+0x304>)
 8000e00:	4293      	cmp	r3, r2
 8000e02:	d00d      	beq.n	8000e20 <HAL_GPIO_Init+0x1f4>
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	4a4b      	ldr	r2, [pc, #300]	; (8000f34 <HAL_GPIO_Init+0x308>)
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	d007      	beq.n	8000e1c <HAL_GPIO_Init+0x1f0>
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	4a4a      	ldr	r2, [pc, #296]	; (8000f38 <HAL_GPIO_Init+0x30c>)
 8000e10:	4293      	cmp	r3, r2
 8000e12:	d101      	bne.n	8000e18 <HAL_GPIO_Init+0x1ec>
 8000e14:	2306      	movs	r3, #6
 8000e16:	e00c      	b.n	8000e32 <HAL_GPIO_Init+0x206>
 8000e18:	2307      	movs	r3, #7
 8000e1a:	e00a      	b.n	8000e32 <HAL_GPIO_Init+0x206>
 8000e1c:	2305      	movs	r3, #5
 8000e1e:	e008      	b.n	8000e32 <HAL_GPIO_Init+0x206>
 8000e20:	2304      	movs	r3, #4
 8000e22:	e006      	b.n	8000e32 <HAL_GPIO_Init+0x206>
 8000e24:	2303      	movs	r3, #3
 8000e26:	e004      	b.n	8000e32 <HAL_GPIO_Init+0x206>
 8000e28:	2302      	movs	r3, #2
 8000e2a:	e002      	b.n	8000e32 <HAL_GPIO_Init+0x206>
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	e000      	b.n	8000e32 <HAL_GPIO_Init+0x206>
 8000e30:	2300      	movs	r3, #0
 8000e32:	697a      	ldr	r2, [r7, #20]
 8000e34:	f002 0203 	and.w	r2, r2, #3
 8000e38:	0092      	lsls	r2, r2, #2
 8000e3a:	4093      	lsls	r3, r2
 8000e3c:	693a      	ldr	r2, [r7, #16]
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e42:	4937      	ldr	r1, [pc, #220]	; (8000f20 <HAL_GPIO_Init+0x2f4>)
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	089b      	lsrs	r3, r3, #2
 8000e48:	3302      	adds	r3, #2
 8000e4a:	693a      	ldr	r2, [r7, #16]
 8000e4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e50:	4b3a      	ldr	r3, [pc, #232]	; (8000f3c <HAL_GPIO_Init+0x310>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	43db      	mvns	r3, r3
 8000e5a:	693a      	ldr	r2, [r7, #16]
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d003      	beq.n	8000e74 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000e6c:	693a      	ldr	r2, [r7, #16]
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	4313      	orrs	r3, r2
 8000e72:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e74:	4a31      	ldr	r2, [pc, #196]	; (8000f3c <HAL_GPIO_Init+0x310>)
 8000e76:	693b      	ldr	r3, [r7, #16]
 8000e78:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000e7a:	4b30      	ldr	r3, [pc, #192]	; (8000f3c <HAL_GPIO_Init+0x310>)
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	43db      	mvns	r3, r3
 8000e84:	693a      	ldr	r2, [r7, #16]
 8000e86:	4013      	ands	r3, r2
 8000e88:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d003      	beq.n	8000e9e <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000e96:	693a      	ldr	r2, [r7, #16]
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000e9e:	4a27      	ldr	r2, [pc, #156]	; (8000f3c <HAL_GPIO_Init+0x310>)
 8000ea0:	693b      	ldr	r3, [r7, #16]
 8000ea2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ea4:	4b25      	ldr	r3, [pc, #148]	; (8000f3c <HAL_GPIO_Init+0x310>)
 8000ea6:	689b      	ldr	r3, [r3, #8]
 8000ea8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	43db      	mvns	r3, r3
 8000eae:	693a      	ldr	r2, [r7, #16]
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d003      	beq.n	8000ec8 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000ec0:	693a      	ldr	r2, [r7, #16]
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000ec8:	4a1c      	ldr	r2, [pc, #112]	; (8000f3c <HAL_GPIO_Init+0x310>)
 8000eca:	693b      	ldr	r3, [r7, #16]
 8000ecc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ece:	4b1b      	ldr	r3, [pc, #108]	; (8000f3c <HAL_GPIO_Init+0x310>)
 8000ed0:	68db      	ldr	r3, [r3, #12]
 8000ed2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	43db      	mvns	r3, r3
 8000ed8:	693a      	ldr	r2, [r7, #16]
 8000eda:	4013      	ands	r3, r2
 8000edc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d003      	beq.n	8000ef2 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000eea:	693a      	ldr	r2, [r7, #16]
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000ef2:	4a12      	ldr	r2, [pc, #72]	; (8000f3c <HAL_GPIO_Init+0x310>)
 8000ef4:	693b      	ldr	r3, [r7, #16]
 8000ef6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	3301      	adds	r3, #1
 8000efc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	fa22 f303 	lsr.w	r3, r2, r3
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	f47f ae97 	bne.w	8000c3c <HAL_GPIO_Init+0x10>
  }
}
 8000f0e:	bf00      	nop
 8000f10:	bf00      	nop
 8000f12:	371c      	adds	r7, #28
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr
 8000f1c:	40021000 	.word	0x40021000
 8000f20:	40010000 	.word	0x40010000
 8000f24:	48000400 	.word	0x48000400
 8000f28:	48000800 	.word	0x48000800
 8000f2c:	48000c00 	.word	0x48000c00
 8000f30:	48001000 	.word	0x48001000
 8000f34:	48001400 	.word	0x48001400
 8000f38:	48001800 	.word	0x48001800
 8000f3c:	40010400 	.word	0x40010400

08000f40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	460b      	mov	r3, r1
 8000f4a:	807b      	strh	r3, [r7, #2]
 8000f4c:	4613      	mov	r3, r2
 8000f4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f50:	787b      	ldrb	r3, [r7, #1]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d003      	beq.n	8000f5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f56:	887a      	ldrh	r2, [r7, #2]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f5c:	e002      	b.n	8000f64 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f5e:	887a      	ldrh	r2, [r7, #2]
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f64:	bf00      	nop
 8000f66:	370c      	adds	r7, #12
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr

08000f70 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d101      	bne.n	8000f82 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	e081      	b.n	8001086 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d106      	bne.n	8000f9c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2200      	movs	r2, #0
 8000f92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000f96:	6878      	ldr	r0, [r7, #4]
 8000f98:	f7ff fb58 	bl	800064c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2224      	movs	r2, #36	; 0x24
 8000fa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f022 0201 	bic.w	r2, r2, #1
 8000fb2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	685a      	ldr	r2, [r3, #4]
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000fc0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	689a      	ldr	r2, [r3, #8]
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000fd0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	68db      	ldr	r3, [r3, #12]
 8000fd6:	2b01      	cmp	r3, #1
 8000fd8:	d107      	bne.n	8000fea <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	689a      	ldr	r2, [r3, #8]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000fe6:	609a      	str	r2, [r3, #8]
 8000fe8:	e006      	b.n	8000ff8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	689a      	ldr	r2, [r3, #8]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8000ff6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	68db      	ldr	r3, [r3, #12]
 8000ffc:	2b02      	cmp	r3, #2
 8000ffe:	d104      	bne.n	800100a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001008:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	687a      	ldr	r2, [r7, #4]
 8001012:	6812      	ldr	r2, [r2, #0]
 8001014:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001018:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800101c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	68da      	ldr	r2, [r3, #12]
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800102c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	691a      	ldr	r2, [r3, #16]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	695b      	ldr	r3, [r3, #20]
 8001036:	ea42 0103 	orr.w	r1, r2, r3
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	699b      	ldr	r3, [r3, #24]
 800103e:	021a      	lsls	r2, r3, #8
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	430a      	orrs	r2, r1
 8001046:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	69d9      	ldr	r1, [r3, #28]
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6a1a      	ldr	r2, [r3, #32]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	430a      	orrs	r2, r1
 8001056:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f042 0201 	orr.w	r2, r2, #1
 8001066:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2200      	movs	r2, #0
 800106c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2220      	movs	r2, #32
 8001072:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2200      	movs	r2, #0
 800107a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2200      	movs	r2, #0
 8001080:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001084:	2300      	movs	r3, #0
}
 8001086:	4618      	mov	r0, r3
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}

0800108e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800108e:	b480      	push	{r7}
 8001090:	b083      	sub	sp, #12
 8001092:	af00      	add	r7, sp, #0
 8001094:	6078      	str	r0, [r7, #4]
 8001096:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	2b20      	cmp	r3, #32
 80010a2:	d138      	bne.n	8001116 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d101      	bne.n	80010b2 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80010ae:	2302      	movs	r3, #2
 80010b0:	e032      	b.n	8001118 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2201      	movs	r2, #1
 80010b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2224      	movs	r2, #36	; 0x24
 80010be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f022 0201 	bic.w	r2, r2, #1
 80010d0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80010e0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	6819      	ldr	r1, [r3, #0]
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	683a      	ldr	r2, [r7, #0]
 80010ee:	430a      	orrs	r2, r1
 80010f0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f042 0201 	orr.w	r2, r2, #1
 8001100:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2220      	movs	r2, #32
 8001106:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2200      	movs	r2, #0
 800110e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001112:	2300      	movs	r3, #0
 8001114:	e000      	b.n	8001118 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001116:	2302      	movs	r3, #2
  }
}
 8001118:	4618      	mov	r0, r3
 800111a:	370c      	adds	r7, #12
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr

08001124 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001124:	b480      	push	{r7}
 8001126:	b085      	sub	sp, #20
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001134:	b2db      	uxtb	r3, r3
 8001136:	2b20      	cmp	r3, #32
 8001138:	d139      	bne.n	80011ae <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001140:	2b01      	cmp	r3, #1
 8001142:	d101      	bne.n	8001148 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001144:	2302      	movs	r3, #2
 8001146:	e033      	b.n	80011b0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2201      	movs	r2, #1
 800114c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2224      	movs	r2, #36	; 0x24
 8001154:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f022 0201 	bic.w	r2, r2, #1
 8001166:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001176:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	021b      	lsls	r3, r3, #8
 800117c:	68fa      	ldr	r2, [r7, #12]
 800117e:	4313      	orrs	r3, r2
 8001180:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	68fa      	ldr	r2, [r7, #12]
 8001188:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f042 0201 	orr.w	r2, r2, #1
 8001198:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2220      	movs	r2, #32
 800119e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2200      	movs	r2, #0
 80011a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80011aa:	2300      	movs	r3, #0
 80011ac:	e000      	b.n	80011b0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80011ae:	2302      	movs	r3, #2
  }
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3714      	adds	r7, #20
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr

080011bc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80011bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011be:	b08b      	sub	sp, #44	; 0x2c
 80011c0:	af06      	add	r7, sp, #24
 80011c2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d101      	bne.n	80011ce <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80011ca:	2301      	movs	r3, #1
 80011cc:	e0d0      	b.n	8001370 <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d106      	bne.n	80011e8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2200      	movs	r2, #0
 80011de:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80011e2:	6878      	ldr	r0, [r7, #4]
 80011e4:	f7ff fb14 	bl	8000810 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2203      	movs	r2, #3
 80011ec:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4618      	mov	r0, r3
 80011f6:	f003 f896 	bl	8004326 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011fa:	2300      	movs	r3, #0
 80011fc:	73fb      	strb	r3, [r7, #15]
 80011fe:	e04c      	b.n	800129a <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001200:	7bfb      	ldrb	r3, [r7, #15]
 8001202:	6879      	ldr	r1, [r7, #4]
 8001204:	1c5a      	adds	r2, r3, #1
 8001206:	4613      	mov	r3, r2
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	4413      	add	r3, r2
 800120c:	00db      	lsls	r3, r3, #3
 800120e:	440b      	add	r3, r1
 8001210:	3301      	adds	r3, #1
 8001212:	2201      	movs	r2, #1
 8001214:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001216:	7bfb      	ldrb	r3, [r7, #15]
 8001218:	6879      	ldr	r1, [r7, #4]
 800121a:	1c5a      	adds	r2, r3, #1
 800121c:	4613      	mov	r3, r2
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	4413      	add	r3, r2
 8001222:	00db      	lsls	r3, r3, #3
 8001224:	440b      	add	r3, r1
 8001226:	7bfa      	ldrb	r2, [r7, #15]
 8001228:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800122a:	7bfa      	ldrb	r2, [r7, #15]
 800122c:	7bfb      	ldrb	r3, [r7, #15]
 800122e:	b298      	uxth	r0, r3
 8001230:	6879      	ldr	r1, [r7, #4]
 8001232:	4613      	mov	r3, r2
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	4413      	add	r3, r2
 8001238:	00db      	lsls	r3, r3, #3
 800123a:	440b      	add	r3, r1
 800123c:	3336      	adds	r3, #54	; 0x36
 800123e:	4602      	mov	r2, r0
 8001240:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001242:	7bfb      	ldrb	r3, [r7, #15]
 8001244:	6879      	ldr	r1, [r7, #4]
 8001246:	1c5a      	adds	r2, r3, #1
 8001248:	4613      	mov	r3, r2
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	4413      	add	r3, r2
 800124e:	00db      	lsls	r3, r3, #3
 8001250:	440b      	add	r3, r1
 8001252:	3303      	adds	r3, #3
 8001254:	2200      	movs	r2, #0
 8001256:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001258:	7bfa      	ldrb	r2, [r7, #15]
 800125a:	6879      	ldr	r1, [r7, #4]
 800125c:	4613      	mov	r3, r2
 800125e:	009b      	lsls	r3, r3, #2
 8001260:	4413      	add	r3, r2
 8001262:	00db      	lsls	r3, r3, #3
 8001264:	440b      	add	r3, r1
 8001266:	3338      	adds	r3, #56	; 0x38
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800126c:	7bfa      	ldrb	r2, [r7, #15]
 800126e:	6879      	ldr	r1, [r7, #4]
 8001270:	4613      	mov	r3, r2
 8001272:	009b      	lsls	r3, r3, #2
 8001274:	4413      	add	r3, r2
 8001276:	00db      	lsls	r3, r3, #3
 8001278:	440b      	add	r3, r1
 800127a:	333c      	adds	r3, #60	; 0x3c
 800127c:	2200      	movs	r2, #0
 800127e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001280:	7bfa      	ldrb	r2, [r7, #15]
 8001282:	6879      	ldr	r1, [r7, #4]
 8001284:	4613      	mov	r3, r2
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	4413      	add	r3, r2
 800128a:	00db      	lsls	r3, r3, #3
 800128c:	440b      	add	r3, r1
 800128e:	3340      	adds	r3, #64	; 0x40
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001294:	7bfb      	ldrb	r3, [r7, #15]
 8001296:	3301      	adds	r3, #1
 8001298:	73fb      	strb	r3, [r7, #15]
 800129a:	7bfa      	ldrb	r2, [r7, #15]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	429a      	cmp	r2, r3
 80012a2:	d3ad      	bcc.n	8001200 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012a4:	2300      	movs	r3, #0
 80012a6:	73fb      	strb	r3, [r7, #15]
 80012a8:	e044      	b.n	8001334 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80012aa:	7bfa      	ldrb	r2, [r7, #15]
 80012ac:	6879      	ldr	r1, [r7, #4]
 80012ae:	4613      	mov	r3, r2
 80012b0:	009b      	lsls	r3, r3, #2
 80012b2:	4413      	add	r3, r2
 80012b4:	00db      	lsls	r3, r3, #3
 80012b6:	440b      	add	r3, r1
 80012b8:	f203 1369 	addw	r3, r3, #361	; 0x169
 80012bc:	2200      	movs	r2, #0
 80012be:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80012c0:	7bfa      	ldrb	r2, [r7, #15]
 80012c2:	6879      	ldr	r1, [r7, #4]
 80012c4:	4613      	mov	r3, r2
 80012c6:	009b      	lsls	r3, r3, #2
 80012c8:	4413      	add	r3, r2
 80012ca:	00db      	lsls	r3, r3, #3
 80012cc:	440b      	add	r3, r1
 80012ce:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80012d2:	7bfa      	ldrb	r2, [r7, #15]
 80012d4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80012d6:	7bfa      	ldrb	r2, [r7, #15]
 80012d8:	6879      	ldr	r1, [r7, #4]
 80012da:	4613      	mov	r3, r2
 80012dc:	009b      	lsls	r3, r3, #2
 80012de:	4413      	add	r3, r2
 80012e0:	00db      	lsls	r3, r3, #3
 80012e2:	440b      	add	r3, r1
 80012e4:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80012e8:	2200      	movs	r2, #0
 80012ea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80012ec:	7bfa      	ldrb	r2, [r7, #15]
 80012ee:	6879      	ldr	r1, [r7, #4]
 80012f0:	4613      	mov	r3, r2
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	4413      	add	r3, r2
 80012f6:	00db      	lsls	r3, r3, #3
 80012f8:	440b      	add	r3, r1
 80012fa:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80012fe:	2200      	movs	r2, #0
 8001300:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001302:	7bfa      	ldrb	r2, [r7, #15]
 8001304:	6879      	ldr	r1, [r7, #4]
 8001306:	4613      	mov	r3, r2
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	4413      	add	r3, r2
 800130c:	00db      	lsls	r3, r3, #3
 800130e:	440b      	add	r3, r1
 8001310:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001318:	7bfa      	ldrb	r2, [r7, #15]
 800131a:	6879      	ldr	r1, [r7, #4]
 800131c:	4613      	mov	r3, r2
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	4413      	add	r3, r2
 8001322:	00db      	lsls	r3, r3, #3
 8001324:	440b      	add	r3, r1
 8001326:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800132a:	2200      	movs	r2, #0
 800132c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800132e:	7bfb      	ldrb	r3, [r7, #15]
 8001330:	3301      	adds	r3, #1
 8001332:	73fb      	strb	r3, [r7, #15]
 8001334:	7bfa      	ldrb	r2, [r7, #15]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	429a      	cmp	r2, r3
 800133c:	d3b5      	bcc.n	80012aa <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	603b      	str	r3, [r7, #0]
 8001344:	687e      	ldr	r6, [r7, #4]
 8001346:	466d      	mov	r5, sp
 8001348:	f106 0410 	add.w	r4, r6, #16
 800134c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800134e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001350:	6823      	ldr	r3, [r4, #0]
 8001352:	602b      	str	r3, [r5, #0]
 8001354:	1d33      	adds	r3, r6, #4
 8001356:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001358:	6838      	ldr	r0, [r7, #0]
 800135a:	f002 ffff 	bl	800435c <USB_DevInit>

  hpcd->USB_Address = 0U;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2200      	movs	r2, #0
 8001362:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2201      	movs	r2, #1
 800136a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 800136e:	2300      	movs	r3, #0
}
 8001370:	4618      	mov	r0, r3
 8001372:	3714      	adds	r7, #20
 8001374:	46bd      	mov	sp, r7
 8001376:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001378 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4618      	mov	r0, r3
 8001386:	f004 f93e 	bl	8005606 <USB_ReadInterrupts>
 800138a:	4603      	mov	r3, r0
 800138c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001390:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001394:	d102      	bne.n	800139c <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	f000 f954 	bl	8001644 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4618      	mov	r0, r3
 80013a2:	f004 f930 	bl	8005606 <USB_ReadInterrupts>
 80013a6:	4603      	mov	r3, r0
 80013a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013b0:	d112      	bne.n	80013d8 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80013ba:	b29a      	uxth	r2, r3
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80013c4:	b292      	uxth	r2, r2
 80013c6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	f000 f8f7 	bl	80015be <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80013d0:	2100      	movs	r1, #0
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	f000 f911 	bl	80015fa <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4618      	mov	r0, r3
 80013de:	f004 f912 	bl	8005606 <USB_ReadInterrupts>
 80013e2:	4603      	mov	r3, r0
 80013e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80013ec:	d10b      	bne.n	8001406 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80013f6:	b29a      	uxth	r2, r3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001400:	b292      	uxth	r2, r2
 8001402:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4618      	mov	r0, r3
 800140c:	f004 f8fb 	bl	8005606 <USB_ReadInterrupts>
 8001410:	4603      	mov	r3, r0
 8001412:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001416:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800141a:	d10b      	bne.n	8001434 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001424:	b29a      	uxth	r2, r3
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800142e:	b292      	uxth	r2, r2
 8001430:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4618      	mov	r0, r3
 800143a:	f004 f8e4 	bl	8005606 <USB_ReadInterrupts>
 800143e:	4603      	mov	r3, r0
 8001440:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001444:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001448:	d126      	bne.n	8001498 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001452:	b29a      	uxth	r2, r3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f022 0204 	bic.w	r2, r2, #4
 800145c:	b292      	uxth	r2, r2
 800145e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800146a:	b29a      	uxth	r2, r3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f022 0208 	bic.w	r2, r2, #8
 8001474:	b292      	uxth	r2, r2
 8001476:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800147a:	6878      	ldr	r0, [r7, #4]
 800147c:	f000 f8b3 	bl	80015e6 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001488:	b29a      	uxth	r2, r3
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001492:	b292      	uxth	r2, r2
 8001494:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4618      	mov	r0, r3
 800149e:	f004 f8b2 	bl	8005606 <USB_ReadInterrupts>
 80014a2:	4603      	mov	r3, r0
 80014a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80014a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80014ac:	d126      	bne.n	80014fc <HAL_PCD_IRQHandler+0x184>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80014b6:	b29a      	uxth	r2, r3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f042 0208 	orr.w	r2, r2, #8
 80014c0:	b292      	uxth	r2, r2
 80014c2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80014ce:	b29a      	uxth	r2, r3
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80014d8:	b292      	uxth	r2, r2
 80014da:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80014e6:	b29a      	uxth	r2, r3
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f042 0204 	orr.w	r2, r2, #4
 80014f0:	b292      	uxth	r2, r2
 80014f2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	f000 f86b 	bl	80015d2 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4618      	mov	r0, r3
 8001502:	f004 f880 	bl	8005606 <USB_ReadInterrupts>
 8001506:	4603      	mov	r3, r0
 8001508:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800150c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001510:	d10e      	bne.n	8001530 <HAL_PCD_IRQHandler+0x1b8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800151a:	b29a      	uxth	r2, r3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001524:	b292      	uxth	r2, r2
 8001526:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f000 f83d 	bl	80015aa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4618      	mov	r0, r3
 8001536:	f004 f866 	bl	8005606 <USB_ReadInterrupts>
 800153a:	4603      	mov	r3, r0
 800153c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001540:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001544:	d10b      	bne.n	800155e <HAL_PCD_IRQHandler+0x1e6>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800154e:	b29a      	uxth	r2, r3
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001558:	b292      	uxth	r2, r2
 800155a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800155e:	bf00      	nop
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}

08001566 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8001566:	b480      	push	{r7}
 8001568:	b083      	sub	sp, #12
 800156a:	af00      	add	r7, sp, #0
 800156c:	6078      	str	r0, [r7, #4]
 800156e:	460b      	mov	r3, r1
 8001570:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataOutStageCallback could be implemented in the user file
   */
}
 8001572:	bf00      	nop
 8001574:	370c      	adds	r7, #12
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr

0800157e <HAL_PCD_DataInStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800157e:	b480      	push	{r7}
 8001580:	b083      	sub	sp, #12
 8001582:	af00      	add	r7, sp, #0
 8001584:	6078      	str	r0, [r7, #4]
 8001586:	460b      	mov	r3, r1
 8001588:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataInStageCallback could be implemented in the user file
   */
}
 800158a:	bf00      	nop
 800158c:	370c      	adds	r7, #12
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr

08001596 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8001596:	b480      	push	{r7}
 8001598:	b083      	sub	sp, #12
 800159a:	af00      	add	r7, sp, #0
 800159c:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SetupStageCallback could be implemented in the user file
   */
}
 800159e:	bf00      	nop
 80015a0:	370c      	adds	r7, #12
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr

080015aa <HAL_PCD_SOFCallback>:
  * @brief  USB Start Of Frame callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 80015aa:	b480      	push	{r7}
 80015ac:	b083      	sub	sp, #12
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */
}
 80015b2:	bf00      	nop
 80015b4:	370c      	adds	r7, #12
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr

080015be <HAL_PCD_ResetCallback>:
  * @brief  USB Reset callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 80015be:	b480      	push	{r7}
 80015c0:	b083      	sub	sp, #12
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResetCallback could be implemented in the user file
   */
}
 80015c6:	bf00      	nop
 80015c8:	370c      	adds	r7, #12
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr

080015d2 <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 80015d2:	b480      	push	{r7}
 80015d4:	b083      	sub	sp, #12
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 80015da:	bf00      	nop
 80015dc:	370c      	adds	r7, #12
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr

080015e6 <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 80015e6:	b480      	push	{r7}
 80015e8:	b083      	sub	sp, #12
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 80015ee:	bf00      	nop
 80015f0:	370c      	adds	r7, #12
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr

080015fa <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80015fa:	b580      	push	{r7, lr}
 80015fc:	b082      	sub	sp, #8
 80015fe:	af00      	add	r7, sp, #0
 8001600:	6078      	str	r0, [r7, #4]
 8001602:	460b      	mov	r3, r1
 8001604:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800160c:	2b01      	cmp	r3, #1
 800160e:	d101      	bne.n	8001614 <HAL_PCD_SetAddress+0x1a>
 8001610:	2302      	movs	r3, #2
 8001612:	e013      	b.n	800163c <HAL_PCD_SetAddress+0x42>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2201      	movs	r2, #1
 8001618:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	78fa      	ldrb	r2, [r7, #3]
 8001620:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	78fa      	ldrb	r2, [r7, #3]
 800162a:	4611      	mov	r1, r2
 800162c:	4618      	mov	r0, r3
 800162e:	f003 ffd6 	bl	80055de <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2200      	movs	r2, #0
 8001636:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800163a:	2300      	movs	r3, #0
}
 800163c:	4618      	mov	r0, r3
 800163e:	3708      	adds	r7, #8
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}

08001644 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b08e      	sub	sp, #56	; 0x38
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800164c:	e2d1      	b.n	8001bf2 <PCD_EP_ISR_Handler+0x5ae>
  {
    wIstr = hpcd->Instance->ISTR;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001656:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001658:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800165a:	b2db      	uxtb	r3, r3
 800165c:	f003 030f 	and.w	r3, r3, #15
 8001660:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001664:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001668:	2b00      	cmp	r3, #0
 800166a:	f040 8152 	bne.w	8001912 <PCD_EP_ISR_Handler+0x2ce>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800166e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001670:	f003 0310 	and.w	r3, r3, #16
 8001674:	2b00      	cmp	r3, #0
 8001676:	d150      	bne.n	800171a <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	881b      	ldrh	r3, [r3, #0]
 800167e:	b29b      	uxth	r3, r3
 8001680:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001684:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001688:	81fb      	strh	r3, [r7, #14]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	89fb      	ldrh	r3, [r7, #14]
 8001690:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001694:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001698:	b29b      	uxth	r3, r3
 800169a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	3328      	adds	r3, #40	; 0x28
 80016a0:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80016aa:	b29b      	uxth	r3, r3
 80016ac:	461a      	mov	r2, r3
 80016ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	00db      	lsls	r3, r3, #3
 80016b4:	4413      	add	r3, r2
 80016b6:	687a      	ldr	r2, [r7, #4]
 80016b8:	6812      	ldr	r2, [r2, #0]
 80016ba:	4413      	add	r3, r2
 80016bc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80016c0:	881b      	ldrh	r3, [r3, #0]
 80016c2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80016c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80016ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016cc:	695a      	ldr	r2, [r3, #20]
 80016ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d0:	69db      	ldr	r3, [r3, #28]
 80016d2:	441a      	add	r2, r3
 80016d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d6:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80016d8:	2100      	movs	r1, #0
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f7ff ff4f 	bl	800157e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80016e6:	b2db      	uxtb	r3, r3
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	f000 8282 	beq.w	8001bf2 <PCD_EP_ISR_Handler+0x5ae>
 80016ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f0:	699b      	ldr	r3, [r3, #24]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	f040 827d 	bne.w	8001bf2 <PCD_EP_ISR_Handler+0x5ae>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001704:	b2da      	uxtb	r2, r3
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	b292      	uxth	r2, r2
 800170c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2200      	movs	r2, #0
 8001714:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001718:	e26b      	b.n	8001bf2 <PCD_EP_ISR_Handler+0x5ae>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001720:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	881b      	ldrh	r3, [r3, #0]
 8001728:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800172a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800172c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001730:	2b00      	cmp	r3, #0
 8001732:	d032      	beq.n	800179a <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800173c:	b29b      	uxth	r3, r3
 800173e:	461a      	mov	r2, r3
 8001740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	00db      	lsls	r3, r3, #3
 8001746:	4413      	add	r3, r2
 8001748:	687a      	ldr	r2, [r7, #4]
 800174a:	6812      	ldr	r2, [r2, #0]
 800174c:	4413      	add	r3, r2
 800174e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001752:	881b      	ldrh	r3, [r3, #0]
 8001754:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800175a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6818      	ldr	r0, [r3, #0]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001768:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800176a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800176c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800176e:	b29b      	uxth	r3, r3
 8001770:	f003 ff9b 	bl	80056aa <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	881b      	ldrh	r3, [r3, #0]
 800177a:	b29a      	uxth	r2, r3
 800177c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001780:	4013      	ands	r3, r2
 8001782:	823b      	strh	r3, [r7, #16]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	8a3a      	ldrh	r2, [r7, #16]
 800178a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800178e:	b292      	uxth	r2, r2
 8001790:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001792:	6878      	ldr	r0, [r7, #4]
 8001794:	f7ff feff 	bl	8001596 <HAL_PCD_SetupStageCallback>
 8001798:	e22b      	b.n	8001bf2 <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800179a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800179e:	2b00      	cmp	r3, #0
 80017a0:	f280 8227 	bge.w	8001bf2 <PCD_EP_ISR_Handler+0x5ae>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	881b      	ldrh	r3, [r3, #0]
 80017aa:	b29a      	uxth	r2, r3
 80017ac:	f640 738f 	movw	r3, #3983	; 0xf8f
 80017b0:	4013      	ands	r3, r2
 80017b2:	83bb      	strh	r3, [r7, #28]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	8bba      	ldrh	r2, [r7, #28]
 80017ba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80017be:	b292      	uxth	r2, r2
 80017c0:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80017ca:	b29b      	uxth	r3, r3
 80017cc:	461a      	mov	r2, r3
 80017ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	00db      	lsls	r3, r3, #3
 80017d4:	4413      	add	r3, r2
 80017d6:	687a      	ldr	r2, [r7, #4]
 80017d8:	6812      	ldr	r2, [r2, #0]
 80017da:	4413      	add	r3, r2
 80017dc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80017e0:	881b      	ldrh	r3, [r3, #0]
 80017e2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80017e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e8:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80017ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ec:	69db      	ldr	r3, [r3, #28]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d019      	beq.n	8001826 <PCD_EP_ISR_Handler+0x1e2>
 80017f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f4:	695b      	ldr	r3, [r3, #20]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d015      	beq.n	8001826 <PCD_EP_ISR_Handler+0x1e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6818      	ldr	r0, [r3, #0]
 80017fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001800:	6959      	ldr	r1, [r3, #20]
 8001802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001804:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001808:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800180a:	b29b      	uxth	r3, r3
 800180c:	f003 ff4d 	bl	80056aa <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001812:	695a      	ldr	r2, [r3, #20]
 8001814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001816:	69db      	ldr	r3, [r3, #28]
 8001818:	441a      	add	r2, r3
 800181a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800181c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800181e:	2100      	movs	r1, #0
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	f7ff fea0 	bl	8001566 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	61bb      	str	r3, [r7, #24]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001834:	b29b      	uxth	r3, r3
 8001836:	461a      	mov	r2, r3
 8001838:	69bb      	ldr	r3, [r7, #24]
 800183a:	4413      	add	r3, r2
 800183c:	61bb      	str	r3, [r7, #24]
 800183e:	69bb      	ldr	r3, [r7, #24]
 8001840:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001844:	617b      	str	r3, [r7, #20]
 8001846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001848:	691b      	ldr	r3, [r3, #16]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d112      	bne.n	8001874 <PCD_EP_ISR_Handler+0x230>
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	881b      	ldrh	r3, [r3, #0]
 8001852:	b29b      	uxth	r3, r3
 8001854:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001858:	b29a      	uxth	r2, r3
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	801a      	strh	r2, [r3, #0]
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	881b      	ldrh	r3, [r3, #0]
 8001862:	b29b      	uxth	r3, r3
 8001864:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001868:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800186c:	b29a      	uxth	r2, r3
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	801a      	strh	r2, [r3, #0]
 8001872:	e02f      	b.n	80018d4 <PCD_EP_ISR_Handler+0x290>
 8001874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001876:	691b      	ldr	r3, [r3, #16]
 8001878:	2b3e      	cmp	r3, #62	; 0x3e
 800187a:	d813      	bhi.n	80018a4 <PCD_EP_ISR_Handler+0x260>
 800187c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187e:	691b      	ldr	r3, [r3, #16]
 8001880:	085b      	lsrs	r3, r3, #1
 8001882:	633b      	str	r3, [r7, #48]	; 0x30
 8001884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001886:	691b      	ldr	r3, [r3, #16]
 8001888:	f003 0301 	and.w	r3, r3, #1
 800188c:	2b00      	cmp	r3, #0
 800188e:	d002      	beq.n	8001896 <PCD_EP_ISR_Handler+0x252>
 8001890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001892:	3301      	adds	r3, #1
 8001894:	633b      	str	r3, [r7, #48]	; 0x30
 8001896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001898:	b29b      	uxth	r3, r3
 800189a:	029b      	lsls	r3, r3, #10
 800189c:	b29a      	uxth	r2, r3
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	801a      	strh	r2, [r3, #0]
 80018a2:	e017      	b.n	80018d4 <PCD_EP_ISR_Handler+0x290>
 80018a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a6:	691b      	ldr	r3, [r3, #16]
 80018a8:	095b      	lsrs	r3, r3, #5
 80018aa:	633b      	str	r3, [r7, #48]	; 0x30
 80018ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ae:	691b      	ldr	r3, [r3, #16]
 80018b0:	f003 031f 	and.w	r3, r3, #31
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d102      	bne.n	80018be <PCD_EP_ISR_Handler+0x27a>
 80018b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018ba:	3b01      	subs	r3, #1
 80018bc:	633b      	str	r3, [r7, #48]	; 0x30
 80018be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018c0:	b29b      	uxth	r3, r3
 80018c2:	029b      	lsls	r3, r3, #10
 80018c4:	b29b      	uxth	r3, r3
 80018c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80018ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80018ce:	b29a      	uxth	r2, r3
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	881b      	ldrh	r3, [r3, #0]
 80018da:	b29b      	uxth	r3, r3
 80018dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80018e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80018e4:	827b      	strh	r3, [r7, #18]
 80018e6:	8a7b      	ldrh	r3, [r7, #18]
 80018e8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80018ec:	827b      	strh	r3, [r7, #18]
 80018ee:	8a7b      	ldrh	r3, [r7, #18]
 80018f0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80018f4:	827b      	strh	r3, [r7, #18]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	8a7b      	ldrh	r3, [r7, #18]
 80018fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001900:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001904:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001908:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800190c:	b29b      	uxth	r3, r3
 800190e:	8013      	strh	r3, [r2, #0]
 8001910:	e16f      	b.n	8001bf2 <PCD_EP_ISR_Handler+0x5ae>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	461a      	mov	r2, r3
 8001918:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	4413      	add	r3, r2
 8001920:	881b      	ldrh	r3, [r3, #0]
 8001922:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001924:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001928:	2b00      	cmp	r3, #0
 800192a:	f280 80e4 	bge.w	8001af6 <PCD_EP_ISR_Handler+0x4b2>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	461a      	mov	r2, r3
 8001934:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	4413      	add	r3, r2
 800193c:	881b      	ldrh	r3, [r3, #0]
 800193e:	b29a      	uxth	r2, r3
 8001940:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001944:	4013      	ands	r3, r2
 8001946:	853b      	strh	r3, [r7, #40]	; 0x28
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	461a      	mov	r2, r3
 800194e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	4413      	add	r3, r2
 8001956:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001958:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800195c:	b292      	uxth	r2, r2
 800195e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001960:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001964:	4613      	mov	r3, r2
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	4413      	add	r3, r2
 800196a:	00db      	lsls	r3, r3, #3
 800196c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001970:	687a      	ldr	r2, [r7, #4]
 8001972:	4413      	add	r3, r2
 8001974:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001978:	7b1b      	ldrb	r3, [r3, #12]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d120      	bne.n	80019c0 <PCD_EP_ISR_Handler+0x37c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001986:	b29b      	uxth	r3, r3
 8001988:	461a      	mov	r2, r3
 800198a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	00db      	lsls	r3, r3, #3
 8001990:	4413      	add	r3, r2
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	6812      	ldr	r2, [r2, #0]
 8001996:	4413      	add	r3, r2
 8001998:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800199c:	881b      	ldrh	r3, [r3, #0]
 800199e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80019a2:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80019a4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	f000 8083 	beq.w	8001ab2 <PCD_EP_ISR_Handler+0x46e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6818      	ldr	r0, [r3, #0]
 80019b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b2:	6959      	ldr	r1, [r3, #20]
 80019b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b6:	88da      	ldrh	r2, [r3, #6]
 80019b8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80019ba:	f003 fe76 	bl	80056aa <USB_ReadPMA>
 80019be:	e078      	b.n	8001ab2 <PCD_EP_ISR_Handler+0x46e>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80019c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c2:	78db      	ldrb	r3, [r3, #3]
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	d108      	bne.n	80019da <PCD_EP_ISR_Handler+0x396>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80019c8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80019ca:	461a      	mov	r2, r3
 80019cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f000 f91d 	bl	8001c0e <HAL_PCD_EP_DB_Receive>
 80019d4:	4603      	mov	r3, r0
 80019d6:	86fb      	strh	r3, [r7, #54]	; 0x36
 80019d8:	e06b      	b.n	8001ab2 <PCD_EP_ISR_Handler+0x46e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	461a      	mov	r2, r3
 80019e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	4413      	add	r3, r2
 80019e8:	881b      	ldrh	r3, [r3, #0]
 80019ea:	b29b      	uxth	r3, r3
 80019ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80019f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019f4:	847b      	strh	r3, [r7, #34]	; 0x22
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	461a      	mov	r2, r3
 80019fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	441a      	add	r2, r3
 8001a04:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001a06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001a0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001a0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a12:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001a16:	b29b      	uxth	r3, r3
 8001a18:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	461a      	mov	r2, r3
 8001a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	009b      	lsls	r3, r3, #2
 8001a26:	4413      	add	r3, r2
 8001a28:	881b      	ldrh	r3, [r3, #0]
 8001a2a:	b29b      	uxth	r3, r3
 8001a2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d01f      	beq.n	8001a74 <PCD_EP_ISR_Handler+0x430>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a3c:	b29b      	uxth	r3, r3
 8001a3e:	461a      	mov	r2, r3
 8001a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	00db      	lsls	r3, r3, #3
 8001a46:	4413      	add	r3, r2
 8001a48:	687a      	ldr	r2, [r7, #4]
 8001a4a:	6812      	ldr	r2, [r2, #0]
 8001a4c:	4413      	add	r3, r2
 8001a4e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001a52:	881b      	ldrh	r3, [r3, #0]
 8001a54:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a58:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001a5a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d028      	beq.n	8001ab2 <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6818      	ldr	r0, [r3, #0]
 8001a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a66:	6959      	ldr	r1, [r3, #20]
 8001a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6a:	891a      	ldrh	r2, [r3, #8]
 8001a6c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001a6e:	f003 fe1c 	bl	80056aa <USB_ReadPMA>
 8001a72:	e01e      	b.n	8001ab2 <PCD_EP_ISR_Handler+0x46e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a7c:	b29b      	uxth	r3, r3
 8001a7e:	461a      	mov	r2, r3
 8001a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	00db      	lsls	r3, r3, #3
 8001a86:	4413      	add	r3, r2
 8001a88:	687a      	ldr	r2, [r7, #4]
 8001a8a:	6812      	ldr	r2, [r2, #0]
 8001a8c:	4413      	add	r3, r2
 8001a8e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001a92:	881b      	ldrh	r3, [r3, #0]
 8001a94:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a98:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001a9a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d008      	beq.n	8001ab2 <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6818      	ldr	r0, [r3, #0]
 8001aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa6:	6959      	ldr	r1, [r3, #20]
 8001aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aaa:	895a      	ldrh	r2, [r3, #10]
 8001aac:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001aae:	f003 fdfc 	bl	80056aa <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab4:	69da      	ldr	r2, [r3, #28]
 8001ab6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001ab8:	441a      	add	r2, r3
 8001aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001abc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac0:	695a      	ldr	r2, [r3, #20]
 8001ac2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001ac4:	441a      	add	r2, r3
 8001ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac8:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001acc:	699b      	ldr	r3, [r3, #24]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d004      	beq.n	8001adc <PCD_EP_ISR_Handler+0x498>
 8001ad2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad6:	691b      	ldr	r3, [r3, #16]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d206      	bcs.n	8001aea <PCD_EP_ISR_Handler+0x4a6>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f7ff fd3f 	bl	8001566 <HAL_PCD_DataOutStageCallback>
 8001ae8:	e005      	b.n	8001af6 <PCD_EP_ISR_Handler+0x4b2>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001af0:	4618      	mov	r0, r3
 8001af2:	f002 fc54 	bl	800439e <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001af6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001af8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d078      	beq.n	8001bf2 <PCD_EP_ISR_Handler+0x5ae>
      {
        ep = &hpcd->IN_ep[epindex];
 8001b00:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001b04:	1c5a      	adds	r2, r3, #1
 8001b06:	4613      	mov	r3, r2
 8001b08:	009b      	lsls	r3, r3, #2
 8001b0a:	4413      	add	r3, r2
 8001b0c:	00db      	lsls	r3, r3, #3
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	4413      	add	r3, r2
 8001b12:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	461a      	mov	r2, r3
 8001b1a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	4413      	add	r3, r2
 8001b22:	881b      	ldrh	r3, [r3, #0]
 8001b24:	b29b      	uxth	r3, r3
 8001b26:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001b2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b2e:	843b      	strh	r3, [r7, #32]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	461a      	mov	r2, r3
 8001b36:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	441a      	add	r2, r3
 8001b3e:	8c3b      	ldrh	r3, [r7, #32]
 8001b40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001b44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001b48:	b29b      	uxth	r3, r3
 8001b4a:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8001b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b4e:	78db      	ldrb	r3, [r3, #3]
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	d108      	bne.n	8001b66 <PCD_EP_ISR_Handler+0x522>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b56:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8001b58:	2b02      	cmp	r3, #2
 8001b5a:	d144      	bne.n	8001be6 <PCD_EP_ISR_Handler+0x5a2>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001b5c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001b5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d13f      	bne.n	8001be6 <PCD_EP_ISR_Handler+0x5a2>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b6e:	b29b      	uxth	r3, r3
 8001b70:	461a      	mov	r2, r3
 8001b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	00db      	lsls	r3, r3, #3
 8001b78:	4413      	add	r3, r2
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	6812      	ldr	r2, [r2, #0]
 8001b7e:	4413      	add	r3, r2
 8001b80:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001b84:	881b      	ldrh	r3, [r3, #0]
 8001b86:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b8a:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8001b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8e:	699a      	ldr	r2, [r3, #24]
 8001b90:	8bfb      	ldrh	r3, [r7, #30]
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d906      	bls.n	8001ba4 <PCD_EP_ISR_Handler+0x560>
          {
            ep->xfer_len -= TxByteNbre;
 8001b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b98:	699a      	ldr	r2, [r3, #24]
 8001b9a:	8bfb      	ldrh	r3, [r7, #30]
 8001b9c:	1ad2      	subs	r2, r2, r3
 8001b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba0:	619a      	str	r2, [r3, #24]
 8001ba2:	e002      	b.n	8001baa <PCD_EP_ISR_Handler+0x566>
          }
          else
          {
            ep->xfer_len = 0U;
 8001ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8001baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bac:	699b      	ldr	r3, [r3, #24]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d106      	bne.n	8001bc0 <PCD_EP_ISR_Handler+0x57c>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	f7ff fce0 	bl	800157e <HAL_PCD_DataInStageCallback>
 8001bbe:	e018      	b.n	8001bf2 <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8001bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc2:	695a      	ldr	r2, [r3, #20]
 8001bc4:	8bfb      	ldrh	r3, [r7, #30]
 8001bc6:	441a      	add	r2, r3
 8001bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bca:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8001bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bce:	69da      	ldr	r2, [r3, #28]
 8001bd0:	8bfb      	ldrh	r3, [r7, #30]
 8001bd2:	441a      	add	r2, r3
 8001bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd6:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001bde:	4618      	mov	r0, r3
 8001be0:	f002 fbdd 	bl	800439e <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8001be4:	e005      	b.n	8001bf2 <PCD_EP_ISR_Handler+0x5ae>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001be6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001be8:	461a      	mov	r2, r3
 8001bea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	f000 f917 	bl	8001e20 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001bfa:	b29b      	uxth	r3, r3
 8001bfc:	b21b      	sxth	r3, r3
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	f6ff ad25 	blt.w	800164e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001c04:	2300      	movs	r3, #0
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3738      	adds	r7, #56	; 0x38
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}

08001c0e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001c0e:	b580      	push	{r7, lr}
 8001c10:	b088      	sub	sp, #32
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	60f8      	str	r0, [r7, #12]
 8001c16:	60b9      	str	r1, [r7, #8]
 8001c18:	4613      	mov	r3, r2
 8001c1a:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001c1c:	88fb      	ldrh	r3, [r7, #6]
 8001c1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d07c      	beq.n	8001d20 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c2e:	b29b      	uxth	r3, r3
 8001c30:	461a      	mov	r2, r3
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	00db      	lsls	r3, r3, #3
 8001c38:	4413      	add	r3, r2
 8001c3a:	68fa      	ldr	r2, [r7, #12]
 8001c3c:	6812      	ldr	r2, [r2, #0]
 8001c3e:	4413      	add	r3, r2
 8001c40:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001c44:	881b      	ldrh	r3, [r3, #0]
 8001c46:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c4a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	699a      	ldr	r2, [r3, #24]
 8001c50:	8b7b      	ldrh	r3, [r7, #26]
 8001c52:	429a      	cmp	r2, r3
 8001c54:	d306      	bcc.n	8001c64 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	699a      	ldr	r2, [r3, #24]
 8001c5a:	8b7b      	ldrh	r3, [r7, #26]
 8001c5c:	1ad2      	subs	r2, r2, r3
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	619a      	str	r2, [r3, #24]
 8001c62:	e002      	b.n	8001c6a <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	2200      	movs	r2, #0
 8001c68:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	699b      	ldr	r3, [r3, #24]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d123      	bne.n	8001cba <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	461a      	mov	r2, r3
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	4413      	add	r3, r2
 8001c80:	881b      	ldrh	r3, [r3, #0]
 8001c82:	b29b      	uxth	r3, r3
 8001c84:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001c88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c8c:	833b      	strh	r3, [r7, #24]
 8001c8e:	8b3b      	ldrh	r3, [r7, #24]
 8001c90:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001c94:	833b      	strh	r3, [r7, #24]
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	009b      	lsls	r3, r3, #2
 8001ca2:	441a      	add	r2, r3
 8001ca4:	8b3b      	ldrh	r3, [r7, #24]
 8001ca6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001caa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001cae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cb6:	b29b      	uxth	r3, r3
 8001cb8:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001cba:	88fb      	ldrh	r3, [r7, #6]
 8001cbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d01f      	beq.n	8001d04 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	461a      	mov	r2, r3
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	4413      	add	r3, r2
 8001cd2:	881b      	ldrh	r3, [r3, #0]
 8001cd4:	b29b      	uxth	r3, r3
 8001cd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001cda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cde:	82fb      	strh	r3, [r7, #22]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	441a      	add	r2, r3
 8001cee:	8afb      	ldrh	r3, [r7, #22]
 8001cf0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001cf4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001cf8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cfc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001d00:	b29b      	uxth	r3, r3
 8001d02:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001d04:	8b7b      	ldrh	r3, [r7, #26]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	f000 8085 	beq.w	8001e16 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	6818      	ldr	r0, [r3, #0]
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	6959      	ldr	r1, [r3, #20]
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	891a      	ldrh	r2, [r3, #8]
 8001d18:	8b7b      	ldrh	r3, [r7, #26]
 8001d1a:	f003 fcc6 	bl	80056aa <USB_ReadPMA>
 8001d1e:	e07a      	b.n	8001e16 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d28:	b29b      	uxth	r3, r3
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	00db      	lsls	r3, r3, #3
 8001d32:	4413      	add	r3, r2
 8001d34:	68fa      	ldr	r2, [r7, #12]
 8001d36:	6812      	ldr	r2, [r2, #0]
 8001d38:	4413      	add	r3, r2
 8001d3a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001d3e:	881b      	ldrh	r3, [r3, #0]
 8001d40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d44:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	699a      	ldr	r2, [r3, #24]
 8001d4a:	8b7b      	ldrh	r3, [r7, #26]
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d306      	bcc.n	8001d5e <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	699a      	ldr	r2, [r3, #24]
 8001d54:	8b7b      	ldrh	r3, [r7, #26]
 8001d56:	1ad2      	subs	r2, r2, r3
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	619a      	str	r2, [r3, #24]
 8001d5c:	e002      	b.n	8001d64 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	2200      	movs	r2, #0
 8001d62:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	699b      	ldr	r3, [r3, #24]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d123      	bne.n	8001db4 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	461a      	mov	r2, r3
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	4413      	add	r3, r2
 8001d7a:	881b      	ldrh	r3, [r3, #0]
 8001d7c:	b29b      	uxth	r3, r3
 8001d7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001d82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d86:	83fb      	strh	r3, [r7, #30]
 8001d88:	8bfb      	ldrh	r3, [r7, #30]
 8001d8a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001d8e:	83fb      	strh	r3, [r7, #30]
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	461a      	mov	r2, r3
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	441a      	add	r2, r3
 8001d9e:	8bfb      	ldrh	r3, [r7, #30]
 8001da0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001da4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001da8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001dac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001db0:	b29b      	uxth	r3, r3
 8001db2:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001db4:	88fb      	ldrh	r3, [r7, #6]
 8001db6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d11f      	bne.n	8001dfe <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	4413      	add	r3, r2
 8001dcc:	881b      	ldrh	r3, [r3, #0]
 8001dce:	b29b      	uxth	r3, r3
 8001dd0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001dd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001dd8:	83bb      	strh	r3, [r7, #28]
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	461a      	mov	r2, r3
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	009b      	lsls	r3, r3, #2
 8001de6:	441a      	add	r2, r3
 8001de8:	8bbb      	ldrh	r3, [r7, #28]
 8001dea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001dee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001df2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001df6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001dfa:	b29b      	uxth	r3, r3
 8001dfc:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001dfe:	8b7b      	ldrh	r3, [r7, #26]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d008      	beq.n	8001e16 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	6818      	ldr	r0, [r3, #0]
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	6959      	ldr	r1, [r3, #20]
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	895a      	ldrh	r2, [r3, #10]
 8001e10:	8b7b      	ldrh	r3, [r7, #26]
 8001e12:	f003 fc4a 	bl	80056aa <USB_ReadPMA>
    }
  }

  return count;
 8001e16:	8b7b      	ldrh	r3, [r7, #26]
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3720      	adds	r7, #32
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}

08001e20 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b094      	sub	sp, #80	; 0x50
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	60f8      	str	r0, [r7, #12]
 8001e28:	60b9      	str	r1, [r7, #8]
 8001e2a:	4613      	mov	r3, r2
 8001e2c:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001e2e:	88fb      	ldrh	r3, [r7, #6]
 8001e30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	f000 8136 	beq.w	80020a6 <HAL_PCD_EP_DB_Transmit+0x286>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e42:	b29b      	uxth	r3, r3
 8001e44:	461a      	mov	r2, r3
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	00db      	lsls	r3, r3, #3
 8001e4c:	4413      	add	r3, r2
 8001e4e:	68fa      	ldr	r2, [r7, #12]
 8001e50:	6812      	ldr	r2, [r2, #0]
 8001e52:	4413      	add	r3, r2
 8001e54:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001e58:	881b      	ldrh	r3, [r3, #0]
 8001e5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e5e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len > TxByteNbre)
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	699a      	ldr	r2, [r3, #24]
 8001e66:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d907      	bls.n	8001e7e <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxByteNbre;
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	699a      	ldr	r2, [r3, #24]
 8001e72:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001e76:	1ad2      	subs	r2, r2, r3
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	619a      	str	r2, [r3, #24]
 8001e7c:	e002      	b.n	8001e84 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	2200      	movs	r2, #0
 8001e82:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	699b      	ldr	r3, [r3, #24]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d12c      	bne.n	8001ee6 <HAL_PCD_EP_DB_Transmit+0xc6>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	4619      	mov	r1, r3
 8001e92:	68f8      	ldr	r0, [r7, #12]
 8001e94:	f7ff fb73 	bl	800157e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001e98:	88fb      	ldrh	r3, [r7, #6]
 8001e9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	f000 8238 	beq.w	8002314 <HAL_PCD_EP_DB_Transmit+0x4f4>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	4413      	add	r3, r2
 8001eb2:	881b      	ldrh	r3, [r3, #0]
 8001eb4:	b29b      	uxth	r3, r3
 8001eb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001eba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ebe:	82fb      	strh	r3, [r7, #22]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	441a      	add	r2, r3
 8001ece:	8afb      	ldrh	r3, [r7, #22]
 8001ed0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001ed4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001ed8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001edc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ee0:	b29b      	uxth	r3, r3
 8001ee2:	8013      	strh	r3, [r2, #0]
 8001ee4:	e216      	b.n	8002314 <HAL_PCD_EP_DB_Transmit+0x4f4>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001ee6:	88fb      	ldrh	r3, [r7, #6]
 8001ee8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d01f      	beq.n	8001f30 <HAL_PCD_EP_DB_Transmit+0x110>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	781b      	ldrb	r3, [r3, #0]
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	4413      	add	r3, r2
 8001efe:	881b      	ldrh	r3, [r3, #0]
 8001f00:	b29b      	uxth	r3, r3
 8001f02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001f06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f0a:	857b      	strh	r3, [r7, #42]	; 0x2a
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	461a      	mov	r2, r3
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	781b      	ldrb	r3, [r3, #0]
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	441a      	add	r2, r3
 8001f1a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001f1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001f20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001f24:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f2c:	b29b      	uxth	r3, r3
 8001f2e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	f040 81ec 	bne.w	8002314 <HAL_PCD_EP_DB_Transmit+0x4f4>
      {
        ep->xfer_buff += TxByteNbre;
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	695a      	ldr	r2, [r3, #20]
 8001f40:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001f44:	441a      	add	r2, r3
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	69da      	ldr	r2, [r3, #28]
 8001f4e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001f52:	441a      	add	r2, r3
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	6a1a      	ldr	r2, [r3, #32]
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	691b      	ldr	r3, [r3, #16]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d309      	bcc.n	8001f78 <HAL_PCD_EP_DB_Transmit+0x158>
        {
          len = ep->maxpacket;
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	691b      	ldr	r3, [r3, #16]
 8001f68:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	6a1a      	ldr	r2, [r3, #32]
 8001f6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f70:	1ad2      	subs	r2, r2, r3
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	621a      	str	r2, [r3, #32]
 8001f76:	e015      	b.n	8001fa4 <HAL_PCD_EP_DB_Transmit+0x184>
        }
        else if (ep->xfer_len_db == 0U)
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	6a1b      	ldr	r3, [r3, #32]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d107      	bne.n	8001f90 <HAL_PCD_EP_DB_Transmit+0x170>
        {
          len = TxByteNbre;
 8001f80:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001f84:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001f8e:	e009      	b.n	8001fa4 <HAL_PCD_EP_DB_Transmit+0x184>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	2200      	movs	r2, #0
 8001f94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	6a1b      	ldr	r3, [r3, #32]
 8001f9c:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	785b      	ldrb	r3, [r3, #1]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d155      	bne.n	8002058 <HAL_PCD_EP_DB_Transmit+0x238>
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	61fb      	str	r3, [r7, #28]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	4413      	add	r3, r2
 8001fc2:	61fb      	str	r3, [r7, #28]
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	00da      	lsls	r2, r3, #3
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	4413      	add	r3, r2
 8001fce:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001fd2:	61bb      	str	r3, [r7, #24]
 8001fd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d112      	bne.n	8002000 <HAL_PCD_EP_DB_Transmit+0x1e0>
 8001fda:	69bb      	ldr	r3, [r7, #24]
 8001fdc:	881b      	ldrh	r3, [r3, #0]
 8001fde:	b29b      	uxth	r3, r3
 8001fe0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001fe4:	b29a      	uxth	r2, r3
 8001fe6:	69bb      	ldr	r3, [r7, #24]
 8001fe8:	801a      	strh	r2, [r3, #0]
 8001fea:	69bb      	ldr	r3, [r7, #24]
 8001fec:	881b      	ldrh	r3, [r3, #0]
 8001fee:	b29b      	uxth	r3, r3
 8001ff0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ff4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ff8:	b29a      	uxth	r2, r3
 8001ffa:	69bb      	ldr	r3, [r7, #24]
 8001ffc:	801a      	strh	r2, [r3, #0]
 8001ffe:	e047      	b.n	8002090 <HAL_PCD_EP_DB_Transmit+0x270>
 8002000:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002002:	2b3e      	cmp	r3, #62	; 0x3e
 8002004:	d811      	bhi.n	800202a <HAL_PCD_EP_DB_Transmit+0x20a>
 8002006:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002008:	085b      	lsrs	r3, r3, #1
 800200a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800200c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800200e:	f003 0301 	and.w	r3, r3, #1
 8002012:	2b00      	cmp	r3, #0
 8002014:	d002      	beq.n	800201c <HAL_PCD_EP_DB_Transmit+0x1fc>
 8002016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002018:	3301      	adds	r3, #1
 800201a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800201c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800201e:	b29b      	uxth	r3, r3
 8002020:	029b      	lsls	r3, r3, #10
 8002022:	b29a      	uxth	r2, r3
 8002024:	69bb      	ldr	r3, [r7, #24]
 8002026:	801a      	strh	r2, [r3, #0]
 8002028:	e032      	b.n	8002090 <HAL_PCD_EP_DB_Transmit+0x270>
 800202a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800202c:	095b      	lsrs	r3, r3, #5
 800202e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002030:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002032:	f003 031f 	and.w	r3, r3, #31
 8002036:	2b00      	cmp	r3, #0
 8002038:	d102      	bne.n	8002040 <HAL_PCD_EP_DB_Transmit+0x220>
 800203a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800203c:	3b01      	subs	r3, #1
 800203e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002042:	b29b      	uxth	r3, r3
 8002044:	029b      	lsls	r3, r3, #10
 8002046:	b29b      	uxth	r3, r3
 8002048:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800204c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002050:	b29a      	uxth	r2, r3
 8002052:	69bb      	ldr	r3, [r7, #24]
 8002054:	801a      	strh	r2, [r3, #0]
 8002056:	e01b      	b.n	8002090 <HAL_PCD_EP_DB_Transmit+0x270>
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	785b      	ldrb	r3, [r3, #1]
 800205c:	2b01      	cmp	r3, #1
 800205e:	d117      	bne.n	8002090 <HAL_PCD_EP_DB_Transmit+0x270>
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	627b      	str	r3, [r7, #36]	; 0x24
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800206e:	b29b      	uxth	r3, r3
 8002070:	461a      	mov	r2, r3
 8002072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002074:	4413      	add	r3, r2
 8002076:	627b      	str	r3, [r7, #36]	; 0x24
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	00da      	lsls	r2, r3, #3
 800207e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002080:	4413      	add	r3, r2
 8002082:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002086:	623b      	str	r3, [r7, #32]
 8002088:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800208a:	b29a      	uxth	r2, r3
 800208c:	6a3b      	ldr	r3, [r7, #32]
 800208e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	6818      	ldr	r0, [r3, #0]
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	6959      	ldr	r1, [r3, #20]
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	891a      	ldrh	r2, [r3, #8]
 800209c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800209e:	b29b      	uxth	r3, r3
 80020a0:	f003 fac1 	bl	8005626 <USB_WritePMA>
 80020a4:	e136      	b.n	8002314 <HAL_PCD_EP_DB_Transmit+0x4f4>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020ae:	b29b      	uxth	r3, r3
 80020b0:	461a      	mov	r2, r3
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	00db      	lsls	r3, r3, #3
 80020b8:	4413      	add	r3, r2
 80020ba:	68fa      	ldr	r2, [r7, #12]
 80020bc:	6812      	ldr	r2, [r2, #0]
 80020be:	4413      	add	r3, r2
 80020c0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80020c4:	881b      	ldrh	r3, [r3, #0]
 80020c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020ca:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len >= TxByteNbre)
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	699a      	ldr	r2, [r3, #24]
 80020d2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d307      	bcc.n	80020ea <HAL_PCD_EP_DB_Transmit+0x2ca>
    {
      ep->xfer_len -= TxByteNbre;
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	699a      	ldr	r2, [r3, #24]
 80020de:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80020e2:	1ad2      	subs	r2, r2, r3
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	619a      	str	r2, [r3, #24]
 80020e8:	e002      	b.n	80020f0 <HAL_PCD_EP_DB_Transmit+0x2d0>
    }
    else
    {
      ep->xfer_len = 0U;
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	2200      	movs	r2, #0
 80020ee:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	699b      	ldr	r3, [r3, #24]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d12e      	bne.n	8002156 <HAL_PCD_EP_DB_Transmit+0x336>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	4619      	mov	r1, r3
 80020fe:	68f8      	ldr	r0, [r7, #12]
 8002100:	f7ff fa3d 	bl	800157e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002104:	88fb      	ldrh	r3, [r7, #6]
 8002106:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800210a:	2b00      	cmp	r3, #0
 800210c:	f040 8102 	bne.w	8002314 <HAL_PCD_EP_DB_Transmit+0x4f4>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	461a      	mov	r2, r3
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	4413      	add	r3, r2
 800211e:	881b      	ldrh	r3, [r3, #0]
 8002120:	b29b      	uxth	r3, r3
 8002122:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002126:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800212a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	461a      	mov	r2, r3
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	441a      	add	r2, r3
 800213c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002140:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002144:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002148:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800214c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002150:	b29b      	uxth	r3, r3
 8002152:	8013      	strh	r3, [r2, #0]
 8002154:	e0de      	b.n	8002314 <HAL_PCD_EP_DB_Transmit+0x4f4>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002156:	88fb      	ldrh	r3, [r7, #6]
 8002158:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800215c:	2b00      	cmp	r3, #0
 800215e:	d11f      	bne.n	80021a0 <HAL_PCD_EP_DB_Transmit+0x380>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	461a      	mov	r2, r3
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	4413      	add	r3, r2
 800216e:	881b      	ldrh	r3, [r3, #0]
 8002170:	b29b      	uxth	r3, r3
 8002172:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002176:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800217a:	867b      	strh	r3, [r7, #50]	; 0x32
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	461a      	mov	r2, r3
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	441a      	add	r2, r3
 800218a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800218c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002190:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002194:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002198:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800219c:	b29b      	uxth	r3, r3
 800219e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	f040 80b4 	bne.w	8002314 <HAL_PCD_EP_DB_Transmit+0x4f4>
      {
        ep->xfer_buff += TxByteNbre;
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	695a      	ldr	r2, [r3, #20]
 80021b0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80021b4:	441a      	add	r2, r3
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	69da      	ldr	r2, [r3, #28]
 80021be:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80021c2:	441a      	add	r2, r3
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	6a1a      	ldr	r2, [r3, #32]
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	691b      	ldr	r3, [r3, #16]
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d309      	bcc.n	80021e8 <HAL_PCD_EP_DB_Transmit+0x3c8>
        {
          len = ep->maxpacket;
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	691b      	ldr	r3, [r3, #16]
 80021d8:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	6a1a      	ldr	r2, [r3, #32]
 80021de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021e0:	1ad2      	subs	r2, r2, r3
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	621a      	str	r2, [r3, #32]
 80021e6:	e015      	b.n	8002214 <HAL_PCD_EP_DB_Transmit+0x3f4>
        }
        else if (ep->xfer_len_db == 0U)
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	6a1b      	ldr	r3, [r3, #32]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d107      	bne.n	8002200 <HAL_PCD_EP_DB_Transmit+0x3e0>
        {
          len = TxByteNbre;
 80021f0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80021f4:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	2200      	movs	r2, #0
 80021fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80021fe:	e009      	b.n	8002214 <HAL_PCD_EP_DB_Transmit+0x3f4>
        }
        else
        {
          len = ep->xfer_len_db;
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	6a1b      	ldr	r3, [r3, #32]
 8002204:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	2200      	movs	r2, #0
 800220a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	2200      	movs	r2, #0
 8002210:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	643b      	str	r3, [r7, #64]	; 0x40
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	785b      	ldrb	r3, [r3, #1]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d155      	bne.n	80022ce <HAL_PCD_EP_DB_Transmit+0x4ae>
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	63bb      	str	r3, [r7, #56]	; 0x38
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002230:	b29b      	uxth	r3, r3
 8002232:	461a      	mov	r2, r3
 8002234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002236:	4413      	add	r3, r2
 8002238:	63bb      	str	r3, [r7, #56]	; 0x38
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	00da      	lsls	r2, r3, #3
 8002240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002242:	4413      	add	r3, r2
 8002244:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002248:	637b      	str	r3, [r7, #52]	; 0x34
 800224a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800224c:	2b00      	cmp	r3, #0
 800224e:	d112      	bne.n	8002276 <HAL_PCD_EP_DB_Transmit+0x456>
 8002250:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002252:	881b      	ldrh	r3, [r3, #0]
 8002254:	b29b      	uxth	r3, r3
 8002256:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800225a:	b29a      	uxth	r2, r3
 800225c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800225e:	801a      	strh	r2, [r3, #0]
 8002260:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002262:	881b      	ldrh	r3, [r3, #0]
 8002264:	b29b      	uxth	r3, r3
 8002266:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800226a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800226e:	b29a      	uxth	r2, r3
 8002270:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002272:	801a      	strh	r2, [r3, #0]
 8002274:	e044      	b.n	8002300 <HAL_PCD_EP_DB_Transmit+0x4e0>
 8002276:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002278:	2b3e      	cmp	r3, #62	; 0x3e
 800227a:	d811      	bhi.n	80022a0 <HAL_PCD_EP_DB_Transmit+0x480>
 800227c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800227e:	085b      	lsrs	r3, r3, #1
 8002280:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002282:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002284:	f003 0301 	and.w	r3, r3, #1
 8002288:	2b00      	cmp	r3, #0
 800228a:	d002      	beq.n	8002292 <HAL_PCD_EP_DB_Transmit+0x472>
 800228c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800228e:	3301      	adds	r3, #1
 8002290:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002292:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002294:	b29b      	uxth	r3, r3
 8002296:	029b      	lsls	r3, r3, #10
 8002298:	b29a      	uxth	r2, r3
 800229a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800229c:	801a      	strh	r2, [r3, #0]
 800229e:	e02f      	b.n	8002300 <HAL_PCD_EP_DB_Transmit+0x4e0>
 80022a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022a2:	095b      	lsrs	r3, r3, #5
 80022a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80022a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022a8:	f003 031f 	and.w	r3, r3, #31
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d102      	bne.n	80022b6 <HAL_PCD_EP_DB_Transmit+0x496>
 80022b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022b2:	3b01      	subs	r3, #1
 80022b4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80022b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022b8:	b29b      	uxth	r3, r3
 80022ba:	029b      	lsls	r3, r3, #10
 80022bc:	b29b      	uxth	r3, r3
 80022be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80022c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80022c6:	b29a      	uxth	r2, r3
 80022c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022ca:	801a      	strh	r2, [r3, #0]
 80022cc:	e018      	b.n	8002300 <HAL_PCD_EP_DB_Transmit+0x4e0>
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	785b      	ldrb	r3, [r3, #1]
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d114      	bne.n	8002300 <HAL_PCD_EP_DB_Transmit+0x4e0>
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022de:	b29b      	uxth	r3, r3
 80022e0:	461a      	mov	r2, r3
 80022e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022e4:	4413      	add	r3, r2
 80022e6:	643b      	str	r3, [r7, #64]	; 0x40
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	00da      	lsls	r2, r3, #3
 80022ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022f0:	4413      	add	r3, r2
 80022f2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80022f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022fa:	b29a      	uxth	r2, r3
 80022fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022fe:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	6818      	ldr	r0, [r3, #0]
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	6959      	ldr	r1, [r3, #20]
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	895a      	ldrh	r2, [r3, #10]
 800230c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800230e:	b29b      	uxth	r3, r3
 8002310:	f003 f989 	bl	8005626 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	461a      	mov	r2, r3
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	4413      	add	r3, r2
 8002322:	881b      	ldrh	r3, [r3, #0]
 8002324:	b29b      	uxth	r3, r3
 8002326:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800232a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800232e:	82bb      	strh	r3, [r7, #20]
 8002330:	8abb      	ldrh	r3, [r7, #20]
 8002332:	f083 0310 	eor.w	r3, r3, #16
 8002336:	82bb      	strh	r3, [r7, #20]
 8002338:	8abb      	ldrh	r3, [r7, #20]
 800233a:	f083 0320 	eor.w	r3, r3, #32
 800233e:	82bb      	strh	r3, [r7, #20]
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	461a      	mov	r2, r3
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	441a      	add	r2, r3
 800234e:	8abb      	ldrh	r3, [r7, #20]
 8002350:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002354:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002358:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800235c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002360:	b29b      	uxth	r3, r3
 8002362:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002364:	2300      	movs	r3, #0
}
 8002366:	4618      	mov	r0, r3
 8002368:	3750      	adds	r7, #80	; 0x50
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
	...

08002370 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8002376:	af00      	add	r7, sp, #0
 8002378:	1d3b      	adds	r3, r7, #4
 800237a:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800237c:	1d3b      	adds	r3, r7, #4
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d102      	bne.n	800238a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	f000 bf01 	b.w	800318c <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800238a:	1d3b      	adds	r3, r7, #4
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0301 	and.w	r3, r3, #1
 8002394:	2b00      	cmp	r3, #0
 8002396:	f000 8160 	beq.w	800265a <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800239a:	4bae      	ldr	r3, [pc, #696]	; (8002654 <HAL_RCC_OscConfig+0x2e4>)
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f003 030c 	and.w	r3, r3, #12
 80023a2:	2b04      	cmp	r3, #4
 80023a4:	d00c      	beq.n	80023c0 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80023a6:	4bab      	ldr	r3, [pc, #684]	; (8002654 <HAL_RCC_OscConfig+0x2e4>)
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	f003 030c 	and.w	r3, r3, #12
 80023ae:	2b08      	cmp	r3, #8
 80023b0:	d159      	bne.n	8002466 <HAL_RCC_OscConfig+0xf6>
 80023b2:	4ba8      	ldr	r3, [pc, #672]	; (8002654 <HAL_RCC_OscConfig+0x2e4>)
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80023ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023be:	d152      	bne.n	8002466 <HAL_RCC_OscConfig+0xf6>
 80023c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023c4:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80023cc:	fa93 f3a3 	rbit	r3, r3
 80023d0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  return result;
 80023d4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023d8:	fab3 f383 	clz	r3, r3
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	095b      	lsrs	r3, r3, #5
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	f043 0301 	orr.w	r3, r3, #1
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d102      	bne.n	80023f2 <HAL_RCC_OscConfig+0x82>
 80023ec:	4b99      	ldr	r3, [pc, #612]	; (8002654 <HAL_RCC_OscConfig+0x2e4>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	e015      	b.n	800241e <HAL_RCC_OscConfig+0xae>
 80023f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023f6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023fa:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80023fe:	fa93 f3a3 	rbit	r3, r3
 8002402:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8002406:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800240a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800240e:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8002412:	fa93 f3a3 	rbit	r3, r3
 8002416:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800241a:	4b8e      	ldr	r3, [pc, #568]	; (8002654 <HAL_RCC_OscConfig+0x2e4>)
 800241c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800241e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002422:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8002426:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800242a:	fa92 f2a2 	rbit	r2, r2
 800242e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8002432:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002436:	fab2 f282 	clz	r2, r2
 800243a:	b2d2      	uxtb	r2, r2
 800243c:	f042 0220 	orr.w	r2, r2, #32
 8002440:	b2d2      	uxtb	r2, r2
 8002442:	f002 021f 	and.w	r2, r2, #31
 8002446:	2101      	movs	r1, #1
 8002448:	fa01 f202 	lsl.w	r2, r1, r2
 800244c:	4013      	ands	r3, r2
 800244e:	2b00      	cmp	r3, #0
 8002450:	f000 8102 	beq.w	8002658 <HAL_RCC_OscConfig+0x2e8>
 8002454:	1d3b      	adds	r3, r7, #4
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	2b00      	cmp	r3, #0
 800245c:	f040 80fc 	bne.w	8002658 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	f000 be93 	b.w	800318c <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002466:	1d3b      	adds	r3, r7, #4
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002470:	d106      	bne.n	8002480 <HAL_RCC_OscConfig+0x110>
 8002472:	4b78      	ldr	r3, [pc, #480]	; (8002654 <HAL_RCC_OscConfig+0x2e4>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a77      	ldr	r2, [pc, #476]	; (8002654 <HAL_RCC_OscConfig+0x2e4>)
 8002478:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800247c:	6013      	str	r3, [r2, #0]
 800247e:	e030      	b.n	80024e2 <HAL_RCC_OscConfig+0x172>
 8002480:	1d3b      	adds	r3, r7, #4
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d10c      	bne.n	80024a4 <HAL_RCC_OscConfig+0x134>
 800248a:	4b72      	ldr	r3, [pc, #456]	; (8002654 <HAL_RCC_OscConfig+0x2e4>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a71      	ldr	r2, [pc, #452]	; (8002654 <HAL_RCC_OscConfig+0x2e4>)
 8002490:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002494:	6013      	str	r3, [r2, #0]
 8002496:	4b6f      	ldr	r3, [pc, #444]	; (8002654 <HAL_RCC_OscConfig+0x2e4>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a6e      	ldr	r2, [pc, #440]	; (8002654 <HAL_RCC_OscConfig+0x2e4>)
 800249c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024a0:	6013      	str	r3, [r2, #0]
 80024a2:	e01e      	b.n	80024e2 <HAL_RCC_OscConfig+0x172>
 80024a4:	1d3b      	adds	r3, r7, #4
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024ae:	d10c      	bne.n	80024ca <HAL_RCC_OscConfig+0x15a>
 80024b0:	4b68      	ldr	r3, [pc, #416]	; (8002654 <HAL_RCC_OscConfig+0x2e4>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a67      	ldr	r2, [pc, #412]	; (8002654 <HAL_RCC_OscConfig+0x2e4>)
 80024b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024ba:	6013      	str	r3, [r2, #0]
 80024bc:	4b65      	ldr	r3, [pc, #404]	; (8002654 <HAL_RCC_OscConfig+0x2e4>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a64      	ldr	r2, [pc, #400]	; (8002654 <HAL_RCC_OscConfig+0x2e4>)
 80024c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024c6:	6013      	str	r3, [r2, #0]
 80024c8:	e00b      	b.n	80024e2 <HAL_RCC_OscConfig+0x172>
 80024ca:	4b62      	ldr	r3, [pc, #392]	; (8002654 <HAL_RCC_OscConfig+0x2e4>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a61      	ldr	r2, [pc, #388]	; (8002654 <HAL_RCC_OscConfig+0x2e4>)
 80024d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024d4:	6013      	str	r3, [r2, #0]
 80024d6:	4b5f      	ldr	r3, [pc, #380]	; (8002654 <HAL_RCC_OscConfig+0x2e4>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a5e      	ldr	r2, [pc, #376]	; (8002654 <HAL_RCC_OscConfig+0x2e4>)
 80024dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024e0:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024e2:	1d3b      	adds	r3, r7, #4
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d059      	beq.n	80025a0 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ec:	f7fe fa80 	bl	80009f0 <HAL_GetTick>
 80024f0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024f4:	e00a      	b.n	800250c <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024f6:	f7fe fa7b 	bl	80009f0 <HAL_GetTick>
 80024fa:	4602      	mov	r2, r0
 80024fc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	2b64      	cmp	r3, #100	; 0x64
 8002504:	d902      	bls.n	800250c <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	f000 be40 	b.w	800318c <HAL_RCC_OscConfig+0xe1c>
 800250c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002510:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002514:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8002518:	fa93 f3a3 	rbit	r3, r3
 800251c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8002520:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002524:	fab3 f383 	clz	r3, r3
 8002528:	b2db      	uxtb	r3, r3
 800252a:	095b      	lsrs	r3, r3, #5
 800252c:	b2db      	uxtb	r3, r3
 800252e:	f043 0301 	orr.w	r3, r3, #1
 8002532:	b2db      	uxtb	r3, r3
 8002534:	2b01      	cmp	r3, #1
 8002536:	d102      	bne.n	800253e <HAL_RCC_OscConfig+0x1ce>
 8002538:	4b46      	ldr	r3, [pc, #280]	; (8002654 <HAL_RCC_OscConfig+0x2e4>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	e015      	b.n	800256a <HAL_RCC_OscConfig+0x1fa>
 800253e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002542:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002546:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800254a:	fa93 f3a3 	rbit	r3, r3
 800254e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8002552:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002556:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800255a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800255e:	fa93 f3a3 	rbit	r3, r3
 8002562:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002566:	4b3b      	ldr	r3, [pc, #236]	; (8002654 <HAL_RCC_OscConfig+0x2e4>)
 8002568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800256a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800256e:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8002572:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8002576:	fa92 f2a2 	rbit	r2, r2
 800257a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 800257e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002582:	fab2 f282 	clz	r2, r2
 8002586:	b2d2      	uxtb	r2, r2
 8002588:	f042 0220 	orr.w	r2, r2, #32
 800258c:	b2d2      	uxtb	r2, r2
 800258e:	f002 021f 	and.w	r2, r2, #31
 8002592:	2101      	movs	r1, #1
 8002594:	fa01 f202 	lsl.w	r2, r1, r2
 8002598:	4013      	ands	r3, r2
 800259a:	2b00      	cmp	r3, #0
 800259c:	d0ab      	beq.n	80024f6 <HAL_RCC_OscConfig+0x186>
 800259e:	e05c      	b.n	800265a <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025a0:	f7fe fa26 	bl	80009f0 <HAL_GetTick>
 80025a4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025a8:	e00a      	b.n	80025c0 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025aa:	f7fe fa21 	bl	80009f0 <HAL_GetTick>
 80025ae:	4602      	mov	r2, r0
 80025b0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	2b64      	cmp	r3, #100	; 0x64
 80025b8:	d902      	bls.n	80025c0 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 80025ba:	2303      	movs	r3, #3
 80025bc:	f000 bde6 	b.w	800318c <HAL_RCC_OscConfig+0xe1c>
 80025c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025c4:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80025cc:	fa93 f3a3 	rbit	r3, r3
 80025d0:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80025d4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025d8:	fab3 f383 	clz	r3, r3
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	095b      	lsrs	r3, r3, #5
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	f043 0301 	orr.w	r3, r3, #1
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d102      	bne.n	80025f2 <HAL_RCC_OscConfig+0x282>
 80025ec:	4b19      	ldr	r3, [pc, #100]	; (8002654 <HAL_RCC_OscConfig+0x2e4>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	e015      	b.n	800261e <HAL_RCC_OscConfig+0x2ae>
 80025f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025f6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025fa:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80025fe:	fa93 f3a3 	rbit	r3, r3
 8002602:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8002606:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800260a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800260e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002612:	fa93 f3a3 	rbit	r3, r3
 8002616:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800261a:	4b0e      	ldr	r3, [pc, #56]	; (8002654 <HAL_RCC_OscConfig+0x2e4>)
 800261c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002622:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8002626:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800262a:	fa92 f2a2 	rbit	r2, r2
 800262e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8002632:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002636:	fab2 f282 	clz	r2, r2
 800263a:	b2d2      	uxtb	r2, r2
 800263c:	f042 0220 	orr.w	r2, r2, #32
 8002640:	b2d2      	uxtb	r2, r2
 8002642:	f002 021f 	and.w	r2, r2, #31
 8002646:	2101      	movs	r1, #1
 8002648:	fa01 f202 	lsl.w	r2, r1, r2
 800264c:	4013      	ands	r3, r2
 800264e:	2b00      	cmp	r3, #0
 8002650:	d1ab      	bne.n	80025aa <HAL_RCC_OscConfig+0x23a>
 8002652:	e002      	b.n	800265a <HAL_RCC_OscConfig+0x2ea>
 8002654:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002658:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800265a:	1d3b      	adds	r3, r7, #4
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0302 	and.w	r3, r3, #2
 8002664:	2b00      	cmp	r3, #0
 8002666:	f000 8170 	beq.w	800294a <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800266a:	4bd0      	ldr	r3, [pc, #832]	; (80029ac <HAL_RCC_OscConfig+0x63c>)
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f003 030c 	and.w	r3, r3, #12
 8002672:	2b00      	cmp	r3, #0
 8002674:	d00c      	beq.n	8002690 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002676:	4bcd      	ldr	r3, [pc, #820]	; (80029ac <HAL_RCC_OscConfig+0x63c>)
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	f003 030c 	and.w	r3, r3, #12
 800267e:	2b08      	cmp	r3, #8
 8002680:	d16d      	bne.n	800275e <HAL_RCC_OscConfig+0x3ee>
 8002682:	4bca      	ldr	r3, [pc, #808]	; (80029ac <HAL_RCC_OscConfig+0x63c>)
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800268a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800268e:	d166      	bne.n	800275e <HAL_RCC_OscConfig+0x3ee>
 8002690:	2302      	movs	r3, #2
 8002692:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002696:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800269a:	fa93 f3a3 	rbit	r3, r3
 800269e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80026a2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026a6:	fab3 f383 	clz	r3, r3
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	095b      	lsrs	r3, r3, #5
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	f043 0301 	orr.w	r3, r3, #1
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d102      	bne.n	80026c0 <HAL_RCC_OscConfig+0x350>
 80026ba:	4bbc      	ldr	r3, [pc, #752]	; (80029ac <HAL_RCC_OscConfig+0x63c>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	e013      	b.n	80026e8 <HAL_RCC_OscConfig+0x378>
 80026c0:	2302      	movs	r3, #2
 80026c2:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80026ca:	fa93 f3a3 	rbit	r3, r3
 80026ce:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80026d2:	2302      	movs	r3, #2
 80026d4:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80026d8:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80026dc:	fa93 f3a3 	rbit	r3, r3
 80026e0:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80026e4:	4bb1      	ldr	r3, [pc, #708]	; (80029ac <HAL_RCC_OscConfig+0x63c>)
 80026e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e8:	2202      	movs	r2, #2
 80026ea:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80026ee:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80026f2:	fa92 f2a2 	rbit	r2, r2
 80026f6:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80026fa:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80026fe:	fab2 f282 	clz	r2, r2
 8002702:	b2d2      	uxtb	r2, r2
 8002704:	f042 0220 	orr.w	r2, r2, #32
 8002708:	b2d2      	uxtb	r2, r2
 800270a:	f002 021f 	and.w	r2, r2, #31
 800270e:	2101      	movs	r1, #1
 8002710:	fa01 f202 	lsl.w	r2, r1, r2
 8002714:	4013      	ands	r3, r2
 8002716:	2b00      	cmp	r3, #0
 8002718:	d007      	beq.n	800272a <HAL_RCC_OscConfig+0x3ba>
 800271a:	1d3b      	adds	r3, r7, #4
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	2b01      	cmp	r3, #1
 8002722:	d002      	beq.n	800272a <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	f000 bd31 	b.w	800318c <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800272a:	4ba0      	ldr	r3, [pc, #640]	; (80029ac <HAL_RCC_OscConfig+0x63c>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002732:	1d3b      	adds	r3, r7, #4
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	691b      	ldr	r3, [r3, #16]
 8002738:	21f8      	movs	r1, #248	; 0xf8
 800273a:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800273e:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8002742:	fa91 f1a1 	rbit	r1, r1
 8002746:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 800274a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800274e:	fab1 f181 	clz	r1, r1
 8002752:	b2c9      	uxtb	r1, r1
 8002754:	408b      	lsls	r3, r1
 8002756:	4995      	ldr	r1, [pc, #596]	; (80029ac <HAL_RCC_OscConfig+0x63c>)
 8002758:	4313      	orrs	r3, r2
 800275a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800275c:	e0f5      	b.n	800294a <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800275e:	1d3b      	adds	r3, r7, #4
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	2b00      	cmp	r3, #0
 8002766:	f000 8085 	beq.w	8002874 <HAL_RCC_OscConfig+0x504>
 800276a:	2301      	movs	r3, #1
 800276c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002770:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8002774:	fa93 f3a3 	rbit	r3, r3
 8002778:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 800277c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002780:	fab3 f383 	clz	r3, r3
 8002784:	b2db      	uxtb	r3, r3
 8002786:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800278a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	461a      	mov	r2, r3
 8002792:	2301      	movs	r3, #1
 8002794:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002796:	f7fe f92b 	bl	80009f0 <HAL_GetTick>
 800279a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800279e:	e00a      	b.n	80027b6 <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027a0:	f7fe f926 	bl	80009f0 <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80027aa:	1ad3      	subs	r3, r2, r3
 80027ac:	2b02      	cmp	r3, #2
 80027ae:	d902      	bls.n	80027b6 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80027b0:	2303      	movs	r3, #3
 80027b2:	f000 bceb 	b.w	800318c <HAL_RCC_OscConfig+0xe1c>
 80027b6:	2302      	movs	r3, #2
 80027b8:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027bc:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80027c0:	fa93 f3a3 	rbit	r3, r3
 80027c4:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80027c8:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027cc:	fab3 f383 	clz	r3, r3
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	095b      	lsrs	r3, r3, #5
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	f043 0301 	orr.w	r3, r3, #1
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d102      	bne.n	80027e6 <HAL_RCC_OscConfig+0x476>
 80027e0:	4b72      	ldr	r3, [pc, #456]	; (80029ac <HAL_RCC_OscConfig+0x63c>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	e013      	b.n	800280e <HAL_RCC_OscConfig+0x49e>
 80027e6:	2302      	movs	r3, #2
 80027e8:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ec:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80027f0:	fa93 f3a3 	rbit	r3, r3
 80027f4:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80027f8:	2302      	movs	r3, #2
 80027fa:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80027fe:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8002802:	fa93 f3a3 	rbit	r3, r3
 8002806:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800280a:	4b68      	ldr	r3, [pc, #416]	; (80029ac <HAL_RCC_OscConfig+0x63c>)
 800280c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280e:	2202      	movs	r2, #2
 8002810:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8002814:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8002818:	fa92 f2a2 	rbit	r2, r2
 800281c:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8002820:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002824:	fab2 f282 	clz	r2, r2
 8002828:	b2d2      	uxtb	r2, r2
 800282a:	f042 0220 	orr.w	r2, r2, #32
 800282e:	b2d2      	uxtb	r2, r2
 8002830:	f002 021f 	and.w	r2, r2, #31
 8002834:	2101      	movs	r1, #1
 8002836:	fa01 f202 	lsl.w	r2, r1, r2
 800283a:	4013      	ands	r3, r2
 800283c:	2b00      	cmp	r3, #0
 800283e:	d0af      	beq.n	80027a0 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002840:	4b5a      	ldr	r3, [pc, #360]	; (80029ac <HAL_RCC_OscConfig+0x63c>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002848:	1d3b      	adds	r3, r7, #4
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	691b      	ldr	r3, [r3, #16]
 800284e:	21f8      	movs	r1, #248	; 0xf8
 8002850:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002854:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8002858:	fa91 f1a1 	rbit	r1, r1
 800285c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8002860:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002864:	fab1 f181 	clz	r1, r1
 8002868:	b2c9      	uxtb	r1, r1
 800286a:	408b      	lsls	r3, r1
 800286c:	494f      	ldr	r1, [pc, #316]	; (80029ac <HAL_RCC_OscConfig+0x63c>)
 800286e:	4313      	orrs	r3, r2
 8002870:	600b      	str	r3, [r1, #0]
 8002872:	e06a      	b.n	800294a <HAL_RCC_OscConfig+0x5da>
 8002874:	2301      	movs	r3, #1
 8002876:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800287a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800287e:	fa93 f3a3 	rbit	r3, r3
 8002882:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8002886:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800288a:	fab3 f383 	clz	r3, r3
 800288e:	b2db      	uxtb	r3, r3
 8002890:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002894:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	461a      	mov	r2, r3
 800289c:	2300      	movs	r3, #0
 800289e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028a0:	f7fe f8a6 	bl	80009f0 <HAL_GetTick>
 80028a4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028a8:	e00a      	b.n	80028c0 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028aa:	f7fe f8a1 	bl	80009f0 <HAL_GetTick>
 80028ae:	4602      	mov	r2, r0
 80028b0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	d902      	bls.n	80028c0 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	f000 bc66 	b.w	800318c <HAL_RCC_OscConfig+0xe1c>
 80028c0:	2302      	movs	r3, #2
 80028c2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80028ca:	fa93 f3a3 	rbit	r3, r3
 80028ce:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80028d2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028d6:	fab3 f383 	clz	r3, r3
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	095b      	lsrs	r3, r3, #5
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	f043 0301 	orr.w	r3, r3, #1
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d102      	bne.n	80028f0 <HAL_RCC_OscConfig+0x580>
 80028ea:	4b30      	ldr	r3, [pc, #192]	; (80029ac <HAL_RCC_OscConfig+0x63c>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	e013      	b.n	8002918 <HAL_RCC_OscConfig+0x5a8>
 80028f0:	2302      	movs	r3, #2
 80028f2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80028fa:	fa93 f3a3 	rbit	r3, r3
 80028fe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002902:	2302      	movs	r3, #2
 8002904:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002908:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800290c:	fa93 f3a3 	rbit	r3, r3
 8002910:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002914:	4b25      	ldr	r3, [pc, #148]	; (80029ac <HAL_RCC_OscConfig+0x63c>)
 8002916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002918:	2202      	movs	r2, #2
 800291a:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800291e:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8002922:	fa92 f2a2 	rbit	r2, r2
 8002926:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 800292a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800292e:	fab2 f282 	clz	r2, r2
 8002932:	b2d2      	uxtb	r2, r2
 8002934:	f042 0220 	orr.w	r2, r2, #32
 8002938:	b2d2      	uxtb	r2, r2
 800293a:	f002 021f 	and.w	r2, r2, #31
 800293e:	2101      	movs	r1, #1
 8002940:	fa01 f202 	lsl.w	r2, r1, r2
 8002944:	4013      	ands	r3, r2
 8002946:	2b00      	cmp	r3, #0
 8002948:	d1af      	bne.n	80028aa <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800294a:	1d3b      	adds	r3, r7, #4
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0308 	and.w	r3, r3, #8
 8002954:	2b00      	cmp	r3, #0
 8002956:	f000 80da 	beq.w	8002b0e <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800295a:	1d3b      	adds	r3, r7, #4
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	695b      	ldr	r3, [r3, #20]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d069      	beq.n	8002a38 <HAL_RCC_OscConfig+0x6c8>
 8002964:	2301      	movs	r3, #1
 8002966:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800296a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800296e:	fa93 f3a3 	rbit	r3, r3
 8002972:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8002976:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800297a:	fab3 f383 	clz	r3, r3
 800297e:	b2db      	uxtb	r3, r3
 8002980:	461a      	mov	r2, r3
 8002982:	4b0b      	ldr	r3, [pc, #44]	; (80029b0 <HAL_RCC_OscConfig+0x640>)
 8002984:	4413      	add	r3, r2
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	461a      	mov	r2, r3
 800298a:	2301      	movs	r3, #1
 800298c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800298e:	f7fe f82f 	bl	80009f0 <HAL_GetTick>
 8002992:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002996:	e00d      	b.n	80029b4 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002998:	f7fe f82a 	bl	80009f0 <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80029a2:	1ad3      	subs	r3, r2, r3
 80029a4:	2b02      	cmp	r3, #2
 80029a6:	d905      	bls.n	80029b4 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 80029a8:	2303      	movs	r3, #3
 80029aa:	e3ef      	b.n	800318c <HAL_RCC_OscConfig+0xe1c>
 80029ac:	40021000 	.word	0x40021000
 80029b0:	10908120 	.word	0x10908120
 80029b4:	2302      	movs	r3, #2
 80029b6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80029be:	fa93 f2a3 	rbit	r2, r3
 80029c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80029c6:	601a      	str	r2, [r3, #0]
 80029c8:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80029cc:	2202      	movs	r2, #2
 80029ce:	601a      	str	r2, [r3, #0]
 80029d0:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	fa93 f2a3 	rbit	r2, r3
 80029da:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80029de:	601a      	str	r2, [r3, #0]
 80029e0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80029e4:	2202      	movs	r2, #2
 80029e6:	601a      	str	r2, [r3, #0]
 80029e8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	fa93 f2a3 	rbit	r2, r3
 80029f2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80029f6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029f8:	4ba4      	ldr	r3, [pc, #656]	; (8002c8c <HAL_RCC_OscConfig+0x91c>)
 80029fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029fc:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002a00:	2102      	movs	r1, #2
 8002a02:	6019      	str	r1, [r3, #0]
 8002a04:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	fa93 f1a3 	rbit	r1, r3
 8002a0e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002a12:	6019      	str	r1, [r3, #0]
  return result;
 8002a14:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	fab3 f383 	clz	r3, r3
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	f003 031f 	and.w	r3, r3, #31
 8002a2a:	2101      	movs	r1, #1
 8002a2c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a30:	4013      	ands	r3, r2
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d0b0      	beq.n	8002998 <HAL_RCC_OscConfig+0x628>
 8002a36:	e06a      	b.n	8002b0e <HAL_RCC_OscConfig+0x79e>
 8002a38:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a40:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	fa93 f2a3 	rbit	r2, r3
 8002a4a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002a4e:	601a      	str	r2, [r3, #0]
  return result;
 8002a50:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002a54:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a56:	fab3 f383 	clz	r3, r3
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	4b8c      	ldr	r3, [pc, #560]	; (8002c90 <HAL_RCC_OscConfig+0x920>)
 8002a60:	4413      	add	r3, r2
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	461a      	mov	r2, r3
 8002a66:	2300      	movs	r3, #0
 8002a68:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a6a:	f7fd ffc1 	bl	80009f0 <HAL_GetTick>
 8002a6e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a72:	e009      	b.n	8002a88 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a74:	f7fd ffbc 	bl	80009f0 <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	d901      	bls.n	8002a88 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8002a84:	2303      	movs	r3, #3
 8002a86:	e381      	b.n	800318c <HAL_RCC_OscConfig+0xe1c>
 8002a88:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002a8c:	2202      	movs	r2, #2
 8002a8e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a90:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	fa93 f2a3 	rbit	r2, r3
 8002a9a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002a9e:	601a      	str	r2, [r3, #0]
 8002aa0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002aa4:	2202      	movs	r2, #2
 8002aa6:	601a      	str	r2, [r3, #0]
 8002aa8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	fa93 f2a3 	rbit	r2, r3
 8002ab2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002ab6:	601a      	str	r2, [r3, #0]
 8002ab8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002abc:	2202      	movs	r2, #2
 8002abe:	601a      	str	r2, [r3, #0]
 8002ac0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	fa93 f2a3 	rbit	r2, r3
 8002aca:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002ace:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ad0:	4b6e      	ldr	r3, [pc, #440]	; (8002c8c <HAL_RCC_OscConfig+0x91c>)
 8002ad2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ad4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002ad8:	2102      	movs	r1, #2
 8002ada:	6019      	str	r1, [r3, #0]
 8002adc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	fa93 f1a3 	rbit	r1, r3
 8002ae6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002aea:	6019      	str	r1, [r3, #0]
  return result;
 8002aec:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	fab3 f383 	clz	r3, r3
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	f003 031f 	and.w	r3, r3, #31
 8002b02:	2101      	movs	r1, #1
 8002b04:	fa01 f303 	lsl.w	r3, r1, r3
 8002b08:	4013      	ands	r3, r2
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d1b2      	bne.n	8002a74 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b0e:	1d3b      	adds	r3, r7, #4
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 0304 	and.w	r3, r3, #4
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	f000 8157 	beq.w	8002dcc <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b24:	4b59      	ldr	r3, [pc, #356]	; (8002c8c <HAL_RCC_OscConfig+0x91c>)
 8002b26:	69db      	ldr	r3, [r3, #28]
 8002b28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d112      	bne.n	8002b56 <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b30:	4b56      	ldr	r3, [pc, #344]	; (8002c8c <HAL_RCC_OscConfig+0x91c>)
 8002b32:	69db      	ldr	r3, [r3, #28]
 8002b34:	4a55      	ldr	r2, [pc, #340]	; (8002c8c <HAL_RCC_OscConfig+0x91c>)
 8002b36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b3a:	61d3      	str	r3, [r2, #28]
 8002b3c:	4b53      	ldr	r3, [pc, #332]	; (8002c8c <HAL_RCC_OscConfig+0x91c>)
 8002b3e:	69db      	ldr	r3, [r3, #28]
 8002b40:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002b44:	f107 030c 	add.w	r3, r7, #12
 8002b48:	601a      	str	r2, [r3, #0]
 8002b4a:	f107 030c 	add.w	r3, r7, #12
 8002b4e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002b50:	2301      	movs	r3, #1
 8002b52:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b56:	4b4f      	ldr	r3, [pc, #316]	; (8002c94 <HAL_RCC_OscConfig+0x924>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d11a      	bne.n	8002b98 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b62:	4b4c      	ldr	r3, [pc, #304]	; (8002c94 <HAL_RCC_OscConfig+0x924>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a4b      	ldr	r2, [pc, #300]	; (8002c94 <HAL_RCC_OscConfig+0x924>)
 8002b68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b6c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b6e:	f7fd ff3f 	bl	80009f0 <HAL_GetTick>
 8002b72:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b76:	e009      	b.n	8002b8c <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b78:	f7fd ff3a 	bl	80009f0 <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002b82:	1ad3      	subs	r3, r2, r3
 8002b84:	2b64      	cmp	r3, #100	; 0x64
 8002b86:	d901      	bls.n	8002b8c <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8002b88:	2303      	movs	r3, #3
 8002b8a:	e2ff      	b.n	800318c <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b8c:	4b41      	ldr	r3, [pc, #260]	; (8002c94 <HAL_RCC_OscConfig+0x924>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d0ef      	beq.n	8002b78 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b98:	1d3b      	adds	r3, r7, #4
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d106      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x840>
 8002ba2:	4b3a      	ldr	r3, [pc, #232]	; (8002c8c <HAL_RCC_OscConfig+0x91c>)
 8002ba4:	6a1b      	ldr	r3, [r3, #32]
 8002ba6:	4a39      	ldr	r2, [pc, #228]	; (8002c8c <HAL_RCC_OscConfig+0x91c>)
 8002ba8:	f043 0301 	orr.w	r3, r3, #1
 8002bac:	6213      	str	r3, [r2, #32]
 8002bae:	e02f      	b.n	8002c10 <HAL_RCC_OscConfig+0x8a0>
 8002bb0:	1d3b      	adds	r3, r7, #4
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d10c      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x864>
 8002bba:	4b34      	ldr	r3, [pc, #208]	; (8002c8c <HAL_RCC_OscConfig+0x91c>)
 8002bbc:	6a1b      	ldr	r3, [r3, #32]
 8002bbe:	4a33      	ldr	r2, [pc, #204]	; (8002c8c <HAL_RCC_OscConfig+0x91c>)
 8002bc0:	f023 0301 	bic.w	r3, r3, #1
 8002bc4:	6213      	str	r3, [r2, #32]
 8002bc6:	4b31      	ldr	r3, [pc, #196]	; (8002c8c <HAL_RCC_OscConfig+0x91c>)
 8002bc8:	6a1b      	ldr	r3, [r3, #32]
 8002bca:	4a30      	ldr	r2, [pc, #192]	; (8002c8c <HAL_RCC_OscConfig+0x91c>)
 8002bcc:	f023 0304 	bic.w	r3, r3, #4
 8002bd0:	6213      	str	r3, [r2, #32]
 8002bd2:	e01d      	b.n	8002c10 <HAL_RCC_OscConfig+0x8a0>
 8002bd4:	1d3b      	adds	r3, r7, #4
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	2b05      	cmp	r3, #5
 8002bdc:	d10c      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x888>
 8002bde:	4b2b      	ldr	r3, [pc, #172]	; (8002c8c <HAL_RCC_OscConfig+0x91c>)
 8002be0:	6a1b      	ldr	r3, [r3, #32]
 8002be2:	4a2a      	ldr	r2, [pc, #168]	; (8002c8c <HAL_RCC_OscConfig+0x91c>)
 8002be4:	f043 0304 	orr.w	r3, r3, #4
 8002be8:	6213      	str	r3, [r2, #32]
 8002bea:	4b28      	ldr	r3, [pc, #160]	; (8002c8c <HAL_RCC_OscConfig+0x91c>)
 8002bec:	6a1b      	ldr	r3, [r3, #32]
 8002bee:	4a27      	ldr	r2, [pc, #156]	; (8002c8c <HAL_RCC_OscConfig+0x91c>)
 8002bf0:	f043 0301 	orr.w	r3, r3, #1
 8002bf4:	6213      	str	r3, [r2, #32]
 8002bf6:	e00b      	b.n	8002c10 <HAL_RCC_OscConfig+0x8a0>
 8002bf8:	4b24      	ldr	r3, [pc, #144]	; (8002c8c <HAL_RCC_OscConfig+0x91c>)
 8002bfa:	6a1b      	ldr	r3, [r3, #32]
 8002bfc:	4a23      	ldr	r2, [pc, #140]	; (8002c8c <HAL_RCC_OscConfig+0x91c>)
 8002bfe:	f023 0301 	bic.w	r3, r3, #1
 8002c02:	6213      	str	r3, [r2, #32]
 8002c04:	4b21      	ldr	r3, [pc, #132]	; (8002c8c <HAL_RCC_OscConfig+0x91c>)
 8002c06:	6a1b      	ldr	r3, [r3, #32]
 8002c08:	4a20      	ldr	r2, [pc, #128]	; (8002c8c <HAL_RCC_OscConfig+0x91c>)
 8002c0a:	f023 0304 	bic.w	r3, r3, #4
 8002c0e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c10:	1d3b      	adds	r3, r7, #4
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d06a      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c1a:	f7fd fee9 	bl	80009f0 <HAL_GetTick>
 8002c1e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c22:	e00b      	b.n	8002c3c <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c24:	f7fd fee4 	bl	80009f0 <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002c2e:	1ad3      	subs	r3, r2, r3
 8002c30:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d901      	bls.n	8002c3c <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8002c38:	2303      	movs	r3, #3
 8002c3a:	e2a7      	b.n	800318c <HAL_RCC_OscConfig+0xe1c>
 8002c3c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002c40:	2202      	movs	r2, #2
 8002c42:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c44:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	fa93 f2a3 	rbit	r2, r3
 8002c4e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002c52:	601a      	str	r2, [r3, #0]
 8002c54:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002c58:	2202      	movs	r2, #2
 8002c5a:	601a      	str	r2, [r3, #0]
 8002c5c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	fa93 f2a3 	rbit	r2, r3
 8002c66:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002c6a:	601a      	str	r2, [r3, #0]
  return result;
 8002c6c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002c70:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c72:	fab3 f383 	clz	r3, r3
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	095b      	lsrs	r3, r3, #5
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	f043 0302 	orr.w	r3, r3, #2
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	d108      	bne.n	8002c98 <HAL_RCC_OscConfig+0x928>
 8002c86:	4b01      	ldr	r3, [pc, #4]	; (8002c8c <HAL_RCC_OscConfig+0x91c>)
 8002c88:	6a1b      	ldr	r3, [r3, #32]
 8002c8a:	e013      	b.n	8002cb4 <HAL_RCC_OscConfig+0x944>
 8002c8c:	40021000 	.word	0x40021000
 8002c90:	10908120 	.word	0x10908120
 8002c94:	40007000 	.word	0x40007000
 8002c98:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002c9c:	2202      	movs	r2, #2
 8002c9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	fa93 f2a3 	rbit	r2, r3
 8002caa:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002cae:	601a      	str	r2, [r3, #0]
 8002cb0:	4bc0      	ldr	r3, [pc, #768]	; (8002fb4 <HAL_RCC_OscConfig+0xc44>)
 8002cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb4:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002cb8:	2102      	movs	r1, #2
 8002cba:	6011      	str	r1, [r2, #0]
 8002cbc:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002cc0:	6812      	ldr	r2, [r2, #0]
 8002cc2:	fa92 f1a2 	rbit	r1, r2
 8002cc6:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002cca:	6011      	str	r1, [r2, #0]
  return result;
 8002ccc:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002cd0:	6812      	ldr	r2, [r2, #0]
 8002cd2:	fab2 f282 	clz	r2, r2
 8002cd6:	b2d2      	uxtb	r2, r2
 8002cd8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002cdc:	b2d2      	uxtb	r2, r2
 8002cde:	f002 021f 	and.w	r2, r2, #31
 8002ce2:	2101      	movs	r1, #1
 8002ce4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ce8:	4013      	ands	r3, r2
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d09a      	beq.n	8002c24 <HAL_RCC_OscConfig+0x8b4>
 8002cee:	e063      	b.n	8002db8 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cf0:	f7fd fe7e 	bl	80009f0 <HAL_GetTick>
 8002cf4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cf8:	e00b      	b.n	8002d12 <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cfa:	f7fd fe79 	bl	80009f0 <HAL_GetTick>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d901      	bls.n	8002d12 <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	e23c      	b.n	800318c <HAL_RCC_OscConfig+0xe1c>
 8002d12:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002d16:	2202      	movs	r2, #2
 8002d18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d1a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	fa93 f2a3 	rbit	r2, r3
 8002d24:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002d28:	601a      	str	r2, [r3, #0]
 8002d2a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002d2e:	2202      	movs	r2, #2
 8002d30:	601a      	str	r2, [r3, #0]
 8002d32:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	fa93 f2a3 	rbit	r2, r3
 8002d3c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002d40:	601a      	str	r2, [r3, #0]
  return result;
 8002d42:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002d46:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d48:	fab3 f383 	clz	r3, r3
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	095b      	lsrs	r3, r3, #5
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	f043 0302 	orr.w	r3, r3, #2
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	2b02      	cmp	r3, #2
 8002d5a:	d102      	bne.n	8002d62 <HAL_RCC_OscConfig+0x9f2>
 8002d5c:	4b95      	ldr	r3, [pc, #596]	; (8002fb4 <HAL_RCC_OscConfig+0xc44>)
 8002d5e:	6a1b      	ldr	r3, [r3, #32]
 8002d60:	e00d      	b.n	8002d7e <HAL_RCC_OscConfig+0xa0e>
 8002d62:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002d66:	2202      	movs	r2, #2
 8002d68:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d6a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	fa93 f2a3 	rbit	r2, r3
 8002d74:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002d78:	601a      	str	r2, [r3, #0]
 8002d7a:	4b8e      	ldr	r3, [pc, #568]	; (8002fb4 <HAL_RCC_OscConfig+0xc44>)
 8002d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7e:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8002d82:	2102      	movs	r1, #2
 8002d84:	6011      	str	r1, [r2, #0]
 8002d86:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8002d8a:	6812      	ldr	r2, [r2, #0]
 8002d8c:	fa92 f1a2 	rbit	r1, r2
 8002d90:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002d94:	6011      	str	r1, [r2, #0]
  return result;
 8002d96:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002d9a:	6812      	ldr	r2, [r2, #0]
 8002d9c:	fab2 f282 	clz	r2, r2
 8002da0:	b2d2      	uxtb	r2, r2
 8002da2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002da6:	b2d2      	uxtb	r2, r2
 8002da8:	f002 021f 	and.w	r2, r2, #31
 8002dac:	2101      	movs	r1, #1
 8002dae:	fa01 f202 	lsl.w	r2, r1, r2
 8002db2:	4013      	ands	r3, r2
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d1a0      	bne.n	8002cfa <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002db8:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d105      	bne.n	8002dcc <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dc0:	4b7c      	ldr	r3, [pc, #496]	; (8002fb4 <HAL_RCC_OscConfig+0xc44>)
 8002dc2:	69db      	ldr	r3, [r3, #28]
 8002dc4:	4a7b      	ldr	r2, [pc, #492]	; (8002fb4 <HAL_RCC_OscConfig+0xc44>)
 8002dc6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dca:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dcc:	1d3b      	adds	r3, r7, #4
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	699b      	ldr	r3, [r3, #24]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	f000 81d9 	beq.w	800318a <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002dd8:	4b76      	ldr	r3, [pc, #472]	; (8002fb4 <HAL_RCC_OscConfig+0xc44>)
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f003 030c 	and.w	r3, r3, #12
 8002de0:	2b08      	cmp	r3, #8
 8002de2:	f000 81a6 	beq.w	8003132 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002de6:	1d3b      	adds	r3, r7, #4
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	699b      	ldr	r3, [r3, #24]
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	f040 811e 	bne.w	800302e <HAL_RCC_OscConfig+0xcbe>
 8002df2:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002df6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002dfa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dfc:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	fa93 f2a3 	rbit	r2, r3
 8002e06:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002e0a:	601a      	str	r2, [r3, #0]
  return result;
 8002e0c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002e10:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e12:	fab3 f383 	clz	r3, r3
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002e1c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	461a      	mov	r2, r3
 8002e24:	2300      	movs	r3, #0
 8002e26:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e28:	f7fd fde2 	bl	80009f0 <HAL_GetTick>
 8002e2c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e30:	e009      	b.n	8002e46 <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e32:	f7fd fddd 	bl	80009f0 <HAL_GetTick>
 8002e36:	4602      	mov	r2, r0
 8002e38:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	2b02      	cmp	r3, #2
 8002e40:	d901      	bls.n	8002e46 <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	e1a2      	b.n	800318c <HAL_RCC_OscConfig+0xe1c>
 8002e46:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002e4a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e4e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e50:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	fa93 f2a3 	rbit	r2, r3
 8002e5a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002e5e:	601a      	str	r2, [r3, #0]
  return result;
 8002e60:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002e64:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e66:	fab3 f383 	clz	r3, r3
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	095b      	lsrs	r3, r3, #5
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	f043 0301 	orr.w	r3, r3, #1
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d102      	bne.n	8002e80 <HAL_RCC_OscConfig+0xb10>
 8002e7a:	4b4e      	ldr	r3, [pc, #312]	; (8002fb4 <HAL_RCC_OscConfig+0xc44>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	e01b      	b.n	8002eb8 <HAL_RCC_OscConfig+0xb48>
 8002e80:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002e84:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e88:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e8a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	fa93 f2a3 	rbit	r2, r3
 8002e94:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002e98:	601a      	str	r2, [r3, #0]
 8002e9a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002e9e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ea2:	601a      	str	r2, [r3, #0]
 8002ea4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	fa93 f2a3 	rbit	r2, r3
 8002eae:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002eb2:	601a      	str	r2, [r3, #0]
 8002eb4:	4b3f      	ldr	r3, [pc, #252]	; (8002fb4 <HAL_RCC_OscConfig+0xc44>)
 8002eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb8:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8002ebc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002ec0:	6011      	str	r1, [r2, #0]
 8002ec2:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8002ec6:	6812      	ldr	r2, [r2, #0]
 8002ec8:	fa92 f1a2 	rbit	r1, r2
 8002ecc:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002ed0:	6011      	str	r1, [r2, #0]
  return result;
 8002ed2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002ed6:	6812      	ldr	r2, [r2, #0]
 8002ed8:	fab2 f282 	clz	r2, r2
 8002edc:	b2d2      	uxtb	r2, r2
 8002ede:	f042 0220 	orr.w	r2, r2, #32
 8002ee2:	b2d2      	uxtb	r2, r2
 8002ee4:	f002 021f 	and.w	r2, r2, #31
 8002ee8:	2101      	movs	r1, #1
 8002eea:	fa01 f202 	lsl.w	r2, r1, r2
 8002eee:	4013      	ands	r3, r2
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d19e      	bne.n	8002e32 <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ef4:	4b2f      	ldr	r3, [pc, #188]	; (8002fb4 <HAL_RCC_OscConfig+0xc44>)
 8002ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef8:	f023 020f 	bic.w	r2, r3, #15
 8002efc:	1d3b      	adds	r3, r7, #4
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f02:	492c      	ldr	r1, [pc, #176]	; (8002fb4 <HAL_RCC_OscConfig+0xc44>)
 8002f04:	4313      	orrs	r3, r2
 8002f06:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002f08:	4b2a      	ldr	r3, [pc, #168]	; (8002fb4 <HAL_RCC_OscConfig+0xc44>)
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8002f10:	1d3b      	adds	r3, r7, #4
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	6a19      	ldr	r1, [r3, #32]
 8002f16:	1d3b      	adds	r3, r7, #4
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	69db      	ldr	r3, [r3, #28]
 8002f1c:	430b      	orrs	r3, r1
 8002f1e:	4925      	ldr	r1, [pc, #148]	; (8002fb4 <HAL_RCC_OscConfig+0xc44>)
 8002f20:	4313      	orrs	r3, r2
 8002f22:	604b      	str	r3, [r1, #4]
 8002f24:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002f28:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002f2c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f2e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	fa93 f2a3 	rbit	r2, r3
 8002f38:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002f3c:	601a      	str	r2, [r3, #0]
  return result;
 8002f3e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002f42:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f44:	fab3 f383 	clz	r3, r3
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002f4e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	461a      	mov	r2, r3
 8002f56:	2301      	movs	r3, #1
 8002f58:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f5a:	f7fd fd49 	bl	80009f0 <HAL_GetTick>
 8002f5e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f62:	e009      	b.n	8002f78 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f64:	f7fd fd44 	bl	80009f0 <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	2b02      	cmp	r3, #2
 8002f72:	d901      	bls.n	8002f78 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002f74:	2303      	movs	r3, #3
 8002f76:	e109      	b.n	800318c <HAL_RCC_OscConfig+0xe1c>
 8002f78:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002f7c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f80:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f82:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	fa93 f2a3 	rbit	r2, r3
 8002f8c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002f90:	601a      	str	r2, [r3, #0]
  return result;
 8002f92:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002f96:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f98:	fab3 f383 	clz	r3, r3
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	095b      	lsrs	r3, r3, #5
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	f043 0301 	orr.w	r3, r3, #1
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d105      	bne.n	8002fb8 <HAL_RCC_OscConfig+0xc48>
 8002fac:	4b01      	ldr	r3, [pc, #4]	; (8002fb4 <HAL_RCC_OscConfig+0xc44>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	e01e      	b.n	8002ff0 <HAL_RCC_OscConfig+0xc80>
 8002fb2:	bf00      	nop
 8002fb4:	40021000 	.word	0x40021000
 8002fb8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002fbc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002fc0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fc2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	fa93 f2a3 	rbit	r2, r3
 8002fcc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002fd0:	601a      	str	r2, [r3, #0]
 8002fd2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002fd6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002fda:	601a      	str	r2, [r3, #0]
 8002fdc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	fa93 f2a3 	rbit	r2, r3
 8002fe6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002fea:	601a      	str	r2, [r3, #0]
 8002fec:	4b6a      	ldr	r3, [pc, #424]	; (8003198 <HAL_RCC_OscConfig+0xe28>)
 8002fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff0:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002ff4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002ff8:	6011      	str	r1, [r2, #0]
 8002ffa:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002ffe:	6812      	ldr	r2, [r2, #0]
 8003000:	fa92 f1a2 	rbit	r1, r2
 8003004:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003008:	6011      	str	r1, [r2, #0]
  return result;
 800300a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800300e:	6812      	ldr	r2, [r2, #0]
 8003010:	fab2 f282 	clz	r2, r2
 8003014:	b2d2      	uxtb	r2, r2
 8003016:	f042 0220 	orr.w	r2, r2, #32
 800301a:	b2d2      	uxtb	r2, r2
 800301c:	f002 021f 	and.w	r2, r2, #31
 8003020:	2101      	movs	r1, #1
 8003022:	fa01 f202 	lsl.w	r2, r1, r2
 8003026:	4013      	ands	r3, r2
 8003028:	2b00      	cmp	r3, #0
 800302a:	d09b      	beq.n	8002f64 <HAL_RCC_OscConfig+0xbf4>
 800302c:	e0ad      	b.n	800318a <HAL_RCC_OscConfig+0xe1a>
 800302e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003032:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003036:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003038:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	fa93 f2a3 	rbit	r2, r3
 8003042:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003046:	601a      	str	r2, [r3, #0]
  return result;
 8003048:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800304c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800304e:	fab3 f383 	clz	r3, r3
 8003052:	b2db      	uxtb	r3, r3
 8003054:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003058:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	461a      	mov	r2, r3
 8003060:	2300      	movs	r3, #0
 8003062:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003064:	f7fd fcc4 	bl	80009f0 <HAL_GetTick>
 8003068:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800306c:	e009      	b.n	8003082 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800306e:	f7fd fcbf 	bl	80009f0 <HAL_GetTick>
 8003072:	4602      	mov	r2, r0
 8003074:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	2b02      	cmp	r3, #2
 800307c:	d901      	bls.n	8003082 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e084      	b.n	800318c <HAL_RCC_OscConfig+0xe1c>
 8003082:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003086:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800308a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800308c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	fa93 f2a3 	rbit	r2, r3
 8003096:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800309a:	601a      	str	r2, [r3, #0]
  return result;
 800309c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80030a0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030a2:	fab3 f383 	clz	r3, r3
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	095b      	lsrs	r3, r3, #5
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	f043 0301 	orr.w	r3, r3, #1
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d102      	bne.n	80030bc <HAL_RCC_OscConfig+0xd4c>
 80030b6:	4b38      	ldr	r3, [pc, #224]	; (8003198 <HAL_RCC_OscConfig+0xe28>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	e01b      	b.n	80030f4 <HAL_RCC_OscConfig+0xd84>
 80030bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80030c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	fa93 f2a3 	rbit	r2, r3
 80030d0:	f107 0320 	add.w	r3, r7, #32
 80030d4:	601a      	str	r2, [r3, #0]
 80030d6:	f107 031c 	add.w	r3, r7, #28
 80030da:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80030de:	601a      	str	r2, [r3, #0]
 80030e0:	f107 031c 	add.w	r3, r7, #28
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	fa93 f2a3 	rbit	r2, r3
 80030ea:	f107 0318 	add.w	r3, r7, #24
 80030ee:	601a      	str	r2, [r3, #0]
 80030f0:	4b29      	ldr	r3, [pc, #164]	; (8003198 <HAL_RCC_OscConfig+0xe28>)
 80030f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f4:	f107 0214 	add.w	r2, r7, #20
 80030f8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80030fc:	6011      	str	r1, [r2, #0]
 80030fe:	f107 0214 	add.w	r2, r7, #20
 8003102:	6812      	ldr	r2, [r2, #0]
 8003104:	fa92 f1a2 	rbit	r1, r2
 8003108:	f107 0210 	add.w	r2, r7, #16
 800310c:	6011      	str	r1, [r2, #0]
  return result;
 800310e:	f107 0210 	add.w	r2, r7, #16
 8003112:	6812      	ldr	r2, [r2, #0]
 8003114:	fab2 f282 	clz	r2, r2
 8003118:	b2d2      	uxtb	r2, r2
 800311a:	f042 0220 	orr.w	r2, r2, #32
 800311e:	b2d2      	uxtb	r2, r2
 8003120:	f002 021f 	and.w	r2, r2, #31
 8003124:	2101      	movs	r1, #1
 8003126:	fa01 f202 	lsl.w	r2, r1, r2
 800312a:	4013      	ands	r3, r2
 800312c:	2b00      	cmp	r3, #0
 800312e:	d19e      	bne.n	800306e <HAL_RCC_OscConfig+0xcfe>
 8003130:	e02b      	b.n	800318a <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003132:	1d3b      	adds	r3, r7, #4
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	699b      	ldr	r3, [r3, #24]
 8003138:	2b01      	cmp	r3, #1
 800313a:	d101      	bne.n	8003140 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e025      	b.n	800318c <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003140:	4b15      	ldr	r3, [pc, #84]	; (8003198 <HAL_RCC_OscConfig+0xe28>)
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8003148:	4b13      	ldr	r3, [pc, #76]	; (8003198 <HAL_RCC_OscConfig+0xe28>)
 800314a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800314c:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003150:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003154:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8003158:	1d3b      	adds	r3, r7, #4
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	69db      	ldr	r3, [r3, #28]
 800315e:	429a      	cmp	r2, r3
 8003160:	d111      	bne.n	8003186 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003162:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003166:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800316a:	1d3b      	adds	r3, r7, #4
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003170:	429a      	cmp	r2, r3
 8003172:	d108      	bne.n	8003186 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8003174:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003178:	f003 020f 	and.w	r2, r3, #15
 800317c:	1d3b      	adds	r3, r7, #4
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003182:	429a      	cmp	r2, r3
 8003184:	d001      	beq.n	800318a <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e000      	b.n	800318c <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 800318a:	2300      	movs	r3, #0
}
 800318c:	4618      	mov	r0, r3
 800318e:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	40021000 	.word	0x40021000

0800319c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b09e      	sub	sp, #120	; 0x78
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80031a6:	2300      	movs	r3, #0
 80031a8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d101      	bne.n	80031b4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	e162      	b.n	800347a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031b4:	4b90      	ldr	r3, [pc, #576]	; (80033f8 <HAL_RCC_ClockConfig+0x25c>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 0307 	and.w	r3, r3, #7
 80031bc:	683a      	ldr	r2, [r7, #0]
 80031be:	429a      	cmp	r2, r3
 80031c0:	d910      	bls.n	80031e4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031c2:	4b8d      	ldr	r3, [pc, #564]	; (80033f8 <HAL_RCC_ClockConfig+0x25c>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f023 0207 	bic.w	r2, r3, #7
 80031ca:	498b      	ldr	r1, [pc, #556]	; (80033f8 <HAL_RCC_ClockConfig+0x25c>)
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031d2:	4b89      	ldr	r3, [pc, #548]	; (80033f8 <HAL_RCC_ClockConfig+0x25c>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0307 	and.w	r3, r3, #7
 80031da:	683a      	ldr	r2, [r7, #0]
 80031dc:	429a      	cmp	r2, r3
 80031de:	d001      	beq.n	80031e4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e14a      	b.n	800347a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 0302 	and.w	r3, r3, #2
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d008      	beq.n	8003202 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031f0:	4b82      	ldr	r3, [pc, #520]	; (80033fc <HAL_RCC_ClockConfig+0x260>)
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	497f      	ldr	r1, [pc, #508]	; (80033fc <HAL_RCC_ClockConfig+0x260>)
 80031fe:	4313      	orrs	r3, r2
 8003200:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 0301 	and.w	r3, r3, #1
 800320a:	2b00      	cmp	r3, #0
 800320c:	f000 80dc 	beq.w	80033c8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	2b01      	cmp	r3, #1
 8003216:	d13c      	bne.n	8003292 <HAL_RCC_ClockConfig+0xf6>
 8003218:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800321c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800321e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003220:	fa93 f3a3 	rbit	r3, r3
 8003224:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003226:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003228:	fab3 f383 	clz	r3, r3
 800322c:	b2db      	uxtb	r3, r3
 800322e:	095b      	lsrs	r3, r3, #5
 8003230:	b2db      	uxtb	r3, r3
 8003232:	f043 0301 	orr.w	r3, r3, #1
 8003236:	b2db      	uxtb	r3, r3
 8003238:	2b01      	cmp	r3, #1
 800323a:	d102      	bne.n	8003242 <HAL_RCC_ClockConfig+0xa6>
 800323c:	4b6f      	ldr	r3, [pc, #444]	; (80033fc <HAL_RCC_ClockConfig+0x260>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	e00f      	b.n	8003262 <HAL_RCC_ClockConfig+0xc6>
 8003242:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003246:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003248:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800324a:	fa93 f3a3 	rbit	r3, r3
 800324e:	667b      	str	r3, [r7, #100]	; 0x64
 8003250:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003254:	663b      	str	r3, [r7, #96]	; 0x60
 8003256:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003258:	fa93 f3a3 	rbit	r3, r3
 800325c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800325e:	4b67      	ldr	r3, [pc, #412]	; (80033fc <HAL_RCC_ClockConfig+0x260>)
 8003260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003262:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003266:	65ba      	str	r2, [r7, #88]	; 0x58
 8003268:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800326a:	fa92 f2a2 	rbit	r2, r2
 800326e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003270:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003272:	fab2 f282 	clz	r2, r2
 8003276:	b2d2      	uxtb	r2, r2
 8003278:	f042 0220 	orr.w	r2, r2, #32
 800327c:	b2d2      	uxtb	r2, r2
 800327e:	f002 021f 	and.w	r2, r2, #31
 8003282:	2101      	movs	r1, #1
 8003284:	fa01 f202 	lsl.w	r2, r1, r2
 8003288:	4013      	ands	r3, r2
 800328a:	2b00      	cmp	r3, #0
 800328c:	d17b      	bne.n	8003386 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e0f3      	b.n	800347a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	2b02      	cmp	r3, #2
 8003298:	d13c      	bne.n	8003314 <HAL_RCC_ClockConfig+0x178>
 800329a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800329e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032a2:	fa93 f3a3 	rbit	r3, r3
 80032a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80032a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032aa:	fab3 f383 	clz	r3, r3
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	095b      	lsrs	r3, r3, #5
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	f043 0301 	orr.w	r3, r3, #1
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d102      	bne.n	80032c4 <HAL_RCC_ClockConfig+0x128>
 80032be:	4b4f      	ldr	r3, [pc, #316]	; (80033fc <HAL_RCC_ClockConfig+0x260>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	e00f      	b.n	80032e4 <HAL_RCC_ClockConfig+0x148>
 80032c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032c8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032cc:	fa93 f3a3 	rbit	r3, r3
 80032d0:	647b      	str	r3, [r7, #68]	; 0x44
 80032d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032d6:	643b      	str	r3, [r7, #64]	; 0x40
 80032d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032da:	fa93 f3a3 	rbit	r3, r3
 80032de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032e0:	4b46      	ldr	r3, [pc, #280]	; (80033fc <HAL_RCC_ClockConfig+0x260>)
 80032e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032e8:	63ba      	str	r2, [r7, #56]	; 0x38
 80032ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80032ec:	fa92 f2a2 	rbit	r2, r2
 80032f0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80032f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80032f4:	fab2 f282 	clz	r2, r2
 80032f8:	b2d2      	uxtb	r2, r2
 80032fa:	f042 0220 	orr.w	r2, r2, #32
 80032fe:	b2d2      	uxtb	r2, r2
 8003300:	f002 021f 	and.w	r2, r2, #31
 8003304:	2101      	movs	r1, #1
 8003306:	fa01 f202 	lsl.w	r2, r1, r2
 800330a:	4013      	ands	r3, r2
 800330c:	2b00      	cmp	r3, #0
 800330e:	d13a      	bne.n	8003386 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	e0b2      	b.n	800347a <HAL_RCC_ClockConfig+0x2de>
 8003314:	2302      	movs	r3, #2
 8003316:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800331a:	fa93 f3a3 	rbit	r3, r3
 800331e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003322:	fab3 f383 	clz	r3, r3
 8003326:	b2db      	uxtb	r3, r3
 8003328:	095b      	lsrs	r3, r3, #5
 800332a:	b2db      	uxtb	r3, r3
 800332c:	f043 0301 	orr.w	r3, r3, #1
 8003330:	b2db      	uxtb	r3, r3
 8003332:	2b01      	cmp	r3, #1
 8003334:	d102      	bne.n	800333c <HAL_RCC_ClockConfig+0x1a0>
 8003336:	4b31      	ldr	r3, [pc, #196]	; (80033fc <HAL_RCC_ClockConfig+0x260>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	e00d      	b.n	8003358 <HAL_RCC_ClockConfig+0x1bc>
 800333c:	2302      	movs	r3, #2
 800333e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003342:	fa93 f3a3 	rbit	r3, r3
 8003346:	627b      	str	r3, [r7, #36]	; 0x24
 8003348:	2302      	movs	r3, #2
 800334a:	623b      	str	r3, [r7, #32]
 800334c:	6a3b      	ldr	r3, [r7, #32]
 800334e:	fa93 f3a3 	rbit	r3, r3
 8003352:	61fb      	str	r3, [r7, #28]
 8003354:	4b29      	ldr	r3, [pc, #164]	; (80033fc <HAL_RCC_ClockConfig+0x260>)
 8003356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003358:	2202      	movs	r2, #2
 800335a:	61ba      	str	r2, [r7, #24]
 800335c:	69ba      	ldr	r2, [r7, #24]
 800335e:	fa92 f2a2 	rbit	r2, r2
 8003362:	617a      	str	r2, [r7, #20]
  return result;
 8003364:	697a      	ldr	r2, [r7, #20]
 8003366:	fab2 f282 	clz	r2, r2
 800336a:	b2d2      	uxtb	r2, r2
 800336c:	f042 0220 	orr.w	r2, r2, #32
 8003370:	b2d2      	uxtb	r2, r2
 8003372:	f002 021f 	and.w	r2, r2, #31
 8003376:	2101      	movs	r1, #1
 8003378:	fa01 f202 	lsl.w	r2, r1, r2
 800337c:	4013      	ands	r3, r2
 800337e:	2b00      	cmp	r3, #0
 8003380:	d101      	bne.n	8003386 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e079      	b.n	800347a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003386:	4b1d      	ldr	r3, [pc, #116]	; (80033fc <HAL_RCC_ClockConfig+0x260>)
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	f023 0203 	bic.w	r2, r3, #3
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	491a      	ldr	r1, [pc, #104]	; (80033fc <HAL_RCC_ClockConfig+0x260>)
 8003394:	4313      	orrs	r3, r2
 8003396:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003398:	f7fd fb2a 	bl	80009f0 <HAL_GetTick>
 800339c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800339e:	e00a      	b.n	80033b6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033a0:	f7fd fb26 	bl	80009f0 <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d901      	bls.n	80033b6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	e061      	b.n	800347a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033b6:	4b11      	ldr	r3, [pc, #68]	; (80033fc <HAL_RCC_ClockConfig+0x260>)
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	f003 020c 	and.w	r2, r3, #12
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d1eb      	bne.n	80033a0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033c8:	4b0b      	ldr	r3, [pc, #44]	; (80033f8 <HAL_RCC_ClockConfig+0x25c>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 0307 	and.w	r3, r3, #7
 80033d0:	683a      	ldr	r2, [r7, #0]
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d214      	bcs.n	8003400 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033d6:	4b08      	ldr	r3, [pc, #32]	; (80033f8 <HAL_RCC_ClockConfig+0x25c>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f023 0207 	bic.w	r2, r3, #7
 80033de:	4906      	ldr	r1, [pc, #24]	; (80033f8 <HAL_RCC_ClockConfig+0x25c>)
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033e6:	4b04      	ldr	r3, [pc, #16]	; (80033f8 <HAL_RCC_ClockConfig+0x25c>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0307 	and.w	r3, r3, #7
 80033ee:	683a      	ldr	r2, [r7, #0]
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d005      	beq.n	8003400 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	e040      	b.n	800347a <HAL_RCC_ClockConfig+0x2de>
 80033f8:	40022000 	.word	0x40022000
 80033fc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 0304 	and.w	r3, r3, #4
 8003408:	2b00      	cmp	r3, #0
 800340a:	d008      	beq.n	800341e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800340c:	4b1d      	ldr	r3, [pc, #116]	; (8003484 <HAL_RCC_ClockConfig+0x2e8>)
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	491a      	ldr	r1, [pc, #104]	; (8003484 <HAL_RCC_ClockConfig+0x2e8>)
 800341a:	4313      	orrs	r3, r2
 800341c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 0308 	and.w	r3, r3, #8
 8003426:	2b00      	cmp	r3, #0
 8003428:	d009      	beq.n	800343e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800342a:	4b16      	ldr	r3, [pc, #88]	; (8003484 <HAL_RCC_ClockConfig+0x2e8>)
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	691b      	ldr	r3, [r3, #16]
 8003436:	00db      	lsls	r3, r3, #3
 8003438:	4912      	ldr	r1, [pc, #72]	; (8003484 <HAL_RCC_ClockConfig+0x2e8>)
 800343a:	4313      	orrs	r3, r2
 800343c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800343e:	f000 f829 	bl	8003494 <HAL_RCC_GetSysClockFreq>
 8003442:	4601      	mov	r1, r0
 8003444:	4b0f      	ldr	r3, [pc, #60]	; (8003484 <HAL_RCC_ClockConfig+0x2e8>)
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800344c:	22f0      	movs	r2, #240	; 0xf0
 800344e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003450:	693a      	ldr	r2, [r7, #16]
 8003452:	fa92 f2a2 	rbit	r2, r2
 8003456:	60fa      	str	r2, [r7, #12]
  return result;
 8003458:	68fa      	ldr	r2, [r7, #12]
 800345a:	fab2 f282 	clz	r2, r2
 800345e:	b2d2      	uxtb	r2, r2
 8003460:	40d3      	lsrs	r3, r2
 8003462:	4a09      	ldr	r2, [pc, #36]	; (8003488 <HAL_RCC_ClockConfig+0x2ec>)
 8003464:	5cd3      	ldrb	r3, [r2, r3]
 8003466:	fa21 f303 	lsr.w	r3, r1, r3
 800346a:	4a08      	ldr	r2, [pc, #32]	; (800348c <HAL_RCC_ClockConfig+0x2f0>)
 800346c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800346e:	4b08      	ldr	r3, [pc, #32]	; (8003490 <HAL_RCC_ClockConfig+0x2f4>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4618      	mov	r0, r3
 8003474:	f7fd fa78 	bl	8000968 <HAL_InitTick>
  
  return HAL_OK;
 8003478:	2300      	movs	r3, #0
}
 800347a:	4618      	mov	r0, r3
 800347c:	3778      	adds	r7, #120	; 0x78
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	40021000 	.word	0x40021000
 8003488:	080057b4 	.word	0x080057b4
 800348c:	20000000 	.word	0x20000000
 8003490:	20000004 	.word	0x20000004

08003494 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003494:	b480      	push	{r7}
 8003496:	b08b      	sub	sp, #44	; 0x2c
 8003498:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800349a:	2300      	movs	r3, #0
 800349c:	61fb      	str	r3, [r7, #28]
 800349e:	2300      	movs	r3, #0
 80034a0:	61bb      	str	r3, [r7, #24]
 80034a2:	2300      	movs	r3, #0
 80034a4:	627b      	str	r3, [r7, #36]	; 0x24
 80034a6:	2300      	movs	r3, #0
 80034a8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80034aa:	2300      	movs	r3, #0
 80034ac:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80034ae:	4b2a      	ldr	r3, [pc, #168]	; (8003558 <HAL_RCC_GetSysClockFreq+0xc4>)
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80034b4:	69fb      	ldr	r3, [r7, #28]
 80034b6:	f003 030c 	and.w	r3, r3, #12
 80034ba:	2b04      	cmp	r3, #4
 80034bc:	d002      	beq.n	80034c4 <HAL_RCC_GetSysClockFreq+0x30>
 80034be:	2b08      	cmp	r3, #8
 80034c0:	d003      	beq.n	80034ca <HAL_RCC_GetSysClockFreq+0x36>
 80034c2:	e03f      	b.n	8003544 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80034c4:	4b25      	ldr	r3, [pc, #148]	; (800355c <HAL_RCC_GetSysClockFreq+0xc8>)
 80034c6:	623b      	str	r3, [r7, #32]
      break;
 80034c8:	e03f      	b.n	800354a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80034d0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80034d4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034d6:	68ba      	ldr	r2, [r7, #8]
 80034d8:	fa92 f2a2 	rbit	r2, r2
 80034dc:	607a      	str	r2, [r7, #4]
  return result;
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	fab2 f282 	clz	r2, r2
 80034e4:	b2d2      	uxtb	r2, r2
 80034e6:	40d3      	lsrs	r3, r2
 80034e8:	4a1d      	ldr	r2, [pc, #116]	; (8003560 <HAL_RCC_GetSysClockFreq+0xcc>)
 80034ea:	5cd3      	ldrb	r3, [r2, r3]
 80034ec:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80034ee:	4b1a      	ldr	r3, [pc, #104]	; (8003558 <HAL_RCC_GetSysClockFreq+0xc4>)
 80034f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f2:	f003 030f 	and.w	r3, r3, #15
 80034f6:	220f      	movs	r2, #15
 80034f8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034fa:	693a      	ldr	r2, [r7, #16]
 80034fc:	fa92 f2a2 	rbit	r2, r2
 8003500:	60fa      	str	r2, [r7, #12]
  return result;
 8003502:	68fa      	ldr	r2, [r7, #12]
 8003504:	fab2 f282 	clz	r2, r2
 8003508:	b2d2      	uxtb	r2, r2
 800350a:	40d3      	lsrs	r3, r2
 800350c:	4a15      	ldr	r2, [pc, #84]	; (8003564 <HAL_RCC_GetSysClockFreq+0xd0>)
 800350e:	5cd3      	ldrb	r3, [r2, r3]
 8003510:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003518:	2b00      	cmp	r3, #0
 800351a:	d008      	beq.n	800352e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800351c:	4a0f      	ldr	r2, [pc, #60]	; (800355c <HAL_RCC_GetSysClockFreq+0xc8>)
 800351e:	69bb      	ldr	r3, [r7, #24]
 8003520:	fbb2 f2f3 	udiv	r2, r2, r3
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	fb02 f303 	mul.w	r3, r2, r3
 800352a:	627b      	str	r3, [r7, #36]	; 0x24
 800352c:	e007      	b.n	800353e <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800352e:	4a0b      	ldr	r2, [pc, #44]	; (800355c <HAL_RCC_GetSysClockFreq+0xc8>)
 8003530:	69bb      	ldr	r3, [r7, #24]
 8003532:	fbb2 f2f3 	udiv	r2, r2, r3
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	fb02 f303 	mul.w	r3, r2, r3
 800353c:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800353e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003540:	623b      	str	r3, [r7, #32]
      break;
 8003542:	e002      	b.n	800354a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003544:	4b05      	ldr	r3, [pc, #20]	; (800355c <HAL_RCC_GetSysClockFreq+0xc8>)
 8003546:	623b      	str	r3, [r7, #32]
      break;
 8003548:	bf00      	nop
    }
  }
  return sysclockfreq;
 800354a:	6a3b      	ldr	r3, [r7, #32]
}
 800354c:	4618      	mov	r0, r3
 800354e:	372c      	adds	r7, #44	; 0x2c
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr
 8003558:	40021000 	.word	0x40021000
 800355c:	007a1200 	.word	0x007a1200
 8003560:	080057cc 	.word	0x080057cc
 8003564:	080057dc 	.word	0x080057dc

08003568 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003568:	b480      	push	{r7}
 800356a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800356c:	4b03      	ldr	r3, [pc, #12]	; (800357c <HAL_RCC_GetHCLKFreq+0x14>)
 800356e:	681b      	ldr	r3, [r3, #0]
}
 8003570:	4618      	mov	r0, r3
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr
 800357a:	bf00      	nop
 800357c:	20000000 	.word	0x20000000

08003580 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b082      	sub	sp, #8
 8003584:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003586:	f7ff ffef 	bl	8003568 <HAL_RCC_GetHCLKFreq>
 800358a:	4601      	mov	r1, r0
 800358c:	4b0b      	ldr	r3, [pc, #44]	; (80035bc <HAL_RCC_GetPCLK1Freq+0x3c>)
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003594:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003598:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800359a:	687a      	ldr	r2, [r7, #4]
 800359c:	fa92 f2a2 	rbit	r2, r2
 80035a0:	603a      	str	r2, [r7, #0]
  return result;
 80035a2:	683a      	ldr	r2, [r7, #0]
 80035a4:	fab2 f282 	clz	r2, r2
 80035a8:	b2d2      	uxtb	r2, r2
 80035aa:	40d3      	lsrs	r3, r2
 80035ac:	4a04      	ldr	r2, [pc, #16]	; (80035c0 <HAL_RCC_GetPCLK1Freq+0x40>)
 80035ae:	5cd3      	ldrb	r3, [r2, r3]
 80035b0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80035b4:	4618      	mov	r0, r3
 80035b6:	3708      	adds	r7, #8
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}
 80035bc:	40021000 	.word	0x40021000
 80035c0:	080057c4 	.word	0x080057c4

080035c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b082      	sub	sp, #8
 80035c8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80035ca:	f7ff ffcd 	bl	8003568 <HAL_RCC_GetHCLKFreq>
 80035ce:	4601      	mov	r1, r0
 80035d0:	4b0b      	ldr	r3, [pc, #44]	; (8003600 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80035d8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80035dc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035de:	687a      	ldr	r2, [r7, #4]
 80035e0:	fa92 f2a2 	rbit	r2, r2
 80035e4:	603a      	str	r2, [r7, #0]
  return result;
 80035e6:	683a      	ldr	r2, [r7, #0]
 80035e8:	fab2 f282 	clz	r2, r2
 80035ec:	b2d2      	uxtb	r2, r2
 80035ee:	40d3      	lsrs	r3, r2
 80035f0:	4a04      	ldr	r2, [pc, #16]	; (8003604 <HAL_RCC_GetPCLK2Freq+0x40>)
 80035f2:	5cd3      	ldrb	r3, [r2, r3]
 80035f4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80035f8:	4618      	mov	r0, r3
 80035fa:	3708      	adds	r7, #8
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}
 8003600:	40021000 	.word	0x40021000
 8003604:	080057c4 	.word	0x080057c4

08003608 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b092      	sub	sp, #72	; 0x48
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003610:	2300      	movs	r3, #0
 8003612:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003614:	2300      	movs	r3, #0
 8003616:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003618:	2300      	movs	r3, #0
 800361a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003626:	2b00      	cmp	r3, #0
 8003628:	f000 80d4 	beq.w	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800362c:	4b4e      	ldr	r3, [pc, #312]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800362e:	69db      	ldr	r3, [r3, #28]
 8003630:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003634:	2b00      	cmp	r3, #0
 8003636:	d10e      	bne.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003638:	4b4b      	ldr	r3, [pc, #300]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800363a:	69db      	ldr	r3, [r3, #28]
 800363c:	4a4a      	ldr	r2, [pc, #296]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800363e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003642:	61d3      	str	r3, [r2, #28]
 8003644:	4b48      	ldr	r3, [pc, #288]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003646:	69db      	ldr	r3, [r3, #28]
 8003648:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800364c:	60bb      	str	r3, [r7, #8]
 800364e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003650:	2301      	movs	r3, #1
 8003652:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003656:	4b45      	ldr	r3, [pc, #276]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800365e:	2b00      	cmp	r3, #0
 8003660:	d118      	bne.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003662:	4b42      	ldr	r3, [pc, #264]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a41      	ldr	r2, [pc, #260]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003668:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800366c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800366e:	f7fd f9bf 	bl	80009f0 <HAL_GetTick>
 8003672:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003674:	e008      	b.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003676:	f7fd f9bb 	bl	80009f0 <HAL_GetTick>
 800367a:	4602      	mov	r2, r0
 800367c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800367e:	1ad3      	subs	r3, r2, r3
 8003680:	2b64      	cmp	r3, #100	; 0x64
 8003682:	d901      	bls.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003684:	2303      	movs	r3, #3
 8003686:	e1d6      	b.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003688:	4b38      	ldr	r3, [pc, #224]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003690:	2b00      	cmp	r3, #0
 8003692:	d0f0      	beq.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003694:	4b34      	ldr	r3, [pc, #208]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003696:	6a1b      	ldr	r3, [r3, #32]
 8003698:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800369c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800369e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	f000 8084 	beq.w	80037ae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036ae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d07c      	beq.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80036b4:	4b2c      	ldr	r3, [pc, #176]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036b6:	6a1b      	ldr	r3, [r3, #32]
 80036b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80036c2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036c6:	fa93 f3a3 	rbit	r3, r3
 80036ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80036cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80036ce:	fab3 f383 	clz	r3, r3
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	461a      	mov	r2, r3
 80036d6:	4b26      	ldr	r3, [pc, #152]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80036d8:	4413      	add	r3, r2
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	461a      	mov	r2, r3
 80036de:	2301      	movs	r3, #1
 80036e0:	6013      	str	r3, [r2, #0]
 80036e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80036e6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036ea:	fa93 f3a3 	rbit	r3, r3
 80036ee:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80036f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80036f2:	fab3 f383 	clz	r3, r3
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	461a      	mov	r2, r3
 80036fa:	4b1d      	ldr	r3, [pc, #116]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80036fc:	4413      	add	r3, r2
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	461a      	mov	r2, r3
 8003702:	2300      	movs	r3, #0
 8003704:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003706:	4a18      	ldr	r2, [pc, #96]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003708:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800370a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800370c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800370e:	f003 0301 	and.w	r3, r3, #1
 8003712:	2b00      	cmp	r3, #0
 8003714:	d04b      	beq.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003716:	f7fd f96b 	bl	80009f0 <HAL_GetTick>
 800371a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800371c:	e00a      	b.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800371e:	f7fd f967 	bl	80009f0 <HAL_GetTick>
 8003722:	4602      	mov	r2, r0
 8003724:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003726:	1ad3      	subs	r3, r2, r3
 8003728:	f241 3288 	movw	r2, #5000	; 0x1388
 800372c:	4293      	cmp	r3, r2
 800372e:	d901      	bls.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003730:	2303      	movs	r3, #3
 8003732:	e180      	b.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003734:	2302      	movs	r3, #2
 8003736:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800373a:	fa93 f3a3 	rbit	r3, r3
 800373e:	627b      	str	r3, [r7, #36]	; 0x24
 8003740:	2302      	movs	r3, #2
 8003742:	623b      	str	r3, [r7, #32]
 8003744:	6a3b      	ldr	r3, [r7, #32]
 8003746:	fa93 f3a3 	rbit	r3, r3
 800374a:	61fb      	str	r3, [r7, #28]
  return result;
 800374c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800374e:	fab3 f383 	clz	r3, r3
 8003752:	b2db      	uxtb	r3, r3
 8003754:	095b      	lsrs	r3, r3, #5
 8003756:	b2db      	uxtb	r3, r3
 8003758:	f043 0302 	orr.w	r3, r3, #2
 800375c:	b2db      	uxtb	r3, r3
 800375e:	2b02      	cmp	r3, #2
 8003760:	d108      	bne.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003762:	4b01      	ldr	r3, [pc, #4]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003764:	6a1b      	ldr	r3, [r3, #32]
 8003766:	e00d      	b.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003768:	40021000 	.word	0x40021000
 800376c:	40007000 	.word	0x40007000
 8003770:	10908100 	.word	0x10908100
 8003774:	2302      	movs	r3, #2
 8003776:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003778:	69bb      	ldr	r3, [r7, #24]
 800377a:	fa93 f3a3 	rbit	r3, r3
 800377e:	617b      	str	r3, [r7, #20]
 8003780:	4ba0      	ldr	r3, [pc, #640]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003784:	2202      	movs	r2, #2
 8003786:	613a      	str	r2, [r7, #16]
 8003788:	693a      	ldr	r2, [r7, #16]
 800378a:	fa92 f2a2 	rbit	r2, r2
 800378e:	60fa      	str	r2, [r7, #12]
  return result;
 8003790:	68fa      	ldr	r2, [r7, #12]
 8003792:	fab2 f282 	clz	r2, r2
 8003796:	b2d2      	uxtb	r2, r2
 8003798:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800379c:	b2d2      	uxtb	r2, r2
 800379e:	f002 021f 	and.w	r2, r2, #31
 80037a2:	2101      	movs	r1, #1
 80037a4:	fa01 f202 	lsl.w	r2, r1, r2
 80037a8:	4013      	ands	r3, r2
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d0b7      	beq.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80037ae:	4b95      	ldr	r3, [pc, #596]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80037b0:	6a1b      	ldr	r3, [r3, #32]
 80037b2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	4992      	ldr	r1, [pc, #584]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80037bc:	4313      	orrs	r3, r2
 80037be:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80037c0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d105      	bne.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037c8:	4b8e      	ldr	r3, [pc, #568]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80037ca:	69db      	ldr	r3, [r3, #28]
 80037cc:	4a8d      	ldr	r2, [pc, #564]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80037ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037d2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 0301 	and.w	r3, r3, #1
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d008      	beq.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80037e0:	4b88      	ldr	r3, [pc, #544]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80037e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e4:	f023 0203 	bic.w	r2, r3, #3
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	4985      	ldr	r1, [pc, #532]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80037ee:	4313      	orrs	r3, r2
 80037f0:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 0302 	and.w	r3, r3, #2
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d008      	beq.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80037fe:	4b81      	ldr	r3, [pc, #516]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003802:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	68db      	ldr	r3, [r3, #12]
 800380a:	497e      	ldr	r1, [pc, #504]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800380c:	4313      	orrs	r3, r2
 800380e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 0304 	and.w	r3, r3, #4
 8003818:	2b00      	cmp	r3, #0
 800381a:	d008      	beq.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800381c:	4b79      	ldr	r3, [pc, #484]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800381e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003820:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	691b      	ldr	r3, [r3, #16]
 8003828:	4976      	ldr	r1, [pc, #472]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800382a:	4313      	orrs	r3, r2
 800382c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 0320 	and.w	r3, r3, #32
 8003836:	2b00      	cmp	r3, #0
 8003838:	d008      	beq.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800383a:	4b72      	ldr	r3, [pc, #456]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800383c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800383e:	f023 0210 	bic.w	r2, r3, #16
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	69db      	ldr	r3, [r3, #28]
 8003846:	496f      	ldr	r1, [pc, #444]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003848:	4313      	orrs	r3, r2
 800384a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003854:	2b00      	cmp	r3, #0
 8003856:	d008      	beq.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003858:	4b6a      	ldr	r3, [pc, #424]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003864:	4967      	ldr	r1, [pc, #412]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003866:	4313      	orrs	r3, r2
 8003868:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003872:	2b00      	cmp	r3, #0
 8003874:	d008      	beq.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003876:	4b63      	ldr	r3, [pc, #396]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800387a:	f023 0220 	bic.w	r2, r3, #32
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6a1b      	ldr	r3, [r3, #32]
 8003882:	4960      	ldr	r1, [pc, #384]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003884:	4313      	orrs	r3, r2
 8003886:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003890:	2b00      	cmp	r3, #0
 8003892:	d008      	beq.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003894:	4b5b      	ldr	r3, [pc, #364]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003898:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a0:	4958      	ldr	r1, [pc, #352]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80038a2:	4313      	orrs	r3, r2
 80038a4:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0308 	and.w	r3, r3, #8
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d008      	beq.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80038b2:	4b54      	ldr	r3, [pc, #336]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80038b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	695b      	ldr	r3, [r3, #20]
 80038be:	4951      	ldr	r1, [pc, #324]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80038c0:	4313      	orrs	r3, r2
 80038c2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 0310 	and.w	r3, r3, #16
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d008      	beq.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80038d0:	4b4c      	ldr	r3, [pc, #304]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80038d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	699b      	ldr	r3, [r3, #24]
 80038dc:	4949      	ldr	r1, [pc, #292]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80038de:	4313      	orrs	r3, r2
 80038e0:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d008      	beq.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80038ee:	4b45      	ldr	r3, [pc, #276]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038fa:	4942      	ldr	r1, [pc, #264]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80038fc:	4313      	orrs	r3, r2
 80038fe:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003908:	2b00      	cmp	r3, #0
 800390a:	d008      	beq.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800390c:	4b3d      	ldr	r3, [pc, #244]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800390e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003910:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003918:	493a      	ldr	r1, [pc, #232]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800391a:	4313      	orrs	r3, r2
 800391c:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003926:	2b00      	cmp	r3, #0
 8003928:	d008      	beq.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800392a:	4b36      	ldr	r3, [pc, #216]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800392c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800392e:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003936:	4933      	ldr	r1, [pc, #204]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003938:	4313      	orrs	r3, r2
 800393a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003944:	2b00      	cmp	r3, #0
 8003946:	d008      	beq.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003948:	4b2e      	ldr	r3, [pc, #184]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800394a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800394c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003954:	492b      	ldr	r1, [pc, #172]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003956:	4313      	orrs	r3, r2
 8003958:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d008      	beq.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003966:	4b27      	ldr	r3, [pc, #156]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800396a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003972:	4924      	ldr	r1, [pc, #144]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003974:	4313      	orrs	r3, r2
 8003976:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003980:	2b00      	cmp	r3, #0
 8003982:	d008      	beq.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8003984:	4b1f      	ldr	r3, [pc, #124]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003988:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003990:	491c      	ldr	r1, [pc, #112]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003992:	4313      	orrs	r3, r2
 8003994:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d008      	beq.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80039a2:	4b18      	ldr	r3, [pc, #96]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80039a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ae:	4915      	ldr	r1, [pc, #84]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80039b0:	4313      	orrs	r3, r2
 80039b2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d008      	beq.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80039c0:	4b10      	ldr	r3, [pc, #64]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80039c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039cc:	490d      	ldr	r1, [pc, #52]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80039ce:	4313      	orrs	r3, r2
 80039d0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d008      	beq.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80039de:	4b09      	ldr	r3, [pc, #36]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80039e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e2:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039ea:	4906      	ldr	r1, [pc, #24]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80039ec:	4313      	orrs	r3, r2
 80039ee:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d00c      	beq.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80039fc:	4b01      	ldr	r3, [pc, #4]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80039fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a00:	e002      	b.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8003a02:	bf00      	nop
 8003a04:	40021000 	.word	0x40021000
 8003a08:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a10:	490b      	ldr	r1, [pc, #44]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003a12:	4313      	orrs	r3, r2
 8003a14:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d008      	beq.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8003a22:	4b07      	ldr	r3, [pc, #28]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a26:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a2e:	4904      	ldr	r1, [pc, #16]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003a30:	4313      	orrs	r3, r2
 8003a32:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003a34:	2300      	movs	r3, #0
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3748      	adds	r7, #72	; 0x48
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	40021000 	.word	0x40021000

08003a44 <HAL_RTC_Init>:
  *         in the RTC_InitTypeDef structure and initialize the associated handle.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b082      	sub	sp, #8
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d101      	bne.n	8003a56 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e083      	b.n	8003b5e <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	7f5b      	ldrb	r3, [r3, #29]
 8003a5a:	b2db      	uxtb	r3, r3
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d105      	bne.n	8003a6c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2200      	movs	r2, #0
 8003a64:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f7fc fe34 	bl	80006d4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2202      	movs	r2, #2
 8003a70:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	22ca      	movs	r2, #202	; 0xca
 8003a78:	625a      	str	r2, [r3, #36]	; 0x24
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	2253      	movs	r2, #83	; 0x53
 8003a80:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f000 f897 	bl	8003bb6 <RTC_EnterInitMode>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d008      	beq.n	8003aa0 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	22ff      	movs	r2, #255	; 0xff
 8003a94:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2204      	movs	r2, #4
 8003a9a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e05e      	b.n	8003b5e <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	6812      	ldr	r2, [r2, #0]
 8003aaa:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003aae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ab2:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	6899      	ldr	r1, [r3, #8]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	685a      	ldr	r2, [r3, #4]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	691b      	ldr	r3, [r3, #16]
 8003ac2:	431a      	orrs	r2, r3
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	695b      	ldr	r3, [r3, #20]
 8003ac8:	431a      	orrs	r2, r3
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	430a      	orrs	r2, r1
 8003ad0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	68d2      	ldr	r2, [r2, #12]
 8003ada:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	6919      	ldr	r1, [r3, #16]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	041a      	lsls	r2, r3, #16
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	430a      	orrs	r2, r1
 8003aee:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	68da      	ldr	r2, [r3, #12]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003afe:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	f003 0320 	and.w	r3, r3, #32
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d10e      	bne.n	8003b2c <HAL_RTC_Init+0xe8>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f000 f829 	bl	8003b66 <HAL_RTC_WaitForSynchro>
 8003b14:	4603      	mov	r3, r0
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d008      	beq.n	8003b2c <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	22ff      	movs	r2, #255	; 0xff
 8003b20:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2204      	movs	r2, #4
 8003b26:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e018      	b.n	8003b5e <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003b3a:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	699a      	ldr	r2, [r3, #24]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	430a      	orrs	r2, r1
 8003b4c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	22ff      	movs	r2, #255	; 0xff
 8003b54:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2201      	movs	r2, #1
 8003b5a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8003b5c:	2300      	movs	r3, #0
  }
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3708      	adds	r7, #8
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}

08003b66 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003b66:	b580      	push	{r7, lr}
 8003b68:	b084      	sub	sp, #16
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	68da      	ldr	r2, [r3, #12]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b80:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8003b82:	f7fc ff35 	bl	80009f0 <HAL_GetTick>
 8003b86:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003b88:	e009      	b.n	8003b9e <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003b8a:	f7fc ff31 	bl	80009f0 <HAL_GetTick>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	1ad3      	subs	r3, r2, r3
 8003b94:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b98:	d901      	bls.n	8003b9e <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	e007      	b.n	8003bae <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	f003 0320 	and.w	r3, r3, #32
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d0ee      	beq.n	8003b8a <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8003bac:	2300      	movs	r3, #0
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3710      	adds	r7, #16
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}

08003bb6 <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - HAL_OK : RTC is in Init mode
  *          - HAL_TIMEOUT : RTC is not in Init mode and in Timeout
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003bb6:	b580      	push	{r7, lr}
 8003bb8:	b084      	sub	sp, #16
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	68db      	ldr	r3, [r3, #12]
 8003bc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d119      	bne.n	8003c04 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f04f 32ff 	mov.w	r2, #4294967295
 8003bd8:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003bda:	f7fc ff09 	bl	80009f0 <HAL_GetTick>
 8003bde:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003be0:	e009      	b.n	8003bf6 <RTC_EnterInitMode+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003be2:	f7fc ff05 	bl	80009f0 <HAL_GetTick>
 8003be6:	4602      	mov	r2, r0
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	1ad3      	subs	r3, r2, r3
 8003bec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003bf0:	d901      	bls.n	8003bf6 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8003bf2:	2303      	movs	r3, #3
 8003bf4:	e007      	b.n	8003c06 <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d0ee      	beq.n	8003be2 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8003c04:	2300      	movs	r3, #0
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3710      	adds	r7, #16
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}

08003c0e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c0e:	b580      	push	{r7, lr}
 8003c10:	b082      	sub	sp, #8
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d101      	bne.n	8003c20 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	e040      	b.n	8003ca2 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d106      	bne.n	8003c36 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f7fc fd75 	bl	8000720 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2224      	movs	r2, #36	; 0x24
 8003c3a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f022 0201 	bic.w	r2, r2, #1
 8003c4a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	f000 f82d 	bl	8003cac <UART_SetConfig>
 8003c52:	4603      	mov	r3, r0
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d101      	bne.n	8003c5c <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	e022      	b.n	8003ca2 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d002      	beq.n	8003c6a <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f000 f9f7 	bl	8004058 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	685a      	ldr	r2, [r3, #4]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c78:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	689a      	ldr	r2, [r3, #8]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c88:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f042 0201 	orr.w	r2, r2, #1
 8003c98:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f000 fa7e 	bl	800419c <UART_CheckIdleState>
 8003ca0:	4603      	mov	r3, r0
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3708      	adds	r7, #8
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
	...

08003cac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b088      	sub	sp, #32
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	689a      	ldr	r2, [r3, #8]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	691b      	ldr	r3, [r3, #16]
 8003cc0:	431a      	orrs	r2, r3
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	695b      	ldr	r3, [r3, #20]
 8003cc6:	431a      	orrs	r2, r3
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	69db      	ldr	r3, [r3, #28]
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	4bab      	ldr	r3, [pc, #684]	; (8003f84 <UART_SetConfig+0x2d8>)
 8003cd8:	4013      	ands	r3, r2
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	6812      	ldr	r2, [r2, #0]
 8003cde:	6979      	ldr	r1, [r7, #20]
 8003ce0:	430b      	orrs	r3, r1
 8003ce2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	68da      	ldr	r2, [r3, #12]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	430a      	orrs	r2, r1
 8003cf8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	699b      	ldr	r3, [r3, #24]
 8003cfe:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6a1b      	ldr	r3, [r3, #32]
 8003d04:	697a      	ldr	r2, [r7, #20]
 8003d06:	4313      	orrs	r3, r2
 8003d08:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	697a      	ldr	r2, [r7, #20]
 8003d1a:	430a      	orrs	r2, r1
 8003d1c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a99      	ldr	r2, [pc, #612]	; (8003f88 <UART_SetConfig+0x2dc>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d120      	bne.n	8003d6a <UART_SetConfig+0xbe>
 8003d28:	4b98      	ldr	r3, [pc, #608]	; (8003f8c <UART_SetConfig+0x2e0>)
 8003d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d2c:	f003 0303 	and.w	r3, r3, #3
 8003d30:	2b03      	cmp	r3, #3
 8003d32:	d817      	bhi.n	8003d64 <UART_SetConfig+0xb8>
 8003d34:	a201      	add	r2, pc, #4	; (adr r2, 8003d3c <UART_SetConfig+0x90>)
 8003d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d3a:	bf00      	nop
 8003d3c:	08003d4d 	.word	0x08003d4d
 8003d40:	08003d59 	.word	0x08003d59
 8003d44:	08003d5f 	.word	0x08003d5f
 8003d48:	08003d53 	.word	0x08003d53
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	77fb      	strb	r3, [r7, #31]
 8003d50:	e0b5      	b.n	8003ebe <UART_SetConfig+0x212>
 8003d52:	2302      	movs	r3, #2
 8003d54:	77fb      	strb	r3, [r7, #31]
 8003d56:	e0b2      	b.n	8003ebe <UART_SetConfig+0x212>
 8003d58:	2304      	movs	r3, #4
 8003d5a:	77fb      	strb	r3, [r7, #31]
 8003d5c:	e0af      	b.n	8003ebe <UART_SetConfig+0x212>
 8003d5e:	2308      	movs	r3, #8
 8003d60:	77fb      	strb	r3, [r7, #31]
 8003d62:	e0ac      	b.n	8003ebe <UART_SetConfig+0x212>
 8003d64:	2310      	movs	r3, #16
 8003d66:	77fb      	strb	r3, [r7, #31]
 8003d68:	e0a9      	b.n	8003ebe <UART_SetConfig+0x212>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a88      	ldr	r2, [pc, #544]	; (8003f90 <UART_SetConfig+0x2e4>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d124      	bne.n	8003dbe <UART_SetConfig+0x112>
 8003d74:	4b85      	ldr	r3, [pc, #532]	; (8003f8c <UART_SetConfig+0x2e0>)
 8003d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d78:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003d7c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003d80:	d011      	beq.n	8003da6 <UART_SetConfig+0xfa>
 8003d82:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003d86:	d817      	bhi.n	8003db8 <UART_SetConfig+0x10c>
 8003d88:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d8c:	d011      	beq.n	8003db2 <UART_SetConfig+0x106>
 8003d8e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d92:	d811      	bhi.n	8003db8 <UART_SetConfig+0x10c>
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d003      	beq.n	8003da0 <UART_SetConfig+0xf4>
 8003d98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d9c:	d006      	beq.n	8003dac <UART_SetConfig+0x100>
 8003d9e:	e00b      	b.n	8003db8 <UART_SetConfig+0x10c>
 8003da0:	2300      	movs	r3, #0
 8003da2:	77fb      	strb	r3, [r7, #31]
 8003da4:	e08b      	b.n	8003ebe <UART_SetConfig+0x212>
 8003da6:	2302      	movs	r3, #2
 8003da8:	77fb      	strb	r3, [r7, #31]
 8003daa:	e088      	b.n	8003ebe <UART_SetConfig+0x212>
 8003dac:	2304      	movs	r3, #4
 8003dae:	77fb      	strb	r3, [r7, #31]
 8003db0:	e085      	b.n	8003ebe <UART_SetConfig+0x212>
 8003db2:	2308      	movs	r3, #8
 8003db4:	77fb      	strb	r3, [r7, #31]
 8003db6:	e082      	b.n	8003ebe <UART_SetConfig+0x212>
 8003db8:	2310      	movs	r3, #16
 8003dba:	77fb      	strb	r3, [r7, #31]
 8003dbc:	e07f      	b.n	8003ebe <UART_SetConfig+0x212>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a74      	ldr	r2, [pc, #464]	; (8003f94 <UART_SetConfig+0x2e8>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d124      	bne.n	8003e12 <UART_SetConfig+0x166>
 8003dc8:	4b70      	ldr	r3, [pc, #448]	; (8003f8c <UART_SetConfig+0x2e0>)
 8003dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dcc:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003dd0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003dd4:	d011      	beq.n	8003dfa <UART_SetConfig+0x14e>
 8003dd6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003dda:	d817      	bhi.n	8003e0c <UART_SetConfig+0x160>
 8003ddc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003de0:	d011      	beq.n	8003e06 <UART_SetConfig+0x15a>
 8003de2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003de6:	d811      	bhi.n	8003e0c <UART_SetConfig+0x160>
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d003      	beq.n	8003df4 <UART_SetConfig+0x148>
 8003dec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003df0:	d006      	beq.n	8003e00 <UART_SetConfig+0x154>
 8003df2:	e00b      	b.n	8003e0c <UART_SetConfig+0x160>
 8003df4:	2300      	movs	r3, #0
 8003df6:	77fb      	strb	r3, [r7, #31]
 8003df8:	e061      	b.n	8003ebe <UART_SetConfig+0x212>
 8003dfa:	2302      	movs	r3, #2
 8003dfc:	77fb      	strb	r3, [r7, #31]
 8003dfe:	e05e      	b.n	8003ebe <UART_SetConfig+0x212>
 8003e00:	2304      	movs	r3, #4
 8003e02:	77fb      	strb	r3, [r7, #31]
 8003e04:	e05b      	b.n	8003ebe <UART_SetConfig+0x212>
 8003e06:	2308      	movs	r3, #8
 8003e08:	77fb      	strb	r3, [r7, #31]
 8003e0a:	e058      	b.n	8003ebe <UART_SetConfig+0x212>
 8003e0c:	2310      	movs	r3, #16
 8003e0e:	77fb      	strb	r3, [r7, #31]
 8003e10:	e055      	b.n	8003ebe <UART_SetConfig+0x212>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a60      	ldr	r2, [pc, #384]	; (8003f98 <UART_SetConfig+0x2ec>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d124      	bne.n	8003e66 <UART_SetConfig+0x1ba>
 8003e1c:	4b5b      	ldr	r3, [pc, #364]	; (8003f8c <UART_SetConfig+0x2e0>)
 8003e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e20:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003e24:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003e28:	d011      	beq.n	8003e4e <UART_SetConfig+0x1a2>
 8003e2a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003e2e:	d817      	bhi.n	8003e60 <UART_SetConfig+0x1b4>
 8003e30:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e34:	d011      	beq.n	8003e5a <UART_SetConfig+0x1ae>
 8003e36:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e3a:	d811      	bhi.n	8003e60 <UART_SetConfig+0x1b4>
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d003      	beq.n	8003e48 <UART_SetConfig+0x19c>
 8003e40:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e44:	d006      	beq.n	8003e54 <UART_SetConfig+0x1a8>
 8003e46:	e00b      	b.n	8003e60 <UART_SetConfig+0x1b4>
 8003e48:	2300      	movs	r3, #0
 8003e4a:	77fb      	strb	r3, [r7, #31]
 8003e4c:	e037      	b.n	8003ebe <UART_SetConfig+0x212>
 8003e4e:	2302      	movs	r3, #2
 8003e50:	77fb      	strb	r3, [r7, #31]
 8003e52:	e034      	b.n	8003ebe <UART_SetConfig+0x212>
 8003e54:	2304      	movs	r3, #4
 8003e56:	77fb      	strb	r3, [r7, #31]
 8003e58:	e031      	b.n	8003ebe <UART_SetConfig+0x212>
 8003e5a:	2308      	movs	r3, #8
 8003e5c:	77fb      	strb	r3, [r7, #31]
 8003e5e:	e02e      	b.n	8003ebe <UART_SetConfig+0x212>
 8003e60:	2310      	movs	r3, #16
 8003e62:	77fb      	strb	r3, [r7, #31]
 8003e64:	e02b      	b.n	8003ebe <UART_SetConfig+0x212>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a4c      	ldr	r2, [pc, #304]	; (8003f9c <UART_SetConfig+0x2f0>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d124      	bne.n	8003eba <UART_SetConfig+0x20e>
 8003e70:	4b46      	ldr	r3, [pc, #280]	; (8003f8c <UART_SetConfig+0x2e0>)
 8003e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e74:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003e78:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003e7c:	d011      	beq.n	8003ea2 <UART_SetConfig+0x1f6>
 8003e7e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003e82:	d817      	bhi.n	8003eb4 <UART_SetConfig+0x208>
 8003e84:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003e88:	d011      	beq.n	8003eae <UART_SetConfig+0x202>
 8003e8a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003e8e:	d811      	bhi.n	8003eb4 <UART_SetConfig+0x208>
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d003      	beq.n	8003e9c <UART_SetConfig+0x1f0>
 8003e94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e98:	d006      	beq.n	8003ea8 <UART_SetConfig+0x1fc>
 8003e9a:	e00b      	b.n	8003eb4 <UART_SetConfig+0x208>
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	77fb      	strb	r3, [r7, #31]
 8003ea0:	e00d      	b.n	8003ebe <UART_SetConfig+0x212>
 8003ea2:	2302      	movs	r3, #2
 8003ea4:	77fb      	strb	r3, [r7, #31]
 8003ea6:	e00a      	b.n	8003ebe <UART_SetConfig+0x212>
 8003ea8:	2304      	movs	r3, #4
 8003eaa:	77fb      	strb	r3, [r7, #31]
 8003eac:	e007      	b.n	8003ebe <UART_SetConfig+0x212>
 8003eae:	2308      	movs	r3, #8
 8003eb0:	77fb      	strb	r3, [r7, #31]
 8003eb2:	e004      	b.n	8003ebe <UART_SetConfig+0x212>
 8003eb4:	2310      	movs	r3, #16
 8003eb6:	77fb      	strb	r3, [r7, #31]
 8003eb8:	e001      	b.n	8003ebe <UART_SetConfig+0x212>
 8003eba:	2310      	movs	r3, #16
 8003ebc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	69db      	ldr	r3, [r3, #28]
 8003ec2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ec6:	d16d      	bne.n	8003fa4 <UART_SetConfig+0x2f8>
  {
    switch (clocksource)
 8003ec8:	7ffb      	ldrb	r3, [r7, #31]
 8003eca:	2b08      	cmp	r3, #8
 8003ecc:	d827      	bhi.n	8003f1e <UART_SetConfig+0x272>
 8003ece:	a201      	add	r2, pc, #4	; (adr r2, 8003ed4 <UART_SetConfig+0x228>)
 8003ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ed4:	08003ef9 	.word	0x08003ef9
 8003ed8:	08003f01 	.word	0x08003f01
 8003edc:	08003f09 	.word	0x08003f09
 8003ee0:	08003f1f 	.word	0x08003f1f
 8003ee4:	08003f0f 	.word	0x08003f0f
 8003ee8:	08003f1f 	.word	0x08003f1f
 8003eec:	08003f1f 	.word	0x08003f1f
 8003ef0:	08003f1f 	.word	0x08003f1f
 8003ef4:	08003f17 	.word	0x08003f17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ef8:	f7ff fb42 	bl	8003580 <HAL_RCC_GetPCLK1Freq>
 8003efc:	61b8      	str	r0, [r7, #24]
        break;
 8003efe:	e013      	b.n	8003f28 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f00:	f7ff fb60 	bl	80035c4 <HAL_RCC_GetPCLK2Freq>
 8003f04:	61b8      	str	r0, [r7, #24]
        break;
 8003f06:	e00f      	b.n	8003f28 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f08:	4b25      	ldr	r3, [pc, #148]	; (8003fa0 <UART_SetConfig+0x2f4>)
 8003f0a:	61bb      	str	r3, [r7, #24]
        break;
 8003f0c:	e00c      	b.n	8003f28 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f0e:	f7ff fac1 	bl	8003494 <HAL_RCC_GetSysClockFreq>
 8003f12:	61b8      	str	r0, [r7, #24]
        break;
 8003f14:	e008      	b.n	8003f28 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f1a:	61bb      	str	r3, [r7, #24]
        break;
 8003f1c:	e004      	b.n	8003f28 <UART_SetConfig+0x27c>
      default:
        pclk = 0U;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	77bb      	strb	r3, [r7, #30]
        break;
 8003f26:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003f28:	69bb      	ldr	r3, [r7, #24]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	f000 8086 	beq.w	800403c <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003f30:	69bb      	ldr	r3, [r7, #24]
 8003f32:	005a      	lsls	r2, r3, #1
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	085b      	lsrs	r3, r3, #1
 8003f3a:	441a      	add	r2, r3
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f44:	b29b      	uxth	r3, r3
 8003f46:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	2b0f      	cmp	r3, #15
 8003f4c:	d916      	bls.n	8003f7c <UART_SetConfig+0x2d0>
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f54:	d212      	bcs.n	8003f7c <UART_SetConfig+0x2d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	b29b      	uxth	r3, r3
 8003f5a:	f023 030f 	bic.w	r3, r3, #15
 8003f5e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	085b      	lsrs	r3, r3, #1
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	f003 0307 	and.w	r3, r3, #7
 8003f6a:	b29a      	uxth	r2, r3
 8003f6c:	89fb      	ldrh	r3, [r7, #14]
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	89fa      	ldrh	r2, [r7, #14]
 8003f78:	60da      	str	r2, [r3, #12]
 8003f7a:	e05f      	b.n	800403c <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	77bb      	strb	r3, [r7, #30]
 8003f80:	e05c      	b.n	800403c <UART_SetConfig+0x390>
 8003f82:	bf00      	nop
 8003f84:	efff69f3 	.word	0xefff69f3
 8003f88:	40013800 	.word	0x40013800
 8003f8c:	40021000 	.word	0x40021000
 8003f90:	40004400 	.word	0x40004400
 8003f94:	40004800 	.word	0x40004800
 8003f98:	40004c00 	.word	0x40004c00
 8003f9c:	40005000 	.word	0x40005000
 8003fa0:	007a1200 	.word	0x007a1200
      }
    }
  }
  else
  {
    switch (clocksource)
 8003fa4:	7ffb      	ldrb	r3, [r7, #31]
 8003fa6:	2b08      	cmp	r3, #8
 8003fa8:	d827      	bhi.n	8003ffa <UART_SetConfig+0x34e>
 8003faa:	a201      	add	r2, pc, #4	; (adr r2, 8003fb0 <UART_SetConfig+0x304>)
 8003fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fb0:	08003fd5 	.word	0x08003fd5
 8003fb4:	08003fdd 	.word	0x08003fdd
 8003fb8:	08003fe5 	.word	0x08003fe5
 8003fbc:	08003ffb 	.word	0x08003ffb
 8003fc0:	08003feb 	.word	0x08003feb
 8003fc4:	08003ffb 	.word	0x08003ffb
 8003fc8:	08003ffb 	.word	0x08003ffb
 8003fcc:	08003ffb 	.word	0x08003ffb
 8003fd0:	08003ff3 	.word	0x08003ff3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fd4:	f7ff fad4 	bl	8003580 <HAL_RCC_GetPCLK1Freq>
 8003fd8:	61b8      	str	r0, [r7, #24]
        break;
 8003fda:	e013      	b.n	8004004 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003fdc:	f7ff faf2 	bl	80035c4 <HAL_RCC_GetPCLK2Freq>
 8003fe0:	61b8      	str	r0, [r7, #24]
        break;
 8003fe2:	e00f      	b.n	8004004 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fe4:	4b1b      	ldr	r3, [pc, #108]	; (8004054 <UART_SetConfig+0x3a8>)
 8003fe6:	61bb      	str	r3, [r7, #24]
        break;
 8003fe8:	e00c      	b.n	8004004 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fea:	f7ff fa53 	bl	8003494 <HAL_RCC_GetSysClockFreq>
 8003fee:	61b8      	str	r0, [r7, #24]
        break;
 8003ff0:	e008      	b.n	8004004 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ff2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ff6:	61bb      	str	r3, [r7, #24]
        break;
 8003ff8:	e004      	b.n	8004004 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	77bb      	strb	r3, [r7, #30]
        break;
 8004002:	bf00      	nop
    }

    if (pclk != 0U)
 8004004:	69bb      	ldr	r3, [r7, #24]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d018      	beq.n	800403c <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	085a      	lsrs	r2, r3, #1
 8004010:	69bb      	ldr	r3, [r7, #24]
 8004012:	441a      	add	r2, r3
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	fbb2 f3f3 	udiv	r3, r2, r3
 800401c:	b29b      	uxth	r3, r3
 800401e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	2b0f      	cmp	r3, #15
 8004024:	d908      	bls.n	8004038 <UART_SetConfig+0x38c>
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800402c:	d204      	bcs.n	8004038 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	693a      	ldr	r2, [r7, #16]
 8004034:	60da      	str	r2, [r3, #12]
 8004036:	e001      	b.n	800403c <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2200      	movs	r2, #0
 8004040:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004048:	7fbb      	ldrb	r3, [r7, #30]
}
 800404a:	4618      	mov	r0, r3
 800404c:	3720      	adds	r7, #32
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop
 8004054:	007a1200 	.word	0x007a1200

08004058 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004058:	b480      	push	{r7}
 800405a:	b083      	sub	sp, #12
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004064:	f003 0301 	and.w	r3, r3, #1
 8004068:	2b00      	cmp	r3, #0
 800406a:	d00a      	beq.n	8004082 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	430a      	orrs	r2, r1
 8004080:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004086:	f003 0302 	and.w	r3, r3, #2
 800408a:	2b00      	cmp	r3, #0
 800408c:	d00a      	beq.n	80040a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	430a      	orrs	r2, r1
 80040a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a8:	f003 0304 	and.w	r3, r3, #4
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d00a      	beq.n	80040c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	430a      	orrs	r2, r1
 80040c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ca:	f003 0308 	and.w	r3, r3, #8
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d00a      	beq.n	80040e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	430a      	orrs	r2, r1
 80040e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ec:	f003 0310 	and.w	r3, r3, #16
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d00a      	beq.n	800410a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	430a      	orrs	r2, r1
 8004108:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800410e:	f003 0320 	and.w	r3, r3, #32
 8004112:	2b00      	cmp	r3, #0
 8004114:	d00a      	beq.n	800412c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	430a      	orrs	r2, r1
 800412a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004130:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004134:	2b00      	cmp	r3, #0
 8004136:	d01a      	beq.n	800416e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	430a      	orrs	r2, r1
 800414c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004152:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004156:	d10a      	bne.n	800416e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	430a      	orrs	r2, r1
 800416c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004172:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004176:	2b00      	cmp	r3, #0
 8004178:	d00a      	beq.n	8004190 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	430a      	orrs	r2, r1
 800418e:	605a      	str	r2, [r3, #4]
  }
}
 8004190:	bf00      	nop
 8004192:	370c      	adds	r7, #12
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr

0800419c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b086      	sub	sp, #24
 80041a0:	af02      	add	r7, sp, #8
 80041a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2200      	movs	r2, #0
 80041a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80041ac:	f7fc fc20 	bl	80009f0 <HAL_GetTick>
 80041b0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 0308 	and.w	r3, r3, #8
 80041bc:	2b08      	cmp	r3, #8
 80041be:	d10e      	bne.n	80041de <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80041c4:	9300      	str	r3, [sp, #0]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2200      	movs	r2, #0
 80041ca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f000 f82d 	bl	800422e <UART_WaitOnFlagUntilTimeout>
 80041d4:	4603      	mov	r3, r0
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d001      	beq.n	80041de <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80041da:	2303      	movs	r3, #3
 80041dc:	e023      	b.n	8004226 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f003 0304 	and.w	r3, r3, #4
 80041e8:	2b04      	cmp	r3, #4
 80041ea:	d10e      	bne.n	800420a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80041f0:	9300      	str	r3, [sp, #0]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2200      	movs	r2, #0
 80041f6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f000 f817 	bl	800422e <UART_WaitOnFlagUntilTimeout>
 8004200:	4603      	mov	r3, r0
 8004202:	2b00      	cmp	r3, #0
 8004204:	d001      	beq.n	800420a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004206:	2303      	movs	r3, #3
 8004208:	e00d      	b.n	8004226 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2220      	movs	r2, #32
 800420e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2220      	movs	r2, #32
 8004214:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2200      	movs	r2, #0
 8004220:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004224:	2300      	movs	r3, #0
}
 8004226:	4618      	mov	r0, r3
 8004228:	3710      	adds	r7, #16
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}

0800422e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800422e:	b580      	push	{r7, lr}
 8004230:	b084      	sub	sp, #16
 8004232:	af00      	add	r7, sp, #0
 8004234:	60f8      	str	r0, [r7, #12]
 8004236:	60b9      	str	r1, [r7, #8]
 8004238:	603b      	str	r3, [r7, #0]
 800423a:	4613      	mov	r3, r2
 800423c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800423e:	e05e      	b.n	80042fe <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004240:	69bb      	ldr	r3, [r7, #24]
 8004242:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004246:	d05a      	beq.n	80042fe <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004248:	f7fc fbd2 	bl	80009f0 <HAL_GetTick>
 800424c:	4602      	mov	r2, r0
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	1ad3      	subs	r3, r2, r3
 8004252:	69ba      	ldr	r2, [r7, #24]
 8004254:	429a      	cmp	r2, r3
 8004256:	d302      	bcc.n	800425e <UART_WaitOnFlagUntilTimeout+0x30>
 8004258:	69bb      	ldr	r3, [r7, #24]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d11b      	bne.n	8004296 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800426c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	689a      	ldr	r2, [r3, #8]
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f022 0201 	bic.w	r2, r2, #1
 800427c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2220      	movs	r2, #32
 8004282:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2220      	movs	r2, #32
 8004288:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2200      	movs	r2, #0
 800428e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004292:	2303      	movs	r3, #3
 8004294:	e043      	b.n	800431e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 0304 	and.w	r3, r3, #4
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d02c      	beq.n	80042fe <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	69db      	ldr	r3, [r3, #28]
 80042aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042b2:	d124      	bne.n	80042fe <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80042bc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80042cc:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	689a      	ldr	r2, [r3, #8]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f022 0201 	bic.w	r2, r2, #1
 80042dc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2220      	movs	r2, #32
 80042e2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2220      	movs	r2, #32
 80042e8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2220      	movs	r2, #32
 80042ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2200      	movs	r2, #0
 80042f6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80042fa:	2303      	movs	r3, #3
 80042fc:	e00f      	b.n	800431e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	69da      	ldr	r2, [r3, #28]
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	4013      	ands	r3, r2
 8004308:	68ba      	ldr	r2, [r7, #8]
 800430a:	429a      	cmp	r2, r3
 800430c:	bf0c      	ite	eq
 800430e:	2301      	moveq	r3, #1
 8004310:	2300      	movne	r3, #0
 8004312:	b2db      	uxtb	r3, r3
 8004314:	461a      	mov	r2, r3
 8004316:	79fb      	ldrb	r3, [r7, #7]
 8004318:	429a      	cmp	r2, r3
 800431a:	d091      	beq.n	8004240 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800431c:	2300      	movs	r3, #0
}
 800431e:	4618      	mov	r0, r3
 8004320:	3710      	adds	r7, #16
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}

08004326 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004326:	b480      	push	{r7}
 8004328:	b085      	sub	sp, #20
 800432a:	af00      	add	r7, sp, #0
 800432c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800432e:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004332:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800433a:	b29a      	uxth	r2, r3
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	b29b      	uxth	r3, r3
 8004340:	43db      	mvns	r3, r3
 8004342:	b29b      	uxth	r3, r3
 8004344:	4013      	ands	r3, r2
 8004346:	b29a      	uxth	r2, r3
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800434e:	2300      	movs	r3, #0
}
 8004350:	4618      	mov	r0, r3
 8004352:	3714      	adds	r7, #20
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr

0800435c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800435c:	b084      	sub	sp, #16
 800435e:	b480      	push	{r7}
 8004360:	b083      	sub	sp, #12
 8004362:	af00      	add	r7, sp, #0
 8004364:	6078      	str	r0, [r7, #4]
 8004366:	f107 0014 	add.w	r0, r7, #20
 800436a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2201      	movs	r2, #1
 8004372:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2200      	movs	r2, #0
 800437a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2200      	movs	r2, #0
 8004382:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2200      	movs	r2, #0
 800438a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800438e:	2300      	movs	r3, #0
}
 8004390:	4618      	mov	r0, r3
 8004392:	370c      	adds	r7, #12
 8004394:	46bd      	mov	sp, r7
 8004396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439a:	b004      	add	sp, #16
 800439c:	4770      	bx	lr

0800439e <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800439e:	b580      	push	{r7, lr}
 80043a0:	b0c4      	sub	sp, #272	; 0x110
 80043a2:	af00      	add	r7, sp, #0
 80043a4:	1d3b      	adds	r3, r7, #4
 80043a6:	6018      	str	r0, [r3, #0]
 80043a8:	463b      	mov	r3, r7
 80043aa:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80043ac:	463b      	mov	r3, r7
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	785b      	ldrb	r3, [r3, #1]
 80043b2:	2b01      	cmp	r3, #1
 80043b4:	f040 8557 	bne.w	8004e66 <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80043b8:	463b      	mov	r3, r7
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	699a      	ldr	r2, [r3, #24]
 80043be:	463b      	mov	r3, r7
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	691b      	ldr	r3, [r3, #16]
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d905      	bls.n	80043d4 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 80043c8:	463b      	mov	r3, r7
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	691b      	ldr	r3, [r3, #16]
 80043ce:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80043d2:	e004      	b.n	80043de <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80043d4:	463b      	mov	r3, r7
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	699b      	ldr	r3, [r3, #24]
 80043da:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80043de:	463b      	mov	r3, r7
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	7b1b      	ldrb	r3, [r3, #12]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d12c      	bne.n	8004442 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80043e8:	463b      	mov	r3, r7
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	6959      	ldr	r1, [r3, #20]
 80043ee:	463b      	mov	r3, r7
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	88da      	ldrh	r2, [r3, #6]
 80043f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	1d38      	adds	r0, r7, #4
 80043fc:	6800      	ldr	r0, [r0, #0]
 80043fe:	f001 f912 	bl	8005626 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004402:	1d3b      	adds	r3, r7, #4
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	617b      	str	r3, [r7, #20]
 8004408:	1d3b      	adds	r3, r7, #4
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004410:	b29b      	uxth	r3, r3
 8004412:	461a      	mov	r2, r3
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	4413      	add	r3, r2
 8004418:	617b      	str	r3, [r7, #20]
 800441a:	463b      	mov	r3, r7
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	781b      	ldrb	r3, [r3, #0]
 8004420:	00da      	lsls	r2, r3, #3
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	4413      	add	r3, r2
 8004426:	f203 4202 	addw	r2, r3, #1026	; 0x402
 800442a:	f107 0310 	add.w	r3, r7, #16
 800442e:	601a      	str	r2, [r3, #0]
 8004430:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004434:	b29a      	uxth	r2, r3
 8004436:	f107 0310 	add.w	r3, r7, #16
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	801a      	strh	r2, [r3, #0]
 800443e:	f000 bcdd 	b.w	8004dfc <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004442:	463b      	mov	r3, r7
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	78db      	ldrb	r3, [r3, #3]
 8004448:	2b02      	cmp	r3, #2
 800444a:	f040 8347 	bne.w	8004adc <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800444e:	463b      	mov	r3, r7
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	6a1a      	ldr	r2, [r3, #32]
 8004454:	463b      	mov	r3, r7
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	691b      	ldr	r3, [r3, #16]
 800445a:	429a      	cmp	r2, r3
 800445c:	f240 82eb 	bls.w	8004a36 <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8004460:	1d3b      	adds	r3, r7, #4
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	463b      	mov	r3, r7
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	781b      	ldrb	r3, [r3, #0]
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	4413      	add	r3, r2
 800446e:	881b      	ldrh	r3, [r3, #0]
 8004470:	b29b      	uxth	r3, r3
 8004472:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004476:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800447a:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 800447e:	1d3b      	adds	r3, r7, #4
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	463b      	mov	r3, r7
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	781b      	ldrb	r3, [r3, #0]
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	441a      	add	r2, r3
 800448c:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8004490:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004494:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004498:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800449c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044a0:	b29b      	uxth	r3, r3
 80044a2:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80044a4:	463b      	mov	r3, r7
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	6a1a      	ldr	r2, [r3, #32]
 80044aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044ae:	1ad2      	subs	r2, r2, r3
 80044b0:	463b      	mov	r3, r7
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80044b6:	1d3b      	adds	r3, r7, #4
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	463b      	mov	r3, r7
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	781b      	ldrb	r3, [r3, #0]
 80044c0:	009b      	lsls	r3, r3, #2
 80044c2:	4413      	add	r3, r2
 80044c4:	881b      	ldrh	r3, [r3, #0]
 80044c6:	b29b      	uxth	r3, r3
 80044c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	f000 8159 	beq.w	8004784 <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80044d2:	1d3b      	adds	r3, r7, #4
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	637b      	str	r3, [r7, #52]	; 0x34
 80044d8:	463b      	mov	r3, r7
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	785b      	ldrb	r3, [r3, #1]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d164      	bne.n	80045ac <USB_EPStartXfer+0x20e>
 80044e2:	1d3b      	adds	r3, r7, #4
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044e8:	1d3b      	adds	r3, r7, #4
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	461a      	mov	r2, r3
 80044f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044f6:	4413      	add	r3, r2
 80044f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044fa:	463b      	mov	r3, r7
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	781b      	ldrb	r3, [r3, #0]
 8004500:	00da      	lsls	r2, r3, #3
 8004502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004504:	4413      	add	r3, r2
 8004506:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800450a:	62bb      	str	r3, [r7, #40]	; 0x28
 800450c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004510:	2b00      	cmp	r3, #0
 8004512:	d112      	bne.n	800453a <USB_EPStartXfer+0x19c>
 8004514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004516:	881b      	ldrh	r3, [r3, #0]
 8004518:	b29b      	uxth	r3, r3
 800451a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800451e:	b29a      	uxth	r2, r3
 8004520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004522:	801a      	strh	r2, [r3, #0]
 8004524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004526:	881b      	ldrh	r3, [r3, #0]
 8004528:	b29b      	uxth	r3, r3
 800452a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800452e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004532:	b29a      	uxth	r2, r3
 8004534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004536:	801a      	strh	r2, [r3, #0]
 8004538:	e054      	b.n	80045e4 <USB_EPStartXfer+0x246>
 800453a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800453e:	2b3e      	cmp	r3, #62	; 0x3e
 8004540:	d817      	bhi.n	8004572 <USB_EPStartXfer+0x1d4>
 8004542:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004546:	085b      	lsrs	r3, r3, #1
 8004548:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800454c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004550:	f003 0301 	and.w	r3, r3, #1
 8004554:	2b00      	cmp	r3, #0
 8004556:	d004      	beq.n	8004562 <USB_EPStartXfer+0x1c4>
 8004558:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800455c:	3301      	adds	r3, #1
 800455e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004562:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004566:	b29b      	uxth	r3, r3
 8004568:	029b      	lsls	r3, r3, #10
 800456a:	b29a      	uxth	r2, r3
 800456c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800456e:	801a      	strh	r2, [r3, #0]
 8004570:	e038      	b.n	80045e4 <USB_EPStartXfer+0x246>
 8004572:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004576:	095b      	lsrs	r3, r3, #5
 8004578:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800457c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004580:	f003 031f 	and.w	r3, r3, #31
 8004584:	2b00      	cmp	r3, #0
 8004586:	d104      	bne.n	8004592 <USB_EPStartXfer+0x1f4>
 8004588:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800458c:	3b01      	subs	r3, #1
 800458e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004592:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004596:	b29b      	uxth	r3, r3
 8004598:	029b      	lsls	r3, r3, #10
 800459a:	b29b      	uxth	r3, r3
 800459c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045a4:	b29a      	uxth	r2, r3
 80045a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a8:	801a      	strh	r2, [r3, #0]
 80045aa:	e01b      	b.n	80045e4 <USB_EPStartXfer+0x246>
 80045ac:	463b      	mov	r3, r7
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	785b      	ldrb	r3, [r3, #1]
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	d116      	bne.n	80045e4 <USB_EPStartXfer+0x246>
 80045b6:	1d3b      	adds	r3, r7, #4
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045be:	b29b      	uxth	r3, r3
 80045c0:	461a      	mov	r2, r3
 80045c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045c4:	4413      	add	r3, r2
 80045c6:	637b      	str	r3, [r7, #52]	; 0x34
 80045c8:	463b      	mov	r3, r7
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	781b      	ldrb	r3, [r3, #0]
 80045ce:	00da      	lsls	r2, r3, #3
 80045d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045d2:	4413      	add	r3, r2
 80045d4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80045d8:	633b      	str	r3, [r7, #48]	; 0x30
 80045da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045de:	b29a      	uxth	r2, r3
 80045e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045e2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80045e4:	463b      	mov	r3, r7
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	895b      	ldrh	r3, [r3, #10]
 80045ea:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80045ee:	463b      	mov	r3, r7
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	6959      	ldr	r1, [r3, #20]
 80045f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045f8:	b29b      	uxth	r3, r3
 80045fa:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80045fe:	1d38      	adds	r0, r7, #4
 8004600:	6800      	ldr	r0, [r0, #0]
 8004602:	f001 f810 	bl	8005626 <USB_WritePMA>
            ep->xfer_buff += len;
 8004606:	463b      	mov	r3, r7
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	695a      	ldr	r2, [r3, #20]
 800460c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004610:	441a      	add	r2, r3
 8004612:	463b      	mov	r3, r7
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004618:	463b      	mov	r3, r7
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	6a1a      	ldr	r2, [r3, #32]
 800461e:	463b      	mov	r3, r7
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	691b      	ldr	r3, [r3, #16]
 8004624:	429a      	cmp	r2, r3
 8004626:	d909      	bls.n	800463c <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 8004628:	463b      	mov	r3, r7
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	6a1a      	ldr	r2, [r3, #32]
 800462e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004632:	1ad2      	subs	r2, r2, r3
 8004634:	463b      	mov	r3, r7
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	621a      	str	r2, [r3, #32]
 800463a:	e008      	b.n	800464e <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 800463c:	463b      	mov	r3, r7
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	6a1b      	ldr	r3, [r3, #32]
 8004642:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8004646:	463b      	mov	r3, r7
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	2200      	movs	r2, #0
 800464c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800464e:	463b      	mov	r3, r7
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	785b      	ldrb	r3, [r3, #1]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d164      	bne.n	8004722 <USB_EPStartXfer+0x384>
 8004658:	1d3b      	adds	r3, r7, #4
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	61fb      	str	r3, [r7, #28]
 800465e:	1d3b      	adds	r3, r7, #4
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004666:	b29b      	uxth	r3, r3
 8004668:	461a      	mov	r2, r3
 800466a:	69fb      	ldr	r3, [r7, #28]
 800466c:	4413      	add	r3, r2
 800466e:	61fb      	str	r3, [r7, #28]
 8004670:	463b      	mov	r3, r7
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	781b      	ldrb	r3, [r3, #0]
 8004676:	00da      	lsls	r2, r3, #3
 8004678:	69fb      	ldr	r3, [r7, #28]
 800467a:	4413      	add	r3, r2
 800467c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004680:	61bb      	str	r3, [r7, #24]
 8004682:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004686:	2b00      	cmp	r3, #0
 8004688:	d112      	bne.n	80046b0 <USB_EPStartXfer+0x312>
 800468a:	69bb      	ldr	r3, [r7, #24]
 800468c:	881b      	ldrh	r3, [r3, #0]
 800468e:	b29b      	uxth	r3, r3
 8004690:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004694:	b29a      	uxth	r2, r3
 8004696:	69bb      	ldr	r3, [r7, #24]
 8004698:	801a      	strh	r2, [r3, #0]
 800469a:	69bb      	ldr	r3, [r7, #24]
 800469c:	881b      	ldrh	r3, [r3, #0]
 800469e:	b29b      	uxth	r3, r3
 80046a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046a8:	b29a      	uxth	r2, r3
 80046aa:	69bb      	ldr	r3, [r7, #24]
 80046ac:	801a      	strh	r2, [r3, #0]
 80046ae:	e057      	b.n	8004760 <USB_EPStartXfer+0x3c2>
 80046b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046b4:	2b3e      	cmp	r3, #62	; 0x3e
 80046b6:	d817      	bhi.n	80046e8 <USB_EPStartXfer+0x34a>
 80046b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046bc:	085b      	lsrs	r3, r3, #1
 80046be:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80046c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046c6:	f003 0301 	and.w	r3, r3, #1
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d004      	beq.n	80046d8 <USB_EPStartXfer+0x33a>
 80046ce:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80046d2:	3301      	adds	r3, #1
 80046d4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80046d8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80046dc:	b29b      	uxth	r3, r3
 80046de:	029b      	lsls	r3, r3, #10
 80046e0:	b29a      	uxth	r2, r3
 80046e2:	69bb      	ldr	r3, [r7, #24]
 80046e4:	801a      	strh	r2, [r3, #0]
 80046e6:	e03b      	b.n	8004760 <USB_EPStartXfer+0x3c2>
 80046e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046ec:	095b      	lsrs	r3, r3, #5
 80046ee:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80046f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046f6:	f003 031f 	and.w	r3, r3, #31
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d104      	bne.n	8004708 <USB_EPStartXfer+0x36a>
 80046fe:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004702:	3b01      	subs	r3, #1
 8004704:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004708:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800470c:	b29b      	uxth	r3, r3
 800470e:	029b      	lsls	r3, r3, #10
 8004710:	b29b      	uxth	r3, r3
 8004712:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004716:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800471a:	b29a      	uxth	r2, r3
 800471c:	69bb      	ldr	r3, [r7, #24]
 800471e:	801a      	strh	r2, [r3, #0]
 8004720:	e01e      	b.n	8004760 <USB_EPStartXfer+0x3c2>
 8004722:	463b      	mov	r3, r7
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	785b      	ldrb	r3, [r3, #1]
 8004728:	2b01      	cmp	r3, #1
 800472a:	d119      	bne.n	8004760 <USB_EPStartXfer+0x3c2>
 800472c:	1d3b      	adds	r3, r7, #4
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	627b      	str	r3, [r7, #36]	; 0x24
 8004732:	1d3b      	adds	r3, r7, #4
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800473a:	b29b      	uxth	r3, r3
 800473c:	461a      	mov	r2, r3
 800473e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004740:	4413      	add	r3, r2
 8004742:	627b      	str	r3, [r7, #36]	; 0x24
 8004744:	463b      	mov	r3, r7
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	781b      	ldrb	r3, [r3, #0]
 800474a:	00da      	lsls	r2, r3, #3
 800474c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800474e:	4413      	add	r3, r2
 8004750:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004754:	623b      	str	r3, [r7, #32]
 8004756:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800475a:	b29a      	uxth	r2, r3
 800475c:	6a3b      	ldr	r3, [r7, #32]
 800475e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004760:	463b      	mov	r3, r7
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	891b      	ldrh	r3, [r3, #8]
 8004766:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800476a:	463b      	mov	r3, r7
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	6959      	ldr	r1, [r3, #20]
 8004770:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004774:	b29b      	uxth	r3, r3
 8004776:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 800477a:	1d38      	adds	r0, r7, #4
 800477c:	6800      	ldr	r0, [r0, #0]
 800477e:	f000 ff52 	bl	8005626 <USB_WritePMA>
 8004782:	e33b      	b.n	8004dfc <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004784:	463b      	mov	r3, r7
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	785b      	ldrb	r3, [r3, #1]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d164      	bne.n	8004858 <USB_EPStartXfer+0x4ba>
 800478e:	1d3b      	adds	r3, r7, #4
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004794:	1d3b      	adds	r3, r7, #4
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800479c:	b29b      	uxth	r3, r3
 800479e:	461a      	mov	r2, r3
 80047a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047a2:	4413      	add	r3, r2
 80047a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047a6:	463b      	mov	r3, r7
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	781b      	ldrb	r3, [r3, #0]
 80047ac:	00da      	lsls	r2, r3, #3
 80047ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047b0:	4413      	add	r3, r2
 80047b2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80047b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80047b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d112      	bne.n	80047e6 <USB_EPStartXfer+0x448>
 80047c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047c2:	881b      	ldrh	r3, [r3, #0]
 80047c4:	b29b      	uxth	r3, r3
 80047c6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80047ca:	b29a      	uxth	r2, r3
 80047cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047ce:	801a      	strh	r2, [r3, #0]
 80047d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047d2:	881b      	ldrh	r3, [r3, #0]
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047de:	b29a      	uxth	r2, r3
 80047e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047e2:	801a      	strh	r2, [r3, #0]
 80047e4:	e057      	b.n	8004896 <USB_EPStartXfer+0x4f8>
 80047e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047ea:	2b3e      	cmp	r3, #62	; 0x3e
 80047ec:	d817      	bhi.n	800481e <USB_EPStartXfer+0x480>
 80047ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047f2:	085b      	lsrs	r3, r3, #1
 80047f4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80047f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047fc:	f003 0301 	and.w	r3, r3, #1
 8004800:	2b00      	cmp	r3, #0
 8004802:	d004      	beq.n	800480e <USB_EPStartXfer+0x470>
 8004804:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004808:	3301      	adds	r3, #1
 800480a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800480e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004812:	b29b      	uxth	r3, r3
 8004814:	029b      	lsls	r3, r3, #10
 8004816:	b29a      	uxth	r2, r3
 8004818:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800481a:	801a      	strh	r2, [r3, #0]
 800481c:	e03b      	b.n	8004896 <USB_EPStartXfer+0x4f8>
 800481e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004822:	095b      	lsrs	r3, r3, #5
 8004824:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004828:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800482c:	f003 031f 	and.w	r3, r3, #31
 8004830:	2b00      	cmp	r3, #0
 8004832:	d104      	bne.n	800483e <USB_EPStartXfer+0x4a0>
 8004834:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004838:	3b01      	subs	r3, #1
 800483a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800483e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004842:	b29b      	uxth	r3, r3
 8004844:	029b      	lsls	r3, r3, #10
 8004846:	b29b      	uxth	r3, r3
 8004848:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800484c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004850:	b29a      	uxth	r2, r3
 8004852:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004854:	801a      	strh	r2, [r3, #0]
 8004856:	e01e      	b.n	8004896 <USB_EPStartXfer+0x4f8>
 8004858:	463b      	mov	r3, r7
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	785b      	ldrb	r3, [r3, #1]
 800485e:	2b01      	cmp	r3, #1
 8004860:	d119      	bne.n	8004896 <USB_EPStartXfer+0x4f8>
 8004862:	1d3b      	adds	r3, r7, #4
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	657b      	str	r3, [r7, #84]	; 0x54
 8004868:	1d3b      	adds	r3, r7, #4
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004870:	b29b      	uxth	r3, r3
 8004872:	461a      	mov	r2, r3
 8004874:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004876:	4413      	add	r3, r2
 8004878:	657b      	str	r3, [r7, #84]	; 0x54
 800487a:	463b      	mov	r3, r7
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	781b      	ldrb	r3, [r3, #0]
 8004880:	00da      	lsls	r2, r3, #3
 8004882:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004884:	4413      	add	r3, r2
 8004886:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800488a:	653b      	str	r3, [r7, #80]	; 0x50
 800488c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004890:	b29a      	uxth	r2, r3
 8004892:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004894:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004896:	463b      	mov	r3, r7
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	891b      	ldrh	r3, [r3, #8]
 800489c:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80048a0:	463b      	mov	r3, r7
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	6959      	ldr	r1, [r3, #20]
 80048a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80048b0:	1d38      	adds	r0, r7, #4
 80048b2:	6800      	ldr	r0, [r0, #0]
 80048b4:	f000 feb7 	bl	8005626 <USB_WritePMA>
            ep->xfer_buff += len;
 80048b8:	463b      	mov	r3, r7
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	695a      	ldr	r2, [r3, #20]
 80048be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048c2:	441a      	add	r2, r3
 80048c4:	463b      	mov	r3, r7
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80048ca:	463b      	mov	r3, r7
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	6a1a      	ldr	r2, [r3, #32]
 80048d0:	463b      	mov	r3, r7
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	691b      	ldr	r3, [r3, #16]
 80048d6:	429a      	cmp	r2, r3
 80048d8:	d909      	bls.n	80048ee <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 80048da:	463b      	mov	r3, r7
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	6a1a      	ldr	r2, [r3, #32]
 80048e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048e4:	1ad2      	subs	r2, r2, r3
 80048e6:	463b      	mov	r3, r7
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	621a      	str	r2, [r3, #32]
 80048ec:	e008      	b.n	8004900 <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 80048ee:	463b      	mov	r3, r7
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	6a1b      	ldr	r3, [r3, #32]
 80048f4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 80048f8:	463b      	mov	r3, r7
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	2200      	movs	r2, #0
 80048fe:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004900:	1d3b      	adds	r3, r7, #4
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	647b      	str	r3, [r7, #68]	; 0x44
 8004906:	463b      	mov	r3, r7
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	785b      	ldrb	r3, [r3, #1]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d164      	bne.n	80049da <USB_EPStartXfer+0x63c>
 8004910:	1d3b      	adds	r3, r7, #4
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004916:	1d3b      	adds	r3, r7, #4
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800491e:	b29b      	uxth	r3, r3
 8004920:	461a      	mov	r2, r3
 8004922:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004924:	4413      	add	r3, r2
 8004926:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004928:	463b      	mov	r3, r7
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	781b      	ldrb	r3, [r3, #0]
 800492e:	00da      	lsls	r2, r3, #3
 8004930:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004932:	4413      	add	r3, r2
 8004934:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004938:	63bb      	str	r3, [r7, #56]	; 0x38
 800493a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800493e:	2b00      	cmp	r3, #0
 8004940:	d112      	bne.n	8004968 <USB_EPStartXfer+0x5ca>
 8004942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004944:	881b      	ldrh	r3, [r3, #0]
 8004946:	b29b      	uxth	r3, r3
 8004948:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800494c:	b29a      	uxth	r2, r3
 800494e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004950:	801a      	strh	r2, [r3, #0]
 8004952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004954:	881b      	ldrh	r3, [r3, #0]
 8004956:	b29b      	uxth	r3, r3
 8004958:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800495c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004960:	b29a      	uxth	r2, r3
 8004962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004964:	801a      	strh	r2, [r3, #0]
 8004966:	e054      	b.n	8004a12 <USB_EPStartXfer+0x674>
 8004968:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800496c:	2b3e      	cmp	r3, #62	; 0x3e
 800496e:	d817      	bhi.n	80049a0 <USB_EPStartXfer+0x602>
 8004970:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004974:	085b      	lsrs	r3, r3, #1
 8004976:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800497a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800497e:	f003 0301 	and.w	r3, r3, #1
 8004982:	2b00      	cmp	r3, #0
 8004984:	d004      	beq.n	8004990 <USB_EPStartXfer+0x5f2>
 8004986:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800498a:	3301      	adds	r3, #1
 800498c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004990:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004994:	b29b      	uxth	r3, r3
 8004996:	029b      	lsls	r3, r3, #10
 8004998:	b29a      	uxth	r2, r3
 800499a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800499c:	801a      	strh	r2, [r3, #0]
 800499e:	e038      	b.n	8004a12 <USB_EPStartXfer+0x674>
 80049a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049a4:	095b      	lsrs	r3, r3, #5
 80049a6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80049aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049ae:	f003 031f 	and.w	r3, r3, #31
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d104      	bne.n	80049c0 <USB_EPStartXfer+0x622>
 80049b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80049ba:	3b01      	subs	r3, #1
 80049bc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80049c0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80049c4:	b29b      	uxth	r3, r3
 80049c6:	029b      	lsls	r3, r3, #10
 80049c8:	b29b      	uxth	r3, r3
 80049ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049d2:	b29a      	uxth	r2, r3
 80049d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049d6:	801a      	strh	r2, [r3, #0]
 80049d8:	e01b      	b.n	8004a12 <USB_EPStartXfer+0x674>
 80049da:	463b      	mov	r3, r7
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	785b      	ldrb	r3, [r3, #1]
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d116      	bne.n	8004a12 <USB_EPStartXfer+0x674>
 80049e4:	1d3b      	adds	r3, r7, #4
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049ec:	b29b      	uxth	r3, r3
 80049ee:	461a      	mov	r2, r3
 80049f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049f2:	4413      	add	r3, r2
 80049f4:	647b      	str	r3, [r7, #68]	; 0x44
 80049f6:	463b      	mov	r3, r7
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	781b      	ldrb	r3, [r3, #0]
 80049fc:	00da      	lsls	r2, r3, #3
 80049fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a00:	4413      	add	r3, r2
 8004a02:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004a06:	643b      	str	r3, [r7, #64]	; 0x40
 8004a08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a0c:	b29a      	uxth	r2, r3
 8004a0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a10:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004a12:	463b      	mov	r3, r7
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	895b      	ldrh	r3, [r3, #10]
 8004a18:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004a1c:	463b      	mov	r3, r7
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	6959      	ldr	r1, [r3, #20]
 8004a22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a26:	b29b      	uxth	r3, r3
 8004a28:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004a2c:	1d38      	adds	r0, r7, #4
 8004a2e:	6800      	ldr	r0, [r0, #0]
 8004a30:	f000 fdf9 	bl	8005626 <USB_WritePMA>
 8004a34:	e1e2      	b.n	8004dfc <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8004a36:	463b      	mov	r3, r7
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	6a1b      	ldr	r3, [r3, #32]
 8004a3c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8004a40:	1d3b      	adds	r3, r7, #4
 8004a42:	681a      	ldr	r2, [r3, #0]
 8004a44:	463b      	mov	r3, r7
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	781b      	ldrb	r3, [r3, #0]
 8004a4a:	009b      	lsls	r3, r3, #2
 8004a4c:	4413      	add	r3, r2
 8004a4e:	881b      	ldrh	r3, [r3, #0]
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8004a56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a5a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8004a5e:	1d3b      	adds	r3, r7, #4
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	463b      	mov	r3, r7
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	781b      	ldrb	r3, [r3, #0]
 8004a68:	009b      	lsls	r3, r3, #2
 8004a6a:	441a      	add	r2, r3
 8004a6c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004a70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004a84:	1d3b      	adds	r3, r7, #4
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	663b      	str	r3, [r7, #96]	; 0x60
 8004a8a:	1d3b      	adds	r3, r7, #4
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	461a      	mov	r2, r3
 8004a96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a98:	4413      	add	r3, r2
 8004a9a:	663b      	str	r3, [r7, #96]	; 0x60
 8004a9c:	463b      	mov	r3, r7
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	781b      	ldrb	r3, [r3, #0]
 8004aa2:	00da      	lsls	r2, r3, #3
 8004aa4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004aa6:	4413      	add	r3, r2
 8004aa8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004aac:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004aae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ab2:	b29a      	uxth	r2, r3
 8004ab4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ab6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004ab8:	463b      	mov	r3, r7
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	891b      	ldrh	r3, [r3, #8]
 8004abe:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004ac2:	463b      	mov	r3, r7
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	6959      	ldr	r1, [r3, #20]
 8004ac8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004acc:	b29b      	uxth	r3, r3
 8004ace:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004ad2:	1d38      	adds	r0, r7, #4
 8004ad4:	6800      	ldr	r0, [r0, #0]
 8004ad6:	f000 fda6 	bl	8005626 <USB_WritePMA>
 8004ada:	e18f      	b.n	8004dfc <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004adc:	1d3b      	adds	r3, r7, #4
 8004ade:	681a      	ldr	r2, [r3, #0]
 8004ae0:	463b      	mov	r3, r7
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	781b      	ldrb	r3, [r3, #0]
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	4413      	add	r3, r2
 8004aea:	881b      	ldrh	r3, [r3, #0]
 8004aec:	b29b      	uxth	r3, r3
 8004aee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	f000 808f 	beq.w	8004c16 <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004af8:	1d3b      	adds	r3, r7, #4
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	67bb      	str	r3, [r7, #120]	; 0x78
 8004afe:	463b      	mov	r3, r7
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	785b      	ldrb	r3, [r3, #1]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d164      	bne.n	8004bd2 <USB_EPStartXfer+0x834>
 8004b08:	1d3b      	adds	r3, r7, #4
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	673b      	str	r3, [r7, #112]	; 0x70
 8004b0e:	1d3b      	adds	r3, r7, #4
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b16:	b29b      	uxth	r3, r3
 8004b18:	461a      	mov	r2, r3
 8004b1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b1c:	4413      	add	r3, r2
 8004b1e:	673b      	str	r3, [r7, #112]	; 0x70
 8004b20:	463b      	mov	r3, r7
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	781b      	ldrb	r3, [r3, #0]
 8004b26:	00da      	lsls	r2, r3, #3
 8004b28:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b2a:	4413      	add	r3, r2
 8004b2c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004b30:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004b32:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d112      	bne.n	8004b60 <USB_EPStartXfer+0x7c2>
 8004b3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b3c:	881b      	ldrh	r3, [r3, #0]
 8004b3e:	b29b      	uxth	r3, r3
 8004b40:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004b44:	b29a      	uxth	r2, r3
 8004b46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b48:	801a      	strh	r2, [r3, #0]
 8004b4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b4c:	881b      	ldrh	r3, [r3, #0]
 8004b4e:	b29b      	uxth	r3, r3
 8004b50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b58:	b29a      	uxth	r2, r3
 8004b5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b5c:	801a      	strh	r2, [r3, #0]
 8004b5e:	e054      	b.n	8004c0a <USB_EPStartXfer+0x86c>
 8004b60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b64:	2b3e      	cmp	r3, #62	; 0x3e
 8004b66:	d817      	bhi.n	8004b98 <USB_EPStartXfer+0x7fa>
 8004b68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b6c:	085b      	lsrs	r3, r3, #1
 8004b6e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004b72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b76:	f003 0301 	and.w	r3, r3, #1
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d004      	beq.n	8004b88 <USB_EPStartXfer+0x7ea>
 8004b7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b82:	3301      	adds	r3, #1
 8004b84:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b8c:	b29b      	uxth	r3, r3
 8004b8e:	029b      	lsls	r3, r3, #10
 8004b90:	b29a      	uxth	r2, r3
 8004b92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b94:	801a      	strh	r2, [r3, #0]
 8004b96:	e038      	b.n	8004c0a <USB_EPStartXfer+0x86c>
 8004b98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b9c:	095b      	lsrs	r3, r3, #5
 8004b9e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004ba2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ba6:	f003 031f 	and.w	r3, r3, #31
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d104      	bne.n	8004bb8 <USB_EPStartXfer+0x81a>
 8004bae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bb2:	3b01      	subs	r3, #1
 8004bb4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004bb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bbc:	b29b      	uxth	r3, r3
 8004bbe:	029b      	lsls	r3, r3, #10
 8004bc0:	b29b      	uxth	r3, r3
 8004bc2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004bc6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004bca:	b29a      	uxth	r2, r3
 8004bcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bce:	801a      	strh	r2, [r3, #0]
 8004bd0:	e01b      	b.n	8004c0a <USB_EPStartXfer+0x86c>
 8004bd2:	463b      	mov	r3, r7
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	785b      	ldrb	r3, [r3, #1]
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	d116      	bne.n	8004c0a <USB_EPStartXfer+0x86c>
 8004bdc:	1d3b      	adds	r3, r7, #4
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004be4:	b29b      	uxth	r3, r3
 8004be6:	461a      	mov	r2, r3
 8004be8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004bea:	4413      	add	r3, r2
 8004bec:	67bb      	str	r3, [r7, #120]	; 0x78
 8004bee:	463b      	mov	r3, r7
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	781b      	ldrb	r3, [r3, #0]
 8004bf4:	00da      	lsls	r2, r3, #3
 8004bf6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004bf8:	4413      	add	r3, r2
 8004bfa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004bfe:	677b      	str	r3, [r7, #116]	; 0x74
 8004c00:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c04:	b29a      	uxth	r2, r3
 8004c06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c08:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8004c0a:	463b      	mov	r3, r7
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	895b      	ldrh	r3, [r3, #10]
 8004c10:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 8004c14:	e097      	b.n	8004d46 <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004c16:	463b      	mov	r3, r7
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	785b      	ldrb	r3, [r3, #1]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d168      	bne.n	8004cf2 <USB_EPStartXfer+0x954>
 8004c20:	1d3b      	adds	r3, r7, #4
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004c28:	1d3b      	adds	r3, r7, #4
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c30:	b29b      	uxth	r3, r3
 8004c32:	461a      	mov	r2, r3
 8004c34:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004c38:	4413      	add	r3, r2
 8004c3a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004c3e:	463b      	mov	r3, r7
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	781b      	ldrb	r3, [r3, #0]
 8004c44:	00da      	lsls	r2, r3, #3
 8004c46:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004c4a:	4413      	add	r3, r2
 8004c4c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004c50:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004c52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d112      	bne.n	8004c80 <USB_EPStartXfer+0x8e2>
 8004c5a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004c5c:	881b      	ldrh	r3, [r3, #0]
 8004c5e:	b29b      	uxth	r3, r3
 8004c60:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004c64:	b29a      	uxth	r2, r3
 8004c66:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004c68:	801a      	strh	r2, [r3, #0]
 8004c6a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004c6c:	881b      	ldrh	r3, [r3, #0]
 8004c6e:	b29b      	uxth	r3, r3
 8004c70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c78:	b29a      	uxth	r2, r3
 8004c7a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004c7c:	801a      	strh	r2, [r3, #0]
 8004c7e:	e05d      	b.n	8004d3c <USB_EPStartXfer+0x99e>
 8004c80:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c84:	2b3e      	cmp	r3, #62	; 0x3e
 8004c86:	d817      	bhi.n	8004cb8 <USB_EPStartXfer+0x91a>
 8004c88:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c8c:	085b      	lsrs	r3, r3, #1
 8004c8e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004c92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c96:	f003 0301 	and.w	r3, r3, #1
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d004      	beq.n	8004ca8 <USB_EPStartXfer+0x90a>
 8004c9e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004ca2:	3301      	adds	r3, #1
 8004ca4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004ca8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004cac:	b29b      	uxth	r3, r3
 8004cae:	029b      	lsls	r3, r3, #10
 8004cb0:	b29a      	uxth	r2, r3
 8004cb2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004cb4:	801a      	strh	r2, [r3, #0]
 8004cb6:	e041      	b.n	8004d3c <USB_EPStartXfer+0x99e>
 8004cb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cbc:	095b      	lsrs	r3, r3, #5
 8004cbe:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004cc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cc6:	f003 031f 	and.w	r3, r3, #31
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d104      	bne.n	8004cd8 <USB_EPStartXfer+0x93a>
 8004cce:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004cd2:	3b01      	subs	r3, #1
 8004cd4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004cd8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004cdc:	b29b      	uxth	r3, r3
 8004cde:	029b      	lsls	r3, r3, #10
 8004ce0:	b29b      	uxth	r3, r3
 8004ce2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ce6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cea:	b29a      	uxth	r2, r3
 8004cec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004cee:	801a      	strh	r2, [r3, #0]
 8004cf0:	e024      	b.n	8004d3c <USB_EPStartXfer+0x99e>
 8004cf2:	463b      	mov	r3, r7
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	785b      	ldrb	r3, [r3, #1]
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d11f      	bne.n	8004d3c <USB_EPStartXfer+0x99e>
 8004cfc:	1d3b      	adds	r3, r7, #4
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004d04:	1d3b      	adds	r3, r7, #4
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d0c:	b29b      	uxth	r3, r3
 8004d0e:	461a      	mov	r2, r3
 8004d10:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004d14:	4413      	add	r3, r2
 8004d16:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004d1a:	463b      	mov	r3, r7
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	781b      	ldrb	r3, [r3, #0]
 8004d20:	00da      	lsls	r2, r3, #3
 8004d22:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004d26:	4413      	add	r3, r2
 8004d28:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004d2c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004d30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d34:	b29a      	uxth	r2, r3
 8004d36:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004d3a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004d3c:	463b      	mov	r3, r7
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	891b      	ldrh	r3, [r3, #8]
 8004d42:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004d46:	463b      	mov	r3, r7
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	6959      	ldr	r1, [r3, #20]
 8004d4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d50:	b29b      	uxth	r3, r3
 8004d52:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004d56:	1d38      	adds	r0, r7, #4
 8004d58:	6800      	ldr	r0, [r0, #0]
 8004d5a:	f000 fc64 	bl	8005626 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8004d5e:	463b      	mov	r3, r7
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	785b      	ldrb	r3, [r3, #1]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d122      	bne.n	8004dae <USB_EPStartXfer+0xa10>
 8004d68:	1d3b      	adds	r3, r7, #4
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	463b      	mov	r3, r7
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	781b      	ldrb	r3, [r3, #0]
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	4413      	add	r3, r2
 8004d76:	881b      	ldrh	r3, [r3, #0]
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d82:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8004d86:	1d3b      	adds	r3, r7, #4
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	463b      	mov	r3, r7
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	781b      	ldrb	r3, [r3, #0]
 8004d90:	009b      	lsls	r3, r3, #2
 8004d92:	441a      	add	r2, r3
 8004d94:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8004d98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004da0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004da4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004da8:	b29b      	uxth	r3, r3
 8004daa:	8013      	strh	r3, [r2, #0]
 8004dac:	e026      	b.n	8004dfc <USB_EPStartXfer+0xa5e>
 8004dae:	463b      	mov	r3, r7
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	785b      	ldrb	r3, [r3, #1]
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d121      	bne.n	8004dfc <USB_EPStartXfer+0xa5e>
 8004db8:	1d3b      	adds	r3, r7, #4
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	463b      	mov	r3, r7
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	781b      	ldrb	r3, [r3, #0]
 8004dc2:	009b      	lsls	r3, r3, #2
 8004dc4:	4413      	add	r3, r2
 8004dc6:	881b      	ldrh	r3, [r3, #0]
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dd2:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8004dd6:	1d3b      	adds	r3, r7, #4
 8004dd8:	681a      	ldr	r2, [r3, #0]
 8004dda:	463b      	mov	r3, r7
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	781b      	ldrb	r3, [r3, #0]
 8004de0:	009b      	lsls	r3, r3, #2
 8004de2:	441a      	add	r2, r3
 8004de4:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8004de8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004df0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004df4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004df8:	b29b      	uxth	r3, r3
 8004dfa:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004dfc:	1d3b      	adds	r3, r7, #4
 8004dfe:	681a      	ldr	r2, [r3, #0]
 8004e00:	463b      	mov	r3, r7
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	781b      	ldrb	r3, [r3, #0]
 8004e06:	009b      	lsls	r3, r3, #2
 8004e08:	4413      	add	r3, r2
 8004e0a:	881b      	ldrh	r3, [r3, #0]
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	f107 020e 	add.w	r2, r7, #14
 8004e12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e1a:	8013      	strh	r3, [r2, #0]
 8004e1c:	f107 030e 	add.w	r3, r7, #14
 8004e20:	f107 020e 	add.w	r2, r7, #14
 8004e24:	8812      	ldrh	r2, [r2, #0]
 8004e26:	f082 0210 	eor.w	r2, r2, #16
 8004e2a:	801a      	strh	r2, [r3, #0]
 8004e2c:	f107 030e 	add.w	r3, r7, #14
 8004e30:	f107 020e 	add.w	r2, r7, #14
 8004e34:	8812      	ldrh	r2, [r2, #0]
 8004e36:	f082 0220 	eor.w	r2, r2, #32
 8004e3a:	801a      	strh	r2, [r3, #0]
 8004e3c:	1d3b      	adds	r3, r7, #4
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	463b      	mov	r3, r7
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	781b      	ldrb	r3, [r3, #0]
 8004e46:	009b      	lsls	r3, r3, #2
 8004e48:	441a      	add	r2, r3
 8004e4a:	f107 030e 	add.w	r3, r7, #14
 8004e4e:	881b      	ldrh	r3, [r3, #0]
 8004e50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e60:	b29b      	uxth	r3, r3
 8004e62:	8013      	strh	r3, [r2, #0]
 8004e64:	e3b5      	b.n	80055d2 <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8004e66:	463b      	mov	r3, r7
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	7b1b      	ldrb	r3, [r3, #12]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	f040 8090 	bne.w	8004f92 <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8004e72:	463b      	mov	r3, r7
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	699a      	ldr	r2, [r3, #24]
 8004e78:	463b      	mov	r3, r7
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	691b      	ldr	r3, [r3, #16]
 8004e7e:	429a      	cmp	r2, r3
 8004e80:	d90e      	bls.n	8004ea0 <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 8004e82:	463b      	mov	r3, r7
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	691b      	ldr	r3, [r3, #16]
 8004e88:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 8004e8c:	463b      	mov	r3, r7
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	699a      	ldr	r2, [r3, #24]
 8004e92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e96:	1ad2      	subs	r2, r2, r3
 8004e98:	463b      	mov	r3, r7
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	619a      	str	r2, [r3, #24]
 8004e9e:	e008      	b.n	8004eb2 <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 8004ea0:	463b      	mov	r3, r7
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	699b      	ldr	r3, [r3, #24]
 8004ea6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 8004eaa:	463b      	mov	r3, r7
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004eb2:	1d3b      	adds	r3, r7, #4
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004eba:	1d3b      	adds	r3, r7, #4
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	461a      	mov	r2, r3
 8004ec6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004eca:	4413      	add	r3, r2
 8004ecc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004ed0:	463b      	mov	r3, r7
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	781b      	ldrb	r3, [r3, #0]
 8004ed6:	00da      	lsls	r2, r3, #3
 8004ed8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004edc:	4413      	add	r3, r2
 8004ede:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004ee2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004ee6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d116      	bne.n	8004f1c <USB_EPStartXfer+0xb7e>
 8004eee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004ef2:	881b      	ldrh	r3, [r3, #0]
 8004ef4:	b29b      	uxth	r3, r3
 8004ef6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004efa:	b29a      	uxth	r2, r3
 8004efc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004f00:	801a      	strh	r2, [r3, #0]
 8004f02:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004f06:	881b      	ldrh	r3, [r3, #0]
 8004f08:	b29b      	uxth	r3, r3
 8004f0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f12:	b29a      	uxth	r2, r3
 8004f14:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004f18:	801a      	strh	r2, [r3, #0]
 8004f1a:	e32c      	b.n	8005576 <USB_EPStartXfer+0x11d8>
 8004f1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f20:	2b3e      	cmp	r3, #62	; 0x3e
 8004f22:	d818      	bhi.n	8004f56 <USB_EPStartXfer+0xbb8>
 8004f24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f28:	085b      	lsrs	r3, r3, #1
 8004f2a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004f2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f32:	f003 0301 	and.w	r3, r3, #1
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d004      	beq.n	8004f44 <USB_EPStartXfer+0xba6>
 8004f3a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004f3e:	3301      	adds	r3, #1
 8004f40:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004f44:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	029b      	lsls	r3, r3, #10
 8004f4c:	b29a      	uxth	r2, r3
 8004f4e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004f52:	801a      	strh	r2, [r3, #0]
 8004f54:	e30f      	b.n	8005576 <USB_EPStartXfer+0x11d8>
 8004f56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f5a:	095b      	lsrs	r3, r3, #5
 8004f5c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004f60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f64:	f003 031f 	and.w	r3, r3, #31
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d104      	bne.n	8004f76 <USB_EPStartXfer+0xbd8>
 8004f6c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004f70:	3b01      	subs	r3, #1
 8004f72:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004f76:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004f7a:	b29b      	uxth	r3, r3
 8004f7c:	029b      	lsls	r3, r3, #10
 8004f7e:	b29b      	uxth	r3, r3
 8004f80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f88:	b29a      	uxth	r2, r3
 8004f8a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004f8e:	801a      	strh	r2, [r3, #0]
 8004f90:	e2f1      	b.n	8005576 <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8004f92:	463b      	mov	r3, r7
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	78db      	ldrb	r3, [r3, #3]
 8004f98:	2b02      	cmp	r3, #2
 8004f9a:	f040 818f 	bne.w	80052bc <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8004f9e:	463b      	mov	r3, r7
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	785b      	ldrb	r3, [r3, #1]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d175      	bne.n	8005094 <USB_EPStartXfer+0xcf6>
 8004fa8:	1d3b      	adds	r3, r7, #4
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004fb0:	1d3b      	adds	r3, r7, #4
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fb8:	b29b      	uxth	r3, r3
 8004fba:	461a      	mov	r2, r3
 8004fbc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004fc0:	4413      	add	r3, r2
 8004fc2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004fc6:	463b      	mov	r3, r7
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	781b      	ldrb	r3, [r3, #0]
 8004fcc:	00da      	lsls	r2, r3, #3
 8004fce:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004fd2:	4413      	add	r3, r2
 8004fd4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004fd8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004fdc:	463b      	mov	r3, r7
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	691b      	ldr	r3, [r3, #16]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d116      	bne.n	8005014 <USB_EPStartXfer+0xc76>
 8004fe6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004fea:	881b      	ldrh	r3, [r3, #0]
 8004fec:	b29b      	uxth	r3, r3
 8004fee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004ff2:	b29a      	uxth	r2, r3
 8004ff4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004ff8:	801a      	strh	r2, [r3, #0]
 8004ffa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004ffe:	881b      	ldrh	r3, [r3, #0]
 8005000:	b29b      	uxth	r3, r3
 8005002:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005006:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800500a:	b29a      	uxth	r2, r3
 800500c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005010:	801a      	strh	r2, [r3, #0]
 8005012:	e065      	b.n	80050e0 <USB_EPStartXfer+0xd42>
 8005014:	463b      	mov	r3, r7
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	691b      	ldr	r3, [r3, #16]
 800501a:	2b3e      	cmp	r3, #62	; 0x3e
 800501c:	d81a      	bhi.n	8005054 <USB_EPStartXfer+0xcb6>
 800501e:	463b      	mov	r3, r7
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	691b      	ldr	r3, [r3, #16]
 8005024:	085b      	lsrs	r3, r3, #1
 8005026:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800502a:	463b      	mov	r3, r7
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	691b      	ldr	r3, [r3, #16]
 8005030:	f003 0301 	and.w	r3, r3, #1
 8005034:	2b00      	cmp	r3, #0
 8005036:	d004      	beq.n	8005042 <USB_EPStartXfer+0xca4>
 8005038:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800503c:	3301      	adds	r3, #1
 800503e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005042:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005046:	b29b      	uxth	r3, r3
 8005048:	029b      	lsls	r3, r3, #10
 800504a:	b29a      	uxth	r2, r3
 800504c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005050:	801a      	strh	r2, [r3, #0]
 8005052:	e045      	b.n	80050e0 <USB_EPStartXfer+0xd42>
 8005054:	463b      	mov	r3, r7
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	691b      	ldr	r3, [r3, #16]
 800505a:	095b      	lsrs	r3, r3, #5
 800505c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005060:	463b      	mov	r3, r7
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	691b      	ldr	r3, [r3, #16]
 8005066:	f003 031f 	and.w	r3, r3, #31
 800506a:	2b00      	cmp	r3, #0
 800506c:	d104      	bne.n	8005078 <USB_EPStartXfer+0xcda>
 800506e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005072:	3b01      	subs	r3, #1
 8005074:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005078:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800507c:	b29b      	uxth	r3, r3
 800507e:	029b      	lsls	r3, r3, #10
 8005080:	b29b      	uxth	r3, r3
 8005082:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005086:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800508a:	b29a      	uxth	r2, r3
 800508c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005090:	801a      	strh	r2, [r3, #0]
 8005092:	e025      	b.n	80050e0 <USB_EPStartXfer+0xd42>
 8005094:	463b      	mov	r3, r7
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	785b      	ldrb	r3, [r3, #1]
 800509a:	2b01      	cmp	r3, #1
 800509c:	d120      	bne.n	80050e0 <USB_EPStartXfer+0xd42>
 800509e:	1d3b      	adds	r3, r7, #4
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80050a6:	1d3b      	adds	r3, r7, #4
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050ae:	b29b      	uxth	r3, r3
 80050b0:	461a      	mov	r2, r3
 80050b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80050b6:	4413      	add	r3, r2
 80050b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80050bc:	463b      	mov	r3, r7
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	781b      	ldrb	r3, [r3, #0]
 80050c2:	00da      	lsls	r2, r3, #3
 80050c4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80050c8:	4413      	add	r3, r2
 80050ca:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80050ce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80050d2:	463b      	mov	r3, r7
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	691b      	ldr	r3, [r3, #16]
 80050d8:	b29a      	uxth	r2, r3
 80050da:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80050de:	801a      	strh	r2, [r3, #0]
 80050e0:	1d3b      	adds	r3, r7, #4
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80050e8:	463b      	mov	r3, r7
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	785b      	ldrb	r3, [r3, #1]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d175      	bne.n	80051de <USB_EPStartXfer+0xe40>
 80050f2:	1d3b      	adds	r3, r7, #4
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80050fa:	1d3b      	adds	r3, r7, #4
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005102:	b29b      	uxth	r3, r3
 8005104:	461a      	mov	r2, r3
 8005106:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800510a:	4413      	add	r3, r2
 800510c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005110:	463b      	mov	r3, r7
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	781b      	ldrb	r3, [r3, #0]
 8005116:	00da      	lsls	r2, r3, #3
 8005118:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800511c:	4413      	add	r3, r2
 800511e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005122:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005126:	463b      	mov	r3, r7
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	691b      	ldr	r3, [r3, #16]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d116      	bne.n	800515e <USB_EPStartXfer+0xdc0>
 8005130:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005134:	881b      	ldrh	r3, [r3, #0]
 8005136:	b29b      	uxth	r3, r3
 8005138:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800513c:	b29a      	uxth	r2, r3
 800513e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005142:	801a      	strh	r2, [r3, #0]
 8005144:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005148:	881b      	ldrh	r3, [r3, #0]
 800514a:	b29b      	uxth	r3, r3
 800514c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005150:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005154:	b29a      	uxth	r2, r3
 8005156:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800515a:	801a      	strh	r2, [r3, #0]
 800515c:	e061      	b.n	8005222 <USB_EPStartXfer+0xe84>
 800515e:	463b      	mov	r3, r7
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	691b      	ldr	r3, [r3, #16]
 8005164:	2b3e      	cmp	r3, #62	; 0x3e
 8005166:	d81a      	bhi.n	800519e <USB_EPStartXfer+0xe00>
 8005168:	463b      	mov	r3, r7
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	691b      	ldr	r3, [r3, #16]
 800516e:	085b      	lsrs	r3, r3, #1
 8005170:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005174:	463b      	mov	r3, r7
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	691b      	ldr	r3, [r3, #16]
 800517a:	f003 0301 	and.w	r3, r3, #1
 800517e:	2b00      	cmp	r3, #0
 8005180:	d004      	beq.n	800518c <USB_EPStartXfer+0xdee>
 8005182:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005186:	3301      	adds	r3, #1
 8005188:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800518c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005190:	b29b      	uxth	r3, r3
 8005192:	029b      	lsls	r3, r3, #10
 8005194:	b29a      	uxth	r2, r3
 8005196:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800519a:	801a      	strh	r2, [r3, #0]
 800519c:	e041      	b.n	8005222 <USB_EPStartXfer+0xe84>
 800519e:	463b      	mov	r3, r7
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	691b      	ldr	r3, [r3, #16]
 80051a4:	095b      	lsrs	r3, r3, #5
 80051a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80051aa:	463b      	mov	r3, r7
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	691b      	ldr	r3, [r3, #16]
 80051b0:	f003 031f 	and.w	r3, r3, #31
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d104      	bne.n	80051c2 <USB_EPStartXfer+0xe24>
 80051b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051bc:	3b01      	subs	r3, #1
 80051be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80051c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051c6:	b29b      	uxth	r3, r3
 80051c8:	029b      	lsls	r3, r3, #10
 80051ca:	b29b      	uxth	r3, r3
 80051cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051d4:	b29a      	uxth	r2, r3
 80051d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80051da:	801a      	strh	r2, [r3, #0]
 80051dc:	e021      	b.n	8005222 <USB_EPStartXfer+0xe84>
 80051de:	463b      	mov	r3, r7
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	785b      	ldrb	r3, [r3, #1]
 80051e4:	2b01      	cmp	r3, #1
 80051e6:	d11c      	bne.n	8005222 <USB_EPStartXfer+0xe84>
 80051e8:	1d3b      	adds	r3, r7, #4
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051f0:	b29b      	uxth	r3, r3
 80051f2:	461a      	mov	r2, r3
 80051f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80051f8:	4413      	add	r3, r2
 80051fa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80051fe:	463b      	mov	r3, r7
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	781b      	ldrb	r3, [r3, #0]
 8005204:	00da      	lsls	r2, r3, #3
 8005206:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800520a:	4413      	add	r3, r2
 800520c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005210:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005214:	463b      	mov	r3, r7
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	691b      	ldr	r3, [r3, #16]
 800521a:	b29a      	uxth	r2, r3
 800521c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005220:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005222:	463b      	mov	r3, r7
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	69db      	ldr	r3, [r3, #28]
 8005228:	2b00      	cmp	r3, #0
 800522a:	f000 81a4 	beq.w	8005576 <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800522e:	1d3b      	adds	r3, r7, #4
 8005230:	681a      	ldr	r2, [r3, #0]
 8005232:	463b      	mov	r3, r7
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	781b      	ldrb	r3, [r3, #0]
 8005238:	009b      	lsls	r3, r3, #2
 800523a:	4413      	add	r3, r2
 800523c:	881b      	ldrh	r3, [r3, #0]
 800523e:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005242:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005246:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800524a:	2b00      	cmp	r3, #0
 800524c:	d005      	beq.n	800525a <USB_EPStartXfer+0xebc>
 800524e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005252:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005256:	2b00      	cmp	r3, #0
 8005258:	d10d      	bne.n	8005276 <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800525a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800525e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005262:	2b00      	cmp	r3, #0
 8005264:	f040 8187 	bne.w	8005576 <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005268:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800526c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005270:	2b00      	cmp	r3, #0
 8005272:	f040 8180 	bne.w	8005576 <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8005276:	1d3b      	adds	r3, r7, #4
 8005278:	681a      	ldr	r2, [r3, #0]
 800527a:	463b      	mov	r3, r7
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	781b      	ldrb	r3, [r3, #0]
 8005280:	009b      	lsls	r3, r3, #2
 8005282:	4413      	add	r3, r2
 8005284:	881b      	ldrh	r3, [r3, #0]
 8005286:	b29b      	uxth	r3, r3
 8005288:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800528c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005290:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8005294:	1d3b      	adds	r3, r7, #4
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	463b      	mov	r3, r7
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	781b      	ldrb	r3, [r3, #0]
 800529e:	009b      	lsls	r3, r3, #2
 80052a0:	441a      	add	r2, r3
 80052a2:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80052a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052b2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80052b6:	b29b      	uxth	r3, r3
 80052b8:	8013      	strh	r3, [r2, #0]
 80052ba:	e15c      	b.n	8005576 <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80052bc:	463b      	mov	r3, r7
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	78db      	ldrb	r3, [r3, #3]
 80052c2:	2b01      	cmp	r3, #1
 80052c4:	f040 8155 	bne.w	8005572 <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80052c8:	463b      	mov	r3, r7
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	699a      	ldr	r2, [r3, #24]
 80052ce:	463b      	mov	r3, r7
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	691b      	ldr	r3, [r3, #16]
 80052d4:	429a      	cmp	r2, r3
 80052d6:	d90e      	bls.n	80052f6 <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 80052d8:	463b      	mov	r3, r7
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	691b      	ldr	r3, [r3, #16]
 80052de:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 80052e2:	463b      	mov	r3, r7
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	699a      	ldr	r2, [r3, #24]
 80052e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052ec:	1ad2      	subs	r2, r2, r3
 80052ee:	463b      	mov	r3, r7
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	619a      	str	r2, [r3, #24]
 80052f4:	e008      	b.n	8005308 <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 80052f6:	463b      	mov	r3, r7
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	699b      	ldr	r3, [r3, #24]
 80052fc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 8005300:	463b      	mov	r3, r7
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	2200      	movs	r2, #0
 8005306:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005308:	463b      	mov	r3, r7
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	785b      	ldrb	r3, [r3, #1]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d16f      	bne.n	80053f2 <USB_EPStartXfer+0x1054>
 8005312:	1d3b      	adds	r3, r7, #4
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800531a:	1d3b      	adds	r3, r7, #4
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005322:	b29b      	uxth	r3, r3
 8005324:	461a      	mov	r2, r3
 8005326:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800532a:	4413      	add	r3, r2
 800532c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005330:	463b      	mov	r3, r7
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	781b      	ldrb	r3, [r3, #0]
 8005336:	00da      	lsls	r2, r3, #3
 8005338:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800533c:	4413      	add	r3, r2
 800533e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005342:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005346:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800534a:	2b00      	cmp	r3, #0
 800534c:	d116      	bne.n	800537c <USB_EPStartXfer+0xfde>
 800534e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005352:	881b      	ldrh	r3, [r3, #0]
 8005354:	b29b      	uxth	r3, r3
 8005356:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800535a:	b29a      	uxth	r2, r3
 800535c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005360:	801a      	strh	r2, [r3, #0]
 8005362:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005366:	881b      	ldrh	r3, [r3, #0]
 8005368:	b29b      	uxth	r3, r3
 800536a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800536e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005372:	b29a      	uxth	r2, r3
 8005374:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005378:	801a      	strh	r2, [r3, #0]
 800537a:	e05f      	b.n	800543c <USB_EPStartXfer+0x109e>
 800537c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005380:	2b3e      	cmp	r3, #62	; 0x3e
 8005382:	d818      	bhi.n	80053b6 <USB_EPStartXfer+0x1018>
 8005384:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005388:	085b      	lsrs	r3, r3, #1
 800538a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800538e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005392:	f003 0301 	and.w	r3, r3, #1
 8005396:	2b00      	cmp	r3, #0
 8005398:	d004      	beq.n	80053a4 <USB_EPStartXfer+0x1006>
 800539a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800539e:	3301      	adds	r3, #1
 80053a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80053a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053a8:	b29b      	uxth	r3, r3
 80053aa:	029b      	lsls	r3, r3, #10
 80053ac:	b29a      	uxth	r2, r3
 80053ae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80053b2:	801a      	strh	r2, [r3, #0]
 80053b4:	e042      	b.n	800543c <USB_EPStartXfer+0x109e>
 80053b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053ba:	095b      	lsrs	r3, r3, #5
 80053bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80053c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053c4:	f003 031f 	and.w	r3, r3, #31
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d104      	bne.n	80053d6 <USB_EPStartXfer+0x1038>
 80053cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053d0:	3b01      	subs	r3, #1
 80053d2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80053d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053da:	b29b      	uxth	r3, r3
 80053dc:	029b      	lsls	r3, r3, #10
 80053de:	b29b      	uxth	r3, r3
 80053e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053e8:	b29a      	uxth	r2, r3
 80053ea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80053ee:	801a      	strh	r2, [r3, #0]
 80053f0:	e024      	b.n	800543c <USB_EPStartXfer+0x109e>
 80053f2:	463b      	mov	r3, r7
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	785b      	ldrb	r3, [r3, #1]
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	d11f      	bne.n	800543c <USB_EPStartXfer+0x109e>
 80053fc:	1d3b      	adds	r3, r7, #4
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005404:	1d3b      	adds	r3, r7, #4
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800540c:	b29b      	uxth	r3, r3
 800540e:	461a      	mov	r2, r3
 8005410:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005414:	4413      	add	r3, r2
 8005416:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800541a:	463b      	mov	r3, r7
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	781b      	ldrb	r3, [r3, #0]
 8005420:	00da      	lsls	r2, r3, #3
 8005422:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005426:	4413      	add	r3, r2
 8005428:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800542c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005430:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005434:	b29a      	uxth	r2, r3
 8005436:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800543a:	801a      	strh	r2, [r3, #0]
 800543c:	1d3b      	adds	r3, r7, #4
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005444:	463b      	mov	r3, r7
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	785b      	ldrb	r3, [r3, #1]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d16f      	bne.n	800552e <USB_EPStartXfer+0x1190>
 800544e:	1d3b      	adds	r3, r7, #4
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005456:	1d3b      	adds	r3, r7, #4
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800545e:	b29b      	uxth	r3, r3
 8005460:	461a      	mov	r2, r3
 8005462:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005466:	4413      	add	r3, r2
 8005468:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800546c:	463b      	mov	r3, r7
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	781b      	ldrb	r3, [r3, #0]
 8005472:	00da      	lsls	r2, r3, #3
 8005474:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005478:	4413      	add	r3, r2
 800547a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800547e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005482:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005486:	2b00      	cmp	r3, #0
 8005488:	d116      	bne.n	80054b8 <USB_EPStartXfer+0x111a>
 800548a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800548e:	881b      	ldrh	r3, [r3, #0]
 8005490:	b29b      	uxth	r3, r3
 8005492:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005496:	b29a      	uxth	r2, r3
 8005498:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800549c:	801a      	strh	r2, [r3, #0]
 800549e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80054a2:	881b      	ldrh	r3, [r3, #0]
 80054a4:	b29b      	uxth	r3, r3
 80054a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054ae:	b29a      	uxth	r2, r3
 80054b0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80054b4:	801a      	strh	r2, [r3, #0]
 80054b6:	e05e      	b.n	8005576 <USB_EPStartXfer+0x11d8>
 80054b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054bc:	2b3e      	cmp	r3, #62	; 0x3e
 80054be:	d818      	bhi.n	80054f2 <USB_EPStartXfer+0x1154>
 80054c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054c4:	085b      	lsrs	r3, r3, #1
 80054c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80054ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054ce:	f003 0301 	and.w	r3, r3, #1
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d004      	beq.n	80054e0 <USB_EPStartXfer+0x1142>
 80054d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80054da:	3301      	adds	r3, #1
 80054dc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80054e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80054e4:	b29b      	uxth	r3, r3
 80054e6:	029b      	lsls	r3, r3, #10
 80054e8:	b29a      	uxth	r2, r3
 80054ea:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80054ee:	801a      	strh	r2, [r3, #0]
 80054f0:	e041      	b.n	8005576 <USB_EPStartXfer+0x11d8>
 80054f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054f6:	095b      	lsrs	r3, r3, #5
 80054f8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80054fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005500:	f003 031f 	and.w	r3, r3, #31
 8005504:	2b00      	cmp	r3, #0
 8005506:	d104      	bne.n	8005512 <USB_EPStartXfer+0x1174>
 8005508:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800550c:	3b01      	subs	r3, #1
 800550e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005512:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005516:	b29b      	uxth	r3, r3
 8005518:	029b      	lsls	r3, r3, #10
 800551a:	b29b      	uxth	r3, r3
 800551c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005520:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005524:	b29a      	uxth	r2, r3
 8005526:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800552a:	801a      	strh	r2, [r3, #0]
 800552c:	e023      	b.n	8005576 <USB_EPStartXfer+0x11d8>
 800552e:	463b      	mov	r3, r7
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	785b      	ldrb	r3, [r3, #1]
 8005534:	2b01      	cmp	r3, #1
 8005536:	d11e      	bne.n	8005576 <USB_EPStartXfer+0x11d8>
 8005538:	1d3b      	adds	r3, r7, #4
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005540:	b29b      	uxth	r3, r3
 8005542:	461a      	mov	r2, r3
 8005544:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005548:	4413      	add	r3, r2
 800554a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800554e:	463b      	mov	r3, r7
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	781b      	ldrb	r3, [r3, #0]
 8005554:	00da      	lsls	r2, r3, #3
 8005556:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800555a:	4413      	add	r3, r2
 800555c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005560:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005564:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005568:	b29a      	uxth	r2, r3
 800556a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800556e:	801a      	strh	r2, [r3, #0]
 8005570:	e001      	b.n	8005576 <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	e02e      	b.n	80055d4 <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005576:	1d3b      	adds	r3, r7, #4
 8005578:	681a      	ldr	r2, [r3, #0]
 800557a:	463b      	mov	r3, r7
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	781b      	ldrb	r3, [r3, #0]
 8005580:	009b      	lsls	r3, r3, #2
 8005582:	4413      	add	r3, r2
 8005584:	881b      	ldrh	r3, [r3, #0]
 8005586:	b29b      	uxth	r3, r3
 8005588:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800558c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005590:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8005594:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005598:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800559c:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80055a0:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80055a4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80055a8:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80055ac:	1d3b      	adds	r3, r7, #4
 80055ae:	681a      	ldr	r2, [r3, #0]
 80055b0:	463b      	mov	r3, r7
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	781b      	ldrb	r3, [r3, #0]
 80055b6:	009b      	lsls	r3, r3, #2
 80055b8:	441a      	add	r2, r3
 80055ba:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80055be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055ce:	b29b      	uxth	r3, r3
 80055d0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80055d2:	2300      	movs	r3, #0
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}

080055de <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80055de:	b480      	push	{r7}
 80055e0:	b083      	sub	sp, #12
 80055e2:	af00      	add	r7, sp, #0
 80055e4:	6078      	str	r0, [r7, #4]
 80055e6:	460b      	mov	r3, r1
 80055e8:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80055ea:	78fb      	ldrb	r3, [r7, #3]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d103      	bne.n	80055f8 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2280      	movs	r2, #128	; 0x80
 80055f4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80055f8:	2300      	movs	r3, #0
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	370c      	adds	r7, #12
 80055fe:	46bd      	mov	sp, r7
 8005600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005604:	4770      	bx	lr

08005606 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8005606:	b480      	push	{r7}
 8005608:	b085      	sub	sp, #20
 800560a:	af00      	add	r7, sp, #0
 800560c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005614:	b29b      	uxth	r3, r3
 8005616:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8005618:	68fb      	ldr	r3, [r7, #12]
}
 800561a:	4618      	mov	r0, r3
 800561c:	3714      	adds	r7, #20
 800561e:	46bd      	mov	sp, r7
 8005620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005624:	4770      	bx	lr

08005626 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005626:	b480      	push	{r7}
 8005628:	b08d      	sub	sp, #52	; 0x34
 800562a:	af00      	add	r7, sp, #0
 800562c:	60f8      	str	r0, [r7, #12]
 800562e:	60b9      	str	r1, [r7, #8]
 8005630:	4611      	mov	r1, r2
 8005632:	461a      	mov	r2, r3
 8005634:	460b      	mov	r3, r1
 8005636:	80fb      	strh	r3, [r7, #6]
 8005638:	4613      	mov	r3, r2
 800563a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800563c:	88bb      	ldrh	r3, [r7, #4]
 800563e:	3301      	adds	r3, #1
 8005640:	085b      	lsrs	r3, r3, #1
 8005642:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800564c:	88fa      	ldrh	r2, [r7, #6]
 800564e:	69fb      	ldr	r3, [r7, #28]
 8005650:	4413      	add	r3, r2
 8005652:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005656:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8005658:	6a3b      	ldr	r3, [r7, #32]
 800565a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800565c:	e01b      	b.n	8005696 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 800565e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005660:	781b      	ldrb	r3, [r3, #0]
 8005662:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8005664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005666:	3301      	adds	r3, #1
 8005668:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800566a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800566c:	781b      	ldrb	r3, [r3, #0]
 800566e:	b29b      	uxth	r3, r3
 8005670:	021b      	lsls	r3, r3, #8
 8005672:	b29b      	uxth	r3, r3
 8005674:	461a      	mov	r2, r3
 8005676:	69bb      	ldr	r3, [r7, #24]
 8005678:	4313      	orrs	r3, r2
 800567a:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	b29a      	uxth	r2, r3
 8005680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005682:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8005684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005686:	3302      	adds	r3, #2
 8005688:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 800568a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800568c:	3301      	adds	r3, #1
 800568e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8005690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005692:	3b01      	subs	r3, #1
 8005694:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005698:	2b00      	cmp	r3, #0
 800569a:	d1e0      	bne.n	800565e <USB_WritePMA+0x38>
  }
}
 800569c:	bf00      	nop
 800569e:	bf00      	nop
 80056a0:	3734      	adds	r7, #52	; 0x34
 80056a2:	46bd      	mov	sp, r7
 80056a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a8:	4770      	bx	lr

080056aa <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80056aa:	b480      	push	{r7}
 80056ac:	b08b      	sub	sp, #44	; 0x2c
 80056ae:	af00      	add	r7, sp, #0
 80056b0:	60f8      	str	r0, [r7, #12]
 80056b2:	60b9      	str	r1, [r7, #8]
 80056b4:	4611      	mov	r1, r2
 80056b6:	461a      	mov	r2, r3
 80056b8:	460b      	mov	r3, r1
 80056ba:	80fb      	strh	r3, [r7, #6]
 80056bc:	4613      	mov	r3, r2
 80056be:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80056c0:	88bb      	ldrh	r3, [r7, #4]
 80056c2:	085b      	lsrs	r3, r3, #1
 80056c4:	b29b      	uxth	r3, r3
 80056c6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80056d0:	88fa      	ldrh	r2, [r7, #6]
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	4413      	add	r3, r2
 80056d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80056da:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80056dc:	69bb      	ldr	r3, [r7, #24]
 80056de:	627b      	str	r3, [r7, #36]	; 0x24
 80056e0:	e018      	b.n	8005714 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80056e2:	6a3b      	ldr	r3, [r7, #32]
 80056e4:	881b      	ldrh	r3, [r3, #0]
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80056ea:	6a3b      	ldr	r3, [r7, #32]
 80056ec:	3302      	adds	r3, #2
 80056ee:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	b2da      	uxtb	r2, r3
 80056f4:	69fb      	ldr	r3, [r7, #28]
 80056f6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80056f8:	69fb      	ldr	r3, [r7, #28]
 80056fa:	3301      	adds	r3, #1
 80056fc:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	0a1b      	lsrs	r3, r3, #8
 8005702:	b2da      	uxtb	r2, r3
 8005704:	69fb      	ldr	r3, [r7, #28]
 8005706:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005708:	69fb      	ldr	r3, [r7, #28]
 800570a:	3301      	adds	r3, #1
 800570c:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 800570e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005710:	3b01      	subs	r3, #1
 8005712:	627b      	str	r3, [r7, #36]	; 0x24
 8005714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005716:	2b00      	cmp	r3, #0
 8005718:	d1e3      	bne.n	80056e2 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800571a:	88bb      	ldrh	r3, [r7, #4]
 800571c:	f003 0301 	and.w	r3, r3, #1
 8005720:	b29b      	uxth	r3, r3
 8005722:	2b00      	cmp	r3, #0
 8005724:	d007      	beq.n	8005736 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8005726:	6a3b      	ldr	r3, [r7, #32]
 8005728:	881b      	ldrh	r3, [r3, #0]
 800572a:	b29b      	uxth	r3, r3
 800572c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	b2da      	uxtb	r2, r3
 8005732:	69fb      	ldr	r3, [r7, #28]
 8005734:	701a      	strb	r2, [r3, #0]
  }
}
 8005736:	bf00      	nop
 8005738:	372c      	adds	r7, #44	; 0x2c
 800573a:	46bd      	mov	sp, r7
 800573c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005740:	4770      	bx	lr
	...

08005744 <__libc_init_array>:
 8005744:	b570      	push	{r4, r5, r6, lr}
 8005746:	4d0d      	ldr	r5, [pc, #52]	; (800577c <__libc_init_array+0x38>)
 8005748:	4c0d      	ldr	r4, [pc, #52]	; (8005780 <__libc_init_array+0x3c>)
 800574a:	1b64      	subs	r4, r4, r5
 800574c:	10a4      	asrs	r4, r4, #2
 800574e:	2600      	movs	r6, #0
 8005750:	42a6      	cmp	r6, r4
 8005752:	d109      	bne.n	8005768 <__libc_init_array+0x24>
 8005754:	4d0b      	ldr	r5, [pc, #44]	; (8005784 <__libc_init_array+0x40>)
 8005756:	4c0c      	ldr	r4, [pc, #48]	; (8005788 <__libc_init_array+0x44>)
 8005758:	f000 f820 	bl	800579c <_init>
 800575c:	1b64      	subs	r4, r4, r5
 800575e:	10a4      	asrs	r4, r4, #2
 8005760:	2600      	movs	r6, #0
 8005762:	42a6      	cmp	r6, r4
 8005764:	d105      	bne.n	8005772 <__libc_init_array+0x2e>
 8005766:	bd70      	pop	{r4, r5, r6, pc}
 8005768:	f855 3b04 	ldr.w	r3, [r5], #4
 800576c:	4798      	blx	r3
 800576e:	3601      	adds	r6, #1
 8005770:	e7ee      	b.n	8005750 <__libc_init_array+0xc>
 8005772:	f855 3b04 	ldr.w	r3, [r5], #4
 8005776:	4798      	blx	r3
 8005778:	3601      	adds	r6, #1
 800577a:	e7f2      	b.n	8005762 <__libc_init_array+0x1e>
 800577c:	080057ec 	.word	0x080057ec
 8005780:	080057ec 	.word	0x080057ec
 8005784:	080057ec 	.word	0x080057ec
 8005788:	080057f0 	.word	0x080057f0

0800578c <memset>:
 800578c:	4402      	add	r2, r0
 800578e:	4603      	mov	r3, r0
 8005790:	4293      	cmp	r3, r2
 8005792:	d100      	bne.n	8005796 <memset+0xa>
 8005794:	4770      	bx	lr
 8005796:	f803 1b01 	strb.w	r1, [r3], #1
 800579a:	e7f9      	b.n	8005790 <memset+0x4>

0800579c <_init>:
 800579c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800579e:	bf00      	nop
 80057a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057a2:	bc08      	pop	{r3}
 80057a4:	469e      	mov	lr, r3
 80057a6:	4770      	bx	lr

080057a8 <_fini>:
 80057a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057aa:	bf00      	nop
 80057ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057ae:	bc08      	pop	{r3}
 80057b0:	469e      	mov	lr, r3
 80057b2:	4770      	bx	lr
