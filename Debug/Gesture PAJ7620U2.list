
Gesture PAJ7620U2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007094  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000204  08007228  08007228  00017228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800742c  0800742c  00020228  2**0
                  CONTENTS
  4 .ARM          00000000  0800742c  0800742c  00020228  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800742c  0800742c  00020228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800742c  0800742c  0001742c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007430  08007430  00017430  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000228  20000000  08007434  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000538  20000228  0800765c  00020228  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000760  0800765c  00020760  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012c26  00000000  00000000  00020258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002839  00000000  00000000  00032e7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d58  00000000  00000000  000356b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c60  00000000  00000000  00036410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000227f2  00000000  00000000  00037070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010ee7  00000000  00000000  00059862  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cbacf  00000000  00000000  0006a749  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00136218  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d74  00000000  00000000  0013626c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000228 	.word	0x20000228
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08007210 	.word	0x08007210

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000022c 	.word	0x2000022c
 80001d0:	08007210 	.word	0x08007210

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001e4:	b580      	push	{r7, lr}
 80001e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001e8:	f000 fc6a 	bl	8000ac0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001ec:	f000 f812 	bl	8000214 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001f0:	f000 f96c 	bl	80004cc <MX_GPIO_Init>
  MX_RTC_Init();
 80001f4:	f000 f8be 	bl	8000374 <MX_RTC_Init>
  MX_USB_PCD_Init();
 80001f8:	f000 f942 	bl	8000480 <MX_USB_PCD_Init>
  MX_I2C1_Init();
 80001fc:	f000 f87a 	bl	80002f4 <MX_I2C1_Init>
  MX_UART4_Init();
 8000200:	f000 f8de 	bl	80003c0 <MX_UART4_Init>
  MX_USART2_UART_Init();
 8000204:	f000 f90c 	bl	8000420 <MX_USART2_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  initializeRegisters();
 8000208:	f005 ffe0 	bl	80061cc <initializeRegisters>
	  GESTURE_Actions();
 800020c:	f006 f826 	bl	800625c <GESTURE_Actions>
	  initializeRegisters();
 8000210:	e7fa      	b.n	8000208 <main+0x24>
	...

08000214 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b0a6      	sub	sp, #152	; 0x98
 8000218:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800021a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800021e:	2228      	movs	r2, #40	; 0x28
 8000220:	2100      	movs	r1, #0
 8000222:	4618      	mov	r0, r3
 8000224:	f006 fb26 	bl	8006874 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000228:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800022c:	2200      	movs	r2, #0
 800022e:	601a      	str	r2, [r3, #0]
 8000230:	605a      	str	r2, [r3, #4]
 8000232:	609a      	str	r2, [r3, #8]
 8000234:	60da      	str	r2, [r3, #12]
 8000236:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000238:	1d3b      	adds	r3, r7, #4
 800023a:	2258      	movs	r2, #88	; 0x58
 800023c:	2100      	movs	r1, #0
 800023e:	4618      	mov	r0, r3
 8000240:	f006 fb18 	bl	8006874 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8000244:	230b      	movs	r3, #11
 8000246:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000248:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800024c:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800024e:	2301      	movs	r3, #1
 8000250:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000252:	2310      	movs	r3, #16
 8000254:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000258:	2301      	movs	r3, #1
 800025a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800025e:	2302      	movs	r3, #2
 8000260:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000264:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000268:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800026c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000270:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000274:	2300      	movs	r3, #0
 8000276:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800027a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800027e:	4618      	mov	r0, r3
 8000280:	f002 fd26 	bl	8002cd0 <HAL_RCC_OscConfig>
 8000284:	4603      	mov	r3, r0
 8000286:	2b00      	cmp	r3, #0
 8000288:	d001      	beq.n	800028e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800028a:	f000 f9d5 	bl	8000638 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800028e:	230f      	movs	r3, #15
 8000290:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000292:	2302      	movs	r3, #2
 8000294:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000296:	2300      	movs	r3, #0
 8000298:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800029a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800029e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002a0:	2300      	movs	r3, #0
 80002a2:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002a4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80002a8:	2102      	movs	r1, #2
 80002aa:	4618      	mov	r0, r3
 80002ac:	f003 fc26 	bl	8003afc <HAL_RCC_ClockConfig>
 80002b0:	4603      	mov	r3, r0
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d001      	beq.n	80002ba <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80002b6:	f000 f9bf 	bl	8000638 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART2
 80002ba:	4b0d      	ldr	r3, [pc, #52]	; (80002f0 <SystemClock_Config+0xdc>)
 80002bc:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80002be:	2300      	movs	r3, #0
 80002c0:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80002c2:	2300      	movs	r3, #0
 80002c4:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80002c6:	2300      	movs	r3, #0
 80002c8:	623b      	str	r3, [r7, #32]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80002ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80002ce:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80002d0:	2300      	movs	r3, #0
 80002d2:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002d4:	1d3b      	adds	r3, r7, #4
 80002d6:	4618      	mov	r0, r3
 80002d8:	f003 fe46 	bl	8003f68 <HAL_RCCEx_PeriphCLKConfig>
 80002dc:	4603      	mov	r3, r0
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d001      	beq.n	80002e6 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80002e2:	f000 f9a9 	bl	8000638 <Error_Handler>
  }
}
 80002e6:	bf00      	nop
 80002e8:	3798      	adds	r7, #152	; 0x98
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bd80      	pop	{r7, pc}
 80002ee:	bf00      	nop
 80002f0:	0003002a 	.word	0x0003002a

080002f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80002f8:	4b1b      	ldr	r3, [pc, #108]	; (8000368 <MX_I2C1_Init+0x74>)
 80002fa:	4a1c      	ldr	r2, [pc, #112]	; (800036c <MX_I2C1_Init+0x78>)
 80002fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80002fe:	4b1a      	ldr	r3, [pc, #104]	; (8000368 <MX_I2C1_Init+0x74>)
 8000300:	4a1b      	ldr	r2, [pc, #108]	; (8000370 <MX_I2C1_Init+0x7c>)
 8000302:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000304:	4b18      	ldr	r3, [pc, #96]	; (8000368 <MX_I2C1_Init+0x74>)
 8000306:	2200      	movs	r2, #0
 8000308:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800030a:	4b17      	ldr	r3, [pc, #92]	; (8000368 <MX_I2C1_Init+0x74>)
 800030c:	2201      	movs	r2, #1
 800030e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000310:	4b15      	ldr	r3, [pc, #84]	; (8000368 <MX_I2C1_Init+0x74>)
 8000312:	2200      	movs	r2, #0
 8000314:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000316:	4b14      	ldr	r3, [pc, #80]	; (8000368 <MX_I2C1_Init+0x74>)
 8000318:	2200      	movs	r2, #0
 800031a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800031c:	4b12      	ldr	r3, [pc, #72]	; (8000368 <MX_I2C1_Init+0x74>)
 800031e:	2200      	movs	r2, #0
 8000320:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000322:	4b11      	ldr	r3, [pc, #68]	; (8000368 <MX_I2C1_Init+0x74>)
 8000324:	2200      	movs	r2, #0
 8000326:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000328:	4b0f      	ldr	r3, [pc, #60]	; (8000368 <MX_I2C1_Init+0x74>)
 800032a:	2200      	movs	r2, #0
 800032c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800032e:	480e      	ldr	r0, [pc, #56]	; (8000368 <MX_I2C1_Init+0x74>)
 8000330:	f000 ff04 	bl	800113c <HAL_I2C_Init>
 8000334:	4603      	mov	r3, r0
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800033a:	f000 f97d 	bl	8000638 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800033e:	2100      	movs	r1, #0
 8000340:	4809      	ldr	r0, [pc, #36]	; (8000368 <MX_I2C1_Init+0x74>)
 8000342:	f001 fb55 	bl	80019f0 <HAL_I2CEx_ConfigAnalogFilter>
 8000346:	4603      	mov	r3, r0
 8000348:	2b00      	cmp	r3, #0
 800034a:	d001      	beq.n	8000350 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800034c:	f000 f974 	bl	8000638 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000350:	2100      	movs	r1, #0
 8000352:	4805      	ldr	r0, [pc, #20]	; (8000368 <MX_I2C1_Init+0x74>)
 8000354:	f001 fb97 	bl	8001a86 <HAL_I2CEx_ConfigDigitalFilter>
 8000358:	4603      	mov	r3, r0
 800035a:	2b00      	cmp	r3, #0
 800035c:	d001      	beq.n	8000362 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800035e:	f000 f96b 	bl	8000638 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000362:	bf00      	nop
 8000364:	bd80      	pop	{r7, pc}
 8000366:	bf00      	nop
 8000368:	20000250 	.word	0x20000250
 800036c:	40005400 	.word	0x40005400
 8000370:	2000090e 	.word	0x2000090e

08000374 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000378:	4b0f      	ldr	r3, [pc, #60]	; (80003b8 <MX_RTC_Init+0x44>)
 800037a:	4a10      	ldr	r2, [pc, #64]	; (80003bc <MX_RTC_Init+0x48>)
 800037c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800037e:	4b0e      	ldr	r3, [pc, #56]	; (80003b8 <MX_RTC_Init+0x44>)
 8000380:	2200      	movs	r2, #0
 8000382:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000384:	4b0c      	ldr	r3, [pc, #48]	; (80003b8 <MX_RTC_Init+0x44>)
 8000386:	227f      	movs	r2, #127	; 0x7f
 8000388:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800038a:	4b0b      	ldr	r3, [pc, #44]	; (80003b8 <MX_RTC_Init+0x44>)
 800038c:	22ff      	movs	r2, #255	; 0xff
 800038e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000390:	4b09      	ldr	r3, [pc, #36]	; (80003b8 <MX_RTC_Init+0x44>)
 8000392:	2200      	movs	r2, #0
 8000394:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000396:	4b08      	ldr	r3, [pc, #32]	; (80003b8 <MX_RTC_Init+0x44>)
 8000398:	2200      	movs	r2, #0
 800039a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800039c:	4b06      	ldr	r3, [pc, #24]	; (80003b8 <MX_RTC_Init+0x44>)
 800039e:	2200      	movs	r2, #0
 80003a0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80003a2:	4805      	ldr	r0, [pc, #20]	; (80003b8 <MX_RTC_Init+0x44>)
 80003a4:	f003 fffe 	bl	80043a4 <HAL_RTC_Init>
 80003a8:	4603      	mov	r3, r0
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d001      	beq.n	80003b2 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80003ae:	f000 f943 	bl	8000638 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80003b2:	bf00      	nop
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	20000320 	.word	0x20000320
 80003bc:	40002800 	.word	0x40002800

080003c0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80003c4:	4b14      	ldr	r3, [pc, #80]	; (8000418 <MX_UART4_Init+0x58>)
 80003c6:	4a15      	ldr	r2, [pc, #84]	; (800041c <MX_UART4_Init+0x5c>)
 80003c8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80003ca:	4b13      	ldr	r3, [pc, #76]	; (8000418 <MX_UART4_Init+0x58>)
 80003cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80003d0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80003d2:	4b11      	ldr	r3, [pc, #68]	; (8000418 <MX_UART4_Init+0x58>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80003d8:	4b0f      	ldr	r3, [pc, #60]	; (8000418 <MX_UART4_Init+0x58>)
 80003da:	2200      	movs	r2, #0
 80003dc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80003de:	4b0e      	ldr	r3, [pc, #56]	; (8000418 <MX_UART4_Init+0x58>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80003e4:	4b0c      	ldr	r3, [pc, #48]	; (8000418 <MX_UART4_Init+0x58>)
 80003e6:	220c      	movs	r2, #12
 80003e8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003ea:	4b0b      	ldr	r3, [pc, #44]	; (8000418 <MX_UART4_Init+0x58>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80003f0:	4b09      	ldr	r3, [pc, #36]	; (8000418 <MX_UART4_Init+0x58>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003f6:	4b08      	ldr	r3, [pc, #32]	; (8000418 <MX_UART4_Init+0x58>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80003fc:	4b06      	ldr	r3, [pc, #24]	; (8000418 <MX_UART4_Init+0x58>)
 80003fe:	2200      	movs	r2, #0
 8000400:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000402:	4805      	ldr	r0, [pc, #20]	; (8000418 <MX_UART4_Init+0x58>)
 8000404:	f004 f8b3 	bl	800456e <HAL_UART_Init>
 8000408:	4603      	mov	r3, r0
 800040a:	2b00      	cmp	r3, #0
 800040c:	d001      	beq.n	8000412 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 800040e:	f000 f913 	bl	8000638 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000412:	bf00      	nop
 8000414:	bd80      	pop	{r7, pc}
 8000416:	bf00      	nop
 8000418:	20000344 	.word	0x20000344
 800041c:	40004c00 	.word	0x40004c00

08000420 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000424:	4b14      	ldr	r3, [pc, #80]	; (8000478 <MX_USART2_UART_Init+0x58>)
 8000426:	4a15      	ldr	r2, [pc, #84]	; (800047c <MX_USART2_UART_Init+0x5c>)
 8000428:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800042a:	4b13      	ldr	r3, [pc, #76]	; (8000478 <MX_USART2_UART_Init+0x58>)
 800042c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000430:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000432:	4b11      	ldr	r3, [pc, #68]	; (8000478 <MX_USART2_UART_Init+0x58>)
 8000434:	2200      	movs	r2, #0
 8000436:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000438:	4b0f      	ldr	r3, [pc, #60]	; (8000478 <MX_USART2_UART_Init+0x58>)
 800043a:	2200      	movs	r2, #0
 800043c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800043e:	4b0e      	ldr	r3, [pc, #56]	; (8000478 <MX_USART2_UART_Init+0x58>)
 8000440:	2200      	movs	r2, #0
 8000442:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000444:	4b0c      	ldr	r3, [pc, #48]	; (8000478 <MX_USART2_UART_Init+0x58>)
 8000446:	220c      	movs	r2, #12
 8000448:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800044a:	4b0b      	ldr	r3, [pc, #44]	; (8000478 <MX_USART2_UART_Init+0x58>)
 800044c:	2200      	movs	r2, #0
 800044e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000450:	4b09      	ldr	r3, [pc, #36]	; (8000478 <MX_USART2_UART_Init+0x58>)
 8000452:	2200      	movs	r2, #0
 8000454:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000456:	4b08      	ldr	r3, [pc, #32]	; (8000478 <MX_USART2_UART_Init+0x58>)
 8000458:	2200      	movs	r2, #0
 800045a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800045c:	4b06      	ldr	r3, [pc, #24]	; (8000478 <MX_USART2_UART_Init+0x58>)
 800045e:	2200      	movs	r2, #0
 8000460:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000462:	4805      	ldr	r0, [pc, #20]	; (8000478 <MX_USART2_UART_Init+0x58>)
 8000464:	f004 f883 	bl	800456e <HAL_UART_Init>
 8000468:	4603      	mov	r3, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d001      	beq.n	8000472 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800046e:	f000 f8e3 	bl	8000638 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000472:	bf00      	nop
 8000474:	bd80      	pop	{r7, pc}
 8000476:	bf00      	nop
 8000478:	200003c8 	.word	0x200003c8
 800047c:	40004400 	.word	0x40004400

08000480 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000484:	4b0f      	ldr	r3, [pc, #60]	; (80004c4 <MX_USB_PCD_Init+0x44>)
 8000486:	4a10      	ldr	r2, [pc, #64]	; (80004c8 <MX_USB_PCD_Init+0x48>)
 8000488:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800048a:	4b0e      	ldr	r3, [pc, #56]	; (80004c4 <MX_USB_PCD_Init+0x44>)
 800048c:	2208      	movs	r2, #8
 800048e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000490:	4b0c      	ldr	r3, [pc, #48]	; (80004c4 <MX_USB_PCD_Init+0x44>)
 8000492:	2202      	movs	r2, #2
 8000494:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000496:	4b0b      	ldr	r3, [pc, #44]	; (80004c4 <MX_USB_PCD_Init+0x44>)
 8000498:	2202      	movs	r2, #2
 800049a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800049c:	4b09      	ldr	r3, [pc, #36]	; (80004c4 <MX_USB_PCD_Init+0x44>)
 800049e:	2200      	movs	r2, #0
 80004a0:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80004a2:	4b08      	ldr	r3, [pc, #32]	; (80004c4 <MX_USB_PCD_Init+0x44>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80004a8:	4b06      	ldr	r3, [pc, #24]	; (80004c4 <MX_USB_PCD_Init+0x44>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80004ae:	4805      	ldr	r0, [pc, #20]	; (80004c4 <MX_USB_PCD_Init+0x44>)
 80004b0:	f001 fb35 	bl	8001b1e <HAL_PCD_Init>
 80004b4:	4603      	mov	r3, r0
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <MX_USB_PCD_Init+0x3e>
  {
    Error_Handler();
 80004ba:	f000 f8bd 	bl	8000638 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80004be:	bf00      	nop
 80004c0:	bd80      	pop	{r7, pc}
 80004c2:	bf00      	nop
 80004c4:	2000044c 	.word	0x2000044c
 80004c8:	40005c00 	.word	0x40005c00

080004cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b08c      	sub	sp, #48	; 0x30
 80004d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d2:	f107 031c 	add.w	r3, r7, #28
 80004d6:	2200      	movs	r2, #0
 80004d8:	601a      	str	r2, [r3, #0]
 80004da:	605a      	str	r2, [r3, #4]
 80004dc:	609a      	str	r2, [r3, #8]
 80004de:	60da      	str	r2, [r3, #12]
 80004e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004e2:	4b4f      	ldr	r3, [pc, #316]	; (8000620 <MX_GPIO_Init+0x154>)
 80004e4:	695b      	ldr	r3, [r3, #20]
 80004e6:	4a4e      	ldr	r2, [pc, #312]	; (8000620 <MX_GPIO_Init+0x154>)
 80004e8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80004ec:	6153      	str	r3, [r2, #20]
 80004ee:	4b4c      	ldr	r3, [pc, #304]	; (8000620 <MX_GPIO_Init+0x154>)
 80004f0:	695b      	ldr	r3, [r3, #20]
 80004f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80004f6:	61bb      	str	r3, [r7, #24]
 80004f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004fa:	4b49      	ldr	r3, [pc, #292]	; (8000620 <MX_GPIO_Init+0x154>)
 80004fc:	695b      	ldr	r3, [r3, #20]
 80004fe:	4a48      	ldr	r2, [pc, #288]	; (8000620 <MX_GPIO_Init+0x154>)
 8000500:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000504:	6153      	str	r3, [r2, #20]
 8000506:	4b46      	ldr	r3, [pc, #280]	; (8000620 <MX_GPIO_Init+0x154>)
 8000508:	695b      	ldr	r3, [r3, #20]
 800050a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800050e:	617b      	str	r3, [r7, #20]
 8000510:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000512:	4b43      	ldr	r3, [pc, #268]	; (8000620 <MX_GPIO_Init+0x154>)
 8000514:	695b      	ldr	r3, [r3, #20]
 8000516:	4a42      	ldr	r2, [pc, #264]	; (8000620 <MX_GPIO_Init+0x154>)
 8000518:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800051c:	6153      	str	r3, [r2, #20]
 800051e:	4b40      	ldr	r3, [pc, #256]	; (8000620 <MX_GPIO_Init+0x154>)
 8000520:	695b      	ldr	r3, [r3, #20]
 8000522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000526:	613b      	str	r3, [r7, #16]
 8000528:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800052a:	4b3d      	ldr	r3, [pc, #244]	; (8000620 <MX_GPIO_Init+0x154>)
 800052c:	695b      	ldr	r3, [r3, #20]
 800052e:	4a3c      	ldr	r2, [pc, #240]	; (8000620 <MX_GPIO_Init+0x154>)
 8000530:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000534:	6153      	str	r3, [r2, #20]
 8000536:	4b3a      	ldr	r3, [pc, #232]	; (8000620 <MX_GPIO_Init+0x154>)
 8000538:	695b      	ldr	r3, [r3, #20]
 800053a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800053e:	60fb      	str	r3, [r7, #12]
 8000540:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000542:	4b37      	ldr	r3, [pc, #220]	; (8000620 <MX_GPIO_Init+0x154>)
 8000544:	695b      	ldr	r3, [r3, #20]
 8000546:	4a36      	ldr	r2, [pc, #216]	; (8000620 <MX_GPIO_Init+0x154>)
 8000548:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800054c:	6153      	str	r3, [r2, #20]
 800054e:	4b34      	ldr	r3, [pc, #208]	; (8000620 <MX_GPIO_Init+0x154>)
 8000550:	695b      	ldr	r3, [r3, #20]
 8000552:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000556:	60bb      	str	r3, [r7, #8]
 8000558:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800055a:	4b31      	ldr	r3, [pc, #196]	; (8000620 <MX_GPIO_Init+0x154>)
 800055c:	695b      	ldr	r3, [r3, #20]
 800055e:	4a30      	ldr	r2, [pc, #192]	; (8000620 <MX_GPIO_Init+0x154>)
 8000560:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000564:	6153      	str	r3, [r2, #20]
 8000566:	4b2e      	ldr	r3, [pc, #184]	; (8000620 <MX_GPIO_Init+0x154>)
 8000568:	695b      	ldr	r3, [r3, #20]
 800056a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800056e:	607b      	str	r3, [r7, #4]
 8000570:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000572:	2200      	movs	r2, #0
 8000574:	f244 0181 	movw	r1, #16513	; 0x4081
 8000578:	482a      	ldr	r0, [pc, #168]	; (8000624 <MX_GPIO_Init+0x158>)
 800057a:	f000 fdc7 	bl	800110c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800057e:	2200      	movs	r2, #0
 8000580:	2140      	movs	r1, #64	; 0x40
 8000582:	4829      	ldr	r0, [pc, #164]	; (8000628 <MX_GPIO_Init+0x15c>)
 8000584:	f000 fdc2 	bl	800110c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000588:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800058c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800058e:	4b27      	ldr	r3, [pc, #156]	; (800062c <MX_GPIO_Init+0x160>)
 8000590:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000592:	2300      	movs	r3, #0
 8000594:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000596:	f107 031c 	add.w	r3, r7, #28
 800059a:	4619      	mov	r1, r3
 800059c:	4824      	ldr	r0, [pc, #144]	; (8000630 <MX_GPIO_Init+0x164>)
 800059e:	f000 fc2b 	bl	8000df8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80005a2:	f244 0381 	movw	r3, #16513	; 0x4081
 80005a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005a8:	2301      	movs	r3, #1
 80005aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ac:	2300      	movs	r3, #0
 80005ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005b0:	2300      	movs	r3, #0
 80005b2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005b4:	f107 031c 	add.w	r3, r7, #28
 80005b8:	4619      	mov	r1, r3
 80005ba:	481a      	ldr	r0, [pc, #104]	; (8000624 <MX_GPIO_Init+0x158>)
 80005bc:	f000 fc1c 	bl	8000df8 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80005c0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80005c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005c6:	2302      	movs	r3, #2
 80005c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ca:	2300      	movs	r3, #0
 80005cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005ce:	2303      	movs	r3, #3
 80005d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80005d2:	2307      	movs	r3, #7
 80005d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80005d6:	f107 031c 	add.w	r3, r7, #28
 80005da:	4619      	mov	r1, r3
 80005dc:	4815      	ldr	r0, [pc, #84]	; (8000634 <MX_GPIO_Init+0x168>)
 80005de:	f000 fc0b 	bl	8000df8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80005e2:	2340      	movs	r3, #64	; 0x40
 80005e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005e6:	2301      	movs	r3, #1
 80005e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ea:	2300      	movs	r3, #0
 80005ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ee:	2300      	movs	r3, #0
 80005f0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80005f2:	f107 031c 	add.w	r3, r7, #28
 80005f6:	4619      	mov	r1, r3
 80005f8:	480b      	ldr	r0, [pc, #44]	; (8000628 <MX_GPIO_Init+0x15c>)
 80005fa:	f000 fbfd 	bl	8000df8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80005fe:	2380      	movs	r3, #128	; 0x80
 8000600:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000602:	2300      	movs	r3, #0
 8000604:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000606:	2300      	movs	r3, #0
 8000608:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800060a:	f107 031c 	add.w	r3, r7, #28
 800060e:	4619      	mov	r1, r3
 8000610:	4805      	ldr	r0, [pc, #20]	; (8000628 <MX_GPIO_Init+0x15c>)
 8000612:	f000 fbf1 	bl	8000df8 <HAL_GPIO_Init>

}
 8000616:	bf00      	nop
 8000618:	3730      	adds	r7, #48	; 0x30
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	40021000 	.word	0x40021000
 8000624:	48000400 	.word	0x48000400
 8000628:	48001800 	.word	0x48001800
 800062c:	10110000 	.word	0x10110000
 8000630:	48000800 	.word	0x48000800
 8000634:	48000c00 	.word	0x48000c00

08000638 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800063c:	b672      	cpsid	i
}
 800063e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000640:	e7fe      	b.n	8000640 <Error_Handler+0x8>
	...

08000644 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000644:	b480      	push	{r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800064a:	4b0f      	ldr	r3, [pc, #60]	; (8000688 <HAL_MspInit+0x44>)
 800064c:	699b      	ldr	r3, [r3, #24]
 800064e:	4a0e      	ldr	r2, [pc, #56]	; (8000688 <HAL_MspInit+0x44>)
 8000650:	f043 0301 	orr.w	r3, r3, #1
 8000654:	6193      	str	r3, [r2, #24]
 8000656:	4b0c      	ldr	r3, [pc, #48]	; (8000688 <HAL_MspInit+0x44>)
 8000658:	699b      	ldr	r3, [r3, #24]
 800065a:	f003 0301 	and.w	r3, r3, #1
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000662:	4b09      	ldr	r3, [pc, #36]	; (8000688 <HAL_MspInit+0x44>)
 8000664:	69db      	ldr	r3, [r3, #28]
 8000666:	4a08      	ldr	r2, [pc, #32]	; (8000688 <HAL_MspInit+0x44>)
 8000668:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800066c:	61d3      	str	r3, [r2, #28]
 800066e:	4b06      	ldr	r3, [pc, #24]	; (8000688 <HAL_MspInit+0x44>)
 8000670:	69db      	ldr	r3, [r3, #28]
 8000672:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000676:	603b      	str	r3, [r7, #0]
 8000678:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800067a:	bf00      	nop
 800067c:	370c      	adds	r7, #12
 800067e:	46bd      	mov	sp, r7
 8000680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop
 8000688:	40021000 	.word	0x40021000

0800068c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b08a      	sub	sp, #40	; 0x28
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000694:	f107 0314 	add.w	r3, r7, #20
 8000698:	2200      	movs	r2, #0
 800069a:	601a      	str	r2, [r3, #0]
 800069c:	605a      	str	r2, [r3, #4]
 800069e:	609a      	str	r2, [r3, #8]
 80006a0:	60da      	str	r2, [r3, #12]
 80006a2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a17      	ldr	r2, [pc, #92]	; (8000708 <HAL_I2C_MspInit+0x7c>)
 80006aa:	4293      	cmp	r3, r2
 80006ac:	d128      	bne.n	8000700 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ae:	4b17      	ldr	r3, [pc, #92]	; (800070c <HAL_I2C_MspInit+0x80>)
 80006b0:	695b      	ldr	r3, [r3, #20]
 80006b2:	4a16      	ldr	r2, [pc, #88]	; (800070c <HAL_I2C_MspInit+0x80>)
 80006b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80006b8:	6153      	str	r3, [r2, #20]
 80006ba:	4b14      	ldr	r3, [pc, #80]	; (800070c <HAL_I2C_MspInit+0x80>)
 80006bc:	695b      	ldr	r3, [r3, #20]
 80006be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80006c2:	613b      	str	r3, [r7, #16]
 80006c4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80006c6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80006ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006cc:	2312      	movs	r3, #18
 80006ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006d0:	2301      	movs	r3, #1
 80006d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006d4:	2303      	movs	r3, #3
 80006d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80006d8:	2304      	movs	r3, #4
 80006da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006dc:	f107 0314 	add.w	r3, r7, #20
 80006e0:	4619      	mov	r1, r3
 80006e2:	480b      	ldr	r0, [pc, #44]	; (8000710 <HAL_I2C_MspInit+0x84>)
 80006e4:	f000 fb88 	bl	8000df8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80006e8:	4b08      	ldr	r3, [pc, #32]	; (800070c <HAL_I2C_MspInit+0x80>)
 80006ea:	69db      	ldr	r3, [r3, #28]
 80006ec:	4a07      	ldr	r2, [pc, #28]	; (800070c <HAL_I2C_MspInit+0x80>)
 80006ee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006f2:	61d3      	str	r3, [r2, #28]
 80006f4:	4b05      	ldr	r3, [pc, #20]	; (800070c <HAL_I2C_MspInit+0x80>)
 80006f6:	69db      	ldr	r3, [r3, #28]
 80006f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006fc:	60fb      	str	r3, [r7, #12]
 80006fe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000700:	bf00      	nop
 8000702:	3728      	adds	r7, #40	; 0x28
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	40005400 	.word	0x40005400
 800070c:	40021000 	.word	0x40021000
 8000710:	48000400 	.word	0x48000400

08000714 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000714:	b480      	push	{r7}
 8000716:	b085      	sub	sp, #20
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4a0d      	ldr	r2, [pc, #52]	; (8000758 <HAL_RTC_MspInit+0x44>)
 8000722:	4293      	cmp	r3, r2
 8000724:	d111      	bne.n	800074a <HAL_RTC_MspInit+0x36>
 8000726:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800072a:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	fa93 f3a3 	rbit	r3, r3
 8000732:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000734:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000736:	fab3 f383 	clz	r3, r3
 800073a:	b2db      	uxtb	r3, r3
 800073c:	461a      	mov	r2, r3
 800073e:	4b07      	ldr	r3, [pc, #28]	; (800075c <HAL_RTC_MspInit+0x48>)
 8000740:	4413      	add	r3, r2
 8000742:	009b      	lsls	r3, r3, #2
 8000744:	461a      	mov	r2, r3
 8000746:	2301      	movs	r3, #1
 8000748:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800074a:	bf00      	nop
 800074c:	3714      	adds	r7, #20
 800074e:	46bd      	mov	sp, r7
 8000750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop
 8000758:	40002800 	.word	0x40002800
 800075c:	10908100 	.word	0x10908100

08000760 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b08c      	sub	sp, #48	; 0x30
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000768:	f107 031c 	add.w	r3, r7, #28
 800076c:	2200      	movs	r2, #0
 800076e:	601a      	str	r2, [r3, #0]
 8000770:	605a      	str	r2, [r3, #4]
 8000772:	609a      	str	r2, [r3, #8]
 8000774:	60da      	str	r2, [r3, #12]
 8000776:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4a2f      	ldr	r2, [pc, #188]	; (800083c <HAL_UART_MspInit+0xdc>)
 800077e:	4293      	cmp	r3, r2
 8000780:	d129      	bne.n	80007d6 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000782:	4b2f      	ldr	r3, [pc, #188]	; (8000840 <HAL_UART_MspInit+0xe0>)
 8000784:	69db      	ldr	r3, [r3, #28]
 8000786:	4a2e      	ldr	r2, [pc, #184]	; (8000840 <HAL_UART_MspInit+0xe0>)
 8000788:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800078c:	61d3      	str	r3, [r2, #28]
 800078e:	4b2c      	ldr	r3, [pc, #176]	; (8000840 <HAL_UART_MspInit+0xe0>)
 8000790:	69db      	ldr	r3, [r3, #28]
 8000792:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000796:	61bb      	str	r3, [r7, #24]
 8000798:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800079a:	4b29      	ldr	r3, [pc, #164]	; (8000840 <HAL_UART_MspInit+0xe0>)
 800079c:	695b      	ldr	r3, [r3, #20]
 800079e:	4a28      	ldr	r2, [pc, #160]	; (8000840 <HAL_UART_MspInit+0xe0>)
 80007a0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80007a4:	6153      	str	r3, [r2, #20]
 80007a6:	4b26      	ldr	r3, [pc, #152]	; (8000840 <HAL_UART_MspInit+0xe0>)
 80007a8:	695b      	ldr	r3, [r3, #20]
 80007aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80007ae:	617b      	str	r3, [r7, #20]
 80007b0:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80007b2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80007b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b8:	2302      	movs	r3, #2
 80007ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007bc:	2300      	movs	r3, #0
 80007be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007c0:	2303      	movs	r3, #3
 80007c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 80007c4:	2305      	movs	r3, #5
 80007c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007c8:	f107 031c 	add.w	r3, r7, #28
 80007cc:	4619      	mov	r1, r3
 80007ce:	481d      	ldr	r0, [pc, #116]	; (8000844 <HAL_UART_MspInit+0xe4>)
 80007d0:	f000 fb12 	bl	8000df8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80007d4:	e02d      	b.n	8000832 <HAL_UART_MspInit+0xd2>
  else if(huart->Instance==USART2)
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	4a1b      	ldr	r2, [pc, #108]	; (8000848 <HAL_UART_MspInit+0xe8>)
 80007dc:	4293      	cmp	r3, r2
 80007de:	d128      	bne.n	8000832 <HAL_UART_MspInit+0xd2>
    __HAL_RCC_USART2_CLK_ENABLE();
 80007e0:	4b17      	ldr	r3, [pc, #92]	; (8000840 <HAL_UART_MspInit+0xe0>)
 80007e2:	69db      	ldr	r3, [r3, #28]
 80007e4:	4a16      	ldr	r2, [pc, #88]	; (8000840 <HAL_UART_MspInit+0xe0>)
 80007e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007ea:	61d3      	str	r3, [r2, #28]
 80007ec:	4b14      	ldr	r3, [pc, #80]	; (8000840 <HAL_UART_MspInit+0xe0>)
 80007ee:	69db      	ldr	r3, [r3, #28]
 80007f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007f4:	613b      	str	r3, [r7, #16]
 80007f6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f8:	4b11      	ldr	r3, [pc, #68]	; (8000840 <HAL_UART_MspInit+0xe0>)
 80007fa:	695b      	ldr	r3, [r3, #20]
 80007fc:	4a10      	ldr	r2, [pc, #64]	; (8000840 <HAL_UART_MspInit+0xe0>)
 80007fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000802:	6153      	str	r3, [r2, #20]
 8000804:	4b0e      	ldr	r3, [pc, #56]	; (8000840 <HAL_UART_MspInit+0xe0>)
 8000806:	695b      	ldr	r3, [r3, #20]
 8000808:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800080c:	60fb      	str	r3, [r7, #12]
 800080e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000810:	230c      	movs	r3, #12
 8000812:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000814:	2302      	movs	r3, #2
 8000816:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000818:	2300      	movs	r3, #0
 800081a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800081c:	2303      	movs	r3, #3
 800081e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000820:	2307      	movs	r3, #7
 8000822:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000824:	f107 031c 	add.w	r3, r7, #28
 8000828:	4619      	mov	r1, r3
 800082a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800082e:	f000 fae3 	bl	8000df8 <HAL_GPIO_Init>
}
 8000832:	bf00      	nop
 8000834:	3730      	adds	r7, #48	; 0x30
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	40004c00 	.word	0x40004c00
 8000840:	40021000 	.word	0x40021000
 8000844:	48000800 	.word	0x48000800
 8000848:	40004400 	.word	0x40004400

0800084c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b084      	sub	sp, #16
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4a0d      	ldr	r2, [pc, #52]	; (8000890 <HAL_PCD_MspInit+0x44>)
 800085a:	4293      	cmp	r3, r2
 800085c:	d113      	bne.n	8000886 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800085e:	4b0d      	ldr	r3, [pc, #52]	; (8000894 <HAL_PCD_MspInit+0x48>)
 8000860:	69db      	ldr	r3, [r3, #28]
 8000862:	4a0c      	ldr	r2, [pc, #48]	; (8000894 <HAL_PCD_MspInit+0x48>)
 8000864:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000868:	61d3      	str	r3, [r2, #28]
 800086a:	4b0a      	ldr	r3, [pc, #40]	; (8000894 <HAL_PCD_MspInit+0x48>)
 800086c:	69db      	ldr	r3, [r3, #28]
 800086e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000872:	60fb      	str	r3, [r7, #12]
 8000874:	68fb      	ldr	r3, [r7, #12]
    /* USB interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 8000876:	2200      	movs	r2, #0
 8000878:	2100      	movs	r1, #0
 800087a:	2014      	movs	r0, #20
 800087c:	f000 fa85 	bl	8000d8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 8000880:	2014      	movs	r0, #20
 8000882:	f000 fa9e 	bl	8000dc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000886:	bf00      	nop
 8000888:	3710      	adds	r7, #16
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	40005c00 	.word	0x40005c00
 8000894:	40021000 	.word	0x40021000

08000898 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800089c:	e7fe      	b.n	800089c <NMI_Handler+0x4>

0800089e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800089e:	b480      	push	{r7}
 80008a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008a2:	e7fe      	b.n	80008a2 <HardFault_Handler+0x4>

080008a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008a8:	e7fe      	b.n	80008a8 <MemManage_Handler+0x4>

080008aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008aa:	b480      	push	{r7}
 80008ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008ae:	e7fe      	b.n	80008ae <BusFault_Handler+0x4>

080008b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008b4:	e7fe      	b.n	80008b4 <UsageFault_Handler+0x4>

080008b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008b6:	b480      	push	{r7}
 80008b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008ba:	bf00      	nop
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr

080008c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008c8:	bf00      	nop
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr

080008d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008d2:	b480      	push	{r7}
 80008d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008d6:	bf00      	nop
 80008d8:	46bd      	mov	sp, r7
 80008da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008de:	4770      	bx	lr

080008e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008e4:	f000 f932 	bl	8000b4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008e8:	bf00      	nop
 80008ea:	bd80      	pop	{r7, pc}

080008ec <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80008f0:	4802      	ldr	r0, [pc, #8]	; (80008fc <USB_LP_CAN_RX0_IRQHandler+0x10>)
 80008f2:	f001 f9f2 	bl	8001cda <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 80008f6:	bf00      	nop
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	2000044c 	.word	0x2000044c

08000900 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b086      	sub	sp, #24
 8000904:	af00      	add	r7, sp, #0
 8000906:	60f8      	str	r0, [r7, #12]
 8000908:	60b9      	str	r1, [r7, #8]
 800090a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800090c:	2300      	movs	r3, #0
 800090e:	617b      	str	r3, [r7, #20]
 8000910:	e00a      	b.n	8000928 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000912:	f3af 8000 	nop.w
 8000916:	4601      	mov	r1, r0
 8000918:	68bb      	ldr	r3, [r7, #8]
 800091a:	1c5a      	adds	r2, r3, #1
 800091c:	60ba      	str	r2, [r7, #8]
 800091e:	b2ca      	uxtb	r2, r1
 8000920:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000922:	697b      	ldr	r3, [r7, #20]
 8000924:	3301      	adds	r3, #1
 8000926:	617b      	str	r3, [r7, #20]
 8000928:	697a      	ldr	r2, [r7, #20]
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	429a      	cmp	r2, r3
 800092e:	dbf0      	blt.n	8000912 <_read+0x12>
	}

return len;
 8000930:	687b      	ldr	r3, [r7, #4]
}
 8000932:	4618      	mov	r0, r3
 8000934:	3718      	adds	r7, #24
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}

0800093a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800093a:	b580      	push	{r7, lr}
 800093c:	b086      	sub	sp, #24
 800093e:	af00      	add	r7, sp, #0
 8000940:	60f8      	str	r0, [r7, #12]
 8000942:	60b9      	str	r1, [r7, #8]
 8000944:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000946:	2300      	movs	r3, #0
 8000948:	617b      	str	r3, [r7, #20]
 800094a:	e009      	b.n	8000960 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800094c:	68bb      	ldr	r3, [r7, #8]
 800094e:	1c5a      	adds	r2, r3, #1
 8000950:	60ba      	str	r2, [r7, #8]
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	4618      	mov	r0, r3
 8000956:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800095a:	697b      	ldr	r3, [r7, #20]
 800095c:	3301      	adds	r3, #1
 800095e:	617b      	str	r3, [r7, #20]
 8000960:	697a      	ldr	r2, [r7, #20]
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	429a      	cmp	r2, r3
 8000966:	dbf1      	blt.n	800094c <_write+0x12>
	}
	return len;
 8000968:	687b      	ldr	r3, [r7, #4]
}
 800096a:	4618      	mov	r0, r3
 800096c:	3718      	adds	r7, #24
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}

08000972 <_close>:

int _close(int file)
{
 8000972:	b480      	push	{r7}
 8000974:	b083      	sub	sp, #12
 8000976:	af00      	add	r7, sp, #0
 8000978:	6078      	str	r0, [r7, #4]
	return -1;
 800097a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800097e:	4618      	mov	r0, r3
 8000980:	370c      	adds	r7, #12
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr

0800098a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800098a:	b480      	push	{r7}
 800098c:	b083      	sub	sp, #12
 800098e:	af00      	add	r7, sp, #0
 8000990:	6078      	str	r0, [r7, #4]
 8000992:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800099a:	605a      	str	r2, [r3, #4]
	return 0;
 800099c:	2300      	movs	r3, #0
}
 800099e:	4618      	mov	r0, r3
 80009a0:	370c      	adds	r7, #12
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr

080009aa <_isatty>:

int _isatty(int file)
{
 80009aa:	b480      	push	{r7}
 80009ac:	b083      	sub	sp, #12
 80009ae:	af00      	add	r7, sp, #0
 80009b0:	6078      	str	r0, [r7, #4]
	return 1;
 80009b2:	2301      	movs	r3, #1
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	370c      	adds	r7, #12
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr

080009c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b085      	sub	sp, #20
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	60f8      	str	r0, [r7, #12]
 80009c8:	60b9      	str	r1, [r7, #8]
 80009ca:	607a      	str	r2, [r7, #4]
	return 0;
 80009cc:	2300      	movs	r3, #0
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	3714      	adds	r7, #20
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr
	...

080009dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b086      	sub	sp, #24
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009e4:	4a14      	ldr	r2, [pc, #80]	; (8000a38 <_sbrk+0x5c>)
 80009e6:	4b15      	ldr	r3, [pc, #84]	; (8000a3c <_sbrk+0x60>)
 80009e8:	1ad3      	subs	r3, r2, r3
 80009ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009ec:	697b      	ldr	r3, [r7, #20]
 80009ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009f0:	4b13      	ldr	r3, [pc, #76]	; (8000a40 <_sbrk+0x64>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d102      	bne.n	80009fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009f8:	4b11      	ldr	r3, [pc, #68]	; (8000a40 <_sbrk+0x64>)
 80009fa:	4a12      	ldr	r2, [pc, #72]	; (8000a44 <_sbrk+0x68>)
 80009fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009fe:	4b10      	ldr	r3, [pc, #64]	; (8000a40 <_sbrk+0x64>)
 8000a00:	681a      	ldr	r2, [r3, #0]
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	4413      	add	r3, r2
 8000a06:	693a      	ldr	r2, [r7, #16]
 8000a08:	429a      	cmp	r2, r3
 8000a0a:	d207      	bcs.n	8000a1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a0c:	f005 ff08 	bl	8006820 <__errno>
 8000a10:	4603      	mov	r3, r0
 8000a12:	220c      	movs	r2, #12
 8000a14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a16:	f04f 33ff 	mov.w	r3, #4294967295
 8000a1a:	e009      	b.n	8000a30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a1c:	4b08      	ldr	r3, [pc, #32]	; (8000a40 <_sbrk+0x64>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a22:	4b07      	ldr	r3, [pc, #28]	; (8000a40 <_sbrk+0x64>)
 8000a24:	681a      	ldr	r2, [r3, #0]
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	4413      	add	r3, r2
 8000a2a:	4a05      	ldr	r2, [pc, #20]	; (8000a40 <_sbrk+0x64>)
 8000a2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a2e:	68fb      	ldr	r3, [r7, #12]
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	3718      	adds	r7, #24
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	20010000 	.word	0x20010000
 8000a3c:	00000400 	.word	0x00000400
 8000a40:	20000244 	.word	0x20000244
 8000a44:	20000760 	.word	0x20000760

08000a48 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a4c:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <SystemInit+0x20>)
 8000a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a52:	4a05      	ldr	r2, [pc, #20]	; (8000a68 <SystemInit+0x20>)
 8000a54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a5c:	bf00      	nop
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	e000ed00 	.word	0xe000ed00

08000a6c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000aa4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a70:	480d      	ldr	r0, [pc, #52]	; (8000aa8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a72:	490e      	ldr	r1, [pc, #56]	; (8000aac <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a74:	4a0e      	ldr	r2, [pc, #56]	; (8000ab0 <LoopForever+0xe>)
  movs r3, #0
 8000a76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a78:	e002      	b.n	8000a80 <LoopCopyDataInit>

08000a7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a7e:	3304      	adds	r3, #4

08000a80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a84:	d3f9      	bcc.n	8000a7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a86:	4a0b      	ldr	r2, [pc, #44]	; (8000ab4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a88:	4c0b      	ldr	r4, [pc, #44]	; (8000ab8 <LoopForever+0x16>)
  movs r3, #0
 8000a8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a8c:	e001      	b.n	8000a92 <LoopFillZerobss>

08000a8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a90:	3204      	adds	r2, #4

08000a92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a94:	d3fb      	bcc.n	8000a8e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a96:	f7ff ffd7 	bl	8000a48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a9a:	f005 fec7 	bl	800682c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a9e:	f7ff fba1 	bl	80001e4 <main>

08000aa2 <LoopForever>:

LoopForever:
    b LoopForever
 8000aa2:	e7fe      	b.n	8000aa2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000aa4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000aa8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000aac:	20000228 	.word	0x20000228
  ldr r2, =_sidata
 8000ab0:	08007434 	.word	0x08007434
  ldr r2, =_sbss
 8000ab4:	20000228 	.word	0x20000228
  ldr r4, =_ebss
 8000ab8:	20000760 	.word	0x20000760

08000abc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000abc:	e7fe      	b.n	8000abc <ADC1_2_IRQHandler>
	...

08000ac0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ac4:	4b08      	ldr	r3, [pc, #32]	; (8000ae8 <HAL_Init+0x28>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a07      	ldr	r2, [pc, #28]	; (8000ae8 <HAL_Init+0x28>)
 8000aca:	f043 0310 	orr.w	r3, r3, #16
 8000ace:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ad0:	2003      	movs	r0, #3
 8000ad2:	f000 f94f 	bl	8000d74 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ad6:	2000      	movs	r0, #0
 8000ad8:	f000 f808 	bl	8000aec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000adc:	f7ff fdb2 	bl	8000644 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ae0:	2300      	movs	r3, #0
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	40022000 	.word	0x40022000

08000aec <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000af4:	4b12      	ldr	r3, [pc, #72]	; (8000b40 <HAL_InitTick+0x54>)
 8000af6:	681a      	ldr	r2, [r3, #0]
 8000af8:	4b12      	ldr	r3, [pc, #72]	; (8000b44 <HAL_InitTick+0x58>)
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	4619      	mov	r1, r3
 8000afe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b02:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f000 f967 	bl	8000dde <HAL_SYSTICK_Config>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b16:	2301      	movs	r3, #1
 8000b18:	e00e      	b.n	8000b38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	2b0f      	cmp	r3, #15
 8000b1e:	d80a      	bhi.n	8000b36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b20:	2200      	movs	r2, #0
 8000b22:	6879      	ldr	r1, [r7, #4]
 8000b24:	f04f 30ff 	mov.w	r0, #4294967295
 8000b28:	f000 f92f 	bl	8000d8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b2c:	4a06      	ldr	r2, [pc, #24]	; (8000b48 <HAL_InitTick+0x5c>)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000b32:	2300      	movs	r3, #0
 8000b34:	e000      	b.n	8000b38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b36:	2301      	movs	r3, #1
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	3708      	adds	r7, #8
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	20000000 	.word	0x20000000
 8000b44:	20000008 	.word	0x20000008
 8000b48:	20000004 	.word	0x20000004

08000b4c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b50:	4b06      	ldr	r3, [pc, #24]	; (8000b6c <HAL_IncTick+0x20>)
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	461a      	mov	r2, r3
 8000b56:	4b06      	ldr	r3, [pc, #24]	; (8000b70 <HAL_IncTick+0x24>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	4413      	add	r3, r2
 8000b5c:	4a04      	ldr	r2, [pc, #16]	; (8000b70 <HAL_IncTick+0x24>)
 8000b5e:	6013      	str	r3, [r2, #0]
}
 8000b60:	bf00      	nop
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	20000008 	.word	0x20000008
 8000b70:	20000738 	.word	0x20000738

08000b74 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  return uwTick;  
 8000b78:	4b03      	ldr	r3, [pc, #12]	; (8000b88 <HAL_GetTick+0x14>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	20000738 	.word	0x20000738

08000b8c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b084      	sub	sp, #16
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b94:	f7ff ffee 	bl	8000b74 <HAL_GetTick>
 8000b98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ba4:	d005      	beq.n	8000bb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ba6:	4b0a      	ldr	r3, [pc, #40]	; (8000bd0 <HAL_Delay+0x44>)
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	461a      	mov	r2, r3
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	4413      	add	r3, r2
 8000bb0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000bb2:	bf00      	nop
 8000bb4:	f7ff ffde 	bl	8000b74 <HAL_GetTick>
 8000bb8:	4602      	mov	r2, r0
 8000bba:	68bb      	ldr	r3, [r7, #8]
 8000bbc:	1ad3      	subs	r3, r2, r3
 8000bbe:	68fa      	ldr	r2, [r7, #12]
 8000bc0:	429a      	cmp	r2, r3
 8000bc2:	d8f7      	bhi.n	8000bb4 <HAL_Delay+0x28>
  {
  }
}
 8000bc4:	bf00      	nop
 8000bc6:	bf00      	nop
 8000bc8:	3710      	adds	r7, #16
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	20000008 	.word	0x20000008

08000bd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b085      	sub	sp, #20
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	f003 0307 	and.w	r3, r3, #7
 8000be2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000be4:	4b0c      	ldr	r3, [pc, #48]	; (8000c18 <__NVIC_SetPriorityGrouping+0x44>)
 8000be6:	68db      	ldr	r3, [r3, #12]
 8000be8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bea:	68ba      	ldr	r2, [r7, #8]
 8000bec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bf8:	68bb      	ldr	r3, [r7, #8]
 8000bfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bfc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c06:	4a04      	ldr	r2, [pc, #16]	; (8000c18 <__NVIC_SetPriorityGrouping+0x44>)
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	60d3      	str	r3, [r2, #12]
}
 8000c0c:	bf00      	nop
 8000c0e:	3714      	adds	r7, #20
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr
 8000c18:	e000ed00 	.word	0xe000ed00

08000c1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c20:	4b04      	ldr	r3, [pc, #16]	; (8000c34 <__NVIC_GetPriorityGrouping+0x18>)
 8000c22:	68db      	ldr	r3, [r3, #12]
 8000c24:	0a1b      	lsrs	r3, r3, #8
 8000c26:	f003 0307 	and.w	r3, r3, #7
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr
 8000c34:	e000ed00 	.word	0xe000ed00

08000c38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	4603      	mov	r3, r0
 8000c40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	db0b      	blt.n	8000c62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c4a:	79fb      	ldrb	r3, [r7, #7]
 8000c4c:	f003 021f 	and.w	r2, r3, #31
 8000c50:	4907      	ldr	r1, [pc, #28]	; (8000c70 <__NVIC_EnableIRQ+0x38>)
 8000c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c56:	095b      	lsrs	r3, r3, #5
 8000c58:	2001      	movs	r0, #1
 8000c5a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c62:	bf00      	nop
 8000c64:	370c      	adds	r7, #12
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	e000e100 	.word	0xe000e100

08000c74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	6039      	str	r1, [r7, #0]
 8000c7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	db0a      	blt.n	8000c9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	b2da      	uxtb	r2, r3
 8000c8c:	490c      	ldr	r1, [pc, #48]	; (8000cc0 <__NVIC_SetPriority+0x4c>)
 8000c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c92:	0112      	lsls	r2, r2, #4
 8000c94:	b2d2      	uxtb	r2, r2
 8000c96:	440b      	add	r3, r1
 8000c98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c9c:	e00a      	b.n	8000cb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	b2da      	uxtb	r2, r3
 8000ca2:	4908      	ldr	r1, [pc, #32]	; (8000cc4 <__NVIC_SetPriority+0x50>)
 8000ca4:	79fb      	ldrb	r3, [r7, #7]
 8000ca6:	f003 030f 	and.w	r3, r3, #15
 8000caa:	3b04      	subs	r3, #4
 8000cac:	0112      	lsls	r2, r2, #4
 8000cae:	b2d2      	uxtb	r2, r2
 8000cb0:	440b      	add	r3, r1
 8000cb2:	761a      	strb	r2, [r3, #24]
}
 8000cb4:	bf00      	nop
 8000cb6:	370c      	adds	r7, #12
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr
 8000cc0:	e000e100 	.word	0xe000e100
 8000cc4:	e000ed00 	.word	0xe000ed00

08000cc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b089      	sub	sp, #36	; 0x24
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	60f8      	str	r0, [r7, #12]
 8000cd0:	60b9      	str	r1, [r7, #8]
 8000cd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	f003 0307 	and.w	r3, r3, #7
 8000cda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cdc:	69fb      	ldr	r3, [r7, #28]
 8000cde:	f1c3 0307 	rsb	r3, r3, #7
 8000ce2:	2b04      	cmp	r3, #4
 8000ce4:	bf28      	it	cs
 8000ce6:	2304      	movcs	r3, #4
 8000ce8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cea:	69fb      	ldr	r3, [r7, #28]
 8000cec:	3304      	adds	r3, #4
 8000cee:	2b06      	cmp	r3, #6
 8000cf0:	d902      	bls.n	8000cf8 <NVIC_EncodePriority+0x30>
 8000cf2:	69fb      	ldr	r3, [r7, #28]
 8000cf4:	3b03      	subs	r3, #3
 8000cf6:	e000      	b.n	8000cfa <NVIC_EncodePriority+0x32>
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cfc:	f04f 32ff 	mov.w	r2, #4294967295
 8000d00:	69bb      	ldr	r3, [r7, #24]
 8000d02:	fa02 f303 	lsl.w	r3, r2, r3
 8000d06:	43da      	mvns	r2, r3
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	401a      	ands	r2, r3
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d10:	f04f 31ff 	mov.w	r1, #4294967295
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	fa01 f303 	lsl.w	r3, r1, r3
 8000d1a:	43d9      	mvns	r1, r3
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d20:	4313      	orrs	r3, r2
         );
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	3724      	adds	r7, #36	; 0x24
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
	...

08000d30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	3b01      	subs	r3, #1
 8000d3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d40:	d301      	bcc.n	8000d46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d42:	2301      	movs	r3, #1
 8000d44:	e00f      	b.n	8000d66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d46:	4a0a      	ldr	r2, [pc, #40]	; (8000d70 <SysTick_Config+0x40>)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	3b01      	subs	r3, #1
 8000d4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d4e:	210f      	movs	r1, #15
 8000d50:	f04f 30ff 	mov.w	r0, #4294967295
 8000d54:	f7ff ff8e 	bl	8000c74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d58:	4b05      	ldr	r3, [pc, #20]	; (8000d70 <SysTick_Config+0x40>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d5e:	4b04      	ldr	r3, [pc, #16]	; (8000d70 <SysTick_Config+0x40>)
 8000d60:	2207      	movs	r2, #7
 8000d62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d64:	2300      	movs	r3, #0
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	e000e010 	.word	0xe000e010

08000d74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d7c:	6878      	ldr	r0, [r7, #4]
 8000d7e:	f7ff ff29 	bl	8000bd4 <__NVIC_SetPriorityGrouping>
}
 8000d82:	bf00      	nop
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}

08000d8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	b086      	sub	sp, #24
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	4603      	mov	r3, r0
 8000d92:	60b9      	str	r1, [r7, #8]
 8000d94:	607a      	str	r2, [r7, #4]
 8000d96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d9c:	f7ff ff3e 	bl	8000c1c <__NVIC_GetPriorityGrouping>
 8000da0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000da2:	687a      	ldr	r2, [r7, #4]
 8000da4:	68b9      	ldr	r1, [r7, #8]
 8000da6:	6978      	ldr	r0, [r7, #20]
 8000da8:	f7ff ff8e 	bl	8000cc8 <NVIC_EncodePriority>
 8000dac:	4602      	mov	r2, r0
 8000dae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000db2:	4611      	mov	r1, r2
 8000db4:	4618      	mov	r0, r3
 8000db6:	f7ff ff5d 	bl	8000c74 <__NVIC_SetPriority>
}
 8000dba:	bf00      	nop
 8000dbc:	3718      	adds	r7, #24
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}

08000dc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	b082      	sub	sp, #8
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	4603      	mov	r3, r0
 8000dca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f7ff ff31 	bl	8000c38 <__NVIC_EnableIRQ>
}
 8000dd6:	bf00      	nop
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}

08000dde <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dde:	b580      	push	{r7, lr}
 8000de0:	b082      	sub	sp, #8
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000de6:	6878      	ldr	r0, [r7, #4]
 8000de8:	f7ff ffa2 	bl	8000d30 <SysTick_Config>
 8000dec:	4603      	mov	r3, r0
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	3708      	adds	r7, #8
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
	...

08000df8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b087      	sub	sp, #28
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
 8000e00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e02:	2300      	movs	r3, #0
 8000e04:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e06:	e160      	b.n	80010ca <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	2101      	movs	r1, #1
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	fa01 f303 	lsl.w	r3, r1, r3
 8000e14:	4013      	ands	r3, r2
 8000e16:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	f000 8152 	beq.w	80010c4 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	2b01      	cmp	r3, #1
 8000e26:	d00b      	beq.n	8000e40 <HAL_GPIO_Init+0x48>
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	2b02      	cmp	r3, #2
 8000e2e:	d007      	beq.n	8000e40 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e34:	2b11      	cmp	r3, #17
 8000e36:	d003      	beq.n	8000e40 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	2b12      	cmp	r3, #18
 8000e3e:	d130      	bne.n	8000ea2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	689b      	ldr	r3, [r3, #8]
 8000e44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	005b      	lsls	r3, r3, #1
 8000e4a:	2203      	movs	r2, #3
 8000e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e50:	43db      	mvns	r3, r3
 8000e52:	693a      	ldr	r2, [r7, #16]
 8000e54:	4013      	ands	r3, r2
 8000e56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	68da      	ldr	r2, [r3, #12]
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	005b      	lsls	r3, r3, #1
 8000e60:	fa02 f303 	lsl.w	r3, r2, r3
 8000e64:	693a      	ldr	r2, [r7, #16]
 8000e66:	4313      	orrs	r3, r2
 8000e68:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	693a      	ldr	r2, [r7, #16]
 8000e6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e76:	2201      	movs	r2, #1
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7e:	43db      	mvns	r3, r3
 8000e80:	693a      	ldr	r2, [r7, #16]
 8000e82:	4013      	ands	r3, r2
 8000e84:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	091b      	lsrs	r3, r3, #4
 8000e8c:	f003 0201 	and.w	r2, r3, #1
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	fa02 f303 	lsl.w	r3, r2, r3
 8000e96:	693a      	ldr	r2, [r7, #16]
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	693a      	ldr	r2, [r7, #16]
 8000ea0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	68db      	ldr	r3, [r3, #12]
 8000ea6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	005b      	lsls	r3, r3, #1
 8000eac:	2203      	movs	r2, #3
 8000eae:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb2:	43db      	mvns	r3, r3
 8000eb4:	693a      	ldr	r2, [r7, #16]
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	689a      	ldr	r2, [r3, #8]
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	005b      	lsls	r3, r3, #1
 8000ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec6:	693a      	ldr	r2, [r7, #16]
 8000ec8:	4313      	orrs	r3, r2
 8000eca:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	693a      	ldr	r2, [r7, #16]
 8000ed0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	2b02      	cmp	r3, #2
 8000ed8:	d003      	beq.n	8000ee2 <HAL_GPIO_Init+0xea>
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	2b12      	cmp	r3, #18
 8000ee0:	d123      	bne.n	8000f2a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	08da      	lsrs	r2, r3, #3
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	3208      	adds	r2, #8
 8000eea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000eee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	f003 0307 	and.w	r3, r3, #7
 8000ef6:	009b      	lsls	r3, r3, #2
 8000ef8:	220f      	movs	r2, #15
 8000efa:	fa02 f303 	lsl.w	r3, r2, r3
 8000efe:	43db      	mvns	r3, r3
 8000f00:	693a      	ldr	r2, [r7, #16]
 8000f02:	4013      	ands	r3, r2
 8000f04:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	691a      	ldr	r2, [r3, #16]
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	f003 0307 	and.w	r3, r3, #7
 8000f10:	009b      	lsls	r3, r3, #2
 8000f12:	fa02 f303 	lsl.w	r3, r2, r3
 8000f16:	693a      	ldr	r2, [r7, #16]
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	08da      	lsrs	r2, r3, #3
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	3208      	adds	r2, #8
 8000f24:	6939      	ldr	r1, [r7, #16]
 8000f26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	005b      	lsls	r3, r3, #1
 8000f34:	2203      	movs	r2, #3
 8000f36:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3a:	43db      	mvns	r3, r3
 8000f3c:	693a      	ldr	r2, [r7, #16]
 8000f3e:	4013      	ands	r3, r2
 8000f40:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	f003 0203 	and.w	r2, r3, #3
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	005b      	lsls	r3, r3, #1
 8000f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f52:	693a      	ldr	r2, [r7, #16]
 8000f54:	4313      	orrs	r3, r2
 8000f56:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	693a      	ldr	r2, [r7, #16]
 8000f5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	f000 80ac 	beq.w	80010c4 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f6c:	4b5e      	ldr	r3, [pc, #376]	; (80010e8 <HAL_GPIO_Init+0x2f0>)
 8000f6e:	699b      	ldr	r3, [r3, #24]
 8000f70:	4a5d      	ldr	r2, [pc, #372]	; (80010e8 <HAL_GPIO_Init+0x2f0>)
 8000f72:	f043 0301 	orr.w	r3, r3, #1
 8000f76:	6193      	str	r3, [r2, #24]
 8000f78:	4b5b      	ldr	r3, [pc, #364]	; (80010e8 <HAL_GPIO_Init+0x2f0>)
 8000f7a:	699b      	ldr	r3, [r3, #24]
 8000f7c:	f003 0301 	and.w	r3, r3, #1
 8000f80:	60bb      	str	r3, [r7, #8]
 8000f82:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f84:	4a59      	ldr	r2, [pc, #356]	; (80010ec <HAL_GPIO_Init+0x2f4>)
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	089b      	lsrs	r3, r3, #2
 8000f8a:	3302      	adds	r3, #2
 8000f8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f90:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	f003 0303 	and.w	r3, r3, #3
 8000f98:	009b      	lsls	r3, r3, #2
 8000f9a:	220f      	movs	r2, #15
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	43db      	mvns	r3, r3
 8000fa2:	693a      	ldr	r2, [r7, #16]
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000fae:	d025      	beq.n	8000ffc <HAL_GPIO_Init+0x204>
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	4a4f      	ldr	r2, [pc, #316]	; (80010f0 <HAL_GPIO_Init+0x2f8>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d01f      	beq.n	8000ff8 <HAL_GPIO_Init+0x200>
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	4a4e      	ldr	r2, [pc, #312]	; (80010f4 <HAL_GPIO_Init+0x2fc>)
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d019      	beq.n	8000ff4 <HAL_GPIO_Init+0x1fc>
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	4a4d      	ldr	r2, [pc, #308]	; (80010f8 <HAL_GPIO_Init+0x300>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d013      	beq.n	8000ff0 <HAL_GPIO_Init+0x1f8>
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	4a4c      	ldr	r2, [pc, #304]	; (80010fc <HAL_GPIO_Init+0x304>)
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d00d      	beq.n	8000fec <HAL_GPIO_Init+0x1f4>
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	4a4b      	ldr	r2, [pc, #300]	; (8001100 <HAL_GPIO_Init+0x308>)
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	d007      	beq.n	8000fe8 <HAL_GPIO_Init+0x1f0>
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	4a4a      	ldr	r2, [pc, #296]	; (8001104 <HAL_GPIO_Init+0x30c>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d101      	bne.n	8000fe4 <HAL_GPIO_Init+0x1ec>
 8000fe0:	2306      	movs	r3, #6
 8000fe2:	e00c      	b.n	8000ffe <HAL_GPIO_Init+0x206>
 8000fe4:	2307      	movs	r3, #7
 8000fe6:	e00a      	b.n	8000ffe <HAL_GPIO_Init+0x206>
 8000fe8:	2305      	movs	r3, #5
 8000fea:	e008      	b.n	8000ffe <HAL_GPIO_Init+0x206>
 8000fec:	2304      	movs	r3, #4
 8000fee:	e006      	b.n	8000ffe <HAL_GPIO_Init+0x206>
 8000ff0:	2303      	movs	r3, #3
 8000ff2:	e004      	b.n	8000ffe <HAL_GPIO_Init+0x206>
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	e002      	b.n	8000ffe <HAL_GPIO_Init+0x206>
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	e000      	b.n	8000ffe <HAL_GPIO_Init+0x206>
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	697a      	ldr	r2, [r7, #20]
 8001000:	f002 0203 	and.w	r2, r2, #3
 8001004:	0092      	lsls	r2, r2, #2
 8001006:	4093      	lsls	r3, r2
 8001008:	693a      	ldr	r2, [r7, #16]
 800100a:	4313      	orrs	r3, r2
 800100c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800100e:	4937      	ldr	r1, [pc, #220]	; (80010ec <HAL_GPIO_Init+0x2f4>)
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	089b      	lsrs	r3, r3, #2
 8001014:	3302      	adds	r3, #2
 8001016:	693a      	ldr	r2, [r7, #16]
 8001018:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800101c:	4b3a      	ldr	r3, [pc, #232]	; (8001108 <HAL_GPIO_Init+0x310>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	43db      	mvns	r3, r3
 8001026:	693a      	ldr	r2, [r7, #16]
 8001028:	4013      	ands	r3, r2
 800102a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001034:	2b00      	cmp	r3, #0
 8001036:	d003      	beq.n	8001040 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001038:	693a      	ldr	r2, [r7, #16]
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	4313      	orrs	r3, r2
 800103e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001040:	4a31      	ldr	r2, [pc, #196]	; (8001108 <HAL_GPIO_Init+0x310>)
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001046:	4b30      	ldr	r3, [pc, #192]	; (8001108 <HAL_GPIO_Init+0x310>)
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	43db      	mvns	r3, r3
 8001050:	693a      	ldr	r2, [r7, #16]
 8001052:	4013      	ands	r3, r2
 8001054:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800105e:	2b00      	cmp	r3, #0
 8001060:	d003      	beq.n	800106a <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001062:	693a      	ldr	r2, [r7, #16]
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	4313      	orrs	r3, r2
 8001068:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800106a:	4a27      	ldr	r2, [pc, #156]	; (8001108 <HAL_GPIO_Init+0x310>)
 800106c:	693b      	ldr	r3, [r7, #16]
 800106e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001070:	4b25      	ldr	r3, [pc, #148]	; (8001108 <HAL_GPIO_Init+0x310>)
 8001072:	689b      	ldr	r3, [r3, #8]
 8001074:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	43db      	mvns	r3, r3
 800107a:	693a      	ldr	r2, [r7, #16]
 800107c:	4013      	ands	r3, r2
 800107e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001088:	2b00      	cmp	r3, #0
 800108a:	d003      	beq.n	8001094 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800108c:	693a      	ldr	r2, [r7, #16]
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	4313      	orrs	r3, r2
 8001092:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001094:	4a1c      	ldr	r2, [pc, #112]	; (8001108 <HAL_GPIO_Init+0x310>)
 8001096:	693b      	ldr	r3, [r7, #16]
 8001098:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800109a:	4b1b      	ldr	r3, [pc, #108]	; (8001108 <HAL_GPIO_Init+0x310>)
 800109c:	68db      	ldr	r3, [r3, #12]
 800109e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	43db      	mvns	r3, r3
 80010a4:	693a      	ldr	r2, [r7, #16]
 80010a6:	4013      	ands	r3, r2
 80010a8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d003      	beq.n	80010be <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	4313      	orrs	r3, r2
 80010bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80010be:	4a12      	ldr	r2, [pc, #72]	; (8001108 <HAL_GPIO_Init+0x310>)
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	3301      	adds	r3, #1
 80010c8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	fa22 f303 	lsr.w	r3, r2, r3
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	f47f ae97 	bne.w	8000e08 <HAL_GPIO_Init+0x10>
  }
}
 80010da:	bf00      	nop
 80010dc:	bf00      	nop
 80010de:	371c      	adds	r7, #28
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr
 80010e8:	40021000 	.word	0x40021000
 80010ec:	40010000 	.word	0x40010000
 80010f0:	48000400 	.word	0x48000400
 80010f4:	48000800 	.word	0x48000800
 80010f8:	48000c00 	.word	0x48000c00
 80010fc:	48001000 	.word	0x48001000
 8001100:	48001400 	.word	0x48001400
 8001104:	48001800 	.word	0x48001800
 8001108:	40010400 	.word	0x40010400

0800110c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	460b      	mov	r3, r1
 8001116:	807b      	strh	r3, [r7, #2]
 8001118:	4613      	mov	r3, r2
 800111a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800111c:	787b      	ldrb	r3, [r7, #1]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d003      	beq.n	800112a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001122:	887a      	ldrh	r2, [r7, #2]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001128:	e002      	b.n	8001130 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800112a:	887a      	ldrh	r2, [r7, #2]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001130:	bf00      	nop
 8001132:	370c      	adds	r7, #12
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr

0800113c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d101      	bne.n	800114e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800114a:	2301      	movs	r3, #1
 800114c:	e081      	b.n	8001252 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001154:	b2db      	uxtb	r3, r3
 8001156:	2b00      	cmp	r3, #0
 8001158:	d106      	bne.n	8001168 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2200      	movs	r2, #0
 800115e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001162:	6878      	ldr	r0, [r7, #4]
 8001164:	f7ff fa92 	bl	800068c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2224      	movs	r2, #36	; 0x24
 800116c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f022 0201 	bic.w	r2, r2, #1
 800117e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	685a      	ldr	r2, [r3, #4]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800118c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	689a      	ldr	r2, [r3, #8]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800119c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	68db      	ldr	r3, [r3, #12]
 80011a2:	2b01      	cmp	r3, #1
 80011a4:	d107      	bne.n	80011b6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	689a      	ldr	r2, [r3, #8]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80011b2:	609a      	str	r2, [r3, #8]
 80011b4:	e006      	b.n	80011c4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	689a      	ldr	r2, [r3, #8]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80011c2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	2b02      	cmp	r3, #2
 80011ca:	d104      	bne.n	80011d6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80011d4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	687a      	ldr	r2, [r7, #4]
 80011de:	6812      	ldr	r2, [r2, #0]
 80011e0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80011e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011e8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	68da      	ldr	r2, [r3, #12]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80011f8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	691a      	ldr	r2, [r3, #16]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	695b      	ldr	r3, [r3, #20]
 8001202:	ea42 0103 	orr.w	r1, r2, r3
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	699b      	ldr	r3, [r3, #24]
 800120a:	021a      	lsls	r2, r3, #8
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	430a      	orrs	r2, r1
 8001212:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	69d9      	ldr	r1, [r3, #28]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6a1a      	ldr	r2, [r3, #32]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	430a      	orrs	r2, r1
 8001222:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f042 0201 	orr.w	r2, r2, #1
 8001232:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2200      	movs	r2, #0
 8001238:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2220      	movs	r2, #32
 800123e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2200      	movs	r2, #0
 8001246:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2200      	movs	r2, #0
 800124c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001250:	2300      	movs	r3, #0
}
 8001252:	4618      	mov	r0, r3
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
	...

0800125c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b088      	sub	sp, #32
 8001260:	af02      	add	r7, sp, #8
 8001262:	60f8      	str	r0, [r7, #12]
 8001264:	607a      	str	r2, [r7, #4]
 8001266:	461a      	mov	r2, r3
 8001268:	460b      	mov	r3, r1
 800126a:	817b      	strh	r3, [r7, #10]
 800126c:	4613      	mov	r3, r2
 800126e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001276:	b2db      	uxtb	r3, r3
 8001278:	2b20      	cmp	r3, #32
 800127a:	f040 80da 	bne.w	8001432 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001284:	2b01      	cmp	r3, #1
 8001286:	d101      	bne.n	800128c <HAL_I2C_Master_Transmit+0x30>
 8001288:	2302      	movs	r3, #2
 800128a:	e0d3      	b.n	8001434 <HAL_I2C_Master_Transmit+0x1d8>
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	2201      	movs	r2, #1
 8001290:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001294:	f7ff fc6e 	bl	8000b74 <HAL_GetTick>
 8001298:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	9300      	str	r3, [sp, #0]
 800129e:	2319      	movs	r3, #25
 80012a0:	2201      	movs	r2, #1
 80012a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012a6:	68f8      	ldr	r0, [r7, #12]
 80012a8:	f000 f9e6 	bl	8001678 <I2C_WaitOnFlagUntilTimeout>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	e0be      	b.n	8001434 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	2221      	movs	r2, #33	; 0x21
 80012ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	2210      	movs	r2, #16
 80012c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	2200      	movs	r2, #0
 80012ca:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	687a      	ldr	r2, [r7, #4]
 80012d0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	893a      	ldrh	r2, [r7, #8]
 80012d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	2200      	movs	r2, #0
 80012dc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012e2:	b29b      	uxth	r3, r3
 80012e4:	2bff      	cmp	r3, #255	; 0xff
 80012e6:	d90e      	bls.n	8001306 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	22ff      	movs	r2, #255	; 0xff
 80012ec:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012f2:	b2da      	uxtb	r2, r3
 80012f4:	8979      	ldrh	r1, [r7, #10]
 80012f6:	4b51      	ldr	r3, [pc, #324]	; (800143c <HAL_I2C_Master_Transmit+0x1e0>)
 80012f8:	9300      	str	r3, [sp, #0]
 80012fa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80012fe:	68f8      	ldr	r0, [r7, #12]
 8001300:	f000 fb48 	bl	8001994 <I2C_TransferConfig>
 8001304:	e06c      	b.n	80013e0 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800130a:	b29a      	uxth	r2, r3
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001314:	b2da      	uxtb	r2, r3
 8001316:	8979      	ldrh	r1, [r7, #10]
 8001318:	4b48      	ldr	r3, [pc, #288]	; (800143c <HAL_I2C_Master_Transmit+0x1e0>)
 800131a:	9300      	str	r3, [sp, #0]
 800131c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001320:	68f8      	ldr	r0, [r7, #12]
 8001322:	f000 fb37 	bl	8001994 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8001326:	e05b      	b.n	80013e0 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001328:	697a      	ldr	r2, [r7, #20]
 800132a:	6a39      	ldr	r1, [r7, #32]
 800132c:	68f8      	ldr	r0, [r7, #12]
 800132e:	f000 f9e3 	bl	80016f8 <I2C_WaitOnTXISFlagUntilTimeout>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001338:	2301      	movs	r3, #1
 800133a:	e07b      	b.n	8001434 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001340:	781a      	ldrb	r2, [r3, #0]
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800134c:	1c5a      	adds	r2, r3, #1
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001356:	b29b      	uxth	r3, r3
 8001358:	3b01      	subs	r3, #1
 800135a:	b29a      	uxth	r2, r3
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001364:	3b01      	subs	r3, #1
 8001366:	b29a      	uxth	r2, r3
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001370:	b29b      	uxth	r3, r3
 8001372:	2b00      	cmp	r3, #0
 8001374:	d034      	beq.n	80013e0 <HAL_I2C_Master_Transmit+0x184>
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800137a:	2b00      	cmp	r3, #0
 800137c:	d130      	bne.n	80013e0 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	9300      	str	r3, [sp, #0]
 8001382:	6a3b      	ldr	r3, [r7, #32]
 8001384:	2200      	movs	r2, #0
 8001386:	2180      	movs	r1, #128	; 0x80
 8001388:	68f8      	ldr	r0, [r7, #12]
 800138a:	f000 f975 	bl	8001678 <I2C_WaitOnFlagUntilTimeout>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001394:	2301      	movs	r3, #1
 8001396:	e04d      	b.n	8001434 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800139c:	b29b      	uxth	r3, r3
 800139e:	2bff      	cmp	r3, #255	; 0xff
 80013a0:	d90e      	bls.n	80013c0 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	22ff      	movs	r2, #255	; 0xff
 80013a6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013ac:	b2da      	uxtb	r2, r3
 80013ae:	8979      	ldrh	r1, [r7, #10]
 80013b0:	2300      	movs	r3, #0
 80013b2:	9300      	str	r3, [sp, #0]
 80013b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80013b8:	68f8      	ldr	r0, [r7, #12]
 80013ba:	f000 faeb 	bl	8001994 <I2C_TransferConfig>
 80013be:	e00f      	b.n	80013e0 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013c4:	b29a      	uxth	r2, r3
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013ce:	b2da      	uxtb	r2, r3
 80013d0:	8979      	ldrh	r1, [r7, #10]
 80013d2:	2300      	movs	r3, #0
 80013d4:	9300      	str	r3, [sp, #0]
 80013d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80013da:	68f8      	ldr	r0, [r7, #12]
 80013dc:	f000 fada 	bl	8001994 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013e4:	b29b      	uxth	r3, r3
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d19e      	bne.n	8001328 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80013ea:	697a      	ldr	r2, [r7, #20]
 80013ec:	6a39      	ldr	r1, [r7, #32]
 80013ee:	68f8      	ldr	r0, [r7, #12]
 80013f0:	f000 f9c2 	bl	8001778 <I2C_WaitOnSTOPFlagUntilTimeout>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e01a      	b.n	8001434 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	2220      	movs	r2, #32
 8001404:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	6859      	ldr	r1, [r3, #4]
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	4b0b      	ldr	r3, [pc, #44]	; (8001440 <HAL_I2C_Master_Transmit+0x1e4>)
 8001412:	400b      	ands	r3, r1
 8001414:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	2220      	movs	r2, #32
 800141a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	2200      	movs	r2, #0
 8001422:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	2200      	movs	r2, #0
 800142a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800142e:	2300      	movs	r3, #0
 8001430:	e000      	b.n	8001434 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001432:	2302      	movs	r3, #2
  }
}
 8001434:	4618      	mov	r0, r3
 8001436:	3718      	adds	r7, #24
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	80002000 	.word	0x80002000
 8001440:	fe00e800 	.word	0xfe00e800

08001444 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b088      	sub	sp, #32
 8001448:	af02      	add	r7, sp, #8
 800144a:	60f8      	str	r0, [r7, #12]
 800144c:	607a      	str	r2, [r7, #4]
 800144e:	461a      	mov	r2, r3
 8001450:	460b      	mov	r3, r1
 8001452:	817b      	strh	r3, [r7, #10]
 8001454:	4613      	mov	r3, r2
 8001456:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800145e:	b2db      	uxtb	r3, r3
 8001460:	2b20      	cmp	r3, #32
 8001462:	f040 80db 	bne.w	800161c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800146c:	2b01      	cmp	r3, #1
 800146e:	d101      	bne.n	8001474 <HAL_I2C_Master_Receive+0x30>
 8001470:	2302      	movs	r3, #2
 8001472:	e0d4      	b.n	800161e <HAL_I2C_Master_Receive+0x1da>
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	2201      	movs	r2, #1
 8001478:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800147c:	f7ff fb7a 	bl	8000b74 <HAL_GetTick>
 8001480:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	9300      	str	r3, [sp, #0]
 8001486:	2319      	movs	r3, #25
 8001488:	2201      	movs	r2, #1
 800148a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800148e:	68f8      	ldr	r0, [r7, #12]
 8001490:	f000 f8f2 	bl	8001678 <I2C_WaitOnFlagUntilTimeout>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	e0bf      	b.n	800161e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	2222      	movs	r2, #34	; 0x22
 80014a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	2210      	movs	r2, #16
 80014aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	2200      	movs	r2, #0
 80014b2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	687a      	ldr	r2, [r7, #4]
 80014b8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	893a      	ldrh	r2, [r7, #8]
 80014be:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	2200      	movs	r2, #0
 80014c4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014ca:	b29b      	uxth	r3, r3
 80014cc:	2bff      	cmp	r3, #255	; 0xff
 80014ce:	d90e      	bls.n	80014ee <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	22ff      	movs	r2, #255	; 0xff
 80014d4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014da:	b2da      	uxtb	r2, r3
 80014dc:	8979      	ldrh	r1, [r7, #10]
 80014de:	4b52      	ldr	r3, [pc, #328]	; (8001628 <HAL_I2C_Master_Receive+0x1e4>)
 80014e0:	9300      	str	r3, [sp, #0]
 80014e2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80014e6:	68f8      	ldr	r0, [r7, #12]
 80014e8:	f000 fa54 	bl	8001994 <I2C_TransferConfig>
 80014ec:	e06d      	b.n	80015ca <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014f2:	b29a      	uxth	r2, r3
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014fc:	b2da      	uxtb	r2, r3
 80014fe:	8979      	ldrh	r1, [r7, #10]
 8001500:	4b49      	ldr	r3, [pc, #292]	; (8001628 <HAL_I2C_Master_Receive+0x1e4>)
 8001502:	9300      	str	r3, [sp, #0]
 8001504:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001508:	68f8      	ldr	r0, [r7, #12]
 800150a:	f000 fa43 	bl	8001994 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800150e:	e05c      	b.n	80015ca <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001510:	697a      	ldr	r2, [r7, #20]
 8001512:	6a39      	ldr	r1, [r7, #32]
 8001514:	68f8      	ldr	r0, [r7, #12]
 8001516:	f000 f96b 	bl	80017f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001520:	2301      	movs	r3, #1
 8001522:	e07c      	b.n	800161e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800152e:	b2d2      	uxtb	r2, r2
 8001530:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001536:	1c5a      	adds	r2, r3, #1
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001540:	3b01      	subs	r3, #1
 8001542:	b29a      	uxth	r2, r3
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800154c:	b29b      	uxth	r3, r3
 800154e:	3b01      	subs	r3, #1
 8001550:	b29a      	uxth	r2, r3
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800155a:	b29b      	uxth	r3, r3
 800155c:	2b00      	cmp	r3, #0
 800155e:	d034      	beq.n	80015ca <HAL_I2C_Master_Receive+0x186>
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001564:	2b00      	cmp	r3, #0
 8001566:	d130      	bne.n	80015ca <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	9300      	str	r3, [sp, #0]
 800156c:	6a3b      	ldr	r3, [r7, #32]
 800156e:	2200      	movs	r2, #0
 8001570:	2180      	movs	r1, #128	; 0x80
 8001572:	68f8      	ldr	r0, [r7, #12]
 8001574:	f000 f880 	bl	8001678 <I2C_WaitOnFlagUntilTimeout>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e04d      	b.n	800161e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001586:	b29b      	uxth	r3, r3
 8001588:	2bff      	cmp	r3, #255	; 0xff
 800158a:	d90e      	bls.n	80015aa <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	22ff      	movs	r2, #255	; 0xff
 8001590:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001596:	b2da      	uxtb	r2, r3
 8001598:	8979      	ldrh	r1, [r7, #10]
 800159a:	2300      	movs	r3, #0
 800159c:	9300      	str	r3, [sp, #0]
 800159e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80015a2:	68f8      	ldr	r0, [r7, #12]
 80015a4:	f000 f9f6 	bl	8001994 <I2C_TransferConfig>
 80015a8:	e00f      	b.n	80015ca <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015ae:	b29a      	uxth	r2, r3
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015b8:	b2da      	uxtb	r2, r3
 80015ba:	8979      	ldrh	r1, [r7, #10]
 80015bc:	2300      	movs	r3, #0
 80015be:	9300      	str	r3, [sp, #0]
 80015c0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80015c4:	68f8      	ldr	r0, [r7, #12]
 80015c6:	f000 f9e5 	bl	8001994 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015ce:	b29b      	uxth	r3, r3
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d19d      	bne.n	8001510 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015d4:	697a      	ldr	r2, [r7, #20]
 80015d6:	6a39      	ldr	r1, [r7, #32]
 80015d8:	68f8      	ldr	r0, [r7, #12]
 80015da:	f000 f8cd 	bl	8001778 <I2C_WaitOnSTOPFlagUntilTimeout>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80015e4:	2301      	movs	r3, #1
 80015e6:	e01a      	b.n	800161e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	2220      	movs	r2, #32
 80015ee:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	6859      	ldr	r1, [r3, #4]
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	4b0c      	ldr	r3, [pc, #48]	; (800162c <HAL_I2C_Master_Receive+0x1e8>)
 80015fc:	400b      	ands	r3, r1
 80015fe:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	2220      	movs	r2, #32
 8001604:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	2200      	movs	r2, #0
 800160c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	2200      	movs	r2, #0
 8001614:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001618:	2300      	movs	r3, #0
 800161a:	e000      	b.n	800161e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800161c:	2302      	movs	r3, #2
  }
}
 800161e:	4618      	mov	r0, r3
 8001620:	3718      	adds	r7, #24
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	80002400 	.word	0x80002400
 800162c:	fe00e800 	.word	0xfe00e800

08001630 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	699b      	ldr	r3, [r3, #24]
 800163e:	f003 0302 	and.w	r3, r3, #2
 8001642:	2b02      	cmp	r3, #2
 8001644:	d103      	bne.n	800164e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	2200      	movs	r2, #0
 800164c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	699b      	ldr	r3, [r3, #24]
 8001654:	f003 0301 	and.w	r3, r3, #1
 8001658:	2b01      	cmp	r3, #1
 800165a:	d007      	beq.n	800166c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	699a      	ldr	r2, [r3, #24]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f042 0201 	orr.w	r2, r2, #1
 800166a:	619a      	str	r2, [r3, #24]
  }
}
 800166c:	bf00      	nop
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr

08001678 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b084      	sub	sp, #16
 800167c:	af00      	add	r7, sp, #0
 800167e:	60f8      	str	r0, [r7, #12]
 8001680:	60b9      	str	r1, [r7, #8]
 8001682:	603b      	str	r3, [r7, #0]
 8001684:	4613      	mov	r3, r2
 8001686:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001688:	e022      	b.n	80016d0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001690:	d01e      	beq.n	80016d0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001692:	f7ff fa6f 	bl	8000b74 <HAL_GetTick>
 8001696:	4602      	mov	r2, r0
 8001698:	69bb      	ldr	r3, [r7, #24]
 800169a:	1ad3      	subs	r3, r2, r3
 800169c:	683a      	ldr	r2, [r7, #0]
 800169e:	429a      	cmp	r2, r3
 80016a0:	d302      	bcc.n	80016a8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d113      	bne.n	80016d0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ac:	f043 0220 	orr.w	r2, r3, #32
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	2220      	movs	r2, #32
 80016b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	2200      	movs	r2, #0
 80016c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	2200      	movs	r2, #0
 80016c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	e00f      	b.n	80016f0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	699a      	ldr	r2, [r3, #24]
 80016d6:	68bb      	ldr	r3, [r7, #8]
 80016d8:	4013      	ands	r3, r2
 80016da:	68ba      	ldr	r2, [r7, #8]
 80016dc:	429a      	cmp	r2, r3
 80016de:	bf0c      	ite	eq
 80016e0:	2301      	moveq	r3, #1
 80016e2:	2300      	movne	r3, #0
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	461a      	mov	r2, r3
 80016e8:	79fb      	ldrb	r3, [r7, #7]
 80016ea:	429a      	cmp	r2, r3
 80016ec:	d0cd      	beq.n	800168a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80016ee:	2300      	movs	r3, #0
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	3710      	adds	r7, #16
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}

080016f8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	60f8      	str	r0, [r7, #12]
 8001700:	60b9      	str	r1, [r7, #8]
 8001702:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001704:	e02c      	b.n	8001760 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001706:	687a      	ldr	r2, [r7, #4]
 8001708:	68b9      	ldr	r1, [r7, #8]
 800170a:	68f8      	ldr	r0, [r7, #12]
 800170c:	f000 f8dc 	bl	80018c8 <I2C_IsAcknowledgeFailed>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e02a      	b.n	8001770 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800171a:	68bb      	ldr	r3, [r7, #8]
 800171c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001720:	d01e      	beq.n	8001760 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001722:	f7ff fa27 	bl	8000b74 <HAL_GetTick>
 8001726:	4602      	mov	r2, r0
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	68ba      	ldr	r2, [r7, #8]
 800172e:	429a      	cmp	r2, r3
 8001730:	d302      	bcc.n	8001738 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d113      	bne.n	8001760 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800173c:	f043 0220 	orr.w	r2, r3, #32
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	2220      	movs	r2, #32
 8001748:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	2200      	movs	r2, #0
 8001750:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	2200      	movs	r2, #0
 8001758:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e007      	b.n	8001770 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	699b      	ldr	r3, [r3, #24]
 8001766:	f003 0302 	and.w	r3, r3, #2
 800176a:	2b02      	cmp	r3, #2
 800176c:	d1cb      	bne.n	8001706 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800176e:	2300      	movs	r3, #0
}
 8001770:	4618      	mov	r0, r3
 8001772:	3710      	adds	r7, #16
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}

08001778 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af00      	add	r7, sp, #0
 800177e:	60f8      	str	r0, [r7, #12]
 8001780:	60b9      	str	r1, [r7, #8]
 8001782:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001784:	e028      	b.n	80017d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001786:	687a      	ldr	r2, [r7, #4]
 8001788:	68b9      	ldr	r1, [r7, #8]
 800178a:	68f8      	ldr	r0, [r7, #12]
 800178c:	f000 f89c 	bl	80018c8 <I2C_IsAcknowledgeFailed>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e026      	b.n	80017e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800179a:	f7ff f9eb 	bl	8000b74 <HAL_GetTick>
 800179e:	4602      	mov	r2, r0
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	68ba      	ldr	r2, [r7, #8]
 80017a6:	429a      	cmp	r2, r3
 80017a8:	d302      	bcc.n	80017b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d113      	bne.n	80017d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b4:	f043 0220 	orr.w	r2, r3, #32
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	2220      	movs	r2, #32
 80017c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	2200      	movs	r2, #0
 80017c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	2200      	movs	r2, #0
 80017d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80017d4:	2301      	movs	r3, #1
 80017d6:	e007      	b.n	80017e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	699b      	ldr	r3, [r3, #24]
 80017de:	f003 0320 	and.w	r3, r3, #32
 80017e2:	2b20      	cmp	r3, #32
 80017e4:	d1cf      	bne.n	8001786 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80017e6:	2300      	movs	r3, #0
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	3710      	adds	r7, #16
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}

080017f0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	60f8      	str	r0, [r7, #12]
 80017f8:	60b9      	str	r1, [r7, #8]
 80017fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80017fc:	e055      	b.n	80018aa <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	68b9      	ldr	r1, [r7, #8]
 8001802:	68f8      	ldr	r0, [r7, #12]
 8001804:	f000 f860 	bl	80018c8 <I2C_IsAcknowledgeFailed>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e053      	b.n	80018ba <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	699b      	ldr	r3, [r3, #24]
 8001818:	f003 0320 	and.w	r3, r3, #32
 800181c:	2b20      	cmp	r3, #32
 800181e:	d129      	bne.n	8001874 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	699b      	ldr	r3, [r3, #24]
 8001826:	f003 0304 	and.w	r3, r3, #4
 800182a:	2b04      	cmp	r3, #4
 800182c:	d105      	bne.n	800183a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8001836:	2300      	movs	r3, #0
 8001838:	e03f      	b.n	80018ba <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	2220      	movs	r2, #32
 8001840:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	6859      	ldr	r1, [r3, #4]
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	4b1d      	ldr	r3, [pc, #116]	; (80018c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 800184e:	400b      	ands	r3, r1
 8001850:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	2200      	movs	r2, #0
 8001856:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	2220      	movs	r2, #32
 800185c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	2200      	movs	r2, #0
 8001864:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	2200      	movs	r2, #0
 800186c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	e022      	b.n	80018ba <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001874:	f7ff f97e 	bl	8000b74 <HAL_GetTick>
 8001878:	4602      	mov	r2, r0
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	68ba      	ldr	r2, [r7, #8]
 8001880:	429a      	cmp	r2, r3
 8001882:	d302      	bcc.n	800188a <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d10f      	bne.n	80018aa <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800188e:	f043 0220 	orr.w	r2, r3, #32
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	2220      	movs	r2, #32
 800189a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	2200      	movs	r2, #0
 80018a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e007      	b.n	80018ba <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	699b      	ldr	r3, [r3, #24]
 80018b0:	f003 0304 	and.w	r3, r3, #4
 80018b4:	2b04      	cmp	r3, #4
 80018b6:	d1a2      	bne.n	80017fe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80018b8:	2300      	movs	r3, #0
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3710      	adds	r7, #16
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	fe00e800 	.word	0xfe00e800

080018c8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	60f8      	str	r0, [r7, #12]
 80018d0:	60b9      	str	r1, [r7, #8]
 80018d2:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	699b      	ldr	r3, [r3, #24]
 80018da:	f003 0310 	and.w	r3, r3, #16
 80018de:	2b10      	cmp	r3, #16
 80018e0:	d151      	bne.n	8001986 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80018e2:	e022      	b.n	800192a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018ea:	d01e      	beq.n	800192a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018ec:	f7ff f942 	bl	8000b74 <HAL_GetTick>
 80018f0:	4602      	mov	r2, r0
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	68ba      	ldr	r2, [r7, #8]
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d302      	bcc.n	8001902 <I2C_IsAcknowledgeFailed+0x3a>
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d113      	bne.n	800192a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001906:	f043 0220 	orr.w	r2, r3, #32
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	2220      	movs	r2, #32
 8001912:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	2200      	movs	r2, #0
 800191a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	2200      	movs	r2, #0
 8001922:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e02e      	b.n	8001988 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	699b      	ldr	r3, [r3, #24]
 8001930:	f003 0320 	and.w	r3, r3, #32
 8001934:	2b20      	cmp	r3, #32
 8001936:	d1d5      	bne.n	80018e4 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	2210      	movs	r2, #16
 800193e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	2220      	movs	r2, #32
 8001946:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001948:	68f8      	ldr	r0, [r7, #12]
 800194a:	f7ff fe71 	bl	8001630 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	6859      	ldr	r1, [r3, #4]
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	4b0d      	ldr	r3, [pc, #52]	; (8001990 <I2C_IsAcknowledgeFailed+0xc8>)
 800195a:	400b      	ands	r3, r1
 800195c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001962:	f043 0204 	orr.w	r2, r3, #4
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	2220      	movs	r2, #32
 800196e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	2200      	movs	r2, #0
 8001976:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	2200      	movs	r2, #0
 800197e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e000      	b.n	8001988 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8001986:	2300      	movs	r3, #0
}
 8001988:	4618      	mov	r0, r3
 800198a:	3710      	adds	r7, #16
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	fe00e800 	.word	0xfe00e800

08001994 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001994:	b480      	push	{r7}
 8001996:	b085      	sub	sp, #20
 8001998:	af00      	add	r7, sp, #0
 800199a:	60f8      	str	r0, [r7, #12]
 800199c:	607b      	str	r3, [r7, #4]
 800199e:	460b      	mov	r3, r1
 80019a0:	817b      	strh	r3, [r7, #10]
 80019a2:	4613      	mov	r3, r2
 80019a4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	685a      	ldr	r2, [r3, #4]
 80019ac:	69bb      	ldr	r3, [r7, #24]
 80019ae:	0d5b      	lsrs	r3, r3, #21
 80019b0:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80019b4:	4b0d      	ldr	r3, [pc, #52]	; (80019ec <I2C_TransferConfig+0x58>)
 80019b6:	430b      	orrs	r3, r1
 80019b8:	43db      	mvns	r3, r3
 80019ba:	ea02 0103 	and.w	r1, r2, r3
 80019be:	897b      	ldrh	r3, [r7, #10]
 80019c0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80019c4:	7a7b      	ldrb	r3, [r7, #9]
 80019c6:	041b      	lsls	r3, r3, #16
 80019c8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80019cc:	431a      	orrs	r2, r3
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	431a      	orrs	r2, r3
 80019d2:	69bb      	ldr	r3, [r7, #24]
 80019d4:	431a      	orrs	r2, r3
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	430a      	orrs	r2, r1
 80019dc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80019de:	bf00      	nop
 80019e0:	3714      	adds	r7, #20
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	03ff63ff 	.word	0x03ff63ff

080019f0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	2b20      	cmp	r3, #32
 8001a04:	d138      	bne.n	8001a78 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d101      	bne.n	8001a14 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001a10:	2302      	movs	r3, #2
 8001a12:	e032      	b.n	8001a7a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2201      	movs	r2, #1
 8001a18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2224      	movs	r2, #36	; 0x24
 8001a20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f022 0201 	bic.w	r2, r2, #1
 8001a32:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001a42:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	6819      	ldr	r1, [r3, #0]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	683a      	ldr	r2, [r7, #0]
 8001a50:	430a      	orrs	r2, r1
 8001a52:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f042 0201 	orr.w	r2, r2, #1
 8001a62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2220      	movs	r2, #32
 8001a68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001a74:	2300      	movs	r3, #0
 8001a76:	e000      	b.n	8001a7a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001a78:	2302      	movs	r3, #2
  }
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	370c      	adds	r7, #12
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr

08001a86 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001a86:	b480      	push	{r7}
 8001a88:	b085      	sub	sp, #20
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	6078      	str	r0, [r7, #4]
 8001a8e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	2b20      	cmp	r3, #32
 8001a9a:	d139      	bne.n	8001b10 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d101      	bne.n	8001aaa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001aa6:	2302      	movs	r3, #2
 8001aa8:	e033      	b.n	8001b12 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2201      	movs	r2, #1
 8001aae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2224      	movs	r2, #36	; 0x24
 8001ab6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f022 0201 	bic.w	r2, r2, #1
 8001ac8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001ad8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	021b      	lsls	r3, r3, #8
 8001ade:	68fa      	ldr	r2, [r7, #12]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	68fa      	ldr	r2, [r7, #12]
 8001aea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f042 0201 	orr.w	r2, r2, #1
 8001afa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2220      	movs	r2, #32
 8001b00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2200      	movs	r2, #0
 8001b08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	e000      	b.n	8001b12 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001b10:	2302      	movs	r3, #2
  }
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3714      	adds	r7, #20
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr

08001b1e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001b1e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b20:	b08b      	sub	sp, #44	; 0x2c
 8001b22:	af06      	add	r7, sp, #24
 8001b24:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d101      	bne.n	8001b30 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e0d0      	b.n	8001cd2 <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d106      	bne.n	8001b4a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	f7fe fe81 	bl	800084c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2203      	movs	r2, #3
 8001b4e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4618      	mov	r0, r3
 8001b58:	f003 f929 	bl	8004dae <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	73fb      	strb	r3, [r7, #15]
 8001b60:	e04c      	b.n	8001bfc <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001b62:	7bfb      	ldrb	r3, [r7, #15]
 8001b64:	6879      	ldr	r1, [r7, #4]
 8001b66:	1c5a      	adds	r2, r3, #1
 8001b68:	4613      	mov	r3, r2
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	4413      	add	r3, r2
 8001b6e:	00db      	lsls	r3, r3, #3
 8001b70:	440b      	add	r3, r1
 8001b72:	3301      	adds	r3, #1
 8001b74:	2201      	movs	r2, #1
 8001b76:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001b78:	7bfb      	ldrb	r3, [r7, #15]
 8001b7a:	6879      	ldr	r1, [r7, #4]
 8001b7c:	1c5a      	adds	r2, r3, #1
 8001b7e:	4613      	mov	r3, r2
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	4413      	add	r3, r2
 8001b84:	00db      	lsls	r3, r3, #3
 8001b86:	440b      	add	r3, r1
 8001b88:	7bfa      	ldrb	r2, [r7, #15]
 8001b8a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001b8c:	7bfa      	ldrb	r2, [r7, #15]
 8001b8e:	7bfb      	ldrb	r3, [r7, #15]
 8001b90:	b298      	uxth	r0, r3
 8001b92:	6879      	ldr	r1, [r7, #4]
 8001b94:	4613      	mov	r3, r2
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	4413      	add	r3, r2
 8001b9a:	00db      	lsls	r3, r3, #3
 8001b9c:	440b      	add	r3, r1
 8001b9e:	3336      	adds	r3, #54	; 0x36
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001ba4:	7bfb      	ldrb	r3, [r7, #15]
 8001ba6:	6879      	ldr	r1, [r7, #4]
 8001ba8:	1c5a      	adds	r2, r3, #1
 8001baa:	4613      	mov	r3, r2
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	4413      	add	r3, r2
 8001bb0:	00db      	lsls	r3, r3, #3
 8001bb2:	440b      	add	r3, r1
 8001bb4:	3303      	adds	r3, #3
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001bba:	7bfa      	ldrb	r2, [r7, #15]
 8001bbc:	6879      	ldr	r1, [r7, #4]
 8001bbe:	4613      	mov	r3, r2
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	4413      	add	r3, r2
 8001bc4:	00db      	lsls	r3, r3, #3
 8001bc6:	440b      	add	r3, r1
 8001bc8:	3338      	adds	r3, #56	; 0x38
 8001bca:	2200      	movs	r2, #0
 8001bcc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001bce:	7bfa      	ldrb	r2, [r7, #15]
 8001bd0:	6879      	ldr	r1, [r7, #4]
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	4413      	add	r3, r2
 8001bd8:	00db      	lsls	r3, r3, #3
 8001bda:	440b      	add	r3, r1
 8001bdc:	333c      	adds	r3, #60	; 0x3c
 8001bde:	2200      	movs	r2, #0
 8001be0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001be2:	7bfa      	ldrb	r2, [r7, #15]
 8001be4:	6879      	ldr	r1, [r7, #4]
 8001be6:	4613      	mov	r3, r2
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	4413      	add	r3, r2
 8001bec:	00db      	lsls	r3, r3, #3
 8001bee:	440b      	add	r3, r1
 8001bf0:	3340      	adds	r3, #64	; 0x40
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bf6:	7bfb      	ldrb	r3, [r7, #15]
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	73fb      	strb	r3, [r7, #15]
 8001bfc:	7bfa      	ldrb	r2, [r7, #15]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d3ad      	bcc.n	8001b62 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c06:	2300      	movs	r3, #0
 8001c08:	73fb      	strb	r3, [r7, #15]
 8001c0a:	e044      	b.n	8001c96 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001c0c:	7bfa      	ldrb	r2, [r7, #15]
 8001c0e:	6879      	ldr	r1, [r7, #4]
 8001c10:	4613      	mov	r3, r2
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	4413      	add	r3, r2
 8001c16:	00db      	lsls	r3, r3, #3
 8001c18:	440b      	add	r3, r1
 8001c1a:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001c1e:	2200      	movs	r2, #0
 8001c20:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001c22:	7bfa      	ldrb	r2, [r7, #15]
 8001c24:	6879      	ldr	r1, [r7, #4]
 8001c26:	4613      	mov	r3, r2
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	4413      	add	r3, r2
 8001c2c:	00db      	lsls	r3, r3, #3
 8001c2e:	440b      	add	r3, r1
 8001c30:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c34:	7bfa      	ldrb	r2, [r7, #15]
 8001c36:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001c38:	7bfa      	ldrb	r2, [r7, #15]
 8001c3a:	6879      	ldr	r1, [r7, #4]
 8001c3c:	4613      	mov	r3, r2
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	4413      	add	r3, r2
 8001c42:	00db      	lsls	r3, r3, #3
 8001c44:	440b      	add	r3, r1
 8001c46:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001c4e:	7bfa      	ldrb	r2, [r7, #15]
 8001c50:	6879      	ldr	r1, [r7, #4]
 8001c52:	4613      	mov	r3, r2
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	4413      	add	r3, r2
 8001c58:	00db      	lsls	r3, r3, #3
 8001c5a:	440b      	add	r3, r1
 8001c5c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001c60:	2200      	movs	r2, #0
 8001c62:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001c64:	7bfa      	ldrb	r2, [r7, #15]
 8001c66:	6879      	ldr	r1, [r7, #4]
 8001c68:	4613      	mov	r3, r2
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	4413      	add	r3, r2
 8001c6e:	00db      	lsls	r3, r3, #3
 8001c70:	440b      	add	r3, r1
 8001c72:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001c76:	2200      	movs	r2, #0
 8001c78:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001c7a:	7bfa      	ldrb	r2, [r7, #15]
 8001c7c:	6879      	ldr	r1, [r7, #4]
 8001c7e:	4613      	mov	r3, r2
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	4413      	add	r3, r2
 8001c84:	00db      	lsls	r3, r3, #3
 8001c86:	440b      	add	r3, r1
 8001c88:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c90:	7bfb      	ldrb	r3, [r7, #15]
 8001c92:	3301      	adds	r3, #1
 8001c94:	73fb      	strb	r3, [r7, #15]
 8001c96:	7bfa      	ldrb	r2, [r7, #15]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d3b5      	bcc.n	8001c0c <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	603b      	str	r3, [r7, #0]
 8001ca6:	687e      	ldr	r6, [r7, #4]
 8001ca8:	466d      	mov	r5, sp
 8001caa:	f106 0410 	add.w	r4, r6, #16
 8001cae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cb0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cb2:	6823      	ldr	r3, [r4, #0]
 8001cb4:	602b      	str	r3, [r5, #0]
 8001cb6:	1d33      	adds	r3, r6, #4
 8001cb8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cba:	6838      	ldr	r0, [r7, #0]
 8001cbc:	f003 f892 	bl	8004de4 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2201      	movs	r2, #1
 8001ccc:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8001cd0:	2300      	movs	r3, #0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3714      	adds	r7, #20
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001cda <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001cda:	b580      	push	{r7, lr}
 8001cdc:	b082      	sub	sp, #8
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f004 f9d1 	bl	800608e <USB_ReadInterrupts>
 8001cec:	4603      	mov	r3, r0
 8001cee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001cf2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001cf6:	d102      	bne.n	8001cfe <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f000 f954 	bl	8001fa6 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4618      	mov	r0, r3
 8001d04:	f004 f9c3 	bl	800608e <USB_ReadInterrupts>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d12:	d112      	bne.n	8001d3a <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d1c:	b29a      	uxth	r2, r3
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d26:	b292      	uxth	r2, r2
 8001d28:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	f000 f8f7 	bl	8001f20 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001d32:	2100      	movs	r1, #0
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f000 f911 	bl	8001f5c <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f004 f9a5 	bl	800608e <USB_ReadInterrupts>
 8001d44:	4603      	mov	r3, r0
 8001d46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d4a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001d4e:	d10b      	bne.n	8001d68 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d58:	b29a      	uxth	r2, r3
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001d62:	b292      	uxth	r2, r2
 8001d64:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f004 f98e 	bl	800608e <USB_ReadInterrupts>
 8001d72:	4603      	mov	r3, r0
 8001d74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d7c:	d10b      	bne.n	8001d96 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d86:	b29a      	uxth	r2, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001d90:	b292      	uxth	r2, r2
 8001d92:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f004 f977 	bl	800608e <USB_ReadInterrupts>
 8001da0:	4603      	mov	r3, r0
 8001da2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001da6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001daa:	d126      	bne.n	8001dfa <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001db4:	b29a      	uxth	r2, r3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f022 0204 	bic.w	r2, r2, #4
 8001dbe:	b292      	uxth	r2, r2
 8001dc0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001dcc:	b29a      	uxth	r2, r3
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f022 0208 	bic.w	r2, r2, #8
 8001dd6:	b292      	uxth	r2, r2
 8001dd8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f000 f8b3 	bl	8001f48 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001dea:	b29a      	uxth	r2, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001df4:	b292      	uxth	r2, r2
 8001df6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f004 f945 	bl	800608e <USB_ReadInterrupts>
 8001e04:	4603      	mov	r3, r0
 8001e06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e0e:	d126      	bne.n	8001e5e <HAL_PCD_IRQHandler+0x184>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e18:	b29a      	uxth	r2, r3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f042 0208 	orr.w	r2, r2, #8
 8001e22:	b292      	uxth	r2, r2
 8001e24:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e30:	b29a      	uxth	r2, r3
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e3a:	b292      	uxth	r2, r2
 8001e3c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e48:	b29a      	uxth	r2, r3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f042 0204 	orr.w	r2, r2, #4
 8001e52:	b292      	uxth	r2, r2
 8001e54:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f000 f86b 	bl	8001f34 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4618      	mov	r0, r3
 8001e64:	f004 f913 	bl	800608e <USB_ReadInterrupts>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e72:	d10e      	bne.n	8001e92 <HAL_PCD_IRQHandler+0x1b8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e7c:	b29a      	uxth	r2, r3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001e86:	b292      	uxth	r2, r2
 8001e88:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f000 f83d 	bl	8001f0c <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4618      	mov	r0, r3
 8001e98:	f004 f8f9 	bl	800608e <USB_ReadInterrupts>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ea2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ea6:	d10b      	bne.n	8001ec0 <HAL_PCD_IRQHandler+0x1e6>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001eb0:	b29a      	uxth	r2, r3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001eba:	b292      	uxth	r2, r2
 8001ebc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001ec0:	bf00      	nop
 8001ec2:	3708      	adds	r7, #8
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}

08001ec8 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	460b      	mov	r3, r1
 8001ed2:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataOutStageCallback could be implemented in the user file
   */
}
 8001ed4:	bf00      	nop
 8001ed6:	370c      	adds	r7, #12
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr

08001ee0 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
 8001ee8:	460b      	mov	r3, r1
 8001eea:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataInStageCallback could be implemented in the user file
   */
}
 8001eec:	bf00      	nop
 8001eee:	370c      	adds	r7, #12
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr

08001ef8 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SetupStageCallback could be implemented in the user file
   */
}
 8001f00:	bf00      	nop
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <HAL_PCD_SOFCallback>:
  * @brief  USB Start Of Frame callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */
}
 8001f14:	bf00      	nop
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <HAL_PCD_ResetCallback>:
  * @brief  USB Reset callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResetCallback could be implemented in the user file
   */
}
 8001f28:	bf00      	nop
 8001f2a:	370c      	adds	r7, #12
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr

08001f34 <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 8001f3c:	bf00      	nop
 8001f3e:	370c      	adds	r7, #12
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr

08001f48 <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 8001f50:	bf00      	nop
 8001f52:	370c      	adds	r7, #12
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr

08001f5c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	460b      	mov	r3, r1
 8001f66:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d101      	bne.n	8001f76 <HAL_PCD_SetAddress+0x1a>
 8001f72:	2302      	movs	r3, #2
 8001f74:	e013      	b.n	8001f9e <HAL_PCD_SetAddress+0x42>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2201      	movs	r2, #1
 8001f7a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	78fa      	ldrb	r2, [r7, #3]
 8001f82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	78fa      	ldrb	r2, [r7, #3]
 8001f8c:	4611      	mov	r1, r2
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f004 f869 	bl	8006066 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2200      	movs	r2, #0
 8001f98:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001f9c:	2300      	movs	r3, #0
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3708      	adds	r7, #8
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}

08001fa6 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001fa6:	b580      	push	{r7, lr}
 8001fa8:	b08e      	sub	sp, #56	; 0x38
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001fae:	e2d1      	b.n	8002554 <PCD_EP_ISR_Handler+0x5ae>
  {
    wIstr = hpcd->Instance->ISTR;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001fb8:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001fba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	f003 030f 	and.w	r3, r3, #15
 8001fc2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001fc6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	f040 8152 	bne.w	8002274 <PCD_EP_ISR_Handler+0x2ce>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001fd0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001fd2:	f003 0310 	and.w	r3, r3, #16
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d150      	bne.n	800207c <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	881b      	ldrh	r3, [r3, #0]
 8001fe0:	b29b      	uxth	r3, r3
 8001fe2:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001fe6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fea:	81fb      	strh	r3, [r7, #14]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	89fb      	ldrh	r3, [r7, #14]
 8001ff2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ff6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	3328      	adds	r3, #40	; 0x28
 8002002:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800200c:	b29b      	uxth	r3, r3
 800200e:	461a      	mov	r2, r3
 8002010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	00db      	lsls	r3, r3, #3
 8002016:	4413      	add	r3, r2
 8002018:	687a      	ldr	r2, [r7, #4]
 800201a:	6812      	ldr	r2, [r2, #0]
 800201c:	4413      	add	r3, r2
 800201e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002022:	881b      	ldrh	r3, [r3, #0]
 8002024:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800202c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202e:	695a      	ldr	r2, [r3, #20]
 8002030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002032:	69db      	ldr	r3, [r3, #28]
 8002034:	441a      	add	r2, r3
 8002036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002038:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800203a:	2100      	movs	r1, #0
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f7ff ff4f 	bl	8001ee0 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002048:	b2db      	uxtb	r3, r3
 800204a:	2b00      	cmp	r3, #0
 800204c:	f000 8282 	beq.w	8002554 <PCD_EP_ISR_Handler+0x5ae>
 8002050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002052:	699b      	ldr	r3, [r3, #24]
 8002054:	2b00      	cmp	r3, #0
 8002056:	f040 827d 	bne.w	8002554 <PCD_EP_ISR_Handler+0x5ae>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002060:	b2db      	uxtb	r3, r3
 8002062:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002066:	b2da      	uxtb	r2, r3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	b292      	uxth	r2, r2
 800206e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2200      	movs	r2, #0
 8002076:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800207a:	e26b      	b.n	8002554 <PCD_EP_ISR_Handler+0x5ae>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002082:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	881b      	ldrh	r3, [r3, #0]
 800208a:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800208c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800208e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002092:	2b00      	cmp	r3, #0
 8002094:	d032      	beq.n	80020fc <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800209e:	b29b      	uxth	r3, r3
 80020a0:	461a      	mov	r2, r3
 80020a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	00db      	lsls	r3, r3, #3
 80020a8:	4413      	add	r3, r2
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	6812      	ldr	r2, [r2, #0]
 80020ae:	4413      	add	r3, r2
 80020b0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80020b4:	881b      	ldrh	r3, [r3, #0]
 80020b6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80020ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020bc:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6818      	ldr	r0, [r3, #0]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80020c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ca:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80020cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ce:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80020d0:	b29b      	uxth	r3, r3
 80020d2:	f004 f82e 	bl	8006132 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	881b      	ldrh	r3, [r3, #0]
 80020dc:	b29a      	uxth	r2, r3
 80020de:	f640 738f 	movw	r3, #3983	; 0xf8f
 80020e2:	4013      	ands	r3, r2
 80020e4:	823b      	strh	r3, [r7, #16]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	8a3a      	ldrh	r2, [r7, #16]
 80020ec:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80020f0:	b292      	uxth	r2, r2
 80020f2:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	f7ff feff 	bl	8001ef8 <HAL_PCD_SetupStageCallback>
 80020fa:	e22b      	b.n	8002554 <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80020fc:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002100:	2b00      	cmp	r3, #0
 8002102:	f280 8227 	bge.w	8002554 <PCD_EP_ISR_Handler+0x5ae>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	881b      	ldrh	r3, [r3, #0]
 800210c:	b29a      	uxth	r2, r3
 800210e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002112:	4013      	ands	r3, r2
 8002114:	83bb      	strh	r3, [r7, #28]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	8bba      	ldrh	r2, [r7, #28]
 800211c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002120:	b292      	uxth	r2, r2
 8002122:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800212c:	b29b      	uxth	r3, r3
 800212e:	461a      	mov	r2, r3
 8002130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	00db      	lsls	r3, r3, #3
 8002136:	4413      	add	r3, r2
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	6812      	ldr	r2, [r2, #0]
 800213c:	4413      	add	r3, r2
 800213e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002142:	881b      	ldrh	r3, [r3, #0]
 8002144:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800214c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214e:	69db      	ldr	r3, [r3, #28]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d019      	beq.n	8002188 <PCD_EP_ISR_Handler+0x1e2>
 8002154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002156:	695b      	ldr	r3, [r3, #20]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d015      	beq.n	8002188 <PCD_EP_ISR_Handler+0x1e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6818      	ldr	r0, [r3, #0]
 8002160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002162:	6959      	ldr	r1, [r3, #20]
 8002164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002166:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800216c:	b29b      	uxth	r3, r3
 800216e:	f003 ffe0 	bl	8006132 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002174:	695a      	ldr	r2, [r3, #20]
 8002176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002178:	69db      	ldr	r3, [r3, #28]
 800217a:	441a      	add	r2, r3
 800217c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002180:	2100      	movs	r1, #0
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f7ff fea0 	bl	8001ec8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	61bb      	str	r3, [r7, #24]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002196:	b29b      	uxth	r3, r3
 8002198:	461a      	mov	r2, r3
 800219a:	69bb      	ldr	r3, [r7, #24]
 800219c:	4413      	add	r3, r2
 800219e:	61bb      	str	r3, [r7, #24]
 80021a0:	69bb      	ldr	r3, [r7, #24]
 80021a2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80021a6:	617b      	str	r3, [r7, #20]
 80021a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021aa:	691b      	ldr	r3, [r3, #16]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d112      	bne.n	80021d6 <PCD_EP_ISR_Handler+0x230>
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	881b      	ldrh	r3, [r3, #0]
 80021b4:	b29b      	uxth	r3, r3
 80021b6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80021ba:	b29a      	uxth	r2, r3
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	801a      	strh	r2, [r3, #0]
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	881b      	ldrh	r3, [r3, #0]
 80021c4:	b29b      	uxth	r3, r3
 80021c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80021ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80021ce:	b29a      	uxth	r2, r3
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	801a      	strh	r2, [r3, #0]
 80021d4:	e02f      	b.n	8002236 <PCD_EP_ISR_Handler+0x290>
 80021d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d8:	691b      	ldr	r3, [r3, #16]
 80021da:	2b3e      	cmp	r3, #62	; 0x3e
 80021dc:	d813      	bhi.n	8002206 <PCD_EP_ISR_Handler+0x260>
 80021de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e0:	691b      	ldr	r3, [r3, #16]
 80021e2:	085b      	lsrs	r3, r3, #1
 80021e4:	633b      	str	r3, [r7, #48]	; 0x30
 80021e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e8:	691b      	ldr	r3, [r3, #16]
 80021ea:	f003 0301 	and.w	r3, r3, #1
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d002      	beq.n	80021f8 <PCD_EP_ISR_Handler+0x252>
 80021f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021f4:	3301      	adds	r3, #1
 80021f6:	633b      	str	r3, [r7, #48]	; 0x30
 80021f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021fa:	b29b      	uxth	r3, r3
 80021fc:	029b      	lsls	r3, r3, #10
 80021fe:	b29a      	uxth	r2, r3
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	801a      	strh	r2, [r3, #0]
 8002204:	e017      	b.n	8002236 <PCD_EP_ISR_Handler+0x290>
 8002206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002208:	691b      	ldr	r3, [r3, #16]
 800220a:	095b      	lsrs	r3, r3, #5
 800220c:	633b      	str	r3, [r7, #48]	; 0x30
 800220e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002210:	691b      	ldr	r3, [r3, #16]
 8002212:	f003 031f 	and.w	r3, r3, #31
 8002216:	2b00      	cmp	r3, #0
 8002218:	d102      	bne.n	8002220 <PCD_EP_ISR_Handler+0x27a>
 800221a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800221c:	3b01      	subs	r3, #1
 800221e:	633b      	str	r3, [r7, #48]	; 0x30
 8002220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002222:	b29b      	uxth	r3, r3
 8002224:	029b      	lsls	r3, r3, #10
 8002226:	b29b      	uxth	r3, r3
 8002228:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800222c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002230:	b29a      	uxth	r2, r3
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	881b      	ldrh	r3, [r3, #0]
 800223c:	b29b      	uxth	r3, r3
 800223e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002242:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002246:	827b      	strh	r3, [r7, #18]
 8002248:	8a7b      	ldrh	r3, [r7, #18]
 800224a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800224e:	827b      	strh	r3, [r7, #18]
 8002250:	8a7b      	ldrh	r3, [r7, #18]
 8002252:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002256:	827b      	strh	r3, [r7, #18]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	8a7b      	ldrh	r3, [r7, #18]
 800225e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002262:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002266:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800226a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800226e:	b29b      	uxth	r3, r3
 8002270:	8013      	strh	r3, [r2, #0]
 8002272:	e16f      	b.n	8002554 <PCD_EP_ISR_Handler+0x5ae>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	461a      	mov	r2, r3
 800227a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	4413      	add	r3, r2
 8002282:	881b      	ldrh	r3, [r3, #0]
 8002284:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002286:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800228a:	2b00      	cmp	r3, #0
 800228c:	f280 80e4 	bge.w	8002458 <PCD_EP_ISR_Handler+0x4b2>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	461a      	mov	r2, r3
 8002296:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	4413      	add	r3, r2
 800229e:	881b      	ldrh	r3, [r3, #0]
 80022a0:	b29a      	uxth	r2, r3
 80022a2:	f640 738f 	movw	r3, #3983	; 0xf8f
 80022a6:	4013      	ands	r3, r2
 80022a8:	853b      	strh	r3, [r7, #40]	; 0x28
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	461a      	mov	r2, r3
 80022b0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	4413      	add	r3, r2
 80022b8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80022ba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80022be:	b292      	uxth	r2, r2
 80022c0:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80022c2:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80022c6:	4613      	mov	r3, r2
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	4413      	add	r3, r2
 80022cc:	00db      	lsls	r3, r3, #3
 80022ce:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	4413      	add	r3, r2
 80022d6:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80022d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022da:	7b1b      	ldrb	r3, [r3, #12]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d120      	bne.n	8002322 <PCD_EP_ISR_Handler+0x37c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022e8:	b29b      	uxth	r3, r3
 80022ea:	461a      	mov	r2, r3
 80022ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	00db      	lsls	r3, r3, #3
 80022f2:	4413      	add	r3, r2
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	6812      	ldr	r2, [r2, #0]
 80022f8:	4413      	add	r3, r2
 80022fa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80022fe:	881b      	ldrh	r3, [r3, #0]
 8002300:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002304:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8002306:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002308:	2b00      	cmp	r3, #0
 800230a:	f000 8083 	beq.w	8002414 <PCD_EP_ISR_Handler+0x46e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6818      	ldr	r0, [r3, #0]
 8002312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002314:	6959      	ldr	r1, [r3, #20]
 8002316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002318:	88da      	ldrh	r2, [r3, #6]
 800231a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800231c:	f003 ff09 	bl	8006132 <USB_ReadPMA>
 8002320:	e078      	b.n	8002414 <PCD_EP_ISR_Handler+0x46e>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002324:	78db      	ldrb	r3, [r3, #3]
 8002326:	2b02      	cmp	r3, #2
 8002328:	d108      	bne.n	800233c <PCD_EP_ISR_Handler+0x396>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800232a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800232c:	461a      	mov	r2, r3
 800232e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002330:	6878      	ldr	r0, [r7, #4]
 8002332:	f000 f91d 	bl	8002570 <HAL_PCD_EP_DB_Receive>
 8002336:	4603      	mov	r3, r0
 8002338:	86fb      	strh	r3, [r7, #54]	; 0x36
 800233a:	e06b      	b.n	8002414 <PCD_EP_ISR_Handler+0x46e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	461a      	mov	r2, r3
 8002342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	4413      	add	r3, r2
 800234a:	881b      	ldrh	r3, [r3, #0]
 800234c:	b29b      	uxth	r3, r3
 800234e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002352:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002356:	847b      	strh	r3, [r7, #34]	; 0x22
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	461a      	mov	r2, r3
 800235e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	441a      	add	r2, r3
 8002366:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002368:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800236c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002370:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002374:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002378:	b29b      	uxth	r3, r3
 800237a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	461a      	mov	r2, r3
 8002382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	4413      	add	r3, r2
 800238a:	881b      	ldrh	r3, [r3, #0]
 800238c:	b29b      	uxth	r3, r3
 800238e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d01f      	beq.n	80023d6 <PCD_EP_ISR_Handler+0x430>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800239e:	b29b      	uxth	r3, r3
 80023a0:	461a      	mov	r2, r3
 80023a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	00db      	lsls	r3, r3, #3
 80023a8:	4413      	add	r3, r2
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	6812      	ldr	r2, [r2, #0]
 80023ae:	4413      	add	r3, r2
 80023b0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80023b4:	881b      	ldrh	r3, [r3, #0]
 80023b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023ba:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80023bc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d028      	beq.n	8002414 <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6818      	ldr	r0, [r3, #0]
 80023c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c8:	6959      	ldr	r1, [r3, #20]
 80023ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023cc:	891a      	ldrh	r2, [r3, #8]
 80023ce:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80023d0:	f003 feaf 	bl	8006132 <USB_ReadPMA>
 80023d4:	e01e      	b.n	8002414 <PCD_EP_ISR_Handler+0x46e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023de:	b29b      	uxth	r3, r3
 80023e0:	461a      	mov	r2, r3
 80023e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	00db      	lsls	r3, r3, #3
 80023e8:	4413      	add	r3, r2
 80023ea:	687a      	ldr	r2, [r7, #4]
 80023ec:	6812      	ldr	r2, [r2, #0]
 80023ee:	4413      	add	r3, r2
 80023f0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80023f4:	881b      	ldrh	r3, [r3, #0]
 80023f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023fa:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80023fc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d008      	beq.n	8002414 <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6818      	ldr	r0, [r3, #0]
 8002406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002408:	6959      	ldr	r1, [r3, #20]
 800240a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240c:	895a      	ldrh	r2, [r3, #10]
 800240e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002410:	f003 fe8f 	bl	8006132 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002416:	69da      	ldr	r2, [r3, #28]
 8002418:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800241a:	441a      	add	r2, r3
 800241c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002422:	695a      	ldr	r2, [r3, #20]
 8002424:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002426:	441a      	add	r2, r3
 8002428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800242c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242e:	699b      	ldr	r3, [r3, #24]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d004      	beq.n	800243e <PCD_EP_ISR_Handler+0x498>
 8002434:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002438:	691b      	ldr	r3, [r3, #16]
 800243a:	429a      	cmp	r2, r3
 800243c:	d206      	bcs.n	800244c <PCD_EP_ISR_Handler+0x4a6>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800243e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	4619      	mov	r1, r3
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	f7ff fd3f 	bl	8001ec8 <HAL_PCD_DataOutStageCallback>
 800244a:	e005      	b.n	8002458 <PCD_EP_ISR_Handler+0x4b2>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002452:	4618      	mov	r0, r3
 8002454:	f002 fce7 	bl	8004e26 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002458:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800245a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800245e:	2b00      	cmp	r3, #0
 8002460:	d078      	beq.n	8002554 <PCD_EP_ISR_Handler+0x5ae>
      {
        ep = &hpcd->IN_ep[epindex];
 8002462:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002466:	1c5a      	adds	r2, r3, #1
 8002468:	4613      	mov	r3, r2
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	4413      	add	r3, r2
 800246e:	00db      	lsls	r3, r3, #3
 8002470:	687a      	ldr	r2, [r7, #4]
 8002472:	4413      	add	r3, r2
 8002474:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	461a      	mov	r2, r3
 800247c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	4413      	add	r3, r2
 8002484:	881b      	ldrh	r3, [r3, #0]
 8002486:	b29b      	uxth	r3, r3
 8002488:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800248c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002490:	843b      	strh	r3, [r7, #32]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	461a      	mov	r2, r3
 8002498:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	441a      	add	r2, r3
 80024a0:	8c3b      	ldrh	r3, [r7, #32]
 80024a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024aa:	b29b      	uxth	r3, r3
 80024ac:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 80024ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b0:	78db      	ldrb	r3, [r3, #3]
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d108      	bne.n	80024c8 <PCD_EP_ISR_Handler+0x522>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80024b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b8:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d144      	bne.n	8002548 <PCD_EP_ISR_Handler+0x5a2>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80024be:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80024c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d13f      	bne.n	8002548 <PCD_EP_ISR_Handler+0x5a2>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024d0:	b29b      	uxth	r3, r3
 80024d2:	461a      	mov	r2, r3
 80024d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	00db      	lsls	r3, r3, #3
 80024da:	4413      	add	r3, r2
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	6812      	ldr	r2, [r2, #0]
 80024e0:	4413      	add	r3, r2
 80024e2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80024e6:	881b      	ldrh	r3, [r3, #0]
 80024e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024ec:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80024ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f0:	699a      	ldr	r2, [r3, #24]
 80024f2:	8bfb      	ldrh	r3, [r7, #30]
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d906      	bls.n	8002506 <PCD_EP_ISR_Handler+0x560>
          {
            ep->xfer_len -= TxByteNbre;
 80024f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fa:	699a      	ldr	r2, [r3, #24]
 80024fc:	8bfb      	ldrh	r3, [r7, #30]
 80024fe:	1ad2      	subs	r2, r2, r3
 8002500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002502:	619a      	str	r2, [r3, #24]
 8002504:	e002      	b.n	800250c <PCD_EP_ISR_Handler+0x566>
          }
          else
          {
            ep->xfer_len = 0U;
 8002506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002508:	2200      	movs	r2, #0
 800250a:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 800250c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250e:	699b      	ldr	r3, [r3, #24]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d106      	bne.n	8002522 <PCD_EP_ISR_Handler+0x57c>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	4619      	mov	r1, r3
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f7ff fce0 	bl	8001ee0 <HAL_PCD_DataInStageCallback>
 8002520:	e018      	b.n	8002554 <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002524:	695a      	ldr	r2, [r3, #20]
 8002526:	8bfb      	ldrh	r3, [r7, #30]
 8002528:	441a      	add	r2, r3
 800252a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252c:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 800252e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002530:	69da      	ldr	r2, [r3, #28]
 8002532:	8bfb      	ldrh	r3, [r7, #30]
 8002534:	441a      	add	r2, r3
 8002536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002538:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002540:	4618      	mov	r0, r3
 8002542:	f002 fc70 	bl	8004e26 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002546:	e005      	b.n	8002554 <PCD_EP_ISR_Handler+0x5ae>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002548:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800254a:	461a      	mov	r2, r3
 800254c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f000 f917 	bl	8002782 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800255c:	b29b      	uxth	r3, r3
 800255e:	b21b      	sxth	r3, r3
 8002560:	2b00      	cmp	r3, #0
 8002562:	f6ff ad25 	blt.w	8001fb0 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002566:	2300      	movs	r3, #0
}
 8002568:	4618      	mov	r0, r3
 800256a:	3738      	adds	r7, #56	; 0x38
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}

08002570 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b088      	sub	sp, #32
 8002574:	af00      	add	r7, sp, #0
 8002576:	60f8      	str	r0, [r7, #12]
 8002578:	60b9      	str	r1, [r7, #8]
 800257a:	4613      	mov	r3, r2
 800257c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800257e:	88fb      	ldrh	r3, [r7, #6]
 8002580:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d07c      	beq.n	8002682 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002590:	b29b      	uxth	r3, r3
 8002592:	461a      	mov	r2, r3
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	00db      	lsls	r3, r3, #3
 800259a:	4413      	add	r3, r2
 800259c:	68fa      	ldr	r2, [r7, #12]
 800259e:	6812      	ldr	r2, [r2, #0]
 80025a0:	4413      	add	r3, r2
 80025a2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80025a6:	881b      	ldrh	r3, [r3, #0]
 80025a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025ac:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	699a      	ldr	r2, [r3, #24]
 80025b2:	8b7b      	ldrh	r3, [r7, #26]
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d306      	bcc.n	80025c6 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	699a      	ldr	r2, [r3, #24]
 80025bc:	8b7b      	ldrh	r3, [r7, #26]
 80025be:	1ad2      	subs	r2, r2, r3
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	619a      	str	r2, [r3, #24]
 80025c4:	e002      	b.n	80025cc <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	2200      	movs	r2, #0
 80025ca:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	699b      	ldr	r3, [r3, #24]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d123      	bne.n	800261c <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	461a      	mov	r2, r3
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	4413      	add	r3, r2
 80025e2:	881b      	ldrh	r3, [r3, #0]
 80025e4:	b29b      	uxth	r3, r3
 80025e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80025ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025ee:	833b      	strh	r3, [r7, #24]
 80025f0:	8b3b      	ldrh	r3, [r7, #24]
 80025f2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80025f6:	833b      	strh	r3, [r7, #24]
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	461a      	mov	r2, r3
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	441a      	add	r2, r3
 8002606:	8b3b      	ldrh	r3, [r7, #24]
 8002608:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800260c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002610:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002614:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002618:	b29b      	uxth	r3, r3
 800261a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800261c:	88fb      	ldrh	r3, [r7, #6]
 800261e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002622:	2b00      	cmp	r3, #0
 8002624:	d01f      	beq.n	8002666 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	461a      	mov	r2, r3
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	4413      	add	r3, r2
 8002634:	881b      	ldrh	r3, [r3, #0]
 8002636:	b29b      	uxth	r3, r3
 8002638:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800263c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002640:	82fb      	strh	r3, [r7, #22]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	461a      	mov	r2, r3
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	441a      	add	r2, r3
 8002650:	8afb      	ldrh	r3, [r7, #22]
 8002652:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002656:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800265a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800265e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002662:	b29b      	uxth	r3, r3
 8002664:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002666:	8b7b      	ldrh	r3, [r7, #26]
 8002668:	2b00      	cmp	r3, #0
 800266a:	f000 8085 	beq.w	8002778 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	6818      	ldr	r0, [r3, #0]
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	6959      	ldr	r1, [r3, #20]
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	891a      	ldrh	r2, [r3, #8]
 800267a:	8b7b      	ldrh	r3, [r7, #26]
 800267c:	f003 fd59 	bl	8006132 <USB_ReadPMA>
 8002680:	e07a      	b.n	8002778 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800268a:	b29b      	uxth	r3, r3
 800268c:	461a      	mov	r2, r3
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	00db      	lsls	r3, r3, #3
 8002694:	4413      	add	r3, r2
 8002696:	68fa      	ldr	r2, [r7, #12]
 8002698:	6812      	ldr	r2, [r2, #0]
 800269a:	4413      	add	r3, r2
 800269c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80026a0:	881b      	ldrh	r3, [r3, #0]
 80026a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026a6:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	699a      	ldr	r2, [r3, #24]
 80026ac:	8b7b      	ldrh	r3, [r7, #26]
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d306      	bcc.n	80026c0 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	699a      	ldr	r2, [r3, #24]
 80026b6:	8b7b      	ldrh	r3, [r7, #26]
 80026b8:	1ad2      	subs	r2, r2, r3
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	619a      	str	r2, [r3, #24]
 80026be:	e002      	b.n	80026c6 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	2200      	movs	r2, #0
 80026c4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	699b      	ldr	r3, [r3, #24]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d123      	bne.n	8002716 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	461a      	mov	r2, r3
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	781b      	ldrb	r3, [r3, #0]
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	4413      	add	r3, r2
 80026dc:	881b      	ldrh	r3, [r3, #0]
 80026de:	b29b      	uxth	r3, r3
 80026e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80026e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026e8:	83fb      	strh	r3, [r7, #30]
 80026ea:	8bfb      	ldrh	r3, [r7, #30]
 80026ec:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80026f0:	83fb      	strh	r3, [r7, #30]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	461a      	mov	r2, r3
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	441a      	add	r2, r3
 8002700:	8bfb      	ldrh	r3, [r7, #30]
 8002702:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002706:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800270a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800270e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002712:	b29b      	uxth	r3, r3
 8002714:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002716:	88fb      	ldrh	r3, [r7, #6]
 8002718:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800271c:	2b00      	cmp	r3, #0
 800271e:	d11f      	bne.n	8002760 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	461a      	mov	r2, r3
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	4413      	add	r3, r2
 800272e:	881b      	ldrh	r3, [r3, #0]
 8002730:	b29b      	uxth	r3, r3
 8002732:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002736:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800273a:	83bb      	strh	r3, [r7, #28]
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	461a      	mov	r2, r3
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	441a      	add	r2, r3
 800274a:	8bbb      	ldrh	r3, [r7, #28]
 800274c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002750:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002754:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002758:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800275c:	b29b      	uxth	r3, r3
 800275e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002760:	8b7b      	ldrh	r3, [r7, #26]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d008      	beq.n	8002778 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	6818      	ldr	r0, [r3, #0]
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	6959      	ldr	r1, [r3, #20]
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	895a      	ldrh	r2, [r3, #10]
 8002772:	8b7b      	ldrh	r3, [r7, #26]
 8002774:	f003 fcdd 	bl	8006132 <USB_ReadPMA>
    }
  }

  return count;
 8002778:	8b7b      	ldrh	r3, [r7, #26]
}
 800277a:	4618      	mov	r0, r3
 800277c:	3720      	adds	r7, #32
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}

08002782 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002782:	b580      	push	{r7, lr}
 8002784:	b094      	sub	sp, #80	; 0x50
 8002786:	af00      	add	r7, sp, #0
 8002788:	60f8      	str	r0, [r7, #12]
 800278a:	60b9      	str	r1, [r7, #8]
 800278c:	4613      	mov	r3, r2
 800278e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002790:	88fb      	ldrh	r3, [r7, #6]
 8002792:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002796:	2b00      	cmp	r3, #0
 8002798:	f000 8136 	beq.w	8002a08 <HAL_PCD_EP_DB_Transmit+0x286>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	461a      	mov	r2, r3
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	00db      	lsls	r3, r3, #3
 80027ae:	4413      	add	r3, r2
 80027b0:	68fa      	ldr	r2, [r7, #12]
 80027b2:	6812      	ldr	r2, [r2, #0]
 80027b4:	4413      	add	r3, r2
 80027b6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80027ba:	881b      	ldrh	r3, [r3, #0]
 80027bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027c0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len > TxByteNbre)
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	699a      	ldr	r2, [r3, #24]
 80027c8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d907      	bls.n	80027e0 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxByteNbre;
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	699a      	ldr	r2, [r3, #24]
 80027d4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80027d8:	1ad2      	subs	r2, r2, r3
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	619a      	str	r2, [r3, #24]
 80027de:	e002      	b.n	80027e6 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	2200      	movs	r2, #0
 80027e4:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	699b      	ldr	r3, [r3, #24]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d12c      	bne.n	8002848 <HAL_PCD_EP_DB_Transmit+0xc6>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	4619      	mov	r1, r3
 80027f4:	68f8      	ldr	r0, [r7, #12]
 80027f6:	f7ff fb73 	bl	8001ee0 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80027fa:	88fb      	ldrh	r3, [r7, #6]
 80027fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002800:	2b00      	cmp	r3, #0
 8002802:	f000 8238 	beq.w	8002c76 <HAL_PCD_EP_DB_Transmit+0x4f4>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	461a      	mov	r2, r3
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	4413      	add	r3, r2
 8002814:	881b      	ldrh	r3, [r3, #0]
 8002816:	b29b      	uxth	r3, r3
 8002818:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800281c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002820:	82fb      	strh	r3, [r7, #22]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	461a      	mov	r2, r3
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	441a      	add	r2, r3
 8002830:	8afb      	ldrh	r3, [r7, #22]
 8002832:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002836:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800283a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800283e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002842:	b29b      	uxth	r3, r3
 8002844:	8013      	strh	r3, [r2, #0]
 8002846:	e216      	b.n	8002c76 <HAL_PCD_EP_DB_Transmit+0x4f4>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002848:	88fb      	ldrh	r3, [r7, #6]
 800284a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d01f      	beq.n	8002892 <HAL_PCD_EP_DB_Transmit+0x110>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	461a      	mov	r2, r3
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	4413      	add	r3, r2
 8002860:	881b      	ldrh	r3, [r3, #0]
 8002862:	b29b      	uxth	r3, r3
 8002864:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002868:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800286c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	461a      	mov	r2, r3
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	441a      	add	r2, r3
 800287c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800287e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002882:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002886:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800288a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800288e:	b29b      	uxth	r3, r3
 8002890:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002898:	2b01      	cmp	r3, #1
 800289a:	f040 81ec 	bne.w	8002c76 <HAL_PCD_EP_DB_Transmit+0x4f4>
      {
        ep->xfer_buff += TxByteNbre;
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	695a      	ldr	r2, [r3, #20]
 80028a2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80028a6:	441a      	add	r2, r3
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	69da      	ldr	r2, [r3, #28]
 80028b0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80028b4:	441a      	add	r2, r3
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	6a1a      	ldr	r2, [r3, #32]
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	691b      	ldr	r3, [r3, #16]
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d309      	bcc.n	80028da <HAL_PCD_EP_DB_Transmit+0x158>
        {
          len = ep->maxpacket;
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	691b      	ldr	r3, [r3, #16]
 80028ca:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	6a1a      	ldr	r2, [r3, #32]
 80028d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028d2:	1ad2      	subs	r2, r2, r3
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	621a      	str	r2, [r3, #32]
 80028d8:	e015      	b.n	8002906 <HAL_PCD_EP_DB_Transmit+0x184>
        }
        else if (ep->xfer_len_db == 0U)
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	6a1b      	ldr	r3, [r3, #32]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d107      	bne.n	80028f2 <HAL_PCD_EP_DB_Transmit+0x170>
        {
          len = TxByteNbre;
 80028e2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80028e6:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	2200      	movs	r2, #0
 80028ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80028f0:	e009      	b.n	8002906 <HAL_PCD_EP_DB_Transmit+0x184>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	2200      	movs	r2, #0
 80028f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	6a1b      	ldr	r3, [r3, #32]
 80028fe:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	2200      	movs	r2, #0
 8002904:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	785b      	ldrb	r3, [r3, #1]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d155      	bne.n	80029ba <HAL_PCD_EP_DB_Transmit+0x238>
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	61fb      	str	r3, [r7, #28]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800291c:	b29b      	uxth	r3, r3
 800291e:	461a      	mov	r2, r3
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	4413      	add	r3, r2
 8002924:	61fb      	str	r3, [r7, #28]
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	781b      	ldrb	r3, [r3, #0]
 800292a:	00da      	lsls	r2, r3, #3
 800292c:	69fb      	ldr	r3, [r7, #28]
 800292e:	4413      	add	r3, r2
 8002930:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002934:	61bb      	str	r3, [r7, #24]
 8002936:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002938:	2b00      	cmp	r3, #0
 800293a:	d112      	bne.n	8002962 <HAL_PCD_EP_DB_Transmit+0x1e0>
 800293c:	69bb      	ldr	r3, [r7, #24]
 800293e:	881b      	ldrh	r3, [r3, #0]
 8002940:	b29b      	uxth	r3, r3
 8002942:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002946:	b29a      	uxth	r2, r3
 8002948:	69bb      	ldr	r3, [r7, #24]
 800294a:	801a      	strh	r2, [r3, #0]
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	881b      	ldrh	r3, [r3, #0]
 8002950:	b29b      	uxth	r3, r3
 8002952:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002956:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800295a:	b29a      	uxth	r2, r3
 800295c:	69bb      	ldr	r3, [r7, #24]
 800295e:	801a      	strh	r2, [r3, #0]
 8002960:	e047      	b.n	80029f2 <HAL_PCD_EP_DB_Transmit+0x270>
 8002962:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002964:	2b3e      	cmp	r3, #62	; 0x3e
 8002966:	d811      	bhi.n	800298c <HAL_PCD_EP_DB_Transmit+0x20a>
 8002968:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800296a:	085b      	lsrs	r3, r3, #1
 800296c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800296e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002970:	f003 0301 	and.w	r3, r3, #1
 8002974:	2b00      	cmp	r3, #0
 8002976:	d002      	beq.n	800297e <HAL_PCD_EP_DB_Transmit+0x1fc>
 8002978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800297a:	3301      	adds	r3, #1
 800297c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800297e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002980:	b29b      	uxth	r3, r3
 8002982:	029b      	lsls	r3, r3, #10
 8002984:	b29a      	uxth	r2, r3
 8002986:	69bb      	ldr	r3, [r7, #24]
 8002988:	801a      	strh	r2, [r3, #0]
 800298a:	e032      	b.n	80029f2 <HAL_PCD_EP_DB_Transmit+0x270>
 800298c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800298e:	095b      	lsrs	r3, r3, #5
 8002990:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002992:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002994:	f003 031f 	and.w	r3, r3, #31
 8002998:	2b00      	cmp	r3, #0
 800299a:	d102      	bne.n	80029a2 <HAL_PCD_EP_DB_Transmit+0x220>
 800299c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800299e:	3b01      	subs	r3, #1
 80029a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	029b      	lsls	r3, r3, #10
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029b2:	b29a      	uxth	r2, r3
 80029b4:	69bb      	ldr	r3, [r7, #24]
 80029b6:	801a      	strh	r2, [r3, #0]
 80029b8:	e01b      	b.n	80029f2 <HAL_PCD_EP_DB_Transmit+0x270>
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	785b      	ldrb	r3, [r3, #1]
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d117      	bne.n	80029f2 <HAL_PCD_EP_DB_Transmit+0x270>
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	627b      	str	r3, [r7, #36]	; 0x24
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	461a      	mov	r2, r3
 80029d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d6:	4413      	add	r3, r2
 80029d8:	627b      	str	r3, [r7, #36]	; 0x24
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	00da      	lsls	r2, r3, #3
 80029e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e2:	4413      	add	r3, r2
 80029e4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80029e8:	623b      	str	r3, [r7, #32]
 80029ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029ec:	b29a      	uxth	r2, r3
 80029ee:	6a3b      	ldr	r3, [r7, #32]
 80029f0:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	6818      	ldr	r0, [r3, #0]
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	6959      	ldr	r1, [r3, #20]
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	891a      	ldrh	r2, [r3, #8]
 80029fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	f003 fb54 	bl	80060ae <USB_WritePMA>
 8002a06:	e136      	b.n	8002c76 <HAL_PCD_EP_DB_Transmit+0x4f4>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a10:	b29b      	uxth	r3, r3
 8002a12:	461a      	mov	r2, r3
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	00db      	lsls	r3, r3, #3
 8002a1a:	4413      	add	r3, r2
 8002a1c:	68fa      	ldr	r2, [r7, #12]
 8002a1e:	6812      	ldr	r2, [r2, #0]
 8002a20:	4413      	add	r3, r2
 8002a22:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002a26:	881b      	ldrh	r3, [r3, #0]
 8002a28:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a2c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len >= TxByteNbre)
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	699a      	ldr	r2, [r3, #24]
 8002a34:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d307      	bcc.n	8002a4c <HAL_PCD_EP_DB_Transmit+0x2ca>
    {
      ep->xfer_len -= TxByteNbre;
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	699a      	ldr	r2, [r3, #24]
 8002a40:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002a44:	1ad2      	subs	r2, r2, r3
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	619a      	str	r2, [r3, #24]
 8002a4a:	e002      	b.n	8002a52 <HAL_PCD_EP_DB_Transmit+0x2d0>
    }
    else
    {
      ep->xfer_len = 0U;
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	699b      	ldr	r3, [r3, #24]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d12e      	bne.n	8002ab8 <HAL_PCD_EP_DB_Transmit+0x336>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	4619      	mov	r1, r3
 8002a60:	68f8      	ldr	r0, [r7, #12]
 8002a62:	f7ff fa3d 	bl	8001ee0 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002a66:	88fb      	ldrh	r3, [r7, #6]
 8002a68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	f040 8102 	bne.w	8002c76 <HAL_PCD_EP_DB_Transmit+0x4f4>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	461a      	mov	r2, r3
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	009b      	lsls	r3, r3, #2
 8002a7e:	4413      	add	r3, r2
 8002a80:	881b      	ldrh	r3, [r3, #0]
 8002a82:	b29b      	uxth	r3, r3
 8002a84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a8c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	461a      	mov	r2, r3
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	781b      	ldrb	r3, [r3, #0]
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	441a      	add	r2, r3
 8002a9e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002aa2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002aa6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002aaa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002aae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	8013      	strh	r3, [r2, #0]
 8002ab6:	e0de      	b.n	8002c76 <HAL_PCD_EP_DB_Transmit+0x4f4>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002ab8:	88fb      	ldrh	r3, [r7, #6]
 8002aba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d11f      	bne.n	8002b02 <HAL_PCD_EP_DB_Transmit+0x380>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	4413      	add	r3, r2
 8002ad0:	881b      	ldrh	r3, [r3, #0]
 8002ad2:	b29b      	uxth	r3, r3
 8002ad4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ad8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002adc:	867b      	strh	r3, [r7, #50]	; 0x32
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	441a      	add	r2, r3
 8002aec:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8002aee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002af2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002af6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002afa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002afe:	b29b      	uxth	r3, r3
 8002b00:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	f040 80b4 	bne.w	8002c76 <HAL_PCD_EP_DB_Transmit+0x4f4>
      {
        ep->xfer_buff += TxByteNbre;
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	695a      	ldr	r2, [r3, #20]
 8002b12:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002b16:	441a      	add	r2, r3
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	69da      	ldr	r2, [r3, #28]
 8002b20:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002b24:	441a      	add	r2, r3
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	6a1a      	ldr	r2, [r3, #32]
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	691b      	ldr	r3, [r3, #16]
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d309      	bcc.n	8002b4a <HAL_PCD_EP_DB_Transmit+0x3c8>
        {
          len = ep->maxpacket;
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	691b      	ldr	r3, [r3, #16]
 8002b3a:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	6a1a      	ldr	r2, [r3, #32]
 8002b40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b42:	1ad2      	subs	r2, r2, r3
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	621a      	str	r2, [r3, #32]
 8002b48:	e015      	b.n	8002b76 <HAL_PCD_EP_DB_Transmit+0x3f4>
        }
        else if (ep->xfer_len_db == 0U)
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	6a1b      	ldr	r3, [r3, #32]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d107      	bne.n	8002b62 <HAL_PCD_EP_DB_Transmit+0x3e0>
        {
          len = TxByteNbre;
 8002b52:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002b56:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002b60:	e009      	b.n	8002b76 <HAL_PCD_EP_DB_Transmit+0x3f4>
        }
        else
        {
          len = ep->xfer_len_db;
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	6a1b      	ldr	r3, [r3, #32]
 8002b66:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	2200      	movs	r2, #0
 8002b72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	643b      	str	r3, [r7, #64]	; 0x40
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	785b      	ldrb	r3, [r3, #1]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d155      	bne.n	8002c30 <HAL_PCD_EP_DB_Transmit+0x4ae>
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b92:	b29b      	uxth	r3, r3
 8002b94:	461a      	mov	r2, r3
 8002b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b98:	4413      	add	r3, r2
 8002b9a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	00da      	lsls	r2, r3, #3
 8002ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ba4:	4413      	add	r3, r2
 8002ba6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002baa:	637b      	str	r3, [r7, #52]	; 0x34
 8002bac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d112      	bne.n	8002bd8 <HAL_PCD_EP_DB_Transmit+0x456>
 8002bb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bb4:	881b      	ldrh	r3, [r3, #0]
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002bbc:	b29a      	uxth	r2, r3
 8002bbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bc0:	801a      	strh	r2, [r3, #0]
 8002bc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bc4:	881b      	ldrh	r3, [r3, #0]
 8002bc6:	b29b      	uxth	r3, r3
 8002bc8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002bcc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002bd0:	b29a      	uxth	r2, r3
 8002bd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bd4:	801a      	strh	r2, [r3, #0]
 8002bd6:	e044      	b.n	8002c62 <HAL_PCD_EP_DB_Transmit+0x4e0>
 8002bd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bda:	2b3e      	cmp	r3, #62	; 0x3e
 8002bdc:	d811      	bhi.n	8002c02 <HAL_PCD_EP_DB_Transmit+0x480>
 8002bde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002be0:	085b      	lsrs	r3, r3, #1
 8002be2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002be4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002be6:	f003 0301 	and.w	r3, r3, #1
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d002      	beq.n	8002bf4 <HAL_PCD_EP_DB_Transmit+0x472>
 8002bee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bf0:	3301      	adds	r3, #1
 8002bf2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002bf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	029b      	lsls	r3, r3, #10
 8002bfa:	b29a      	uxth	r2, r3
 8002bfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bfe:	801a      	strh	r2, [r3, #0]
 8002c00:	e02f      	b.n	8002c62 <HAL_PCD_EP_DB_Transmit+0x4e0>
 8002c02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c04:	095b      	lsrs	r3, r3, #5
 8002c06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c0a:	f003 031f 	and.w	r3, r3, #31
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d102      	bne.n	8002c18 <HAL_PCD_EP_DB_Transmit+0x496>
 8002c12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c14:	3b01      	subs	r3, #1
 8002c16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c1a:	b29b      	uxth	r3, r3
 8002c1c:	029b      	lsls	r3, r3, #10
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c28:	b29a      	uxth	r2, r3
 8002c2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c2c:	801a      	strh	r2, [r3, #0]
 8002c2e:	e018      	b.n	8002c62 <HAL_PCD_EP_DB_Transmit+0x4e0>
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	785b      	ldrb	r3, [r3, #1]
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d114      	bne.n	8002c62 <HAL_PCD_EP_DB_Transmit+0x4e0>
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c40:	b29b      	uxth	r3, r3
 8002c42:	461a      	mov	r2, r3
 8002c44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c46:	4413      	add	r3, r2
 8002c48:	643b      	str	r3, [r7, #64]	; 0x40
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	781b      	ldrb	r3, [r3, #0]
 8002c4e:	00da      	lsls	r2, r3, #3
 8002c50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c52:	4413      	add	r3, r2
 8002c54:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002c58:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c5c:	b29a      	uxth	r2, r3
 8002c5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c60:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	6818      	ldr	r0, [r3, #0]
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	6959      	ldr	r1, [r3, #20]
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	895a      	ldrh	r2, [r3, #10]
 8002c6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	f003 fa1c 	bl	80060ae <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	4413      	add	r3, r2
 8002c84:	881b      	ldrh	r3, [r3, #0]
 8002c86:	b29b      	uxth	r3, r3
 8002c88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c90:	82bb      	strh	r3, [r7, #20]
 8002c92:	8abb      	ldrh	r3, [r7, #20]
 8002c94:	f083 0310 	eor.w	r3, r3, #16
 8002c98:	82bb      	strh	r3, [r7, #20]
 8002c9a:	8abb      	ldrh	r3, [r7, #20]
 8002c9c:	f083 0320 	eor.w	r3, r3, #32
 8002ca0:	82bb      	strh	r3, [r7, #20]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	009b      	lsls	r3, r3, #2
 8002cae:	441a      	add	r2, r3
 8002cb0:	8abb      	ldrh	r3, [r7, #20]
 8002cb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002cb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002cba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002cc6:	2300      	movs	r3, #0
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3750      	adds	r7, #80	; 0x50
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}

08002cd0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	1d3b      	adds	r3, r7, #4
 8002cda:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002cdc:	1d3b      	adds	r3, r7, #4
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d102      	bne.n	8002cea <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	f000 bf01 	b.w	8003aec <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cea:	1d3b      	adds	r3, r7, #4
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0301 	and.w	r3, r3, #1
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	f000 8160 	beq.w	8002fba <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002cfa:	4bae      	ldr	r3, [pc, #696]	; (8002fb4 <HAL_RCC_OscConfig+0x2e4>)
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	f003 030c 	and.w	r3, r3, #12
 8002d02:	2b04      	cmp	r3, #4
 8002d04:	d00c      	beq.n	8002d20 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002d06:	4bab      	ldr	r3, [pc, #684]	; (8002fb4 <HAL_RCC_OscConfig+0x2e4>)
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	f003 030c 	and.w	r3, r3, #12
 8002d0e:	2b08      	cmp	r3, #8
 8002d10:	d159      	bne.n	8002dc6 <HAL_RCC_OscConfig+0xf6>
 8002d12:	4ba8      	ldr	r3, [pc, #672]	; (8002fb4 <HAL_RCC_OscConfig+0x2e4>)
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002d1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d1e:	d152      	bne.n	8002dc6 <HAL_RCC_OscConfig+0xf6>
 8002d20:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d24:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d28:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002d2c:	fa93 f3a3 	rbit	r3, r3
 8002d30:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  return result;
 8002d34:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d38:	fab3 f383 	clz	r3, r3
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	095b      	lsrs	r3, r3, #5
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	f043 0301 	orr.w	r3, r3, #1
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d102      	bne.n	8002d52 <HAL_RCC_OscConfig+0x82>
 8002d4c:	4b99      	ldr	r3, [pc, #612]	; (8002fb4 <HAL_RCC_OscConfig+0x2e4>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	e015      	b.n	8002d7e <HAL_RCC_OscConfig+0xae>
 8002d52:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d56:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d5a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8002d5e:	fa93 f3a3 	rbit	r3, r3
 8002d62:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8002d66:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d6a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002d6e:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8002d72:	fa93 f3a3 	rbit	r3, r3
 8002d76:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002d7a:	4b8e      	ldr	r3, [pc, #568]	; (8002fb4 <HAL_RCC_OscConfig+0x2e4>)
 8002d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002d82:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8002d86:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8002d8a:	fa92 f2a2 	rbit	r2, r2
 8002d8e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8002d92:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002d96:	fab2 f282 	clz	r2, r2
 8002d9a:	b2d2      	uxtb	r2, r2
 8002d9c:	f042 0220 	orr.w	r2, r2, #32
 8002da0:	b2d2      	uxtb	r2, r2
 8002da2:	f002 021f 	and.w	r2, r2, #31
 8002da6:	2101      	movs	r1, #1
 8002da8:	fa01 f202 	lsl.w	r2, r1, r2
 8002dac:	4013      	ands	r3, r2
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	f000 8102 	beq.w	8002fb8 <HAL_RCC_OscConfig+0x2e8>
 8002db4:	1d3b      	adds	r3, r7, #4
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	f040 80fc 	bne.w	8002fb8 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	f000 be93 	b.w	8003aec <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dc6:	1d3b      	adds	r3, r7, #4
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dd0:	d106      	bne.n	8002de0 <HAL_RCC_OscConfig+0x110>
 8002dd2:	4b78      	ldr	r3, [pc, #480]	; (8002fb4 <HAL_RCC_OscConfig+0x2e4>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a77      	ldr	r2, [pc, #476]	; (8002fb4 <HAL_RCC_OscConfig+0x2e4>)
 8002dd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ddc:	6013      	str	r3, [r2, #0]
 8002dde:	e030      	b.n	8002e42 <HAL_RCC_OscConfig+0x172>
 8002de0:	1d3b      	adds	r3, r7, #4
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d10c      	bne.n	8002e04 <HAL_RCC_OscConfig+0x134>
 8002dea:	4b72      	ldr	r3, [pc, #456]	; (8002fb4 <HAL_RCC_OscConfig+0x2e4>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a71      	ldr	r2, [pc, #452]	; (8002fb4 <HAL_RCC_OscConfig+0x2e4>)
 8002df0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002df4:	6013      	str	r3, [r2, #0]
 8002df6:	4b6f      	ldr	r3, [pc, #444]	; (8002fb4 <HAL_RCC_OscConfig+0x2e4>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a6e      	ldr	r2, [pc, #440]	; (8002fb4 <HAL_RCC_OscConfig+0x2e4>)
 8002dfc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e00:	6013      	str	r3, [r2, #0]
 8002e02:	e01e      	b.n	8002e42 <HAL_RCC_OscConfig+0x172>
 8002e04:	1d3b      	adds	r3, r7, #4
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e0e:	d10c      	bne.n	8002e2a <HAL_RCC_OscConfig+0x15a>
 8002e10:	4b68      	ldr	r3, [pc, #416]	; (8002fb4 <HAL_RCC_OscConfig+0x2e4>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a67      	ldr	r2, [pc, #412]	; (8002fb4 <HAL_RCC_OscConfig+0x2e4>)
 8002e16:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e1a:	6013      	str	r3, [r2, #0]
 8002e1c:	4b65      	ldr	r3, [pc, #404]	; (8002fb4 <HAL_RCC_OscConfig+0x2e4>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a64      	ldr	r2, [pc, #400]	; (8002fb4 <HAL_RCC_OscConfig+0x2e4>)
 8002e22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e26:	6013      	str	r3, [r2, #0]
 8002e28:	e00b      	b.n	8002e42 <HAL_RCC_OscConfig+0x172>
 8002e2a:	4b62      	ldr	r3, [pc, #392]	; (8002fb4 <HAL_RCC_OscConfig+0x2e4>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a61      	ldr	r2, [pc, #388]	; (8002fb4 <HAL_RCC_OscConfig+0x2e4>)
 8002e30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e34:	6013      	str	r3, [r2, #0]
 8002e36:	4b5f      	ldr	r3, [pc, #380]	; (8002fb4 <HAL_RCC_OscConfig+0x2e4>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a5e      	ldr	r2, [pc, #376]	; (8002fb4 <HAL_RCC_OscConfig+0x2e4>)
 8002e3c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e40:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e42:	1d3b      	adds	r3, r7, #4
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d059      	beq.n	8002f00 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e4c:	f7fd fe92 	bl	8000b74 <HAL_GetTick>
 8002e50:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e54:	e00a      	b.n	8002e6c <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e56:	f7fd fe8d 	bl	8000b74 <HAL_GetTick>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	2b64      	cmp	r3, #100	; 0x64
 8002e64:	d902      	bls.n	8002e6c <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	f000 be40 	b.w	8003aec <HAL_RCC_OscConfig+0xe1c>
 8002e6c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e70:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e74:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8002e78:	fa93 f3a3 	rbit	r3, r3
 8002e7c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8002e80:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e84:	fab3 f383 	clz	r3, r3
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	095b      	lsrs	r3, r3, #5
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	f043 0301 	orr.w	r3, r3, #1
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d102      	bne.n	8002e9e <HAL_RCC_OscConfig+0x1ce>
 8002e98:	4b46      	ldr	r3, [pc, #280]	; (8002fb4 <HAL_RCC_OscConfig+0x2e4>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	e015      	b.n	8002eca <HAL_RCC_OscConfig+0x1fa>
 8002e9e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ea2:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ea6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8002eaa:	fa93 f3a3 	rbit	r3, r3
 8002eae:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8002eb2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002eb6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002eba:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8002ebe:	fa93 f3a3 	rbit	r3, r3
 8002ec2:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002ec6:	4b3b      	ldr	r3, [pc, #236]	; (8002fb4 <HAL_RCC_OscConfig+0x2e4>)
 8002ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002ece:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8002ed2:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8002ed6:	fa92 f2a2 	rbit	r2, r2
 8002eda:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8002ede:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002ee2:	fab2 f282 	clz	r2, r2
 8002ee6:	b2d2      	uxtb	r2, r2
 8002ee8:	f042 0220 	orr.w	r2, r2, #32
 8002eec:	b2d2      	uxtb	r2, r2
 8002eee:	f002 021f 	and.w	r2, r2, #31
 8002ef2:	2101      	movs	r1, #1
 8002ef4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ef8:	4013      	ands	r3, r2
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d0ab      	beq.n	8002e56 <HAL_RCC_OscConfig+0x186>
 8002efe:	e05c      	b.n	8002fba <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f00:	f7fd fe38 	bl	8000b74 <HAL_GetTick>
 8002f04:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f08:	e00a      	b.n	8002f20 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f0a:	f7fd fe33 	bl	8000b74 <HAL_GetTick>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	2b64      	cmp	r3, #100	; 0x64
 8002f18:	d902      	bls.n	8002f20 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	f000 bde6 	b.w	8003aec <HAL_RCC_OscConfig+0xe1c>
 8002f20:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f24:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f28:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8002f2c:	fa93 f3a3 	rbit	r3, r3
 8002f30:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8002f34:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f38:	fab3 f383 	clz	r3, r3
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	095b      	lsrs	r3, r3, #5
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	f043 0301 	orr.w	r3, r3, #1
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d102      	bne.n	8002f52 <HAL_RCC_OscConfig+0x282>
 8002f4c:	4b19      	ldr	r3, [pc, #100]	; (8002fb4 <HAL_RCC_OscConfig+0x2e4>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	e015      	b.n	8002f7e <HAL_RCC_OscConfig+0x2ae>
 8002f52:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f56:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f5a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8002f5e:	fa93 f3a3 	rbit	r3, r3
 8002f62:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8002f66:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f6a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002f6e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002f72:	fa93 f3a3 	rbit	r3, r3
 8002f76:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002f7a:	4b0e      	ldr	r3, [pc, #56]	; (8002fb4 <HAL_RCC_OscConfig+0x2e4>)
 8002f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002f82:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8002f86:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8002f8a:	fa92 f2a2 	rbit	r2, r2
 8002f8e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8002f92:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002f96:	fab2 f282 	clz	r2, r2
 8002f9a:	b2d2      	uxtb	r2, r2
 8002f9c:	f042 0220 	orr.w	r2, r2, #32
 8002fa0:	b2d2      	uxtb	r2, r2
 8002fa2:	f002 021f 	and.w	r2, r2, #31
 8002fa6:	2101      	movs	r1, #1
 8002fa8:	fa01 f202 	lsl.w	r2, r1, r2
 8002fac:	4013      	ands	r3, r2
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d1ab      	bne.n	8002f0a <HAL_RCC_OscConfig+0x23a>
 8002fb2:	e002      	b.n	8002fba <HAL_RCC_OscConfig+0x2ea>
 8002fb4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fba:	1d3b      	adds	r3, r7, #4
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 0302 	and.w	r3, r3, #2
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	f000 8170 	beq.w	80032aa <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002fca:	4bd0      	ldr	r3, [pc, #832]	; (800330c <HAL_RCC_OscConfig+0x63c>)
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	f003 030c 	and.w	r3, r3, #12
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d00c      	beq.n	8002ff0 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002fd6:	4bcd      	ldr	r3, [pc, #820]	; (800330c <HAL_RCC_OscConfig+0x63c>)
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	f003 030c 	and.w	r3, r3, #12
 8002fde:	2b08      	cmp	r3, #8
 8002fe0:	d16d      	bne.n	80030be <HAL_RCC_OscConfig+0x3ee>
 8002fe2:	4bca      	ldr	r3, [pc, #808]	; (800330c <HAL_RCC_OscConfig+0x63c>)
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002fea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fee:	d166      	bne.n	80030be <HAL_RCC_OscConfig+0x3ee>
 8002ff0:	2302      	movs	r3, #2
 8002ff2:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff6:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8002ffa:	fa93 f3a3 	rbit	r3, r3
 8002ffe:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8003002:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003006:	fab3 f383 	clz	r3, r3
 800300a:	b2db      	uxtb	r3, r3
 800300c:	095b      	lsrs	r3, r3, #5
 800300e:	b2db      	uxtb	r3, r3
 8003010:	f043 0301 	orr.w	r3, r3, #1
 8003014:	b2db      	uxtb	r3, r3
 8003016:	2b01      	cmp	r3, #1
 8003018:	d102      	bne.n	8003020 <HAL_RCC_OscConfig+0x350>
 800301a:	4bbc      	ldr	r3, [pc, #752]	; (800330c <HAL_RCC_OscConfig+0x63c>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	e013      	b.n	8003048 <HAL_RCC_OscConfig+0x378>
 8003020:	2302      	movs	r3, #2
 8003022:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003026:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800302a:	fa93 f3a3 	rbit	r3, r3
 800302e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8003032:	2302      	movs	r3, #2
 8003034:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003038:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800303c:	fa93 f3a3 	rbit	r3, r3
 8003040:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003044:	4bb1      	ldr	r3, [pc, #708]	; (800330c <HAL_RCC_OscConfig+0x63c>)
 8003046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003048:	2202      	movs	r2, #2
 800304a:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 800304e:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8003052:	fa92 f2a2 	rbit	r2, r2
 8003056:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 800305a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800305e:	fab2 f282 	clz	r2, r2
 8003062:	b2d2      	uxtb	r2, r2
 8003064:	f042 0220 	orr.w	r2, r2, #32
 8003068:	b2d2      	uxtb	r2, r2
 800306a:	f002 021f 	and.w	r2, r2, #31
 800306e:	2101      	movs	r1, #1
 8003070:	fa01 f202 	lsl.w	r2, r1, r2
 8003074:	4013      	ands	r3, r2
 8003076:	2b00      	cmp	r3, #0
 8003078:	d007      	beq.n	800308a <HAL_RCC_OscConfig+0x3ba>
 800307a:	1d3b      	adds	r3, r7, #4
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	2b01      	cmp	r3, #1
 8003082:	d002      	beq.n	800308a <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	f000 bd31 	b.w	8003aec <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800308a:	4ba0      	ldr	r3, [pc, #640]	; (800330c <HAL_RCC_OscConfig+0x63c>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003092:	1d3b      	adds	r3, r7, #4
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	691b      	ldr	r3, [r3, #16]
 8003098:	21f8      	movs	r1, #248	; 0xf8
 800309a:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800309e:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80030a2:	fa91 f1a1 	rbit	r1, r1
 80030a6:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80030aa:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80030ae:	fab1 f181 	clz	r1, r1
 80030b2:	b2c9      	uxtb	r1, r1
 80030b4:	408b      	lsls	r3, r1
 80030b6:	4995      	ldr	r1, [pc, #596]	; (800330c <HAL_RCC_OscConfig+0x63c>)
 80030b8:	4313      	orrs	r3, r2
 80030ba:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030bc:	e0f5      	b.n	80032aa <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030be:	1d3b      	adds	r3, r7, #4
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	f000 8085 	beq.w	80031d4 <HAL_RCC_OscConfig+0x504>
 80030ca:	2301      	movs	r3, #1
 80030cc:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030d0:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80030d4:	fa93 f3a3 	rbit	r3, r3
 80030d8:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 80030dc:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030e0:	fab3 f383 	clz	r3, r3
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80030ea:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	461a      	mov	r2, r3
 80030f2:	2301      	movs	r3, #1
 80030f4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030f6:	f7fd fd3d 	bl	8000b74 <HAL_GetTick>
 80030fa:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030fe:	e00a      	b.n	8003116 <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003100:	f7fd fd38 	bl	8000b74 <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800310a:	1ad3      	subs	r3, r2, r3
 800310c:	2b02      	cmp	r3, #2
 800310e:	d902      	bls.n	8003116 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8003110:	2303      	movs	r3, #3
 8003112:	f000 bceb 	b.w	8003aec <HAL_RCC_OscConfig+0xe1c>
 8003116:	2302      	movs	r3, #2
 8003118:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800311c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003120:	fa93 f3a3 	rbit	r3, r3
 8003124:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8003128:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800312c:	fab3 f383 	clz	r3, r3
 8003130:	b2db      	uxtb	r3, r3
 8003132:	095b      	lsrs	r3, r3, #5
 8003134:	b2db      	uxtb	r3, r3
 8003136:	f043 0301 	orr.w	r3, r3, #1
 800313a:	b2db      	uxtb	r3, r3
 800313c:	2b01      	cmp	r3, #1
 800313e:	d102      	bne.n	8003146 <HAL_RCC_OscConfig+0x476>
 8003140:	4b72      	ldr	r3, [pc, #456]	; (800330c <HAL_RCC_OscConfig+0x63c>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	e013      	b.n	800316e <HAL_RCC_OscConfig+0x49e>
 8003146:	2302      	movs	r3, #2
 8003148:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800314c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003150:	fa93 f3a3 	rbit	r3, r3
 8003154:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8003158:	2302      	movs	r3, #2
 800315a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800315e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003162:	fa93 f3a3 	rbit	r3, r3
 8003166:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800316a:	4b68      	ldr	r3, [pc, #416]	; (800330c <HAL_RCC_OscConfig+0x63c>)
 800316c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316e:	2202      	movs	r2, #2
 8003170:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8003174:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8003178:	fa92 f2a2 	rbit	r2, r2
 800317c:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8003180:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003184:	fab2 f282 	clz	r2, r2
 8003188:	b2d2      	uxtb	r2, r2
 800318a:	f042 0220 	orr.w	r2, r2, #32
 800318e:	b2d2      	uxtb	r2, r2
 8003190:	f002 021f 	and.w	r2, r2, #31
 8003194:	2101      	movs	r1, #1
 8003196:	fa01 f202 	lsl.w	r2, r1, r2
 800319a:	4013      	ands	r3, r2
 800319c:	2b00      	cmp	r3, #0
 800319e:	d0af      	beq.n	8003100 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031a0:	4b5a      	ldr	r3, [pc, #360]	; (800330c <HAL_RCC_OscConfig+0x63c>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031a8:	1d3b      	adds	r3, r7, #4
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	691b      	ldr	r3, [r3, #16]
 80031ae:	21f8      	movs	r1, #248	; 0xf8
 80031b0:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031b4:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80031b8:	fa91 f1a1 	rbit	r1, r1
 80031bc:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80031c0:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80031c4:	fab1 f181 	clz	r1, r1
 80031c8:	b2c9      	uxtb	r1, r1
 80031ca:	408b      	lsls	r3, r1
 80031cc:	494f      	ldr	r1, [pc, #316]	; (800330c <HAL_RCC_OscConfig+0x63c>)
 80031ce:	4313      	orrs	r3, r2
 80031d0:	600b      	str	r3, [r1, #0]
 80031d2:	e06a      	b.n	80032aa <HAL_RCC_OscConfig+0x5da>
 80031d4:	2301      	movs	r3, #1
 80031d6:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031da:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80031de:	fa93 f3a3 	rbit	r3, r3
 80031e2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80031e6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031ea:	fab3 f383 	clz	r3, r3
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80031f4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	461a      	mov	r2, r3
 80031fc:	2300      	movs	r3, #0
 80031fe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003200:	f7fd fcb8 	bl	8000b74 <HAL_GetTick>
 8003204:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003208:	e00a      	b.n	8003220 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800320a:	f7fd fcb3 	bl	8000b74 <HAL_GetTick>
 800320e:	4602      	mov	r2, r0
 8003210:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	2b02      	cmp	r3, #2
 8003218:	d902      	bls.n	8003220 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 800321a:	2303      	movs	r3, #3
 800321c:	f000 bc66 	b.w	8003aec <HAL_RCC_OscConfig+0xe1c>
 8003220:	2302      	movs	r3, #2
 8003222:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003226:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800322a:	fa93 f3a3 	rbit	r3, r3
 800322e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8003232:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003236:	fab3 f383 	clz	r3, r3
 800323a:	b2db      	uxtb	r3, r3
 800323c:	095b      	lsrs	r3, r3, #5
 800323e:	b2db      	uxtb	r3, r3
 8003240:	f043 0301 	orr.w	r3, r3, #1
 8003244:	b2db      	uxtb	r3, r3
 8003246:	2b01      	cmp	r3, #1
 8003248:	d102      	bne.n	8003250 <HAL_RCC_OscConfig+0x580>
 800324a:	4b30      	ldr	r3, [pc, #192]	; (800330c <HAL_RCC_OscConfig+0x63c>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	e013      	b.n	8003278 <HAL_RCC_OscConfig+0x5a8>
 8003250:	2302      	movs	r3, #2
 8003252:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003256:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800325a:	fa93 f3a3 	rbit	r3, r3
 800325e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003262:	2302      	movs	r3, #2
 8003264:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003268:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800326c:	fa93 f3a3 	rbit	r3, r3
 8003270:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003274:	4b25      	ldr	r3, [pc, #148]	; (800330c <HAL_RCC_OscConfig+0x63c>)
 8003276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003278:	2202      	movs	r2, #2
 800327a:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800327e:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8003282:	fa92 f2a2 	rbit	r2, r2
 8003286:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 800328a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800328e:	fab2 f282 	clz	r2, r2
 8003292:	b2d2      	uxtb	r2, r2
 8003294:	f042 0220 	orr.w	r2, r2, #32
 8003298:	b2d2      	uxtb	r2, r2
 800329a:	f002 021f 	and.w	r2, r2, #31
 800329e:	2101      	movs	r1, #1
 80032a0:	fa01 f202 	lsl.w	r2, r1, r2
 80032a4:	4013      	ands	r3, r2
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d1af      	bne.n	800320a <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032aa:	1d3b      	adds	r3, r7, #4
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 0308 	and.w	r3, r3, #8
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	f000 80da 	beq.w	800346e <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80032ba:	1d3b      	adds	r3, r7, #4
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	695b      	ldr	r3, [r3, #20]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d069      	beq.n	8003398 <HAL_RCC_OscConfig+0x6c8>
 80032c4:	2301      	movs	r3, #1
 80032c6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032ce:	fa93 f3a3 	rbit	r3, r3
 80032d2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80032d6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032da:	fab3 f383 	clz	r3, r3
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	461a      	mov	r2, r3
 80032e2:	4b0b      	ldr	r3, [pc, #44]	; (8003310 <HAL_RCC_OscConfig+0x640>)
 80032e4:	4413      	add	r3, r2
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	461a      	mov	r2, r3
 80032ea:	2301      	movs	r3, #1
 80032ec:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032ee:	f7fd fc41 	bl	8000b74 <HAL_GetTick>
 80032f2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032f6:	e00d      	b.n	8003314 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032f8:	f7fd fc3c 	bl	8000b74 <HAL_GetTick>
 80032fc:	4602      	mov	r2, r0
 80032fe:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003302:	1ad3      	subs	r3, r2, r3
 8003304:	2b02      	cmp	r3, #2
 8003306:	d905      	bls.n	8003314 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8003308:	2303      	movs	r3, #3
 800330a:	e3ef      	b.n	8003aec <HAL_RCC_OscConfig+0xe1c>
 800330c:	40021000 	.word	0x40021000
 8003310:	10908120 	.word	0x10908120
 8003314:	2302      	movs	r3, #2
 8003316:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800331a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800331e:	fa93 f2a3 	rbit	r2, r3
 8003322:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003326:	601a      	str	r2, [r3, #0]
 8003328:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800332c:	2202      	movs	r2, #2
 800332e:	601a      	str	r2, [r3, #0]
 8003330:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	fa93 f2a3 	rbit	r2, r3
 800333a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800333e:	601a      	str	r2, [r3, #0]
 8003340:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003344:	2202      	movs	r2, #2
 8003346:	601a      	str	r2, [r3, #0]
 8003348:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	fa93 f2a3 	rbit	r2, r3
 8003352:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003356:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003358:	4ba4      	ldr	r3, [pc, #656]	; (80035ec <HAL_RCC_OscConfig+0x91c>)
 800335a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800335c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003360:	2102      	movs	r1, #2
 8003362:	6019      	str	r1, [r3, #0]
 8003364:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	fa93 f1a3 	rbit	r1, r3
 800336e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003372:	6019      	str	r1, [r3, #0]
  return result;
 8003374:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	fab3 f383 	clz	r3, r3
 800337e:	b2db      	uxtb	r3, r3
 8003380:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003384:	b2db      	uxtb	r3, r3
 8003386:	f003 031f 	and.w	r3, r3, #31
 800338a:	2101      	movs	r1, #1
 800338c:	fa01 f303 	lsl.w	r3, r1, r3
 8003390:	4013      	ands	r3, r2
 8003392:	2b00      	cmp	r3, #0
 8003394:	d0b0      	beq.n	80032f8 <HAL_RCC_OscConfig+0x628>
 8003396:	e06a      	b.n	800346e <HAL_RCC_OscConfig+0x79e>
 8003398:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800339c:	2201      	movs	r2, #1
 800339e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033a0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	fa93 f2a3 	rbit	r2, r3
 80033aa:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80033ae:	601a      	str	r2, [r3, #0]
  return result;
 80033b0:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80033b4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033b6:	fab3 f383 	clz	r3, r3
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	461a      	mov	r2, r3
 80033be:	4b8c      	ldr	r3, [pc, #560]	; (80035f0 <HAL_RCC_OscConfig+0x920>)
 80033c0:	4413      	add	r3, r2
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	461a      	mov	r2, r3
 80033c6:	2300      	movs	r3, #0
 80033c8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033ca:	f7fd fbd3 	bl	8000b74 <HAL_GetTick>
 80033ce:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033d2:	e009      	b.n	80033e8 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033d4:	f7fd fbce 	bl	8000b74 <HAL_GetTick>
 80033d8:	4602      	mov	r2, r0
 80033da:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	2b02      	cmp	r3, #2
 80033e2:	d901      	bls.n	80033e8 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 80033e4:	2303      	movs	r3, #3
 80033e6:	e381      	b.n	8003aec <HAL_RCC_OscConfig+0xe1c>
 80033e8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80033ec:	2202      	movs	r2, #2
 80033ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033f0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	fa93 f2a3 	rbit	r2, r3
 80033fa:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80033fe:	601a      	str	r2, [r3, #0]
 8003400:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003404:	2202      	movs	r2, #2
 8003406:	601a      	str	r2, [r3, #0]
 8003408:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	fa93 f2a3 	rbit	r2, r3
 8003412:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003416:	601a      	str	r2, [r3, #0]
 8003418:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800341c:	2202      	movs	r2, #2
 800341e:	601a      	str	r2, [r3, #0]
 8003420:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	fa93 f2a3 	rbit	r2, r3
 800342a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800342e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003430:	4b6e      	ldr	r3, [pc, #440]	; (80035ec <HAL_RCC_OscConfig+0x91c>)
 8003432:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003434:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003438:	2102      	movs	r1, #2
 800343a:	6019      	str	r1, [r3, #0]
 800343c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	fa93 f1a3 	rbit	r1, r3
 8003446:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800344a:	6019      	str	r1, [r3, #0]
  return result;
 800344c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	fab3 f383 	clz	r3, r3
 8003456:	b2db      	uxtb	r3, r3
 8003458:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800345c:	b2db      	uxtb	r3, r3
 800345e:	f003 031f 	and.w	r3, r3, #31
 8003462:	2101      	movs	r1, #1
 8003464:	fa01 f303 	lsl.w	r3, r1, r3
 8003468:	4013      	ands	r3, r2
 800346a:	2b00      	cmp	r3, #0
 800346c:	d1b2      	bne.n	80033d4 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800346e:	1d3b      	adds	r3, r7, #4
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 0304 	and.w	r3, r3, #4
 8003478:	2b00      	cmp	r3, #0
 800347a:	f000 8157 	beq.w	800372c <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800347e:	2300      	movs	r3, #0
 8003480:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003484:	4b59      	ldr	r3, [pc, #356]	; (80035ec <HAL_RCC_OscConfig+0x91c>)
 8003486:	69db      	ldr	r3, [r3, #28]
 8003488:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800348c:	2b00      	cmp	r3, #0
 800348e:	d112      	bne.n	80034b6 <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003490:	4b56      	ldr	r3, [pc, #344]	; (80035ec <HAL_RCC_OscConfig+0x91c>)
 8003492:	69db      	ldr	r3, [r3, #28]
 8003494:	4a55      	ldr	r2, [pc, #340]	; (80035ec <HAL_RCC_OscConfig+0x91c>)
 8003496:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800349a:	61d3      	str	r3, [r2, #28]
 800349c:	4b53      	ldr	r3, [pc, #332]	; (80035ec <HAL_RCC_OscConfig+0x91c>)
 800349e:	69db      	ldr	r3, [r3, #28]
 80034a0:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80034a4:	f107 030c 	add.w	r3, r7, #12
 80034a8:	601a      	str	r2, [r3, #0]
 80034aa:	f107 030c 	add.w	r3, r7, #12
 80034ae:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80034b0:	2301      	movs	r3, #1
 80034b2:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034b6:	4b4f      	ldr	r3, [pc, #316]	; (80035f4 <HAL_RCC_OscConfig+0x924>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d11a      	bne.n	80034f8 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034c2:	4b4c      	ldr	r3, [pc, #304]	; (80035f4 <HAL_RCC_OscConfig+0x924>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a4b      	ldr	r2, [pc, #300]	; (80035f4 <HAL_RCC_OscConfig+0x924>)
 80034c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034cc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034ce:	f7fd fb51 	bl	8000b74 <HAL_GetTick>
 80034d2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034d6:	e009      	b.n	80034ec <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034d8:	f7fd fb4c 	bl	8000b74 <HAL_GetTick>
 80034dc:	4602      	mov	r2, r0
 80034de:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80034e2:	1ad3      	subs	r3, r2, r3
 80034e4:	2b64      	cmp	r3, #100	; 0x64
 80034e6:	d901      	bls.n	80034ec <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 80034e8:	2303      	movs	r3, #3
 80034ea:	e2ff      	b.n	8003aec <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034ec:	4b41      	ldr	r3, [pc, #260]	; (80035f4 <HAL_RCC_OscConfig+0x924>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d0ef      	beq.n	80034d8 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034f8:	1d3b      	adds	r3, r7, #4
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	2b01      	cmp	r3, #1
 8003500:	d106      	bne.n	8003510 <HAL_RCC_OscConfig+0x840>
 8003502:	4b3a      	ldr	r3, [pc, #232]	; (80035ec <HAL_RCC_OscConfig+0x91c>)
 8003504:	6a1b      	ldr	r3, [r3, #32]
 8003506:	4a39      	ldr	r2, [pc, #228]	; (80035ec <HAL_RCC_OscConfig+0x91c>)
 8003508:	f043 0301 	orr.w	r3, r3, #1
 800350c:	6213      	str	r3, [r2, #32]
 800350e:	e02f      	b.n	8003570 <HAL_RCC_OscConfig+0x8a0>
 8003510:	1d3b      	adds	r3, r7, #4
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d10c      	bne.n	8003534 <HAL_RCC_OscConfig+0x864>
 800351a:	4b34      	ldr	r3, [pc, #208]	; (80035ec <HAL_RCC_OscConfig+0x91c>)
 800351c:	6a1b      	ldr	r3, [r3, #32]
 800351e:	4a33      	ldr	r2, [pc, #204]	; (80035ec <HAL_RCC_OscConfig+0x91c>)
 8003520:	f023 0301 	bic.w	r3, r3, #1
 8003524:	6213      	str	r3, [r2, #32]
 8003526:	4b31      	ldr	r3, [pc, #196]	; (80035ec <HAL_RCC_OscConfig+0x91c>)
 8003528:	6a1b      	ldr	r3, [r3, #32]
 800352a:	4a30      	ldr	r2, [pc, #192]	; (80035ec <HAL_RCC_OscConfig+0x91c>)
 800352c:	f023 0304 	bic.w	r3, r3, #4
 8003530:	6213      	str	r3, [r2, #32]
 8003532:	e01d      	b.n	8003570 <HAL_RCC_OscConfig+0x8a0>
 8003534:	1d3b      	adds	r3, r7, #4
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	2b05      	cmp	r3, #5
 800353c:	d10c      	bne.n	8003558 <HAL_RCC_OscConfig+0x888>
 800353e:	4b2b      	ldr	r3, [pc, #172]	; (80035ec <HAL_RCC_OscConfig+0x91c>)
 8003540:	6a1b      	ldr	r3, [r3, #32]
 8003542:	4a2a      	ldr	r2, [pc, #168]	; (80035ec <HAL_RCC_OscConfig+0x91c>)
 8003544:	f043 0304 	orr.w	r3, r3, #4
 8003548:	6213      	str	r3, [r2, #32]
 800354a:	4b28      	ldr	r3, [pc, #160]	; (80035ec <HAL_RCC_OscConfig+0x91c>)
 800354c:	6a1b      	ldr	r3, [r3, #32]
 800354e:	4a27      	ldr	r2, [pc, #156]	; (80035ec <HAL_RCC_OscConfig+0x91c>)
 8003550:	f043 0301 	orr.w	r3, r3, #1
 8003554:	6213      	str	r3, [r2, #32]
 8003556:	e00b      	b.n	8003570 <HAL_RCC_OscConfig+0x8a0>
 8003558:	4b24      	ldr	r3, [pc, #144]	; (80035ec <HAL_RCC_OscConfig+0x91c>)
 800355a:	6a1b      	ldr	r3, [r3, #32]
 800355c:	4a23      	ldr	r2, [pc, #140]	; (80035ec <HAL_RCC_OscConfig+0x91c>)
 800355e:	f023 0301 	bic.w	r3, r3, #1
 8003562:	6213      	str	r3, [r2, #32]
 8003564:	4b21      	ldr	r3, [pc, #132]	; (80035ec <HAL_RCC_OscConfig+0x91c>)
 8003566:	6a1b      	ldr	r3, [r3, #32]
 8003568:	4a20      	ldr	r2, [pc, #128]	; (80035ec <HAL_RCC_OscConfig+0x91c>)
 800356a:	f023 0304 	bic.w	r3, r3, #4
 800356e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003570:	1d3b      	adds	r3, r7, #4
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d06a      	beq.n	8003650 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800357a:	f7fd fafb 	bl	8000b74 <HAL_GetTick>
 800357e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003582:	e00b      	b.n	800359c <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003584:	f7fd faf6 	bl	8000b74 <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800358e:	1ad3      	subs	r3, r2, r3
 8003590:	f241 3288 	movw	r2, #5000	; 0x1388
 8003594:	4293      	cmp	r3, r2
 8003596:	d901      	bls.n	800359c <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8003598:	2303      	movs	r3, #3
 800359a:	e2a7      	b.n	8003aec <HAL_RCC_OscConfig+0xe1c>
 800359c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80035a0:	2202      	movs	r2, #2
 80035a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035a4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	fa93 f2a3 	rbit	r2, r3
 80035ae:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80035b2:	601a      	str	r2, [r3, #0]
 80035b4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80035b8:	2202      	movs	r2, #2
 80035ba:	601a      	str	r2, [r3, #0]
 80035bc:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	fa93 f2a3 	rbit	r2, r3
 80035c6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80035ca:	601a      	str	r2, [r3, #0]
  return result;
 80035cc:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80035d0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035d2:	fab3 f383 	clz	r3, r3
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	095b      	lsrs	r3, r3, #5
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	f043 0302 	orr.w	r3, r3, #2
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	2b02      	cmp	r3, #2
 80035e4:	d108      	bne.n	80035f8 <HAL_RCC_OscConfig+0x928>
 80035e6:	4b01      	ldr	r3, [pc, #4]	; (80035ec <HAL_RCC_OscConfig+0x91c>)
 80035e8:	6a1b      	ldr	r3, [r3, #32]
 80035ea:	e013      	b.n	8003614 <HAL_RCC_OscConfig+0x944>
 80035ec:	40021000 	.word	0x40021000
 80035f0:	10908120 	.word	0x10908120
 80035f4:	40007000 	.word	0x40007000
 80035f8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80035fc:	2202      	movs	r2, #2
 80035fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003600:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	fa93 f2a3 	rbit	r2, r3
 800360a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800360e:	601a      	str	r2, [r3, #0]
 8003610:	4bc0      	ldr	r3, [pc, #768]	; (8003914 <HAL_RCC_OscConfig+0xc44>)
 8003612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003614:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8003618:	2102      	movs	r1, #2
 800361a:	6011      	str	r1, [r2, #0]
 800361c:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8003620:	6812      	ldr	r2, [r2, #0]
 8003622:	fa92 f1a2 	rbit	r1, r2
 8003626:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800362a:	6011      	str	r1, [r2, #0]
  return result;
 800362c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003630:	6812      	ldr	r2, [r2, #0]
 8003632:	fab2 f282 	clz	r2, r2
 8003636:	b2d2      	uxtb	r2, r2
 8003638:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800363c:	b2d2      	uxtb	r2, r2
 800363e:	f002 021f 	and.w	r2, r2, #31
 8003642:	2101      	movs	r1, #1
 8003644:	fa01 f202 	lsl.w	r2, r1, r2
 8003648:	4013      	ands	r3, r2
 800364a:	2b00      	cmp	r3, #0
 800364c:	d09a      	beq.n	8003584 <HAL_RCC_OscConfig+0x8b4>
 800364e:	e063      	b.n	8003718 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003650:	f7fd fa90 	bl	8000b74 <HAL_GetTick>
 8003654:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003658:	e00b      	b.n	8003672 <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800365a:	f7fd fa8b 	bl	8000b74 <HAL_GetTick>
 800365e:	4602      	mov	r2, r0
 8003660:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	f241 3288 	movw	r2, #5000	; 0x1388
 800366a:	4293      	cmp	r3, r2
 800366c:	d901      	bls.n	8003672 <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	e23c      	b.n	8003aec <HAL_RCC_OscConfig+0xe1c>
 8003672:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003676:	2202      	movs	r2, #2
 8003678:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800367a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	fa93 f2a3 	rbit	r2, r3
 8003684:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003688:	601a      	str	r2, [r3, #0]
 800368a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800368e:	2202      	movs	r2, #2
 8003690:	601a      	str	r2, [r3, #0]
 8003692:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	fa93 f2a3 	rbit	r2, r3
 800369c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80036a0:	601a      	str	r2, [r3, #0]
  return result;
 80036a2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80036a6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036a8:	fab3 f383 	clz	r3, r3
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	095b      	lsrs	r3, r3, #5
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	f043 0302 	orr.w	r3, r3, #2
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	2b02      	cmp	r3, #2
 80036ba:	d102      	bne.n	80036c2 <HAL_RCC_OscConfig+0x9f2>
 80036bc:	4b95      	ldr	r3, [pc, #596]	; (8003914 <HAL_RCC_OscConfig+0xc44>)
 80036be:	6a1b      	ldr	r3, [r3, #32]
 80036c0:	e00d      	b.n	80036de <HAL_RCC_OscConfig+0xa0e>
 80036c2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80036c6:	2202      	movs	r2, #2
 80036c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ca:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	fa93 f2a3 	rbit	r2, r3
 80036d4:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80036d8:	601a      	str	r2, [r3, #0]
 80036da:	4b8e      	ldr	r3, [pc, #568]	; (8003914 <HAL_RCC_OscConfig+0xc44>)
 80036dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036de:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80036e2:	2102      	movs	r1, #2
 80036e4:	6011      	str	r1, [r2, #0]
 80036e6:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80036ea:	6812      	ldr	r2, [r2, #0]
 80036ec:	fa92 f1a2 	rbit	r1, r2
 80036f0:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80036f4:	6011      	str	r1, [r2, #0]
  return result;
 80036f6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80036fa:	6812      	ldr	r2, [r2, #0]
 80036fc:	fab2 f282 	clz	r2, r2
 8003700:	b2d2      	uxtb	r2, r2
 8003702:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003706:	b2d2      	uxtb	r2, r2
 8003708:	f002 021f 	and.w	r2, r2, #31
 800370c:	2101      	movs	r1, #1
 800370e:	fa01 f202 	lsl.w	r2, r1, r2
 8003712:	4013      	ands	r3, r2
 8003714:	2b00      	cmp	r3, #0
 8003716:	d1a0      	bne.n	800365a <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003718:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 800371c:	2b01      	cmp	r3, #1
 800371e:	d105      	bne.n	800372c <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003720:	4b7c      	ldr	r3, [pc, #496]	; (8003914 <HAL_RCC_OscConfig+0xc44>)
 8003722:	69db      	ldr	r3, [r3, #28]
 8003724:	4a7b      	ldr	r2, [pc, #492]	; (8003914 <HAL_RCC_OscConfig+0xc44>)
 8003726:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800372a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800372c:	1d3b      	adds	r3, r7, #4
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	699b      	ldr	r3, [r3, #24]
 8003732:	2b00      	cmp	r3, #0
 8003734:	f000 81d9 	beq.w	8003aea <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003738:	4b76      	ldr	r3, [pc, #472]	; (8003914 <HAL_RCC_OscConfig+0xc44>)
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	f003 030c 	and.w	r3, r3, #12
 8003740:	2b08      	cmp	r3, #8
 8003742:	f000 81a6 	beq.w	8003a92 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003746:	1d3b      	adds	r3, r7, #4
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	699b      	ldr	r3, [r3, #24]
 800374c:	2b02      	cmp	r3, #2
 800374e:	f040 811e 	bne.w	800398e <HAL_RCC_OscConfig+0xcbe>
 8003752:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8003756:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800375a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800375c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	fa93 f2a3 	rbit	r2, r3
 8003766:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800376a:	601a      	str	r2, [r3, #0]
  return result;
 800376c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003770:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003772:	fab3 f383 	clz	r3, r3
 8003776:	b2db      	uxtb	r3, r3
 8003778:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800377c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	461a      	mov	r2, r3
 8003784:	2300      	movs	r3, #0
 8003786:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003788:	f7fd f9f4 	bl	8000b74 <HAL_GetTick>
 800378c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003790:	e009      	b.n	80037a6 <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003792:	f7fd f9ef 	bl	8000b74 <HAL_GetTick>
 8003796:	4602      	mov	r2, r0
 8003798:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d901      	bls.n	80037a6 <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e1a2      	b.n	8003aec <HAL_RCC_OscConfig+0xe1c>
 80037a6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80037aa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037b0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	fa93 f2a3 	rbit	r2, r3
 80037ba:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80037be:	601a      	str	r2, [r3, #0]
  return result;
 80037c0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80037c4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037c6:	fab3 f383 	clz	r3, r3
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	095b      	lsrs	r3, r3, #5
 80037ce:	b2db      	uxtb	r3, r3
 80037d0:	f043 0301 	orr.w	r3, r3, #1
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d102      	bne.n	80037e0 <HAL_RCC_OscConfig+0xb10>
 80037da:	4b4e      	ldr	r3, [pc, #312]	; (8003914 <HAL_RCC_OscConfig+0xc44>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	e01b      	b.n	8003818 <HAL_RCC_OscConfig+0xb48>
 80037e0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80037e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ea:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	fa93 f2a3 	rbit	r2, r3
 80037f4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80037f8:	601a      	str	r2, [r3, #0]
 80037fa:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80037fe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003802:	601a      	str	r2, [r3, #0]
 8003804:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	fa93 f2a3 	rbit	r2, r3
 800380e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003812:	601a      	str	r2, [r3, #0]
 8003814:	4b3f      	ldr	r3, [pc, #252]	; (8003914 <HAL_RCC_OscConfig+0xc44>)
 8003816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003818:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800381c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003820:	6011      	str	r1, [r2, #0]
 8003822:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8003826:	6812      	ldr	r2, [r2, #0]
 8003828:	fa92 f1a2 	rbit	r1, r2
 800382c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003830:	6011      	str	r1, [r2, #0]
  return result;
 8003832:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003836:	6812      	ldr	r2, [r2, #0]
 8003838:	fab2 f282 	clz	r2, r2
 800383c:	b2d2      	uxtb	r2, r2
 800383e:	f042 0220 	orr.w	r2, r2, #32
 8003842:	b2d2      	uxtb	r2, r2
 8003844:	f002 021f 	and.w	r2, r2, #31
 8003848:	2101      	movs	r1, #1
 800384a:	fa01 f202 	lsl.w	r2, r1, r2
 800384e:	4013      	ands	r3, r2
 8003850:	2b00      	cmp	r3, #0
 8003852:	d19e      	bne.n	8003792 <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003854:	4b2f      	ldr	r3, [pc, #188]	; (8003914 <HAL_RCC_OscConfig+0xc44>)
 8003856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003858:	f023 020f 	bic.w	r2, r3, #15
 800385c:	1d3b      	adds	r3, r7, #4
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003862:	492c      	ldr	r1, [pc, #176]	; (8003914 <HAL_RCC_OscConfig+0xc44>)
 8003864:	4313      	orrs	r3, r2
 8003866:	62cb      	str	r3, [r1, #44]	; 0x2c
 8003868:	4b2a      	ldr	r3, [pc, #168]	; (8003914 <HAL_RCC_OscConfig+0xc44>)
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8003870:	1d3b      	adds	r3, r7, #4
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	6a19      	ldr	r1, [r3, #32]
 8003876:	1d3b      	adds	r3, r7, #4
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	69db      	ldr	r3, [r3, #28]
 800387c:	430b      	orrs	r3, r1
 800387e:	4925      	ldr	r1, [pc, #148]	; (8003914 <HAL_RCC_OscConfig+0xc44>)
 8003880:	4313      	orrs	r3, r2
 8003882:	604b      	str	r3, [r1, #4]
 8003884:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003888:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800388c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800388e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	fa93 f2a3 	rbit	r2, r3
 8003898:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800389c:	601a      	str	r2, [r3, #0]
  return result;
 800389e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80038a2:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038a4:	fab3 f383 	clz	r3, r3
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80038ae:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	461a      	mov	r2, r3
 80038b6:	2301      	movs	r3, #1
 80038b8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ba:	f7fd f95b 	bl	8000b74 <HAL_GetTick>
 80038be:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80038c2:	e009      	b.n	80038d8 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038c4:	f7fd f956 	bl	8000b74 <HAL_GetTick>
 80038c8:	4602      	mov	r2, r0
 80038ca:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80038ce:	1ad3      	subs	r3, r2, r3
 80038d0:	2b02      	cmp	r3, #2
 80038d2:	d901      	bls.n	80038d8 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80038d4:	2303      	movs	r3, #3
 80038d6:	e109      	b.n	8003aec <HAL_RCC_OscConfig+0xe1c>
 80038d8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80038dc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80038e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038e2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	fa93 f2a3 	rbit	r2, r3
 80038ec:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80038f0:	601a      	str	r2, [r3, #0]
  return result;
 80038f2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80038f6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80038f8:	fab3 f383 	clz	r3, r3
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	095b      	lsrs	r3, r3, #5
 8003900:	b2db      	uxtb	r3, r3
 8003902:	f043 0301 	orr.w	r3, r3, #1
 8003906:	b2db      	uxtb	r3, r3
 8003908:	2b01      	cmp	r3, #1
 800390a:	d105      	bne.n	8003918 <HAL_RCC_OscConfig+0xc48>
 800390c:	4b01      	ldr	r3, [pc, #4]	; (8003914 <HAL_RCC_OscConfig+0xc44>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	e01e      	b.n	8003950 <HAL_RCC_OscConfig+0xc80>
 8003912:	bf00      	nop
 8003914:	40021000 	.word	0x40021000
 8003918:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800391c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003920:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003922:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	fa93 f2a3 	rbit	r2, r3
 800392c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003930:	601a      	str	r2, [r3, #0]
 8003932:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003936:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800393a:	601a      	str	r2, [r3, #0]
 800393c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	fa93 f2a3 	rbit	r2, r3
 8003946:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800394a:	601a      	str	r2, [r3, #0]
 800394c:	4b6a      	ldr	r3, [pc, #424]	; (8003af8 <HAL_RCC_OscConfig+0xe28>)
 800394e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003950:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003954:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003958:	6011      	str	r1, [r2, #0]
 800395a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800395e:	6812      	ldr	r2, [r2, #0]
 8003960:	fa92 f1a2 	rbit	r1, r2
 8003964:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003968:	6011      	str	r1, [r2, #0]
  return result;
 800396a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800396e:	6812      	ldr	r2, [r2, #0]
 8003970:	fab2 f282 	clz	r2, r2
 8003974:	b2d2      	uxtb	r2, r2
 8003976:	f042 0220 	orr.w	r2, r2, #32
 800397a:	b2d2      	uxtb	r2, r2
 800397c:	f002 021f 	and.w	r2, r2, #31
 8003980:	2101      	movs	r1, #1
 8003982:	fa01 f202 	lsl.w	r2, r1, r2
 8003986:	4013      	ands	r3, r2
 8003988:	2b00      	cmp	r3, #0
 800398a:	d09b      	beq.n	80038c4 <HAL_RCC_OscConfig+0xbf4>
 800398c:	e0ad      	b.n	8003aea <HAL_RCC_OscConfig+0xe1a>
 800398e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003992:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003996:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003998:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	fa93 f2a3 	rbit	r2, r3
 80039a2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80039a6:	601a      	str	r2, [r3, #0]
  return result;
 80039a8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80039ac:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039ae:	fab3 f383 	clz	r3, r3
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80039b8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80039bc:	009b      	lsls	r3, r3, #2
 80039be:	461a      	mov	r2, r3
 80039c0:	2300      	movs	r3, #0
 80039c2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039c4:	f7fd f8d6 	bl	8000b74 <HAL_GetTick>
 80039c8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039cc:	e009      	b.n	80039e2 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039ce:	f7fd f8d1 	bl	8000b74 <HAL_GetTick>
 80039d2:	4602      	mov	r2, r0
 80039d4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80039d8:	1ad3      	subs	r3, r2, r3
 80039da:	2b02      	cmp	r3, #2
 80039dc:	d901      	bls.n	80039e2 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80039de:	2303      	movs	r3, #3
 80039e0:	e084      	b.n	8003aec <HAL_RCC_OscConfig+0xe1c>
 80039e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80039e6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80039ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	fa93 f2a3 	rbit	r2, r3
 80039f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80039fa:	601a      	str	r2, [r3, #0]
  return result;
 80039fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003a00:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a02:	fab3 f383 	clz	r3, r3
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	095b      	lsrs	r3, r3, #5
 8003a0a:	b2db      	uxtb	r3, r3
 8003a0c:	f043 0301 	orr.w	r3, r3, #1
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d102      	bne.n	8003a1c <HAL_RCC_OscConfig+0xd4c>
 8003a16:	4b38      	ldr	r3, [pc, #224]	; (8003af8 <HAL_RCC_OscConfig+0xe28>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	e01b      	b.n	8003a54 <HAL_RCC_OscConfig+0xd84>
 8003a1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a20:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a24:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	fa93 f2a3 	rbit	r2, r3
 8003a30:	f107 0320 	add.w	r3, r7, #32
 8003a34:	601a      	str	r2, [r3, #0]
 8003a36:	f107 031c 	add.w	r3, r7, #28
 8003a3a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a3e:	601a      	str	r2, [r3, #0]
 8003a40:	f107 031c 	add.w	r3, r7, #28
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	fa93 f2a3 	rbit	r2, r3
 8003a4a:	f107 0318 	add.w	r3, r7, #24
 8003a4e:	601a      	str	r2, [r3, #0]
 8003a50:	4b29      	ldr	r3, [pc, #164]	; (8003af8 <HAL_RCC_OscConfig+0xe28>)
 8003a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a54:	f107 0214 	add.w	r2, r7, #20
 8003a58:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003a5c:	6011      	str	r1, [r2, #0]
 8003a5e:	f107 0214 	add.w	r2, r7, #20
 8003a62:	6812      	ldr	r2, [r2, #0]
 8003a64:	fa92 f1a2 	rbit	r1, r2
 8003a68:	f107 0210 	add.w	r2, r7, #16
 8003a6c:	6011      	str	r1, [r2, #0]
  return result;
 8003a6e:	f107 0210 	add.w	r2, r7, #16
 8003a72:	6812      	ldr	r2, [r2, #0]
 8003a74:	fab2 f282 	clz	r2, r2
 8003a78:	b2d2      	uxtb	r2, r2
 8003a7a:	f042 0220 	orr.w	r2, r2, #32
 8003a7e:	b2d2      	uxtb	r2, r2
 8003a80:	f002 021f 	and.w	r2, r2, #31
 8003a84:	2101      	movs	r1, #1
 8003a86:	fa01 f202 	lsl.w	r2, r1, r2
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d19e      	bne.n	80039ce <HAL_RCC_OscConfig+0xcfe>
 8003a90:	e02b      	b.n	8003aea <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a92:	1d3b      	adds	r3, r7, #4
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	699b      	ldr	r3, [r3, #24]
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d101      	bne.n	8003aa0 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e025      	b.n	8003aec <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003aa0:	4b15      	ldr	r3, [pc, #84]	; (8003af8 <HAL_RCC_OscConfig+0xe28>)
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8003aa8:	4b13      	ldr	r3, [pc, #76]	; (8003af8 <HAL_RCC_OscConfig+0xe28>)
 8003aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aac:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003ab0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003ab4:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8003ab8:	1d3b      	adds	r3, r7, #4
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	69db      	ldr	r3, [r3, #28]
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d111      	bne.n	8003ae6 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003ac2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003ac6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003aca:	1d3b      	adds	r3, r7, #4
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d108      	bne.n	8003ae6 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8003ad4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003ad8:	f003 020f 	and.w	r2, r3, #15
 8003adc:	1d3b      	adds	r3, r7, #4
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d001      	beq.n	8003aea <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e000      	b.n	8003aec <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8003aea:	2300      	movs	r3, #0
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	bf00      	nop
 8003af8:	40021000 	.word	0x40021000

08003afc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b09e      	sub	sp, #120	; 0x78
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
 8003b04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003b06:	2300      	movs	r3, #0
 8003b08:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d101      	bne.n	8003b14 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	e162      	b.n	8003dda <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b14:	4b90      	ldr	r3, [pc, #576]	; (8003d58 <HAL_RCC_ClockConfig+0x25c>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 0307 	and.w	r3, r3, #7
 8003b1c:	683a      	ldr	r2, [r7, #0]
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d910      	bls.n	8003b44 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b22:	4b8d      	ldr	r3, [pc, #564]	; (8003d58 <HAL_RCC_ClockConfig+0x25c>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f023 0207 	bic.w	r2, r3, #7
 8003b2a:	498b      	ldr	r1, [pc, #556]	; (8003d58 <HAL_RCC_ClockConfig+0x25c>)
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b32:	4b89      	ldr	r3, [pc, #548]	; (8003d58 <HAL_RCC_ClockConfig+0x25c>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 0307 	and.w	r3, r3, #7
 8003b3a:	683a      	ldr	r2, [r7, #0]
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d001      	beq.n	8003b44 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	e14a      	b.n	8003dda <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 0302 	and.w	r3, r3, #2
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d008      	beq.n	8003b62 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b50:	4b82      	ldr	r3, [pc, #520]	; (8003d5c <HAL_RCC_ClockConfig+0x260>)
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	497f      	ldr	r1, [pc, #508]	; (8003d5c <HAL_RCC_ClockConfig+0x260>)
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 0301 	and.w	r3, r3, #1
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	f000 80dc 	beq.w	8003d28 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d13c      	bne.n	8003bf2 <HAL_RCC_ClockConfig+0xf6>
 8003b78:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b7c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b7e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b80:	fa93 f3a3 	rbit	r3, r3
 8003b84:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003b86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b88:	fab3 f383 	clz	r3, r3
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	095b      	lsrs	r3, r3, #5
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	f043 0301 	orr.w	r3, r3, #1
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d102      	bne.n	8003ba2 <HAL_RCC_ClockConfig+0xa6>
 8003b9c:	4b6f      	ldr	r3, [pc, #444]	; (8003d5c <HAL_RCC_ClockConfig+0x260>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	e00f      	b.n	8003bc2 <HAL_RCC_ClockConfig+0xc6>
 8003ba2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ba6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ba8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003baa:	fa93 f3a3 	rbit	r3, r3
 8003bae:	667b      	str	r3, [r7, #100]	; 0x64
 8003bb0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003bb4:	663b      	str	r3, [r7, #96]	; 0x60
 8003bb6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003bb8:	fa93 f3a3 	rbit	r3, r3
 8003bbc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003bbe:	4b67      	ldr	r3, [pc, #412]	; (8003d5c <HAL_RCC_ClockConfig+0x260>)
 8003bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003bc6:	65ba      	str	r2, [r7, #88]	; 0x58
 8003bc8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003bca:	fa92 f2a2 	rbit	r2, r2
 8003bce:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003bd0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003bd2:	fab2 f282 	clz	r2, r2
 8003bd6:	b2d2      	uxtb	r2, r2
 8003bd8:	f042 0220 	orr.w	r2, r2, #32
 8003bdc:	b2d2      	uxtb	r2, r2
 8003bde:	f002 021f 	and.w	r2, r2, #31
 8003be2:	2101      	movs	r1, #1
 8003be4:	fa01 f202 	lsl.w	r2, r1, r2
 8003be8:	4013      	ands	r3, r2
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d17b      	bne.n	8003ce6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e0f3      	b.n	8003dda <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	2b02      	cmp	r3, #2
 8003bf8:	d13c      	bne.n	8003c74 <HAL_RCC_ClockConfig+0x178>
 8003bfa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003bfe:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c02:	fa93 f3a3 	rbit	r3, r3
 8003c06:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003c08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c0a:	fab3 f383 	clz	r3, r3
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	095b      	lsrs	r3, r3, #5
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	f043 0301 	orr.w	r3, r3, #1
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d102      	bne.n	8003c24 <HAL_RCC_ClockConfig+0x128>
 8003c1e:	4b4f      	ldr	r3, [pc, #316]	; (8003d5c <HAL_RCC_ClockConfig+0x260>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	e00f      	b.n	8003c44 <HAL_RCC_ClockConfig+0x148>
 8003c24:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c28:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c2c:	fa93 f3a3 	rbit	r3, r3
 8003c30:	647b      	str	r3, [r7, #68]	; 0x44
 8003c32:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c36:	643b      	str	r3, [r7, #64]	; 0x40
 8003c38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c3a:	fa93 f3a3 	rbit	r3, r3
 8003c3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c40:	4b46      	ldr	r3, [pc, #280]	; (8003d5c <HAL_RCC_ClockConfig+0x260>)
 8003c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c44:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c48:	63ba      	str	r2, [r7, #56]	; 0x38
 8003c4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c4c:	fa92 f2a2 	rbit	r2, r2
 8003c50:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003c52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c54:	fab2 f282 	clz	r2, r2
 8003c58:	b2d2      	uxtb	r2, r2
 8003c5a:	f042 0220 	orr.w	r2, r2, #32
 8003c5e:	b2d2      	uxtb	r2, r2
 8003c60:	f002 021f 	and.w	r2, r2, #31
 8003c64:	2101      	movs	r1, #1
 8003c66:	fa01 f202 	lsl.w	r2, r1, r2
 8003c6a:	4013      	ands	r3, r2
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d13a      	bne.n	8003ce6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	e0b2      	b.n	8003dda <HAL_RCC_ClockConfig+0x2de>
 8003c74:	2302      	movs	r3, #2
 8003c76:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c7a:	fa93 f3a3 	rbit	r3, r3
 8003c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c82:	fab3 f383 	clz	r3, r3
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	095b      	lsrs	r3, r3, #5
 8003c8a:	b2db      	uxtb	r3, r3
 8003c8c:	f043 0301 	orr.w	r3, r3, #1
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	d102      	bne.n	8003c9c <HAL_RCC_ClockConfig+0x1a0>
 8003c96:	4b31      	ldr	r3, [pc, #196]	; (8003d5c <HAL_RCC_ClockConfig+0x260>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	e00d      	b.n	8003cb8 <HAL_RCC_ClockConfig+0x1bc>
 8003c9c:	2302      	movs	r3, #2
 8003c9e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ca2:	fa93 f3a3 	rbit	r3, r3
 8003ca6:	627b      	str	r3, [r7, #36]	; 0x24
 8003ca8:	2302      	movs	r3, #2
 8003caa:	623b      	str	r3, [r7, #32]
 8003cac:	6a3b      	ldr	r3, [r7, #32]
 8003cae:	fa93 f3a3 	rbit	r3, r3
 8003cb2:	61fb      	str	r3, [r7, #28]
 8003cb4:	4b29      	ldr	r3, [pc, #164]	; (8003d5c <HAL_RCC_ClockConfig+0x260>)
 8003cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb8:	2202      	movs	r2, #2
 8003cba:	61ba      	str	r2, [r7, #24]
 8003cbc:	69ba      	ldr	r2, [r7, #24]
 8003cbe:	fa92 f2a2 	rbit	r2, r2
 8003cc2:	617a      	str	r2, [r7, #20]
  return result;
 8003cc4:	697a      	ldr	r2, [r7, #20]
 8003cc6:	fab2 f282 	clz	r2, r2
 8003cca:	b2d2      	uxtb	r2, r2
 8003ccc:	f042 0220 	orr.w	r2, r2, #32
 8003cd0:	b2d2      	uxtb	r2, r2
 8003cd2:	f002 021f 	and.w	r2, r2, #31
 8003cd6:	2101      	movs	r1, #1
 8003cd8:	fa01 f202 	lsl.w	r2, r1, r2
 8003cdc:	4013      	ands	r3, r2
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d101      	bne.n	8003ce6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e079      	b.n	8003dda <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ce6:	4b1d      	ldr	r3, [pc, #116]	; (8003d5c <HAL_RCC_ClockConfig+0x260>)
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	f023 0203 	bic.w	r2, r3, #3
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	491a      	ldr	r1, [pc, #104]	; (8003d5c <HAL_RCC_ClockConfig+0x260>)
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003cf8:	f7fc ff3c 	bl	8000b74 <HAL_GetTick>
 8003cfc:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cfe:	e00a      	b.n	8003d16 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d00:	f7fc ff38 	bl	8000b74 <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d901      	bls.n	8003d16 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003d12:	2303      	movs	r3, #3
 8003d14:	e061      	b.n	8003dda <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d16:	4b11      	ldr	r3, [pc, #68]	; (8003d5c <HAL_RCC_ClockConfig+0x260>)
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	f003 020c 	and.w	r2, r3, #12
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d1eb      	bne.n	8003d00 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d28:	4b0b      	ldr	r3, [pc, #44]	; (8003d58 <HAL_RCC_ClockConfig+0x25c>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 0307 	and.w	r3, r3, #7
 8003d30:	683a      	ldr	r2, [r7, #0]
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d214      	bcs.n	8003d60 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d36:	4b08      	ldr	r3, [pc, #32]	; (8003d58 <HAL_RCC_ClockConfig+0x25c>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f023 0207 	bic.w	r2, r3, #7
 8003d3e:	4906      	ldr	r1, [pc, #24]	; (8003d58 <HAL_RCC_ClockConfig+0x25c>)
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d46:	4b04      	ldr	r3, [pc, #16]	; (8003d58 <HAL_RCC_ClockConfig+0x25c>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 0307 	and.w	r3, r3, #7
 8003d4e:	683a      	ldr	r2, [r7, #0]
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d005      	beq.n	8003d60 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	e040      	b.n	8003dda <HAL_RCC_ClockConfig+0x2de>
 8003d58:	40022000 	.word	0x40022000
 8003d5c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 0304 	and.w	r3, r3, #4
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d008      	beq.n	8003d7e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d6c:	4b1d      	ldr	r3, [pc, #116]	; (8003de4 <HAL_RCC_ClockConfig+0x2e8>)
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	491a      	ldr	r1, [pc, #104]	; (8003de4 <HAL_RCC_ClockConfig+0x2e8>)
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 0308 	and.w	r3, r3, #8
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d009      	beq.n	8003d9e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d8a:	4b16      	ldr	r3, [pc, #88]	; (8003de4 <HAL_RCC_ClockConfig+0x2e8>)
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	691b      	ldr	r3, [r3, #16]
 8003d96:	00db      	lsls	r3, r3, #3
 8003d98:	4912      	ldr	r1, [pc, #72]	; (8003de4 <HAL_RCC_ClockConfig+0x2e8>)
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003d9e:	f000 f829 	bl	8003df4 <HAL_RCC_GetSysClockFreq>
 8003da2:	4601      	mov	r1, r0
 8003da4:	4b0f      	ldr	r3, [pc, #60]	; (8003de4 <HAL_RCC_ClockConfig+0x2e8>)
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003dac:	22f0      	movs	r2, #240	; 0xf0
 8003dae:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003db0:	693a      	ldr	r2, [r7, #16]
 8003db2:	fa92 f2a2 	rbit	r2, r2
 8003db6:	60fa      	str	r2, [r7, #12]
  return result;
 8003db8:	68fa      	ldr	r2, [r7, #12]
 8003dba:	fab2 f282 	clz	r2, r2
 8003dbe:	b2d2      	uxtb	r2, r2
 8003dc0:	40d3      	lsrs	r3, r2
 8003dc2:	4a09      	ldr	r2, [pc, #36]	; (8003de8 <HAL_RCC_ClockConfig+0x2ec>)
 8003dc4:	5cd3      	ldrb	r3, [r2, r3]
 8003dc6:	fa21 f303 	lsr.w	r3, r1, r3
 8003dca:	4a08      	ldr	r2, [pc, #32]	; (8003dec <HAL_RCC_ClockConfig+0x2f0>)
 8003dcc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003dce:	4b08      	ldr	r3, [pc, #32]	; (8003df0 <HAL_RCC_ClockConfig+0x2f4>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f7fc fe8a 	bl	8000aec <HAL_InitTick>
  
  return HAL_OK;
 8003dd8:	2300      	movs	r3, #0
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3778      	adds	r7, #120	; 0x78
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	40021000 	.word	0x40021000
 8003de8:	08007390 	.word	0x08007390
 8003dec:	20000000 	.word	0x20000000
 8003df0:	20000004 	.word	0x20000004

08003df4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b08b      	sub	sp, #44	; 0x2c
 8003df8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	61fb      	str	r3, [r7, #28]
 8003dfe:	2300      	movs	r3, #0
 8003e00:	61bb      	str	r3, [r7, #24]
 8003e02:	2300      	movs	r3, #0
 8003e04:	627b      	str	r3, [r7, #36]	; 0x24
 8003e06:	2300      	movs	r3, #0
 8003e08:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003e0e:	4b2a      	ldr	r3, [pc, #168]	; (8003eb8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	f003 030c 	and.w	r3, r3, #12
 8003e1a:	2b04      	cmp	r3, #4
 8003e1c:	d002      	beq.n	8003e24 <HAL_RCC_GetSysClockFreq+0x30>
 8003e1e:	2b08      	cmp	r3, #8
 8003e20:	d003      	beq.n	8003e2a <HAL_RCC_GetSysClockFreq+0x36>
 8003e22:	e03f      	b.n	8003ea4 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003e24:	4b25      	ldr	r3, [pc, #148]	; (8003ebc <HAL_RCC_GetSysClockFreq+0xc8>)
 8003e26:	623b      	str	r3, [r7, #32]
      break;
 8003e28:	e03f      	b.n	8003eaa <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003e2a:	69fb      	ldr	r3, [r7, #28]
 8003e2c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003e30:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003e34:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e36:	68ba      	ldr	r2, [r7, #8]
 8003e38:	fa92 f2a2 	rbit	r2, r2
 8003e3c:	607a      	str	r2, [r7, #4]
  return result;
 8003e3e:	687a      	ldr	r2, [r7, #4]
 8003e40:	fab2 f282 	clz	r2, r2
 8003e44:	b2d2      	uxtb	r2, r2
 8003e46:	40d3      	lsrs	r3, r2
 8003e48:	4a1d      	ldr	r2, [pc, #116]	; (8003ec0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003e4a:	5cd3      	ldrb	r3, [r2, r3]
 8003e4c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003e4e:	4b1a      	ldr	r3, [pc, #104]	; (8003eb8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e52:	f003 030f 	and.w	r3, r3, #15
 8003e56:	220f      	movs	r2, #15
 8003e58:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e5a:	693a      	ldr	r2, [r7, #16]
 8003e5c:	fa92 f2a2 	rbit	r2, r2
 8003e60:	60fa      	str	r2, [r7, #12]
  return result;
 8003e62:	68fa      	ldr	r2, [r7, #12]
 8003e64:	fab2 f282 	clz	r2, r2
 8003e68:	b2d2      	uxtb	r2, r2
 8003e6a:	40d3      	lsrs	r3, r2
 8003e6c:	4a15      	ldr	r2, [pc, #84]	; (8003ec4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003e6e:	5cd3      	ldrb	r3, [r2, r3]
 8003e70:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8003e72:	69fb      	ldr	r3, [r7, #28]
 8003e74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d008      	beq.n	8003e8e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003e7c:	4a0f      	ldr	r2, [pc, #60]	; (8003ebc <HAL_RCC_GetSysClockFreq+0xc8>)
 8003e7e:	69bb      	ldr	r3, [r7, #24]
 8003e80:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	fb02 f303 	mul.w	r3, r2, r3
 8003e8a:	627b      	str	r3, [r7, #36]	; 0x24
 8003e8c:	e007      	b.n	8003e9e <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003e8e:	4a0b      	ldr	r2, [pc, #44]	; (8003ebc <HAL_RCC_GetSysClockFreq+0xc8>)
 8003e90:	69bb      	ldr	r3, [r7, #24]
 8003e92:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	fb02 f303 	mul.w	r3, r2, r3
 8003e9c:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea0:	623b      	str	r3, [r7, #32]
      break;
 8003ea2:	e002      	b.n	8003eaa <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003ea4:	4b05      	ldr	r3, [pc, #20]	; (8003ebc <HAL_RCC_GetSysClockFreq+0xc8>)
 8003ea6:	623b      	str	r3, [r7, #32]
      break;
 8003ea8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003eaa:	6a3b      	ldr	r3, [r7, #32]
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	372c      	adds	r7, #44	; 0x2c
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr
 8003eb8:	40021000 	.word	0x40021000
 8003ebc:	007a1200 	.word	0x007a1200
 8003ec0:	080073a8 	.word	0x080073a8
 8003ec4:	080073b8 	.word	0x080073b8

08003ec8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ecc:	4b03      	ldr	r3, [pc, #12]	; (8003edc <HAL_RCC_GetHCLKFreq+0x14>)
 8003ece:	681b      	ldr	r3, [r3, #0]
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr
 8003eda:	bf00      	nop
 8003edc:	20000000 	.word	0x20000000

08003ee0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b082      	sub	sp, #8
 8003ee4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003ee6:	f7ff ffef 	bl	8003ec8 <HAL_RCC_GetHCLKFreq>
 8003eea:	4601      	mov	r1, r0
 8003eec:	4b0b      	ldr	r3, [pc, #44]	; (8003f1c <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003ef4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003ef8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	fa92 f2a2 	rbit	r2, r2
 8003f00:	603a      	str	r2, [r7, #0]
  return result;
 8003f02:	683a      	ldr	r2, [r7, #0]
 8003f04:	fab2 f282 	clz	r2, r2
 8003f08:	b2d2      	uxtb	r2, r2
 8003f0a:	40d3      	lsrs	r3, r2
 8003f0c:	4a04      	ldr	r2, [pc, #16]	; (8003f20 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003f0e:	5cd3      	ldrb	r3, [r2, r3]
 8003f10:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003f14:	4618      	mov	r0, r3
 8003f16:	3708      	adds	r7, #8
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}
 8003f1c:	40021000 	.word	0x40021000
 8003f20:	080073a0 	.word	0x080073a0

08003f24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b082      	sub	sp, #8
 8003f28:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003f2a:	f7ff ffcd 	bl	8003ec8 <HAL_RCC_GetHCLKFreq>
 8003f2e:	4601      	mov	r1, r0
 8003f30:	4b0b      	ldr	r3, [pc, #44]	; (8003f60 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003f38:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003f3c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f3e:	687a      	ldr	r2, [r7, #4]
 8003f40:	fa92 f2a2 	rbit	r2, r2
 8003f44:	603a      	str	r2, [r7, #0]
  return result;
 8003f46:	683a      	ldr	r2, [r7, #0]
 8003f48:	fab2 f282 	clz	r2, r2
 8003f4c:	b2d2      	uxtb	r2, r2
 8003f4e:	40d3      	lsrs	r3, r2
 8003f50:	4a04      	ldr	r2, [pc, #16]	; (8003f64 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003f52:	5cd3      	ldrb	r3, [r2, r3]
 8003f54:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003f58:	4618      	mov	r0, r3
 8003f5a:	3708      	adds	r7, #8
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}
 8003f60:	40021000 	.word	0x40021000
 8003f64:	080073a0 	.word	0x080073a0

08003f68 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b092      	sub	sp, #72	; 0x48
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003f70:	2300      	movs	r3, #0
 8003f72:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003f74:	2300      	movs	r3, #0
 8003f76:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	f000 80d4 	beq.w	8004134 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f8c:	4b4e      	ldr	r3, [pc, #312]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f8e:	69db      	ldr	r3, [r3, #28]
 8003f90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d10e      	bne.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f98:	4b4b      	ldr	r3, [pc, #300]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f9a:	69db      	ldr	r3, [r3, #28]
 8003f9c:	4a4a      	ldr	r2, [pc, #296]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fa2:	61d3      	str	r3, [r2, #28]
 8003fa4:	4b48      	ldr	r3, [pc, #288]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fa6:	69db      	ldr	r3, [r3, #28]
 8003fa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fac:	60bb      	str	r3, [r7, #8]
 8003fae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fb6:	4b45      	ldr	r3, [pc, #276]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d118      	bne.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fc2:	4b42      	ldr	r3, [pc, #264]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a41      	ldr	r2, [pc, #260]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003fc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fcc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fce:	f7fc fdd1 	bl	8000b74 <HAL_GetTick>
 8003fd2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fd4:	e008      	b.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fd6:	f7fc fdcd 	bl	8000b74 <HAL_GetTick>
 8003fda:	4602      	mov	r2, r0
 8003fdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fde:	1ad3      	subs	r3, r2, r3
 8003fe0:	2b64      	cmp	r3, #100	; 0x64
 8003fe2:	d901      	bls.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003fe4:	2303      	movs	r3, #3
 8003fe6:	e1d6      	b.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fe8:	4b38      	ldr	r3, [pc, #224]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d0f0      	beq.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003ff4:	4b34      	ldr	r3, [pc, #208]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ff6:	6a1b      	ldr	r3, [r3, #32]
 8003ff8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ffc:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ffe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004000:	2b00      	cmp	r3, #0
 8004002:	f000 8084 	beq.w	800410e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800400e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004010:	429a      	cmp	r2, r3
 8004012:	d07c      	beq.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004014:	4b2c      	ldr	r3, [pc, #176]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004016:	6a1b      	ldr	r3, [r3, #32]
 8004018:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800401c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800401e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004022:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004026:	fa93 f3a3 	rbit	r3, r3
 800402a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800402c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800402e:	fab3 f383 	clz	r3, r3
 8004032:	b2db      	uxtb	r3, r3
 8004034:	461a      	mov	r2, r3
 8004036:	4b26      	ldr	r3, [pc, #152]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004038:	4413      	add	r3, r2
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	461a      	mov	r2, r3
 800403e:	2301      	movs	r3, #1
 8004040:	6013      	str	r3, [r2, #0]
 8004042:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004046:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800404a:	fa93 f3a3 	rbit	r3, r3
 800404e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004050:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004052:	fab3 f383 	clz	r3, r3
 8004056:	b2db      	uxtb	r3, r3
 8004058:	461a      	mov	r2, r3
 800405a:	4b1d      	ldr	r3, [pc, #116]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800405c:	4413      	add	r3, r2
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	461a      	mov	r2, r3
 8004062:	2300      	movs	r3, #0
 8004064:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004066:	4a18      	ldr	r2, [pc, #96]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004068:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800406a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800406c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800406e:	f003 0301 	and.w	r3, r3, #1
 8004072:	2b00      	cmp	r3, #0
 8004074:	d04b      	beq.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004076:	f7fc fd7d 	bl	8000b74 <HAL_GetTick>
 800407a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800407c:	e00a      	b.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800407e:	f7fc fd79 	bl	8000b74 <HAL_GetTick>
 8004082:	4602      	mov	r2, r0
 8004084:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004086:	1ad3      	subs	r3, r2, r3
 8004088:	f241 3288 	movw	r2, #5000	; 0x1388
 800408c:	4293      	cmp	r3, r2
 800408e:	d901      	bls.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004090:	2303      	movs	r3, #3
 8004092:	e180      	b.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8004094:	2302      	movs	r3, #2
 8004096:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800409a:	fa93 f3a3 	rbit	r3, r3
 800409e:	627b      	str	r3, [r7, #36]	; 0x24
 80040a0:	2302      	movs	r3, #2
 80040a2:	623b      	str	r3, [r7, #32]
 80040a4:	6a3b      	ldr	r3, [r7, #32]
 80040a6:	fa93 f3a3 	rbit	r3, r3
 80040aa:	61fb      	str	r3, [r7, #28]
  return result;
 80040ac:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040ae:	fab3 f383 	clz	r3, r3
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	095b      	lsrs	r3, r3, #5
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	f043 0302 	orr.w	r3, r3, #2
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	2b02      	cmp	r3, #2
 80040c0:	d108      	bne.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80040c2:	4b01      	ldr	r3, [pc, #4]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040c4:	6a1b      	ldr	r3, [r3, #32]
 80040c6:	e00d      	b.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80040c8:	40021000 	.word	0x40021000
 80040cc:	40007000 	.word	0x40007000
 80040d0:	10908100 	.word	0x10908100
 80040d4:	2302      	movs	r3, #2
 80040d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040d8:	69bb      	ldr	r3, [r7, #24]
 80040da:	fa93 f3a3 	rbit	r3, r3
 80040de:	617b      	str	r3, [r7, #20]
 80040e0:	4ba0      	ldr	r3, [pc, #640]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80040e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e4:	2202      	movs	r2, #2
 80040e6:	613a      	str	r2, [r7, #16]
 80040e8:	693a      	ldr	r2, [r7, #16]
 80040ea:	fa92 f2a2 	rbit	r2, r2
 80040ee:	60fa      	str	r2, [r7, #12]
  return result;
 80040f0:	68fa      	ldr	r2, [r7, #12]
 80040f2:	fab2 f282 	clz	r2, r2
 80040f6:	b2d2      	uxtb	r2, r2
 80040f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80040fc:	b2d2      	uxtb	r2, r2
 80040fe:	f002 021f 	and.w	r2, r2, #31
 8004102:	2101      	movs	r1, #1
 8004104:	fa01 f202 	lsl.w	r2, r1, r2
 8004108:	4013      	ands	r3, r2
 800410a:	2b00      	cmp	r3, #0
 800410c:	d0b7      	beq.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800410e:	4b95      	ldr	r3, [pc, #596]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004110:	6a1b      	ldr	r3, [r3, #32]
 8004112:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	4992      	ldr	r1, [pc, #584]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800411c:	4313      	orrs	r3, r2
 800411e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004120:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004124:	2b01      	cmp	r3, #1
 8004126:	d105      	bne.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004128:	4b8e      	ldr	r3, [pc, #568]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800412a:	69db      	ldr	r3, [r3, #28]
 800412c:	4a8d      	ldr	r2, [pc, #564]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800412e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004132:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 0301 	and.w	r3, r3, #1
 800413c:	2b00      	cmp	r3, #0
 800413e:	d008      	beq.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004140:	4b88      	ldr	r3, [pc, #544]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004144:	f023 0203 	bic.w	r2, r3, #3
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	4985      	ldr	r1, [pc, #532]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800414e:	4313      	orrs	r3, r2
 8004150:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 0302 	and.w	r3, r3, #2
 800415a:	2b00      	cmp	r3, #0
 800415c:	d008      	beq.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800415e:	4b81      	ldr	r3, [pc, #516]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004162:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	68db      	ldr	r3, [r3, #12]
 800416a:	497e      	ldr	r1, [pc, #504]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800416c:	4313      	orrs	r3, r2
 800416e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 0304 	and.w	r3, r3, #4
 8004178:	2b00      	cmp	r3, #0
 800417a:	d008      	beq.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800417c:	4b79      	ldr	r3, [pc, #484]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800417e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004180:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	691b      	ldr	r3, [r3, #16]
 8004188:	4976      	ldr	r1, [pc, #472]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800418a:	4313      	orrs	r3, r2
 800418c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 0320 	and.w	r3, r3, #32
 8004196:	2b00      	cmp	r3, #0
 8004198:	d008      	beq.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800419a:	4b72      	ldr	r3, [pc, #456]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800419c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800419e:	f023 0210 	bic.w	r2, r3, #16
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	69db      	ldr	r3, [r3, #28]
 80041a6:	496f      	ldr	r1, [pc, #444]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80041a8:	4313      	orrs	r3, r2
 80041aa:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d008      	beq.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80041b8:	4b6a      	ldr	r3, [pc, #424]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041c4:	4967      	ldr	r1, [pc, #412]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80041c6:	4313      	orrs	r3, r2
 80041c8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d008      	beq.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80041d6:	4b63      	ldr	r3, [pc, #396]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80041d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041da:	f023 0220 	bic.w	r2, r3, #32
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6a1b      	ldr	r3, [r3, #32]
 80041e2:	4960      	ldr	r1, [pc, #384]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80041e4:	4313      	orrs	r3, r2
 80041e6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d008      	beq.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80041f4:	4b5b      	ldr	r3, [pc, #364]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80041f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041f8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004200:	4958      	ldr	r1, [pc, #352]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004202:	4313      	orrs	r3, r2
 8004204:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 0308 	and.w	r3, r3, #8
 800420e:	2b00      	cmp	r3, #0
 8004210:	d008      	beq.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004212:	4b54      	ldr	r3, [pc, #336]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004216:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	695b      	ldr	r3, [r3, #20]
 800421e:	4951      	ldr	r1, [pc, #324]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004220:	4313      	orrs	r3, r2
 8004222:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 0310 	and.w	r3, r3, #16
 800422c:	2b00      	cmp	r3, #0
 800422e:	d008      	beq.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004230:	4b4c      	ldr	r3, [pc, #304]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004234:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	699b      	ldr	r3, [r3, #24]
 800423c:	4949      	ldr	r1, [pc, #292]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800423e:	4313      	orrs	r3, r2
 8004240:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800424a:	2b00      	cmp	r3, #0
 800424c:	d008      	beq.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800424e:	4b45      	ldr	r3, [pc, #276]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800425a:	4942      	ldr	r1, [pc, #264]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800425c:	4313      	orrs	r3, r2
 800425e:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004268:	2b00      	cmp	r3, #0
 800426a:	d008      	beq.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800426c:	4b3d      	ldr	r3, [pc, #244]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800426e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004270:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004278:	493a      	ldr	r1, [pc, #232]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800427a:	4313      	orrs	r3, r2
 800427c:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004286:	2b00      	cmp	r3, #0
 8004288:	d008      	beq.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800428a:	4b36      	ldr	r3, [pc, #216]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800428c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800428e:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004296:	4933      	ldr	r1, [pc, #204]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004298:	4313      	orrs	r3, r2
 800429a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d008      	beq.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80042a8:	4b2e      	ldr	r3, [pc, #184]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80042aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042b4:	492b      	ldr	r1, [pc, #172]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80042b6:	4313      	orrs	r3, r2
 80042b8:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d008      	beq.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80042c6:	4b27      	ldr	r3, [pc, #156]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80042c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ca:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d2:	4924      	ldr	r1, [pc, #144]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80042d4:	4313      	orrs	r3, r2
 80042d6:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d008      	beq.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80042e4:	4b1f      	ldr	r3, [pc, #124]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80042e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042f0:	491c      	ldr	r1, [pc, #112]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80042f2:	4313      	orrs	r3, r2
 80042f4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d008      	beq.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8004302:	4b18      	ldr	r3, [pc, #96]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004306:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800430e:	4915      	ldr	r1, [pc, #84]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004310:	4313      	orrs	r3, r2
 8004312:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800431c:	2b00      	cmp	r3, #0
 800431e:	d008      	beq.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004320:	4b10      	ldr	r3, [pc, #64]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004324:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800432c:	490d      	ldr	r1, [pc, #52]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800432e:	4313      	orrs	r3, r2
 8004330:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800433a:	2b00      	cmp	r3, #0
 800433c:	d008      	beq.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800433e:	4b09      	ldr	r3, [pc, #36]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004342:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800434a:	4906      	ldr	r1, [pc, #24]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800434c:	4313      	orrs	r3, r2
 800434e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004358:	2b00      	cmp	r3, #0
 800435a:	d00c      	beq.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800435c:	4b01      	ldr	r3, [pc, #4]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800435e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004360:	e002      	b.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8004362:	bf00      	nop
 8004364:	40021000 	.word	0x40021000
 8004368:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004370:	490b      	ldr	r1, [pc, #44]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004372:	4313      	orrs	r3, r2
 8004374:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800437e:	2b00      	cmp	r3, #0
 8004380:	d008      	beq.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8004382:	4b07      	ldr	r3, [pc, #28]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004386:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800438e:	4904      	ldr	r1, [pc, #16]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004390:	4313      	orrs	r3, r2
 8004392:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004394:	2300      	movs	r3, #0
}
 8004396:	4618      	mov	r0, r3
 8004398:	3748      	adds	r7, #72	; 0x48
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}
 800439e:	bf00      	nop
 80043a0:	40021000 	.word	0x40021000

080043a4 <HAL_RTC_Init>:
  *         in the RTC_InitTypeDef structure and initialize the associated handle.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b082      	sub	sp, #8
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d101      	bne.n	80043b6 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e083      	b.n	80044be <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	7f5b      	ldrb	r3, [r3, #29]
 80043ba:	b2db      	uxtb	r3, r3
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d105      	bne.n	80043cc <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2200      	movs	r2, #0
 80043c4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f7fc f9a4 	bl	8000714 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2202      	movs	r2, #2
 80043d0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	22ca      	movs	r2, #202	; 0xca
 80043d8:	625a      	str	r2, [r3, #36]	; 0x24
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	2253      	movs	r2, #83	; 0x53
 80043e0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f000 f897 	bl	8004516 <RTC_EnterInitMode>
 80043e8:	4603      	mov	r3, r0
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d008      	beq.n	8004400 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	22ff      	movs	r2, #255	; 0xff
 80043f4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2204      	movs	r2, #4
 80043fa:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	e05e      	b.n	80044be <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	6812      	ldr	r2, [r2, #0]
 800440a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800440e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004412:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	6899      	ldr	r1, [r3, #8]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	685a      	ldr	r2, [r3, #4]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	691b      	ldr	r3, [r3, #16]
 8004422:	431a      	orrs	r2, r3
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	695b      	ldr	r3, [r3, #20]
 8004428:	431a      	orrs	r2, r3
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	430a      	orrs	r2, r1
 8004430:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	687a      	ldr	r2, [r7, #4]
 8004438:	68d2      	ldr	r2, [r2, #12]
 800443a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	6919      	ldr	r1, [r3, #16]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	041a      	lsls	r2, r3, #16
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	430a      	orrs	r2, r1
 800444e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	68da      	ldr	r2, [r3, #12]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800445e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	f003 0320 	and.w	r3, r3, #32
 800446a:	2b00      	cmp	r3, #0
 800446c:	d10e      	bne.n	800448c <HAL_RTC_Init+0xe8>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f000 f829 	bl	80044c6 <HAL_RTC_WaitForSynchro>
 8004474:	4603      	mov	r3, r0
 8004476:	2b00      	cmp	r3, #0
 8004478:	d008      	beq.n	800448c <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	22ff      	movs	r2, #255	; 0xff
 8004480:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2204      	movs	r2, #4
 8004486:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	e018      	b.n	80044be <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800449a:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	699a      	ldr	r2, [r3, #24]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	430a      	orrs	r2, r1
 80044ac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	22ff      	movs	r2, #255	; 0xff
 80044b4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2201      	movs	r2, #1
 80044ba:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80044bc:	2300      	movs	r3, #0
  }
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3708      	adds	r7, #8
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}

080044c6 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80044c6:	b580      	push	{r7, lr}
 80044c8:	b084      	sub	sp, #16
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80044ce:	2300      	movs	r3, #0
 80044d0:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	68da      	ldr	r2, [r3, #12]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80044e0:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80044e2:	f7fc fb47 	bl	8000b74 <HAL_GetTick>
 80044e6:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80044e8:	e009      	b.n	80044fe <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80044ea:	f7fc fb43 	bl	8000b74 <HAL_GetTick>
 80044ee:	4602      	mov	r2, r0
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	1ad3      	subs	r3, r2, r3
 80044f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80044f8:	d901      	bls.n	80044fe <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80044fa:	2303      	movs	r3, #3
 80044fc:	e007      	b.n	800450e <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	f003 0320 	and.w	r3, r3, #32
 8004508:	2b00      	cmp	r3, #0
 800450a:	d0ee      	beq.n	80044ea <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800450c:	2300      	movs	r3, #0
}
 800450e:	4618      	mov	r0, r3
 8004510:	3710      	adds	r7, #16
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}

08004516 <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - HAL_OK : RTC is in Init mode
  *          - HAL_TIMEOUT : RTC is not in Init mode and in Timeout
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004516:	b580      	push	{r7, lr}
 8004518:	b084      	sub	sp, #16
 800451a:	af00      	add	r7, sp, #0
 800451c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800451e:	2300      	movs	r3, #0
 8004520:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	68db      	ldr	r3, [r3, #12]
 8004528:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800452c:	2b00      	cmp	r3, #0
 800452e:	d119      	bne.n	8004564 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f04f 32ff 	mov.w	r2, #4294967295
 8004538:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800453a:	f7fc fb1b 	bl	8000b74 <HAL_GetTick>
 800453e:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004540:	e009      	b.n	8004556 <RTC_EnterInitMode+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004542:	f7fc fb17 	bl	8000b74 <HAL_GetTick>
 8004546:	4602      	mov	r2, r0
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	1ad3      	subs	r3, r2, r3
 800454c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004550:	d901      	bls.n	8004556 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8004552:	2303      	movs	r3, #3
 8004554:	e007      	b.n	8004566 <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004560:	2b00      	cmp	r3, #0
 8004562:	d0ee      	beq.n	8004542 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8004564:	2300      	movs	r3, #0
}
 8004566:	4618      	mov	r0, r3
 8004568:	3710      	adds	r7, #16
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}

0800456e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800456e:	b580      	push	{r7, lr}
 8004570:	b082      	sub	sp, #8
 8004572:	af00      	add	r7, sp, #0
 8004574:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d101      	bne.n	8004580 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	e040      	b.n	8004602 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004584:	2b00      	cmp	r3, #0
 8004586:	d106      	bne.n	8004596 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2200      	movs	r2, #0
 800458c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004590:	6878      	ldr	r0, [r7, #4]
 8004592:	f7fc f8e5 	bl	8000760 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2224      	movs	r2, #36	; 0x24
 800459a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f022 0201 	bic.w	r2, r2, #1
 80045aa:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f000 f8c1 	bl	8004734 <UART_SetConfig>
 80045b2:	4603      	mov	r3, r0
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d101      	bne.n	80045bc <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	e022      	b.n	8004602 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d002      	beq.n	80045ca <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f000 fa8b 	bl	8004ae0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	685a      	ldr	r2, [r3, #4]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80045d8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	689a      	ldr	r2, [r3, #8]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80045e8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f042 0201 	orr.w	r2, r2, #1
 80045f8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f000 fb12 	bl	8004c24 <UART_CheckIdleState>
 8004600:	4603      	mov	r3, r0
}
 8004602:	4618      	mov	r0, r3
 8004604:	3708      	adds	r7, #8
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}

0800460a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800460a:	b580      	push	{r7, lr}
 800460c:	b08a      	sub	sp, #40	; 0x28
 800460e:	af02      	add	r7, sp, #8
 8004610:	60f8      	str	r0, [r7, #12]
 8004612:	60b9      	str	r1, [r7, #8]
 8004614:	603b      	str	r3, [r7, #0]
 8004616:	4613      	mov	r3, r2
 8004618:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800461e:	2b20      	cmp	r3, #32
 8004620:	f040 8082 	bne.w	8004728 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d002      	beq.n	8004630 <HAL_UART_Transmit+0x26>
 800462a:	88fb      	ldrh	r3, [r7, #6]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d101      	bne.n	8004634 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	e07a      	b.n	800472a <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800463a:	2b01      	cmp	r3, #1
 800463c:	d101      	bne.n	8004642 <HAL_UART_Transmit+0x38>
 800463e:	2302      	movs	r3, #2
 8004640:	e073      	b.n	800472a <HAL_UART_Transmit+0x120>
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2201      	movs	r2, #1
 8004646:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2200      	movs	r2, #0
 800464e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2221      	movs	r2, #33	; 0x21
 8004656:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004658:	f7fc fa8c 	bl	8000b74 <HAL_GetTick>
 800465c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	88fa      	ldrh	r2, [r7, #6]
 8004662:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	88fa      	ldrh	r2, [r7, #6]
 800466a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004676:	d108      	bne.n	800468a <HAL_UART_Transmit+0x80>
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	691b      	ldr	r3, [r3, #16]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d104      	bne.n	800468a <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004680:	2300      	movs	r3, #0
 8004682:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	61bb      	str	r3, [r7, #24]
 8004688:	e003      	b.n	8004692 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800468e:	2300      	movs	r3, #0
 8004690:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2200      	movs	r2, #0
 8004696:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800469a:	e02d      	b.n	80046f8 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	9300      	str	r3, [sp, #0]
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	2200      	movs	r2, #0
 80046a4:	2180      	movs	r1, #128	; 0x80
 80046a6:	68f8      	ldr	r0, [r7, #12]
 80046a8:	f000 fb05 	bl	8004cb6 <UART_WaitOnFlagUntilTimeout>
 80046ac:	4603      	mov	r3, r0
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d001      	beq.n	80046b6 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80046b2:	2303      	movs	r3, #3
 80046b4:	e039      	b.n	800472a <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80046b6:	69fb      	ldr	r3, [r7, #28]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d10b      	bne.n	80046d4 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80046bc:	69bb      	ldr	r3, [r7, #24]
 80046be:	881a      	ldrh	r2, [r3, #0]
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046c8:	b292      	uxth	r2, r2
 80046ca:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80046cc:	69bb      	ldr	r3, [r7, #24]
 80046ce:	3302      	adds	r3, #2
 80046d0:	61bb      	str	r3, [r7, #24]
 80046d2:	e008      	b.n	80046e6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80046d4:	69fb      	ldr	r3, [r7, #28]
 80046d6:	781a      	ldrb	r2, [r3, #0]
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	b292      	uxth	r2, r2
 80046de:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80046e0:	69fb      	ldr	r3, [r7, #28]
 80046e2:	3301      	adds	r3, #1
 80046e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80046ec:	b29b      	uxth	r3, r3
 80046ee:	3b01      	subs	r3, #1
 80046f0:	b29a      	uxth	r2, r3
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80046fe:	b29b      	uxth	r3, r3
 8004700:	2b00      	cmp	r3, #0
 8004702:	d1cb      	bne.n	800469c <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	9300      	str	r3, [sp, #0]
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	2200      	movs	r2, #0
 800470c:	2140      	movs	r1, #64	; 0x40
 800470e:	68f8      	ldr	r0, [r7, #12]
 8004710:	f000 fad1 	bl	8004cb6 <UART_WaitOnFlagUntilTimeout>
 8004714:	4603      	mov	r3, r0
 8004716:	2b00      	cmp	r3, #0
 8004718:	d001      	beq.n	800471e <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800471a:	2303      	movs	r3, #3
 800471c:	e005      	b.n	800472a <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2220      	movs	r2, #32
 8004722:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004724:	2300      	movs	r3, #0
 8004726:	e000      	b.n	800472a <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004728:	2302      	movs	r3, #2
  }
}
 800472a:	4618      	mov	r0, r3
 800472c:	3720      	adds	r7, #32
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}
	...

08004734 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b088      	sub	sp, #32
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800473c:	2300      	movs	r3, #0
 800473e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	689a      	ldr	r2, [r3, #8]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	691b      	ldr	r3, [r3, #16]
 8004748:	431a      	orrs	r2, r3
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	695b      	ldr	r3, [r3, #20]
 800474e:	431a      	orrs	r2, r3
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	69db      	ldr	r3, [r3, #28]
 8004754:	4313      	orrs	r3, r2
 8004756:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	4bab      	ldr	r3, [pc, #684]	; (8004a0c <UART_SetConfig+0x2d8>)
 8004760:	4013      	ands	r3, r2
 8004762:	687a      	ldr	r2, [r7, #4]
 8004764:	6812      	ldr	r2, [r2, #0]
 8004766:	6979      	ldr	r1, [r7, #20]
 8004768:	430b      	orrs	r3, r1
 800476a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	68da      	ldr	r2, [r3, #12]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	430a      	orrs	r2, r1
 8004780:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	699b      	ldr	r3, [r3, #24]
 8004786:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6a1b      	ldr	r3, [r3, #32]
 800478c:	697a      	ldr	r2, [r7, #20]
 800478e:	4313      	orrs	r3, r2
 8004790:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	697a      	ldr	r2, [r7, #20]
 80047a2:	430a      	orrs	r2, r1
 80047a4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a99      	ldr	r2, [pc, #612]	; (8004a10 <UART_SetConfig+0x2dc>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d120      	bne.n	80047f2 <UART_SetConfig+0xbe>
 80047b0:	4b98      	ldr	r3, [pc, #608]	; (8004a14 <UART_SetConfig+0x2e0>)
 80047b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047b4:	f003 0303 	and.w	r3, r3, #3
 80047b8:	2b03      	cmp	r3, #3
 80047ba:	d817      	bhi.n	80047ec <UART_SetConfig+0xb8>
 80047bc:	a201      	add	r2, pc, #4	; (adr r2, 80047c4 <UART_SetConfig+0x90>)
 80047be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047c2:	bf00      	nop
 80047c4:	080047d5 	.word	0x080047d5
 80047c8:	080047e1 	.word	0x080047e1
 80047cc:	080047e7 	.word	0x080047e7
 80047d0:	080047db 	.word	0x080047db
 80047d4:	2301      	movs	r3, #1
 80047d6:	77fb      	strb	r3, [r7, #31]
 80047d8:	e0b5      	b.n	8004946 <UART_SetConfig+0x212>
 80047da:	2302      	movs	r3, #2
 80047dc:	77fb      	strb	r3, [r7, #31]
 80047de:	e0b2      	b.n	8004946 <UART_SetConfig+0x212>
 80047e0:	2304      	movs	r3, #4
 80047e2:	77fb      	strb	r3, [r7, #31]
 80047e4:	e0af      	b.n	8004946 <UART_SetConfig+0x212>
 80047e6:	2308      	movs	r3, #8
 80047e8:	77fb      	strb	r3, [r7, #31]
 80047ea:	e0ac      	b.n	8004946 <UART_SetConfig+0x212>
 80047ec:	2310      	movs	r3, #16
 80047ee:	77fb      	strb	r3, [r7, #31]
 80047f0:	e0a9      	b.n	8004946 <UART_SetConfig+0x212>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a88      	ldr	r2, [pc, #544]	; (8004a18 <UART_SetConfig+0x2e4>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d124      	bne.n	8004846 <UART_SetConfig+0x112>
 80047fc:	4b85      	ldr	r3, [pc, #532]	; (8004a14 <UART_SetConfig+0x2e0>)
 80047fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004800:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004804:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004808:	d011      	beq.n	800482e <UART_SetConfig+0xfa>
 800480a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800480e:	d817      	bhi.n	8004840 <UART_SetConfig+0x10c>
 8004810:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004814:	d011      	beq.n	800483a <UART_SetConfig+0x106>
 8004816:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800481a:	d811      	bhi.n	8004840 <UART_SetConfig+0x10c>
 800481c:	2b00      	cmp	r3, #0
 800481e:	d003      	beq.n	8004828 <UART_SetConfig+0xf4>
 8004820:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004824:	d006      	beq.n	8004834 <UART_SetConfig+0x100>
 8004826:	e00b      	b.n	8004840 <UART_SetConfig+0x10c>
 8004828:	2300      	movs	r3, #0
 800482a:	77fb      	strb	r3, [r7, #31]
 800482c:	e08b      	b.n	8004946 <UART_SetConfig+0x212>
 800482e:	2302      	movs	r3, #2
 8004830:	77fb      	strb	r3, [r7, #31]
 8004832:	e088      	b.n	8004946 <UART_SetConfig+0x212>
 8004834:	2304      	movs	r3, #4
 8004836:	77fb      	strb	r3, [r7, #31]
 8004838:	e085      	b.n	8004946 <UART_SetConfig+0x212>
 800483a:	2308      	movs	r3, #8
 800483c:	77fb      	strb	r3, [r7, #31]
 800483e:	e082      	b.n	8004946 <UART_SetConfig+0x212>
 8004840:	2310      	movs	r3, #16
 8004842:	77fb      	strb	r3, [r7, #31]
 8004844:	e07f      	b.n	8004946 <UART_SetConfig+0x212>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a74      	ldr	r2, [pc, #464]	; (8004a1c <UART_SetConfig+0x2e8>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d124      	bne.n	800489a <UART_SetConfig+0x166>
 8004850:	4b70      	ldr	r3, [pc, #448]	; (8004a14 <UART_SetConfig+0x2e0>)
 8004852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004854:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004858:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800485c:	d011      	beq.n	8004882 <UART_SetConfig+0x14e>
 800485e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004862:	d817      	bhi.n	8004894 <UART_SetConfig+0x160>
 8004864:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004868:	d011      	beq.n	800488e <UART_SetConfig+0x15a>
 800486a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800486e:	d811      	bhi.n	8004894 <UART_SetConfig+0x160>
 8004870:	2b00      	cmp	r3, #0
 8004872:	d003      	beq.n	800487c <UART_SetConfig+0x148>
 8004874:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004878:	d006      	beq.n	8004888 <UART_SetConfig+0x154>
 800487a:	e00b      	b.n	8004894 <UART_SetConfig+0x160>
 800487c:	2300      	movs	r3, #0
 800487e:	77fb      	strb	r3, [r7, #31]
 8004880:	e061      	b.n	8004946 <UART_SetConfig+0x212>
 8004882:	2302      	movs	r3, #2
 8004884:	77fb      	strb	r3, [r7, #31]
 8004886:	e05e      	b.n	8004946 <UART_SetConfig+0x212>
 8004888:	2304      	movs	r3, #4
 800488a:	77fb      	strb	r3, [r7, #31]
 800488c:	e05b      	b.n	8004946 <UART_SetConfig+0x212>
 800488e:	2308      	movs	r3, #8
 8004890:	77fb      	strb	r3, [r7, #31]
 8004892:	e058      	b.n	8004946 <UART_SetConfig+0x212>
 8004894:	2310      	movs	r3, #16
 8004896:	77fb      	strb	r3, [r7, #31]
 8004898:	e055      	b.n	8004946 <UART_SetConfig+0x212>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a60      	ldr	r2, [pc, #384]	; (8004a20 <UART_SetConfig+0x2ec>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d124      	bne.n	80048ee <UART_SetConfig+0x1ba>
 80048a4:	4b5b      	ldr	r3, [pc, #364]	; (8004a14 <UART_SetConfig+0x2e0>)
 80048a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048a8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80048ac:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80048b0:	d011      	beq.n	80048d6 <UART_SetConfig+0x1a2>
 80048b2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80048b6:	d817      	bhi.n	80048e8 <UART_SetConfig+0x1b4>
 80048b8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80048bc:	d011      	beq.n	80048e2 <UART_SetConfig+0x1ae>
 80048be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80048c2:	d811      	bhi.n	80048e8 <UART_SetConfig+0x1b4>
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d003      	beq.n	80048d0 <UART_SetConfig+0x19c>
 80048c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048cc:	d006      	beq.n	80048dc <UART_SetConfig+0x1a8>
 80048ce:	e00b      	b.n	80048e8 <UART_SetConfig+0x1b4>
 80048d0:	2300      	movs	r3, #0
 80048d2:	77fb      	strb	r3, [r7, #31]
 80048d4:	e037      	b.n	8004946 <UART_SetConfig+0x212>
 80048d6:	2302      	movs	r3, #2
 80048d8:	77fb      	strb	r3, [r7, #31]
 80048da:	e034      	b.n	8004946 <UART_SetConfig+0x212>
 80048dc:	2304      	movs	r3, #4
 80048de:	77fb      	strb	r3, [r7, #31]
 80048e0:	e031      	b.n	8004946 <UART_SetConfig+0x212>
 80048e2:	2308      	movs	r3, #8
 80048e4:	77fb      	strb	r3, [r7, #31]
 80048e6:	e02e      	b.n	8004946 <UART_SetConfig+0x212>
 80048e8:	2310      	movs	r3, #16
 80048ea:	77fb      	strb	r3, [r7, #31]
 80048ec:	e02b      	b.n	8004946 <UART_SetConfig+0x212>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a4c      	ldr	r2, [pc, #304]	; (8004a24 <UART_SetConfig+0x2f0>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d124      	bne.n	8004942 <UART_SetConfig+0x20e>
 80048f8:	4b46      	ldr	r3, [pc, #280]	; (8004a14 <UART_SetConfig+0x2e0>)
 80048fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048fc:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004900:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004904:	d011      	beq.n	800492a <UART_SetConfig+0x1f6>
 8004906:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800490a:	d817      	bhi.n	800493c <UART_SetConfig+0x208>
 800490c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004910:	d011      	beq.n	8004936 <UART_SetConfig+0x202>
 8004912:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004916:	d811      	bhi.n	800493c <UART_SetConfig+0x208>
 8004918:	2b00      	cmp	r3, #0
 800491a:	d003      	beq.n	8004924 <UART_SetConfig+0x1f0>
 800491c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004920:	d006      	beq.n	8004930 <UART_SetConfig+0x1fc>
 8004922:	e00b      	b.n	800493c <UART_SetConfig+0x208>
 8004924:	2300      	movs	r3, #0
 8004926:	77fb      	strb	r3, [r7, #31]
 8004928:	e00d      	b.n	8004946 <UART_SetConfig+0x212>
 800492a:	2302      	movs	r3, #2
 800492c:	77fb      	strb	r3, [r7, #31]
 800492e:	e00a      	b.n	8004946 <UART_SetConfig+0x212>
 8004930:	2304      	movs	r3, #4
 8004932:	77fb      	strb	r3, [r7, #31]
 8004934:	e007      	b.n	8004946 <UART_SetConfig+0x212>
 8004936:	2308      	movs	r3, #8
 8004938:	77fb      	strb	r3, [r7, #31]
 800493a:	e004      	b.n	8004946 <UART_SetConfig+0x212>
 800493c:	2310      	movs	r3, #16
 800493e:	77fb      	strb	r3, [r7, #31]
 8004940:	e001      	b.n	8004946 <UART_SetConfig+0x212>
 8004942:	2310      	movs	r3, #16
 8004944:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	69db      	ldr	r3, [r3, #28]
 800494a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800494e:	d16d      	bne.n	8004a2c <UART_SetConfig+0x2f8>
  {
    switch (clocksource)
 8004950:	7ffb      	ldrb	r3, [r7, #31]
 8004952:	2b08      	cmp	r3, #8
 8004954:	d827      	bhi.n	80049a6 <UART_SetConfig+0x272>
 8004956:	a201      	add	r2, pc, #4	; (adr r2, 800495c <UART_SetConfig+0x228>)
 8004958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800495c:	08004981 	.word	0x08004981
 8004960:	08004989 	.word	0x08004989
 8004964:	08004991 	.word	0x08004991
 8004968:	080049a7 	.word	0x080049a7
 800496c:	08004997 	.word	0x08004997
 8004970:	080049a7 	.word	0x080049a7
 8004974:	080049a7 	.word	0x080049a7
 8004978:	080049a7 	.word	0x080049a7
 800497c:	0800499f 	.word	0x0800499f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004980:	f7ff faae 	bl	8003ee0 <HAL_RCC_GetPCLK1Freq>
 8004984:	61b8      	str	r0, [r7, #24]
        break;
 8004986:	e013      	b.n	80049b0 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004988:	f7ff facc 	bl	8003f24 <HAL_RCC_GetPCLK2Freq>
 800498c:	61b8      	str	r0, [r7, #24]
        break;
 800498e:	e00f      	b.n	80049b0 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004990:	4b25      	ldr	r3, [pc, #148]	; (8004a28 <UART_SetConfig+0x2f4>)
 8004992:	61bb      	str	r3, [r7, #24]
        break;
 8004994:	e00c      	b.n	80049b0 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004996:	f7ff fa2d 	bl	8003df4 <HAL_RCC_GetSysClockFreq>
 800499a:	61b8      	str	r0, [r7, #24]
        break;
 800499c:	e008      	b.n	80049b0 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800499e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049a2:	61bb      	str	r3, [r7, #24]
        break;
 80049a4:	e004      	b.n	80049b0 <UART_SetConfig+0x27c>
      default:
        pclk = 0U;
 80049a6:	2300      	movs	r3, #0
 80049a8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	77bb      	strb	r3, [r7, #30]
        break;
 80049ae:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80049b0:	69bb      	ldr	r3, [r7, #24]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	f000 8086 	beq.w	8004ac4 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80049b8:	69bb      	ldr	r3, [r7, #24]
 80049ba:	005a      	lsls	r2, r3, #1
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	085b      	lsrs	r3, r3, #1
 80049c2:	441a      	add	r2, r3
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80049cc:	b29b      	uxth	r3, r3
 80049ce:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	2b0f      	cmp	r3, #15
 80049d4:	d916      	bls.n	8004a04 <UART_SetConfig+0x2d0>
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049dc:	d212      	bcs.n	8004a04 <UART_SetConfig+0x2d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	b29b      	uxth	r3, r3
 80049e2:	f023 030f 	bic.w	r3, r3, #15
 80049e6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	085b      	lsrs	r3, r3, #1
 80049ec:	b29b      	uxth	r3, r3
 80049ee:	f003 0307 	and.w	r3, r3, #7
 80049f2:	b29a      	uxth	r2, r3
 80049f4:	89fb      	ldrh	r3, [r7, #14]
 80049f6:	4313      	orrs	r3, r2
 80049f8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	89fa      	ldrh	r2, [r7, #14]
 8004a00:	60da      	str	r2, [r3, #12]
 8004a02:	e05f      	b.n	8004ac4 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8004a04:	2301      	movs	r3, #1
 8004a06:	77bb      	strb	r3, [r7, #30]
 8004a08:	e05c      	b.n	8004ac4 <UART_SetConfig+0x390>
 8004a0a:	bf00      	nop
 8004a0c:	efff69f3 	.word	0xefff69f3
 8004a10:	40013800 	.word	0x40013800
 8004a14:	40021000 	.word	0x40021000
 8004a18:	40004400 	.word	0x40004400
 8004a1c:	40004800 	.word	0x40004800
 8004a20:	40004c00 	.word	0x40004c00
 8004a24:	40005000 	.word	0x40005000
 8004a28:	007a1200 	.word	0x007a1200
      }
    }
  }
  else
  {
    switch (clocksource)
 8004a2c:	7ffb      	ldrb	r3, [r7, #31]
 8004a2e:	2b08      	cmp	r3, #8
 8004a30:	d827      	bhi.n	8004a82 <UART_SetConfig+0x34e>
 8004a32:	a201      	add	r2, pc, #4	; (adr r2, 8004a38 <UART_SetConfig+0x304>)
 8004a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a38:	08004a5d 	.word	0x08004a5d
 8004a3c:	08004a65 	.word	0x08004a65
 8004a40:	08004a6d 	.word	0x08004a6d
 8004a44:	08004a83 	.word	0x08004a83
 8004a48:	08004a73 	.word	0x08004a73
 8004a4c:	08004a83 	.word	0x08004a83
 8004a50:	08004a83 	.word	0x08004a83
 8004a54:	08004a83 	.word	0x08004a83
 8004a58:	08004a7b 	.word	0x08004a7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a5c:	f7ff fa40 	bl	8003ee0 <HAL_RCC_GetPCLK1Freq>
 8004a60:	61b8      	str	r0, [r7, #24]
        break;
 8004a62:	e013      	b.n	8004a8c <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a64:	f7ff fa5e 	bl	8003f24 <HAL_RCC_GetPCLK2Freq>
 8004a68:	61b8      	str	r0, [r7, #24]
        break;
 8004a6a:	e00f      	b.n	8004a8c <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a6c:	4b1b      	ldr	r3, [pc, #108]	; (8004adc <UART_SetConfig+0x3a8>)
 8004a6e:	61bb      	str	r3, [r7, #24]
        break;
 8004a70:	e00c      	b.n	8004a8c <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a72:	f7ff f9bf 	bl	8003df4 <HAL_RCC_GetSysClockFreq>
 8004a76:	61b8      	str	r0, [r7, #24]
        break;
 8004a78:	e008      	b.n	8004a8c <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a7e:	61bb      	str	r3, [r7, #24]
        break;
 8004a80:	e004      	b.n	8004a8c <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 8004a82:	2300      	movs	r3, #0
 8004a84:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	77bb      	strb	r3, [r7, #30]
        break;
 8004a8a:	bf00      	nop
    }

    if (pclk != 0U)
 8004a8c:	69bb      	ldr	r3, [r7, #24]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d018      	beq.n	8004ac4 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	085a      	lsrs	r2, r3, #1
 8004a98:	69bb      	ldr	r3, [r7, #24]
 8004a9a:	441a      	add	r2, r3
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aa4:	b29b      	uxth	r3, r3
 8004aa6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	2b0f      	cmp	r3, #15
 8004aac:	d908      	bls.n	8004ac0 <UART_SetConfig+0x38c>
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ab4:	d204      	bcs.n	8004ac0 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	693a      	ldr	r2, [r7, #16]
 8004abc:	60da      	str	r2, [r3, #12]
 8004abe:	e001      	b.n	8004ac4 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2200      	movs	r2, #0
 8004ace:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004ad0:	7fbb      	ldrb	r3, [r7, #30]
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3720      	adds	r7, #32
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}
 8004ada:	bf00      	nop
 8004adc:	007a1200 	.word	0x007a1200

08004ae0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b083      	sub	sp, #12
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aec:	f003 0301 	and.w	r3, r3, #1
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d00a      	beq.n	8004b0a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	430a      	orrs	r2, r1
 8004b08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b0e:	f003 0302 	and.w	r3, r3, #2
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d00a      	beq.n	8004b2c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	430a      	orrs	r2, r1
 8004b2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b30:	f003 0304 	and.w	r3, r3, #4
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d00a      	beq.n	8004b4e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	430a      	orrs	r2, r1
 8004b4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b52:	f003 0308 	and.w	r3, r3, #8
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d00a      	beq.n	8004b70 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	430a      	orrs	r2, r1
 8004b6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b74:	f003 0310 	and.w	r3, r3, #16
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d00a      	beq.n	8004b92 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	430a      	orrs	r2, r1
 8004b90:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b96:	f003 0320 	and.w	r3, r3, #32
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d00a      	beq.n	8004bb4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	430a      	orrs	r2, r1
 8004bb2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d01a      	beq.n	8004bf6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	430a      	orrs	r2, r1
 8004bd4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004bde:	d10a      	bne.n	8004bf6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	430a      	orrs	r2, r1
 8004bf4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d00a      	beq.n	8004c18 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	430a      	orrs	r2, r1
 8004c16:	605a      	str	r2, [r3, #4]
  }
}
 8004c18:	bf00      	nop
 8004c1a:	370c      	adds	r7, #12
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c22:	4770      	bx	lr

08004c24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b086      	sub	sp, #24
 8004c28:	af02      	add	r7, sp, #8
 8004c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004c34:	f7fb ff9e 	bl	8000b74 <HAL_GetTick>
 8004c38:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f003 0308 	and.w	r3, r3, #8
 8004c44:	2b08      	cmp	r3, #8
 8004c46:	d10e      	bne.n	8004c66 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c48:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c4c:	9300      	str	r3, [sp, #0]
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2200      	movs	r2, #0
 8004c52:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f000 f82d 	bl	8004cb6 <UART_WaitOnFlagUntilTimeout>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d001      	beq.n	8004c66 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c62:	2303      	movs	r3, #3
 8004c64:	e023      	b.n	8004cae <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 0304 	and.w	r3, r3, #4
 8004c70:	2b04      	cmp	r3, #4
 8004c72:	d10e      	bne.n	8004c92 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c74:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c78:	9300      	str	r3, [sp, #0]
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f000 f817 	bl	8004cb6 <UART_WaitOnFlagUntilTimeout>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d001      	beq.n	8004c92 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c8e:	2303      	movs	r3, #3
 8004c90:	e00d      	b.n	8004cae <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2220      	movs	r2, #32
 8004c96:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2220      	movs	r2, #32
 8004c9c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004cac:	2300      	movs	r3, #0
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3710      	adds	r7, #16
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}

08004cb6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004cb6:	b580      	push	{r7, lr}
 8004cb8:	b084      	sub	sp, #16
 8004cba:	af00      	add	r7, sp, #0
 8004cbc:	60f8      	str	r0, [r7, #12]
 8004cbe:	60b9      	str	r1, [r7, #8]
 8004cc0:	603b      	str	r3, [r7, #0]
 8004cc2:	4613      	mov	r3, r2
 8004cc4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cc6:	e05e      	b.n	8004d86 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cc8:	69bb      	ldr	r3, [r7, #24]
 8004cca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cce:	d05a      	beq.n	8004d86 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cd0:	f7fb ff50 	bl	8000b74 <HAL_GetTick>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	1ad3      	subs	r3, r2, r3
 8004cda:	69ba      	ldr	r2, [r7, #24]
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d302      	bcc.n	8004ce6 <UART_WaitOnFlagUntilTimeout+0x30>
 8004ce0:	69bb      	ldr	r3, [r7, #24]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d11b      	bne.n	8004d1e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004cf4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	689a      	ldr	r2, [r3, #8]
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f022 0201 	bic.w	r2, r2, #1
 8004d04:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2220      	movs	r2, #32
 8004d0a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2220      	movs	r2, #32
 8004d10:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2200      	movs	r2, #0
 8004d16:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004d1a:	2303      	movs	r3, #3
 8004d1c:	e043      	b.n	8004da6 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f003 0304 	and.w	r3, r3, #4
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d02c      	beq.n	8004d86 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	69db      	ldr	r3, [r3, #28]
 8004d32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d3a:	d124      	bne.n	8004d86 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d44:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004d54:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	689a      	ldr	r2, [r3, #8]
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f022 0201 	bic.w	r2, r2, #1
 8004d64:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2220      	movs	r2, #32
 8004d6a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2220      	movs	r2, #32
 8004d70:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2220      	movs	r2, #32
 8004d76:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004d82:	2303      	movs	r3, #3
 8004d84:	e00f      	b.n	8004da6 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	69da      	ldr	r2, [r3, #28]
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	4013      	ands	r3, r2
 8004d90:	68ba      	ldr	r2, [r7, #8]
 8004d92:	429a      	cmp	r2, r3
 8004d94:	bf0c      	ite	eq
 8004d96:	2301      	moveq	r3, #1
 8004d98:	2300      	movne	r3, #0
 8004d9a:	b2db      	uxtb	r3, r3
 8004d9c:	461a      	mov	r2, r3
 8004d9e:	79fb      	ldrb	r3, [r7, #7]
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d091      	beq.n	8004cc8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004da4:	2300      	movs	r3, #0
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	3710      	adds	r7, #16
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}

08004dae <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004dae:	b480      	push	{r7}
 8004db0:	b085      	sub	sp, #20
 8004db2:	af00      	add	r7, sp, #0
 8004db4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004db6:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004dba:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004dc2:	b29a      	uxth	r2, r3
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	43db      	mvns	r3, r3
 8004dca:	b29b      	uxth	r3, r3
 8004dcc:	4013      	ands	r3, r2
 8004dce:	b29a      	uxth	r2, r3
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004dd6:	2300      	movs	r3, #0
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	3714      	adds	r7, #20
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de2:	4770      	bx	lr

08004de4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004de4:	b084      	sub	sp, #16
 8004de6:	b480      	push	{r7}
 8004de8:	b083      	sub	sp, #12
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	6078      	str	r0, [r7, #4]
 8004dee:	f107 0014 	add.w	r0, r7, #20
 8004df2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2201      	movs	r2, #1
 8004dfa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2200      	movs	r2, #0
 8004e02:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2200      	movs	r2, #0
 8004e12:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004e16:	2300      	movs	r3, #0
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	370c      	adds	r7, #12
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e22:	b004      	add	sp, #16
 8004e24:	4770      	bx	lr

08004e26 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004e26:	b580      	push	{r7, lr}
 8004e28:	b0c4      	sub	sp, #272	; 0x110
 8004e2a:	af00      	add	r7, sp, #0
 8004e2c:	1d3b      	adds	r3, r7, #4
 8004e2e:	6018      	str	r0, [r3, #0]
 8004e30:	463b      	mov	r3, r7
 8004e32:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004e34:	463b      	mov	r3, r7
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	785b      	ldrb	r3, [r3, #1]
 8004e3a:	2b01      	cmp	r3, #1
 8004e3c:	f040 8557 	bne.w	80058ee <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004e40:	463b      	mov	r3, r7
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	699a      	ldr	r2, [r3, #24]
 8004e46:	463b      	mov	r3, r7
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	691b      	ldr	r3, [r3, #16]
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	d905      	bls.n	8004e5c <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8004e50:	463b      	mov	r3, r7
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	691b      	ldr	r3, [r3, #16]
 8004e56:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004e5a:	e004      	b.n	8004e66 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8004e5c:	463b      	mov	r3, r7
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	699b      	ldr	r3, [r3, #24]
 8004e62:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004e66:	463b      	mov	r3, r7
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	7b1b      	ldrb	r3, [r3, #12]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d12c      	bne.n	8004eca <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004e70:	463b      	mov	r3, r7
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	6959      	ldr	r1, [r3, #20]
 8004e76:	463b      	mov	r3, r7
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	88da      	ldrh	r2, [r3, #6]
 8004e7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e80:	b29b      	uxth	r3, r3
 8004e82:	1d38      	adds	r0, r7, #4
 8004e84:	6800      	ldr	r0, [r0, #0]
 8004e86:	f001 f912 	bl	80060ae <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004e8a:	1d3b      	adds	r3, r7, #4
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	617b      	str	r3, [r7, #20]
 8004e90:	1d3b      	adds	r3, r7, #4
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e98:	b29b      	uxth	r3, r3
 8004e9a:	461a      	mov	r2, r3
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	4413      	add	r3, r2
 8004ea0:	617b      	str	r3, [r7, #20]
 8004ea2:	463b      	mov	r3, r7
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	781b      	ldrb	r3, [r3, #0]
 8004ea8:	00da      	lsls	r2, r3, #3
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	4413      	add	r3, r2
 8004eae:	f203 4202 	addw	r2, r3, #1026	; 0x402
 8004eb2:	f107 0310 	add.w	r3, r7, #16
 8004eb6:	601a      	str	r2, [r3, #0]
 8004eb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ebc:	b29a      	uxth	r2, r3
 8004ebe:	f107 0310 	add.w	r3, r7, #16
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	801a      	strh	r2, [r3, #0]
 8004ec6:	f000 bcdd 	b.w	8005884 <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004eca:	463b      	mov	r3, r7
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	78db      	ldrb	r3, [r3, #3]
 8004ed0:	2b02      	cmp	r3, #2
 8004ed2:	f040 8347 	bne.w	8005564 <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004ed6:	463b      	mov	r3, r7
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	6a1a      	ldr	r2, [r3, #32]
 8004edc:	463b      	mov	r3, r7
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	691b      	ldr	r3, [r3, #16]
 8004ee2:	429a      	cmp	r2, r3
 8004ee4:	f240 82eb 	bls.w	80054be <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8004ee8:	1d3b      	adds	r3, r7, #4
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	463b      	mov	r3, r7
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	781b      	ldrb	r3, [r3, #0]
 8004ef2:	009b      	lsls	r3, r3, #2
 8004ef4:	4413      	add	r3, r2
 8004ef6:	881b      	ldrh	r3, [r3, #0]
 8004ef8:	b29b      	uxth	r3, r3
 8004efa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004efe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f02:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8004f06:	1d3b      	adds	r3, r7, #4
 8004f08:	681a      	ldr	r2, [r3, #0]
 8004f0a:	463b      	mov	r3, r7
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	781b      	ldrb	r3, [r3, #0]
 8004f10:	009b      	lsls	r3, r3, #2
 8004f12:	441a      	add	r2, r3
 8004f14:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8004f18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f20:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004f24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f28:	b29b      	uxth	r3, r3
 8004f2a:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004f2c:	463b      	mov	r3, r7
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	6a1a      	ldr	r2, [r3, #32]
 8004f32:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f36:	1ad2      	subs	r2, r2, r3
 8004f38:	463b      	mov	r3, r7
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004f3e:	1d3b      	adds	r3, r7, #4
 8004f40:	681a      	ldr	r2, [r3, #0]
 8004f42:	463b      	mov	r3, r7
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	781b      	ldrb	r3, [r3, #0]
 8004f48:	009b      	lsls	r3, r3, #2
 8004f4a:	4413      	add	r3, r2
 8004f4c:	881b      	ldrh	r3, [r3, #0]
 8004f4e:	b29b      	uxth	r3, r3
 8004f50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	f000 8159 	beq.w	800520c <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004f5a:	1d3b      	adds	r3, r7, #4
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	637b      	str	r3, [r7, #52]	; 0x34
 8004f60:	463b      	mov	r3, r7
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	785b      	ldrb	r3, [r3, #1]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d164      	bne.n	8005034 <USB_EPStartXfer+0x20e>
 8004f6a:	1d3b      	adds	r3, r7, #4
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f70:	1d3b      	adds	r3, r7, #4
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f78:	b29b      	uxth	r3, r3
 8004f7a:	461a      	mov	r2, r3
 8004f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f7e:	4413      	add	r3, r2
 8004f80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f82:	463b      	mov	r3, r7
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	781b      	ldrb	r3, [r3, #0]
 8004f88:	00da      	lsls	r2, r3, #3
 8004f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f8c:	4413      	add	r3, r2
 8004f8e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004f92:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d112      	bne.n	8004fc2 <USB_EPStartXfer+0x19c>
 8004f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f9e:	881b      	ldrh	r3, [r3, #0]
 8004fa0:	b29b      	uxth	r3, r3
 8004fa2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004fa6:	b29a      	uxth	r2, r3
 8004fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004faa:	801a      	strh	r2, [r3, #0]
 8004fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fae:	881b      	ldrh	r3, [r3, #0]
 8004fb0:	b29b      	uxth	r3, r3
 8004fb2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fb6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fba:	b29a      	uxth	r2, r3
 8004fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fbe:	801a      	strh	r2, [r3, #0]
 8004fc0:	e054      	b.n	800506c <USB_EPStartXfer+0x246>
 8004fc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fc6:	2b3e      	cmp	r3, #62	; 0x3e
 8004fc8:	d817      	bhi.n	8004ffa <USB_EPStartXfer+0x1d4>
 8004fca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fce:	085b      	lsrs	r3, r3, #1
 8004fd0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004fd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fd8:	f003 0301 	and.w	r3, r3, #1
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d004      	beq.n	8004fea <USB_EPStartXfer+0x1c4>
 8004fe0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004fe4:	3301      	adds	r3, #1
 8004fe6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004fea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004fee:	b29b      	uxth	r3, r3
 8004ff0:	029b      	lsls	r3, r3, #10
 8004ff2:	b29a      	uxth	r2, r3
 8004ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ff6:	801a      	strh	r2, [r3, #0]
 8004ff8:	e038      	b.n	800506c <USB_EPStartXfer+0x246>
 8004ffa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ffe:	095b      	lsrs	r3, r3, #5
 8005000:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005004:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005008:	f003 031f 	and.w	r3, r3, #31
 800500c:	2b00      	cmp	r3, #0
 800500e:	d104      	bne.n	800501a <USB_EPStartXfer+0x1f4>
 8005010:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005014:	3b01      	subs	r3, #1
 8005016:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800501a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800501e:	b29b      	uxth	r3, r3
 8005020:	029b      	lsls	r3, r3, #10
 8005022:	b29b      	uxth	r3, r3
 8005024:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005028:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800502c:	b29a      	uxth	r2, r3
 800502e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005030:	801a      	strh	r2, [r3, #0]
 8005032:	e01b      	b.n	800506c <USB_EPStartXfer+0x246>
 8005034:	463b      	mov	r3, r7
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	785b      	ldrb	r3, [r3, #1]
 800503a:	2b01      	cmp	r3, #1
 800503c:	d116      	bne.n	800506c <USB_EPStartXfer+0x246>
 800503e:	1d3b      	adds	r3, r7, #4
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005046:	b29b      	uxth	r3, r3
 8005048:	461a      	mov	r2, r3
 800504a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800504c:	4413      	add	r3, r2
 800504e:	637b      	str	r3, [r7, #52]	; 0x34
 8005050:	463b      	mov	r3, r7
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	781b      	ldrb	r3, [r3, #0]
 8005056:	00da      	lsls	r2, r3, #3
 8005058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800505a:	4413      	add	r3, r2
 800505c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005060:	633b      	str	r3, [r7, #48]	; 0x30
 8005062:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005066:	b29a      	uxth	r2, r3
 8005068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800506a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800506c:	463b      	mov	r3, r7
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	895b      	ldrh	r3, [r3, #10]
 8005072:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005076:	463b      	mov	r3, r7
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	6959      	ldr	r1, [r3, #20]
 800507c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005080:	b29b      	uxth	r3, r3
 8005082:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005086:	1d38      	adds	r0, r7, #4
 8005088:	6800      	ldr	r0, [r0, #0]
 800508a:	f001 f810 	bl	80060ae <USB_WritePMA>
            ep->xfer_buff += len;
 800508e:	463b      	mov	r3, r7
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	695a      	ldr	r2, [r3, #20]
 8005094:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005098:	441a      	add	r2, r3
 800509a:	463b      	mov	r3, r7
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80050a0:	463b      	mov	r3, r7
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	6a1a      	ldr	r2, [r3, #32]
 80050a6:	463b      	mov	r3, r7
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	691b      	ldr	r3, [r3, #16]
 80050ac:	429a      	cmp	r2, r3
 80050ae:	d909      	bls.n	80050c4 <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 80050b0:	463b      	mov	r3, r7
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	6a1a      	ldr	r2, [r3, #32]
 80050b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050ba:	1ad2      	subs	r2, r2, r3
 80050bc:	463b      	mov	r3, r7
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	621a      	str	r2, [r3, #32]
 80050c2:	e008      	b.n	80050d6 <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 80050c4:	463b      	mov	r3, r7
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	6a1b      	ldr	r3, [r3, #32]
 80050ca:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 80050ce:	463b      	mov	r3, r7
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	2200      	movs	r2, #0
 80050d4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80050d6:	463b      	mov	r3, r7
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	785b      	ldrb	r3, [r3, #1]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d164      	bne.n	80051aa <USB_EPStartXfer+0x384>
 80050e0:	1d3b      	adds	r3, r7, #4
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	61fb      	str	r3, [r7, #28]
 80050e6:	1d3b      	adds	r3, r7, #4
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050ee:	b29b      	uxth	r3, r3
 80050f0:	461a      	mov	r2, r3
 80050f2:	69fb      	ldr	r3, [r7, #28]
 80050f4:	4413      	add	r3, r2
 80050f6:	61fb      	str	r3, [r7, #28]
 80050f8:	463b      	mov	r3, r7
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	781b      	ldrb	r3, [r3, #0]
 80050fe:	00da      	lsls	r2, r3, #3
 8005100:	69fb      	ldr	r3, [r7, #28]
 8005102:	4413      	add	r3, r2
 8005104:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005108:	61bb      	str	r3, [r7, #24]
 800510a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800510e:	2b00      	cmp	r3, #0
 8005110:	d112      	bne.n	8005138 <USB_EPStartXfer+0x312>
 8005112:	69bb      	ldr	r3, [r7, #24]
 8005114:	881b      	ldrh	r3, [r3, #0]
 8005116:	b29b      	uxth	r3, r3
 8005118:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800511c:	b29a      	uxth	r2, r3
 800511e:	69bb      	ldr	r3, [r7, #24]
 8005120:	801a      	strh	r2, [r3, #0]
 8005122:	69bb      	ldr	r3, [r7, #24]
 8005124:	881b      	ldrh	r3, [r3, #0]
 8005126:	b29b      	uxth	r3, r3
 8005128:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800512c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005130:	b29a      	uxth	r2, r3
 8005132:	69bb      	ldr	r3, [r7, #24]
 8005134:	801a      	strh	r2, [r3, #0]
 8005136:	e057      	b.n	80051e8 <USB_EPStartXfer+0x3c2>
 8005138:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800513c:	2b3e      	cmp	r3, #62	; 0x3e
 800513e:	d817      	bhi.n	8005170 <USB_EPStartXfer+0x34a>
 8005140:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005144:	085b      	lsrs	r3, r3, #1
 8005146:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800514a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800514e:	f003 0301 	and.w	r3, r3, #1
 8005152:	2b00      	cmp	r3, #0
 8005154:	d004      	beq.n	8005160 <USB_EPStartXfer+0x33a>
 8005156:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800515a:	3301      	adds	r3, #1
 800515c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005160:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005164:	b29b      	uxth	r3, r3
 8005166:	029b      	lsls	r3, r3, #10
 8005168:	b29a      	uxth	r2, r3
 800516a:	69bb      	ldr	r3, [r7, #24]
 800516c:	801a      	strh	r2, [r3, #0]
 800516e:	e03b      	b.n	80051e8 <USB_EPStartXfer+0x3c2>
 8005170:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005174:	095b      	lsrs	r3, r3, #5
 8005176:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800517a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800517e:	f003 031f 	and.w	r3, r3, #31
 8005182:	2b00      	cmp	r3, #0
 8005184:	d104      	bne.n	8005190 <USB_EPStartXfer+0x36a>
 8005186:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800518a:	3b01      	subs	r3, #1
 800518c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005190:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005194:	b29b      	uxth	r3, r3
 8005196:	029b      	lsls	r3, r3, #10
 8005198:	b29b      	uxth	r3, r3
 800519a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800519e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051a2:	b29a      	uxth	r2, r3
 80051a4:	69bb      	ldr	r3, [r7, #24]
 80051a6:	801a      	strh	r2, [r3, #0]
 80051a8:	e01e      	b.n	80051e8 <USB_EPStartXfer+0x3c2>
 80051aa:	463b      	mov	r3, r7
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	785b      	ldrb	r3, [r3, #1]
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d119      	bne.n	80051e8 <USB_EPStartXfer+0x3c2>
 80051b4:	1d3b      	adds	r3, r7, #4
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	627b      	str	r3, [r7, #36]	; 0x24
 80051ba:	1d3b      	adds	r3, r7, #4
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051c2:	b29b      	uxth	r3, r3
 80051c4:	461a      	mov	r2, r3
 80051c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c8:	4413      	add	r3, r2
 80051ca:	627b      	str	r3, [r7, #36]	; 0x24
 80051cc:	463b      	mov	r3, r7
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	781b      	ldrb	r3, [r3, #0]
 80051d2:	00da      	lsls	r2, r3, #3
 80051d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d6:	4413      	add	r3, r2
 80051d8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80051dc:	623b      	str	r3, [r7, #32]
 80051de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051e2:	b29a      	uxth	r2, r3
 80051e4:	6a3b      	ldr	r3, [r7, #32]
 80051e6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80051e8:	463b      	mov	r3, r7
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	891b      	ldrh	r3, [r3, #8]
 80051ee:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80051f2:	463b      	mov	r3, r7
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	6959      	ldr	r1, [r3, #20]
 80051f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051fc:	b29b      	uxth	r3, r3
 80051fe:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005202:	1d38      	adds	r0, r7, #4
 8005204:	6800      	ldr	r0, [r0, #0]
 8005206:	f000 ff52 	bl	80060ae <USB_WritePMA>
 800520a:	e33b      	b.n	8005884 <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800520c:	463b      	mov	r3, r7
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	785b      	ldrb	r3, [r3, #1]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d164      	bne.n	80052e0 <USB_EPStartXfer+0x4ba>
 8005216:	1d3b      	adds	r3, r7, #4
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800521c:	1d3b      	adds	r3, r7, #4
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005224:	b29b      	uxth	r3, r3
 8005226:	461a      	mov	r2, r3
 8005228:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800522a:	4413      	add	r3, r2
 800522c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800522e:	463b      	mov	r3, r7
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	781b      	ldrb	r3, [r3, #0]
 8005234:	00da      	lsls	r2, r3, #3
 8005236:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005238:	4413      	add	r3, r2
 800523a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800523e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005240:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005244:	2b00      	cmp	r3, #0
 8005246:	d112      	bne.n	800526e <USB_EPStartXfer+0x448>
 8005248:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800524a:	881b      	ldrh	r3, [r3, #0]
 800524c:	b29b      	uxth	r3, r3
 800524e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005252:	b29a      	uxth	r2, r3
 8005254:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005256:	801a      	strh	r2, [r3, #0]
 8005258:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800525a:	881b      	ldrh	r3, [r3, #0]
 800525c:	b29b      	uxth	r3, r3
 800525e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005262:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005266:	b29a      	uxth	r2, r3
 8005268:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800526a:	801a      	strh	r2, [r3, #0]
 800526c:	e057      	b.n	800531e <USB_EPStartXfer+0x4f8>
 800526e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005272:	2b3e      	cmp	r3, #62	; 0x3e
 8005274:	d817      	bhi.n	80052a6 <USB_EPStartXfer+0x480>
 8005276:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800527a:	085b      	lsrs	r3, r3, #1
 800527c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005280:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005284:	f003 0301 	and.w	r3, r3, #1
 8005288:	2b00      	cmp	r3, #0
 800528a:	d004      	beq.n	8005296 <USB_EPStartXfer+0x470>
 800528c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005290:	3301      	adds	r3, #1
 8005292:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005296:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800529a:	b29b      	uxth	r3, r3
 800529c:	029b      	lsls	r3, r3, #10
 800529e:	b29a      	uxth	r2, r3
 80052a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052a2:	801a      	strh	r2, [r3, #0]
 80052a4:	e03b      	b.n	800531e <USB_EPStartXfer+0x4f8>
 80052a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052aa:	095b      	lsrs	r3, r3, #5
 80052ac:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80052b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052b4:	f003 031f 	and.w	r3, r3, #31
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d104      	bne.n	80052c6 <USB_EPStartXfer+0x4a0>
 80052bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052c0:	3b01      	subs	r3, #1
 80052c2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80052c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052ca:	b29b      	uxth	r3, r3
 80052cc:	029b      	lsls	r3, r3, #10
 80052ce:	b29b      	uxth	r3, r3
 80052d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052d8:	b29a      	uxth	r2, r3
 80052da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052dc:	801a      	strh	r2, [r3, #0]
 80052de:	e01e      	b.n	800531e <USB_EPStartXfer+0x4f8>
 80052e0:	463b      	mov	r3, r7
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	785b      	ldrb	r3, [r3, #1]
 80052e6:	2b01      	cmp	r3, #1
 80052e8:	d119      	bne.n	800531e <USB_EPStartXfer+0x4f8>
 80052ea:	1d3b      	adds	r3, r7, #4
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	657b      	str	r3, [r7, #84]	; 0x54
 80052f0:	1d3b      	adds	r3, r7, #4
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052f8:	b29b      	uxth	r3, r3
 80052fa:	461a      	mov	r2, r3
 80052fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052fe:	4413      	add	r3, r2
 8005300:	657b      	str	r3, [r7, #84]	; 0x54
 8005302:	463b      	mov	r3, r7
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	781b      	ldrb	r3, [r3, #0]
 8005308:	00da      	lsls	r2, r3, #3
 800530a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800530c:	4413      	add	r3, r2
 800530e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005312:	653b      	str	r3, [r7, #80]	; 0x50
 8005314:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005318:	b29a      	uxth	r2, r3
 800531a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800531c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800531e:	463b      	mov	r3, r7
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	891b      	ldrh	r3, [r3, #8]
 8005324:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005328:	463b      	mov	r3, r7
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	6959      	ldr	r1, [r3, #20]
 800532e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005332:	b29b      	uxth	r3, r3
 8005334:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005338:	1d38      	adds	r0, r7, #4
 800533a:	6800      	ldr	r0, [r0, #0]
 800533c:	f000 feb7 	bl	80060ae <USB_WritePMA>
            ep->xfer_buff += len;
 8005340:	463b      	mov	r3, r7
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	695a      	ldr	r2, [r3, #20]
 8005346:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800534a:	441a      	add	r2, r3
 800534c:	463b      	mov	r3, r7
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005352:	463b      	mov	r3, r7
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	6a1a      	ldr	r2, [r3, #32]
 8005358:	463b      	mov	r3, r7
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	691b      	ldr	r3, [r3, #16]
 800535e:	429a      	cmp	r2, r3
 8005360:	d909      	bls.n	8005376 <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 8005362:	463b      	mov	r3, r7
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	6a1a      	ldr	r2, [r3, #32]
 8005368:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800536c:	1ad2      	subs	r2, r2, r3
 800536e:	463b      	mov	r3, r7
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	621a      	str	r2, [r3, #32]
 8005374:	e008      	b.n	8005388 <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 8005376:	463b      	mov	r3, r7
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	6a1b      	ldr	r3, [r3, #32]
 800537c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8005380:	463b      	mov	r3, r7
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	2200      	movs	r2, #0
 8005386:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005388:	1d3b      	adds	r3, r7, #4
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	647b      	str	r3, [r7, #68]	; 0x44
 800538e:	463b      	mov	r3, r7
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	785b      	ldrb	r3, [r3, #1]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d164      	bne.n	8005462 <USB_EPStartXfer+0x63c>
 8005398:	1d3b      	adds	r3, r7, #4
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800539e:	1d3b      	adds	r3, r7, #4
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053a6:	b29b      	uxth	r3, r3
 80053a8:	461a      	mov	r2, r3
 80053aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053ac:	4413      	add	r3, r2
 80053ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053b0:	463b      	mov	r3, r7
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	781b      	ldrb	r3, [r3, #0]
 80053b6:	00da      	lsls	r2, r3, #3
 80053b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053ba:	4413      	add	r3, r2
 80053bc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80053c0:	63bb      	str	r3, [r7, #56]	; 0x38
 80053c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d112      	bne.n	80053f0 <USB_EPStartXfer+0x5ca>
 80053ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053cc:	881b      	ldrh	r3, [r3, #0]
 80053ce:	b29b      	uxth	r3, r3
 80053d0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80053d4:	b29a      	uxth	r2, r3
 80053d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053d8:	801a      	strh	r2, [r3, #0]
 80053da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053dc:	881b      	ldrh	r3, [r3, #0]
 80053de:	b29b      	uxth	r3, r3
 80053e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053e8:	b29a      	uxth	r2, r3
 80053ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ec:	801a      	strh	r2, [r3, #0]
 80053ee:	e054      	b.n	800549a <USB_EPStartXfer+0x674>
 80053f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053f4:	2b3e      	cmp	r3, #62	; 0x3e
 80053f6:	d817      	bhi.n	8005428 <USB_EPStartXfer+0x602>
 80053f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053fc:	085b      	lsrs	r3, r3, #1
 80053fe:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005402:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005406:	f003 0301 	and.w	r3, r3, #1
 800540a:	2b00      	cmp	r3, #0
 800540c:	d004      	beq.n	8005418 <USB_EPStartXfer+0x5f2>
 800540e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005412:	3301      	adds	r3, #1
 8005414:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005418:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800541c:	b29b      	uxth	r3, r3
 800541e:	029b      	lsls	r3, r3, #10
 8005420:	b29a      	uxth	r2, r3
 8005422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005424:	801a      	strh	r2, [r3, #0]
 8005426:	e038      	b.n	800549a <USB_EPStartXfer+0x674>
 8005428:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800542c:	095b      	lsrs	r3, r3, #5
 800542e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005432:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005436:	f003 031f 	and.w	r3, r3, #31
 800543a:	2b00      	cmp	r3, #0
 800543c:	d104      	bne.n	8005448 <USB_EPStartXfer+0x622>
 800543e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005442:	3b01      	subs	r3, #1
 8005444:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005448:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800544c:	b29b      	uxth	r3, r3
 800544e:	029b      	lsls	r3, r3, #10
 8005450:	b29b      	uxth	r3, r3
 8005452:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005456:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800545a:	b29a      	uxth	r2, r3
 800545c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800545e:	801a      	strh	r2, [r3, #0]
 8005460:	e01b      	b.n	800549a <USB_EPStartXfer+0x674>
 8005462:	463b      	mov	r3, r7
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	785b      	ldrb	r3, [r3, #1]
 8005468:	2b01      	cmp	r3, #1
 800546a:	d116      	bne.n	800549a <USB_EPStartXfer+0x674>
 800546c:	1d3b      	adds	r3, r7, #4
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005474:	b29b      	uxth	r3, r3
 8005476:	461a      	mov	r2, r3
 8005478:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800547a:	4413      	add	r3, r2
 800547c:	647b      	str	r3, [r7, #68]	; 0x44
 800547e:	463b      	mov	r3, r7
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	781b      	ldrb	r3, [r3, #0]
 8005484:	00da      	lsls	r2, r3, #3
 8005486:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005488:	4413      	add	r3, r2
 800548a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800548e:	643b      	str	r3, [r7, #64]	; 0x40
 8005490:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005494:	b29a      	uxth	r2, r3
 8005496:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005498:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800549a:	463b      	mov	r3, r7
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	895b      	ldrh	r3, [r3, #10]
 80054a0:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80054a4:	463b      	mov	r3, r7
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	6959      	ldr	r1, [r3, #20]
 80054aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054ae:	b29b      	uxth	r3, r3
 80054b0:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80054b4:	1d38      	adds	r0, r7, #4
 80054b6:	6800      	ldr	r0, [r0, #0]
 80054b8:	f000 fdf9 	bl	80060ae <USB_WritePMA>
 80054bc:	e1e2      	b.n	8005884 <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80054be:	463b      	mov	r3, r7
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	6a1b      	ldr	r3, [r3, #32]
 80054c4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80054c8:	1d3b      	adds	r3, r7, #4
 80054ca:	681a      	ldr	r2, [r3, #0]
 80054cc:	463b      	mov	r3, r7
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	781b      	ldrb	r3, [r3, #0]
 80054d2:	009b      	lsls	r3, r3, #2
 80054d4:	4413      	add	r3, r2
 80054d6:	881b      	ldrh	r3, [r3, #0]
 80054d8:	b29b      	uxth	r3, r3
 80054da:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80054de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054e2:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80054e6:	1d3b      	adds	r3, r7, #4
 80054e8:	681a      	ldr	r2, [r3, #0]
 80054ea:	463b      	mov	r3, r7
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	781b      	ldrb	r3, [r3, #0]
 80054f0:	009b      	lsls	r3, r3, #2
 80054f2:	441a      	add	r2, r3
 80054f4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80054f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005500:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005504:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005508:	b29b      	uxth	r3, r3
 800550a:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800550c:	1d3b      	adds	r3, r7, #4
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	663b      	str	r3, [r7, #96]	; 0x60
 8005512:	1d3b      	adds	r3, r7, #4
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800551a:	b29b      	uxth	r3, r3
 800551c:	461a      	mov	r2, r3
 800551e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005520:	4413      	add	r3, r2
 8005522:	663b      	str	r3, [r7, #96]	; 0x60
 8005524:	463b      	mov	r3, r7
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	781b      	ldrb	r3, [r3, #0]
 800552a:	00da      	lsls	r2, r3, #3
 800552c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800552e:	4413      	add	r3, r2
 8005530:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005534:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005536:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800553a:	b29a      	uxth	r2, r3
 800553c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800553e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005540:	463b      	mov	r3, r7
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	891b      	ldrh	r3, [r3, #8]
 8005546:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800554a:	463b      	mov	r3, r7
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	6959      	ldr	r1, [r3, #20]
 8005550:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005554:	b29b      	uxth	r3, r3
 8005556:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 800555a:	1d38      	adds	r0, r7, #4
 800555c:	6800      	ldr	r0, [r0, #0]
 800555e:	f000 fda6 	bl	80060ae <USB_WritePMA>
 8005562:	e18f      	b.n	8005884 <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005564:	1d3b      	adds	r3, r7, #4
 8005566:	681a      	ldr	r2, [r3, #0]
 8005568:	463b      	mov	r3, r7
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	781b      	ldrb	r3, [r3, #0]
 800556e:	009b      	lsls	r3, r3, #2
 8005570:	4413      	add	r3, r2
 8005572:	881b      	ldrh	r3, [r3, #0]
 8005574:	b29b      	uxth	r3, r3
 8005576:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800557a:	2b00      	cmp	r3, #0
 800557c:	f000 808f 	beq.w	800569e <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005580:	1d3b      	adds	r3, r7, #4
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	67bb      	str	r3, [r7, #120]	; 0x78
 8005586:	463b      	mov	r3, r7
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	785b      	ldrb	r3, [r3, #1]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d164      	bne.n	800565a <USB_EPStartXfer+0x834>
 8005590:	1d3b      	adds	r3, r7, #4
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	673b      	str	r3, [r7, #112]	; 0x70
 8005596:	1d3b      	adds	r3, r7, #4
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800559e:	b29b      	uxth	r3, r3
 80055a0:	461a      	mov	r2, r3
 80055a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80055a4:	4413      	add	r3, r2
 80055a6:	673b      	str	r3, [r7, #112]	; 0x70
 80055a8:	463b      	mov	r3, r7
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	781b      	ldrb	r3, [r3, #0]
 80055ae:	00da      	lsls	r2, r3, #3
 80055b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80055b2:	4413      	add	r3, r2
 80055b4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80055b8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80055ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d112      	bne.n	80055e8 <USB_EPStartXfer+0x7c2>
 80055c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055c4:	881b      	ldrh	r3, [r3, #0]
 80055c6:	b29b      	uxth	r3, r3
 80055c8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80055cc:	b29a      	uxth	r2, r3
 80055ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055d0:	801a      	strh	r2, [r3, #0]
 80055d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055d4:	881b      	ldrh	r3, [r3, #0]
 80055d6:	b29b      	uxth	r3, r3
 80055d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055e0:	b29a      	uxth	r2, r3
 80055e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055e4:	801a      	strh	r2, [r3, #0]
 80055e6:	e054      	b.n	8005692 <USB_EPStartXfer+0x86c>
 80055e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055ec:	2b3e      	cmp	r3, #62	; 0x3e
 80055ee:	d817      	bhi.n	8005620 <USB_EPStartXfer+0x7fa>
 80055f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055f4:	085b      	lsrs	r3, r3, #1
 80055f6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80055fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055fe:	f003 0301 	and.w	r3, r3, #1
 8005602:	2b00      	cmp	r3, #0
 8005604:	d004      	beq.n	8005610 <USB_EPStartXfer+0x7ea>
 8005606:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800560a:	3301      	adds	r3, #1
 800560c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005614:	b29b      	uxth	r3, r3
 8005616:	029b      	lsls	r3, r3, #10
 8005618:	b29a      	uxth	r2, r3
 800561a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800561c:	801a      	strh	r2, [r3, #0]
 800561e:	e038      	b.n	8005692 <USB_EPStartXfer+0x86c>
 8005620:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005624:	095b      	lsrs	r3, r3, #5
 8005626:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800562a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800562e:	f003 031f 	and.w	r3, r3, #31
 8005632:	2b00      	cmp	r3, #0
 8005634:	d104      	bne.n	8005640 <USB_EPStartXfer+0x81a>
 8005636:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800563a:	3b01      	subs	r3, #1
 800563c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005644:	b29b      	uxth	r3, r3
 8005646:	029b      	lsls	r3, r3, #10
 8005648:	b29b      	uxth	r3, r3
 800564a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800564e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005652:	b29a      	uxth	r2, r3
 8005654:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005656:	801a      	strh	r2, [r3, #0]
 8005658:	e01b      	b.n	8005692 <USB_EPStartXfer+0x86c>
 800565a:	463b      	mov	r3, r7
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	785b      	ldrb	r3, [r3, #1]
 8005660:	2b01      	cmp	r3, #1
 8005662:	d116      	bne.n	8005692 <USB_EPStartXfer+0x86c>
 8005664:	1d3b      	adds	r3, r7, #4
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800566c:	b29b      	uxth	r3, r3
 800566e:	461a      	mov	r2, r3
 8005670:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005672:	4413      	add	r3, r2
 8005674:	67bb      	str	r3, [r7, #120]	; 0x78
 8005676:	463b      	mov	r3, r7
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	781b      	ldrb	r3, [r3, #0]
 800567c:	00da      	lsls	r2, r3, #3
 800567e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005680:	4413      	add	r3, r2
 8005682:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005686:	677b      	str	r3, [r7, #116]	; 0x74
 8005688:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800568c:	b29a      	uxth	r2, r3
 800568e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005690:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005692:	463b      	mov	r3, r7
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	895b      	ldrh	r3, [r3, #10]
 8005698:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 800569c:	e097      	b.n	80057ce <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800569e:	463b      	mov	r3, r7
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	785b      	ldrb	r3, [r3, #1]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d168      	bne.n	800577a <USB_EPStartXfer+0x954>
 80056a8:	1d3b      	adds	r3, r7, #4
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80056b0:	1d3b      	adds	r3, r7, #4
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056b8:	b29b      	uxth	r3, r3
 80056ba:	461a      	mov	r2, r3
 80056bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80056c0:	4413      	add	r3, r2
 80056c2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80056c6:	463b      	mov	r3, r7
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	781b      	ldrb	r3, [r3, #0]
 80056cc:	00da      	lsls	r2, r3, #3
 80056ce:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80056d2:	4413      	add	r3, r2
 80056d4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80056d8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80056da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d112      	bne.n	8005708 <USB_EPStartXfer+0x8e2>
 80056e2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80056e4:	881b      	ldrh	r3, [r3, #0]
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80056ec:	b29a      	uxth	r2, r3
 80056ee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80056f0:	801a      	strh	r2, [r3, #0]
 80056f2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80056f4:	881b      	ldrh	r3, [r3, #0]
 80056f6:	b29b      	uxth	r3, r3
 80056f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005700:	b29a      	uxth	r2, r3
 8005702:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005704:	801a      	strh	r2, [r3, #0]
 8005706:	e05d      	b.n	80057c4 <USB_EPStartXfer+0x99e>
 8005708:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800570c:	2b3e      	cmp	r3, #62	; 0x3e
 800570e:	d817      	bhi.n	8005740 <USB_EPStartXfer+0x91a>
 8005710:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005714:	085b      	lsrs	r3, r3, #1
 8005716:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800571a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800571e:	f003 0301 	and.w	r3, r3, #1
 8005722:	2b00      	cmp	r3, #0
 8005724:	d004      	beq.n	8005730 <USB_EPStartXfer+0x90a>
 8005726:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800572a:	3301      	adds	r3, #1
 800572c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005730:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005734:	b29b      	uxth	r3, r3
 8005736:	029b      	lsls	r3, r3, #10
 8005738:	b29a      	uxth	r2, r3
 800573a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800573c:	801a      	strh	r2, [r3, #0]
 800573e:	e041      	b.n	80057c4 <USB_EPStartXfer+0x99e>
 8005740:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005744:	095b      	lsrs	r3, r3, #5
 8005746:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800574a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800574e:	f003 031f 	and.w	r3, r3, #31
 8005752:	2b00      	cmp	r3, #0
 8005754:	d104      	bne.n	8005760 <USB_EPStartXfer+0x93a>
 8005756:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800575a:	3b01      	subs	r3, #1
 800575c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005760:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005764:	b29b      	uxth	r3, r3
 8005766:	029b      	lsls	r3, r3, #10
 8005768:	b29b      	uxth	r3, r3
 800576a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800576e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005772:	b29a      	uxth	r2, r3
 8005774:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005776:	801a      	strh	r2, [r3, #0]
 8005778:	e024      	b.n	80057c4 <USB_EPStartXfer+0x99e>
 800577a:	463b      	mov	r3, r7
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	785b      	ldrb	r3, [r3, #1]
 8005780:	2b01      	cmp	r3, #1
 8005782:	d11f      	bne.n	80057c4 <USB_EPStartXfer+0x99e>
 8005784:	1d3b      	adds	r3, r7, #4
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800578c:	1d3b      	adds	r3, r7, #4
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005794:	b29b      	uxth	r3, r3
 8005796:	461a      	mov	r2, r3
 8005798:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800579c:	4413      	add	r3, r2
 800579e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80057a2:	463b      	mov	r3, r7
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	781b      	ldrb	r3, [r3, #0]
 80057a8:	00da      	lsls	r2, r3, #3
 80057aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80057ae:	4413      	add	r3, r2
 80057b0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80057b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80057b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057bc:	b29a      	uxth	r2, r3
 80057be:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80057c2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80057c4:	463b      	mov	r3, r7
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	891b      	ldrh	r3, [r3, #8]
 80057ca:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80057ce:	463b      	mov	r3, r7
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	6959      	ldr	r1, [r3, #20]
 80057d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057d8:	b29b      	uxth	r3, r3
 80057da:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80057de:	1d38      	adds	r0, r7, #4
 80057e0:	6800      	ldr	r0, [r0, #0]
 80057e2:	f000 fc64 	bl	80060ae <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80057e6:	463b      	mov	r3, r7
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	785b      	ldrb	r3, [r3, #1]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d122      	bne.n	8005836 <USB_EPStartXfer+0xa10>
 80057f0:	1d3b      	adds	r3, r7, #4
 80057f2:	681a      	ldr	r2, [r3, #0]
 80057f4:	463b      	mov	r3, r7
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	781b      	ldrb	r3, [r3, #0]
 80057fa:	009b      	lsls	r3, r3, #2
 80057fc:	4413      	add	r3, r2
 80057fe:	881b      	ldrh	r3, [r3, #0]
 8005800:	b29b      	uxth	r3, r3
 8005802:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005806:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800580a:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 800580e:	1d3b      	adds	r3, r7, #4
 8005810:	681a      	ldr	r2, [r3, #0]
 8005812:	463b      	mov	r3, r7
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	781b      	ldrb	r3, [r3, #0]
 8005818:	009b      	lsls	r3, r3, #2
 800581a:	441a      	add	r2, r3
 800581c:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8005820:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005824:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005828:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800582c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005830:	b29b      	uxth	r3, r3
 8005832:	8013      	strh	r3, [r2, #0]
 8005834:	e026      	b.n	8005884 <USB_EPStartXfer+0xa5e>
 8005836:	463b      	mov	r3, r7
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	785b      	ldrb	r3, [r3, #1]
 800583c:	2b01      	cmp	r3, #1
 800583e:	d121      	bne.n	8005884 <USB_EPStartXfer+0xa5e>
 8005840:	1d3b      	adds	r3, r7, #4
 8005842:	681a      	ldr	r2, [r3, #0]
 8005844:	463b      	mov	r3, r7
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	781b      	ldrb	r3, [r3, #0]
 800584a:	009b      	lsls	r3, r3, #2
 800584c:	4413      	add	r3, r2
 800584e:	881b      	ldrh	r3, [r3, #0]
 8005850:	b29b      	uxth	r3, r3
 8005852:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005856:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800585a:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 800585e:	1d3b      	adds	r3, r7, #4
 8005860:	681a      	ldr	r2, [r3, #0]
 8005862:	463b      	mov	r3, r7
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	781b      	ldrb	r3, [r3, #0]
 8005868:	009b      	lsls	r3, r3, #2
 800586a:	441a      	add	r2, r3
 800586c:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8005870:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005874:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005878:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800587c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005880:	b29b      	uxth	r3, r3
 8005882:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005884:	1d3b      	adds	r3, r7, #4
 8005886:	681a      	ldr	r2, [r3, #0]
 8005888:	463b      	mov	r3, r7
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	781b      	ldrb	r3, [r3, #0]
 800588e:	009b      	lsls	r3, r3, #2
 8005890:	4413      	add	r3, r2
 8005892:	881b      	ldrh	r3, [r3, #0]
 8005894:	b29b      	uxth	r3, r3
 8005896:	f107 020e 	add.w	r2, r7, #14
 800589a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800589e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058a2:	8013      	strh	r3, [r2, #0]
 80058a4:	f107 030e 	add.w	r3, r7, #14
 80058a8:	f107 020e 	add.w	r2, r7, #14
 80058ac:	8812      	ldrh	r2, [r2, #0]
 80058ae:	f082 0210 	eor.w	r2, r2, #16
 80058b2:	801a      	strh	r2, [r3, #0]
 80058b4:	f107 030e 	add.w	r3, r7, #14
 80058b8:	f107 020e 	add.w	r2, r7, #14
 80058bc:	8812      	ldrh	r2, [r2, #0]
 80058be:	f082 0220 	eor.w	r2, r2, #32
 80058c2:	801a      	strh	r2, [r3, #0]
 80058c4:	1d3b      	adds	r3, r7, #4
 80058c6:	681a      	ldr	r2, [r3, #0]
 80058c8:	463b      	mov	r3, r7
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	781b      	ldrb	r3, [r3, #0]
 80058ce:	009b      	lsls	r3, r3, #2
 80058d0:	441a      	add	r2, r3
 80058d2:	f107 030e 	add.w	r3, r7, #14
 80058d6:	881b      	ldrh	r3, [r3, #0]
 80058d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058e8:	b29b      	uxth	r3, r3
 80058ea:	8013      	strh	r3, [r2, #0]
 80058ec:	e3b5      	b.n	800605a <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80058ee:	463b      	mov	r3, r7
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	7b1b      	ldrb	r3, [r3, #12]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	f040 8090 	bne.w	8005a1a <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80058fa:	463b      	mov	r3, r7
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	699a      	ldr	r2, [r3, #24]
 8005900:	463b      	mov	r3, r7
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	691b      	ldr	r3, [r3, #16]
 8005906:	429a      	cmp	r2, r3
 8005908:	d90e      	bls.n	8005928 <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 800590a:	463b      	mov	r3, r7
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	691b      	ldr	r3, [r3, #16]
 8005910:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 8005914:	463b      	mov	r3, r7
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	699a      	ldr	r2, [r3, #24]
 800591a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800591e:	1ad2      	subs	r2, r2, r3
 8005920:	463b      	mov	r3, r7
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	619a      	str	r2, [r3, #24]
 8005926:	e008      	b.n	800593a <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 8005928:	463b      	mov	r3, r7
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	699b      	ldr	r3, [r3, #24]
 800592e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 8005932:	463b      	mov	r3, r7
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	2200      	movs	r2, #0
 8005938:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800593a:	1d3b      	adds	r3, r7, #4
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005942:	1d3b      	adds	r3, r7, #4
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800594a:	b29b      	uxth	r3, r3
 800594c:	461a      	mov	r2, r3
 800594e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005952:	4413      	add	r3, r2
 8005954:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005958:	463b      	mov	r3, r7
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	781b      	ldrb	r3, [r3, #0]
 800595e:	00da      	lsls	r2, r3, #3
 8005960:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005964:	4413      	add	r3, r2
 8005966:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800596a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800596e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005972:	2b00      	cmp	r3, #0
 8005974:	d116      	bne.n	80059a4 <USB_EPStartXfer+0xb7e>
 8005976:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800597a:	881b      	ldrh	r3, [r3, #0]
 800597c:	b29b      	uxth	r3, r3
 800597e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005982:	b29a      	uxth	r2, r3
 8005984:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005988:	801a      	strh	r2, [r3, #0]
 800598a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800598e:	881b      	ldrh	r3, [r3, #0]
 8005990:	b29b      	uxth	r3, r3
 8005992:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005996:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800599a:	b29a      	uxth	r2, r3
 800599c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80059a0:	801a      	strh	r2, [r3, #0]
 80059a2:	e32c      	b.n	8005ffe <USB_EPStartXfer+0x11d8>
 80059a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059a8:	2b3e      	cmp	r3, #62	; 0x3e
 80059aa:	d818      	bhi.n	80059de <USB_EPStartXfer+0xbb8>
 80059ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059b0:	085b      	lsrs	r3, r3, #1
 80059b2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80059b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059ba:	f003 0301 	and.w	r3, r3, #1
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d004      	beq.n	80059cc <USB_EPStartXfer+0xba6>
 80059c2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80059c6:	3301      	adds	r3, #1
 80059c8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80059cc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80059d0:	b29b      	uxth	r3, r3
 80059d2:	029b      	lsls	r3, r3, #10
 80059d4:	b29a      	uxth	r2, r3
 80059d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80059da:	801a      	strh	r2, [r3, #0]
 80059dc:	e30f      	b.n	8005ffe <USB_EPStartXfer+0x11d8>
 80059de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059e2:	095b      	lsrs	r3, r3, #5
 80059e4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80059e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059ec:	f003 031f 	and.w	r3, r3, #31
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d104      	bne.n	80059fe <USB_EPStartXfer+0xbd8>
 80059f4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80059f8:	3b01      	subs	r3, #1
 80059fa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80059fe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005a02:	b29b      	uxth	r3, r3
 8005a04:	029b      	lsls	r3, r3, #10
 8005a06:	b29b      	uxth	r3, r3
 8005a08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a10:	b29a      	uxth	r2, r3
 8005a12:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005a16:	801a      	strh	r2, [r3, #0]
 8005a18:	e2f1      	b.n	8005ffe <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005a1a:	463b      	mov	r3, r7
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	78db      	ldrb	r3, [r3, #3]
 8005a20:	2b02      	cmp	r3, #2
 8005a22:	f040 818f 	bne.w	8005d44 <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005a26:	463b      	mov	r3, r7
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	785b      	ldrb	r3, [r3, #1]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d175      	bne.n	8005b1c <USB_EPStartXfer+0xcf6>
 8005a30:	1d3b      	adds	r3, r7, #4
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005a38:	1d3b      	adds	r3, r7, #4
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a40:	b29b      	uxth	r3, r3
 8005a42:	461a      	mov	r2, r3
 8005a44:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005a48:	4413      	add	r3, r2
 8005a4a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005a4e:	463b      	mov	r3, r7
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	781b      	ldrb	r3, [r3, #0]
 8005a54:	00da      	lsls	r2, r3, #3
 8005a56:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005a5a:	4413      	add	r3, r2
 8005a5c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005a60:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005a64:	463b      	mov	r3, r7
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	691b      	ldr	r3, [r3, #16]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d116      	bne.n	8005a9c <USB_EPStartXfer+0xc76>
 8005a6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005a72:	881b      	ldrh	r3, [r3, #0]
 8005a74:	b29b      	uxth	r3, r3
 8005a76:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a7a:	b29a      	uxth	r2, r3
 8005a7c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005a80:	801a      	strh	r2, [r3, #0]
 8005a82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005a86:	881b      	ldrh	r3, [r3, #0]
 8005a88:	b29b      	uxth	r3, r3
 8005a8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a92:	b29a      	uxth	r2, r3
 8005a94:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005a98:	801a      	strh	r2, [r3, #0]
 8005a9a:	e065      	b.n	8005b68 <USB_EPStartXfer+0xd42>
 8005a9c:	463b      	mov	r3, r7
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	691b      	ldr	r3, [r3, #16]
 8005aa2:	2b3e      	cmp	r3, #62	; 0x3e
 8005aa4:	d81a      	bhi.n	8005adc <USB_EPStartXfer+0xcb6>
 8005aa6:	463b      	mov	r3, r7
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	691b      	ldr	r3, [r3, #16]
 8005aac:	085b      	lsrs	r3, r3, #1
 8005aae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005ab2:	463b      	mov	r3, r7
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	691b      	ldr	r3, [r3, #16]
 8005ab8:	f003 0301 	and.w	r3, r3, #1
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d004      	beq.n	8005aca <USB_EPStartXfer+0xca4>
 8005ac0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005ac4:	3301      	adds	r3, #1
 8005ac6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005aca:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005ace:	b29b      	uxth	r3, r3
 8005ad0:	029b      	lsls	r3, r3, #10
 8005ad2:	b29a      	uxth	r2, r3
 8005ad4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005ad8:	801a      	strh	r2, [r3, #0]
 8005ada:	e045      	b.n	8005b68 <USB_EPStartXfer+0xd42>
 8005adc:	463b      	mov	r3, r7
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	691b      	ldr	r3, [r3, #16]
 8005ae2:	095b      	lsrs	r3, r3, #5
 8005ae4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005ae8:	463b      	mov	r3, r7
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	691b      	ldr	r3, [r3, #16]
 8005aee:	f003 031f 	and.w	r3, r3, #31
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d104      	bne.n	8005b00 <USB_EPStartXfer+0xcda>
 8005af6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005afa:	3b01      	subs	r3, #1
 8005afc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005b00:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005b04:	b29b      	uxth	r3, r3
 8005b06:	029b      	lsls	r3, r3, #10
 8005b08:	b29b      	uxth	r3, r3
 8005b0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b12:	b29a      	uxth	r2, r3
 8005b14:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005b18:	801a      	strh	r2, [r3, #0]
 8005b1a:	e025      	b.n	8005b68 <USB_EPStartXfer+0xd42>
 8005b1c:	463b      	mov	r3, r7
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	785b      	ldrb	r3, [r3, #1]
 8005b22:	2b01      	cmp	r3, #1
 8005b24:	d120      	bne.n	8005b68 <USB_EPStartXfer+0xd42>
 8005b26:	1d3b      	adds	r3, r7, #4
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005b2e:	1d3b      	adds	r3, r7, #4
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b36:	b29b      	uxth	r3, r3
 8005b38:	461a      	mov	r2, r3
 8005b3a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005b3e:	4413      	add	r3, r2
 8005b40:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005b44:	463b      	mov	r3, r7
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	781b      	ldrb	r3, [r3, #0]
 8005b4a:	00da      	lsls	r2, r3, #3
 8005b4c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005b50:	4413      	add	r3, r2
 8005b52:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005b56:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005b5a:	463b      	mov	r3, r7
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	691b      	ldr	r3, [r3, #16]
 8005b60:	b29a      	uxth	r2, r3
 8005b62:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005b66:	801a      	strh	r2, [r3, #0]
 8005b68:	1d3b      	adds	r3, r7, #4
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005b70:	463b      	mov	r3, r7
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	785b      	ldrb	r3, [r3, #1]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d175      	bne.n	8005c66 <USB_EPStartXfer+0xe40>
 8005b7a:	1d3b      	adds	r3, r7, #4
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005b82:	1d3b      	adds	r3, r7, #4
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b8a:	b29b      	uxth	r3, r3
 8005b8c:	461a      	mov	r2, r3
 8005b8e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005b92:	4413      	add	r3, r2
 8005b94:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005b98:	463b      	mov	r3, r7
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	781b      	ldrb	r3, [r3, #0]
 8005b9e:	00da      	lsls	r2, r3, #3
 8005ba0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005ba4:	4413      	add	r3, r2
 8005ba6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005baa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005bae:	463b      	mov	r3, r7
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	691b      	ldr	r3, [r3, #16]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d116      	bne.n	8005be6 <USB_EPStartXfer+0xdc0>
 8005bb8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005bbc:	881b      	ldrh	r3, [r3, #0]
 8005bbe:	b29b      	uxth	r3, r3
 8005bc0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005bc4:	b29a      	uxth	r2, r3
 8005bc6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005bca:	801a      	strh	r2, [r3, #0]
 8005bcc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005bd0:	881b      	ldrh	r3, [r3, #0]
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bdc:	b29a      	uxth	r2, r3
 8005bde:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005be2:	801a      	strh	r2, [r3, #0]
 8005be4:	e061      	b.n	8005caa <USB_EPStartXfer+0xe84>
 8005be6:	463b      	mov	r3, r7
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	691b      	ldr	r3, [r3, #16]
 8005bec:	2b3e      	cmp	r3, #62	; 0x3e
 8005bee:	d81a      	bhi.n	8005c26 <USB_EPStartXfer+0xe00>
 8005bf0:	463b      	mov	r3, r7
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	691b      	ldr	r3, [r3, #16]
 8005bf6:	085b      	lsrs	r3, r3, #1
 8005bf8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005bfc:	463b      	mov	r3, r7
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	691b      	ldr	r3, [r3, #16]
 8005c02:	f003 0301 	and.w	r3, r3, #1
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d004      	beq.n	8005c14 <USB_EPStartXfer+0xdee>
 8005c0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c0e:	3301      	adds	r3, #1
 8005c10:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005c14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c18:	b29b      	uxth	r3, r3
 8005c1a:	029b      	lsls	r3, r3, #10
 8005c1c:	b29a      	uxth	r2, r3
 8005c1e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005c22:	801a      	strh	r2, [r3, #0]
 8005c24:	e041      	b.n	8005caa <USB_EPStartXfer+0xe84>
 8005c26:	463b      	mov	r3, r7
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	691b      	ldr	r3, [r3, #16]
 8005c2c:	095b      	lsrs	r3, r3, #5
 8005c2e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005c32:	463b      	mov	r3, r7
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	691b      	ldr	r3, [r3, #16]
 8005c38:	f003 031f 	and.w	r3, r3, #31
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d104      	bne.n	8005c4a <USB_EPStartXfer+0xe24>
 8005c40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c44:	3b01      	subs	r3, #1
 8005c46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005c4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c4e:	b29b      	uxth	r3, r3
 8005c50:	029b      	lsls	r3, r3, #10
 8005c52:	b29b      	uxth	r3, r3
 8005c54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c5c:	b29a      	uxth	r2, r3
 8005c5e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005c62:	801a      	strh	r2, [r3, #0]
 8005c64:	e021      	b.n	8005caa <USB_EPStartXfer+0xe84>
 8005c66:	463b      	mov	r3, r7
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	785b      	ldrb	r3, [r3, #1]
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	d11c      	bne.n	8005caa <USB_EPStartXfer+0xe84>
 8005c70:	1d3b      	adds	r3, r7, #4
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c78:	b29b      	uxth	r3, r3
 8005c7a:	461a      	mov	r2, r3
 8005c7c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005c80:	4413      	add	r3, r2
 8005c82:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005c86:	463b      	mov	r3, r7
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	781b      	ldrb	r3, [r3, #0]
 8005c8c:	00da      	lsls	r2, r3, #3
 8005c8e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005c92:	4413      	add	r3, r2
 8005c94:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005c98:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005c9c:	463b      	mov	r3, r7
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	691b      	ldr	r3, [r3, #16]
 8005ca2:	b29a      	uxth	r2, r3
 8005ca4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005ca8:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005caa:	463b      	mov	r3, r7
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	69db      	ldr	r3, [r3, #28]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	f000 81a4 	beq.w	8005ffe <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005cb6:	1d3b      	adds	r3, r7, #4
 8005cb8:	681a      	ldr	r2, [r3, #0]
 8005cba:	463b      	mov	r3, r7
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	781b      	ldrb	r3, [r3, #0]
 8005cc0:	009b      	lsls	r3, r3, #2
 8005cc2:	4413      	add	r3, r2
 8005cc4:	881b      	ldrh	r3, [r3, #0]
 8005cc6:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005cca:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005cce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d005      	beq.n	8005ce2 <USB_EPStartXfer+0xebc>
 8005cd6:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005cda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d10d      	bne.n	8005cfe <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005ce2:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005ce6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	f040 8187 	bne.w	8005ffe <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005cf0:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005cf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	f040 8180 	bne.w	8005ffe <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8005cfe:	1d3b      	adds	r3, r7, #4
 8005d00:	681a      	ldr	r2, [r3, #0]
 8005d02:	463b      	mov	r3, r7
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	781b      	ldrb	r3, [r3, #0]
 8005d08:	009b      	lsls	r3, r3, #2
 8005d0a:	4413      	add	r3, r2
 8005d0c:	881b      	ldrh	r3, [r3, #0]
 8005d0e:	b29b      	uxth	r3, r3
 8005d10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d18:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8005d1c:	1d3b      	adds	r3, r7, #4
 8005d1e:	681a      	ldr	r2, [r3, #0]
 8005d20:	463b      	mov	r3, r7
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	781b      	ldrb	r3, [r3, #0]
 8005d26:	009b      	lsls	r3, r3, #2
 8005d28:	441a      	add	r2, r3
 8005d2a:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8005d2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d3a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005d3e:	b29b      	uxth	r3, r3
 8005d40:	8013      	strh	r3, [r2, #0]
 8005d42:	e15c      	b.n	8005ffe <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005d44:	463b      	mov	r3, r7
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	78db      	ldrb	r3, [r3, #3]
 8005d4a:	2b01      	cmp	r3, #1
 8005d4c:	f040 8155 	bne.w	8005ffa <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005d50:	463b      	mov	r3, r7
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	699a      	ldr	r2, [r3, #24]
 8005d56:	463b      	mov	r3, r7
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	691b      	ldr	r3, [r3, #16]
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	d90e      	bls.n	8005d7e <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 8005d60:	463b      	mov	r3, r7
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	691b      	ldr	r3, [r3, #16]
 8005d66:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 8005d6a:	463b      	mov	r3, r7
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	699a      	ldr	r2, [r3, #24]
 8005d70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d74:	1ad2      	subs	r2, r2, r3
 8005d76:	463b      	mov	r3, r7
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	619a      	str	r2, [r3, #24]
 8005d7c:	e008      	b.n	8005d90 <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 8005d7e:	463b      	mov	r3, r7
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	699b      	ldr	r3, [r3, #24]
 8005d84:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 8005d88:	463b      	mov	r3, r7
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005d90:	463b      	mov	r3, r7
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	785b      	ldrb	r3, [r3, #1]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d16f      	bne.n	8005e7a <USB_EPStartXfer+0x1054>
 8005d9a:	1d3b      	adds	r3, r7, #4
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005da2:	1d3b      	adds	r3, r7, #4
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005daa:	b29b      	uxth	r3, r3
 8005dac:	461a      	mov	r2, r3
 8005dae:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005db2:	4413      	add	r3, r2
 8005db4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005db8:	463b      	mov	r3, r7
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	781b      	ldrb	r3, [r3, #0]
 8005dbe:	00da      	lsls	r2, r3, #3
 8005dc0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005dc4:	4413      	add	r3, r2
 8005dc6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005dca:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005dce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d116      	bne.n	8005e04 <USB_EPStartXfer+0xfde>
 8005dd6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005dda:	881b      	ldrh	r3, [r3, #0]
 8005ddc:	b29b      	uxth	r3, r3
 8005dde:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005de2:	b29a      	uxth	r2, r3
 8005de4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005de8:	801a      	strh	r2, [r3, #0]
 8005dea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005dee:	881b      	ldrh	r3, [r3, #0]
 8005df0:	b29b      	uxth	r3, r3
 8005df2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005df6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005dfa:	b29a      	uxth	r2, r3
 8005dfc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005e00:	801a      	strh	r2, [r3, #0]
 8005e02:	e05f      	b.n	8005ec4 <USB_EPStartXfer+0x109e>
 8005e04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e08:	2b3e      	cmp	r3, #62	; 0x3e
 8005e0a:	d818      	bhi.n	8005e3e <USB_EPStartXfer+0x1018>
 8005e0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e10:	085b      	lsrs	r3, r3, #1
 8005e12:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005e16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e1a:	f003 0301 	and.w	r3, r3, #1
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d004      	beq.n	8005e2c <USB_EPStartXfer+0x1006>
 8005e22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e26:	3301      	adds	r3, #1
 8005e28:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005e2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e30:	b29b      	uxth	r3, r3
 8005e32:	029b      	lsls	r3, r3, #10
 8005e34:	b29a      	uxth	r2, r3
 8005e36:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005e3a:	801a      	strh	r2, [r3, #0]
 8005e3c:	e042      	b.n	8005ec4 <USB_EPStartXfer+0x109e>
 8005e3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e42:	095b      	lsrs	r3, r3, #5
 8005e44:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005e48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e4c:	f003 031f 	and.w	r3, r3, #31
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d104      	bne.n	8005e5e <USB_EPStartXfer+0x1038>
 8005e54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e58:	3b01      	subs	r3, #1
 8005e5a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005e5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e62:	b29b      	uxth	r3, r3
 8005e64:	029b      	lsls	r3, r3, #10
 8005e66:	b29b      	uxth	r3, r3
 8005e68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e70:	b29a      	uxth	r2, r3
 8005e72:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005e76:	801a      	strh	r2, [r3, #0]
 8005e78:	e024      	b.n	8005ec4 <USB_EPStartXfer+0x109e>
 8005e7a:	463b      	mov	r3, r7
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	785b      	ldrb	r3, [r3, #1]
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	d11f      	bne.n	8005ec4 <USB_EPStartXfer+0x109e>
 8005e84:	1d3b      	adds	r3, r7, #4
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005e8c:	1d3b      	adds	r3, r7, #4
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e94:	b29b      	uxth	r3, r3
 8005e96:	461a      	mov	r2, r3
 8005e98:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e9c:	4413      	add	r3, r2
 8005e9e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005ea2:	463b      	mov	r3, r7
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	781b      	ldrb	r3, [r3, #0]
 8005ea8:	00da      	lsls	r2, r3, #3
 8005eaa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005eae:	4413      	add	r3, r2
 8005eb0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005eb4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005eb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ebc:	b29a      	uxth	r2, r3
 8005ebe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005ec2:	801a      	strh	r2, [r3, #0]
 8005ec4:	1d3b      	adds	r3, r7, #4
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005ecc:	463b      	mov	r3, r7
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	785b      	ldrb	r3, [r3, #1]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d16f      	bne.n	8005fb6 <USB_EPStartXfer+0x1190>
 8005ed6:	1d3b      	adds	r3, r7, #4
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005ede:	1d3b      	adds	r3, r7, #4
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ee6:	b29b      	uxth	r3, r3
 8005ee8:	461a      	mov	r2, r3
 8005eea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005eee:	4413      	add	r3, r2
 8005ef0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005ef4:	463b      	mov	r3, r7
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	781b      	ldrb	r3, [r3, #0]
 8005efa:	00da      	lsls	r2, r3, #3
 8005efc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005f00:	4413      	add	r3, r2
 8005f02:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005f06:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005f0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d116      	bne.n	8005f40 <USB_EPStartXfer+0x111a>
 8005f12:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005f16:	881b      	ldrh	r3, [r3, #0]
 8005f18:	b29b      	uxth	r3, r3
 8005f1a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005f1e:	b29a      	uxth	r2, r3
 8005f20:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005f24:	801a      	strh	r2, [r3, #0]
 8005f26:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005f2a:	881b      	ldrh	r3, [r3, #0]
 8005f2c:	b29b      	uxth	r3, r3
 8005f2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f36:	b29a      	uxth	r2, r3
 8005f38:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005f3c:	801a      	strh	r2, [r3, #0]
 8005f3e:	e05e      	b.n	8005ffe <USB_EPStartXfer+0x11d8>
 8005f40:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f44:	2b3e      	cmp	r3, #62	; 0x3e
 8005f46:	d818      	bhi.n	8005f7a <USB_EPStartXfer+0x1154>
 8005f48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f4c:	085b      	lsrs	r3, r3, #1
 8005f4e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005f52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f56:	f003 0301 	and.w	r3, r3, #1
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d004      	beq.n	8005f68 <USB_EPStartXfer+0x1142>
 8005f5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f62:	3301      	adds	r3, #1
 8005f64:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005f68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f6c:	b29b      	uxth	r3, r3
 8005f6e:	029b      	lsls	r3, r3, #10
 8005f70:	b29a      	uxth	r2, r3
 8005f72:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005f76:	801a      	strh	r2, [r3, #0]
 8005f78:	e041      	b.n	8005ffe <USB_EPStartXfer+0x11d8>
 8005f7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f7e:	095b      	lsrs	r3, r3, #5
 8005f80:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005f84:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f88:	f003 031f 	and.w	r3, r3, #31
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d104      	bne.n	8005f9a <USB_EPStartXfer+0x1174>
 8005f90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f94:	3b01      	subs	r3, #1
 8005f96:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005f9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f9e:	b29b      	uxth	r3, r3
 8005fa0:	029b      	lsls	r3, r3, #10
 8005fa2:	b29b      	uxth	r3, r3
 8005fa4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fa8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fac:	b29a      	uxth	r2, r3
 8005fae:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005fb2:	801a      	strh	r2, [r3, #0]
 8005fb4:	e023      	b.n	8005ffe <USB_EPStartXfer+0x11d8>
 8005fb6:	463b      	mov	r3, r7
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	785b      	ldrb	r3, [r3, #1]
 8005fbc:	2b01      	cmp	r3, #1
 8005fbe:	d11e      	bne.n	8005ffe <USB_EPStartXfer+0x11d8>
 8005fc0:	1d3b      	adds	r3, r7, #4
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fc8:	b29b      	uxth	r3, r3
 8005fca:	461a      	mov	r2, r3
 8005fcc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005fd0:	4413      	add	r3, r2
 8005fd2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005fd6:	463b      	mov	r3, r7
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	781b      	ldrb	r3, [r3, #0]
 8005fdc:	00da      	lsls	r2, r3, #3
 8005fde:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005fe2:	4413      	add	r3, r2
 8005fe4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005fe8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005fec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ff0:	b29a      	uxth	r2, r3
 8005ff2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005ff6:	801a      	strh	r2, [r3, #0]
 8005ff8:	e001      	b.n	8005ffe <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	e02e      	b.n	800605c <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005ffe:	1d3b      	adds	r3, r7, #4
 8006000:	681a      	ldr	r2, [r3, #0]
 8006002:	463b      	mov	r3, r7
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	781b      	ldrb	r3, [r3, #0]
 8006008:	009b      	lsls	r3, r3, #2
 800600a:	4413      	add	r3, r2
 800600c:	881b      	ldrh	r3, [r3, #0]
 800600e:	b29b      	uxth	r3, r3
 8006010:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006014:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006018:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800601c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006020:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006024:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8006028:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800602c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006030:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8006034:	1d3b      	adds	r3, r7, #4
 8006036:	681a      	ldr	r2, [r3, #0]
 8006038:	463b      	mov	r3, r7
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	781b      	ldrb	r3, [r3, #0]
 800603e:	009b      	lsls	r3, r3, #2
 8006040:	441a      	add	r2, r3
 8006042:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006046:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800604a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800604e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006052:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006056:	b29b      	uxth	r3, r3
 8006058:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800605a:	2300      	movs	r3, #0
}
 800605c:	4618      	mov	r0, r3
 800605e:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}

08006066 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006066:	b480      	push	{r7}
 8006068:	b083      	sub	sp, #12
 800606a:	af00      	add	r7, sp, #0
 800606c:	6078      	str	r0, [r7, #4]
 800606e:	460b      	mov	r3, r1
 8006070:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006072:	78fb      	ldrb	r3, [r7, #3]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d103      	bne.n	8006080 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2280      	movs	r2, #128	; 0x80
 800607c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006080:	2300      	movs	r3, #0
}
 8006082:	4618      	mov	r0, r3
 8006084:	370c      	adds	r7, #12
 8006086:	46bd      	mov	sp, r7
 8006088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608c:	4770      	bx	lr

0800608e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800608e:	b480      	push	{r7}
 8006090:	b085      	sub	sp, #20
 8006092:	af00      	add	r7, sp, #0
 8006094:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800609c:	b29b      	uxth	r3, r3
 800609e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80060a0:	68fb      	ldr	r3, [r7, #12]
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3714      	adds	r7, #20
 80060a6:	46bd      	mov	sp, r7
 80060a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ac:	4770      	bx	lr

080060ae <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80060ae:	b480      	push	{r7}
 80060b0:	b08d      	sub	sp, #52	; 0x34
 80060b2:	af00      	add	r7, sp, #0
 80060b4:	60f8      	str	r0, [r7, #12]
 80060b6:	60b9      	str	r1, [r7, #8]
 80060b8:	4611      	mov	r1, r2
 80060ba:	461a      	mov	r2, r3
 80060bc:	460b      	mov	r3, r1
 80060be:	80fb      	strh	r3, [r7, #6]
 80060c0:	4613      	mov	r3, r2
 80060c2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80060c4:	88bb      	ldrh	r3, [r7, #4]
 80060c6:	3301      	adds	r3, #1
 80060c8:	085b      	lsrs	r3, r3, #1
 80060ca:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80060d4:	88fa      	ldrh	r2, [r7, #6]
 80060d6:	69fb      	ldr	r3, [r7, #28]
 80060d8:	4413      	add	r3, r2
 80060da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060de:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80060e0:	6a3b      	ldr	r3, [r7, #32]
 80060e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060e4:	e01b      	b.n	800611e <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 80060e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e8:	781b      	ldrb	r3, [r3, #0]
 80060ea:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80060ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ee:	3301      	adds	r3, #1
 80060f0:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80060f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f4:	781b      	ldrb	r3, [r3, #0]
 80060f6:	b29b      	uxth	r3, r3
 80060f8:	021b      	lsls	r3, r3, #8
 80060fa:	b29b      	uxth	r3, r3
 80060fc:	461a      	mov	r2, r3
 80060fe:	69bb      	ldr	r3, [r7, #24]
 8006100:	4313      	orrs	r3, r2
 8006102:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	b29a      	uxth	r2, r3
 8006108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800610a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800610c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800610e:	3302      	adds	r3, #2
 8006110:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8006112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006114:	3301      	adds	r3, #1
 8006116:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8006118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800611a:	3b01      	subs	r3, #1
 800611c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800611e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006120:	2b00      	cmp	r3, #0
 8006122:	d1e0      	bne.n	80060e6 <USB_WritePMA+0x38>
  }
}
 8006124:	bf00      	nop
 8006126:	bf00      	nop
 8006128:	3734      	adds	r7, #52	; 0x34
 800612a:	46bd      	mov	sp, r7
 800612c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006130:	4770      	bx	lr

08006132 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006132:	b480      	push	{r7}
 8006134:	b08b      	sub	sp, #44	; 0x2c
 8006136:	af00      	add	r7, sp, #0
 8006138:	60f8      	str	r0, [r7, #12]
 800613a:	60b9      	str	r1, [r7, #8]
 800613c:	4611      	mov	r1, r2
 800613e:	461a      	mov	r2, r3
 8006140:	460b      	mov	r3, r1
 8006142:	80fb      	strh	r3, [r7, #6]
 8006144:	4613      	mov	r3, r2
 8006146:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006148:	88bb      	ldrh	r3, [r7, #4]
 800614a:	085b      	lsrs	r3, r3, #1
 800614c:	b29b      	uxth	r3, r3
 800614e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006158:	88fa      	ldrh	r2, [r7, #6]
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	4413      	add	r3, r2
 800615e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006162:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006164:	69bb      	ldr	r3, [r7, #24]
 8006166:	627b      	str	r3, [r7, #36]	; 0x24
 8006168:	e018      	b.n	800619c <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800616a:	6a3b      	ldr	r3, [r7, #32]
 800616c:	881b      	ldrh	r3, [r3, #0]
 800616e:	b29b      	uxth	r3, r3
 8006170:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006172:	6a3b      	ldr	r3, [r7, #32]
 8006174:	3302      	adds	r3, #2
 8006176:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	b2da      	uxtb	r2, r3
 800617c:	69fb      	ldr	r3, [r7, #28]
 800617e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006180:	69fb      	ldr	r3, [r7, #28]
 8006182:	3301      	adds	r3, #1
 8006184:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	0a1b      	lsrs	r3, r3, #8
 800618a:	b2da      	uxtb	r2, r3
 800618c:	69fb      	ldr	r3, [r7, #28]
 800618e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006190:	69fb      	ldr	r3, [r7, #28]
 8006192:	3301      	adds	r3, #1
 8006194:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8006196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006198:	3b01      	subs	r3, #1
 800619a:	627b      	str	r3, [r7, #36]	; 0x24
 800619c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d1e3      	bne.n	800616a <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80061a2:	88bb      	ldrh	r3, [r7, #4]
 80061a4:	f003 0301 	and.w	r3, r3, #1
 80061a8:	b29b      	uxth	r3, r3
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d007      	beq.n	80061be <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 80061ae:	6a3b      	ldr	r3, [r7, #32]
 80061b0:	881b      	ldrh	r3, [r3, #0]
 80061b2:	b29b      	uxth	r3, r3
 80061b4:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	b2da      	uxtb	r2, r3
 80061ba:	69fb      	ldr	r3, [r7, #28]
 80061bc:	701a      	strb	r2, [r3, #0]
  }
}
 80061be:	bf00      	nop
 80061c0:	372c      	adds	r7, #44	; 0x2c
 80061c2:	46bd      	mov	sp, r7
 80061c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c8:	4770      	bx	lr
	...

080061cc <initializeRegisters>:
		{0x7C, 0x84},
		{0x7D, 0x03},
		{0x7E, 0x01},
};

void initializeRegisters(void){
 80061cc:	b5b0      	push	{r4, r5, r7, lr}
 80061ce:	b082      	sub	sp, #8
 80061d0:	af00      	add	r7, sp, #0
	uint8_t error = 0;
 80061d2:	2300      	movs	r3, #0
 80061d4:	71fb      	strb	r3, [r7, #7]

	error = gestureInit();
 80061d6:	f000 fa05 	bl	80065e4 <gestureInit>
 80061da:	4603      	mov	r3, r0
 80061dc:	71fb      	strb	r3, [r7, #7]
	if(error){
 80061de:	79fb      	ldrb	r3, [r7, #7]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d010      	beq.n	8006206 <initializeRegisters+0x3a>
		strcpy((char*)ref, "Initializing Error \n");
 80061e4:	4a17      	ldr	r2, [pc, #92]	; (8006244 <initializeRegisters+0x78>)
 80061e6:	4b18      	ldr	r3, [pc, #96]	; (8006248 <initializeRegisters+0x7c>)
 80061e8:	4615      	mov	r5, r2
 80061ea:	461c      	mov	r4, r3
 80061ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80061ee:	6028      	str	r0, [r5, #0]
 80061f0:	6069      	str	r1, [r5, #4]
 80061f2:	60aa      	str	r2, [r5, #8]
 80061f4:	60eb      	str	r3, [r5, #12]
 80061f6:	6820      	ldr	r0, [r4, #0]
 80061f8:	6128      	str	r0, [r5, #16]
 80061fa:	7923      	ldrb	r3, [r4, #4]
 80061fc:	752b      	strb	r3, [r5, #20]
		printf("Initializing Error \n");
 80061fe:	4813      	ldr	r0, [pc, #76]	; (800624c <initializeRegisters+0x80>)
 8006200:	f000 fbae 	bl	8006960 <puts>
 8006204:	e00b      	b.n	800621e <initializeRegisters+0x52>
	}else{
		strcpy((char*)ref, "Initialized \n");
 8006206:	4a0f      	ldr	r2, [pc, #60]	; (8006244 <initializeRegisters+0x78>)
 8006208:	4b11      	ldr	r3, [pc, #68]	; (8006250 <initializeRegisters+0x84>)
 800620a:	4614      	mov	r4, r2
 800620c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800620e:	6020      	str	r0, [r4, #0]
 8006210:	6061      	str	r1, [r4, #4]
 8006212:	60a2      	str	r2, [r4, #8]
 8006214:	881b      	ldrh	r3, [r3, #0]
 8006216:	81a3      	strh	r3, [r4, #12]
		printf("Initialized \n");
 8006218:	480e      	ldr	r0, [pc, #56]	; (8006254 <initializeRegisters+0x88>)
 800621a:	f000 fba1 	bl	8006960 <puts>
	}
	HAL_UART_Transmit(&HandleUART, ref, strlen((char*)ref), HAL_MAX_DELAY);
 800621e:	4809      	ldr	r0, [pc, #36]	; (8006244 <initializeRegisters+0x78>)
 8006220:	f7f9 ffd8 	bl	80001d4 <strlen>
 8006224:	4603      	mov	r3, r0
 8006226:	b29a      	uxth	r2, r3
 8006228:	f04f 33ff 	mov.w	r3, #4294967295
 800622c:	4905      	ldr	r1, [pc, #20]	; (8006244 <initializeRegisters+0x78>)
 800622e:	480a      	ldr	r0, [pc, #40]	; (8006258 <initializeRegisters+0x8c>)
 8006230:	f7fe f9eb 	bl	800460a <HAL_UART_Transmit>
	HAL_Delay(1000);
 8006234:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006238:	f7fa fca8 	bl	8000b8c <HAL_Delay>
};
 800623c:	bf00      	nop
 800623e:	3708      	adds	r7, #8
 8006240:	46bd      	mov	sp, r7
 8006242:	bdb0      	pop	{r4, r5, r7, pc}
 8006244:	2000073c 	.word	0x2000073c
 8006248:	08007228 	.word	0x08007228
 800624c:	08007240 	.word	0x08007240
 8006250:	08007254 	.word	0x08007254
 8006254:	08007264 	.word	0x08007264
 8006258:	2000029c 	.word	0x2000029c

0800625c <GESTURE_Actions>:

void GESTURE_Actions(void)
{
 800625c:	b5b0      	push	{r4, r5, r7, lr}
 800625e:	b082      	sub	sp, #8
 8006260:	af00      	add	r7, sp, #0
	uint8_t data0 = 0, error;
 8006262:	2300      	movs	r3, #0
 8006264:	71bb      	strb	r3, [r7, #6]
	error = registerRead(0x43, 1, &data0); /* Read Bank 0 for gestures */
 8006266:	1dbb      	adds	r3, r7, #6
 8006268:	461a      	mov	r2, r3
 800626a:	2101      	movs	r1, #1
 800626c:	2043      	movs	r0, #67	; 0x43
 800626e:	f000 fa71 	bl	8006754 <registerRead>
 8006272:	4603      	mov	r3, r0
 8006274:	71fb      	strb	r3, [r7, #7]

	if(!error){
 8006276:	79fb      	ldrb	r3, [r7, #7]
 8006278:	2b00      	cmp	r3, #0
 800627a:	f040 817a 	bne.w	8006572 <GESTURE_Actions+0x316>
		switch(data0){ /* When will gestures be detected, the "data" will change */
 800627e:	79bb      	ldrb	r3, [r7, #6]
 8006280:	2b80      	cmp	r3, #128	; 0x80
 8006282:	f000 8167 	beq.w	8006554 <GESTURE_Actions+0x2f8>
 8006286:	2b80      	cmp	r3, #128	; 0x80
 8006288:	f300 8174 	bgt.w	8006574 <GESTURE_Actions+0x318>
 800628c:	2b20      	cmp	r3, #32
 800628e:	dc49      	bgt.n	8006324 <GESTURE_Actions+0xc8>
 8006290:	2b00      	cmp	r3, #0
 8006292:	f340 816f 	ble.w	8006574 <GESTURE_Actions+0x318>
 8006296:	3b01      	subs	r3, #1
 8006298:	2b1f      	cmp	r3, #31
 800629a:	f200 816b 	bhi.w	8006574 <GESTURE_Actions+0x318>
 800629e:	a201      	add	r2, pc, #4	; (adr r2, 80062a4 <GESTURE_Actions+0x48>)
 80062a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062a4:	0800632d 	.word	0x0800632d
 80062a8:	0800639b 	.word	0x0800639b
 80062ac:	08006575 	.word	0x08006575
 80062b0:	0800640f 	.word	0x0800640f
 80062b4:	08006575 	.word	0x08006575
 80062b8:	08006575 	.word	0x08006575
 80062bc:	08006575 	.word	0x08006575
 80062c0:	0800647f 	.word	0x0800647f
 80062c4:	08006575 	.word	0x08006575
 80062c8:	08006575 	.word	0x08006575
 80062cc:	08006575 	.word	0x08006575
 80062d0:	08006575 	.word	0x08006575
 80062d4:	08006575 	.word	0x08006575
 80062d8:	08006575 	.word	0x08006575
 80062dc:	08006575 	.word	0x08006575
 80062e0:	080064f3 	.word	0x080064f3
 80062e4:	08006575 	.word	0x08006575
 80062e8:	08006575 	.word	0x08006575
 80062ec:	08006575 	.word	0x08006575
 80062f0:	08006575 	.word	0x08006575
 80062f4:	08006575 	.word	0x08006575
 80062f8:	08006575 	.word	0x08006575
 80062fc:	08006575 	.word	0x08006575
 8006300:	08006575 	.word	0x08006575
 8006304:	08006575 	.word	0x08006575
 8006308:	08006575 	.word	0x08006575
 800630c:	08006575 	.word	0x08006575
 8006310:	08006575 	.word	0x08006575
 8006314:	08006575 	.word	0x08006575
 8006318:	08006575 	.word	0x08006575
 800631c:	08006575 	.word	0x08006575
 8006320:	08006511 	.word	0x08006511
 8006324:	2b40      	cmp	r3, #64	; 0x40
 8006326:	f000 8106 	beq.w	8006536 <GESTURE_Actions+0x2da>
 800632a:	e123      	b.n	8006574 <GESTURE_Actions+0x318>
		case GestureRight:
			HAL_Delay(GEST_ENTR_T);
 800632c:	f44f 7016 	mov.w	r0, #600	; 0x258
 8006330:	f7fa fc2c 	bl	8000b8c <HAL_Delay>
			registerRead(0x43, 1, &data0);
 8006334:	1dbb      	adds	r3, r7, #6
 8006336:	461a      	mov	r2, r3
 8006338:	2101      	movs	r1, #1
 800633a:	2043      	movs	r0, #67	; 0x43
 800633c:	f000 fa0a 	bl	8006754 <registerRead>
			if(data0 == GestureForward){
 8006340:	79bb      	ldrb	r3, [r7, #6]
 8006342:	2b40      	cmp	r3, #64	; 0x40
 8006344:	d10e      	bne.n	8006364 <GESTURE_Actions+0x108>
				printf("Forward \n");
 8006346:	4895      	ldr	r0, [pc, #596]	; (800659c <GESTURE_Actions+0x340>)
 8006348:	f000 fb0a 	bl	8006960 <puts>
				strcpy((char*)ref, "Forward \n");
 800634c:	4a94      	ldr	r2, [pc, #592]	; (80065a0 <GESTURE_Actions+0x344>)
 800634e:	4b95      	ldr	r3, [pc, #596]	; (80065a4 <GESTURE_Actions+0x348>)
 8006350:	cb03      	ldmia	r3!, {r0, r1}
 8006352:	6010      	str	r0, [r2, #0]
 8006354:	6051      	str	r1, [r2, #4]
 8006356:	881b      	ldrh	r3, [r3, #0]
 8006358:	8113      	strh	r3, [r2, #8]
				HAL_Delay(GEST_QUIT_T);
 800635a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800635e:	f7fa fc15 	bl	8000b8c <HAL_Delay>
				HAL_Delay(GEST_QUIT_T);
			}else{
				printf("Right \n");
				strcpy((char*)ref, "Right \n");
			}
			break;
 8006362:	e107      	b.n	8006574 <GESTURE_Actions+0x318>
			}else if(data0 == GestureBackwards){
 8006364:	79bb      	ldrb	r3, [r7, #6]
 8006366:	2b80      	cmp	r3, #128	; 0x80
 8006368:	d10e      	bne.n	8006388 <GESTURE_Actions+0x12c>
				printf("Backwards \n");
 800636a:	488f      	ldr	r0, [pc, #572]	; (80065a8 <GESTURE_Actions+0x34c>)
 800636c:	f000 faf8 	bl	8006960 <puts>
				strcpy((char*)ref, "Backwards \n");
 8006370:	4a8b      	ldr	r2, [pc, #556]	; (80065a0 <GESTURE_Actions+0x344>)
 8006372:	4b8e      	ldr	r3, [pc, #568]	; (80065ac <GESTURE_Actions+0x350>)
 8006374:	4614      	mov	r4, r2
 8006376:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006378:	6020      	str	r0, [r4, #0]
 800637a:	6061      	str	r1, [r4, #4]
 800637c:	60a2      	str	r2, [r4, #8]
				HAL_Delay(GEST_QUIT_T);
 800637e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006382:	f7fa fc03 	bl	8000b8c <HAL_Delay>
			break;
 8006386:	e0f5      	b.n	8006574 <GESTURE_Actions+0x318>
				printf("Right \n");
 8006388:	4889      	ldr	r0, [pc, #548]	; (80065b0 <GESTURE_Actions+0x354>)
 800638a:	f000 fae9 	bl	8006960 <puts>
				strcpy((char*)ref, "Right \n");
 800638e:	4a84      	ldr	r2, [pc, #528]	; (80065a0 <GESTURE_Actions+0x344>)
 8006390:	4b88      	ldr	r3, [pc, #544]	; (80065b4 <GESTURE_Actions+0x358>)
 8006392:	cb03      	ldmia	r3!, {r0, r1}
 8006394:	6010      	str	r0, [r2, #0]
 8006396:	6051      	str	r1, [r2, #4]
			break;
 8006398:	e0ec      	b.n	8006574 <GESTURE_Actions+0x318>

		case GestureLeft:
			HAL_Delay(GEST_ENTR_T);
 800639a:	f44f 7016 	mov.w	r0, #600	; 0x258
 800639e:	f7fa fbf5 	bl	8000b8c <HAL_Delay>
			registerRead(0x43, 1, &data0);
 80063a2:	1dbb      	adds	r3, r7, #6
 80063a4:	461a      	mov	r2, r3
 80063a6:	2101      	movs	r1, #1
 80063a8:	2043      	movs	r0, #67	; 0x43
 80063aa:	f000 f9d3 	bl	8006754 <registerRead>
			if(data0 == GestureForward){
 80063ae:	79bb      	ldrb	r3, [r7, #6]
 80063b0:	2b40      	cmp	r3, #64	; 0x40
 80063b2:	d10e      	bne.n	80063d2 <GESTURE_Actions+0x176>
				printf("Forward \n");
 80063b4:	4879      	ldr	r0, [pc, #484]	; (800659c <GESTURE_Actions+0x340>)
 80063b6:	f000 fad3 	bl	8006960 <puts>
				strcpy((char*)ref, "Forward \n");
 80063ba:	4a79      	ldr	r2, [pc, #484]	; (80065a0 <GESTURE_Actions+0x344>)
 80063bc:	4b79      	ldr	r3, [pc, #484]	; (80065a4 <GESTURE_Actions+0x348>)
 80063be:	cb03      	ldmia	r3!, {r0, r1}
 80063c0:	6010      	str	r0, [r2, #0]
 80063c2:	6051      	str	r1, [r2, #4]
 80063c4:	881b      	ldrh	r3, [r3, #0]
 80063c6:	8113      	strh	r3, [r2, #8]
				HAL_Delay(GEST_QUIT_T);
 80063c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80063cc:	f7fa fbde 	bl	8000b8c <HAL_Delay>
			}else{
				printf("Left \n");
				strcpy((char*)ref, "Left \n");
			}

			break;
 80063d0:	e0d0      	b.n	8006574 <GESTURE_Actions+0x318>
			}else if(data0 == GestureBackwards){
 80063d2:	79bb      	ldrb	r3, [r7, #6]
 80063d4:	2b80      	cmp	r3, #128	; 0x80
 80063d6:	d10e      	bne.n	80063f6 <GESTURE_Actions+0x19a>
				printf("Backwards \n");
 80063d8:	4873      	ldr	r0, [pc, #460]	; (80065a8 <GESTURE_Actions+0x34c>)
 80063da:	f000 fac1 	bl	8006960 <puts>
				strcpy((char*)ref, "Backwards \n");
 80063de:	4a70      	ldr	r2, [pc, #448]	; (80065a0 <GESTURE_Actions+0x344>)
 80063e0:	4b72      	ldr	r3, [pc, #456]	; (80065ac <GESTURE_Actions+0x350>)
 80063e2:	4614      	mov	r4, r2
 80063e4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80063e6:	6020      	str	r0, [r4, #0]
 80063e8:	6061      	str	r1, [r4, #4]
 80063ea:	60a2      	str	r2, [r4, #8]
				HAL_Delay(GEST_QUIT_T);
 80063ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80063f0:	f7fa fbcc 	bl	8000b8c <HAL_Delay>
			break;
 80063f4:	e0be      	b.n	8006574 <GESTURE_Actions+0x318>
				printf("Left \n");
 80063f6:	4870      	ldr	r0, [pc, #448]	; (80065b8 <GESTURE_Actions+0x35c>)
 80063f8:	f000 fab2 	bl	8006960 <puts>
				strcpy((char*)ref, "Left \n");
 80063fc:	4b68      	ldr	r3, [pc, #416]	; (80065a0 <GESTURE_Actions+0x344>)
 80063fe:	4a6f      	ldr	r2, [pc, #444]	; (80065bc <GESTURE_Actions+0x360>)
 8006400:	6810      	ldr	r0, [r2, #0]
 8006402:	6018      	str	r0, [r3, #0]
 8006404:	8891      	ldrh	r1, [r2, #4]
 8006406:	7992      	ldrb	r2, [r2, #6]
 8006408:	8099      	strh	r1, [r3, #4]
 800640a:	719a      	strb	r2, [r3, #6]
			break;
 800640c:	e0b2      	b.n	8006574 <GESTURE_Actions+0x318>

		case GestureUp:
			HAL_Delay(GEST_ENTR_T);
 800640e:	f44f 7016 	mov.w	r0, #600	; 0x258
 8006412:	f7fa fbbb 	bl	8000b8c <HAL_Delay>
			registerRead(0x43, 1, &data0);
 8006416:	1dbb      	adds	r3, r7, #6
 8006418:	461a      	mov	r2, r3
 800641a:	2101      	movs	r1, #1
 800641c:	2043      	movs	r0, #67	; 0x43
 800641e:	f000 f999 	bl	8006754 <registerRead>
			if(data0 == GestureForward){
 8006422:	79bb      	ldrb	r3, [r7, #6]
 8006424:	2b40      	cmp	r3, #64	; 0x40
 8006426:	d10e      	bne.n	8006446 <GESTURE_Actions+0x1ea>
				printf("Forward \n");
 8006428:	485c      	ldr	r0, [pc, #368]	; (800659c <GESTURE_Actions+0x340>)
 800642a:	f000 fa99 	bl	8006960 <puts>
				strcpy((char*)ref, "Forward \n");
 800642e:	4a5c      	ldr	r2, [pc, #368]	; (80065a0 <GESTURE_Actions+0x344>)
 8006430:	4b5c      	ldr	r3, [pc, #368]	; (80065a4 <GESTURE_Actions+0x348>)
 8006432:	cb03      	ldmia	r3!, {r0, r1}
 8006434:	6010      	str	r0, [r2, #0]
 8006436:	6051      	str	r1, [r2, #4]
 8006438:	881b      	ldrh	r3, [r3, #0]
 800643a:	8113      	strh	r3, [r2, #8]
				HAL_Delay(GEST_QUIT_T);
 800643c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006440:	f7fa fba4 	bl	8000b8c <HAL_Delay>
				HAL_Delay(GEST_QUIT_T);
			}else{
				printf("Up \n");
				strcpy((char*)ref, "Up \n");
			}
			break;
 8006444:	e096      	b.n	8006574 <GESTURE_Actions+0x318>
			}else if(data0 == GestureBackwards){
 8006446:	79bb      	ldrb	r3, [r7, #6]
 8006448:	2b80      	cmp	r3, #128	; 0x80
 800644a:	d10e      	bne.n	800646a <GESTURE_Actions+0x20e>
				printf("Backwards \n");
 800644c:	4856      	ldr	r0, [pc, #344]	; (80065a8 <GESTURE_Actions+0x34c>)
 800644e:	f000 fa87 	bl	8006960 <puts>
				strcpy((char*)ref, "Backwards \n");
 8006452:	4a53      	ldr	r2, [pc, #332]	; (80065a0 <GESTURE_Actions+0x344>)
 8006454:	4b55      	ldr	r3, [pc, #340]	; (80065ac <GESTURE_Actions+0x350>)
 8006456:	4614      	mov	r4, r2
 8006458:	cb07      	ldmia	r3!, {r0, r1, r2}
 800645a:	6020      	str	r0, [r4, #0]
 800645c:	6061      	str	r1, [r4, #4]
 800645e:	60a2      	str	r2, [r4, #8]
				HAL_Delay(GEST_QUIT_T);
 8006460:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006464:	f7fa fb92 	bl	8000b8c <HAL_Delay>
			break;
 8006468:	e084      	b.n	8006574 <GESTURE_Actions+0x318>
				printf("Up \n");
 800646a:	4855      	ldr	r0, [pc, #340]	; (80065c0 <GESTURE_Actions+0x364>)
 800646c:	f000 fa78 	bl	8006960 <puts>
				strcpy((char*)ref, "Up \n");
 8006470:	4b4b      	ldr	r3, [pc, #300]	; (80065a0 <GESTURE_Actions+0x344>)
 8006472:	4a54      	ldr	r2, [pc, #336]	; (80065c4 <GESTURE_Actions+0x368>)
 8006474:	6810      	ldr	r0, [r2, #0]
 8006476:	6018      	str	r0, [r3, #0]
 8006478:	7912      	ldrb	r2, [r2, #4]
 800647a:	711a      	strb	r2, [r3, #4]
			break;
 800647c:	e07a      	b.n	8006574 <GESTURE_Actions+0x318>

		case GestureDown:
			HAL_Delay(GEST_ENTR_T);
 800647e:	f44f 7016 	mov.w	r0, #600	; 0x258
 8006482:	f7fa fb83 	bl	8000b8c <HAL_Delay>
			registerRead(0x43, 1, &data0);
 8006486:	1dbb      	adds	r3, r7, #6
 8006488:	461a      	mov	r2, r3
 800648a:	2101      	movs	r1, #1
 800648c:	2043      	movs	r0, #67	; 0x43
 800648e:	f000 f961 	bl	8006754 <registerRead>
			if(data0 == GestureForward){
 8006492:	79bb      	ldrb	r3, [r7, #6]
 8006494:	2b40      	cmp	r3, #64	; 0x40
 8006496:	d10e      	bne.n	80064b6 <GESTURE_Actions+0x25a>
				printf("Forward \n");
 8006498:	4840      	ldr	r0, [pc, #256]	; (800659c <GESTURE_Actions+0x340>)
 800649a:	f000 fa61 	bl	8006960 <puts>
				strcpy((char*)ref, "Forward \n");
 800649e:	4a40      	ldr	r2, [pc, #256]	; (80065a0 <GESTURE_Actions+0x344>)
 80064a0:	4b40      	ldr	r3, [pc, #256]	; (80065a4 <GESTURE_Actions+0x348>)
 80064a2:	cb03      	ldmia	r3!, {r0, r1}
 80064a4:	6010      	str	r0, [r2, #0]
 80064a6:	6051      	str	r1, [r2, #4]
 80064a8:	881b      	ldrh	r3, [r3, #0]
 80064aa:	8113      	strh	r3, [r2, #8]
				HAL_Delay(GEST_QUIT_T);
 80064ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80064b0:	f7fa fb6c 	bl	8000b8c <HAL_Delay>
				HAL_Delay(GEST_QUIT_T);
			}else{
				strcpy((char*)ref, "Down \n");
				printf("Down \n");
			}
			break;
 80064b4:	e05e      	b.n	8006574 <GESTURE_Actions+0x318>
			}else if(data0 == GestureBackwards){
 80064b6:	79bb      	ldrb	r3, [r7, #6]
 80064b8:	2b80      	cmp	r3, #128	; 0x80
 80064ba:	d10e      	bne.n	80064da <GESTURE_Actions+0x27e>
				printf("Backwards \n");
 80064bc:	483a      	ldr	r0, [pc, #232]	; (80065a8 <GESTURE_Actions+0x34c>)
 80064be:	f000 fa4f 	bl	8006960 <puts>
				strcpy((char*)ref, "Backwards \n");
 80064c2:	4a37      	ldr	r2, [pc, #220]	; (80065a0 <GESTURE_Actions+0x344>)
 80064c4:	4b39      	ldr	r3, [pc, #228]	; (80065ac <GESTURE_Actions+0x350>)
 80064c6:	4614      	mov	r4, r2
 80064c8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80064ca:	6020      	str	r0, [r4, #0]
 80064cc:	6061      	str	r1, [r4, #4]
 80064ce:	60a2      	str	r2, [r4, #8]
				HAL_Delay(GEST_QUIT_T);
 80064d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80064d4:	f7fa fb5a 	bl	8000b8c <HAL_Delay>
			break;
 80064d8:	e04c      	b.n	8006574 <GESTURE_Actions+0x318>
				strcpy((char*)ref, "Down \n");
 80064da:	4b31      	ldr	r3, [pc, #196]	; (80065a0 <GESTURE_Actions+0x344>)
 80064dc:	4a3a      	ldr	r2, [pc, #232]	; (80065c8 <GESTURE_Actions+0x36c>)
 80064de:	6810      	ldr	r0, [r2, #0]
 80064e0:	6018      	str	r0, [r3, #0]
 80064e2:	8891      	ldrh	r1, [r2, #4]
 80064e4:	7992      	ldrb	r2, [r2, #6]
 80064e6:	8099      	strh	r1, [r3, #4]
 80064e8:	719a      	strb	r2, [r3, #6]
				printf("Down \n");
 80064ea:	4838      	ldr	r0, [pc, #224]	; (80065cc <GESTURE_Actions+0x370>)
 80064ec:	f000 fa38 	bl	8006960 <puts>
			break;
 80064f0:	e040      	b.n	8006574 <GESTURE_Actions+0x318>

		case GestureCW:
			printf("Clockwise \n");
 80064f2:	4837      	ldr	r0, [pc, #220]	; (80065d0 <GESTURE_Actions+0x374>)
 80064f4:	f000 fa34 	bl	8006960 <puts>
			strcpy((char*)ref, "Clockwise \n");
 80064f8:	4a29      	ldr	r2, [pc, #164]	; (80065a0 <GESTURE_Actions+0x344>)
 80064fa:	4b36      	ldr	r3, [pc, #216]	; (80065d4 <GESTURE_Actions+0x378>)
 80064fc:	4614      	mov	r4, r2
 80064fe:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006500:	6020      	str	r0, [r4, #0]
 8006502:	6061      	str	r1, [r4, #4]
 8006504:	60a2      	str	r2, [r4, #8]
			HAL_Delay(GEST_QUIT_T);
 8006506:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800650a:	f7fa fb3f 	bl	8000b8c <HAL_Delay>
			break;
 800650e:	e031      	b.n	8006574 <GESTURE_Actions+0x318>

		case GestureACW:
			printf("Anti-Clockwise \n");
 8006510:	4831      	ldr	r0, [pc, #196]	; (80065d8 <GESTURE_Actions+0x37c>)
 8006512:	f000 fa25 	bl	8006960 <puts>
			strcpy((char*)ref, "Anti-clockwise \n");
 8006516:	4a22      	ldr	r2, [pc, #136]	; (80065a0 <GESTURE_Actions+0x344>)
 8006518:	4b30      	ldr	r3, [pc, #192]	; (80065dc <GESTURE_Actions+0x380>)
 800651a:	4615      	mov	r5, r2
 800651c:	461c      	mov	r4, r3
 800651e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006520:	6028      	str	r0, [r5, #0]
 8006522:	6069      	str	r1, [r5, #4]
 8006524:	60aa      	str	r2, [r5, #8]
 8006526:	60eb      	str	r3, [r5, #12]
 8006528:	7823      	ldrb	r3, [r4, #0]
 800652a:	742b      	strb	r3, [r5, #16]
			HAL_Delay(GEST_QUIT_T);
 800652c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006530:	f7fa fb2c 	bl	8000b8c <HAL_Delay>
			break;
 8006534:	e01e      	b.n	8006574 <GESTURE_Actions+0x318>

		case GestureForward:
			printf("Forward \n");
 8006536:	4819      	ldr	r0, [pc, #100]	; (800659c <GESTURE_Actions+0x340>)
 8006538:	f000 fa12 	bl	8006960 <puts>
			strcpy((char*)ref, "Forward \n");
 800653c:	4a18      	ldr	r2, [pc, #96]	; (80065a0 <GESTURE_Actions+0x344>)
 800653e:	4b19      	ldr	r3, [pc, #100]	; (80065a4 <GESTURE_Actions+0x348>)
 8006540:	cb03      	ldmia	r3!, {r0, r1}
 8006542:	6010      	str	r0, [r2, #0]
 8006544:	6051      	str	r1, [r2, #4]
 8006546:	881b      	ldrh	r3, [r3, #0]
 8006548:	8113      	strh	r3, [r2, #8]
			HAL_Delay(GEST_QUIT_T);
 800654a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800654e:	f7fa fb1d 	bl	8000b8c <HAL_Delay>
			break;
 8006552:	e00f      	b.n	8006574 <GESTURE_Actions+0x318>

		case GestureBackwards:
			printf("Backwards \n");
 8006554:	4814      	ldr	r0, [pc, #80]	; (80065a8 <GESTURE_Actions+0x34c>)
 8006556:	f000 fa03 	bl	8006960 <puts>
			strcpy((char*)ref, "Backwards \n");
 800655a:	4a11      	ldr	r2, [pc, #68]	; (80065a0 <GESTURE_Actions+0x344>)
 800655c:	4b13      	ldr	r3, [pc, #76]	; (80065ac <GESTURE_Actions+0x350>)
 800655e:	4614      	mov	r4, r2
 8006560:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006562:	6020      	str	r0, [r4, #0]
 8006564:	6061      	str	r1, [r4, #4]
 8006566:	60a2      	str	r2, [r4, #8]
			HAL_Delay(GEST_QUIT_T);
 8006568:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800656c:	f7fa fb0e 	bl	8000b8c <HAL_Delay>
			break;
 8006570:	e000      	b.n	8006574 <GESTURE_Actions+0x318>
		}
	}
 8006572:	bf00      	nop
	HAL_UART_Transmit(&HandleUART, ref, strlen((char*)ref), HAL_MAX_DELAY);
 8006574:	480a      	ldr	r0, [pc, #40]	; (80065a0 <GESTURE_Actions+0x344>)
 8006576:	f7f9 fe2d 	bl	80001d4 <strlen>
 800657a:	4603      	mov	r3, r0
 800657c:	b29a      	uxth	r2, r3
 800657e:	f04f 33ff 	mov.w	r3, #4294967295
 8006582:	4907      	ldr	r1, [pc, #28]	; (80065a0 <GESTURE_Actions+0x344>)
 8006584:	4816      	ldr	r0, [pc, #88]	; (80065e0 <GESTURE_Actions+0x384>)
 8006586:	f7fe f840 	bl	800460a <HAL_UART_Transmit>
	HAL_Delay(1000);
 800658a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800658e:	f7fa fafd 	bl	8000b8c <HAL_Delay>
};
 8006592:	bf00      	nop
 8006594:	3708      	adds	r7, #8
 8006596:	46bd      	mov	sp, r7
 8006598:	bdb0      	pop	{r4, r5, r7, pc}
 800659a:	bf00      	nop
 800659c:	08007274 	.word	0x08007274
 80065a0:	2000073c 	.word	0x2000073c
 80065a4:	08007280 	.word	0x08007280
 80065a8:	0800728c 	.word	0x0800728c
 80065ac:	08007298 	.word	0x08007298
 80065b0:	080072a4 	.word	0x080072a4
 80065b4:	080072ac 	.word	0x080072ac
 80065b8:	080072b4 	.word	0x080072b4
 80065bc:	080072bc 	.word	0x080072bc
 80065c0:	080072c4 	.word	0x080072c4
 80065c4:	080072c8 	.word	0x080072c8
 80065c8:	080072d0 	.word	0x080072d0
 80065cc:	080072d8 	.word	0x080072d8
 80065d0:	080072e0 	.word	0x080072e0
 80065d4:	080072ec 	.word	0x080072ec
 80065d8:	080072f8 	.word	0x080072f8
 80065dc:	08007308 	.word	0x08007308
 80065e0:	2000029c 	.word	0x2000029c

080065e4 <gestureInit>:



uint8_t gestureInit(void)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b084      	sub	sp, #16
 80065e8:	af00      	add	r7, sp, #0
	uint8_t data0 = 0;
 80065ea:	2300      	movs	r3, #0
 80065ec:	71fb      	strb	r3, [r7, #7]
	uint8_t data1 = 1;
 80065ee:	2301      	movs	r3, #1
 80065f0:	71bb      	strb	r3, [r7, #6]
	int result = 0;
 80065f2:	2300      	movs	r3, #0
 80065f4:	60fb      	str	r3, [r7, #12]

	registerWrite(GESTURE_REG_BANK_SEL, GESTURE_BANK0);
 80065f6:	2100      	movs	r1, #0
 80065f8:	20ef      	movs	r0, #239	; 0xef
 80065fa:	f000 f85f 	bl	80066bc <registerWrite>
	registerWrite(GESTURE_REG_BANK_SEL, GESTURE_BANK0);
 80065fe:	2100      	movs	r1, #0
 8006600:	20ef      	movs	r0, #239	; 0xef
 8006602:	f000 f85b 	bl	80066bc <registerWrite>

	registerRead(0,1, &data0);
 8006606:	1dfb      	adds	r3, r7, #7
 8006608:	461a      	mov	r2, r3
 800660a:	2101      	movs	r1, #1
 800660c:	2000      	movs	r0, #0
 800660e:	f000 f8a1 	bl	8006754 <registerRead>
	registerRead(1,1, &data1);
 8006612:	1dbb      	adds	r3, r7, #6
 8006614:	461a      	mov	r2, r3
 8006616:	2101      	movs	r1, #1
 8006618:	2001      	movs	r0, #1
 800661a:	f000 f89b 	bl	8006754 <registerRead>

	if ((data0 != 0x20) || (data1 != 0x76)){
 800661e:	79fb      	ldrb	r3, [r7, #7]
 8006620:	2b20      	cmp	r3, #32
 8006622:	d102      	bne.n	800662a <gestureInit+0x46>
 8006624:	79bb      	ldrb	r3, [r7, #6]
 8006626:	2b76      	cmp	r3, #118	; 0x76
 8006628:	d001      	beq.n	800662e <gestureInit+0x4a>
		result = 1;
 800662a:	2301      	movs	r3, #1
 800662c:	60fb      	str	r3, [r7, #12]
	}

	if(data0 == 0x20){
 800662e:	79fb      	ldrb	r3, [r7, #7]
 8006630:	2b20      	cmp	r3, #32
 8006632:	d109      	bne.n	8006648 <gestureInit+0x64>
		strcpy((char*)ref, "Wake Up \n");
 8006634:	4a1c      	ldr	r2, [pc, #112]	; (80066a8 <gestureInit+0xc4>)
 8006636:	4b1d      	ldr	r3, [pc, #116]	; (80066ac <gestureInit+0xc8>)
 8006638:	cb03      	ldmia	r3!, {r0, r1}
 800663a:	6010      	str	r0, [r2, #0]
 800663c:	6051      	str	r1, [r2, #4]
 800663e:	881b      	ldrh	r3, [r3, #0]
 8006640:	8113      	strh	r3, [r2, #8]
		printf("Wake Up \n");
 8006642:	481b      	ldr	r0, [pc, #108]	; (80066b0 <gestureInit+0xcc>)
 8006644:	f000 f98c 	bl	8006960 <puts>
	}

	for(int i = 1; i < InitialRegister; i++){
 8006648:	2301      	movs	r3, #1
 800664a:	60bb      	str	r3, [r7, #8]
 800664c:	e00f      	b.n	800666e <gestureInit+0x8a>
		registerWrite(RegisterArray[i][0], RegisterArray[i][1]);
 800664e:	4a19      	ldr	r2, [pc, #100]	; (80066b4 <gestureInit+0xd0>)
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8006656:	4917      	ldr	r1, [pc, #92]	; (80066b4 <gestureInit+0xd0>)
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	005b      	lsls	r3, r3, #1
 800665c:	440b      	add	r3, r1
 800665e:	785b      	ldrb	r3, [r3, #1]
 8006660:	4619      	mov	r1, r3
 8006662:	4610      	mov	r0, r2
 8006664:	f000 f82a 	bl	80066bc <registerWrite>
	for(int i = 1; i < InitialRegister; i++){
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	3301      	adds	r3, #1
 800666c:	60bb      	str	r3, [r7, #8]
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	2bda      	cmp	r3, #218	; 0xda
 8006672:	d9ec      	bls.n	800664e <gestureInit+0x6a>
	}

	registerWrite(GESTURE_REG_BANK_SEL, GESTURE_BANK0);
 8006674:	2100      	movs	r1, #0
 8006676:	20ef      	movs	r0, #239	; 0xef
 8006678:	f000 f820 	bl	80066bc <registerWrite>
	HAL_UART_Transmit(&HandleUART, ref, strlen((char*)ref), HAL_MAX_DELAY);
 800667c:	480a      	ldr	r0, [pc, #40]	; (80066a8 <gestureInit+0xc4>)
 800667e:	f7f9 fda9 	bl	80001d4 <strlen>
 8006682:	4603      	mov	r3, r0
 8006684:	b29a      	uxth	r2, r3
 8006686:	f04f 33ff 	mov.w	r3, #4294967295
 800668a:	4907      	ldr	r1, [pc, #28]	; (80066a8 <gestureInit+0xc4>)
 800668c:	480a      	ldr	r0, [pc, #40]	; (80066b8 <gestureInit+0xd4>)
 800668e:	f7fd ffbc 	bl	800460a <HAL_UART_Transmit>
	HAL_Delay(1000);
 8006692:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006696:	f7fa fa79 	bl	8000b8c <HAL_Delay>
	return result;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	b2db      	uxtb	r3, r3
};
 800669e:	4618      	mov	r0, r3
 80066a0:	3710      	adds	r7, #16
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}
 80066a6:	bf00      	nop
 80066a8:	2000073c 	.word	0x2000073c
 80066ac:	0800731c 	.word	0x0800731c
 80066b0:	08007328 	.word	0x08007328
 80066b4:	2000000c 	.word	0x2000000c
 80066b8:	2000029c 	.word	0x2000029c

080066bc <registerWrite>:

uint8_t registerWrite(uint8_t address, uint8_t cmd)
{
 80066bc:	b5b0      	push	{r4, r5, r7, lr}
 80066be:	b086      	sub	sp, #24
 80066c0:	af02      	add	r7, sp, #8
 80066c2:	4603      	mov	r3, r0
 80066c4:	460a      	mov	r2, r1
 80066c6:	71fb      	strb	r3, [r7, #7]
 80066c8:	4613      	mov	r3, r2
 80066ca:	71bb      	strb	r3, [r7, #6]
	uint8_t data[3];
	data[0] = address;
 80066cc:	79fb      	ldrb	r3, [r7, #7]
 80066ce:	733b      	strb	r3, [r7, #12]
	data[1] = cmd;
 80066d0:	79bb      	ldrb	r3, [r7, #6]
 80066d2:	737b      	strb	r3, [r7, #13]
	char result = 1;
 80066d4:	2301      	movs	r3, #1
 80066d6:	73fb      	strb	r3, [r7, #15]

	result = HAL_I2C_Master_Transmit(HandleI2C, GESTURE_ADDRESS_I2C << 1, data, 2, 10);
 80066d8:	4b19      	ldr	r3, [pc, #100]	; (8006740 <registerWrite+0x84>)
 80066da:	6818      	ldr	r0, [r3, #0]
 80066dc:	f107 020c 	add.w	r2, r7, #12
 80066e0:	230a      	movs	r3, #10
 80066e2:	9300      	str	r3, [sp, #0]
 80066e4:	2302      	movs	r3, #2
 80066e6:	21e6      	movs	r1, #230	; 0xe6
 80066e8:	f7fa fdb8 	bl	800125c <HAL_I2C_Master_Transmit>
 80066ec:	4603      	mov	r3, r0
 80066ee:	73fb      	strb	r3, [r7, #15]

	if (result != 0)
 80066f0:	7bfb      	ldrb	r3, [r7, #15]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d00f      	beq.n	8006716 <registerWrite+0x5a>
	{
		strcpy((char*)ref, "Transmission Error \n");
 80066f6:	4a13      	ldr	r2, [pc, #76]	; (8006744 <registerWrite+0x88>)
 80066f8:	4b13      	ldr	r3, [pc, #76]	; (8006748 <registerWrite+0x8c>)
 80066fa:	4615      	mov	r5, r2
 80066fc:	461c      	mov	r4, r3
 80066fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006700:	6028      	str	r0, [r5, #0]
 8006702:	6069      	str	r1, [r5, #4]
 8006704:	60aa      	str	r2, [r5, #8]
 8006706:	60eb      	str	r3, [r5, #12]
 8006708:	6820      	ldr	r0, [r4, #0]
 800670a:	6128      	str	r0, [r5, #16]
 800670c:	7923      	ldrb	r3, [r4, #4]
 800670e:	752b      	strb	r3, [r5, #20]
		printf("Transmission Error \n");
 8006710:	480e      	ldr	r0, [pc, #56]	; (800674c <registerWrite+0x90>)
 8006712:	f000 f925 	bl	8006960 <puts>
	}
	HAL_UART_Transmit(&HandleUART, ref, strlen((char*)ref), HAL_MAX_DELAY);
 8006716:	480b      	ldr	r0, [pc, #44]	; (8006744 <registerWrite+0x88>)
 8006718:	f7f9 fd5c 	bl	80001d4 <strlen>
 800671c:	4603      	mov	r3, r0
 800671e:	b29a      	uxth	r2, r3
 8006720:	f04f 33ff 	mov.w	r3, #4294967295
 8006724:	4907      	ldr	r1, [pc, #28]	; (8006744 <registerWrite+0x88>)
 8006726:	480a      	ldr	r0, [pc, #40]	; (8006750 <registerWrite+0x94>)
 8006728:	f7fd ff6f 	bl	800460a <HAL_UART_Transmit>
	HAL_Delay(1000);
 800672c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006730:	f7fa fa2c 	bl	8000b8c <HAL_Delay>
	return result;
 8006734:	7bfb      	ldrb	r3, [r7, #15]
};
 8006736:	4618      	mov	r0, r3
 8006738:	3710      	adds	r7, #16
 800673a:	46bd      	mov	sp, r7
 800673c:	bdb0      	pop	{r4, r5, r7, pc}
 800673e:	bf00      	nop
 8006740:	20000340 	.word	0x20000340
 8006744:	2000073c 	.word	0x2000073c
 8006748:	08007334 	.word	0x08007334
 800674c:	0800734c 	.word	0x0800734c
 8006750:	2000029c 	.word	0x2000029c

08006754 <registerRead>:

uint8_t registerRead(uint8_t address, uint8_t qty, uint8_t data[])
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b086      	sub	sp, #24
 8006758:	af02      	add	r7, sp, #8
 800675a:	4603      	mov	r3, r0
 800675c:	603a      	str	r2, [r7, #0]
 800675e:	71fb      	strb	r3, [r7, #7]
 8006760:	460b      	mov	r3, r1
 8006762:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp[3];
	tmp[0] = address;
 8006764:	79fb      	ldrb	r3, [r7, #7]
 8006766:	733b      	strb	r3, [r7, #12]
	char result = 1;
 8006768:	2301      	movs	r3, #1
 800676a:	73fb      	strb	r3, [r7, #15]

	result = HAL_I2C_Master_Transmit(HandleI2C, GESTURE_ADDRESS_I2C << 1, tmp, 1, 10);
 800676c:	4b25      	ldr	r3, [pc, #148]	; (8006804 <registerRead+0xb0>)
 800676e:	6818      	ldr	r0, [r3, #0]
 8006770:	f107 020c 	add.w	r2, r7, #12
 8006774:	230a      	movs	r3, #10
 8006776:	9300      	str	r3, [sp, #0]
 8006778:	2301      	movs	r3, #1
 800677a:	21e6      	movs	r1, #230	; 0xe6
 800677c:	f7fa fd6e 	bl	800125c <HAL_I2C_Master_Transmit>
 8006780:	4603      	mov	r3, r0
 8006782:	73fb      	strb	r3, [r7, #15]

	if (result != 0)
 8006784:	7bfb      	ldrb	r3, [r7, #15]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d00b      	beq.n	80067a2 <registerRead+0x4e>
	{
		strcpy((char*)ref, "Error TX \n");
 800678a:	4a1f      	ldr	r2, [pc, #124]	; (8006808 <registerRead+0xb4>)
 800678c:	4b1f      	ldr	r3, [pc, #124]	; (800680c <registerRead+0xb8>)
 800678e:	cb03      	ldmia	r3!, {r0, r1}
 8006790:	6010      	str	r0, [r2, #0]
 8006792:	6051      	str	r1, [r2, #4]
 8006794:	8819      	ldrh	r1, [r3, #0]
 8006796:	789b      	ldrb	r3, [r3, #2]
 8006798:	8111      	strh	r1, [r2, #8]
 800679a:	7293      	strb	r3, [r2, #10]
		printf("Error TX \n");
 800679c:	481c      	ldr	r0, [pc, #112]	; (8006810 <registerRead+0xbc>)
 800679e:	f000 f8df 	bl	8006960 <puts>
	}

	result = 1;
 80067a2:	2301      	movs	r3, #1
 80067a4:	73fb      	strb	r3, [r7, #15]
	result = HAL_I2C_Master_Receive(HandleI2C, (GESTURE_ADDRESS_I2C << 1) + 1, data, qty, 10);
 80067a6:	4b17      	ldr	r3, [pc, #92]	; (8006804 <registerRead+0xb0>)
 80067a8:	6818      	ldr	r0, [r3, #0]
 80067aa:	79bb      	ldrb	r3, [r7, #6]
 80067ac:	b29b      	uxth	r3, r3
 80067ae:	220a      	movs	r2, #10
 80067b0:	9200      	str	r2, [sp, #0]
 80067b2:	683a      	ldr	r2, [r7, #0]
 80067b4:	21e7      	movs	r1, #231	; 0xe7
 80067b6:	f7fa fe45 	bl	8001444 <HAL_I2C_Master_Receive>
 80067ba:	4603      	mov	r3, r0
 80067bc:	73fb      	strb	r3, [r7, #15]
	if (result != 0){
 80067be:	7bfb      	ldrb	r3, [r7, #15]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d00b      	beq.n	80067dc <registerRead+0x88>
		strcpy((char*)ref, "Error RX \n");
 80067c4:	4a10      	ldr	r2, [pc, #64]	; (8006808 <registerRead+0xb4>)
 80067c6:	4b13      	ldr	r3, [pc, #76]	; (8006814 <registerRead+0xc0>)
 80067c8:	cb03      	ldmia	r3!, {r0, r1}
 80067ca:	6010      	str	r0, [r2, #0]
 80067cc:	6051      	str	r1, [r2, #4]
 80067ce:	8819      	ldrh	r1, [r3, #0]
 80067d0:	789b      	ldrb	r3, [r3, #2]
 80067d2:	8111      	strh	r1, [r2, #8]
 80067d4:	7293      	strb	r3, [r2, #10]
		printf("Error RX \n");
 80067d6:	4810      	ldr	r0, [pc, #64]	; (8006818 <registerRead+0xc4>)
 80067d8:	f000 f8c2 	bl	8006960 <puts>
	}
	HAL_UART_Transmit(&HandleUART, ref, strlen((char*)ref), HAL_MAX_DELAY);
 80067dc:	480a      	ldr	r0, [pc, #40]	; (8006808 <registerRead+0xb4>)
 80067de:	f7f9 fcf9 	bl	80001d4 <strlen>
 80067e2:	4603      	mov	r3, r0
 80067e4:	b29a      	uxth	r2, r3
 80067e6:	f04f 33ff 	mov.w	r3, #4294967295
 80067ea:	4907      	ldr	r1, [pc, #28]	; (8006808 <registerRead+0xb4>)
 80067ec:	480b      	ldr	r0, [pc, #44]	; (800681c <registerRead+0xc8>)
 80067ee:	f7fd ff0c 	bl	800460a <HAL_UART_Transmit>
	HAL_Delay(1000);
 80067f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80067f6:	f7fa f9c9 	bl	8000b8c <HAL_Delay>
	return result;
 80067fa:	7bfb      	ldrb	r3, [r7, #15]
};
 80067fc:	4618      	mov	r0, r3
 80067fe:	3710      	adds	r7, #16
 8006800:	46bd      	mov	sp, r7
 8006802:	bd80      	pop	{r7, pc}
 8006804:	20000340 	.word	0x20000340
 8006808:	2000073c 	.word	0x2000073c
 800680c:	08007360 	.word	0x08007360
 8006810:	0800736c 	.word	0x0800736c
 8006814:	08007378 	.word	0x08007378
 8006818:	08007384 	.word	0x08007384
 800681c:	2000029c 	.word	0x2000029c

08006820 <__errno>:
 8006820:	4b01      	ldr	r3, [pc, #4]	; (8006828 <__errno+0x8>)
 8006822:	6818      	ldr	r0, [r3, #0]
 8006824:	4770      	bx	lr
 8006826:	bf00      	nop
 8006828:	200001c4 	.word	0x200001c4

0800682c <__libc_init_array>:
 800682c:	b570      	push	{r4, r5, r6, lr}
 800682e:	4d0d      	ldr	r5, [pc, #52]	; (8006864 <__libc_init_array+0x38>)
 8006830:	4c0d      	ldr	r4, [pc, #52]	; (8006868 <__libc_init_array+0x3c>)
 8006832:	1b64      	subs	r4, r4, r5
 8006834:	10a4      	asrs	r4, r4, #2
 8006836:	2600      	movs	r6, #0
 8006838:	42a6      	cmp	r6, r4
 800683a:	d109      	bne.n	8006850 <__libc_init_array+0x24>
 800683c:	4d0b      	ldr	r5, [pc, #44]	; (800686c <__libc_init_array+0x40>)
 800683e:	4c0c      	ldr	r4, [pc, #48]	; (8006870 <__libc_init_array+0x44>)
 8006840:	f000 fce6 	bl	8007210 <_init>
 8006844:	1b64      	subs	r4, r4, r5
 8006846:	10a4      	asrs	r4, r4, #2
 8006848:	2600      	movs	r6, #0
 800684a:	42a6      	cmp	r6, r4
 800684c:	d105      	bne.n	800685a <__libc_init_array+0x2e>
 800684e:	bd70      	pop	{r4, r5, r6, pc}
 8006850:	f855 3b04 	ldr.w	r3, [r5], #4
 8006854:	4798      	blx	r3
 8006856:	3601      	adds	r6, #1
 8006858:	e7ee      	b.n	8006838 <__libc_init_array+0xc>
 800685a:	f855 3b04 	ldr.w	r3, [r5], #4
 800685e:	4798      	blx	r3
 8006860:	3601      	adds	r6, #1
 8006862:	e7f2      	b.n	800684a <__libc_init_array+0x1e>
 8006864:	0800742c 	.word	0x0800742c
 8006868:	0800742c 	.word	0x0800742c
 800686c:	0800742c 	.word	0x0800742c
 8006870:	08007430 	.word	0x08007430

08006874 <memset>:
 8006874:	4402      	add	r2, r0
 8006876:	4603      	mov	r3, r0
 8006878:	4293      	cmp	r3, r2
 800687a:	d100      	bne.n	800687e <memset+0xa>
 800687c:	4770      	bx	lr
 800687e:	f803 1b01 	strb.w	r1, [r3], #1
 8006882:	e7f9      	b.n	8006878 <memset+0x4>

08006884 <_puts_r>:
 8006884:	b570      	push	{r4, r5, r6, lr}
 8006886:	460e      	mov	r6, r1
 8006888:	4605      	mov	r5, r0
 800688a:	b118      	cbz	r0, 8006894 <_puts_r+0x10>
 800688c:	6983      	ldr	r3, [r0, #24]
 800688e:	b90b      	cbnz	r3, 8006894 <_puts_r+0x10>
 8006890:	f000 fa48 	bl	8006d24 <__sinit>
 8006894:	69ab      	ldr	r3, [r5, #24]
 8006896:	68ac      	ldr	r4, [r5, #8]
 8006898:	b913      	cbnz	r3, 80068a0 <_puts_r+0x1c>
 800689a:	4628      	mov	r0, r5
 800689c:	f000 fa42 	bl	8006d24 <__sinit>
 80068a0:	4b2c      	ldr	r3, [pc, #176]	; (8006954 <_puts_r+0xd0>)
 80068a2:	429c      	cmp	r4, r3
 80068a4:	d120      	bne.n	80068e8 <_puts_r+0x64>
 80068a6:	686c      	ldr	r4, [r5, #4]
 80068a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80068aa:	07db      	lsls	r3, r3, #31
 80068ac:	d405      	bmi.n	80068ba <_puts_r+0x36>
 80068ae:	89a3      	ldrh	r3, [r4, #12]
 80068b0:	0598      	lsls	r0, r3, #22
 80068b2:	d402      	bmi.n	80068ba <_puts_r+0x36>
 80068b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80068b6:	f000 fad3 	bl	8006e60 <__retarget_lock_acquire_recursive>
 80068ba:	89a3      	ldrh	r3, [r4, #12]
 80068bc:	0719      	lsls	r1, r3, #28
 80068be:	d51d      	bpl.n	80068fc <_puts_r+0x78>
 80068c0:	6923      	ldr	r3, [r4, #16]
 80068c2:	b1db      	cbz	r3, 80068fc <_puts_r+0x78>
 80068c4:	3e01      	subs	r6, #1
 80068c6:	68a3      	ldr	r3, [r4, #8]
 80068c8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80068cc:	3b01      	subs	r3, #1
 80068ce:	60a3      	str	r3, [r4, #8]
 80068d0:	bb39      	cbnz	r1, 8006922 <_puts_r+0x9e>
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	da38      	bge.n	8006948 <_puts_r+0xc4>
 80068d6:	4622      	mov	r2, r4
 80068d8:	210a      	movs	r1, #10
 80068da:	4628      	mov	r0, r5
 80068dc:	f000 f848 	bl	8006970 <__swbuf_r>
 80068e0:	3001      	adds	r0, #1
 80068e2:	d011      	beq.n	8006908 <_puts_r+0x84>
 80068e4:	250a      	movs	r5, #10
 80068e6:	e011      	b.n	800690c <_puts_r+0x88>
 80068e8:	4b1b      	ldr	r3, [pc, #108]	; (8006958 <_puts_r+0xd4>)
 80068ea:	429c      	cmp	r4, r3
 80068ec:	d101      	bne.n	80068f2 <_puts_r+0x6e>
 80068ee:	68ac      	ldr	r4, [r5, #8]
 80068f0:	e7da      	b.n	80068a8 <_puts_r+0x24>
 80068f2:	4b1a      	ldr	r3, [pc, #104]	; (800695c <_puts_r+0xd8>)
 80068f4:	429c      	cmp	r4, r3
 80068f6:	bf08      	it	eq
 80068f8:	68ec      	ldreq	r4, [r5, #12]
 80068fa:	e7d5      	b.n	80068a8 <_puts_r+0x24>
 80068fc:	4621      	mov	r1, r4
 80068fe:	4628      	mov	r0, r5
 8006900:	f000 f888 	bl	8006a14 <__swsetup_r>
 8006904:	2800      	cmp	r0, #0
 8006906:	d0dd      	beq.n	80068c4 <_puts_r+0x40>
 8006908:	f04f 35ff 	mov.w	r5, #4294967295
 800690c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800690e:	07da      	lsls	r2, r3, #31
 8006910:	d405      	bmi.n	800691e <_puts_r+0x9a>
 8006912:	89a3      	ldrh	r3, [r4, #12]
 8006914:	059b      	lsls	r3, r3, #22
 8006916:	d402      	bmi.n	800691e <_puts_r+0x9a>
 8006918:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800691a:	f000 faa2 	bl	8006e62 <__retarget_lock_release_recursive>
 800691e:	4628      	mov	r0, r5
 8006920:	bd70      	pop	{r4, r5, r6, pc}
 8006922:	2b00      	cmp	r3, #0
 8006924:	da04      	bge.n	8006930 <_puts_r+0xac>
 8006926:	69a2      	ldr	r2, [r4, #24]
 8006928:	429a      	cmp	r2, r3
 800692a:	dc06      	bgt.n	800693a <_puts_r+0xb6>
 800692c:	290a      	cmp	r1, #10
 800692e:	d004      	beq.n	800693a <_puts_r+0xb6>
 8006930:	6823      	ldr	r3, [r4, #0]
 8006932:	1c5a      	adds	r2, r3, #1
 8006934:	6022      	str	r2, [r4, #0]
 8006936:	7019      	strb	r1, [r3, #0]
 8006938:	e7c5      	b.n	80068c6 <_puts_r+0x42>
 800693a:	4622      	mov	r2, r4
 800693c:	4628      	mov	r0, r5
 800693e:	f000 f817 	bl	8006970 <__swbuf_r>
 8006942:	3001      	adds	r0, #1
 8006944:	d1bf      	bne.n	80068c6 <_puts_r+0x42>
 8006946:	e7df      	b.n	8006908 <_puts_r+0x84>
 8006948:	6823      	ldr	r3, [r4, #0]
 800694a:	250a      	movs	r5, #10
 800694c:	1c5a      	adds	r2, r3, #1
 800694e:	6022      	str	r2, [r4, #0]
 8006950:	701d      	strb	r5, [r3, #0]
 8006952:	e7db      	b.n	800690c <_puts_r+0x88>
 8006954:	080073ec 	.word	0x080073ec
 8006958:	0800740c 	.word	0x0800740c
 800695c:	080073cc 	.word	0x080073cc

08006960 <puts>:
 8006960:	4b02      	ldr	r3, [pc, #8]	; (800696c <puts+0xc>)
 8006962:	4601      	mov	r1, r0
 8006964:	6818      	ldr	r0, [r3, #0]
 8006966:	f7ff bf8d 	b.w	8006884 <_puts_r>
 800696a:	bf00      	nop
 800696c:	200001c4 	.word	0x200001c4

08006970 <__swbuf_r>:
 8006970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006972:	460e      	mov	r6, r1
 8006974:	4614      	mov	r4, r2
 8006976:	4605      	mov	r5, r0
 8006978:	b118      	cbz	r0, 8006982 <__swbuf_r+0x12>
 800697a:	6983      	ldr	r3, [r0, #24]
 800697c:	b90b      	cbnz	r3, 8006982 <__swbuf_r+0x12>
 800697e:	f000 f9d1 	bl	8006d24 <__sinit>
 8006982:	4b21      	ldr	r3, [pc, #132]	; (8006a08 <__swbuf_r+0x98>)
 8006984:	429c      	cmp	r4, r3
 8006986:	d12b      	bne.n	80069e0 <__swbuf_r+0x70>
 8006988:	686c      	ldr	r4, [r5, #4]
 800698a:	69a3      	ldr	r3, [r4, #24]
 800698c:	60a3      	str	r3, [r4, #8]
 800698e:	89a3      	ldrh	r3, [r4, #12]
 8006990:	071a      	lsls	r2, r3, #28
 8006992:	d52f      	bpl.n	80069f4 <__swbuf_r+0x84>
 8006994:	6923      	ldr	r3, [r4, #16]
 8006996:	b36b      	cbz	r3, 80069f4 <__swbuf_r+0x84>
 8006998:	6923      	ldr	r3, [r4, #16]
 800699a:	6820      	ldr	r0, [r4, #0]
 800699c:	1ac0      	subs	r0, r0, r3
 800699e:	6963      	ldr	r3, [r4, #20]
 80069a0:	b2f6      	uxtb	r6, r6
 80069a2:	4283      	cmp	r3, r0
 80069a4:	4637      	mov	r7, r6
 80069a6:	dc04      	bgt.n	80069b2 <__swbuf_r+0x42>
 80069a8:	4621      	mov	r1, r4
 80069aa:	4628      	mov	r0, r5
 80069ac:	f000 f926 	bl	8006bfc <_fflush_r>
 80069b0:	bb30      	cbnz	r0, 8006a00 <__swbuf_r+0x90>
 80069b2:	68a3      	ldr	r3, [r4, #8]
 80069b4:	3b01      	subs	r3, #1
 80069b6:	60a3      	str	r3, [r4, #8]
 80069b8:	6823      	ldr	r3, [r4, #0]
 80069ba:	1c5a      	adds	r2, r3, #1
 80069bc:	6022      	str	r2, [r4, #0]
 80069be:	701e      	strb	r6, [r3, #0]
 80069c0:	6963      	ldr	r3, [r4, #20]
 80069c2:	3001      	adds	r0, #1
 80069c4:	4283      	cmp	r3, r0
 80069c6:	d004      	beq.n	80069d2 <__swbuf_r+0x62>
 80069c8:	89a3      	ldrh	r3, [r4, #12]
 80069ca:	07db      	lsls	r3, r3, #31
 80069cc:	d506      	bpl.n	80069dc <__swbuf_r+0x6c>
 80069ce:	2e0a      	cmp	r6, #10
 80069d0:	d104      	bne.n	80069dc <__swbuf_r+0x6c>
 80069d2:	4621      	mov	r1, r4
 80069d4:	4628      	mov	r0, r5
 80069d6:	f000 f911 	bl	8006bfc <_fflush_r>
 80069da:	b988      	cbnz	r0, 8006a00 <__swbuf_r+0x90>
 80069dc:	4638      	mov	r0, r7
 80069de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80069e0:	4b0a      	ldr	r3, [pc, #40]	; (8006a0c <__swbuf_r+0x9c>)
 80069e2:	429c      	cmp	r4, r3
 80069e4:	d101      	bne.n	80069ea <__swbuf_r+0x7a>
 80069e6:	68ac      	ldr	r4, [r5, #8]
 80069e8:	e7cf      	b.n	800698a <__swbuf_r+0x1a>
 80069ea:	4b09      	ldr	r3, [pc, #36]	; (8006a10 <__swbuf_r+0xa0>)
 80069ec:	429c      	cmp	r4, r3
 80069ee:	bf08      	it	eq
 80069f0:	68ec      	ldreq	r4, [r5, #12]
 80069f2:	e7ca      	b.n	800698a <__swbuf_r+0x1a>
 80069f4:	4621      	mov	r1, r4
 80069f6:	4628      	mov	r0, r5
 80069f8:	f000 f80c 	bl	8006a14 <__swsetup_r>
 80069fc:	2800      	cmp	r0, #0
 80069fe:	d0cb      	beq.n	8006998 <__swbuf_r+0x28>
 8006a00:	f04f 37ff 	mov.w	r7, #4294967295
 8006a04:	e7ea      	b.n	80069dc <__swbuf_r+0x6c>
 8006a06:	bf00      	nop
 8006a08:	080073ec 	.word	0x080073ec
 8006a0c:	0800740c 	.word	0x0800740c
 8006a10:	080073cc 	.word	0x080073cc

08006a14 <__swsetup_r>:
 8006a14:	4b32      	ldr	r3, [pc, #200]	; (8006ae0 <__swsetup_r+0xcc>)
 8006a16:	b570      	push	{r4, r5, r6, lr}
 8006a18:	681d      	ldr	r5, [r3, #0]
 8006a1a:	4606      	mov	r6, r0
 8006a1c:	460c      	mov	r4, r1
 8006a1e:	b125      	cbz	r5, 8006a2a <__swsetup_r+0x16>
 8006a20:	69ab      	ldr	r3, [r5, #24]
 8006a22:	b913      	cbnz	r3, 8006a2a <__swsetup_r+0x16>
 8006a24:	4628      	mov	r0, r5
 8006a26:	f000 f97d 	bl	8006d24 <__sinit>
 8006a2a:	4b2e      	ldr	r3, [pc, #184]	; (8006ae4 <__swsetup_r+0xd0>)
 8006a2c:	429c      	cmp	r4, r3
 8006a2e:	d10f      	bne.n	8006a50 <__swsetup_r+0x3c>
 8006a30:	686c      	ldr	r4, [r5, #4]
 8006a32:	89a3      	ldrh	r3, [r4, #12]
 8006a34:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006a38:	0719      	lsls	r1, r3, #28
 8006a3a:	d42c      	bmi.n	8006a96 <__swsetup_r+0x82>
 8006a3c:	06dd      	lsls	r5, r3, #27
 8006a3e:	d411      	bmi.n	8006a64 <__swsetup_r+0x50>
 8006a40:	2309      	movs	r3, #9
 8006a42:	6033      	str	r3, [r6, #0]
 8006a44:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006a48:	81a3      	strh	r3, [r4, #12]
 8006a4a:	f04f 30ff 	mov.w	r0, #4294967295
 8006a4e:	e03e      	b.n	8006ace <__swsetup_r+0xba>
 8006a50:	4b25      	ldr	r3, [pc, #148]	; (8006ae8 <__swsetup_r+0xd4>)
 8006a52:	429c      	cmp	r4, r3
 8006a54:	d101      	bne.n	8006a5a <__swsetup_r+0x46>
 8006a56:	68ac      	ldr	r4, [r5, #8]
 8006a58:	e7eb      	b.n	8006a32 <__swsetup_r+0x1e>
 8006a5a:	4b24      	ldr	r3, [pc, #144]	; (8006aec <__swsetup_r+0xd8>)
 8006a5c:	429c      	cmp	r4, r3
 8006a5e:	bf08      	it	eq
 8006a60:	68ec      	ldreq	r4, [r5, #12]
 8006a62:	e7e6      	b.n	8006a32 <__swsetup_r+0x1e>
 8006a64:	0758      	lsls	r0, r3, #29
 8006a66:	d512      	bpl.n	8006a8e <__swsetup_r+0x7a>
 8006a68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006a6a:	b141      	cbz	r1, 8006a7e <__swsetup_r+0x6a>
 8006a6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006a70:	4299      	cmp	r1, r3
 8006a72:	d002      	beq.n	8006a7a <__swsetup_r+0x66>
 8006a74:	4630      	mov	r0, r6
 8006a76:	f000 fa59 	bl	8006f2c <_free_r>
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	6363      	str	r3, [r4, #52]	; 0x34
 8006a7e:	89a3      	ldrh	r3, [r4, #12]
 8006a80:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006a84:	81a3      	strh	r3, [r4, #12]
 8006a86:	2300      	movs	r3, #0
 8006a88:	6063      	str	r3, [r4, #4]
 8006a8a:	6923      	ldr	r3, [r4, #16]
 8006a8c:	6023      	str	r3, [r4, #0]
 8006a8e:	89a3      	ldrh	r3, [r4, #12]
 8006a90:	f043 0308 	orr.w	r3, r3, #8
 8006a94:	81a3      	strh	r3, [r4, #12]
 8006a96:	6923      	ldr	r3, [r4, #16]
 8006a98:	b94b      	cbnz	r3, 8006aae <__swsetup_r+0x9a>
 8006a9a:	89a3      	ldrh	r3, [r4, #12]
 8006a9c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006aa0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006aa4:	d003      	beq.n	8006aae <__swsetup_r+0x9a>
 8006aa6:	4621      	mov	r1, r4
 8006aa8:	4630      	mov	r0, r6
 8006aaa:	f000 f9ff 	bl	8006eac <__smakebuf_r>
 8006aae:	89a0      	ldrh	r0, [r4, #12]
 8006ab0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006ab4:	f010 0301 	ands.w	r3, r0, #1
 8006ab8:	d00a      	beq.n	8006ad0 <__swsetup_r+0xbc>
 8006aba:	2300      	movs	r3, #0
 8006abc:	60a3      	str	r3, [r4, #8]
 8006abe:	6963      	ldr	r3, [r4, #20]
 8006ac0:	425b      	negs	r3, r3
 8006ac2:	61a3      	str	r3, [r4, #24]
 8006ac4:	6923      	ldr	r3, [r4, #16]
 8006ac6:	b943      	cbnz	r3, 8006ada <__swsetup_r+0xc6>
 8006ac8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006acc:	d1ba      	bne.n	8006a44 <__swsetup_r+0x30>
 8006ace:	bd70      	pop	{r4, r5, r6, pc}
 8006ad0:	0781      	lsls	r1, r0, #30
 8006ad2:	bf58      	it	pl
 8006ad4:	6963      	ldrpl	r3, [r4, #20]
 8006ad6:	60a3      	str	r3, [r4, #8]
 8006ad8:	e7f4      	b.n	8006ac4 <__swsetup_r+0xb0>
 8006ada:	2000      	movs	r0, #0
 8006adc:	e7f7      	b.n	8006ace <__swsetup_r+0xba>
 8006ade:	bf00      	nop
 8006ae0:	200001c4 	.word	0x200001c4
 8006ae4:	080073ec 	.word	0x080073ec
 8006ae8:	0800740c 	.word	0x0800740c
 8006aec:	080073cc 	.word	0x080073cc

08006af0 <__sflush_r>:
 8006af0:	898a      	ldrh	r2, [r1, #12]
 8006af2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006af6:	4605      	mov	r5, r0
 8006af8:	0710      	lsls	r0, r2, #28
 8006afa:	460c      	mov	r4, r1
 8006afc:	d458      	bmi.n	8006bb0 <__sflush_r+0xc0>
 8006afe:	684b      	ldr	r3, [r1, #4]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	dc05      	bgt.n	8006b10 <__sflush_r+0x20>
 8006b04:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	dc02      	bgt.n	8006b10 <__sflush_r+0x20>
 8006b0a:	2000      	movs	r0, #0
 8006b0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b10:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006b12:	2e00      	cmp	r6, #0
 8006b14:	d0f9      	beq.n	8006b0a <__sflush_r+0x1a>
 8006b16:	2300      	movs	r3, #0
 8006b18:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006b1c:	682f      	ldr	r7, [r5, #0]
 8006b1e:	602b      	str	r3, [r5, #0]
 8006b20:	d032      	beq.n	8006b88 <__sflush_r+0x98>
 8006b22:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006b24:	89a3      	ldrh	r3, [r4, #12]
 8006b26:	075a      	lsls	r2, r3, #29
 8006b28:	d505      	bpl.n	8006b36 <__sflush_r+0x46>
 8006b2a:	6863      	ldr	r3, [r4, #4]
 8006b2c:	1ac0      	subs	r0, r0, r3
 8006b2e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006b30:	b10b      	cbz	r3, 8006b36 <__sflush_r+0x46>
 8006b32:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006b34:	1ac0      	subs	r0, r0, r3
 8006b36:	2300      	movs	r3, #0
 8006b38:	4602      	mov	r2, r0
 8006b3a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006b3c:	6a21      	ldr	r1, [r4, #32]
 8006b3e:	4628      	mov	r0, r5
 8006b40:	47b0      	blx	r6
 8006b42:	1c43      	adds	r3, r0, #1
 8006b44:	89a3      	ldrh	r3, [r4, #12]
 8006b46:	d106      	bne.n	8006b56 <__sflush_r+0x66>
 8006b48:	6829      	ldr	r1, [r5, #0]
 8006b4a:	291d      	cmp	r1, #29
 8006b4c:	d82c      	bhi.n	8006ba8 <__sflush_r+0xb8>
 8006b4e:	4a2a      	ldr	r2, [pc, #168]	; (8006bf8 <__sflush_r+0x108>)
 8006b50:	40ca      	lsrs	r2, r1
 8006b52:	07d6      	lsls	r6, r2, #31
 8006b54:	d528      	bpl.n	8006ba8 <__sflush_r+0xb8>
 8006b56:	2200      	movs	r2, #0
 8006b58:	6062      	str	r2, [r4, #4]
 8006b5a:	04d9      	lsls	r1, r3, #19
 8006b5c:	6922      	ldr	r2, [r4, #16]
 8006b5e:	6022      	str	r2, [r4, #0]
 8006b60:	d504      	bpl.n	8006b6c <__sflush_r+0x7c>
 8006b62:	1c42      	adds	r2, r0, #1
 8006b64:	d101      	bne.n	8006b6a <__sflush_r+0x7a>
 8006b66:	682b      	ldr	r3, [r5, #0]
 8006b68:	b903      	cbnz	r3, 8006b6c <__sflush_r+0x7c>
 8006b6a:	6560      	str	r0, [r4, #84]	; 0x54
 8006b6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006b6e:	602f      	str	r7, [r5, #0]
 8006b70:	2900      	cmp	r1, #0
 8006b72:	d0ca      	beq.n	8006b0a <__sflush_r+0x1a>
 8006b74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006b78:	4299      	cmp	r1, r3
 8006b7a:	d002      	beq.n	8006b82 <__sflush_r+0x92>
 8006b7c:	4628      	mov	r0, r5
 8006b7e:	f000 f9d5 	bl	8006f2c <_free_r>
 8006b82:	2000      	movs	r0, #0
 8006b84:	6360      	str	r0, [r4, #52]	; 0x34
 8006b86:	e7c1      	b.n	8006b0c <__sflush_r+0x1c>
 8006b88:	6a21      	ldr	r1, [r4, #32]
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	4628      	mov	r0, r5
 8006b8e:	47b0      	blx	r6
 8006b90:	1c41      	adds	r1, r0, #1
 8006b92:	d1c7      	bne.n	8006b24 <__sflush_r+0x34>
 8006b94:	682b      	ldr	r3, [r5, #0]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d0c4      	beq.n	8006b24 <__sflush_r+0x34>
 8006b9a:	2b1d      	cmp	r3, #29
 8006b9c:	d001      	beq.n	8006ba2 <__sflush_r+0xb2>
 8006b9e:	2b16      	cmp	r3, #22
 8006ba0:	d101      	bne.n	8006ba6 <__sflush_r+0xb6>
 8006ba2:	602f      	str	r7, [r5, #0]
 8006ba4:	e7b1      	b.n	8006b0a <__sflush_r+0x1a>
 8006ba6:	89a3      	ldrh	r3, [r4, #12]
 8006ba8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006bac:	81a3      	strh	r3, [r4, #12]
 8006bae:	e7ad      	b.n	8006b0c <__sflush_r+0x1c>
 8006bb0:	690f      	ldr	r7, [r1, #16]
 8006bb2:	2f00      	cmp	r7, #0
 8006bb4:	d0a9      	beq.n	8006b0a <__sflush_r+0x1a>
 8006bb6:	0793      	lsls	r3, r2, #30
 8006bb8:	680e      	ldr	r6, [r1, #0]
 8006bba:	bf08      	it	eq
 8006bbc:	694b      	ldreq	r3, [r1, #20]
 8006bbe:	600f      	str	r7, [r1, #0]
 8006bc0:	bf18      	it	ne
 8006bc2:	2300      	movne	r3, #0
 8006bc4:	eba6 0807 	sub.w	r8, r6, r7
 8006bc8:	608b      	str	r3, [r1, #8]
 8006bca:	f1b8 0f00 	cmp.w	r8, #0
 8006bce:	dd9c      	ble.n	8006b0a <__sflush_r+0x1a>
 8006bd0:	6a21      	ldr	r1, [r4, #32]
 8006bd2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006bd4:	4643      	mov	r3, r8
 8006bd6:	463a      	mov	r2, r7
 8006bd8:	4628      	mov	r0, r5
 8006bda:	47b0      	blx	r6
 8006bdc:	2800      	cmp	r0, #0
 8006bde:	dc06      	bgt.n	8006bee <__sflush_r+0xfe>
 8006be0:	89a3      	ldrh	r3, [r4, #12]
 8006be2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006be6:	81a3      	strh	r3, [r4, #12]
 8006be8:	f04f 30ff 	mov.w	r0, #4294967295
 8006bec:	e78e      	b.n	8006b0c <__sflush_r+0x1c>
 8006bee:	4407      	add	r7, r0
 8006bf0:	eba8 0800 	sub.w	r8, r8, r0
 8006bf4:	e7e9      	b.n	8006bca <__sflush_r+0xda>
 8006bf6:	bf00      	nop
 8006bf8:	20400001 	.word	0x20400001

08006bfc <_fflush_r>:
 8006bfc:	b538      	push	{r3, r4, r5, lr}
 8006bfe:	690b      	ldr	r3, [r1, #16]
 8006c00:	4605      	mov	r5, r0
 8006c02:	460c      	mov	r4, r1
 8006c04:	b913      	cbnz	r3, 8006c0c <_fflush_r+0x10>
 8006c06:	2500      	movs	r5, #0
 8006c08:	4628      	mov	r0, r5
 8006c0a:	bd38      	pop	{r3, r4, r5, pc}
 8006c0c:	b118      	cbz	r0, 8006c16 <_fflush_r+0x1a>
 8006c0e:	6983      	ldr	r3, [r0, #24]
 8006c10:	b90b      	cbnz	r3, 8006c16 <_fflush_r+0x1a>
 8006c12:	f000 f887 	bl	8006d24 <__sinit>
 8006c16:	4b14      	ldr	r3, [pc, #80]	; (8006c68 <_fflush_r+0x6c>)
 8006c18:	429c      	cmp	r4, r3
 8006c1a:	d11b      	bne.n	8006c54 <_fflush_r+0x58>
 8006c1c:	686c      	ldr	r4, [r5, #4]
 8006c1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d0ef      	beq.n	8006c06 <_fflush_r+0xa>
 8006c26:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006c28:	07d0      	lsls	r0, r2, #31
 8006c2a:	d404      	bmi.n	8006c36 <_fflush_r+0x3a>
 8006c2c:	0599      	lsls	r1, r3, #22
 8006c2e:	d402      	bmi.n	8006c36 <_fflush_r+0x3a>
 8006c30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c32:	f000 f915 	bl	8006e60 <__retarget_lock_acquire_recursive>
 8006c36:	4628      	mov	r0, r5
 8006c38:	4621      	mov	r1, r4
 8006c3a:	f7ff ff59 	bl	8006af0 <__sflush_r>
 8006c3e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006c40:	07da      	lsls	r2, r3, #31
 8006c42:	4605      	mov	r5, r0
 8006c44:	d4e0      	bmi.n	8006c08 <_fflush_r+0xc>
 8006c46:	89a3      	ldrh	r3, [r4, #12]
 8006c48:	059b      	lsls	r3, r3, #22
 8006c4a:	d4dd      	bmi.n	8006c08 <_fflush_r+0xc>
 8006c4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c4e:	f000 f908 	bl	8006e62 <__retarget_lock_release_recursive>
 8006c52:	e7d9      	b.n	8006c08 <_fflush_r+0xc>
 8006c54:	4b05      	ldr	r3, [pc, #20]	; (8006c6c <_fflush_r+0x70>)
 8006c56:	429c      	cmp	r4, r3
 8006c58:	d101      	bne.n	8006c5e <_fflush_r+0x62>
 8006c5a:	68ac      	ldr	r4, [r5, #8]
 8006c5c:	e7df      	b.n	8006c1e <_fflush_r+0x22>
 8006c5e:	4b04      	ldr	r3, [pc, #16]	; (8006c70 <_fflush_r+0x74>)
 8006c60:	429c      	cmp	r4, r3
 8006c62:	bf08      	it	eq
 8006c64:	68ec      	ldreq	r4, [r5, #12]
 8006c66:	e7da      	b.n	8006c1e <_fflush_r+0x22>
 8006c68:	080073ec 	.word	0x080073ec
 8006c6c:	0800740c 	.word	0x0800740c
 8006c70:	080073cc 	.word	0x080073cc

08006c74 <std>:
 8006c74:	2300      	movs	r3, #0
 8006c76:	b510      	push	{r4, lr}
 8006c78:	4604      	mov	r4, r0
 8006c7a:	e9c0 3300 	strd	r3, r3, [r0]
 8006c7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006c82:	6083      	str	r3, [r0, #8]
 8006c84:	8181      	strh	r1, [r0, #12]
 8006c86:	6643      	str	r3, [r0, #100]	; 0x64
 8006c88:	81c2      	strh	r2, [r0, #14]
 8006c8a:	6183      	str	r3, [r0, #24]
 8006c8c:	4619      	mov	r1, r3
 8006c8e:	2208      	movs	r2, #8
 8006c90:	305c      	adds	r0, #92	; 0x5c
 8006c92:	f7ff fdef 	bl	8006874 <memset>
 8006c96:	4b05      	ldr	r3, [pc, #20]	; (8006cac <std+0x38>)
 8006c98:	6263      	str	r3, [r4, #36]	; 0x24
 8006c9a:	4b05      	ldr	r3, [pc, #20]	; (8006cb0 <std+0x3c>)
 8006c9c:	62a3      	str	r3, [r4, #40]	; 0x28
 8006c9e:	4b05      	ldr	r3, [pc, #20]	; (8006cb4 <std+0x40>)
 8006ca0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006ca2:	4b05      	ldr	r3, [pc, #20]	; (8006cb8 <std+0x44>)
 8006ca4:	6224      	str	r4, [r4, #32]
 8006ca6:	6323      	str	r3, [r4, #48]	; 0x30
 8006ca8:	bd10      	pop	{r4, pc}
 8006caa:	bf00      	nop
 8006cac:	080070a1 	.word	0x080070a1
 8006cb0:	080070c3 	.word	0x080070c3
 8006cb4:	080070fb 	.word	0x080070fb
 8006cb8:	0800711f 	.word	0x0800711f

08006cbc <_cleanup_r>:
 8006cbc:	4901      	ldr	r1, [pc, #4]	; (8006cc4 <_cleanup_r+0x8>)
 8006cbe:	f000 b8af 	b.w	8006e20 <_fwalk_reent>
 8006cc2:	bf00      	nop
 8006cc4:	08006bfd 	.word	0x08006bfd

08006cc8 <__sfmoreglue>:
 8006cc8:	b570      	push	{r4, r5, r6, lr}
 8006cca:	1e4a      	subs	r2, r1, #1
 8006ccc:	2568      	movs	r5, #104	; 0x68
 8006cce:	4355      	muls	r5, r2
 8006cd0:	460e      	mov	r6, r1
 8006cd2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006cd6:	f000 f979 	bl	8006fcc <_malloc_r>
 8006cda:	4604      	mov	r4, r0
 8006cdc:	b140      	cbz	r0, 8006cf0 <__sfmoreglue+0x28>
 8006cde:	2100      	movs	r1, #0
 8006ce0:	e9c0 1600 	strd	r1, r6, [r0]
 8006ce4:	300c      	adds	r0, #12
 8006ce6:	60a0      	str	r0, [r4, #8]
 8006ce8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006cec:	f7ff fdc2 	bl	8006874 <memset>
 8006cf0:	4620      	mov	r0, r4
 8006cf2:	bd70      	pop	{r4, r5, r6, pc}

08006cf4 <__sfp_lock_acquire>:
 8006cf4:	4801      	ldr	r0, [pc, #4]	; (8006cfc <__sfp_lock_acquire+0x8>)
 8006cf6:	f000 b8b3 	b.w	8006e60 <__retarget_lock_acquire_recursive>
 8006cfa:	bf00      	nop
 8006cfc:	2000075a 	.word	0x2000075a

08006d00 <__sfp_lock_release>:
 8006d00:	4801      	ldr	r0, [pc, #4]	; (8006d08 <__sfp_lock_release+0x8>)
 8006d02:	f000 b8ae 	b.w	8006e62 <__retarget_lock_release_recursive>
 8006d06:	bf00      	nop
 8006d08:	2000075a 	.word	0x2000075a

08006d0c <__sinit_lock_acquire>:
 8006d0c:	4801      	ldr	r0, [pc, #4]	; (8006d14 <__sinit_lock_acquire+0x8>)
 8006d0e:	f000 b8a7 	b.w	8006e60 <__retarget_lock_acquire_recursive>
 8006d12:	bf00      	nop
 8006d14:	20000755 	.word	0x20000755

08006d18 <__sinit_lock_release>:
 8006d18:	4801      	ldr	r0, [pc, #4]	; (8006d20 <__sinit_lock_release+0x8>)
 8006d1a:	f000 b8a2 	b.w	8006e62 <__retarget_lock_release_recursive>
 8006d1e:	bf00      	nop
 8006d20:	20000755 	.word	0x20000755

08006d24 <__sinit>:
 8006d24:	b510      	push	{r4, lr}
 8006d26:	4604      	mov	r4, r0
 8006d28:	f7ff fff0 	bl	8006d0c <__sinit_lock_acquire>
 8006d2c:	69a3      	ldr	r3, [r4, #24]
 8006d2e:	b11b      	cbz	r3, 8006d38 <__sinit+0x14>
 8006d30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d34:	f7ff bff0 	b.w	8006d18 <__sinit_lock_release>
 8006d38:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006d3c:	6523      	str	r3, [r4, #80]	; 0x50
 8006d3e:	4b13      	ldr	r3, [pc, #76]	; (8006d8c <__sinit+0x68>)
 8006d40:	4a13      	ldr	r2, [pc, #76]	; (8006d90 <__sinit+0x6c>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	62a2      	str	r2, [r4, #40]	; 0x28
 8006d46:	42a3      	cmp	r3, r4
 8006d48:	bf04      	itt	eq
 8006d4a:	2301      	moveq	r3, #1
 8006d4c:	61a3      	streq	r3, [r4, #24]
 8006d4e:	4620      	mov	r0, r4
 8006d50:	f000 f820 	bl	8006d94 <__sfp>
 8006d54:	6060      	str	r0, [r4, #4]
 8006d56:	4620      	mov	r0, r4
 8006d58:	f000 f81c 	bl	8006d94 <__sfp>
 8006d5c:	60a0      	str	r0, [r4, #8]
 8006d5e:	4620      	mov	r0, r4
 8006d60:	f000 f818 	bl	8006d94 <__sfp>
 8006d64:	2200      	movs	r2, #0
 8006d66:	60e0      	str	r0, [r4, #12]
 8006d68:	2104      	movs	r1, #4
 8006d6a:	6860      	ldr	r0, [r4, #4]
 8006d6c:	f7ff ff82 	bl	8006c74 <std>
 8006d70:	68a0      	ldr	r0, [r4, #8]
 8006d72:	2201      	movs	r2, #1
 8006d74:	2109      	movs	r1, #9
 8006d76:	f7ff ff7d 	bl	8006c74 <std>
 8006d7a:	68e0      	ldr	r0, [r4, #12]
 8006d7c:	2202      	movs	r2, #2
 8006d7e:	2112      	movs	r1, #18
 8006d80:	f7ff ff78 	bl	8006c74 <std>
 8006d84:	2301      	movs	r3, #1
 8006d86:	61a3      	str	r3, [r4, #24]
 8006d88:	e7d2      	b.n	8006d30 <__sinit+0xc>
 8006d8a:	bf00      	nop
 8006d8c:	080073c8 	.word	0x080073c8
 8006d90:	08006cbd 	.word	0x08006cbd

08006d94 <__sfp>:
 8006d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d96:	4607      	mov	r7, r0
 8006d98:	f7ff ffac 	bl	8006cf4 <__sfp_lock_acquire>
 8006d9c:	4b1e      	ldr	r3, [pc, #120]	; (8006e18 <__sfp+0x84>)
 8006d9e:	681e      	ldr	r6, [r3, #0]
 8006da0:	69b3      	ldr	r3, [r6, #24]
 8006da2:	b913      	cbnz	r3, 8006daa <__sfp+0x16>
 8006da4:	4630      	mov	r0, r6
 8006da6:	f7ff ffbd 	bl	8006d24 <__sinit>
 8006daa:	3648      	adds	r6, #72	; 0x48
 8006dac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006db0:	3b01      	subs	r3, #1
 8006db2:	d503      	bpl.n	8006dbc <__sfp+0x28>
 8006db4:	6833      	ldr	r3, [r6, #0]
 8006db6:	b30b      	cbz	r3, 8006dfc <__sfp+0x68>
 8006db8:	6836      	ldr	r6, [r6, #0]
 8006dba:	e7f7      	b.n	8006dac <__sfp+0x18>
 8006dbc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006dc0:	b9d5      	cbnz	r5, 8006df8 <__sfp+0x64>
 8006dc2:	4b16      	ldr	r3, [pc, #88]	; (8006e1c <__sfp+0x88>)
 8006dc4:	60e3      	str	r3, [r4, #12]
 8006dc6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006dca:	6665      	str	r5, [r4, #100]	; 0x64
 8006dcc:	f000 f847 	bl	8006e5e <__retarget_lock_init_recursive>
 8006dd0:	f7ff ff96 	bl	8006d00 <__sfp_lock_release>
 8006dd4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006dd8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006ddc:	6025      	str	r5, [r4, #0]
 8006dde:	61a5      	str	r5, [r4, #24]
 8006de0:	2208      	movs	r2, #8
 8006de2:	4629      	mov	r1, r5
 8006de4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006de8:	f7ff fd44 	bl	8006874 <memset>
 8006dec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006df0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006df4:	4620      	mov	r0, r4
 8006df6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006df8:	3468      	adds	r4, #104	; 0x68
 8006dfa:	e7d9      	b.n	8006db0 <__sfp+0x1c>
 8006dfc:	2104      	movs	r1, #4
 8006dfe:	4638      	mov	r0, r7
 8006e00:	f7ff ff62 	bl	8006cc8 <__sfmoreglue>
 8006e04:	4604      	mov	r4, r0
 8006e06:	6030      	str	r0, [r6, #0]
 8006e08:	2800      	cmp	r0, #0
 8006e0a:	d1d5      	bne.n	8006db8 <__sfp+0x24>
 8006e0c:	f7ff ff78 	bl	8006d00 <__sfp_lock_release>
 8006e10:	230c      	movs	r3, #12
 8006e12:	603b      	str	r3, [r7, #0]
 8006e14:	e7ee      	b.n	8006df4 <__sfp+0x60>
 8006e16:	bf00      	nop
 8006e18:	080073c8 	.word	0x080073c8
 8006e1c:	ffff0001 	.word	0xffff0001

08006e20 <_fwalk_reent>:
 8006e20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e24:	4606      	mov	r6, r0
 8006e26:	4688      	mov	r8, r1
 8006e28:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006e2c:	2700      	movs	r7, #0
 8006e2e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006e32:	f1b9 0901 	subs.w	r9, r9, #1
 8006e36:	d505      	bpl.n	8006e44 <_fwalk_reent+0x24>
 8006e38:	6824      	ldr	r4, [r4, #0]
 8006e3a:	2c00      	cmp	r4, #0
 8006e3c:	d1f7      	bne.n	8006e2e <_fwalk_reent+0xe>
 8006e3e:	4638      	mov	r0, r7
 8006e40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e44:	89ab      	ldrh	r3, [r5, #12]
 8006e46:	2b01      	cmp	r3, #1
 8006e48:	d907      	bls.n	8006e5a <_fwalk_reent+0x3a>
 8006e4a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006e4e:	3301      	adds	r3, #1
 8006e50:	d003      	beq.n	8006e5a <_fwalk_reent+0x3a>
 8006e52:	4629      	mov	r1, r5
 8006e54:	4630      	mov	r0, r6
 8006e56:	47c0      	blx	r8
 8006e58:	4307      	orrs	r7, r0
 8006e5a:	3568      	adds	r5, #104	; 0x68
 8006e5c:	e7e9      	b.n	8006e32 <_fwalk_reent+0x12>

08006e5e <__retarget_lock_init_recursive>:
 8006e5e:	4770      	bx	lr

08006e60 <__retarget_lock_acquire_recursive>:
 8006e60:	4770      	bx	lr

08006e62 <__retarget_lock_release_recursive>:
 8006e62:	4770      	bx	lr

08006e64 <__swhatbuf_r>:
 8006e64:	b570      	push	{r4, r5, r6, lr}
 8006e66:	460e      	mov	r6, r1
 8006e68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e6c:	2900      	cmp	r1, #0
 8006e6e:	b096      	sub	sp, #88	; 0x58
 8006e70:	4614      	mov	r4, r2
 8006e72:	461d      	mov	r5, r3
 8006e74:	da07      	bge.n	8006e86 <__swhatbuf_r+0x22>
 8006e76:	2300      	movs	r3, #0
 8006e78:	602b      	str	r3, [r5, #0]
 8006e7a:	89b3      	ldrh	r3, [r6, #12]
 8006e7c:	061a      	lsls	r2, r3, #24
 8006e7e:	d410      	bmi.n	8006ea2 <__swhatbuf_r+0x3e>
 8006e80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e84:	e00e      	b.n	8006ea4 <__swhatbuf_r+0x40>
 8006e86:	466a      	mov	r2, sp
 8006e88:	f000 f970 	bl	800716c <_fstat_r>
 8006e8c:	2800      	cmp	r0, #0
 8006e8e:	dbf2      	blt.n	8006e76 <__swhatbuf_r+0x12>
 8006e90:	9a01      	ldr	r2, [sp, #4]
 8006e92:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006e96:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006e9a:	425a      	negs	r2, r3
 8006e9c:	415a      	adcs	r2, r3
 8006e9e:	602a      	str	r2, [r5, #0]
 8006ea0:	e7ee      	b.n	8006e80 <__swhatbuf_r+0x1c>
 8006ea2:	2340      	movs	r3, #64	; 0x40
 8006ea4:	2000      	movs	r0, #0
 8006ea6:	6023      	str	r3, [r4, #0]
 8006ea8:	b016      	add	sp, #88	; 0x58
 8006eaa:	bd70      	pop	{r4, r5, r6, pc}

08006eac <__smakebuf_r>:
 8006eac:	898b      	ldrh	r3, [r1, #12]
 8006eae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006eb0:	079d      	lsls	r5, r3, #30
 8006eb2:	4606      	mov	r6, r0
 8006eb4:	460c      	mov	r4, r1
 8006eb6:	d507      	bpl.n	8006ec8 <__smakebuf_r+0x1c>
 8006eb8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006ebc:	6023      	str	r3, [r4, #0]
 8006ebe:	6123      	str	r3, [r4, #16]
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	6163      	str	r3, [r4, #20]
 8006ec4:	b002      	add	sp, #8
 8006ec6:	bd70      	pop	{r4, r5, r6, pc}
 8006ec8:	ab01      	add	r3, sp, #4
 8006eca:	466a      	mov	r2, sp
 8006ecc:	f7ff ffca 	bl	8006e64 <__swhatbuf_r>
 8006ed0:	9900      	ldr	r1, [sp, #0]
 8006ed2:	4605      	mov	r5, r0
 8006ed4:	4630      	mov	r0, r6
 8006ed6:	f000 f879 	bl	8006fcc <_malloc_r>
 8006eda:	b948      	cbnz	r0, 8006ef0 <__smakebuf_r+0x44>
 8006edc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ee0:	059a      	lsls	r2, r3, #22
 8006ee2:	d4ef      	bmi.n	8006ec4 <__smakebuf_r+0x18>
 8006ee4:	f023 0303 	bic.w	r3, r3, #3
 8006ee8:	f043 0302 	orr.w	r3, r3, #2
 8006eec:	81a3      	strh	r3, [r4, #12]
 8006eee:	e7e3      	b.n	8006eb8 <__smakebuf_r+0xc>
 8006ef0:	4b0d      	ldr	r3, [pc, #52]	; (8006f28 <__smakebuf_r+0x7c>)
 8006ef2:	62b3      	str	r3, [r6, #40]	; 0x28
 8006ef4:	89a3      	ldrh	r3, [r4, #12]
 8006ef6:	6020      	str	r0, [r4, #0]
 8006ef8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006efc:	81a3      	strh	r3, [r4, #12]
 8006efe:	9b00      	ldr	r3, [sp, #0]
 8006f00:	6163      	str	r3, [r4, #20]
 8006f02:	9b01      	ldr	r3, [sp, #4]
 8006f04:	6120      	str	r0, [r4, #16]
 8006f06:	b15b      	cbz	r3, 8006f20 <__smakebuf_r+0x74>
 8006f08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f0c:	4630      	mov	r0, r6
 8006f0e:	f000 f93f 	bl	8007190 <_isatty_r>
 8006f12:	b128      	cbz	r0, 8006f20 <__smakebuf_r+0x74>
 8006f14:	89a3      	ldrh	r3, [r4, #12]
 8006f16:	f023 0303 	bic.w	r3, r3, #3
 8006f1a:	f043 0301 	orr.w	r3, r3, #1
 8006f1e:	81a3      	strh	r3, [r4, #12]
 8006f20:	89a0      	ldrh	r0, [r4, #12]
 8006f22:	4305      	orrs	r5, r0
 8006f24:	81a5      	strh	r5, [r4, #12]
 8006f26:	e7cd      	b.n	8006ec4 <__smakebuf_r+0x18>
 8006f28:	08006cbd 	.word	0x08006cbd

08006f2c <_free_r>:
 8006f2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006f2e:	2900      	cmp	r1, #0
 8006f30:	d048      	beq.n	8006fc4 <_free_r+0x98>
 8006f32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f36:	9001      	str	r0, [sp, #4]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	f1a1 0404 	sub.w	r4, r1, #4
 8006f3e:	bfb8      	it	lt
 8006f40:	18e4      	addlt	r4, r4, r3
 8006f42:	f000 f947 	bl	80071d4 <__malloc_lock>
 8006f46:	4a20      	ldr	r2, [pc, #128]	; (8006fc8 <_free_r+0x9c>)
 8006f48:	9801      	ldr	r0, [sp, #4]
 8006f4a:	6813      	ldr	r3, [r2, #0]
 8006f4c:	4615      	mov	r5, r2
 8006f4e:	b933      	cbnz	r3, 8006f5e <_free_r+0x32>
 8006f50:	6063      	str	r3, [r4, #4]
 8006f52:	6014      	str	r4, [r2, #0]
 8006f54:	b003      	add	sp, #12
 8006f56:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006f5a:	f000 b941 	b.w	80071e0 <__malloc_unlock>
 8006f5e:	42a3      	cmp	r3, r4
 8006f60:	d90b      	bls.n	8006f7a <_free_r+0x4e>
 8006f62:	6821      	ldr	r1, [r4, #0]
 8006f64:	1862      	adds	r2, r4, r1
 8006f66:	4293      	cmp	r3, r2
 8006f68:	bf04      	itt	eq
 8006f6a:	681a      	ldreq	r2, [r3, #0]
 8006f6c:	685b      	ldreq	r3, [r3, #4]
 8006f6e:	6063      	str	r3, [r4, #4]
 8006f70:	bf04      	itt	eq
 8006f72:	1852      	addeq	r2, r2, r1
 8006f74:	6022      	streq	r2, [r4, #0]
 8006f76:	602c      	str	r4, [r5, #0]
 8006f78:	e7ec      	b.n	8006f54 <_free_r+0x28>
 8006f7a:	461a      	mov	r2, r3
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	b10b      	cbz	r3, 8006f84 <_free_r+0x58>
 8006f80:	42a3      	cmp	r3, r4
 8006f82:	d9fa      	bls.n	8006f7a <_free_r+0x4e>
 8006f84:	6811      	ldr	r1, [r2, #0]
 8006f86:	1855      	adds	r5, r2, r1
 8006f88:	42a5      	cmp	r5, r4
 8006f8a:	d10b      	bne.n	8006fa4 <_free_r+0x78>
 8006f8c:	6824      	ldr	r4, [r4, #0]
 8006f8e:	4421      	add	r1, r4
 8006f90:	1854      	adds	r4, r2, r1
 8006f92:	42a3      	cmp	r3, r4
 8006f94:	6011      	str	r1, [r2, #0]
 8006f96:	d1dd      	bne.n	8006f54 <_free_r+0x28>
 8006f98:	681c      	ldr	r4, [r3, #0]
 8006f9a:	685b      	ldr	r3, [r3, #4]
 8006f9c:	6053      	str	r3, [r2, #4]
 8006f9e:	4421      	add	r1, r4
 8006fa0:	6011      	str	r1, [r2, #0]
 8006fa2:	e7d7      	b.n	8006f54 <_free_r+0x28>
 8006fa4:	d902      	bls.n	8006fac <_free_r+0x80>
 8006fa6:	230c      	movs	r3, #12
 8006fa8:	6003      	str	r3, [r0, #0]
 8006faa:	e7d3      	b.n	8006f54 <_free_r+0x28>
 8006fac:	6825      	ldr	r5, [r4, #0]
 8006fae:	1961      	adds	r1, r4, r5
 8006fb0:	428b      	cmp	r3, r1
 8006fb2:	bf04      	itt	eq
 8006fb4:	6819      	ldreq	r1, [r3, #0]
 8006fb6:	685b      	ldreq	r3, [r3, #4]
 8006fb8:	6063      	str	r3, [r4, #4]
 8006fba:	bf04      	itt	eq
 8006fbc:	1949      	addeq	r1, r1, r5
 8006fbe:	6021      	streq	r1, [r4, #0]
 8006fc0:	6054      	str	r4, [r2, #4]
 8006fc2:	e7c7      	b.n	8006f54 <_free_r+0x28>
 8006fc4:	b003      	add	sp, #12
 8006fc6:	bd30      	pop	{r4, r5, pc}
 8006fc8:	20000248 	.word	0x20000248

08006fcc <_malloc_r>:
 8006fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fce:	1ccd      	adds	r5, r1, #3
 8006fd0:	f025 0503 	bic.w	r5, r5, #3
 8006fd4:	3508      	adds	r5, #8
 8006fd6:	2d0c      	cmp	r5, #12
 8006fd8:	bf38      	it	cc
 8006fda:	250c      	movcc	r5, #12
 8006fdc:	2d00      	cmp	r5, #0
 8006fde:	4606      	mov	r6, r0
 8006fe0:	db01      	blt.n	8006fe6 <_malloc_r+0x1a>
 8006fe2:	42a9      	cmp	r1, r5
 8006fe4:	d903      	bls.n	8006fee <_malloc_r+0x22>
 8006fe6:	230c      	movs	r3, #12
 8006fe8:	6033      	str	r3, [r6, #0]
 8006fea:	2000      	movs	r0, #0
 8006fec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006fee:	f000 f8f1 	bl	80071d4 <__malloc_lock>
 8006ff2:	4921      	ldr	r1, [pc, #132]	; (8007078 <_malloc_r+0xac>)
 8006ff4:	680a      	ldr	r2, [r1, #0]
 8006ff6:	4614      	mov	r4, r2
 8006ff8:	b99c      	cbnz	r4, 8007022 <_malloc_r+0x56>
 8006ffa:	4f20      	ldr	r7, [pc, #128]	; (800707c <_malloc_r+0xb0>)
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	b923      	cbnz	r3, 800700a <_malloc_r+0x3e>
 8007000:	4621      	mov	r1, r4
 8007002:	4630      	mov	r0, r6
 8007004:	f000 f83c 	bl	8007080 <_sbrk_r>
 8007008:	6038      	str	r0, [r7, #0]
 800700a:	4629      	mov	r1, r5
 800700c:	4630      	mov	r0, r6
 800700e:	f000 f837 	bl	8007080 <_sbrk_r>
 8007012:	1c43      	adds	r3, r0, #1
 8007014:	d123      	bne.n	800705e <_malloc_r+0x92>
 8007016:	230c      	movs	r3, #12
 8007018:	6033      	str	r3, [r6, #0]
 800701a:	4630      	mov	r0, r6
 800701c:	f000 f8e0 	bl	80071e0 <__malloc_unlock>
 8007020:	e7e3      	b.n	8006fea <_malloc_r+0x1e>
 8007022:	6823      	ldr	r3, [r4, #0]
 8007024:	1b5b      	subs	r3, r3, r5
 8007026:	d417      	bmi.n	8007058 <_malloc_r+0x8c>
 8007028:	2b0b      	cmp	r3, #11
 800702a:	d903      	bls.n	8007034 <_malloc_r+0x68>
 800702c:	6023      	str	r3, [r4, #0]
 800702e:	441c      	add	r4, r3
 8007030:	6025      	str	r5, [r4, #0]
 8007032:	e004      	b.n	800703e <_malloc_r+0x72>
 8007034:	6863      	ldr	r3, [r4, #4]
 8007036:	42a2      	cmp	r2, r4
 8007038:	bf0c      	ite	eq
 800703a:	600b      	streq	r3, [r1, #0]
 800703c:	6053      	strne	r3, [r2, #4]
 800703e:	4630      	mov	r0, r6
 8007040:	f000 f8ce 	bl	80071e0 <__malloc_unlock>
 8007044:	f104 000b 	add.w	r0, r4, #11
 8007048:	1d23      	adds	r3, r4, #4
 800704a:	f020 0007 	bic.w	r0, r0, #7
 800704e:	1ac2      	subs	r2, r0, r3
 8007050:	d0cc      	beq.n	8006fec <_malloc_r+0x20>
 8007052:	1a1b      	subs	r3, r3, r0
 8007054:	50a3      	str	r3, [r4, r2]
 8007056:	e7c9      	b.n	8006fec <_malloc_r+0x20>
 8007058:	4622      	mov	r2, r4
 800705a:	6864      	ldr	r4, [r4, #4]
 800705c:	e7cc      	b.n	8006ff8 <_malloc_r+0x2c>
 800705e:	1cc4      	adds	r4, r0, #3
 8007060:	f024 0403 	bic.w	r4, r4, #3
 8007064:	42a0      	cmp	r0, r4
 8007066:	d0e3      	beq.n	8007030 <_malloc_r+0x64>
 8007068:	1a21      	subs	r1, r4, r0
 800706a:	4630      	mov	r0, r6
 800706c:	f000 f808 	bl	8007080 <_sbrk_r>
 8007070:	3001      	adds	r0, #1
 8007072:	d1dd      	bne.n	8007030 <_malloc_r+0x64>
 8007074:	e7cf      	b.n	8007016 <_malloc_r+0x4a>
 8007076:	bf00      	nop
 8007078:	20000248 	.word	0x20000248
 800707c:	2000024c 	.word	0x2000024c

08007080 <_sbrk_r>:
 8007080:	b538      	push	{r3, r4, r5, lr}
 8007082:	4d06      	ldr	r5, [pc, #24]	; (800709c <_sbrk_r+0x1c>)
 8007084:	2300      	movs	r3, #0
 8007086:	4604      	mov	r4, r0
 8007088:	4608      	mov	r0, r1
 800708a:	602b      	str	r3, [r5, #0]
 800708c:	f7f9 fca6 	bl	80009dc <_sbrk>
 8007090:	1c43      	adds	r3, r0, #1
 8007092:	d102      	bne.n	800709a <_sbrk_r+0x1a>
 8007094:	682b      	ldr	r3, [r5, #0]
 8007096:	b103      	cbz	r3, 800709a <_sbrk_r+0x1a>
 8007098:	6023      	str	r3, [r4, #0]
 800709a:	bd38      	pop	{r3, r4, r5, pc}
 800709c:	2000075c 	.word	0x2000075c

080070a0 <__sread>:
 80070a0:	b510      	push	{r4, lr}
 80070a2:	460c      	mov	r4, r1
 80070a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070a8:	f000 f8a0 	bl	80071ec <_read_r>
 80070ac:	2800      	cmp	r0, #0
 80070ae:	bfab      	itete	ge
 80070b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80070b2:	89a3      	ldrhlt	r3, [r4, #12]
 80070b4:	181b      	addge	r3, r3, r0
 80070b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80070ba:	bfac      	ite	ge
 80070bc:	6563      	strge	r3, [r4, #84]	; 0x54
 80070be:	81a3      	strhlt	r3, [r4, #12]
 80070c0:	bd10      	pop	{r4, pc}

080070c2 <__swrite>:
 80070c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070c6:	461f      	mov	r7, r3
 80070c8:	898b      	ldrh	r3, [r1, #12]
 80070ca:	05db      	lsls	r3, r3, #23
 80070cc:	4605      	mov	r5, r0
 80070ce:	460c      	mov	r4, r1
 80070d0:	4616      	mov	r6, r2
 80070d2:	d505      	bpl.n	80070e0 <__swrite+0x1e>
 80070d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070d8:	2302      	movs	r3, #2
 80070da:	2200      	movs	r2, #0
 80070dc:	f000 f868 	bl	80071b0 <_lseek_r>
 80070e0:	89a3      	ldrh	r3, [r4, #12]
 80070e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80070e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80070ea:	81a3      	strh	r3, [r4, #12]
 80070ec:	4632      	mov	r2, r6
 80070ee:	463b      	mov	r3, r7
 80070f0:	4628      	mov	r0, r5
 80070f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80070f6:	f000 b817 	b.w	8007128 <_write_r>

080070fa <__sseek>:
 80070fa:	b510      	push	{r4, lr}
 80070fc:	460c      	mov	r4, r1
 80070fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007102:	f000 f855 	bl	80071b0 <_lseek_r>
 8007106:	1c43      	adds	r3, r0, #1
 8007108:	89a3      	ldrh	r3, [r4, #12]
 800710a:	bf15      	itete	ne
 800710c:	6560      	strne	r0, [r4, #84]	; 0x54
 800710e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007112:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007116:	81a3      	strheq	r3, [r4, #12]
 8007118:	bf18      	it	ne
 800711a:	81a3      	strhne	r3, [r4, #12]
 800711c:	bd10      	pop	{r4, pc}

0800711e <__sclose>:
 800711e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007122:	f000 b813 	b.w	800714c <_close_r>
	...

08007128 <_write_r>:
 8007128:	b538      	push	{r3, r4, r5, lr}
 800712a:	4d07      	ldr	r5, [pc, #28]	; (8007148 <_write_r+0x20>)
 800712c:	4604      	mov	r4, r0
 800712e:	4608      	mov	r0, r1
 8007130:	4611      	mov	r1, r2
 8007132:	2200      	movs	r2, #0
 8007134:	602a      	str	r2, [r5, #0]
 8007136:	461a      	mov	r2, r3
 8007138:	f7f9 fbff 	bl	800093a <_write>
 800713c:	1c43      	adds	r3, r0, #1
 800713e:	d102      	bne.n	8007146 <_write_r+0x1e>
 8007140:	682b      	ldr	r3, [r5, #0]
 8007142:	b103      	cbz	r3, 8007146 <_write_r+0x1e>
 8007144:	6023      	str	r3, [r4, #0]
 8007146:	bd38      	pop	{r3, r4, r5, pc}
 8007148:	2000075c 	.word	0x2000075c

0800714c <_close_r>:
 800714c:	b538      	push	{r3, r4, r5, lr}
 800714e:	4d06      	ldr	r5, [pc, #24]	; (8007168 <_close_r+0x1c>)
 8007150:	2300      	movs	r3, #0
 8007152:	4604      	mov	r4, r0
 8007154:	4608      	mov	r0, r1
 8007156:	602b      	str	r3, [r5, #0]
 8007158:	f7f9 fc0b 	bl	8000972 <_close>
 800715c:	1c43      	adds	r3, r0, #1
 800715e:	d102      	bne.n	8007166 <_close_r+0x1a>
 8007160:	682b      	ldr	r3, [r5, #0]
 8007162:	b103      	cbz	r3, 8007166 <_close_r+0x1a>
 8007164:	6023      	str	r3, [r4, #0]
 8007166:	bd38      	pop	{r3, r4, r5, pc}
 8007168:	2000075c 	.word	0x2000075c

0800716c <_fstat_r>:
 800716c:	b538      	push	{r3, r4, r5, lr}
 800716e:	4d07      	ldr	r5, [pc, #28]	; (800718c <_fstat_r+0x20>)
 8007170:	2300      	movs	r3, #0
 8007172:	4604      	mov	r4, r0
 8007174:	4608      	mov	r0, r1
 8007176:	4611      	mov	r1, r2
 8007178:	602b      	str	r3, [r5, #0]
 800717a:	f7f9 fc06 	bl	800098a <_fstat>
 800717e:	1c43      	adds	r3, r0, #1
 8007180:	d102      	bne.n	8007188 <_fstat_r+0x1c>
 8007182:	682b      	ldr	r3, [r5, #0]
 8007184:	b103      	cbz	r3, 8007188 <_fstat_r+0x1c>
 8007186:	6023      	str	r3, [r4, #0]
 8007188:	bd38      	pop	{r3, r4, r5, pc}
 800718a:	bf00      	nop
 800718c:	2000075c 	.word	0x2000075c

08007190 <_isatty_r>:
 8007190:	b538      	push	{r3, r4, r5, lr}
 8007192:	4d06      	ldr	r5, [pc, #24]	; (80071ac <_isatty_r+0x1c>)
 8007194:	2300      	movs	r3, #0
 8007196:	4604      	mov	r4, r0
 8007198:	4608      	mov	r0, r1
 800719a:	602b      	str	r3, [r5, #0]
 800719c:	f7f9 fc05 	bl	80009aa <_isatty>
 80071a0:	1c43      	adds	r3, r0, #1
 80071a2:	d102      	bne.n	80071aa <_isatty_r+0x1a>
 80071a4:	682b      	ldr	r3, [r5, #0]
 80071a6:	b103      	cbz	r3, 80071aa <_isatty_r+0x1a>
 80071a8:	6023      	str	r3, [r4, #0]
 80071aa:	bd38      	pop	{r3, r4, r5, pc}
 80071ac:	2000075c 	.word	0x2000075c

080071b0 <_lseek_r>:
 80071b0:	b538      	push	{r3, r4, r5, lr}
 80071b2:	4d07      	ldr	r5, [pc, #28]	; (80071d0 <_lseek_r+0x20>)
 80071b4:	4604      	mov	r4, r0
 80071b6:	4608      	mov	r0, r1
 80071b8:	4611      	mov	r1, r2
 80071ba:	2200      	movs	r2, #0
 80071bc:	602a      	str	r2, [r5, #0]
 80071be:	461a      	mov	r2, r3
 80071c0:	f7f9 fbfe 	bl	80009c0 <_lseek>
 80071c4:	1c43      	adds	r3, r0, #1
 80071c6:	d102      	bne.n	80071ce <_lseek_r+0x1e>
 80071c8:	682b      	ldr	r3, [r5, #0]
 80071ca:	b103      	cbz	r3, 80071ce <_lseek_r+0x1e>
 80071cc:	6023      	str	r3, [r4, #0]
 80071ce:	bd38      	pop	{r3, r4, r5, pc}
 80071d0:	2000075c 	.word	0x2000075c

080071d4 <__malloc_lock>:
 80071d4:	4801      	ldr	r0, [pc, #4]	; (80071dc <__malloc_lock+0x8>)
 80071d6:	f7ff be43 	b.w	8006e60 <__retarget_lock_acquire_recursive>
 80071da:	bf00      	nop
 80071dc:	20000756 	.word	0x20000756

080071e0 <__malloc_unlock>:
 80071e0:	4801      	ldr	r0, [pc, #4]	; (80071e8 <__malloc_unlock+0x8>)
 80071e2:	f7ff be3e 	b.w	8006e62 <__retarget_lock_release_recursive>
 80071e6:	bf00      	nop
 80071e8:	20000756 	.word	0x20000756

080071ec <_read_r>:
 80071ec:	b538      	push	{r3, r4, r5, lr}
 80071ee:	4d07      	ldr	r5, [pc, #28]	; (800720c <_read_r+0x20>)
 80071f0:	4604      	mov	r4, r0
 80071f2:	4608      	mov	r0, r1
 80071f4:	4611      	mov	r1, r2
 80071f6:	2200      	movs	r2, #0
 80071f8:	602a      	str	r2, [r5, #0]
 80071fa:	461a      	mov	r2, r3
 80071fc:	f7f9 fb80 	bl	8000900 <_read>
 8007200:	1c43      	adds	r3, r0, #1
 8007202:	d102      	bne.n	800720a <_read_r+0x1e>
 8007204:	682b      	ldr	r3, [r5, #0]
 8007206:	b103      	cbz	r3, 800720a <_read_r+0x1e>
 8007208:	6023      	str	r3, [r4, #0]
 800720a:	bd38      	pop	{r3, r4, r5, pc}
 800720c:	2000075c 	.word	0x2000075c

08007210 <_init>:
 8007210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007212:	bf00      	nop
 8007214:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007216:	bc08      	pop	{r3}
 8007218:	469e      	mov	lr, r3
 800721a:	4770      	bx	lr

0800721c <_fini>:
 800721c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800721e:	bf00      	nop
 8007220:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007222:	bc08      	pop	{r3}
 8007224:	469e      	mov	lr, r3
 8007226:	4770      	bx	lr
