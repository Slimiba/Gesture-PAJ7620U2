
Gesture PAJ7620U2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c04  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000364  08007da4  08007da4  00017da4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008108  08008108  00020228  2**0
                  CONTENTS
  4 .ARM          00000000  08008108  08008108  00020228  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008108  08008108  00020228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008108  08008108  00018108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800810c  0800810c  0001810c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000228  20000000  08008110  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000498  20000228  08008338  00020228  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006c0  08008338  000206c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012ba7  00000000  00000000  00020258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000286f  00000000  00000000  00032dff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d50  00000000  00000000  00035670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c58  00000000  00000000  000363c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000227c7  00000000  00000000  00037018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010e73  00000000  00000000  000597df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cbaca  00000000  00000000  0006a652  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013611c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004080  00000000  00000000  00136170  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000228 	.word	0x20000228
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007d8c 	.word	0x08007d8c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000022c 	.word	0x2000022c
 80001dc:	08007d8c 	.word	0x08007d8c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000294:	f000 fbf4 	bl	8000a80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000298:	f000 f814 	bl	80002c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800029c:	f000 f93c 	bl	8000518 <MX_GPIO_Init>
  MX_RTC_Init();
 80002a0:	f000 f8be 	bl	8000420 <MX_RTC_Init>
  MX_USB_PCD_Init();
 80002a4:	f000 f912 	bl	80004cc <MX_USB_PCD_Init>
  MX_I2C1_Init();
 80002a8:	f000 f87a 	bl	80003a0 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 80002ac:	f000 f8de 	bl	800046c <MX_USART3_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay(700);
 80002b0:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 80002b4:	f000 fc4a 	bl	8000b4c <HAL_Delay>
	  initializeRegisters();
 80002b8:	f005 ffe8 	bl	800628c <initializeRegisters>
	  GESTURE_Actions();
 80002bc:	f006 f830 	bl	8006320 <GESTURE_Actions>
	  HAL_Delay(700);
 80002c0:	e7f6      	b.n	80002b0 <main+0x20>
	...

080002c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b0a6      	sub	sp, #152	; 0x98
 80002c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ca:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80002ce:	2228      	movs	r2, #40	; 0x28
 80002d0:	2100      	movs	r1, #0
 80002d2:	4618      	mov	r0, r3
 80002d4:	f006 fbb4 	bl	8006a40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002d8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80002dc:	2200      	movs	r2, #0
 80002de:	601a      	str	r2, [r3, #0]
 80002e0:	605a      	str	r2, [r3, #4]
 80002e2:	609a      	str	r2, [r3, #8]
 80002e4:	60da      	str	r2, [r3, #12]
 80002e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002e8:	1d3b      	adds	r3, r7, #4
 80002ea:	2258      	movs	r2, #88	; 0x58
 80002ec:	2100      	movs	r1, #0
 80002ee:	4618      	mov	r0, r3
 80002f0:	f006 fba6 	bl	8006a40 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 80002f4:	230b      	movs	r3, #11
 80002f6:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80002f8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80002fc:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002fe:	2301      	movs	r3, #1
 8000300:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000302:	2310      	movs	r3, #16
 8000304:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000308:	2301      	movs	r3, #1
 800030a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800030e:	2302      	movs	r3, #2
 8000310:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000314:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000318:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800031c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000320:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000324:	2300      	movs	r3, #0
 8000326:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800032a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800032e:	4618      	mov	r0, r3
 8000330:	f002 fd2e 	bl	8002d90 <HAL_RCC_OscConfig>
 8000334:	4603      	mov	r3, r0
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800033a:	f000 f98f 	bl	800065c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800033e:	230f      	movs	r3, #15
 8000340:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000342:	2302      	movs	r3, #2
 8000344:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000346:	2300      	movs	r3, #0
 8000348:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800034a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800034e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000350:	2300      	movs	r3, #0
 8000352:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000354:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000358:	2102      	movs	r1, #2
 800035a:	4618      	mov	r0, r3
 800035c:	f003 fc2e 	bl	8003bbc <HAL_RCC_ClockConfig>
 8000360:	4603      	mov	r3, r0
 8000362:	2b00      	cmp	r3, #0
 8000364:	d001      	beq.n	800036a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000366:	f000 f979 	bl	800065c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART3
 800036a:	4b0c      	ldr	r3, [pc, #48]	; (800039c <SystemClock_Config+0xd8>)
 800036c:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800036e:	2300      	movs	r3, #0
 8000370:	617b      	str	r3, [r7, #20]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000372:	2300      	movs	r3, #0
 8000374:	623b      	str	r3, [r7, #32]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000376:	f44f 7300 	mov.w	r3, #512	; 0x200
 800037a:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800037c:	2300      	movs	r3, #0
 800037e:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000380:	1d3b      	adds	r3, r7, #4
 8000382:	4618      	mov	r0, r3
 8000384:	f003 fe50 	bl	8004028 <HAL_RCCEx_PeriphCLKConfig>
 8000388:	4603      	mov	r3, r0
 800038a:	2b00      	cmp	r3, #0
 800038c:	d001      	beq.n	8000392 <SystemClock_Config+0xce>
  {
    Error_Handler();
 800038e:	f000 f965 	bl	800065c <Error_Handler>
  }
}
 8000392:	bf00      	nop
 8000394:	3798      	adds	r7, #152	; 0x98
 8000396:	46bd      	mov	sp, r7
 8000398:	bd80      	pop	{r7, pc}
 800039a:	bf00      	nop
 800039c:	00030024 	.word	0x00030024

080003a0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80003a4:	4b1b      	ldr	r3, [pc, #108]	; (8000414 <MX_I2C1_Init+0x74>)
 80003a6:	4a1c      	ldr	r2, [pc, #112]	; (8000418 <MX_I2C1_Init+0x78>)
 80003a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80003aa:	4b1a      	ldr	r3, [pc, #104]	; (8000414 <MX_I2C1_Init+0x74>)
 80003ac:	4a1b      	ldr	r2, [pc, #108]	; (800041c <MX_I2C1_Init+0x7c>)
 80003ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 230;
 80003b0:	4b18      	ldr	r3, [pc, #96]	; (8000414 <MX_I2C1_Init+0x74>)
 80003b2:	22e6      	movs	r2, #230	; 0xe6
 80003b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003b6:	4b17      	ldr	r3, [pc, #92]	; (8000414 <MX_I2C1_Init+0x74>)
 80003b8:	2201      	movs	r2, #1
 80003ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003bc:	4b15      	ldr	r3, [pc, #84]	; (8000414 <MX_I2C1_Init+0x74>)
 80003be:	2200      	movs	r2, #0
 80003c0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80003c2:	4b14      	ldr	r3, [pc, #80]	; (8000414 <MX_I2C1_Init+0x74>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80003c8:	4b12      	ldr	r3, [pc, #72]	; (8000414 <MX_I2C1_Init+0x74>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003ce:	4b11      	ldr	r3, [pc, #68]	; (8000414 <MX_I2C1_Init+0x74>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003d4:	4b0f      	ldr	r3, [pc, #60]	; (8000414 <MX_I2C1_Init+0x74>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80003da:	480e      	ldr	r0, [pc, #56]	; (8000414 <MX_I2C1_Init+0x74>)
 80003dc:	f000 fe8e 	bl	80010fc <HAL_I2C_Init>
 80003e0:	4603      	mov	r3, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d001      	beq.n	80003ea <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80003e6:	f000 f939 	bl	800065c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80003ea:	2100      	movs	r1, #0
 80003ec:	4809      	ldr	r0, [pc, #36]	; (8000414 <MX_I2C1_Init+0x74>)
 80003ee:	f001 fb5f 	bl	8001ab0 <HAL_I2CEx_ConfigAnalogFilter>
 80003f2:	4603      	mov	r3, r0
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d001      	beq.n	80003fc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80003f8:	f000 f930 	bl	800065c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80003fc:	2100      	movs	r1, #0
 80003fe:	4805      	ldr	r0, [pc, #20]	; (8000414 <MX_I2C1_Init+0x74>)
 8000400:	f001 fba1 	bl	8001b46 <HAL_I2CEx_ConfigDigitalFilter>
 8000404:	4603      	mov	r3, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d001      	beq.n	800040e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800040a:	f000 f927 	bl	800065c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800040e:	bf00      	nop
 8000410:	bd80      	pop	{r7, pc}
 8000412:	bf00      	nop
 8000414:	200002d4 	.word	0x200002d4
 8000418:	40005400 	.word	0x40005400
 800041c:	2000090e 	.word	0x2000090e

08000420 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000424:	4b0f      	ldr	r3, [pc, #60]	; (8000464 <MX_RTC_Init+0x44>)
 8000426:	4a10      	ldr	r2, [pc, #64]	; (8000468 <MX_RTC_Init+0x48>)
 8000428:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800042a:	4b0e      	ldr	r3, [pc, #56]	; (8000464 <MX_RTC_Init+0x44>)
 800042c:	2200      	movs	r2, #0
 800042e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000430:	4b0c      	ldr	r3, [pc, #48]	; (8000464 <MX_RTC_Init+0x44>)
 8000432:	227f      	movs	r2, #127	; 0x7f
 8000434:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000436:	4b0b      	ldr	r3, [pc, #44]	; (8000464 <MX_RTC_Init+0x44>)
 8000438:	22ff      	movs	r2, #255	; 0xff
 800043a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800043c:	4b09      	ldr	r3, [pc, #36]	; (8000464 <MX_RTC_Init+0x44>)
 800043e:	2200      	movs	r2, #0
 8000440:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000442:	4b08      	ldr	r3, [pc, #32]	; (8000464 <MX_RTC_Init+0x44>)
 8000444:	2200      	movs	r2, #0
 8000446:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000448:	4b06      	ldr	r3, [pc, #24]	; (8000464 <MX_RTC_Init+0x44>)
 800044a:	2200      	movs	r2, #0
 800044c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800044e:	4805      	ldr	r0, [pc, #20]	; (8000464 <MX_RTC_Init+0x44>)
 8000450:	f004 f808 	bl	8004464 <HAL_RTC_Init>
 8000454:	4603      	mov	r3, r0
 8000456:	2b00      	cmp	r3, #0
 8000458:	d001      	beq.n	800045e <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 800045a:	f000 f8ff 	bl	800065c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800045e:	bf00      	nop
 8000460:	bd80      	pop	{r7, pc}
 8000462:	bf00      	nop
 8000464:	20000320 	.word	0x20000320
 8000468:	40002800 	.word	0x40002800

0800046c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000470:	4b14      	ldr	r3, [pc, #80]	; (80004c4 <MX_USART3_UART_Init+0x58>)
 8000472:	4a15      	ldr	r2, [pc, #84]	; (80004c8 <MX_USART3_UART_Init+0x5c>)
 8000474:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000476:	4b13      	ldr	r3, [pc, #76]	; (80004c4 <MX_USART3_UART_Init+0x58>)
 8000478:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800047c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800047e:	4b11      	ldr	r3, [pc, #68]	; (80004c4 <MX_USART3_UART_Init+0x58>)
 8000480:	2200      	movs	r2, #0
 8000482:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000484:	4b0f      	ldr	r3, [pc, #60]	; (80004c4 <MX_USART3_UART_Init+0x58>)
 8000486:	2200      	movs	r2, #0
 8000488:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800048a:	4b0e      	ldr	r3, [pc, #56]	; (80004c4 <MX_USART3_UART_Init+0x58>)
 800048c:	2200      	movs	r2, #0
 800048e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000490:	4b0c      	ldr	r3, [pc, #48]	; (80004c4 <MX_USART3_UART_Init+0x58>)
 8000492:	220c      	movs	r2, #12
 8000494:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000496:	4b0b      	ldr	r3, [pc, #44]	; (80004c4 <MX_USART3_UART_Init+0x58>)
 8000498:	2200      	movs	r2, #0
 800049a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800049c:	4b09      	ldr	r3, [pc, #36]	; (80004c4 <MX_USART3_UART_Init+0x58>)
 800049e:	2200      	movs	r2, #0
 80004a0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004a2:	4b08      	ldr	r3, [pc, #32]	; (80004c4 <MX_USART3_UART_Init+0x58>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004a8:	4b06      	ldr	r3, [pc, #24]	; (80004c4 <MX_USART3_UART_Init+0x58>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80004ae:	4805      	ldr	r0, [pc, #20]	; (80004c4 <MX_USART3_UART_Init+0x58>)
 80004b0:	f004 f8bd 	bl	800462e <HAL_UART_Init>
 80004b4:	4603      	mov	r3, r0
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80004ba:	f000 f8cf 	bl	800065c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80004be:	bf00      	nop
 80004c0:	bd80      	pop	{r7, pc}
 80004c2:	bf00      	nop
 80004c4:	20000250 	.word	0x20000250
 80004c8:	40004800 	.word	0x40004800

080004cc <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80004d0:	4b0f      	ldr	r3, [pc, #60]	; (8000510 <MX_USB_PCD_Init+0x44>)
 80004d2:	4a10      	ldr	r2, [pc, #64]	; (8000514 <MX_USB_PCD_Init+0x48>)
 80004d4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80004d6:	4b0e      	ldr	r3, [pc, #56]	; (8000510 <MX_USB_PCD_Init+0x44>)
 80004d8:	2208      	movs	r2, #8
 80004da:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80004dc:	4b0c      	ldr	r3, [pc, #48]	; (8000510 <MX_USB_PCD_Init+0x44>)
 80004de:	2202      	movs	r2, #2
 80004e0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80004e2:	4b0b      	ldr	r3, [pc, #44]	; (8000510 <MX_USB_PCD_Init+0x44>)
 80004e4:	2202      	movs	r2, #2
 80004e6:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80004e8:	4b09      	ldr	r3, [pc, #36]	; (8000510 <MX_USB_PCD_Init+0x44>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80004ee:	4b08      	ldr	r3, [pc, #32]	; (8000510 <MX_USB_PCD_Init+0x44>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80004f4:	4b06      	ldr	r3, [pc, #24]	; (8000510 <MX_USB_PCD_Init+0x44>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80004fa:	4805      	ldr	r0, [pc, #20]	; (8000510 <MX_USB_PCD_Init+0x44>)
 80004fc:	f001 fb6f 	bl	8001bde <HAL_PCD_Init>
 8000500:	4603      	mov	r3, r0
 8000502:	2b00      	cmp	r3, #0
 8000504:	d001      	beq.n	800050a <MX_USB_PCD_Init+0x3e>
  {
    Error_Handler();
 8000506:	f000 f8a9 	bl	800065c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 800050a:	bf00      	nop
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	2000038c 	.word	0x2000038c
 8000514:	40005c00 	.word	0x40005c00

08000518 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b08c      	sub	sp, #48	; 0x30
 800051c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800051e:	f107 031c 	add.w	r3, r7, #28
 8000522:	2200      	movs	r2, #0
 8000524:	601a      	str	r2, [r3, #0]
 8000526:	605a      	str	r2, [r3, #4]
 8000528:	609a      	str	r2, [r3, #8]
 800052a:	60da      	str	r2, [r3, #12]
 800052c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800052e:	4b46      	ldr	r3, [pc, #280]	; (8000648 <MX_GPIO_Init+0x130>)
 8000530:	695b      	ldr	r3, [r3, #20]
 8000532:	4a45      	ldr	r2, [pc, #276]	; (8000648 <MX_GPIO_Init+0x130>)
 8000534:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000538:	6153      	str	r3, [r2, #20]
 800053a:	4b43      	ldr	r3, [pc, #268]	; (8000648 <MX_GPIO_Init+0x130>)
 800053c:	695b      	ldr	r3, [r3, #20]
 800053e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000542:	61bb      	str	r3, [r7, #24]
 8000544:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000546:	4b40      	ldr	r3, [pc, #256]	; (8000648 <MX_GPIO_Init+0x130>)
 8000548:	695b      	ldr	r3, [r3, #20]
 800054a:	4a3f      	ldr	r2, [pc, #252]	; (8000648 <MX_GPIO_Init+0x130>)
 800054c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000550:	6153      	str	r3, [r2, #20]
 8000552:	4b3d      	ldr	r3, [pc, #244]	; (8000648 <MX_GPIO_Init+0x130>)
 8000554:	695b      	ldr	r3, [r3, #20]
 8000556:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800055a:	617b      	str	r3, [r7, #20]
 800055c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800055e:	4b3a      	ldr	r3, [pc, #232]	; (8000648 <MX_GPIO_Init+0x130>)
 8000560:	695b      	ldr	r3, [r3, #20]
 8000562:	4a39      	ldr	r2, [pc, #228]	; (8000648 <MX_GPIO_Init+0x130>)
 8000564:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000568:	6153      	str	r3, [r2, #20]
 800056a:	4b37      	ldr	r3, [pc, #220]	; (8000648 <MX_GPIO_Init+0x130>)
 800056c:	695b      	ldr	r3, [r3, #20]
 800056e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000572:	613b      	str	r3, [r7, #16]
 8000574:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000576:	4b34      	ldr	r3, [pc, #208]	; (8000648 <MX_GPIO_Init+0x130>)
 8000578:	695b      	ldr	r3, [r3, #20]
 800057a:	4a33      	ldr	r2, [pc, #204]	; (8000648 <MX_GPIO_Init+0x130>)
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	6153      	str	r3, [r2, #20]
 8000582:	4b31      	ldr	r3, [pc, #196]	; (8000648 <MX_GPIO_Init+0x130>)
 8000584:	695b      	ldr	r3, [r3, #20]
 8000586:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800058a:	60fb      	str	r3, [r7, #12]
 800058c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800058e:	4b2e      	ldr	r3, [pc, #184]	; (8000648 <MX_GPIO_Init+0x130>)
 8000590:	695b      	ldr	r3, [r3, #20]
 8000592:	4a2d      	ldr	r2, [pc, #180]	; (8000648 <MX_GPIO_Init+0x130>)
 8000594:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000598:	6153      	str	r3, [r2, #20]
 800059a:	4b2b      	ldr	r3, [pc, #172]	; (8000648 <MX_GPIO_Init+0x130>)
 800059c:	695b      	ldr	r3, [r3, #20]
 800059e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80005a2:	60bb      	str	r3, [r7, #8]
 80005a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a6:	4b28      	ldr	r3, [pc, #160]	; (8000648 <MX_GPIO_Init+0x130>)
 80005a8:	695b      	ldr	r3, [r3, #20]
 80005aa:	4a27      	ldr	r2, [pc, #156]	; (8000648 <MX_GPIO_Init+0x130>)
 80005ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005b0:	6153      	str	r3, [r2, #20]
 80005b2:	4b25      	ldr	r3, [pc, #148]	; (8000648 <MX_GPIO_Init+0x130>)
 80005b4:	695b      	ldr	r3, [r3, #20]
 80005b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005ba:	607b      	str	r3, [r7, #4]
 80005bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80005be:	2200      	movs	r2, #0
 80005c0:	f244 0181 	movw	r1, #16513	; 0x4081
 80005c4:	4821      	ldr	r0, [pc, #132]	; (800064c <MX_GPIO_Init+0x134>)
 80005c6:	f000 fd81 	bl	80010cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80005ca:	2200      	movs	r2, #0
 80005cc:	2140      	movs	r1, #64	; 0x40
 80005ce:	4820      	ldr	r0, [pc, #128]	; (8000650 <MX_GPIO_Init+0x138>)
 80005d0:	f000 fd7c 	bl	80010cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80005d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005da:	4b1e      	ldr	r3, [pc, #120]	; (8000654 <MX_GPIO_Init+0x13c>)
 80005dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005de:	2300      	movs	r3, #0
 80005e0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80005e2:	f107 031c 	add.w	r3, r7, #28
 80005e6:	4619      	mov	r1, r3
 80005e8:	481b      	ldr	r0, [pc, #108]	; (8000658 <MX_GPIO_Init+0x140>)
 80005ea:	f000 fbe5 	bl	8000db8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80005ee:	f244 0381 	movw	r3, #16513	; 0x4081
 80005f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005f4:	2301      	movs	r3, #1
 80005f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f8:	2300      	movs	r3, #0
 80005fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005fc:	2300      	movs	r3, #0
 80005fe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000600:	f107 031c 	add.w	r3, r7, #28
 8000604:	4619      	mov	r1, r3
 8000606:	4811      	ldr	r0, [pc, #68]	; (800064c <MX_GPIO_Init+0x134>)
 8000608:	f000 fbd6 	bl	8000db8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800060c:	2340      	movs	r3, #64	; 0x40
 800060e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000610:	2301      	movs	r3, #1
 8000612:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000614:	2300      	movs	r3, #0
 8000616:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000618:	2300      	movs	r3, #0
 800061a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800061c:	f107 031c 	add.w	r3, r7, #28
 8000620:	4619      	mov	r1, r3
 8000622:	480b      	ldr	r0, [pc, #44]	; (8000650 <MX_GPIO_Init+0x138>)
 8000624:	f000 fbc8 	bl	8000db8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000628:	2380      	movs	r3, #128	; 0x80
 800062a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800062c:	2300      	movs	r3, #0
 800062e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000630:	2300      	movs	r3, #0
 8000632:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000634:	f107 031c 	add.w	r3, r7, #28
 8000638:	4619      	mov	r1, r3
 800063a:	4805      	ldr	r0, [pc, #20]	; (8000650 <MX_GPIO_Init+0x138>)
 800063c:	f000 fbbc 	bl	8000db8 <HAL_GPIO_Init>

}
 8000640:	bf00      	nop
 8000642:	3730      	adds	r7, #48	; 0x30
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	40021000 	.word	0x40021000
 800064c:	48000400 	.word	0x48000400
 8000650:	48001800 	.word	0x48001800
 8000654:	10110000 	.word	0x10110000
 8000658:	48000800 	.word	0x48000800

0800065c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000660:	b672      	cpsid	i
}
 8000662:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000664:	e7fe      	b.n	8000664 <Error_Handler+0x8>
	...

08000668 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000668:	b480      	push	{r7}
 800066a:	b083      	sub	sp, #12
 800066c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800066e:	4b0f      	ldr	r3, [pc, #60]	; (80006ac <HAL_MspInit+0x44>)
 8000670:	699b      	ldr	r3, [r3, #24]
 8000672:	4a0e      	ldr	r2, [pc, #56]	; (80006ac <HAL_MspInit+0x44>)
 8000674:	f043 0301 	orr.w	r3, r3, #1
 8000678:	6193      	str	r3, [r2, #24]
 800067a:	4b0c      	ldr	r3, [pc, #48]	; (80006ac <HAL_MspInit+0x44>)
 800067c:	699b      	ldr	r3, [r3, #24]
 800067e:	f003 0301 	and.w	r3, r3, #1
 8000682:	607b      	str	r3, [r7, #4]
 8000684:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000686:	4b09      	ldr	r3, [pc, #36]	; (80006ac <HAL_MspInit+0x44>)
 8000688:	69db      	ldr	r3, [r3, #28]
 800068a:	4a08      	ldr	r2, [pc, #32]	; (80006ac <HAL_MspInit+0x44>)
 800068c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000690:	61d3      	str	r3, [r2, #28]
 8000692:	4b06      	ldr	r3, [pc, #24]	; (80006ac <HAL_MspInit+0x44>)
 8000694:	69db      	ldr	r3, [r3, #28]
 8000696:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800069a:	603b      	str	r3, [r7, #0]
 800069c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800069e:	bf00      	nop
 80006a0:	370c      	adds	r7, #12
 80006a2:	46bd      	mov	sp, r7
 80006a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop
 80006ac:	40021000 	.word	0x40021000

080006b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b08a      	sub	sp, #40	; 0x28
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b8:	f107 0314 	add.w	r3, r7, #20
 80006bc:	2200      	movs	r2, #0
 80006be:	601a      	str	r2, [r3, #0]
 80006c0:	605a      	str	r2, [r3, #4]
 80006c2:	609a      	str	r2, [r3, #8]
 80006c4:	60da      	str	r2, [r3, #12]
 80006c6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a17      	ldr	r2, [pc, #92]	; (800072c <HAL_I2C_MspInit+0x7c>)
 80006ce:	4293      	cmp	r3, r2
 80006d0:	d128      	bne.n	8000724 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006d2:	4b17      	ldr	r3, [pc, #92]	; (8000730 <HAL_I2C_MspInit+0x80>)
 80006d4:	695b      	ldr	r3, [r3, #20]
 80006d6:	4a16      	ldr	r2, [pc, #88]	; (8000730 <HAL_I2C_MspInit+0x80>)
 80006d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80006dc:	6153      	str	r3, [r2, #20]
 80006de:	4b14      	ldr	r3, [pc, #80]	; (8000730 <HAL_I2C_MspInit+0x80>)
 80006e0:	695b      	ldr	r3, [r3, #20]
 80006e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80006e6:	613b      	str	r3, [r7, #16]
 80006e8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80006ea:	f44f 7340 	mov.w	r3, #768	; 0x300
 80006ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006f0:	2312      	movs	r3, #18
 80006f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006f4:	2301      	movs	r3, #1
 80006f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006f8:	2303      	movs	r3, #3
 80006fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80006fc:	2304      	movs	r3, #4
 80006fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000700:	f107 0314 	add.w	r3, r7, #20
 8000704:	4619      	mov	r1, r3
 8000706:	480b      	ldr	r0, [pc, #44]	; (8000734 <HAL_I2C_MspInit+0x84>)
 8000708:	f000 fb56 	bl	8000db8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800070c:	4b08      	ldr	r3, [pc, #32]	; (8000730 <HAL_I2C_MspInit+0x80>)
 800070e:	69db      	ldr	r3, [r3, #28]
 8000710:	4a07      	ldr	r2, [pc, #28]	; (8000730 <HAL_I2C_MspInit+0x80>)
 8000712:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000716:	61d3      	str	r3, [r2, #28]
 8000718:	4b05      	ldr	r3, [pc, #20]	; (8000730 <HAL_I2C_MspInit+0x80>)
 800071a:	69db      	ldr	r3, [r3, #28]
 800071c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000720:	60fb      	str	r3, [r7, #12]
 8000722:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000724:	bf00      	nop
 8000726:	3728      	adds	r7, #40	; 0x28
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	40005400 	.word	0x40005400
 8000730:	40021000 	.word	0x40021000
 8000734:	48000400 	.word	0x48000400

08000738 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000738:	b480      	push	{r7}
 800073a:	b085      	sub	sp, #20
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4a0d      	ldr	r2, [pc, #52]	; (800077c <HAL_RTC_MspInit+0x44>)
 8000746:	4293      	cmp	r3, r2
 8000748:	d111      	bne.n	800076e <HAL_RTC_MspInit+0x36>
 800074a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800074e:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	fa93 f3a3 	rbit	r3, r3
 8000756:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000758:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800075a:	fab3 f383 	clz	r3, r3
 800075e:	b2db      	uxtb	r3, r3
 8000760:	461a      	mov	r2, r3
 8000762:	4b07      	ldr	r3, [pc, #28]	; (8000780 <HAL_RTC_MspInit+0x48>)
 8000764:	4413      	add	r3, r2
 8000766:	009b      	lsls	r3, r3, #2
 8000768:	461a      	mov	r2, r3
 800076a:	2301      	movs	r3, #1
 800076c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800076e:	bf00      	nop
 8000770:	3714      	adds	r7, #20
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop
 800077c:	40002800 	.word	0x40002800
 8000780:	10908100 	.word	0x10908100

08000784 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b08a      	sub	sp, #40	; 0x28
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078c:	f107 0314 	add.w	r3, r7, #20
 8000790:	2200      	movs	r2, #0
 8000792:	601a      	str	r2, [r3, #0]
 8000794:	605a      	str	r2, [r3, #4]
 8000796:	609a      	str	r2, [r3, #8]
 8000798:	60da      	str	r2, [r3, #12]
 800079a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4a17      	ldr	r2, [pc, #92]	; (8000800 <HAL_UART_MspInit+0x7c>)
 80007a2:	4293      	cmp	r3, r2
 80007a4:	d128      	bne.n	80007f8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80007a6:	4b17      	ldr	r3, [pc, #92]	; (8000804 <HAL_UART_MspInit+0x80>)
 80007a8:	69db      	ldr	r3, [r3, #28]
 80007aa:	4a16      	ldr	r2, [pc, #88]	; (8000804 <HAL_UART_MspInit+0x80>)
 80007ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80007b0:	61d3      	str	r3, [r2, #28]
 80007b2:	4b14      	ldr	r3, [pc, #80]	; (8000804 <HAL_UART_MspInit+0x80>)
 80007b4:	69db      	ldr	r3, [r3, #28]
 80007b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80007ba:	613b      	str	r3, [r7, #16]
 80007bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80007be:	4b11      	ldr	r3, [pc, #68]	; (8000804 <HAL_UART_MspInit+0x80>)
 80007c0:	695b      	ldr	r3, [r3, #20]
 80007c2:	4a10      	ldr	r2, [pc, #64]	; (8000804 <HAL_UART_MspInit+0x80>)
 80007c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80007c8:	6153      	str	r3, [r2, #20]
 80007ca:	4b0e      	ldr	r3, [pc, #56]	; (8000804 <HAL_UART_MspInit+0x80>)
 80007cc:	695b      	ldr	r3, [r3, #20]
 80007ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80007d2:	60fb      	str	r3, [r7, #12]
 80007d4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80007d6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80007da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007dc:	2302      	movs	r3, #2
 80007de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e0:	2300      	movs	r3, #0
 80007e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007e4:	2303      	movs	r3, #3
 80007e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80007e8:	2307      	movs	r3, #7
 80007ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007ec:	f107 0314 	add.w	r3, r7, #20
 80007f0:	4619      	mov	r1, r3
 80007f2:	4805      	ldr	r0, [pc, #20]	; (8000808 <HAL_UART_MspInit+0x84>)
 80007f4:	f000 fae0 	bl	8000db8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80007f8:	bf00      	nop
 80007fa:	3728      	adds	r7, #40	; 0x28
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	40004800 	.word	0x40004800
 8000804:	40021000 	.word	0x40021000
 8000808:	48000c00 	.word	0x48000c00

0800080c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b084      	sub	sp, #16
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4a0d      	ldr	r2, [pc, #52]	; (8000850 <HAL_PCD_MspInit+0x44>)
 800081a:	4293      	cmp	r3, r2
 800081c:	d113      	bne.n	8000846 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800081e:	4b0d      	ldr	r3, [pc, #52]	; (8000854 <HAL_PCD_MspInit+0x48>)
 8000820:	69db      	ldr	r3, [r3, #28]
 8000822:	4a0c      	ldr	r2, [pc, #48]	; (8000854 <HAL_PCD_MspInit+0x48>)
 8000824:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000828:	61d3      	str	r3, [r2, #28]
 800082a:	4b0a      	ldr	r3, [pc, #40]	; (8000854 <HAL_PCD_MspInit+0x48>)
 800082c:	69db      	ldr	r3, [r3, #28]
 800082e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000832:	60fb      	str	r3, [r7, #12]
 8000834:	68fb      	ldr	r3, [r7, #12]
    /* USB interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 8000836:	2200      	movs	r2, #0
 8000838:	2100      	movs	r1, #0
 800083a:	2014      	movs	r0, #20
 800083c:	f000 fa85 	bl	8000d4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 8000840:	2014      	movs	r0, #20
 8000842:	f000 fa9e 	bl	8000d82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000846:	bf00      	nop
 8000848:	3710      	adds	r7, #16
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	40005c00 	.word	0x40005c00
 8000854:	40021000 	.word	0x40021000

08000858 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800085c:	e7fe      	b.n	800085c <NMI_Handler+0x4>

0800085e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800085e:	b480      	push	{r7}
 8000860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000862:	e7fe      	b.n	8000862 <HardFault_Handler+0x4>

08000864 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000868:	e7fe      	b.n	8000868 <MemManage_Handler+0x4>

0800086a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800086a:	b480      	push	{r7}
 800086c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800086e:	e7fe      	b.n	800086e <BusFault_Handler+0x4>

08000870 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000874:	e7fe      	b.n	8000874 <UsageFault_Handler+0x4>

08000876 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000876:	b480      	push	{r7}
 8000878:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800087a:	bf00      	nop
 800087c:	46bd      	mov	sp, r7
 800087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000882:	4770      	bx	lr

08000884 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000888:	bf00      	nop
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr

08000892 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000892:	b480      	push	{r7}
 8000894:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000896:	bf00      	nop
 8000898:	46bd      	mov	sp, r7
 800089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089e:	4770      	bx	lr

080008a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008a4:	f000 f932 	bl	8000b0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008a8:	bf00      	nop
 80008aa:	bd80      	pop	{r7, pc}

080008ac <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80008b0:	4802      	ldr	r0, [pc, #8]	; (80008bc <USB_LP_CAN_RX0_IRQHandler+0x10>)
 80008b2:	f001 fa72 	bl	8001d9a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 80008b6:	bf00      	nop
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	2000038c 	.word	0x2000038c

080008c0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b086      	sub	sp, #24
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	60f8      	str	r0, [r7, #12]
 80008c8:	60b9      	str	r1, [r7, #8]
 80008ca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008cc:	2300      	movs	r3, #0
 80008ce:	617b      	str	r3, [r7, #20]
 80008d0:	e00a      	b.n	80008e8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80008d2:	f3af 8000 	nop.w
 80008d6:	4601      	mov	r1, r0
 80008d8:	68bb      	ldr	r3, [r7, #8]
 80008da:	1c5a      	adds	r2, r3, #1
 80008dc:	60ba      	str	r2, [r7, #8]
 80008de:	b2ca      	uxtb	r2, r1
 80008e0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008e2:	697b      	ldr	r3, [r7, #20]
 80008e4:	3301      	adds	r3, #1
 80008e6:	617b      	str	r3, [r7, #20]
 80008e8:	697a      	ldr	r2, [r7, #20]
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	429a      	cmp	r2, r3
 80008ee:	dbf0      	blt.n	80008d2 <_read+0x12>
	}

return len;
 80008f0:	687b      	ldr	r3, [r7, #4]
}
 80008f2:	4618      	mov	r0, r3
 80008f4:	3718      	adds	r7, #24
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}

080008fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80008fa:	b580      	push	{r7, lr}
 80008fc:	b086      	sub	sp, #24
 80008fe:	af00      	add	r7, sp, #0
 8000900:	60f8      	str	r0, [r7, #12]
 8000902:	60b9      	str	r1, [r7, #8]
 8000904:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000906:	2300      	movs	r3, #0
 8000908:	617b      	str	r3, [r7, #20]
 800090a:	e009      	b.n	8000920 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800090c:	68bb      	ldr	r3, [r7, #8]
 800090e:	1c5a      	adds	r2, r3, #1
 8000910:	60ba      	str	r2, [r7, #8]
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	4618      	mov	r0, r3
 8000916:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800091a:	697b      	ldr	r3, [r7, #20]
 800091c:	3301      	adds	r3, #1
 800091e:	617b      	str	r3, [r7, #20]
 8000920:	697a      	ldr	r2, [r7, #20]
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	429a      	cmp	r2, r3
 8000926:	dbf1      	blt.n	800090c <_write+0x12>
	}
	return len;
 8000928:	687b      	ldr	r3, [r7, #4]
}
 800092a:	4618      	mov	r0, r3
 800092c:	3718      	adds	r7, #24
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}

08000932 <_close>:

int _close(int file)
{
 8000932:	b480      	push	{r7}
 8000934:	b083      	sub	sp, #12
 8000936:	af00      	add	r7, sp, #0
 8000938:	6078      	str	r0, [r7, #4]
	return -1;
 800093a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800093e:	4618      	mov	r0, r3
 8000940:	370c      	adds	r7, #12
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr

0800094a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800094a:	b480      	push	{r7}
 800094c:	b083      	sub	sp, #12
 800094e:	af00      	add	r7, sp, #0
 8000950:	6078      	str	r0, [r7, #4]
 8000952:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800095a:	605a      	str	r2, [r3, #4]
	return 0;
 800095c:	2300      	movs	r3, #0
}
 800095e:	4618      	mov	r0, r3
 8000960:	370c      	adds	r7, #12
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr

0800096a <_isatty>:

int _isatty(int file)
{
 800096a:	b480      	push	{r7}
 800096c:	b083      	sub	sp, #12
 800096e:	af00      	add	r7, sp, #0
 8000970:	6078      	str	r0, [r7, #4]
	return 1;
 8000972:	2301      	movs	r3, #1
}
 8000974:	4618      	mov	r0, r3
 8000976:	370c      	adds	r7, #12
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr

08000980 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000980:	b480      	push	{r7}
 8000982:	b085      	sub	sp, #20
 8000984:	af00      	add	r7, sp, #0
 8000986:	60f8      	str	r0, [r7, #12]
 8000988:	60b9      	str	r1, [r7, #8]
 800098a:	607a      	str	r2, [r7, #4]
	return 0;
 800098c:	2300      	movs	r3, #0
}
 800098e:	4618      	mov	r0, r3
 8000990:	3714      	adds	r7, #20
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr
	...

0800099c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b086      	sub	sp, #24
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009a4:	4a14      	ldr	r2, [pc, #80]	; (80009f8 <_sbrk+0x5c>)
 80009a6:	4b15      	ldr	r3, [pc, #84]	; (80009fc <_sbrk+0x60>)
 80009a8:	1ad3      	subs	r3, r2, r3
 80009aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009ac:	697b      	ldr	r3, [r7, #20]
 80009ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009b0:	4b13      	ldr	r3, [pc, #76]	; (8000a00 <_sbrk+0x64>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d102      	bne.n	80009be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009b8:	4b11      	ldr	r3, [pc, #68]	; (8000a00 <_sbrk+0x64>)
 80009ba:	4a12      	ldr	r2, [pc, #72]	; (8000a04 <_sbrk+0x68>)
 80009bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009be:	4b10      	ldr	r3, [pc, #64]	; (8000a00 <_sbrk+0x64>)
 80009c0:	681a      	ldr	r2, [r3, #0]
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	4413      	add	r3, r2
 80009c6:	693a      	ldr	r2, [r7, #16]
 80009c8:	429a      	cmp	r2, r3
 80009ca:	d207      	bcs.n	80009dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009cc:	f006 f80e 	bl	80069ec <__errno>
 80009d0:	4603      	mov	r3, r0
 80009d2:	220c      	movs	r2, #12
 80009d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009d6:	f04f 33ff 	mov.w	r3, #4294967295
 80009da:	e009      	b.n	80009f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009dc:	4b08      	ldr	r3, [pc, #32]	; (8000a00 <_sbrk+0x64>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009e2:	4b07      	ldr	r3, [pc, #28]	; (8000a00 <_sbrk+0x64>)
 80009e4:	681a      	ldr	r2, [r3, #0]
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	4413      	add	r3, r2
 80009ea:	4a05      	ldr	r2, [pc, #20]	; (8000a00 <_sbrk+0x64>)
 80009ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009ee:	68fb      	ldr	r3, [r7, #12]
}
 80009f0:	4618      	mov	r0, r3
 80009f2:	3718      	adds	r7, #24
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	20010000 	.word	0x20010000
 80009fc:	00000400 	.word	0x00000400
 8000a00:	20000244 	.word	0x20000244
 8000a04:	200006c0 	.word	0x200006c0

08000a08 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a0c:	4b06      	ldr	r3, [pc, #24]	; (8000a28 <SystemInit+0x20>)
 8000a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a12:	4a05      	ldr	r2, [pc, #20]	; (8000a28 <SystemInit+0x20>)
 8000a14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a1c:	bf00      	nop
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	e000ed00 	.word	0xe000ed00

08000a2c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a64 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a30:	480d      	ldr	r0, [pc, #52]	; (8000a68 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a32:	490e      	ldr	r1, [pc, #56]	; (8000a6c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a34:	4a0e      	ldr	r2, [pc, #56]	; (8000a70 <LoopForever+0xe>)
  movs r3, #0
 8000a36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a38:	e002      	b.n	8000a40 <LoopCopyDataInit>

08000a3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a3e:	3304      	adds	r3, #4

08000a40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a44:	d3f9      	bcc.n	8000a3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a46:	4a0b      	ldr	r2, [pc, #44]	; (8000a74 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a48:	4c0b      	ldr	r4, [pc, #44]	; (8000a78 <LoopForever+0x16>)
  movs r3, #0
 8000a4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a4c:	e001      	b.n	8000a52 <LoopFillZerobss>

08000a4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a50:	3204      	adds	r2, #4

08000a52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a54:	d3fb      	bcc.n	8000a4e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a56:	f7ff ffd7 	bl	8000a08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a5a:	f005 ffcd 	bl	80069f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a5e:	f7ff fc17 	bl	8000290 <main>

08000a62 <LoopForever>:

LoopForever:
    b LoopForever
 8000a62:	e7fe      	b.n	8000a62 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a64:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000a68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a6c:	20000228 	.word	0x20000228
  ldr r2, =_sidata
 8000a70:	08008110 	.word	0x08008110
  ldr r2, =_sbss
 8000a74:	20000228 	.word	0x20000228
  ldr r4, =_ebss
 8000a78:	200006c0 	.word	0x200006c0

08000a7c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a7c:	e7fe      	b.n	8000a7c <ADC1_2_IRQHandler>
	...

08000a80 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a84:	4b08      	ldr	r3, [pc, #32]	; (8000aa8 <HAL_Init+0x28>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a07      	ldr	r2, [pc, #28]	; (8000aa8 <HAL_Init+0x28>)
 8000a8a:	f043 0310 	orr.w	r3, r3, #16
 8000a8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a90:	2003      	movs	r0, #3
 8000a92:	f000 f94f 	bl	8000d34 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a96:	2000      	movs	r0, #0
 8000a98:	f000 f808 	bl	8000aac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a9c:	f7ff fde4 	bl	8000668 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000aa0:	2300      	movs	r3, #0
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	40022000 	.word	0x40022000

08000aac <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ab4:	4b12      	ldr	r3, [pc, #72]	; (8000b00 <HAL_InitTick+0x54>)
 8000ab6:	681a      	ldr	r2, [r3, #0]
 8000ab8:	4b12      	ldr	r3, [pc, #72]	; (8000b04 <HAL_InitTick+0x58>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	4619      	mov	r1, r3
 8000abe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ac2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ac6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aca:	4618      	mov	r0, r3
 8000acc:	f000 f967 	bl	8000d9e <HAL_SYSTICK_Config>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	e00e      	b.n	8000af8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	2b0f      	cmp	r3, #15
 8000ade:	d80a      	bhi.n	8000af6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	6879      	ldr	r1, [r7, #4]
 8000ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae8:	f000 f92f 	bl	8000d4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000aec:	4a06      	ldr	r2, [pc, #24]	; (8000b08 <HAL_InitTick+0x5c>)
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000af2:	2300      	movs	r3, #0
 8000af4:	e000      	b.n	8000af8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000af6:	2301      	movs	r3, #1
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	3708      	adds	r7, #8
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	20000000 	.word	0x20000000
 8000b04:	20000008 	.word	0x20000008
 8000b08:	20000004 	.word	0x20000004

08000b0c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b10:	4b06      	ldr	r3, [pc, #24]	; (8000b2c <HAL_IncTick+0x20>)
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	461a      	mov	r2, r3
 8000b16:	4b06      	ldr	r3, [pc, #24]	; (8000b30 <HAL_IncTick+0x24>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	4413      	add	r3, r2
 8000b1c:	4a04      	ldr	r2, [pc, #16]	; (8000b30 <HAL_IncTick+0x24>)
 8000b1e:	6013      	str	r3, [r2, #0]
}
 8000b20:	bf00      	nop
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	20000008 	.word	0x20000008
 8000b30:	2000067c 	.word	0x2000067c

08000b34 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  return uwTick;  
 8000b38:	4b03      	ldr	r3, [pc, #12]	; (8000b48 <HAL_GetTick+0x14>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	2000067c 	.word	0x2000067c

08000b4c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b084      	sub	sp, #16
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b54:	f7ff ffee 	bl	8000b34 <HAL_GetTick>
 8000b58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b64:	d005      	beq.n	8000b72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b66:	4b0a      	ldr	r3, [pc, #40]	; (8000b90 <HAL_Delay+0x44>)
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	461a      	mov	r2, r3
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	4413      	add	r3, r2
 8000b70:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000b72:	bf00      	nop
 8000b74:	f7ff ffde 	bl	8000b34 <HAL_GetTick>
 8000b78:	4602      	mov	r2, r0
 8000b7a:	68bb      	ldr	r3, [r7, #8]
 8000b7c:	1ad3      	subs	r3, r2, r3
 8000b7e:	68fa      	ldr	r2, [r7, #12]
 8000b80:	429a      	cmp	r2, r3
 8000b82:	d8f7      	bhi.n	8000b74 <HAL_Delay+0x28>
  {
  }
}
 8000b84:	bf00      	nop
 8000b86:	bf00      	nop
 8000b88:	3710      	adds	r7, #16
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	20000008 	.word	0x20000008

08000b94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b085      	sub	sp, #20
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	f003 0307 	and.w	r3, r3, #7
 8000ba2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ba4:	4b0c      	ldr	r3, [pc, #48]	; (8000bd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ba6:	68db      	ldr	r3, [r3, #12]
 8000ba8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000baa:	68ba      	ldr	r2, [r7, #8]
 8000bac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bc6:	4a04      	ldr	r2, [pc, #16]	; (8000bd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	60d3      	str	r3, [r2, #12]
}
 8000bcc:	bf00      	nop
 8000bce:	3714      	adds	r7, #20
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr
 8000bd8:	e000ed00 	.word	0xe000ed00

08000bdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000be0:	4b04      	ldr	r3, [pc, #16]	; (8000bf4 <__NVIC_GetPriorityGrouping+0x18>)
 8000be2:	68db      	ldr	r3, [r3, #12]
 8000be4:	0a1b      	lsrs	r3, r3, #8
 8000be6:	f003 0307 	and.w	r3, r3, #7
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr
 8000bf4:	e000ed00 	.word	0xe000ed00

08000bf8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	4603      	mov	r3, r0
 8000c00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	db0b      	blt.n	8000c22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c0a:	79fb      	ldrb	r3, [r7, #7]
 8000c0c:	f003 021f 	and.w	r2, r3, #31
 8000c10:	4907      	ldr	r1, [pc, #28]	; (8000c30 <__NVIC_EnableIRQ+0x38>)
 8000c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c16:	095b      	lsrs	r3, r3, #5
 8000c18:	2001      	movs	r0, #1
 8000c1a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c22:	bf00      	nop
 8000c24:	370c      	adds	r7, #12
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	e000e100 	.word	0xe000e100

08000c34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	6039      	str	r1, [r7, #0]
 8000c3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	db0a      	blt.n	8000c5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	b2da      	uxtb	r2, r3
 8000c4c:	490c      	ldr	r1, [pc, #48]	; (8000c80 <__NVIC_SetPriority+0x4c>)
 8000c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c52:	0112      	lsls	r2, r2, #4
 8000c54:	b2d2      	uxtb	r2, r2
 8000c56:	440b      	add	r3, r1
 8000c58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c5c:	e00a      	b.n	8000c74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	b2da      	uxtb	r2, r3
 8000c62:	4908      	ldr	r1, [pc, #32]	; (8000c84 <__NVIC_SetPriority+0x50>)
 8000c64:	79fb      	ldrb	r3, [r7, #7]
 8000c66:	f003 030f 	and.w	r3, r3, #15
 8000c6a:	3b04      	subs	r3, #4
 8000c6c:	0112      	lsls	r2, r2, #4
 8000c6e:	b2d2      	uxtb	r2, r2
 8000c70:	440b      	add	r3, r1
 8000c72:	761a      	strb	r2, [r3, #24]
}
 8000c74:	bf00      	nop
 8000c76:	370c      	adds	r7, #12
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr
 8000c80:	e000e100 	.word	0xe000e100
 8000c84:	e000ed00 	.word	0xe000ed00

08000c88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b089      	sub	sp, #36	; 0x24
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	60f8      	str	r0, [r7, #12]
 8000c90:	60b9      	str	r1, [r7, #8]
 8000c92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	f003 0307 	and.w	r3, r3, #7
 8000c9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c9c:	69fb      	ldr	r3, [r7, #28]
 8000c9e:	f1c3 0307 	rsb	r3, r3, #7
 8000ca2:	2b04      	cmp	r3, #4
 8000ca4:	bf28      	it	cs
 8000ca6:	2304      	movcs	r3, #4
 8000ca8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000caa:	69fb      	ldr	r3, [r7, #28]
 8000cac:	3304      	adds	r3, #4
 8000cae:	2b06      	cmp	r3, #6
 8000cb0:	d902      	bls.n	8000cb8 <NVIC_EncodePriority+0x30>
 8000cb2:	69fb      	ldr	r3, [r7, #28]
 8000cb4:	3b03      	subs	r3, #3
 8000cb6:	e000      	b.n	8000cba <NVIC_EncodePriority+0x32>
 8000cb8:	2300      	movs	r3, #0
 8000cba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cbc:	f04f 32ff 	mov.w	r2, #4294967295
 8000cc0:	69bb      	ldr	r3, [r7, #24]
 8000cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc6:	43da      	mvns	r2, r3
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	401a      	ands	r2, r3
 8000ccc:	697b      	ldr	r3, [r7, #20]
 8000cce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cd0:	f04f 31ff 	mov.w	r1, #4294967295
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cda:	43d9      	mvns	r1, r3
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ce0:	4313      	orrs	r3, r2
         );
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3724      	adds	r7, #36	; 0x24
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
	...

08000cf0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	3b01      	subs	r3, #1
 8000cfc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d00:	d301      	bcc.n	8000d06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d02:	2301      	movs	r3, #1
 8000d04:	e00f      	b.n	8000d26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d06:	4a0a      	ldr	r2, [pc, #40]	; (8000d30 <SysTick_Config+0x40>)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	3b01      	subs	r3, #1
 8000d0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d0e:	210f      	movs	r1, #15
 8000d10:	f04f 30ff 	mov.w	r0, #4294967295
 8000d14:	f7ff ff8e 	bl	8000c34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d18:	4b05      	ldr	r3, [pc, #20]	; (8000d30 <SysTick_Config+0x40>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d1e:	4b04      	ldr	r3, [pc, #16]	; (8000d30 <SysTick_Config+0x40>)
 8000d20:	2207      	movs	r2, #7
 8000d22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d24:	2300      	movs	r3, #0
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	3708      	adds	r7, #8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	e000e010 	.word	0xe000e010

08000d34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d3c:	6878      	ldr	r0, [r7, #4]
 8000d3e:	f7ff ff29 	bl	8000b94 <__NVIC_SetPriorityGrouping>
}
 8000d42:	bf00      	nop
 8000d44:	3708      	adds	r7, #8
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}

08000d4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d4a:	b580      	push	{r7, lr}
 8000d4c:	b086      	sub	sp, #24
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	4603      	mov	r3, r0
 8000d52:	60b9      	str	r1, [r7, #8]
 8000d54:	607a      	str	r2, [r7, #4]
 8000d56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d5c:	f7ff ff3e 	bl	8000bdc <__NVIC_GetPriorityGrouping>
 8000d60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d62:	687a      	ldr	r2, [r7, #4]
 8000d64:	68b9      	ldr	r1, [r7, #8]
 8000d66:	6978      	ldr	r0, [r7, #20]
 8000d68:	f7ff ff8e 	bl	8000c88 <NVIC_EncodePriority>
 8000d6c:	4602      	mov	r2, r0
 8000d6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d72:	4611      	mov	r1, r2
 8000d74:	4618      	mov	r0, r3
 8000d76:	f7ff ff5d 	bl	8000c34 <__NVIC_SetPriority>
}
 8000d7a:	bf00      	nop
 8000d7c:	3718      	adds	r7, #24
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b082      	sub	sp, #8
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	4603      	mov	r3, r0
 8000d8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d90:	4618      	mov	r0, r3
 8000d92:	f7ff ff31 	bl	8000bf8 <__NVIC_EnableIRQ>
}
 8000d96:	bf00      	nop
 8000d98:	3708      	adds	r7, #8
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}

08000d9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d9e:	b580      	push	{r7, lr}
 8000da0:	b082      	sub	sp, #8
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000da6:	6878      	ldr	r0, [r7, #4]
 8000da8:	f7ff ffa2 	bl	8000cf0 <SysTick_Config>
 8000dac:	4603      	mov	r3, r0
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
	...

08000db8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b087      	sub	sp, #28
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
 8000dc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dc6:	e160      	b.n	800108a <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	681a      	ldr	r2, [r3, #0]
 8000dcc:	2101      	movs	r1, #1
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	fa01 f303 	lsl.w	r3, r1, r3
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	f000 8152 	beq.w	8001084 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	2b01      	cmp	r3, #1
 8000de6:	d00b      	beq.n	8000e00 <HAL_GPIO_Init+0x48>
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	2b02      	cmp	r3, #2
 8000dee:	d007      	beq.n	8000e00 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000df4:	2b11      	cmp	r3, #17
 8000df6:	d003      	beq.n	8000e00 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	2b12      	cmp	r3, #18
 8000dfe:	d130      	bne.n	8000e62 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	689b      	ldr	r3, [r3, #8]
 8000e04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	005b      	lsls	r3, r3, #1
 8000e0a:	2203      	movs	r2, #3
 8000e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e10:	43db      	mvns	r3, r3
 8000e12:	693a      	ldr	r2, [r7, #16]
 8000e14:	4013      	ands	r3, r2
 8000e16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	68da      	ldr	r2, [r3, #12]
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	005b      	lsls	r3, r3, #1
 8000e20:	fa02 f303 	lsl.w	r3, r2, r3
 8000e24:	693a      	ldr	r2, [r7, #16]
 8000e26:	4313      	orrs	r3, r2
 8000e28:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	693a      	ldr	r2, [r7, #16]
 8000e2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e36:	2201      	movs	r2, #1
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3e:	43db      	mvns	r3, r3
 8000e40:	693a      	ldr	r2, [r7, #16]
 8000e42:	4013      	ands	r3, r2
 8000e44:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	091b      	lsrs	r3, r3, #4
 8000e4c:	f003 0201 	and.w	r2, r3, #1
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	fa02 f303 	lsl.w	r3, r2, r3
 8000e56:	693a      	ldr	r2, [r7, #16]
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	693a      	ldr	r2, [r7, #16]
 8000e60:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	68db      	ldr	r3, [r3, #12]
 8000e66:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	005b      	lsls	r3, r3, #1
 8000e6c:	2203      	movs	r2, #3
 8000e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e72:	43db      	mvns	r3, r3
 8000e74:	693a      	ldr	r2, [r7, #16]
 8000e76:	4013      	ands	r3, r2
 8000e78:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	689a      	ldr	r2, [r3, #8]
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	005b      	lsls	r3, r3, #1
 8000e82:	fa02 f303 	lsl.w	r3, r2, r3
 8000e86:	693a      	ldr	r2, [r7, #16]
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	693a      	ldr	r2, [r7, #16]
 8000e90:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	2b02      	cmp	r3, #2
 8000e98:	d003      	beq.n	8000ea2 <HAL_GPIO_Init+0xea>
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	2b12      	cmp	r3, #18
 8000ea0:	d123      	bne.n	8000eea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	08da      	lsrs	r2, r3, #3
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	3208      	adds	r2, #8
 8000eaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000eae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	f003 0307 	and.w	r3, r3, #7
 8000eb6:	009b      	lsls	r3, r3, #2
 8000eb8:	220f      	movs	r2, #15
 8000eba:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebe:	43db      	mvns	r3, r3
 8000ec0:	693a      	ldr	r2, [r7, #16]
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	691a      	ldr	r2, [r3, #16]
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	f003 0307 	and.w	r3, r3, #7
 8000ed0:	009b      	lsls	r3, r3, #2
 8000ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	08da      	lsrs	r2, r3, #3
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	3208      	adds	r2, #8
 8000ee4:	6939      	ldr	r1, [r7, #16]
 8000ee6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	005b      	lsls	r3, r3, #1
 8000ef4:	2203      	movs	r2, #3
 8000ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8000efa:	43db      	mvns	r3, r3
 8000efc:	693a      	ldr	r2, [r7, #16]
 8000efe:	4013      	ands	r3, r2
 8000f00:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	f003 0203 	and.w	r2, r3, #3
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	005b      	lsls	r3, r3, #1
 8000f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f12:	693a      	ldr	r2, [r7, #16]
 8000f14:	4313      	orrs	r3, r2
 8000f16:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	693a      	ldr	r2, [r7, #16]
 8000f1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	f000 80ac 	beq.w	8001084 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f2c:	4b5e      	ldr	r3, [pc, #376]	; (80010a8 <HAL_GPIO_Init+0x2f0>)
 8000f2e:	699b      	ldr	r3, [r3, #24]
 8000f30:	4a5d      	ldr	r2, [pc, #372]	; (80010a8 <HAL_GPIO_Init+0x2f0>)
 8000f32:	f043 0301 	orr.w	r3, r3, #1
 8000f36:	6193      	str	r3, [r2, #24]
 8000f38:	4b5b      	ldr	r3, [pc, #364]	; (80010a8 <HAL_GPIO_Init+0x2f0>)
 8000f3a:	699b      	ldr	r3, [r3, #24]
 8000f3c:	f003 0301 	and.w	r3, r3, #1
 8000f40:	60bb      	str	r3, [r7, #8]
 8000f42:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f44:	4a59      	ldr	r2, [pc, #356]	; (80010ac <HAL_GPIO_Init+0x2f4>)
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	089b      	lsrs	r3, r3, #2
 8000f4a:	3302      	adds	r3, #2
 8000f4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f50:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	f003 0303 	and.w	r3, r3, #3
 8000f58:	009b      	lsls	r3, r3, #2
 8000f5a:	220f      	movs	r2, #15
 8000f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f60:	43db      	mvns	r3, r3
 8000f62:	693a      	ldr	r2, [r7, #16]
 8000f64:	4013      	ands	r3, r2
 8000f66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f6e:	d025      	beq.n	8000fbc <HAL_GPIO_Init+0x204>
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	4a4f      	ldr	r2, [pc, #316]	; (80010b0 <HAL_GPIO_Init+0x2f8>)
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d01f      	beq.n	8000fb8 <HAL_GPIO_Init+0x200>
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	4a4e      	ldr	r2, [pc, #312]	; (80010b4 <HAL_GPIO_Init+0x2fc>)
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	d019      	beq.n	8000fb4 <HAL_GPIO_Init+0x1fc>
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	4a4d      	ldr	r2, [pc, #308]	; (80010b8 <HAL_GPIO_Init+0x300>)
 8000f84:	4293      	cmp	r3, r2
 8000f86:	d013      	beq.n	8000fb0 <HAL_GPIO_Init+0x1f8>
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	4a4c      	ldr	r2, [pc, #304]	; (80010bc <HAL_GPIO_Init+0x304>)
 8000f8c:	4293      	cmp	r3, r2
 8000f8e:	d00d      	beq.n	8000fac <HAL_GPIO_Init+0x1f4>
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	4a4b      	ldr	r2, [pc, #300]	; (80010c0 <HAL_GPIO_Init+0x308>)
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d007      	beq.n	8000fa8 <HAL_GPIO_Init+0x1f0>
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	4a4a      	ldr	r2, [pc, #296]	; (80010c4 <HAL_GPIO_Init+0x30c>)
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	d101      	bne.n	8000fa4 <HAL_GPIO_Init+0x1ec>
 8000fa0:	2306      	movs	r3, #6
 8000fa2:	e00c      	b.n	8000fbe <HAL_GPIO_Init+0x206>
 8000fa4:	2307      	movs	r3, #7
 8000fa6:	e00a      	b.n	8000fbe <HAL_GPIO_Init+0x206>
 8000fa8:	2305      	movs	r3, #5
 8000faa:	e008      	b.n	8000fbe <HAL_GPIO_Init+0x206>
 8000fac:	2304      	movs	r3, #4
 8000fae:	e006      	b.n	8000fbe <HAL_GPIO_Init+0x206>
 8000fb0:	2303      	movs	r3, #3
 8000fb2:	e004      	b.n	8000fbe <HAL_GPIO_Init+0x206>
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	e002      	b.n	8000fbe <HAL_GPIO_Init+0x206>
 8000fb8:	2301      	movs	r3, #1
 8000fba:	e000      	b.n	8000fbe <HAL_GPIO_Init+0x206>
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	697a      	ldr	r2, [r7, #20]
 8000fc0:	f002 0203 	and.w	r2, r2, #3
 8000fc4:	0092      	lsls	r2, r2, #2
 8000fc6:	4093      	lsls	r3, r2
 8000fc8:	693a      	ldr	r2, [r7, #16]
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000fce:	4937      	ldr	r1, [pc, #220]	; (80010ac <HAL_GPIO_Init+0x2f4>)
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	089b      	lsrs	r3, r3, #2
 8000fd4:	3302      	adds	r3, #2
 8000fd6:	693a      	ldr	r2, [r7, #16]
 8000fd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fdc:	4b3a      	ldr	r3, [pc, #232]	; (80010c8 <HAL_GPIO_Init+0x310>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	43db      	mvns	r3, r3
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	4013      	ands	r3, r2
 8000fea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d003      	beq.n	8001000 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000ff8:	693a      	ldr	r2, [r7, #16]
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001000:	4a31      	ldr	r2, [pc, #196]	; (80010c8 <HAL_GPIO_Init+0x310>)
 8001002:	693b      	ldr	r3, [r7, #16]
 8001004:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001006:	4b30      	ldr	r3, [pc, #192]	; (80010c8 <HAL_GPIO_Init+0x310>)
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	43db      	mvns	r3, r3
 8001010:	693a      	ldr	r2, [r7, #16]
 8001012:	4013      	ands	r3, r2
 8001014:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800101e:	2b00      	cmp	r3, #0
 8001020:	d003      	beq.n	800102a <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001022:	693a      	ldr	r2, [r7, #16]
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	4313      	orrs	r3, r2
 8001028:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800102a:	4a27      	ldr	r2, [pc, #156]	; (80010c8 <HAL_GPIO_Init+0x310>)
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001030:	4b25      	ldr	r3, [pc, #148]	; (80010c8 <HAL_GPIO_Init+0x310>)
 8001032:	689b      	ldr	r3, [r3, #8]
 8001034:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	43db      	mvns	r3, r3
 800103a:	693a      	ldr	r2, [r7, #16]
 800103c:	4013      	ands	r3, r2
 800103e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001048:	2b00      	cmp	r3, #0
 800104a:	d003      	beq.n	8001054 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800104c:	693a      	ldr	r2, [r7, #16]
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	4313      	orrs	r3, r2
 8001052:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001054:	4a1c      	ldr	r2, [pc, #112]	; (80010c8 <HAL_GPIO_Init+0x310>)
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800105a:	4b1b      	ldr	r3, [pc, #108]	; (80010c8 <HAL_GPIO_Init+0x310>)
 800105c:	68db      	ldr	r3, [r3, #12]
 800105e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	43db      	mvns	r3, r3
 8001064:	693a      	ldr	r2, [r7, #16]
 8001066:	4013      	ands	r3, r2
 8001068:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001072:	2b00      	cmp	r3, #0
 8001074:	d003      	beq.n	800107e <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	4313      	orrs	r3, r2
 800107c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800107e:	4a12      	ldr	r2, [pc, #72]	; (80010c8 <HAL_GPIO_Init+0x310>)
 8001080:	693b      	ldr	r3, [r7, #16]
 8001082:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	3301      	adds	r3, #1
 8001088:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	fa22 f303 	lsr.w	r3, r2, r3
 8001094:	2b00      	cmp	r3, #0
 8001096:	f47f ae97 	bne.w	8000dc8 <HAL_GPIO_Init+0x10>
  }
}
 800109a:	bf00      	nop
 800109c:	bf00      	nop
 800109e:	371c      	adds	r7, #28
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr
 80010a8:	40021000 	.word	0x40021000
 80010ac:	40010000 	.word	0x40010000
 80010b0:	48000400 	.word	0x48000400
 80010b4:	48000800 	.word	0x48000800
 80010b8:	48000c00 	.word	0x48000c00
 80010bc:	48001000 	.word	0x48001000
 80010c0:	48001400 	.word	0x48001400
 80010c4:	48001800 	.word	0x48001800
 80010c8:	40010400 	.word	0x40010400

080010cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	460b      	mov	r3, r1
 80010d6:	807b      	strh	r3, [r7, #2]
 80010d8:	4613      	mov	r3, r2
 80010da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010dc:	787b      	ldrb	r3, [r7, #1]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d003      	beq.n	80010ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010e2:	887a      	ldrh	r2, [r7, #2]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80010e8:	e002      	b.n	80010f0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010ea:	887a      	ldrh	r2, [r7, #2]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	629a      	str	r2, [r3, #40]	; 0x28
}
 80010f0:	bf00      	nop
 80010f2:	370c      	adds	r7, #12
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr

080010fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d101      	bne.n	800110e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	e081      	b.n	8001212 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001114:	b2db      	uxtb	r3, r3
 8001116:	2b00      	cmp	r3, #0
 8001118:	d106      	bne.n	8001128 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2200      	movs	r2, #0
 800111e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001122:	6878      	ldr	r0, [r7, #4]
 8001124:	f7ff fac4 	bl	80006b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2224      	movs	r2, #36	; 0x24
 800112c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f022 0201 	bic.w	r2, r2, #1
 800113e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	685a      	ldr	r2, [r3, #4]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800114c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	689a      	ldr	r2, [r3, #8]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800115c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	68db      	ldr	r3, [r3, #12]
 8001162:	2b01      	cmp	r3, #1
 8001164:	d107      	bne.n	8001176 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	689a      	ldr	r2, [r3, #8]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001172:	609a      	str	r2, [r3, #8]
 8001174:	e006      	b.n	8001184 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	689a      	ldr	r2, [r3, #8]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001182:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	68db      	ldr	r3, [r3, #12]
 8001188:	2b02      	cmp	r3, #2
 800118a:	d104      	bne.n	8001196 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001194:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	687a      	ldr	r2, [r7, #4]
 800119e:	6812      	ldr	r2, [r2, #0]
 80011a0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80011a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011a8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	68da      	ldr	r2, [r3, #12]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80011b8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	691a      	ldr	r2, [r3, #16]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	695b      	ldr	r3, [r3, #20]
 80011c2:	ea42 0103 	orr.w	r1, r2, r3
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	699b      	ldr	r3, [r3, #24]
 80011ca:	021a      	lsls	r2, r3, #8
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	430a      	orrs	r2, r1
 80011d2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	69d9      	ldr	r1, [r3, #28]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6a1a      	ldr	r2, [r3, #32]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	430a      	orrs	r2, r1
 80011e2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f042 0201 	orr.w	r2, r2, #1
 80011f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2200      	movs	r2, #0
 80011f8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2220      	movs	r2, #32
 80011fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2200      	movs	r2, #0
 8001206:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2200      	movs	r2, #0
 800120c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001210:	2300      	movs	r3, #0
}
 8001212:	4618      	mov	r0, r3
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
	...

0800121c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b088      	sub	sp, #32
 8001220:	af02      	add	r7, sp, #8
 8001222:	60f8      	str	r0, [r7, #12]
 8001224:	4608      	mov	r0, r1
 8001226:	4611      	mov	r1, r2
 8001228:	461a      	mov	r2, r3
 800122a:	4603      	mov	r3, r0
 800122c:	817b      	strh	r3, [r7, #10]
 800122e:	460b      	mov	r3, r1
 8001230:	813b      	strh	r3, [r7, #8]
 8001232:	4613      	mov	r3, r2
 8001234:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800123c:	b2db      	uxtb	r3, r3
 800123e:	2b20      	cmp	r3, #32
 8001240:	f040 80f9 	bne.w	8001436 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001244:	6a3b      	ldr	r3, [r7, #32]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d002      	beq.n	8001250 <HAL_I2C_Mem_Write+0x34>
 800124a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800124c:	2b00      	cmp	r3, #0
 800124e:	d105      	bne.n	800125c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001256:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001258:	2301      	movs	r3, #1
 800125a:	e0ed      	b.n	8001438 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001262:	2b01      	cmp	r3, #1
 8001264:	d101      	bne.n	800126a <HAL_I2C_Mem_Write+0x4e>
 8001266:	2302      	movs	r3, #2
 8001268:	e0e6      	b.n	8001438 <HAL_I2C_Mem_Write+0x21c>
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	2201      	movs	r2, #1
 800126e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001272:	f7ff fc5f 	bl	8000b34 <HAL_GetTick>
 8001276:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	9300      	str	r3, [sp, #0]
 800127c:	2319      	movs	r3, #25
 800127e:	2201      	movs	r2, #1
 8001280:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001284:	68f8      	ldr	r0, [r7, #12]
 8001286:	f000 fac3 	bl	8001810 <I2C_WaitOnFlagUntilTimeout>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001290:	2301      	movs	r3, #1
 8001292:	e0d1      	b.n	8001438 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	2221      	movs	r2, #33	; 0x21
 8001298:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	2240      	movs	r2, #64	; 0x40
 80012a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	2200      	movs	r2, #0
 80012a8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	6a3a      	ldr	r2, [r7, #32]
 80012ae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80012b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	2200      	movs	r2, #0
 80012ba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80012bc:	88f8      	ldrh	r0, [r7, #6]
 80012be:	893a      	ldrh	r2, [r7, #8]
 80012c0:	8979      	ldrh	r1, [r7, #10]
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	9301      	str	r3, [sp, #4]
 80012c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012c8:	9300      	str	r3, [sp, #0]
 80012ca:	4603      	mov	r3, r0
 80012cc:	68f8      	ldr	r0, [r7, #12]
 80012ce:	f000 f9d3 	bl	8001678 <I2C_RequestMemoryWrite>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d005      	beq.n	80012e4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	2200      	movs	r2, #0
 80012dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80012e0:	2301      	movs	r3, #1
 80012e2:	e0a9      	b.n	8001438 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012e8:	b29b      	uxth	r3, r3
 80012ea:	2bff      	cmp	r3, #255	; 0xff
 80012ec:	d90e      	bls.n	800130c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	22ff      	movs	r2, #255	; 0xff
 80012f2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012f8:	b2da      	uxtb	r2, r3
 80012fa:	8979      	ldrh	r1, [r7, #10]
 80012fc:	2300      	movs	r3, #0
 80012fe:	9300      	str	r3, [sp, #0]
 8001300:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001304:	68f8      	ldr	r0, [r7, #12]
 8001306:	f000 fba5 	bl	8001a54 <I2C_TransferConfig>
 800130a:	e00f      	b.n	800132c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001310:	b29a      	uxth	r2, r3
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800131a:	b2da      	uxtb	r2, r3
 800131c:	8979      	ldrh	r1, [r7, #10]
 800131e:	2300      	movs	r3, #0
 8001320:	9300      	str	r3, [sp, #0]
 8001322:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001326:	68f8      	ldr	r0, [r7, #12]
 8001328:	f000 fb94 	bl	8001a54 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800132c:	697a      	ldr	r2, [r7, #20]
 800132e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001330:	68f8      	ldr	r0, [r7, #12]
 8001332:	f000 faad 	bl	8001890 <I2C_WaitOnTXISFlagUntilTimeout>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800133c:	2301      	movs	r3, #1
 800133e:	e07b      	b.n	8001438 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001344:	781a      	ldrb	r2, [r3, #0]
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001350:	1c5a      	adds	r2, r3, #1
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800135a:	b29b      	uxth	r3, r3
 800135c:	3b01      	subs	r3, #1
 800135e:	b29a      	uxth	r2, r3
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001368:	3b01      	subs	r3, #1
 800136a:	b29a      	uxth	r2, r3
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001374:	b29b      	uxth	r3, r3
 8001376:	2b00      	cmp	r3, #0
 8001378:	d034      	beq.n	80013e4 <HAL_I2C_Mem_Write+0x1c8>
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800137e:	2b00      	cmp	r3, #0
 8001380:	d130      	bne.n	80013e4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	9300      	str	r3, [sp, #0]
 8001386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001388:	2200      	movs	r2, #0
 800138a:	2180      	movs	r1, #128	; 0x80
 800138c:	68f8      	ldr	r0, [r7, #12]
 800138e:	f000 fa3f 	bl	8001810 <I2C_WaitOnFlagUntilTimeout>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001398:	2301      	movs	r3, #1
 800139a:	e04d      	b.n	8001438 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013a0:	b29b      	uxth	r3, r3
 80013a2:	2bff      	cmp	r3, #255	; 0xff
 80013a4:	d90e      	bls.n	80013c4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	22ff      	movs	r2, #255	; 0xff
 80013aa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013b0:	b2da      	uxtb	r2, r3
 80013b2:	8979      	ldrh	r1, [r7, #10]
 80013b4:	2300      	movs	r3, #0
 80013b6:	9300      	str	r3, [sp, #0]
 80013b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80013bc:	68f8      	ldr	r0, [r7, #12]
 80013be:	f000 fb49 	bl	8001a54 <I2C_TransferConfig>
 80013c2:	e00f      	b.n	80013e4 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013c8:	b29a      	uxth	r2, r3
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013d2:	b2da      	uxtb	r2, r3
 80013d4:	8979      	ldrh	r1, [r7, #10]
 80013d6:	2300      	movs	r3, #0
 80013d8:	9300      	str	r3, [sp, #0]
 80013da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80013de:	68f8      	ldr	r0, [r7, #12]
 80013e0:	f000 fb38 	bl	8001a54 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013e8:	b29b      	uxth	r3, r3
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d19e      	bne.n	800132c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80013ee:	697a      	ldr	r2, [r7, #20]
 80013f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80013f2:	68f8      	ldr	r0, [r7, #12]
 80013f4:	f000 fa8c 	bl	8001910 <I2C_WaitOnSTOPFlagUntilTimeout>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
 8001400:	e01a      	b.n	8001438 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	2220      	movs	r2, #32
 8001408:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	6859      	ldr	r1, [r3, #4]
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	4b0a      	ldr	r3, [pc, #40]	; (8001440 <HAL_I2C_Mem_Write+0x224>)
 8001416:	400b      	ands	r3, r1
 8001418:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	2220      	movs	r2, #32
 800141e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	2200      	movs	r2, #0
 8001426:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	2200      	movs	r2, #0
 800142e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001432:	2300      	movs	r3, #0
 8001434:	e000      	b.n	8001438 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001436:	2302      	movs	r3, #2
  }
}
 8001438:	4618      	mov	r0, r3
 800143a:	3718      	adds	r7, #24
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	fe00e800 	.word	0xfe00e800

08001444 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b088      	sub	sp, #32
 8001448:	af02      	add	r7, sp, #8
 800144a:	60f8      	str	r0, [r7, #12]
 800144c:	4608      	mov	r0, r1
 800144e:	4611      	mov	r1, r2
 8001450:	461a      	mov	r2, r3
 8001452:	4603      	mov	r3, r0
 8001454:	817b      	strh	r3, [r7, #10]
 8001456:	460b      	mov	r3, r1
 8001458:	813b      	strh	r3, [r7, #8]
 800145a:	4613      	mov	r3, r2
 800145c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001464:	b2db      	uxtb	r3, r3
 8001466:	2b20      	cmp	r3, #32
 8001468:	f040 80fd 	bne.w	8001666 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800146c:	6a3b      	ldr	r3, [r7, #32]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d002      	beq.n	8001478 <HAL_I2C_Mem_Read+0x34>
 8001472:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001474:	2b00      	cmp	r3, #0
 8001476:	d105      	bne.n	8001484 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800147e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001480:	2301      	movs	r3, #1
 8001482:	e0f1      	b.n	8001668 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800148a:	2b01      	cmp	r3, #1
 800148c:	d101      	bne.n	8001492 <HAL_I2C_Mem_Read+0x4e>
 800148e:	2302      	movs	r3, #2
 8001490:	e0ea      	b.n	8001668 <HAL_I2C_Mem_Read+0x224>
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	2201      	movs	r2, #1
 8001496:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800149a:	f7ff fb4b 	bl	8000b34 <HAL_GetTick>
 800149e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	9300      	str	r3, [sp, #0]
 80014a4:	2319      	movs	r3, #25
 80014a6:	2201      	movs	r2, #1
 80014a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014ac:	68f8      	ldr	r0, [r7, #12]
 80014ae:	f000 f9af 	bl	8001810 <I2C_WaitOnFlagUntilTimeout>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80014b8:	2301      	movs	r3, #1
 80014ba:	e0d5      	b.n	8001668 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	2222      	movs	r2, #34	; 0x22
 80014c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	2240      	movs	r2, #64	; 0x40
 80014c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	2200      	movs	r2, #0
 80014d0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	6a3a      	ldr	r2, [r7, #32]
 80014d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80014dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	2200      	movs	r2, #0
 80014e2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80014e4:	88f8      	ldrh	r0, [r7, #6]
 80014e6:	893a      	ldrh	r2, [r7, #8]
 80014e8:	8979      	ldrh	r1, [r7, #10]
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	9301      	str	r3, [sp, #4]
 80014ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014f0:	9300      	str	r3, [sp, #0]
 80014f2:	4603      	mov	r3, r0
 80014f4:	68f8      	ldr	r0, [r7, #12]
 80014f6:	f000 f913 	bl	8001720 <I2C_RequestMemoryRead>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d005      	beq.n	800150c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	2200      	movs	r2, #0
 8001504:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001508:	2301      	movs	r3, #1
 800150a:	e0ad      	b.n	8001668 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001510:	b29b      	uxth	r3, r3
 8001512:	2bff      	cmp	r3, #255	; 0xff
 8001514:	d90e      	bls.n	8001534 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	22ff      	movs	r2, #255	; 0xff
 800151a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001520:	b2da      	uxtb	r2, r3
 8001522:	8979      	ldrh	r1, [r7, #10]
 8001524:	4b52      	ldr	r3, [pc, #328]	; (8001670 <HAL_I2C_Mem_Read+0x22c>)
 8001526:	9300      	str	r3, [sp, #0]
 8001528:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800152c:	68f8      	ldr	r0, [r7, #12]
 800152e:	f000 fa91 	bl	8001a54 <I2C_TransferConfig>
 8001532:	e00f      	b.n	8001554 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001538:	b29a      	uxth	r2, r3
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001542:	b2da      	uxtb	r2, r3
 8001544:	8979      	ldrh	r1, [r7, #10]
 8001546:	4b4a      	ldr	r3, [pc, #296]	; (8001670 <HAL_I2C_Mem_Read+0x22c>)
 8001548:	9300      	str	r3, [sp, #0]
 800154a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800154e:	68f8      	ldr	r0, [r7, #12]
 8001550:	f000 fa80 	bl	8001a54 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	9300      	str	r3, [sp, #0]
 8001558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800155a:	2200      	movs	r2, #0
 800155c:	2104      	movs	r1, #4
 800155e:	68f8      	ldr	r0, [r7, #12]
 8001560:	f000 f956 	bl	8001810 <I2C_WaitOnFlagUntilTimeout>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	e07c      	b.n	8001668 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001578:	b2d2      	uxtb	r2, r2
 800157a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001580:	1c5a      	adds	r2, r3, #1
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800158a:	3b01      	subs	r3, #1
 800158c:	b29a      	uxth	r2, r3
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001596:	b29b      	uxth	r3, r3
 8001598:	3b01      	subs	r3, #1
 800159a:	b29a      	uxth	r2, r3
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015a4:	b29b      	uxth	r3, r3
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d034      	beq.n	8001614 <HAL_I2C_Mem_Read+0x1d0>
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d130      	bne.n	8001614 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	9300      	str	r3, [sp, #0]
 80015b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015b8:	2200      	movs	r2, #0
 80015ba:	2180      	movs	r1, #128	; 0x80
 80015bc:	68f8      	ldr	r0, [r7, #12]
 80015be:	f000 f927 	bl	8001810 <I2C_WaitOnFlagUntilTimeout>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	e04d      	b.n	8001668 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015d0:	b29b      	uxth	r3, r3
 80015d2:	2bff      	cmp	r3, #255	; 0xff
 80015d4:	d90e      	bls.n	80015f4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	22ff      	movs	r2, #255	; 0xff
 80015da:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015e0:	b2da      	uxtb	r2, r3
 80015e2:	8979      	ldrh	r1, [r7, #10]
 80015e4:	2300      	movs	r3, #0
 80015e6:	9300      	str	r3, [sp, #0]
 80015e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80015ec:	68f8      	ldr	r0, [r7, #12]
 80015ee:	f000 fa31 	bl	8001a54 <I2C_TransferConfig>
 80015f2:	e00f      	b.n	8001614 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015f8:	b29a      	uxth	r2, r3
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001602:	b2da      	uxtb	r2, r3
 8001604:	8979      	ldrh	r1, [r7, #10]
 8001606:	2300      	movs	r3, #0
 8001608:	9300      	str	r3, [sp, #0]
 800160a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800160e:	68f8      	ldr	r0, [r7, #12]
 8001610:	f000 fa20 	bl	8001a54 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001618:	b29b      	uxth	r3, r3
 800161a:	2b00      	cmp	r3, #0
 800161c:	d19a      	bne.n	8001554 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800161e:	697a      	ldr	r2, [r7, #20]
 8001620:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001622:	68f8      	ldr	r0, [r7, #12]
 8001624:	f000 f974 	bl	8001910 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	e01a      	b.n	8001668 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	2220      	movs	r2, #32
 8001638:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	6859      	ldr	r1, [r3, #4]
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	4b0b      	ldr	r3, [pc, #44]	; (8001674 <HAL_I2C_Mem_Read+0x230>)
 8001646:	400b      	ands	r3, r1
 8001648:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	2220      	movs	r2, #32
 800164e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	2200      	movs	r2, #0
 8001656:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	2200      	movs	r2, #0
 800165e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001662:	2300      	movs	r3, #0
 8001664:	e000      	b.n	8001668 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8001666:	2302      	movs	r3, #2
  }
}
 8001668:	4618      	mov	r0, r3
 800166a:	3718      	adds	r7, #24
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	80002400 	.word	0x80002400
 8001674:	fe00e800 	.word	0xfe00e800

08001678 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b086      	sub	sp, #24
 800167c:	af02      	add	r7, sp, #8
 800167e:	60f8      	str	r0, [r7, #12]
 8001680:	4608      	mov	r0, r1
 8001682:	4611      	mov	r1, r2
 8001684:	461a      	mov	r2, r3
 8001686:	4603      	mov	r3, r0
 8001688:	817b      	strh	r3, [r7, #10]
 800168a:	460b      	mov	r3, r1
 800168c:	813b      	strh	r3, [r7, #8]
 800168e:	4613      	mov	r3, r2
 8001690:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001692:	88fb      	ldrh	r3, [r7, #6]
 8001694:	b2da      	uxtb	r2, r3
 8001696:	8979      	ldrh	r1, [r7, #10]
 8001698:	4b20      	ldr	r3, [pc, #128]	; (800171c <I2C_RequestMemoryWrite+0xa4>)
 800169a:	9300      	str	r3, [sp, #0]
 800169c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80016a0:	68f8      	ldr	r0, [r7, #12]
 80016a2:	f000 f9d7 	bl	8001a54 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80016a6:	69fa      	ldr	r2, [r7, #28]
 80016a8:	69b9      	ldr	r1, [r7, #24]
 80016aa:	68f8      	ldr	r0, [r7, #12]
 80016ac:	f000 f8f0 	bl	8001890 <I2C_WaitOnTXISFlagUntilTimeout>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	e02c      	b.n	8001714 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80016ba:	88fb      	ldrh	r3, [r7, #6]
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d105      	bne.n	80016cc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80016c0:	893b      	ldrh	r3, [r7, #8]
 80016c2:	b2da      	uxtb	r2, r3
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	629a      	str	r2, [r3, #40]	; 0x28
 80016ca:	e015      	b.n	80016f8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80016cc:	893b      	ldrh	r3, [r7, #8]
 80016ce:	0a1b      	lsrs	r3, r3, #8
 80016d0:	b29b      	uxth	r3, r3
 80016d2:	b2da      	uxtb	r2, r3
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80016da:	69fa      	ldr	r2, [r7, #28]
 80016dc:	69b9      	ldr	r1, [r7, #24]
 80016de:	68f8      	ldr	r0, [r7, #12]
 80016e0:	f000 f8d6 	bl	8001890 <I2C_WaitOnTXISFlagUntilTimeout>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e012      	b.n	8001714 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80016ee:	893b      	ldrh	r3, [r7, #8]
 80016f0:	b2da      	uxtb	r2, r3
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80016f8:	69fb      	ldr	r3, [r7, #28]
 80016fa:	9300      	str	r3, [sp, #0]
 80016fc:	69bb      	ldr	r3, [r7, #24]
 80016fe:	2200      	movs	r2, #0
 8001700:	2180      	movs	r1, #128	; 0x80
 8001702:	68f8      	ldr	r0, [r7, #12]
 8001704:	f000 f884 	bl	8001810 <I2C_WaitOnFlagUntilTimeout>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e000      	b.n	8001714 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8001712:	2300      	movs	r3, #0
}
 8001714:	4618      	mov	r0, r3
 8001716:	3710      	adds	r7, #16
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	80002000 	.word	0x80002000

08001720 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b086      	sub	sp, #24
 8001724:	af02      	add	r7, sp, #8
 8001726:	60f8      	str	r0, [r7, #12]
 8001728:	4608      	mov	r0, r1
 800172a:	4611      	mov	r1, r2
 800172c:	461a      	mov	r2, r3
 800172e:	4603      	mov	r3, r0
 8001730:	817b      	strh	r3, [r7, #10]
 8001732:	460b      	mov	r3, r1
 8001734:	813b      	strh	r3, [r7, #8]
 8001736:	4613      	mov	r3, r2
 8001738:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800173a:	88fb      	ldrh	r3, [r7, #6]
 800173c:	b2da      	uxtb	r2, r3
 800173e:	8979      	ldrh	r1, [r7, #10]
 8001740:	4b20      	ldr	r3, [pc, #128]	; (80017c4 <I2C_RequestMemoryRead+0xa4>)
 8001742:	9300      	str	r3, [sp, #0]
 8001744:	2300      	movs	r3, #0
 8001746:	68f8      	ldr	r0, [r7, #12]
 8001748:	f000 f984 	bl	8001a54 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800174c:	69fa      	ldr	r2, [r7, #28]
 800174e:	69b9      	ldr	r1, [r7, #24]
 8001750:	68f8      	ldr	r0, [r7, #12]
 8001752:	f000 f89d 	bl	8001890 <I2C_WaitOnTXISFlagUntilTimeout>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e02c      	b.n	80017ba <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001760:	88fb      	ldrh	r3, [r7, #6]
 8001762:	2b01      	cmp	r3, #1
 8001764:	d105      	bne.n	8001772 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001766:	893b      	ldrh	r3, [r7, #8]
 8001768:	b2da      	uxtb	r2, r3
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	629a      	str	r2, [r3, #40]	; 0x28
 8001770:	e015      	b.n	800179e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001772:	893b      	ldrh	r3, [r7, #8]
 8001774:	0a1b      	lsrs	r3, r3, #8
 8001776:	b29b      	uxth	r3, r3
 8001778:	b2da      	uxtb	r2, r3
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001780:	69fa      	ldr	r2, [r7, #28]
 8001782:	69b9      	ldr	r1, [r7, #24]
 8001784:	68f8      	ldr	r0, [r7, #12]
 8001786:	f000 f883 	bl	8001890 <I2C_WaitOnTXISFlagUntilTimeout>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d001      	beq.n	8001794 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	e012      	b.n	80017ba <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001794:	893b      	ldrh	r3, [r7, #8]
 8001796:	b2da      	uxtb	r2, r3
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	9300      	str	r3, [sp, #0]
 80017a2:	69bb      	ldr	r3, [r7, #24]
 80017a4:	2200      	movs	r2, #0
 80017a6:	2140      	movs	r1, #64	; 0x40
 80017a8:	68f8      	ldr	r0, [r7, #12]
 80017aa:	f000 f831 	bl	8001810 <I2C_WaitOnFlagUntilTimeout>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	e000      	b.n	80017ba <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80017b8:	2300      	movs	r3, #0
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3710      	adds	r7, #16
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	80002000 	.word	0x80002000

080017c8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	699b      	ldr	r3, [r3, #24]
 80017d6:	f003 0302 	and.w	r3, r3, #2
 80017da:	2b02      	cmp	r3, #2
 80017dc:	d103      	bne.n	80017e6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	2200      	movs	r2, #0
 80017e4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	699b      	ldr	r3, [r3, #24]
 80017ec:	f003 0301 	and.w	r3, r3, #1
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d007      	beq.n	8001804 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	699a      	ldr	r2, [r3, #24]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f042 0201 	orr.w	r2, r2, #1
 8001802:	619a      	str	r2, [r3, #24]
  }
}
 8001804:	bf00      	nop
 8001806:	370c      	adds	r7, #12
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr

08001810 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b084      	sub	sp, #16
 8001814:	af00      	add	r7, sp, #0
 8001816:	60f8      	str	r0, [r7, #12]
 8001818:	60b9      	str	r1, [r7, #8]
 800181a:	603b      	str	r3, [r7, #0]
 800181c:	4613      	mov	r3, r2
 800181e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001820:	e022      	b.n	8001868 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001828:	d01e      	beq.n	8001868 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800182a:	f7ff f983 	bl	8000b34 <HAL_GetTick>
 800182e:	4602      	mov	r2, r0
 8001830:	69bb      	ldr	r3, [r7, #24]
 8001832:	1ad3      	subs	r3, r2, r3
 8001834:	683a      	ldr	r2, [r7, #0]
 8001836:	429a      	cmp	r2, r3
 8001838:	d302      	bcc.n	8001840 <I2C_WaitOnFlagUntilTimeout+0x30>
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d113      	bne.n	8001868 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001844:	f043 0220 	orr.w	r2, r3, #32
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	2220      	movs	r2, #32
 8001850:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	2200      	movs	r2, #0
 8001858:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	2200      	movs	r2, #0
 8001860:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	e00f      	b.n	8001888 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	699a      	ldr	r2, [r3, #24]
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	4013      	ands	r3, r2
 8001872:	68ba      	ldr	r2, [r7, #8]
 8001874:	429a      	cmp	r2, r3
 8001876:	bf0c      	ite	eq
 8001878:	2301      	moveq	r3, #1
 800187a:	2300      	movne	r3, #0
 800187c:	b2db      	uxtb	r3, r3
 800187e:	461a      	mov	r2, r3
 8001880:	79fb      	ldrb	r3, [r7, #7]
 8001882:	429a      	cmp	r2, r3
 8001884:	d0cd      	beq.n	8001822 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001886:	2300      	movs	r3, #0
}
 8001888:	4618      	mov	r0, r3
 800188a:	3710      	adds	r7, #16
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}

08001890 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b084      	sub	sp, #16
 8001894:	af00      	add	r7, sp, #0
 8001896:	60f8      	str	r0, [r7, #12]
 8001898:	60b9      	str	r1, [r7, #8]
 800189a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800189c:	e02c      	b.n	80018f8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800189e:	687a      	ldr	r2, [r7, #4]
 80018a0:	68b9      	ldr	r1, [r7, #8]
 80018a2:	68f8      	ldr	r0, [r7, #12]
 80018a4:	f000 f870 	bl	8001988 <I2C_IsAcknowledgeFailed>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d001      	beq.n	80018b2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e02a      	b.n	8001908 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018b8:	d01e      	beq.n	80018f8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018ba:	f7ff f93b 	bl	8000b34 <HAL_GetTick>
 80018be:	4602      	mov	r2, r0
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	1ad3      	subs	r3, r2, r3
 80018c4:	68ba      	ldr	r2, [r7, #8]
 80018c6:	429a      	cmp	r2, r3
 80018c8:	d302      	bcc.n	80018d0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d113      	bne.n	80018f8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d4:	f043 0220 	orr.w	r2, r3, #32
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	2220      	movs	r2, #32
 80018e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	2200      	movs	r2, #0
 80018e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	2200      	movs	r2, #0
 80018f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	e007      	b.n	8001908 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	699b      	ldr	r3, [r3, #24]
 80018fe:	f003 0302 	and.w	r3, r3, #2
 8001902:	2b02      	cmp	r3, #2
 8001904:	d1cb      	bne.n	800189e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001906:	2300      	movs	r3, #0
}
 8001908:	4618      	mov	r0, r3
 800190a:	3710      	adds	r7, #16
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}

08001910 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0
 8001916:	60f8      	str	r0, [r7, #12]
 8001918:	60b9      	str	r1, [r7, #8]
 800191a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800191c:	e028      	b.n	8001970 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800191e:	687a      	ldr	r2, [r7, #4]
 8001920:	68b9      	ldr	r1, [r7, #8]
 8001922:	68f8      	ldr	r0, [r7, #12]
 8001924:	f000 f830 	bl	8001988 <I2C_IsAcknowledgeFailed>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e026      	b.n	8001980 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001932:	f7ff f8ff 	bl	8000b34 <HAL_GetTick>
 8001936:	4602      	mov	r2, r0
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	1ad3      	subs	r3, r2, r3
 800193c:	68ba      	ldr	r2, [r7, #8]
 800193e:	429a      	cmp	r2, r3
 8001940:	d302      	bcc.n	8001948 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d113      	bne.n	8001970 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800194c:	f043 0220 	orr.w	r2, r3, #32
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	2220      	movs	r2, #32
 8001958:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	2200      	movs	r2, #0
 8001960:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	2200      	movs	r2, #0
 8001968:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	e007      	b.n	8001980 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	699b      	ldr	r3, [r3, #24]
 8001976:	f003 0320 	and.w	r3, r3, #32
 800197a:	2b20      	cmp	r3, #32
 800197c:	d1cf      	bne.n	800191e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800197e:	2300      	movs	r3, #0
}
 8001980:	4618      	mov	r0, r3
 8001982:	3710      	adds	r7, #16
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}

08001988 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0
 800198e:	60f8      	str	r0, [r7, #12]
 8001990:	60b9      	str	r1, [r7, #8]
 8001992:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	699b      	ldr	r3, [r3, #24]
 800199a:	f003 0310 	and.w	r3, r3, #16
 800199e:	2b10      	cmp	r3, #16
 80019a0:	d151      	bne.n	8001a46 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80019a2:	e022      	b.n	80019ea <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019aa:	d01e      	beq.n	80019ea <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019ac:	f7ff f8c2 	bl	8000b34 <HAL_GetTick>
 80019b0:	4602      	mov	r2, r0
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	68ba      	ldr	r2, [r7, #8]
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d302      	bcc.n	80019c2 <I2C_IsAcknowledgeFailed+0x3a>
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d113      	bne.n	80019ea <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019c6:	f043 0220 	orr.w	r2, r3, #32
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	2220      	movs	r2, #32
 80019d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	2200      	movs	r2, #0
 80019da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	2200      	movs	r2, #0
 80019e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e02e      	b.n	8001a48 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	699b      	ldr	r3, [r3, #24]
 80019f0:	f003 0320 	and.w	r3, r3, #32
 80019f4:	2b20      	cmp	r3, #32
 80019f6:	d1d5      	bne.n	80019a4 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	2210      	movs	r2, #16
 80019fe:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	2220      	movs	r2, #32
 8001a06:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001a08:	68f8      	ldr	r0, [r7, #12]
 8001a0a:	f7ff fedd 	bl	80017c8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	6859      	ldr	r1, [r3, #4]
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	4b0d      	ldr	r3, [pc, #52]	; (8001a50 <I2C_IsAcknowledgeFailed+0xc8>)
 8001a1a:	400b      	ands	r3, r1
 8001a1c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a22:	f043 0204 	orr.w	r2, r3, #4
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	2220      	movs	r2, #32
 8001a2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	2200      	movs	r2, #0
 8001a36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e000      	b.n	8001a48 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8001a46:	2300      	movs	r3, #0
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3710      	adds	r7, #16
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	fe00e800 	.word	0xfe00e800

08001a54 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b085      	sub	sp, #20
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	60f8      	str	r0, [r7, #12]
 8001a5c:	607b      	str	r3, [r7, #4]
 8001a5e:	460b      	mov	r3, r1
 8001a60:	817b      	strh	r3, [r7, #10]
 8001a62:	4613      	mov	r3, r2
 8001a64:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	685a      	ldr	r2, [r3, #4]
 8001a6c:	69bb      	ldr	r3, [r7, #24]
 8001a6e:	0d5b      	lsrs	r3, r3, #21
 8001a70:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001a74:	4b0d      	ldr	r3, [pc, #52]	; (8001aac <I2C_TransferConfig+0x58>)
 8001a76:	430b      	orrs	r3, r1
 8001a78:	43db      	mvns	r3, r3
 8001a7a:	ea02 0103 	and.w	r1, r2, r3
 8001a7e:	897b      	ldrh	r3, [r7, #10]
 8001a80:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001a84:	7a7b      	ldrb	r3, [r7, #9]
 8001a86:	041b      	lsls	r3, r3, #16
 8001a88:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001a8c:	431a      	orrs	r2, r3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	431a      	orrs	r2, r3
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	431a      	orrs	r2, r3
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	430a      	orrs	r2, r1
 8001a9c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8001a9e:	bf00      	nop
 8001aa0:	3714      	adds	r7, #20
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	03ff63ff 	.word	0x03ff63ff

08001ab0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	2b20      	cmp	r3, #32
 8001ac4:	d138      	bne.n	8001b38 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d101      	bne.n	8001ad4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001ad0:	2302      	movs	r3, #2
 8001ad2:	e032      	b.n	8001b3a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2224      	movs	r2, #36	; 0x24
 8001ae0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f022 0201 	bic.w	r2, r2, #1
 8001af2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001b02:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	6819      	ldr	r1, [r3, #0]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	683a      	ldr	r2, [r7, #0]
 8001b10:	430a      	orrs	r2, r1
 8001b12:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f042 0201 	orr.w	r2, r2, #1
 8001b22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2220      	movs	r2, #32
 8001b28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001b34:	2300      	movs	r3, #0
 8001b36:	e000      	b.n	8001b3a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001b38:	2302      	movs	r3, #2
  }
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	370c      	adds	r7, #12
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr

08001b46 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001b46:	b480      	push	{r7}
 8001b48:	b085      	sub	sp, #20
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	6078      	str	r0, [r7, #4]
 8001b4e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	2b20      	cmp	r3, #32
 8001b5a:	d139      	bne.n	8001bd0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d101      	bne.n	8001b6a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001b66:	2302      	movs	r3, #2
 8001b68:	e033      	b.n	8001bd2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2224      	movs	r2, #36	; 0x24
 8001b76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f022 0201 	bic.w	r2, r2, #1
 8001b88:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001b98:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	021b      	lsls	r3, r3, #8
 8001b9e:	68fa      	ldr	r2, [r7, #12]
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	68fa      	ldr	r2, [r7, #12]
 8001baa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f042 0201 	orr.w	r2, r2, #1
 8001bba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2220      	movs	r2, #32
 8001bc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	e000      	b.n	8001bd2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001bd0:	2302      	movs	r3, #2
  }
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3714      	adds	r7, #20
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr

08001bde <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001bde:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001be0:	b08b      	sub	sp, #44	; 0x2c
 8001be2:	af06      	add	r7, sp, #24
 8001be4:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d101      	bne.n	8001bf0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	e0d0      	b.n	8001d92 <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d106      	bne.n	8001c0a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	f7fe fe01 	bl	800080c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2203      	movs	r2, #3
 8001c0e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4618      	mov	r0, r3
 8001c18:	f003 f929 	bl	8004e6e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	73fb      	strb	r3, [r7, #15]
 8001c20:	e04c      	b.n	8001cbc <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001c22:	7bfb      	ldrb	r3, [r7, #15]
 8001c24:	6879      	ldr	r1, [r7, #4]
 8001c26:	1c5a      	adds	r2, r3, #1
 8001c28:	4613      	mov	r3, r2
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	4413      	add	r3, r2
 8001c2e:	00db      	lsls	r3, r3, #3
 8001c30:	440b      	add	r3, r1
 8001c32:	3301      	adds	r3, #1
 8001c34:	2201      	movs	r2, #1
 8001c36:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001c38:	7bfb      	ldrb	r3, [r7, #15]
 8001c3a:	6879      	ldr	r1, [r7, #4]
 8001c3c:	1c5a      	adds	r2, r3, #1
 8001c3e:	4613      	mov	r3, r2
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	4413      	add	r3, r2
 8001c44:	00db      	lsls	r3, r3, #3
 8001c46:	440b      	add	r3, r1
 8001c48:	7bfa      	ldrb	r2, [r7, #15]
 8001c4a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001c4c:	7bfa      	ldrb	r2, [r7, #15]
 8001c4e:	7bfb      	ldrb	r3, [r7, #15]
 8001c50:	b298      	uxth	r0, r3
 8001c52:	6879      	ldr	r1, [r7, #4]
 8001c54:	4613      	mov	r3, r2
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	4413      	add	r3, r2
 8001c5a:	00db      	lsls	r3, r3, #3
 8001c5c:	440b      	add	r3, r1
 8001c5e:	3336      	adds	r3, #54	; 0x36
 8001c60:	4602      	mov	r2, r0
 8001c62:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001c64:	7bfb      	ldrb	r3, [r7, #15]
 8001c66:	6879      	ldr	r1, [r7, #4]
 8001c68:	1c5a      	adds	r2, r3, #1
 8001c6a:	4613      	mov	r3, r2
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	4413      	add	r3, r2
 8001c70:	00db      	lsls	r3, r3, #3
 8001c72:	440b      	add	r3, r1
 8001c74:	3303      	adds	r3, #3
 8001c76:	2200      	movs	r2, #0
 8001c78:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001c7a:	7bfa      	ldrb	r2, [r7, #15]
 8001c7c:	6879      	ldr	r1, [r7, #4]
 8001c7e:	4613      	mov	r3, r2
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	4413      	add	r3, r2
 8001c84:	00db      	lsls	r3, r3, #3
 8001c86:	440b      	add	r3, r1
 8001c88:	3338      	adds	r3, #56	; 0x38
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001c8e:	7bfa      	ldrb	r2, [r7, #15]
 8001c90:	6879      	ldr	r1, [r7, #4]
 8001c92:	4613      	mov	r3, r2
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	4413      	add	r3, r2
 8001c98:	00db      	lsls	r3, r3, #3
 8001c9a:	440b      	add	r3, r1
 8001c9c:	333c      	adds	r3, #60	; 0x3c
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001ca2:	7bfa      	ldrb	r2, [r7, #15]
 8001ca4:	6879      	ldr	r1, [r7, #4]
 8001ca6:	4613      	mov	r3, r2
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	4413      	add	r3, r2
 8001cac:	00db      	lsls	r3, r3, #3
 8001cae:	440b      	add	r3, r1
 8001cb0:	3340      	adds	r3, #64	; 0x40
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cb6:	7bfb      	ldrb	r3, [r7, #15]
 8001cb8:	3301      	adds	r3, #1
 8001cba:	73fb      	strb	r3, [r7, #15]
 8001cbc:	7bfa      	ldrb	r2, [r7, #15]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	d3ad      	bcc.n	8001c22 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	73fb      	strb	r3, [r7, #15]
 8001cca:	e044      	b.n	8001d56 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001ccc:	7bfa      	ldrb	r2, [r7, #15]
 8001cce:	6879      	ldr	r1, [r7, #4]
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	4413      	add	r3, r2
 8001cd6:	00db      	lsls	r3, r3, #3
 8001cd8:	440b      	add	r3, r1
 8001cda:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001cde:	2200      	movs	r2, #0
 8001ce0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001ce2:	7bfa      	ldrb	r2, [r7, #15]
 8001ce4:	6879      	ldr	r1, [r7, #4]
 8001ce6:	4613      	mov	r3, r2
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	4413      	add	r3, r2
 8001cec:	00db      	lsls	r3, r3, #3
 8001cee:	440b      	add	r3, r1
 8001cf0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001cf4:	7bfa      	ldrb	r2, [r7, #15]
 8001cf6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001cf8:	7bfa      	ldrb	r2, [r7, #15]
 8001cfa:	6879      	ldr	r1, [r7, #4]
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	4413      	add	r3, r2
 8001d02:	00db      	lsls	r3, r3, #3
 8001d04:	440b      	add	r3, r1
 8001d06:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001d0e:	7bfa      	ldrb	r2, [r7, #15]
 8001d10:	6879      	ldr	r1, [r7, #4]
 8001d12:	4613      	mov	r3, r2
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	4413      	add	r3, r2
 8001d18:	00db      	lsls	r3, r3, #3
 8001d1a:	440b      	add	r3, r1
 8001d1c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001d20:	2200      	movs	r2, #0
 8001d22:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001d24:	7bfa      	ldrb	r2, [r7, #15]
 8001d26:	6879      	ldr	r1, [r7, #4]
 8001d28:	4613      	mov	r3, r2
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	4413      	add	r3, r2
 8001d2e:	00db      	lsls	r3, r3, #3
 8001d30:	440b      	add	r3, r1
 8001d32:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001d36:	2200      	movs	r2, #0
 8001d38:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001d3a:	7bfa      	ldrb	r2, [r7, #15]
 8001d3c:	6879      	ldr	r1, [r7, #4]
 8001d3e:	4613      	mov	r3, r2
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	4413      	add	r3, r2
 8001d44:	00db      	lsls	r3, r3, #3
 8001d46:	440b      	add	r3, r1
 8001d48:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d50:	7bfb      	ldrb	r3, [r7, #15]
 8001d52:	3301      	adds	r3, #1
 8001d54:	73fb      	strb	r3, [r7, #15]
 8001d56:	7bfa      	ldrb	r2, [r7, #15]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d3b5      	bcc.n	8001ccc <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	603b      	str	r3, [r7, #0]
 8001d66:	687e      	ldr	r6, [r7, #4]
 8001d68:	466d      	mov	r5, sp
 8001d6a:	f106 0410 	add.w	r4, r6, #16
 8001d6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d72:	6823      	ldr	r3, [r4, #0]
 8001d74:	602b      	str	r3, [r5, #0]
 8001d76:	1d33      	adds	r3, r6, #4
 8001d78:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d7a:	6838      	ldr	r0, [r7, #0]
 8001d7c:	f003 f892 	bl	8004ea4 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2200      	movs	r2, #0
 8001d84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8001d90:	2300      	movs	r3, #0
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3714      	adds	r7, #20
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001d9a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	b082      	sub	sp, #8
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4618      	mov	r0, r3
 8001da8:	f004 f9d1 	bl	800614e <USB_ReadInterrupts>
 8001dac:	4603      	mov	r3, r0
 8001dae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001db2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001db6:	d102      	bne.n	8001dbe <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	f000 f954 	bl	8002066 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f004 f9c3 	bl	800614e <USB_ReadInterrupts>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dd2:	d112      	bne.n	8001dfa <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ddc:	b29a      	uxth	r2, r3
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001de6:	b292      	uxth	r2, r2
 8001de8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f000 f8f7 	bl	8001fe0 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001df2:	2100      	movs	r1, #0
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	f000 f911 	bl	800201c <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f004 f9a5 	bl	800614e <USB_ReadInterrupts>
 8001e04:	4603      	mov	r3, r0
 8001e06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e0a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001e0e:	d10b      	bne.n	8001e28 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e18:	b29a      	uxth	r2, r3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001e22:	b292      	uxth	r2, r2
 8001e24:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f004 f98e 	bl	800614e <USB_ReadInterrupts>
 8001e32:	4603      	mov	r3, r0
 8001e34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e3c:	d10b      	bne.n	8001e56 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e46:	b29a      	uxth	r2, r3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e50:	b292      	uxth	r2, r2
 8001e52:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f004 f977 	bl	800614e <USB_ReadInterrupts>
 8001e60:	4603      	mov	r3, r0
 8001e62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e6a:	d126      	bne.n	8001eba <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e74:	b29a      	uxth	r2, r3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f022 0204 	bic.w	r2, r2, #4
 8001e7e:	b292      	uxth	r2, r2
 8001e80:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e8c:	b29a      	uxth	r2, r3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f022 0208 	bic.w	r2, r2, #8
 8001e96:	b292      	uxth	r2, r2
 8001e98:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	f000 f8b3 	bl	8002008 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001eaa:	b29a      	uxth	r2, r3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001eb4:	b292      	uxth	r2, r2
 8001eb6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f004 f945 	bl	800614e <USB_ReadInterrupts>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001eca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001ece:	d126      	bne.n	8001f1e <HAL_PCD_IRQHandler+0x184>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001ed8:	b29a      	uxth	r2, r3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f042 0208 	orr.w	r2, r2, #8
 8001ee2:	b292      	uxth	r2, r2
 8001ee4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ef0:	b29a      	uxth	r2, r3
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001efa:	b292      	uxth	r2, r2
 8001efc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f08:	b29a      	uxth	r2, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f042 0204 	orr.w	r2, r2, #4
 8001f12:	b292      	uxth	r2, r2
 8001f14:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f000 f86b 	bl	8001ff4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4618      	mov	r0, r3
 8001f24:	f004 f913 	bl	800614e <USB_ReadInterrupts>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f32:	d10e      	bne.n	8001f52 <HAL_PCD_IRQHandler+0x1b8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f3c:	b29a      	uxth	r2, r3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001f46:	b292      	uxth	r2, r2
 8001f48:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f000 f83d 	bl	8001fcc <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4618      	mov	r0, r3
 8001f58:	f004 f8f9 	bl	800614e <USB_ReadInterrupts>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f66:	d10b      	bne.n	8001f80 <HAL_PCD_IRQHandler+0x1e6>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f70:	b29a      	uxth	r2, r3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f7a:	b292      	uxth	r2, r2
 8001f7c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001f80:	bf00      	nop
 8001f82:	3708      	adds	r7, #8
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	460b      	mov	r3, r1
 8001f92:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataOutStageCallback could be implemented in the user file
   */
}
 8001f94:	bf00      	nop
 8001f96:	370c      	adds	r7, #12
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr

08001fa0 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	460b      	mov	r3, r1
 8001faa:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataInStageCallback could be implemented in the user file
   */
}
 8001fac:	bf00      	nop
 8001fae:	370c      	adds	r7, #12
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr

08001fb8 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SetupStageCallback could be implemented in the user file
   */
}
 8001fc0:	bf00      	nop
 8001fc2:	370c      	adds	r7, #12
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr

08001fcc <HAL_PCD_SOFCallback>:
  * @brief  USB Start Of Frame callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */
}
 8001fd4:	bf00      	nop
 8001fd6:	370c      	adds	r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <HAL_PCD_ResetCallback>:
  * @brief  USB Reset callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResetCallback could be implemented in the user file
   */
}
 8001fe8:	bf00      	nop
 8001fea:	370c      	adds	r7, #12
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 8001ffc:	bf00      	nop
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 8002010:	bf00      	nop
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr

0800201c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	460b      	mov	r3, r1
 8002026:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800202e:	2b01      	cmp	r3, #1
 8002030:	d101      	bne.n	8002036 <HAL_PCD_SetAddress+0x1a>
 8002032:	2302      	movs	r3, #2
 8002034:	e013      	b.n	800205e <HAL_PCD_SetAddress+0x42>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2201      	movs	r2, #1
 800203a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	78fa      	ldrb	r2, [r7, #3]
 8002042:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	78fa      	ldrb	r2, [r7, #3]
 800204c:	4611      	mov	r1, r2
 800204e:	4618      	mov	r0, r3
 8002050:	f004 f869 	bl	8006126 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2200      	movs	r2, #0
 8002058:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800205c:	2300      	movs	r3, #0
}
 800205e:	4618      	mov	r0, r3
 8002060:	3708      	adds	r7, #8
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}

08002066 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002066:	b580      	push	{r7, lr}
 8002068:	b08e      	sub	sp, #56	; 0x38
 800206a:	af00      	add	r7, sp, #0
 800206c:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800206e:	e2d1      	b.n	8002614 <PCD_EP_ISR_Handler+0x5ae>
  {
    wIstr = hpcd->Instance->ISTR;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002078:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800207a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800207c:	b2db      	uxtb	r3, r3
 800207e:	f003 030f 	and.w	r3, r3, #15
 8002082:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8002086:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800208a:	2b00      	cmp	r3, #0
 800208c:	f040 8152 	bne.w	8002334 <PCD_EP_ISR_Handler+0x2ce>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002090:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002092:	f003 0310 	and.w	r3, r3, #16
 8002096:	2b00      	cmp	r3, #0
 8002098:	d150      	bne.n	800213c <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	881b      	ldrh	r3, [r3, #0]
 80020a0:	b29b      	uxth	r3, r3
 80020a2:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80020a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020aa:	81fb      	strh	r3, [r7, #14]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	89fb      	ldrh	r3, [r7, #14]
 80020b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80020b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80020ba:	b29b      	uxth	r3, r3
 80020bc:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	3328      	adds	r3, #40	; 0x28
 80020c2:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020cc:	b29b      	uxth	r3, r3
 80020ce:	461a      	mov	r2, r3
 80020d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	00db      	lsls	r3, r3, #3
 80020d6:	4413      	add	r3, r2
 80020d8:	687a      	ldr	r2, [r7, #4]
 80020da:	6812      	ldr	r2, [r2, #0]
 80020dc:	4413      	add	r3, r2
 80020de:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80020e2:	881b      	ldrh	r3, [r3, #0]
 80020e4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80020e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ea:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80020ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ee:	695a      	ldr	r2, [r3, #20]
 80020f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f2:	69db      	ldr	r3, [r3, #28]
 80020f4:	441a      	add	r2, r3
 80020f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f8:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80020fa:	2100      	movs	r1, #0
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	f7ff ff4f 	bl	8001fa0 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002108:	b2db      	uxtb	r3, r3
 800210a:	2b00      	cmp	r3, #0
 800210c:	f000 8282 	beq.w	8002614 <PCD_EP_ISR_Handler+0x5ae>
 8002110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002112:	699b      	ldr	r3, [r3, #24]
 8002114:	2b00      	cmp	r3, #0
 8002116:	f040 827d 	bne.w	8002614 <PCD_EP_ISR_Handler+0x5ae>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002120:	b2db      	uxtb	r3, r3
 8002122:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002126:	b2da      	uxtb	r2, r3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	b292      	uxth	r2, r2
 800212e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2200      	movs	r2, #0
 8002136:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800213a:	e26b      	b.n	8002614 <PCD_EP_ISR_Handler+0x5ae>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002142:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	881b      	ldrh	r3, [r3, #0]
 800214a:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800214c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800214e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002152:	2b00      	cmp	r3, #0
 8002154:	d032      	beq.n	80021bc <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800215e:	b29b      	uxth	r3, r3
 8002160:	461a      	mov	r2, r3
 8002162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	00db      	lsls	r3, r3, #3
 8002168:	4413      	add	r3, r2
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	6812      	ldr	r2, [r2, #0]
 800216e:	4413      	add	r3, r2
 8002170:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002174:	881b      	ldrh	r3, [r3, #0]
 8002176:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800217a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6818      	ldr	r0, [r3, #0]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800218c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002190:	b29b      	uxth	r3, r3
 8002192:	f004 f82e 	bl	80061f2 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	881b      	ldrh	r3, [r3, #0]
 800219c:	b29a      	uxth	r2, r3
 800219e:	f640 738f 	movw	r3, #3983	; 0xf8f
 80021a2:	4013      	ands	r3, r2
 80021a4:	823b      	strh	r3, [r7, #16]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	8a3a      	ldrh	r2, [r7, #16]
 80021ac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80021b0:	b292      	uxth	r2, r2
 80021b2:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f7ff feff 	bl	8001fb8 <HAL_PCD_SetupStageCallback>
 80021ba:	e22b      	b.n	8002614 <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80021bc:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	f280 8227 	bge.w	8002614 <PCD_EP_ISR_Handler+0x5ae>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	881b      	ldrh	r3, [r3, #0]
 80021cc:	b29a      	uxth	r2, r3
 80021ce:	f640 738f 	movw	r3, #3983	; 0xf8f
 80021d2:	4013      	ands	r3, r2
 80021d4:	83bb      	strh	r3, [r7, #28]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	8bba      	ldrh	r2, [r7, #28]
 80021dc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80021e0:	b292      	uxth	r2, r2
 80021e2:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021ec:	b29b      	uxth	r3, r3
 80021ee:	461a      	mov	r2, r3
 80021f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	00db      	lsls	r3, r3, #3
 80021f6:	4413      	add	r3, r2
 80021f8:	687a      	ldr	r2, [r7, #4]
 80021fa:	6812      	ldr	r2, [r2, #0]
 80021fc:	4413      	add	r3, r2
 80021fe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002202:	881b      	ldrh	r3, [r3, #0]
 8002204:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800220c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220e:	69db      	ldr	r3, [r3, #28]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d019      	beq.n	8002248 <PCD_EP_ISR_Handler+0x1e2>
 8002214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002216:	695b      	ldr	r3, [r3, #20]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d015      	beq.n	8002248 <PCD_EP_ISR_Handler+0x1e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6818      	ldr	r0, [r3, #0]
 8002220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002222:	6959      	ldr	r1, [r3, #20]
 8002224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002226:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800222c:	b29b      	uxth	r3, r3
 800222e:	f003 ffe0 	bl	80061f2 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002234:	695a      	ldr	r2, [r3, #20]
 8002236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002238:	69db      	ldr	r3, [r3, #28]
 800223a:	441a      	add	r2, r3
 800223c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002240:	2100      	movs	r1, #0
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f7ff fea0 	bl	8001f88 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	61bb      	str	r3, [r7, #24]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002256:	b29b      	uxth	r3, r3
 8002258:	461a      	mov	r2, r3
 800225a:	69bb      	ldr	r3, [r7, #24]
 800225c:	4413      	add	r3, r2
 800225e:	61bb      	str	r3, [r7, #24]
 8002260:	69bb      	ldr	r3, [r7, #24]
 8002262:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002266:	617b      	str	r3, [r7, #20]
 8002268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226a:	691b      	ldr	r3, [r3, #16]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d112      	bne.n	8002296 <PCD_EP_ISR_Handler+0x230>
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	881b      	ldrh	r3, [r3, #0]
 8002274:	b29b      	uxth	r3, r3
 8002276:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800227a:	b29a      	uxth	r2, r3
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	801a      	strh	r2, [r3, #0]
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	881b      	ldrh	r3, [r3, #0]
 8002284:	b29b      	uxth	r3, r3
 8002286:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800228a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800228e:	b29a      	uxth	r2, r3
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	801a      	strh	r2, [r3, #0]
 8002294:	e02f      	b.n	80022f6 <PCD_EP_ISR_Handler+0x290>
 8002296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002298:	691b      	ldr	r3, [r3, #16]
 800229a:	2b3e      	cmp	r3, #62	; 0x3e
 800229c:	d813      	bhi.n	80022c6 <PCD_EP_ISR_Handler+0x260>
 800229e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a0:	691b      	ldr	r3, [r3, #16]
 80022a2:	085b      	lsrs	r3, r3, #1
 80022a4:	633b      	str	r3, [r7, #48]	; 0x30
 80022a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a8:	691b      	ldr	r3, [r3, #16]
 80022aa:	f003 0301 	and.w	r3, r3, #1
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d002      	beq.n	80022b8 <PCD_EP_ISR_Handler+0x252>
 80022b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022b4:	3301      	adds	r3, #1
 80022b6:	633b      	str	r3, [r7, #48]	; 0x30
 80022b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022ba:	b29b      	uxth	r3, r3
 80022bc:	029b      	lsls	r3, r3, #10
 80022be:	b29a      	uxth	r2, r3
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	801a      	strh	r2, [r3, #0]
 80022c4:	e017      	b.n	80022f6 <PCD_EP_ISR_Handler+0x290>
 80022c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c8:	691b      	ldr	r3, [r3, #16]
 80022ca:	095b      	lsrs	r3, r3, #5
 80022cc:	633b      	str	r3, [r7, #48]	; 0x30
 80022ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d0:	691b      	ldr	r3, [r3, #16]
 80022d2:	f003 031f 	and.w	r3, r3, #31
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d102      	bne.n	80022e0 <PCD_EP_ISR_Handler+0x27a>
 80022da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022dc:	3b01      	subs	r3, #1
 80022de:	633b      	str	r3, [r7, #48]	; 0x30
 80022e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022e2:	b29b      	uxth	r3, r3
 80022e4:	029b      	lsls	r3, r3, #10
 80022e6:	b29b      	uxth	r3, r3
 80022e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80022ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80022f0:	b29a      	uxth	r2, r3
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	881b      	ldrh	r3, [r3, #0]
 80022fc:	b29b      	uxth	r3, r3
 80022fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002302:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002306:	827b      	strh	r3, [r7, #18]
 8002308:	8a7b      	ldrh	r3, [r7, #18]
 800230a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800230e:	827b      	strh	r3, [r7, #18]
 8002310:	8a7b      	ldrh	r3, [r7, #18]
 8002312:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002316:	827b      	strh	r3, [r7, #18]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	8a7b      	ldrh	r3, [r7, #18]
 800231e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002322:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002326:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800232a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800232e:	b29b      	uxth	r3, r3
 8002330:	8013      	strh	r3, [r2, #0]
 8002332:	e16f      	b.n	8002614 <PCD_EP_ISR_Handler+0x5ae>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	461a      	mov	r2, r3
 800233a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	4413      	add	r3, r2
 8002342:	881b      	ldrh	r3, [r3, #0]
 8002344:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002346:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800234a:	2b00      	cmp	r3, #0
 800234c:	f280 80e4 	bge.w	8002518 <PCD_EP_ISR_Handler+0x4b2>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	461a      	mov	r2, r3
 8002356:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	4413      	add	r3, r2
 800235e:	881b      	ldrh	r3, [r3, #0]
 8002360:	b29a      	uxth	r2, r3
 8002362:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002366:	4013      	ands	r3, r2
 8002368:	853b      	strh	r3, [r7, #40]	; 0x28
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	461a      	mov	r2, r3
 8002370:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	4413      	add	r3, r2
 8002378:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800237a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800237e:	b292      	uxth	r2, r2
 8002380:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002382:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002386:	4613      	mov	r3, r2
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	4413      	add	r3, r2
 800238c:	00db      	lsls	r3, r3, #3
 800238e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002392:	687a      	ldr	r2, [r7, #4]
 8002394:	4413      	add	r3, r2
 8002396:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239a:	7b1b      	ldrb	r3, [r3, #12]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d120      	bne.n	80023e2 <PCD_EP_ISR_Handler+0x37c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	461a      	mov	r2, r3
 80023ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	00db      	lsls	r3, r3, #3
 80023b2:	4413      	add	r3, r2
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	6812      	ldr	r2, [r2, #0]
 80023b8:	4413      	add	r3, r2
 80023ba:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80023be:	881b      	ldrh	r3, [r3, #0]
 80023c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023c4:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80023c6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	f000 8083 	beq.w	80024d4 <PCD_EP_ISR_Handler+0x46e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6818      	ldr	r0, [r3, #0]
 80023d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d4:	6959      	ldr	r1, [r3, #20]
 80023d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d8:	88da      	ldrh	r2, [r3, #6]
 80023da:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80023dc:	f003 ff09 	bl	80061f2 <USB_ReadPMA>
 80023e0:	e078      	b.n	80024d4 <PCD_EP_ISR_Handler+0x46e>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80023e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e4:	78db      	ldrb	r3, [r3, #3]
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d108      	bne.n	80023fc <PCD_EP_ISR_Handler+0x396>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80023ea:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80023ec:	461a      	mov	r2, r3
 80023ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	f000 f91d 	bl	8002630 <HAL_PCD_EP_DB_Receive>
 80023f6:	4603      	mov	r3, r0
 80023f8:	86fb      	strh	r3, [r7, #54]	; 0x36
 80023fa:	e06b      	b.n	80024d4 <PCD_EP_ISR_Handler+0x46e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	461a      	mov	r2, r3
 8002402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	4413      	add	r3, r2
 800240a:	881b      	ldrh	r3, [r3, #0]
 800240c:	b29b      	uxth	r3, r3
 800240e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002412:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002416:	847b      	strh	r3, [r7, #34]	; 0x22
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	461a      	mov	r2, r3
 800241e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	441a      	add	r2, r3
 8002426:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002428:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800242c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002430:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002434:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002438:	b29b      	uxth	r3, r3
 800243a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	461a      	mov	r2, r3
 8002442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002444:	781b      	ldrb	r3, [r3, #0]
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	4413      	add	r3, r2
 800244a:	881b      	ldrh	r3, [r3, #0]
 800244c:	b29b      	uxth	r3, r3
 800244e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d01f      	beq.n	8002496 <PCD_EP_ISR_Handler+0x430>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800245e:	b29b      	uxth	r3, r3
 8002460:	461a      	mov	r2, r3
 8002462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	00db      	lsls	r3, r3, #3
 8002468:	4413      	add	r3, r2
 800246a:	687a      	ldr	r2, [r7, #4]
 800246c:	6812      	ldr	r2, [r2, #0]
 800246e:	4413      	add	r3, r2
 8002470:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002474:	881b      	ldrh	r3, [r3, #0]
 8002476:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800247a:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800247c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800247e:	2b00      	cmp	r3, #0
 8002480:	d028      	beq.n	80024d4 <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6818      	ldr	r0, [r3, #0]
 8002486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002488:	6959      	ldr	r1, [r3, #20]
 800248a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248c:	891a      	ldrh	r2, [r3, #8]
 800248e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002490:	f003 feaf 	bl	80061f2 <USB_ReadPMA>
 8002494:	e01e      	b.n	80024d4 <PCD_EP_ISR_Handler+0x46e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800249e:	b29b      	uxth	r3, r3
 80024a0:	461a      	mov	r2, r3
 80024a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	00db      	lsls	r3, r3, #3
 80024a8:	4413      	add	r3, r2
 80024aa:	687a      	ldr	r2, [r7, #4]
 80024ac:	6812      	ldr	r2, [r2, #0]
 80024ae:	4413      	add	r3, r2
 80024b0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80024b4:	881b      	ldrh	r3, [r3, #0]
 80024b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024ba:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80024bc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d008      	beq.n	80024d4 <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6818      	ldr	r0, [r3, #0]
 80024c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c8:	6959      	ldr	r1, [r3, #20]
 80024ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024cc:	895a      	ldrh	r2, [r3, #10]
 80024ce:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80024d0:	f003 fe8f 	bl	80061f2 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80024d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d6:	69da      	ldr	r2, [r3, #28]
 80024d8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80024da:	441a      	add	r2, r3
 80024dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024de:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80024e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e2:	695a      	ldr	r2, [r3, #20]
 80024e4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80024e6:	441a      	add	r2, r3
 80024e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ea:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80024ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ee:	699b      	ldr	r3, [r3, #24]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d004      	beq.n	80024fe <PCD_EP_ISR_Handler+0x498>
 80024f4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80024f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f8:	691b      	ldr	r3, [r3, #16]
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d206      	bcs.n	800250c <PCD_EP_ISR_Handler+0x4a6>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80024fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	4619      	mov	r1, r3
 8002504:	6878      	ldr	r0, [r7, #4]
 8002506:	f7ff fd3f 	bl	8001f88 <HAL_PCD_DataOutStageCallback>
 800250a:	e005      	b.n	8002518 <PCD_EP_ISR_Handler+0x4b2>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002512:	4618      	mov	r0, r3
 8002514:	f002 fce7 	bl	8004ee6 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002518:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800251a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800251e:	2b00      	cmp	r3, #0
 8002520:	d078      	beq.n	8002614 <PCD_EP_ISR_Handler+0x5ae>
      {
        ep = &hpcd->IN_ep[epindex];
 8002522:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002526:	1c5a      	adds	r2, r3, #1
 8002528:	4613      	mov	r3, r2
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	4413      	add	r3, r2
 800252e:	00db      	lsls	r3, r3, #3
 8002530:	687a      	ldr	r2, [r7, #4]
 8002532:	4413      	add	r3, r2
 8002534:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	461a      	mov	r2, r3
 800253c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	4413      	add	r3, r2
 8002544:	881b      	ldrh	r3, [r3, #0]
 8002546:	b29b      	uxth	r3, r3
 8002548:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800254c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002550:	843b      	strh	r3, [r7, #32]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	461a      	mov	r2, r3
 8002558:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	441a      	add	r2, r3
 8002560:	8c3b      	ldrh	r3, [r7, #32]
 8002562:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002566:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800256a:	b29b      	uxth	r3, r3
 800256c:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 800256e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002570:	78db      	ldrb	r3, [r3, #3]
 8002572:	2b02      	cmp	r3, #2
 8002574:	d108      	bne.n	8002588 <PCD_EP_ISR_Handler+0x522>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002578:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 800257a:	2b02      	cmp	r3, #2
 800257c:	d144      	bne.n	8002608 <PCD_EP_ISR_Handler+0x5a2>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800257e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002584:	2b00      	cmp	r3, #0
 8002586:	d13f      	bne.n	8002608 <PCD_EP_ISR_Handler+0x5a2>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002590:	b29b      	uxth	r3, r3
 8002592:	461a      	mov	r2, r3
 8002594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	00db      	lsls	r3, r3, #3
 800259a:	4413      	add	r3, r2
 800259c:	687a      	ldr	r2, [r7, #4]
 800259e:	6812      	ldr	r2, [r2, #0]
 80025a0:	4413      	add	r3, r2
 80025a2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80025a6:	881b      	ldrh	r3, [r3, #0]
 80025a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025ac:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80025ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b0:	699a      	ldr	r2, [r3, #24]
 80025b2:	8bfb      	ldrh	r3, [r7, #30]
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d906      	bls.n	80025c6 <PCD_EP_ISR_Handler+0x560>
          {
            ep->xfer_len -= TxByteNbre;
 80025b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ba:	699a      	ldr	r2, [r3, #24]
 80025bc:	8bfb      	ldrh	r3, [r7, #30]
 80025be:	1ad2      	subs	r2, r2, r3
 80025c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c2:	619a      	str	r2, [r3, #24]
 80025c4:	e002      	b.n	80025cc <PCD_EP_ISR_Handler+0x566>
          }
          else
          {
            ep->xfer_len = 0U;
 80025c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c8:	2200      	movs	r2, #0
 80025ca:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80025cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ce:	699b      	ldr	r3, [r3, #24]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d106      	bne.n	80025e2 <PCD_EP_ISR_Handler+0x57c>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80025d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	4619      	mov	r1, r3
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f7ff fce0 	bl	8001fa0 <HAL_PCD_DataInStageCallback>
 80025e0:	e018      	b.n	8002614 <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80025e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e4:	695a      	ldr	r2, [r3, #20]
 80025e6:	8bfb      	ldrh	r3, [r7, #30]
 80025e8:	441a      	add	r2, r3
 80025ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ec:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80025ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f0:	69da      	ldr	r2, [r3, #28]
 80025f2:	8bfb      	ldrh	r3, [r7, #30]
 80025f4:	441a      	add	r2, r3
 80025f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f8:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002600:	4618      	mov	r0, r3
 8002602:	f002 fc70 	bl	8004ee6 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002606:	e005      	b.n	8002614 <PCD_EP_ISR_Handler+0x5ae>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002608:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800260a:	461a      	mov	r2, r3
 800260c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f000 f917 	bl	8002842 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800261c:	b29b      	uxth	r3, r3
 800261e:	b21b      	sxth	r3, r3
 8002620:	2b00      	cmp	r3, #0
 8002622:	f6ff ad25 	blt.w	8002070 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002626:	2300      	movs	r3, #0
}
 8002628:	4618      	mov	r0, r3
 800262a:	3738      	adds	r7, #56	; 0x38
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}

08002630 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b088      	sub	sp, #32
 8002634:	af00      	add	r7, sp, #0
 8002636:	60f8      	str	r0, [r7, #12]
 8002638:	60b9      	str	r1, [r7, #8]
 800263a:	4613      	mov	r3, r2
 800263c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800263e:	88fb      	ldrh	r3, [r7, #6]
 8002640:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002644:	2b00      	cmp	r3, #0
 8002646:	d07c      	beq.n	8002742 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002650:	b29b      	uxth	r3, r3
 8002652:	461a      	mov	r2, r3
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	00db      	lsls	r3, r3, #3
 800265a:	4413      	add	r3, r2
 800265c:	68fa      	ldr	r2, [r7, #12]
 800265e:	6812      	ldr	r2, [r2, #0]
 8002660:	4413      	add	r3, r2
 8002662:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002666:	881b      	ldrh	r3, [r3, #0]
 8002668:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800266c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	699a      	ldr	r2, [r3, #24]
 8002672:	8b7b      	ldrh	r3, [r7, #26]
 8002674:	429a      	cmp	r2, r3
 8002676:	d306      	bcc.n	8002686 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	699a      	ldr	r2, [r3, #24]
 800267c:	8b7b      	ldrh	r3, [r7, #26]
 800267e:	1ad2      	subs	r2, r2, r3
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	619a      	str	r2, [r3, #24]
 8002684:	e002      	b.n	800268c <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	2200      	movs	r2, #0
 800268a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	699b      	ldr	r3, [r3, #24]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d123      	bne.n	80026dc <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	461a      	mov	r2, r3
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	4413      	add	r3, r2
 80026a2:	881b      	ldrh	r3, [r3, #0]
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80026aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026ae:	833b      	strh	r3, [r7, #24]
 80026b0:	8b3b      	ldrh	r3, [r7, #24]
 80026b2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80026b6:	833b      	strh	r3, [r7, #24]
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	461a      	mov	r2, r3
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	441a      	add	r2, r3
 80026c6:	8b3b      	ldrh	r3, [r7, #24]
 80026c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80026cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80026d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026d8:	b29b      	uxth	r3, r3
 80026da:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80026dc:	88fb      	ldrh	r3, [r7, #6]
 80026de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d01f      	beq.n	8002726 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	461a      	mov	r2, r3
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	4413      	add	r3, r2
 80026f4:	881b      	ldrh	r3, [r3, #0]
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002700:	82fb      	strh	r3, [r7, #22]
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	461a      	mov	r2, r3
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	441a      	add	r2, r3
 8002710:	8afb      	ldrh	r3, [r7, #22]
 8002712:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002716:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800271a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800271e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002722:	b29b      	uxth	r3, r3
 8002724:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002726:	8b7b      	ldrh	r3, [r7, #26]
 8002728:	2b00      	cmp	r3, #0
 800272a:	f000 8085 	beq.w	8002838 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	6818      	ldr	r0, [r3, #0]
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	6959      	ldr	r1, [r3, #20]
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	891a      	ldrh	r2, [r3, #8]
 800273a:	8b7b      	ldrh	r3, [r7, #26]
 800273c:	f003 fd59 	bl	80061f2 <USB_ReadPMA>
 8002740:	e07a      	b.n	8002838 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800274a:	b29b      	uxth	r3, r3
 800274c:	461a      	mov	r2, r3
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	781b      	ldrb	r3, [r3, #0]
 8002752:	00db      	lsls	r3, r3, #3
 8002754:	4413      	add	r3, r2
 8002756:	68fa      	ldr	r2, [r7, #12]
 8002758:	6812      	ldr	r2, [r2, #0]
 800275a:	4413      	add	r3, r2
 800275c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002760:	881b      	ldrh	r3, [r3, #0]
 8002762:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002766:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	699a      	ldr	r2, [r3, #24]
 800276c:	8b7b      	ldrh	r3, [r7, #26]
 800276e:	429a      	cmp	r2, r3
 8002770:	d306      	bcc.n	8002780 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	699a      	ldr	r2, [r3, #24]
 8002776:	8b7b      	ldrh	r3, [r7, #26]
 8002778:	1ad2      	subs	r2, r2, r3
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	619a      	str	r2, [r3, #24]
 800277e:	e002      	b.n	8002786 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	2200      	movs	r2, #0
 8002784:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	699b      	ldr	r3, [r3, #24]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d123      	bne.n	80027d6 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	461a      	mov	r2, r3
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	4413      	add	r3, r2
 800279c:	881b      	ldrh	r3, [r3, #0]
 800279e:	b29b      	uxth	r3, r3
 80027a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80027a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027a8:	83fb      	strh	r3, [r7, #30]
 80027aa:	8bfb      	ldrh	r3, [r7, #30]
 80027ac:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80027b0:	83fb      	strh	r3, [r7, #30]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	461a      	mov	r2, r3
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	441a      	add	r2, r3
 80027c0:	8bfb      	ldrh	r3, [r7, #30]
 80027c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80027c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80027ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80027d6:	88fb      	ldrh	r3, [r7, #6]
 80027d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d11f      	bne.n	8002820 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	461a      	mov	r2, r3
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	4413      	add	r3, r2
 80027ee:	881b      	ldrh	r3, [r3, #0]
 80027f0:	b29b      	uxth	r3, r3
 80027f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027fa:	83bb      	strh	r3, [r7, #28]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	461a      	mov	r2, r3
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	781b      	ldrb	r3, [r3, #0]
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	441a      	add	r2, r3
 800280a:	8bbb      	ldrh	r3, [r7, #28]
 800280c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002810:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002814:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002818:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800281c:	b29b      	uxth	r3, r3
 800281e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002820:	8b7b      	ldrh	r3, [r7, #26]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d008      	beq.n	8002838 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	6818      	ldr	r0, [r3, #0]
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	6959      	ldr	r1, [r3, #20]
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	895a      	ldrh	r2, [r3, #10]
 8002832:	8b7b      	ldrh	r3, [r7, #26]
 8002834:	f003 fcdd 	bl	80061f2 <USB_ReadPMA>
    }
  }

  return count;
 8002838:	8b7b      	ldrh	r3, [r7, #26]
}
 800283a:	4618      	mov	r0, r3
 800283c:	3720      	adds	r7, #32
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}

08002842 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002842:	b580      	push	{r7, lr}
 8002844:	b094      	sub	sp, #80	; 0x50
 8002846:	af00      	add	r7, sp, #0
 8002848:	60f8      	str	r0, [r7, #12]
 800284a:	60b9      	str	r1, [r7, #8]
 800284c:	4613      	mov	r3, r2
 800284e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002850:	88fb      	ldrh	r3, [r7, #6]
 8002852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002856:	2b00      	cmp	r3, #0
 8002858:	f000 8136 	beq.w	8002ac8 <HAL_PCD_EP_DB_Transmit+0x286>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002864:	b29b      	uxth	r3, r3
 8002866:	461a      	mov	r2, r3
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	00db      	lsls	r3, r3, #3
 800286e:	4413      	add	r3, r2
 8002870:	68fa      	ldr	r2, [r7, #12]
 8002872:	6812      	ldr	r2, [r2, #0]
 8002874:	4413      	add	r3, r2
 8002876:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800287a:	881b      	ldrh	r3, [r3, #0]
 800287c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002880:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len > TxByteNbre)
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	699a      	ldr	r2, [r3, #24]
 8002888:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800288c:	429a      	cmp	r2, r3
 800288e:	d907      	bls.n	80028a0 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxByteNbre;
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	699a      	ldr	r2, [r3, #24]
 8002894:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002898:	1ad2      	subs	r2, r2, r3
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	619a      	str	r2, [r3, #24]
 800289e:	e002      	b.n	80028a6 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	2200      	movs	r2, #0
 80028a4:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	699b      	ldr	r3, [r3, #24]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d12c      	bne.n	8002908 <HAL_PCD_EP_DB_Transmit+0xc6>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	4619      	mov	r1, r3
 80028b4:	68f8      	ldr	r0, [r7, #12]
 80028b6:	f7ff fb73 	bl	8001fa0 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80028ba:	88fb      	ldrh	r3, [r7, #6]
 80028bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	f000 8238 	beq.w	8002d36 <HAL_PCD_EP_DB_Transmit+0x4f4>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	461a      	mov	r2, r3
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	4413      	add	r3, r2
 80028d4:	881b      	ldrh	r3, [r3, #0]
 80028d6:	b29b      	uxth	r3, r3
 80028d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028e0:	82fb      	strh	r3, [r7, #22]
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	461a      	mov	r2, r3
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	441a      	add	r2, r3
 80028f0:	8afb      	ldrh	r3, [r7, #22]
 80028f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80028f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80028fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80028fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002902:	b29b      	uxth	r3, r3
 8002904:	8013      	strh	r3, [r2, #0]
 8002906:	e216      	b.n	8002d36 <HAL_PCD_EP_DB_Transmit+0x4f4>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002908:	88fb      	ldrh	r3, [r7, #6]
 800290a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d01f      	beq.n	8002952 <HAL_PCD_EP_DB_Transmit+0x110>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	461a      	mov	r2, r3
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	4413      	add	r3, r2
 8002920:	881b      	ldrh	r3, [r3, #0]
 8002922:	b29b      	uxth	r3, r3
 8002924:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002928:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800292c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	461a      	mov	r2, r3
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	441a      	add	r2, r3
 800293c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800293e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002942:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002946:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800294a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800294e:	b29b      	uxth	r3, r3
 8002950:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002958:	2b01      	cmp	r3, #1
 800295a:	f040 81ec 	bne.w	8002d36 <HAL_PCD_EP_DB_Transmit+0x4f4>
      {
        ep->xfer_buff += TxByteNbre;
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	695a      	ldr	r2, [r3, #20]
 8002962:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002966:	441a      	add	r2, r3
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	69da      	ldr	r2, [r3, #28]
 8002970:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002974:	441a      	add	r2, r3
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	6a1a      	ldr	r2, [r3, #32]
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	691b      	ldr	r3, [r3, #16]
 8002982:	429a      	cmp	r2, r3
 8002984:	d309      	bcc.n	800299a <HAL_PCD_EP_DB_Transmit+0x158>
        {
          len = ep->maxpacket;
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	691b      	ldr	r3, [r3, #16]
 800298a:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	6a1a      	ldr	r2, [r3, #32]
 8002990:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002992:	1ad2      	subs	r2, r2, r3
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	621a      	str	r2, [r3, #32]
 8002998:	e015      	b.n	80029c6 <HAL_PCD_EP_DB_Transmit+0x184>
        }
        else if (ep->xfer_len_db == 0U)
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	6a1b      	ldr	r3, [r3, #32]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d107      	bne.n	80029b2 <HAL_PCD_EP_DB_Transmit+0x170>
        {
          len = TxByteNbre;
 80029a2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80029a6:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	2200      	movs	r2, #0
 80029ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80029b0:	e009      	b.n	80029c6 <HAL_PCD_EP_DB_Transmit+0x184>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	2200      	movs	r2, #0
 80029b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	6a1b      	ldr	r3, [r3, #32]
 80029be:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	2200      	movs	r2, #0
 80029c4:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	785b      	ldrb	r3, [r3, #1]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d155      	bne.n	8002a7a <HAL_PCD_EP_DB_Transmit+0x238>
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	61fb      	str	r3, [r7, #28]
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029dc:	b29b      	uxth	r3, r3
 80029de:	461a      	mov	r2, r3
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	4413      	add	r3, r2
 80029e4:	61fb      	str	r3, [r7, #28]
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	00da      	lsls	r2, r3, #3
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	4413      	add	r3, r2
 80029f0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80029f4:	61bb      	str	r3, [r7, #24]
 80029f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d112      	bne.n	8002a22 <HAL_PCD_EP_DB_Transmit+0x1e0>
 80029fc:	69bb      	ldr	r3, [r7, #24]
 80029fe:	881b      	ldrh	r3, [r3, #0]
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002a06:	b29a      	uxth	r2, r3
 8002a08:	69bb      	ldr	r3, [r7, #24]
 8002a0a:	801a      	strh	r2, [r3, #0]
 8002a0c:	69bb      	ldr	r3, [r7, #24]
 8002a0e:	881b      	ldrh	r3, [r3, #0]
 8002a10:	b29b      	uxth	r3, r3
 8002a12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a1a:	b29a      	uxth	r2, r3
 8002a1c:	69bb      	ldr	r3, [r7, #24]
 8002a1e:	801a      	strh	r2, [r3, #0]
 8002a20:	e047      	b.n	8002ab2 <HAL_PCD_EP_DB_Transmit+0x270>
 8002a22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a24:	2b3e      	cmp	r3, #62	; 0x3e
 8002a26:	d811      	bhi.n	8002a4c <HAL_PCD_EP_DB_Transmit+0x20a>
 8002a28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a2a:	085b      	lsrs	r3, r3, #1
 8002a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a30:	f003 0301 	and.w	r3, r3, #1
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d002      	beq.n	8002a3e <HAL_PCD_EP_DB_Transmit+0x1fc>
 8002a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a3a:	3301      	adds	r3, #1
 8002a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a40:	b29b      	uxth	r3, r3
 8002a42:	029b      	lsls	r3, r3, #10
 8002a44:	b29a      	uxth	r2, r3
 8002a46:	69bb      	ldr	r3, [r7, #24]
 8002a48:	801a      	strh	r2, [r3, #0]
 8002a4a:	e032      	b.n	8002ab2 <HAL_PCD_EP_DB_Transmit+0x270>
 8002a4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a4e:	095b      	lsrs	r3, r3, #5
 8002a50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a54:	f003 031f 	and.w	r3, r3, #31
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d102      	bne.n	8002a62 <HAL_PCD_EP_DB_Transmit+0x220>
 8002a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a5e:	3b01      	subs	r3, #1
 8002a60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a64:	b29b      	uxth	r3, r3
 8002a66:	029b      	lsls	r3, r3, #10
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a72:	b29a      	uxth	r2, r3
 8002a74:	69bb      	ldr	r3, [r7, #24]
 8002a76:	801a      	strh	r2, [r3, #0]
 8002a78:	e01b      	b.n	8002ab2 <HAL_PCD_EP_DB_Transmit+0x270>
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	785b      	ldrb	r3, [r3, #1]
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d117      	bne.n	8002ab2 <HAL_PCD_EP_DB_Transmit+0x270>
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	627b      	str	r3, [r7, #36]	; 0x24
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	461a      	mov	r2, r3
 8002a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a96:	4413      	add	r3, r2
 8002a98:	627b      	str	r3, [r7, #36]	; 0x24
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	781b      	ldrb	r3, [r3, #0]
 8002a9e:	00da      	lsls	r2, r3, #3
 8002aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa2:	4413      	add	r3, r2
 8002aa4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002aa8:	623b      	str	r3, [r7, #32]
 8002aaa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002aac:	b29a      	uxth	r2, r3
 8002aae:	6a3b      	ldr	r3, [r7, #32]
 8002ab0:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	6818      	ldr	r0, [r3, #0]
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	6959      	ldr	r1, [r3, #20]
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	891a      	ldrh	r2, [r3, #8]
 8002abe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ac0:	b29b      	uxth	r3, r3
 8002ac2:	f003 fb54 	bl	800616e <USB_WritePMA>
 8002ac6:	e136      	b.n	8002d36 <HAL_PCD_EP_DB_Transmit+0x4f4>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ad0:	b29b      	uxth	r3, r3
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	00db      	lsls	r3, r3, #3
 8002ada:	4413      	add	r3, r2
 8002adc:	68fa      	ldr	r2, [r7, #12]
 8002ade:	6812      	ldr	r2, [r2, #0]
 8002ae0:	4413      	add	r3, r2
 8002ae2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002ae6:	881b      	ldrh	r3, [r3, #0]
 8002ae8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002aec:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len >= TxByteNbre)
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	699a      	ldr	r2, [r3, #24]
 8002af4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d307      	bcc.n	8002b0c <HAL_PCD_EP_DB_Transmit+0x2ca>
    {
      ep->xfer_len -= TxByteNbre;
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	699a      	ldr	r2, [r3, #24]
 8002b00:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002b04:	1ad2      	subs	r2, r2, r3
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	619a      	str	r2, [r3, #24]
 8002b0a:	e002      	b.n	8002b12 <HAL_PCD_EP_DB_Transmit+0x2d0>
    }
    else
    {
      ep->xfer_len = 0U;
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	699b      	ldr	r3, [r3, #24]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d12e      	bne.n	8002b78 <HAL_PCD_EP_DB_Transmit+0x336>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	781b      	ldrb	r3, [r3, #0]
 8002b1e:	4619      	mov	r1, r3
 8002b20:	68f8      	ldr	r0, [r7, #12]
 8002b22:	f7ff fa3d 	bl	8001fa0 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002b26:	88fb      	ldrh	r3, [r7, #6]
 8002b28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	f040 8102 	bne.w	8002d36 <HAL_PCD_EP_DB_Transmit+0x4f4>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	461a      	mov	r2, r3
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	4413      	add	r3, r2
 8002b40:	881b      	ldrh	r3, [r3, #0]
 8002b42:	b29b      	uxth	r3, r3
 8002b44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b4c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	461a      	mov	r2, r3
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	441a      	add	r2, r3
 8002b5e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002b62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b6a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b72:	b29b      	uxth	r3, r3
 8002b74:	8013      	strh	r3, [r2, #0]
 8002b76:	e0de      	b.n	8002d36 <HAL_PCD_EP_DB_Transmit+0x4f4>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002b78:	88fb      	ldrh	r3, [r7, #6]
 8002b7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d11f      	bne.n	8002bc2 <HAL_PCD_EP_DB_Transmit+0x380>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	461a      	mov	r2, r3
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	4413      	add	r3, r2
 8002b90:	881b      	ldrh	r3, [r3, #0]
 8002b92:	b29b      	uxth	r3, r3
 8002b94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b9c:	867b      	strh	r3, [r7, #50]	; 0x32
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	441a      	add	r2, r3
 8002bac:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8002bae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002bb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002bb6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002bba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	f040 80b4 	bne.w	8002d36 <HAL_PCD_EP_DB_Transmit+0x4f4>
      {
        ep->xfer_buff += TxByteNbre;
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	695a      	ldr	r2, [r3, #20]
 8002bd2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002bd6:	441a      	add	r2, r3
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	69da      	ldr	r2, [r3, #28]
 8002be0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002be4:	441a      	add	r2, r3
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	6a1a      	ldr	r2, [r3, #32]
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	691b      	ldr	r3, [r3, #16]
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d309      	bcc.n	8002c0a <HAL_PCD_EP_DB_Transmit+0x3c8>
        {
          len = ep->maxpacket;
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	691b      	ldr	r3, [r3, #16]
 8002bfa:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	6a1a      	ldr	r2, [r3, #32]
 8002c00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c02:	1ad2      	subs	r2, r2, r3
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	621a      	str	r2, [r3, #32]
 8002c08:	e015      	b.n	8002c36 <HAL_PCD_EP_DB_Transmit+0x3f4>
        }
        else if (ep->xfer_len_db == 0U)
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	6a1b      	ldr	r3, [r3, #32]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d107      	bne.n	8002c22 <HAL_PCD_EP_DB_Transmit+0x3e0>
        {
          len = TxByteNbre;
 8002c12:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002c16:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002c20:	e009      	b.n	8002c36 <HAL_PCD_EP_DB_Transmit+0x3f4>
        }
        else
        {
          len = ep->xfer_len_db;
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	6a1b      	ldr	r3, [r3, #32]
 8002c26:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	2200      	movs	r2, #0
 8002c32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	643b      	str	r3, [r7, #64]	; 0x40
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	785b      	ldrb	r3, [r3, #1]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d155      	bne.n	8002cf0 <HAL_PCD_EP_DB_Transmit+0x4ae>
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c52:	b29b      	uxth	r3, r3
 8002c54:	461a      	mov	r2, r3
 8002c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c58:	4413      	add	r3, r2
 8002c5a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	00da      	lsls	r2, r3, #3
 8002c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c64:	4413      	add	r3, r2
 8002c66:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002c6a:	637b      	str	r3, [r7, #52]	; 0x34
 8002c6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d112      	bne.n	8002c98 <HAL_PCD_EP_DB_Transmit+0x456>
 8002c72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c74:	881b      	ldrh	r3, [r3, #0]
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002c7c:	b29a      	uxth	r2, r3
 8002c7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c80:	801a      	strh	r2, [r3, #0]
 8002c82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c84:	881b      	ldrh	r3, [r3, #0]
 8002c86:	b29b      	uxth	r3, r3
 8002c88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c90:	b29a      	uxth	r2, r3
 8002c92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c94:	801a      	strh	r2, [r3, #0]
 8002c96:	e044      	b.n	8002d22 <HAL_PCD_EP_DB_Transmit+0x4e0>
 8002c98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c9a:	2b3e      	cmp	r3, #62	; 0x3e
 8002c9c:	d811      	bhi.n	8002cc2 <HAL_PCD_EP_DB_Transmit+0x480>
 8002c9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ca0:	085b      	lsrs	r3, r3, #1
 8002ca2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ca4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ca6:	f003 0301 	and.w	r3, r3, #1
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d002      	beq.n	8002cb4 <HAL_PCD_EP_DB_Transmit+0x472>
 8002cae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cb0:	3301      	adds	r3, #1
 8002cb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002cb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cb6:	b29b      	uxth	r3, r3
 8002cb8:	029b      	lsls	r3, r3, #10
 8002cba:	b29a      	uxth	r2, r3
 8002cbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cbe:	801a      	strh	r2, [r3, #0]
 8002cc0:	e02f      	b.n	8002d22 <HAL_PCD_EP_DB_Transmit+0x4e0>
 8002cc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cc4:	095b      	lsrs	r3, r3, #5
 8002cc6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002cc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cca:	f003 031f 	and.w	r3, r3, #31
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d102      	bne.n	8002cd8 <HAL_PCD_EP_DB_Transmit+0x496>
 8002cd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cd4:	3b01      	subs	r3, #1
 8002cd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002cd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cda:	b29b      	uxth	r3, r3
 8002cdc:	029b      	lsls	r3, r3, #10
 8002cde:	b29b      	uxth	r3, r3
 8002ce0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ce4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ce8:	b29a      	uxth	r2, r3
 8002cea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cec:	801a      	strh	r2, [r3, #0]
 8002cee:	e018      	b.n	8002d22 <HAL_PCD_EP_DB_Transmit+0x4e0>
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	785b      	ldrb	r3, [r3, #1]
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d114      	bne.n	8002d22 <HAL_PCD_EP_DB_Transmit+0x4e0>
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	461a      	mov	r2, r3
 8002d04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d06:	4413      	add	r3, r2
 8002d08:	643b      	str	r3, [r7, #64]	; 0x40
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	781b      	ldrb	r3, [r3, #0]
 8002d0e:	00da      	lsls	r2, r3, #3
 8002d10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d12:	4413      	add	r3, r2
 8002d14:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002d18:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d1c:	b29a      	uxth	r2, r3
 8002d1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d20:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	6818      	ldr	r0, [r3, #0]
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	6959      	ldr	r1, [r3, #20]
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	895a      	ldrh	r2, [r3, #10]
 8002d2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	f003 fa1c 	bl	800616e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	4413      	add	r3, r2
 8002d44:	881b      	ldrh	r3, [r3, #0]
 8002d46:	b29b      	uxth	r3, r3
 8002d48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d50:	82bb      	strh	r3, [r7, #20]
 8002d52:	8abb      	ldrh	r3, [r7, #20]
 8002d54:	f083 0310 	eor.w	r3, r3, #16
 8002d58:	82bb      	strh	r3, [r7, #20]
 8002d5a:	8abb      	ldrh	r3, [r7, #20]
 8002d5c:	f083 0320 	eor.w	r3, r3, #32
 8002d60:	82bb      	strh	r3, [r7, #20]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	461a      	mov	r2, r3
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	781b      	ldrb	r3, [r3, #0]
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	441a      	add	r2, r3
 8002d70:	8abb      	ldrh	r3, [r7, #20]
 8002d72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002d86:	2300      	movs	r3, #0
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3750      	adds	r7, #80	; 0x50
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}

08002d90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	1d3b      	adds	r3, r7, #4
 8002d9a:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d9c:	1d3b      	adds	r3, r7, #4
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d102      	bne.n	8002daa <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	f000 bf01 	b.w	8003bac <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002daa:	1d3b      	adds	r3, r7, #4
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0301 	and.w	r3, r3, #1
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	f000 8160 	beq.w	800307a <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002dba:	4bae      	ldr	r3, [pc, #696]	; (8003074 <HAL_RCC_OscConfig+0x2e4>)
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	f003 030c 	and.w	r3, r3, #12
 8002dc2:	2b04      	cmp	r3, #4
 8002dc4:	d00c      	beq.n	8002de0 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002dc6:	4bab      	ldr	r3, [pc, #684]	; (8003074 <HAL_RCC_OscConfig+0x2e4>)
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	f003 030c 	and.w	r3, r3, #12
 8002dce:	2b08      	cmp	r3, #8
 8002dd0:	d159      	bne.n	8002e86 <HAL_RCC_OscConfig+0xf6>
 8002dd2:	4ba8      	ldr	r3, [pc, #672]	; (8003074 <HAL_RCC_OscConfig+0x2e4>)
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002dda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dde:	d152      	bne.n	8002e86 <HAL_RCC_OscConfig+0xf6>
 8002de0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002de4:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002dec:	fa93 f3a3 	rbit	r3, r3
 8002df0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  return result;
 8002df4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002df8:	fab3 f383 	clz	r3, r3
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	095b      	lsrs	r3, r3, #5
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	f043 0301 	orr.w	r3, r3, #1
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d102      	bne.n	8002e12 <HAL_RCC_OscConfig+0x82>
 8002e0c:	4b99      	ldr	r3, [pc, #612]	; (8003074 <HAL_RCC_OscConfig+0x2e4>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	e015      	b.n	8002e3e <HAL_RCC_OscConfig+0xae>
 8002e12:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e16:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e1a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8002e1e:	fa93 f3a3 	rbit	r3, r3
 8002e22:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8002e26:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e2a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002e2e:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8002e32:	fa93 f3a3 	rbit	r3, r3
 8002e36:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002e3a:	4b8e      	ldr	r3, [pc, #568]	; (8003074 <HAL_RCC_OscConfig+0x2e4>)
 8002e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002e42:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8002e46:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8002e4a:	fa92 f2a2 	rbit	r2, r2
 8002e4e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8002e52:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002e56:	fab2 f282 	clz	r2, r2
 8002e5a:	b2d2      	uxtb	r2, r2
 8002e5c:	f042 0220 	orr.w	r2, r2, #32
 8002e60:	b2d2      	uxtb	r2, r2
 8002e62:	f002 021f 	and.w	r2, r2, #31
 8002e66:	2101      	movs	r1, #1
 8002e68:	fa01 f202 	lsl.w	r2, r1, r2
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	f000 8102 	beq.w	8003078 <HAL_RCC_OscConfig+0x2e8>
 8002e74:	1d3b      	adds	r3, r7, #4
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	f040 80fc 	bne.w	8003078 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	f000 be93 	b.w	8003bac <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e86:	1d3b      	adds	r3, r7, #4
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e90:	d106      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x110>
 8002e92:	4b78      	ldr	r3, [pc, #480]	; (8003074 <HAL_RCC_OscConfig+0x2e4>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a77      	ldr	r2, [pc, #476]	; (8003074 <HAL_RCC_OscConfig+0x2e4>)
 8002e98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e9c:	6013      	str	r3, [r2, #0]
 8002e9e:	e030      	b.n	8002f02 <HAL_RCC_OscConfig+0x172>
 8002ea0:	1d3b      	adds	r3, r7, #4
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d10c      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x134>
 8002eaa:	4b72      	ldr	r3, [pc, #456]	; (8003074 <HAL_RCC_OscConfig+0x2e4>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a71      	ldr	r2, [pc, #452]	; (8003074 <HAL_RCC_OscConfig+0x2e4>)
 8002eb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002eb4:	6013      	str	r3, [r2, #0]
 8002eb6:	4b6f      	ldr	r3, [pc, #444]	; (8003074 <HAL_RCC_OscConfig+0x2e4>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a6e      	ldr	r2, [pc, #440]	; (8003074 <HAL_RCC_OscConfig+0x2e4>)
 8002ebc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ec0:	6013      	str	r3, [r2, #0]
 8002ec2:	e01e      	b.n	8002f02 <HAL_RCC_OscConfig+0x172>
 8002ec4:	1d3b      	adds	r3, r7, #4
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ece:	d10c      	bne.n	8002eea <HAL_RCC_OscConfig+0x15a>
 8002ed0:	4b68      	ldr	r3, [pc, #416]	; (8003074 <HAL_RCC_OscConfig+0x2e4>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a67      	ldr	r2, [pc, #412]	; (8003074 <HAL_RCC_OscConfig+0x2e4>)
 8002ed6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002eda:	6013      	str	r3, [r2, #0]
 8002edc:	4b65      	ldr	r3, [pc, #404]	; (8003074 <HAL_RCC_OscConfig+0x2e4>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a64      	ldr	r2, [pc, #400]	; (8003074 <HAL_RCC_OscConfig+0x2e4>)
 8002ee2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ee6:	6013      	str	r3, [r2, #0]
 8002ee8:	e00b      	b.n	8002f02 <HAL_RCC_OscConfig+0x172>
 8002eea:	4b62      	ldr	r3, [pc, #392]	; (8003074 <HAL_RCC_OscConfig+0x2e4>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a61      	ldr	r2, [pc, #388]	; (8003074 <HAL_RCC_OscConfig+0x2e4>)
 8002ef0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ef4:	6013      	str	r3, [r2, #0]
 8002ef6:	4b5f      	ldr	r3, [pc, #380]	; (8003074 <HAL_RCC_OscConfig+0x2e4>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a5e      	ldr	r2, [pc, #376]	; (8003074 <HAL_RCC_OscConfig+0x2e4>)
 8002efc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f00:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f02:	1d3b      	adds	r3, r7, #4
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d059      	beq.n	8002fc0 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f0c:	f7fd fe12 	bl	8000b34 <HAL_GetTick>
 8002f10:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f14:	e00a      	b.n	8002f2c <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f16:	f7fd fe0d 	bl	8000b34 <HAL_GetTick>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	2b64      	cmp	r3, #100	; 0x64
 8002f24:	d902      	bls.n	8002f2c <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	f000 be40 	b.w	8003bac <HAL_RCC_OscConfig+0xe1c>
 8002f2c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f30:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f34:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8002f38:	fa93 f3a3 	rbit	r3, r3
 8002f3c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8002f40:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f44:	fab3 f383 	clz	r3, r3
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	095b      	lsrs	r3, r3, #5
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	f043 0301 	orr.w	r3, r3, #1
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d102      	bne.n	8002f5e <HAL_RCC_OscConfig+0x1ce>
 8002f58:	4b46      	ldr	r3, [pc, #280]	; (8003074 <HAL_RCC_OscConfig+0x2e4>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	e015      	b.n	8002f8a <HAL_RCC_OscConfig+0x1fa>
 8002f5e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f62:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f66:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8002f6a:	fa93 f3a3 	rbit	r3, r3
 8002f6e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8002f72:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f76:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002f7a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8002f7e:	fa93 f3a3 	rbit	r3, r3
 8002f82:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002f86:	4b3b      	ldr	r3, [pc, #236]	; (8003074 <HAL_RCC_OscConfig+0x2e4>)
 8002f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002f8e:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8002f92:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8002f96:	fa92 f2a2 	rbit	r2, r2
 8002f9a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8002f9e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002fa2:	fab2 f282 	clz	r2, r2
 8002fa6:	b2d2      	uxtb	r2, r2
 8002fa8:	f042 0220 	orr.w	r2, r2, #32
 8002fac:	b2d2      	uxtb	r2, r2
 8002fae:	f002 021f 	and.w	r2, r2, #31
 8002fb2:	2101      	movs	r1, #1
 8002fb4:	fa01 f202 	lsl.w	r2, r1, r2
 8002fb8:	4013      	ands	r3, r2
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d0ab      	beq.n	8002f16 <HAL_RCC_OscConfig+0x186>
 8002fbe:	e05c      	b.n	800307a <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fc0:	f7fd fdb8 	bl	8000b34 <HAL_GetTick>
 8002fc4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fc8:	e00a      	b.n	8002fe0 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fca:	f7fd fdb3 	bl	8000b34 <HAL_GetTick>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	2b64      	cmp	r3, #100	; 0x64
 8002fd8:	d902      	bls.n	8002fe0 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	f000 bde6 	b.w	8003bac <HAL_RCC_OscConfig+0xe1c>
 8002fe0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002fe4:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8002fec:	fa93 f3a3 	rbit	r3, r3
 8002ff0:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8002ff4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ff8:	fab3 f383 	clz	r3, r3
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	095b      	lsrs	r3, r3, #5
 8003000:	b2db      	uxtb	r3, r3
 8003002:	f043 0301 	orr.w	r3, r3, #1
 8003006:	b2db      	uxtb	r3, r3
 8003008:	2b01      	cmp	r3, #1
 800300a:	d102      	bne.n	8003012 <HAL_RCC_OscConfig+0x282>
 800300c:	4b19      	ldr	r3, [pc, #100]	; (8003074 <HAL_RCC_OscConfig+0x2e4>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	e015      	b.n	800303e <HAL_RCC_OscConfig+0x2ae>
 8003012:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003016:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800301a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800301e:	fa93 f3a3 	rbit	r3, r3
 8003022:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8003026:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800302a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800302e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003032:	fa93 f3a3 	rbit	r3, r3
 8003036:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800303a:	4b0e      	ldr	r3, [pc, #56]	; (8003074 <HAL_RCC_OscConfig+0x2e4>)
 800303c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003042:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8003046:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800304a:	fa92 f2a2 	rbit	r2, r2
 800304e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8003052:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003056:	fab2 f282 	clz	r2, r2
 800305a:	b2d2      	uxtb	r2, r2
 800305c:	f042 0220 	orr.w	r2, r2, #32
 8003060:	b2d2      	uxtb	r2, r2
 8003062:	f002 021f 	and.w	r2, r2, #31
 8003066:	2101      	movs	r1, #1
 8003068:	fa01 f202 	lsl.w	r2, r1, r2
 800306c:	4013      	ands	r3, r2
 800306e:	2b00      	cmp	r3, #0
 8003070:	d1ab      	bne.n	8002fca <HAL_RCC_OscConfig+0x23a>
 8003072:	e002      	b.n	800307a <HAL_RCC_OscConfig+0x2ea>
 8003074:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003078:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800307a:	1d3b      	adds	r3, r7, #4
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0302 	and.w	r3, r3, #2
 8003084:	2b00      	cmp	r3, #0
 8003086:	f000 8170 	beq.w	800336a <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800308a:	4bd0      	ldr	r3, [pc, #832]	; (80033cc <HAL_RCC_OscConfig+0x63c>)
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	f003 030c 	and.w	r3, r3, #12
 8003092:	2b00      	cmp	r3, #0
 8003094:	d00c      	beq.n	80030b0 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003096:	4bcd      	ldr	r3, [pc, #820]	; (80033cc <HAL_RCC_OscConfig+0x63c>)
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	f003 030c 	and.w	r3, r3, #12
 800309e:	2b08      	cmp	r3, #8
 80030a0:	d16d      	bne.n	800317e <HAL_RCC_OscConfig+0x3ee>
 80030a2:	4bca      	ldr	r3, [pc, #808]	; (80033cc <HAL_RCC_OscConfig+0x63c>)
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80030aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030ae:	d166      	bne.n	800317e <HAL_RCC_OscConfig+0x3ee>
 80030b0:	2302      	movs	r3, #2
 80030b2:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030b6:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80030ba:	fa93 f3a3 	rbit	r3, r3
 80030be:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80030c2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030c6:	fab3 f383 	clz	r3, r3
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	095b      	lsrs	r3, r3, #5
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	f043 0301 	orr.w	r3, r3, #1
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d102      	bne.n	80030e0 <HAL_RCC_OscConfig+0x350>
 80030da:	4bbc      	ldr	r3, [pc, #752]	; (80033cc <HAL_RCC_OscConfig+0x63c>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	e013      	b.n	8003108 <HAL_RCC_OscConfig+0x378>
 80030e0:	2302      	movs	r3, #2
 80030e2:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030e6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80030ea:	fa93 f3a3 	rbit	r3, r3
 80030ee:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80030f2:	2302      	movs	r3, #2
 80030f4:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80030f8:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80030fc:	fa93 f3a3 	rbit	r3, r3
 8003100:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003104:	4bb1      	ldr	r3, [pc, #708]	; (80033cc <HAL_RCC_OscConfig+0x63c>)
 8003106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003108:	2202      	movs	r2, #2
 800310a:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 800310e:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8003112:	fa92 f2a2 	rbit	r2, r2
 8003116:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 800311a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800311e:	fab2 f282 	clz	r2, r2
 8003122:	b2d2      	uxtb	r2, r2
 8003124:	f042 0220 	orr.w	r2, r2, #32
 8003128:	b2d2      	uxtb	r2, r2
 800312a:	f002 021f 	and.w	r2, r2, #31
 800312e:	2101      	movs	r1, #1
 8003130:	fa01 f202 	lsl.w	r2, r1, r2
 8003134:	4013      	ands	r3, r2
 8003136:	2b00      	cmp	r3, #0
 8003138:	d007      	beq.n	800314a <HAL_RCC_OscConfig+0x3ba>
 800313a:	1d3b      	adds	r3, r7, #4
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	2b01      	cmp	r3, #1
 8003142:	d002      	beq.n	800314a <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	f000 bd31 	b.w	8003bac <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800314a:	4ba0      	ldr	r3, [pc, #640]	; (80033cc <HAL_RCC_OscConfig+0x63c>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003152:	1d3b      	adds	r3, r7, #4
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	691b      	ldr	r3, [r3, #16]
 8003158:	21f8      	movs	r1, #248	; 0xf8
 800315a:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800315e:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8003162:	fa91 f1a1 	rbit	r1, r1
 8003166:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 800316a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800316e:	fab1 f181 	clz	r1, r1
 8003172:	b2c9      	uxtb	r1, r1
 8003174:	408b      	lsls	r3, r1
 8003176:	4995      	ldr	r1, [pc, #596]	; (80033cc <HAL_RCC_OscConfig+0x63c>)
 8003178:	4313      	orrs	r3, r2
 800317a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800317c:	e0f5      	b.n	800336a <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800317e:	1d3b      	adds	r3, r7, #4
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	2b00      	cmp	r3, #0
 8003186:	f000 8085 	beq.w	8003294 <HAL_RCC_OscConfig+0x504>
 800318a:	2301      	movs	r3, #1
 800318c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003190:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8003194:	fa93 f3a3 	rbit	r3, r3
 8003198:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 800319c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031a0:	fab3 f383 	clz	r3, r3
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80031aa:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	461a      	mov	r2, r3
 80031b2:	2301      	movs	r3, #1
 80031b4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031b6:	f7fd fcbd 	bl	8000b34 <HAL_GetTick>
 80031ba:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031be:	e00a      	b.n	80031d6 <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031c0:	f7fd fcb8 	bl	8000b34 <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80031ca:	1ad3      	subs	r3, r2, r3
 80031cc:	2b02      	cmp	r3, #2
 80031ce:	d902      	bls.n	80031d6 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80031d0:	2303      	movs	r3, #3
 80031d2:	f000 bceb 	b.w	8003bac <HAL_RCC_OscConfig+0xe1c>
 80031d6:	2302      	movs	r3, #2
 80031d8:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031dc:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80031e0:	fa93 f3a3 	rbit	r3, r3
 80031e4:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80031e8:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031ec:	fab3 f383 	clz	r3, r3
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	095b      	lsrs	r3, r3, #5
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	f043 0301 	orr.w	r3, r3, #1
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d102      	bne.n	8003206 <HAL_RCC_OscConfig+0x476>
 8003200:	4b72      	ldr	r3, [pc, #456]	; (80033cc <HAL_RCC_OscConfig+0x63c>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	e013      	b.n	800322e <HAL_RCC_OscConfig+0x49e>
 8003206:	2302      	movs	r3, #2
 8003208:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800320c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003210:	fa93 f3a3 	rbit	r3, r3
 8003214:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8003218:	2302      	movs	r3, #2
 800321a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800321e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003222:	fa93 f3a3 	rbit	r3, r3
 8003226:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800322a:	4b68      	ldr	r3, [pc, #416]	; (80033cc <HAL_RCC_OscConfig+0x63c>)
 800322c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322e:	2202      	movs	r2, #2
 8003230:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8003234:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8003238:	fa92 f2a2 	rbit	r2, r2
 800323c:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8003240:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003244:	fab2 f282 	clz	r2, r2
 8003248:	b2d2      	uxtb	r2, r2
 800324a:	f042 0220 	orr.w	r2, r2, #32
 800324e:	b2d2      	uxtb	r2, r2
 8003250:	f002 021f 	and.w	r2, r2, #31
 8003254:	2101      	movs	r1, #1
 8003256:	fa01 f202 	lsl.w	r2, r1, r2
 800325a:	4013      	ands	r3, r2
 800325c:	2b00      	cmp	r3, #0
 800325e:	d0af      	beq.n	80031c0 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003260:	4b5a      	ldr	r3, [pc, #360]	; (80033cc <HAL_RCC_OscConfig+0x63c>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003268:	1d3b      	adds	r3, r7, #4
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	691b      	ldr	r3, [r3, #16]
 800326e:	21f8      	movs	r1, #248	; 0xf8
 8003270:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003274:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8003278:	fa91 f1a1 	rbit	r1, r1
 800327c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8003280:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003284:	fab1 f181 	clz	r1, r1
 8003288:	b2c9      	uxtb	r1, r1
 800328a:	408b      	lsls	r3, r1
 800328c:	494f      	ldr	r1, [pc, #316]	; (80033cc <HAL_RCC_OscConfig+0x63c>)
 800328e:	4313      	orrs	r3, r2
 8003290:	600b      	str	r3, [r1, #0]
 8003292:	e06a      	b.n	800336a <HAL_RCC_OscConfig+0x5da>
 8003294:	2301      	movs	r3, #1
 8003296:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800329a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800329e:	fa93 f3a3 	rbit	r3, r3
 80032a2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80032a6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032aa:	fab3 f383 	clz	r3, r3
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80032b4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	461a      	mov	r2, r3
 80032bc:	2300      	movs	r3, #0
 80032be:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032c0:	f7fd fc38 	bl	8000b34 <HAL_GetTick>
 80032c4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032c8:	e00a      	b.n	80032e0 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032ca:	f7fd fc33 	bl	8000b34 <HAL_GetTick>
 80032ce:	4602      	mov	r2, r0
 80032d0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d902      	bls.n	80032e0 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	f000 bc66 	b.w	8003bac <HAL_RCC_OscConfig+0xe1c>
 80032e0:	2302      	movs	r3, #2
 80032e2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032e6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80032ea:	fa93 f3a3 	rbit	r3, r3
 80032ee:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80032f2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032f6:	fab3 f383 	clz	r3, r3
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	095b      	lsrs	r3, r3, #5
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	f043 0301 	orr.w	r3, r3, #1
 8003304:	b2db      	uxtb	r3, r3
 8003306:	2b01      	cmp	r3, #1
 8003308:	d102      	bne.n	8003310 <HAL_RCC_OscConfig+0x580>
 800330a:	4b30      	ldr	r3, [pc, #192]	; (80033cc <HAL_RCC_OscConfig+0x63c>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	e013      	b.n	8003338 <HAL_RCC_OscConfig+0x5a8>
 8003310:	2302      	movs	r3, #2
 8003312:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003316:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800331a:	fa93 f3a3 	rbit	r3, r3
 800331e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003322:	2302      	movs	r3, #2
 8003324:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003328:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800332c:	fa93 f3a3 	rbit	r3, r3
 8003330:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003334:	4b25      	ldr	r3, [pc, #148]	; (80033cc <HAL_RCC_OscConfig+0x63c>)
 8003336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003338:	2202      	movs	r2, #2
 800333a:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800333e:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8003342:	fa92 f2a2 	rbit	r2, r2
 8003346:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 800334a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800334e:	fab2 f282 	clz	r2, r2
 8003352:	b2d2      	uxtb	r2, r2
 8003354:	f042 0220 	orr.w	r2, r2, #32
 8003358:	b2d2      	uxtb	r2, r2
 800335a:	f002 021f 	and.w	r2, r2, #31
 800335e:	2101      	movs	r1, #1
 8003360:	fa01 f202 	lsl.w	r2, r1, r2
 8003364:	4013      	ands	r3, r2
 8003366:	2b00      	cmp	r3, #0
 8003368:	d1af      	bne.n	80032ca <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800336a:	1d3b      	adds	r3, r7, #4
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0308 	and.w	r3, r3, #8
 8003374:	2b00      	cmp	r3, #0
 8003376:	f000 80da 	beq.w	800352e <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800337a:	1d3b      	adds	r3, r7, #4
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	695b      	ldr	r3, [r3, #20]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d069      	beq.n	8003458 <HAL_RCC_OscConfig+0x6c8>
 8003384:	2301      	movs	r3, #1
 8003386:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800338a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800338e:	fa93 f3a3 	rbit	r3, r3
 8003392:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8003396:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800339a:	fab3 f383 	clz	r3, r3
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	461a      	mov	r2, r3
 80033a2:	4b0b      	ldr	r3, [pc, #44]	; (80033d0 <HAL_RCC_OscConfig+0x640>)
 80033a4:	4413      	add	r3, r2
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	461a      	mov	r2, r3
 80033aa:	2301      	movs	r3, #1
 80033ac:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033ae:	f7fd fbc1 	bl	8000b34 <HAL_GetTick>
 80033b2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033b6:	e00d      	b.n	80033d4 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033b8:	f7fd fbbc 	bl	8000b34 <HAL_GetTick>
 80033bc:	4602      	mov	r2, r0
 80033be:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80033c2:	1ad3      	subs	r3, r2, r3
 80033c4:	2b02      	cmp	r3, #2
 80033c6:	d905      	bls.n	80033d4 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 80033c8:	2303      	movs	r3, #3
 80033ca:	e3ef      	b.n	8003bac <HAL_RCC_OscConfig+0xe1c>
 80033cc:	40021000 	.word	0x40021000
 80033d0:	10908120 	.word	0x10908120
 80033d4:	2302      	movs	r3, #2
 80033d6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033de:	fa93 f2a3 	rbit	r2, r3
 80033e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80033e6:	601a      	str	r2, [r3, #0]
 80033e8:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80033ec:	2202      	movs	r2, #2
 80033ee:	601a      	str	r2, [r3, #0]
 80033f0:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	fa93 f2a3 	rbit	r2, r3
 80033fa:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80033fe:	601a      	str	r2, [r3, #0]
 8003400:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003404:	2202      	movs	r2, #2
 8003406:	601a      	str	r2, [r3, #0]
 8003408:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	fa93 f2a3 	rbit	r2, r3
 8003412:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003416:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003418:	4ba4      	ldr	r3, [pc, #656]	; (80036ac <HAL_RCC_OscConfig+0x91c>)
 800341a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800341c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003420:	2102      	movs	r1, #2
 8003422:	6019      	str	r1, [r3, #0]
 8003424:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	fa93 f1a3 	rbit	r1, r3
 800342e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003432:	6019      	str	r1, [r3, #0]
  return result;
 8003434:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	fab3 f383 	clz	r3, r3
 800343e:	b2db      	uxtb	r3, r3
 8003440:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003444:	b2db      	uxtb	r3, r3
 8003446:	f003 031f 	and.w	r3, r3, #31
 800344a:	2101      	movs	r1, #1
 800344c:	fa01 f303 	lsl.w	r3, r1, r3
 8003450:	4013      	ands	r3, r2
 8003452:	2b00      	cmp	r3, #0
 8003454:	d0b0      	beq.n	80033b8 <HAL_RCC_OscConfig+0x628>
 8003456:	e06a      	b.n	800352e <HAL_RCC_OscConfig+0x79e>
 8003458:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800345c:	2201      	movs	r2, #1
 800345e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003460:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	fa93 f2a3 	rbit	r2, r3
 800346a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800346e:	601a      	str	r2, [r3, #0]
  return result;
 8003470:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003474:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003476:	fab3 f383 	clz	r3, r3
 800347a:	b2db      	uxtb	r3, r3
 800347c:	461a      	mov	r2, r3
 800347e:	4b8c      	ldr	r3, [pc, #560]	; (80036b0 <HAL_RCC_OscConfig+0x920>)
 8003480:	4413      	add	r3, r2
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	461a      	mov	r2, r3
 8003486:	2300      	movs	r3, #0
 8003488:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800348a:	f7fd fb53 	bl	8000b34 <HAL_GetTick>
 800348e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003492:	e009      	b.n	80034a8 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003494:	f7fd fb4e 	bl	8000b34 <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	2b02      	cmp	r3, #2
 80034a2:	d901      	bls.n	80034a8 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 80034a4:	2303      	movs	r3, #3
 80034a6:	e381      	b.n	8003bac <HAL_RCC_OscConfig+0xe1c>
 80034a8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80034ac:	2202      	movs	r2, #2
 80034ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034b0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	fa93 f2a3 	rbit	r2, r3
 80034ba:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80034be:	601a      	str	r2, [r3, #0]
 80034c0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80034c4:	2202      	movs	r2, #2
 80034c6:	601a      	str	r2, [r3, #0]
 80034c8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	fa93 f2a3 	rbit	r2, r3
 80034d2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80034d6:	601a      	str	r2, [r3, #0]
 80034d8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80034dc:	2202      	movs	r2, #2
 80034de:	601a      	str	r2, [r3, #0]
 80034e0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	fa93 f2a3 	rbit	r2, r3
 80034ea:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80034ee:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034f0:	4b6e      	ldr	r3, [pc, #440]	; (80036ac <HAL_RCC_OscConfig+0x91c>)
 80034f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034f4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80034f8:	2102      	movs	r1, #2
 80034fa:	6019      	str	r1, [r3, #0]
 80034fc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	fa93 f1a3 	rbit	r1, r3
 8003506:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800350a:	6019      	str	r1, [r3, #0]
  return result;
 800350c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	fab3 f383 	clz	r3, r3
 8003516:	b2db      	uxtb	r3, r3
 8003518:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800351c:	b2db      	uxtb	r3, r3
 800351e:	f003 031f 	and.w	r3, r3, #31
 8003522:	2101      	movs	r1, #1
 8003524:	fa01 f303 	lsl.w	r3, r1, r3
 8003528:	4013      	ands	r3, r2
 800352a:	2b00      	cmp	r3, #0
 800352c:	d1b2      	bne.n	8003494 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800352e:	1d3b      	adds	r3, r7, #4
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f003 0304 	and.w	r3, r3, #4
 8003538:	2b00      	cmp	r3, #0
 800353a:	f000 8157 	beq.w	80037ec <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800353e:	2300      	movs	r3, #0
 8003540:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003544:	4b59      	ldr	r3, [pc, #356]	; (80036ac <HAL_RCC_OscConfig+0x91c>)
 8003546:	69db      	ldr	r3, [r3, #28]
 8003548:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800354c:	2b00      	cmp	r3, #0
 800354e:	d112      	bne.n	8003576 <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003550:	4b56      	ldr	r3, [pc, #344]	; (80036ac <HAL_RCC_OscConfig+0x91c>)
 8003552:	69db      	ldr	r3, [r3, #28]
 8003554:	4a55      	ldr	r2, [pc, #340]	; (80036ac <HAL_RCC_OscConfig+0x91c>)
 8003556:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800355a:	61d3      	str	r3, [r2, #28]
 800355c:	4b53      	ldr	r3, [pc, #332]	; (80036ac <HAL_RCC_OscConfig+0x91c>)
 800355e:	69db      	ldr	r3, [r3, #28]
 8003560:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003564:	f107 030c 	add.w	r3, r7, #12
 8003568:	601a      	str	r2, [r3, #0]
 800356a:	f107 030c 	add.w	r3, r7, #12
 800356e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003570:	2301      	movs	r3, #1
 8003572:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003576:	4b4f      	ldr	r3, [pc, #316]	; (80036b4 <HAL_RCC_OscConfig+0x924>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800357e:	2b00      	cmp	r3, #0
 8003580:	d11a      	bne.n	80035b8 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003582:	4b4c      	ldr	r3, [pc, #304]	; (80036b4 <HAL_RCC_OscConfig+0x924>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a4b      	ldr	r2, [pc, #300]	; (80036b4 <HAL_RCC_OscConfig+0x924>)
 8003588:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800358c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800358e:	f7fd fad1 	bl	8000b34 <HAL_GetTick>
 8003592:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003596:	e009      	b.n	80035ac <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003598:	f7fd facc 	bl	8000b34 <HAL_GetTick>
 800359c:	4602      	mov	r2, r0
 800359e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80035a2:	1ad3      	subs	r3, r2, r3
 80035a4:	2b64      	cmp	r3, #100	; 0x64
 80035a6:	d901      	bls.n	80035ac <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 80035a8:	2303      	movs	r3, #3
 80035aa:	e2ff      	b.n	8003bac <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035ac:	4b41      	ldr	r3, [pc, #260]	; (80036b4 <HAL_RCC_OscConfig+0x924>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d0ef      	beq.n	8003598 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035b8:	1d3b      	adds	r3, r7, #4
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d106      	bne.n	80035d0 <HAL_RCC_OscConfig+0x840>
 80035c2:	4b3a      	ldr	r3, [pc, #232]	; (80036ac <HAL_RCC_OscConfig+0x91c>)
 80035c4:	6a1b      	ldr	r3, [r3, #32]
 80035c6:	4a39      	ldr	r2, [pc, #228]	; (80036ac <HAL_RCC_OscConfig+0x91c>)
 80035c8:	f043 0301 	orr.w	r3, r3, #1
 80035cc:	6213      	str	r3, [r2, #32]
 80035ce:	e02f      	b.n	8003630 <HAL_RCC_OscConfig+0x8a0>
 80035d0:	1d3b      	adds	r3, r7, #4
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d10c      	bne.n	80035f4 <HAL_RCC_OscConfig+0x864>
 80035da:	4b34      	ldr	r3, [pc, #208]	; (80036ac <HAL_RCC_OscConfig+0x91c>)
 80035dc:	6a1b      	ldr	r3, [r3, #32]
 80035de:	4a33      	ldr	r2, [pc, #204]	; (80036ac <HAL_RCC_OscConfig+0x91c>)
 80035e0:	f023 0301 	bic.w	r3, r3, #1
 80035e4:	6213      	str	r3, [r2, #32]
 80035e6:	4b31      	ldr	r3, [pc, #196]	; (80036ac <HAL_RCC_OscConfig+0x91c>)
 80035e8:	6a1b      	ldr	r3, [r3, #32]
 80035ea:	4a30      	ldr	r2, [pc, #192]	; (80036ac <HAL_RCC_OscConfig+0x91c>)
 80035ec:	f023 0304 	bic.w	r3, r3, #4
 80035f0:	6213      	str	r3, [r2, #32]
 80035f2:	e01d      	b.n	8003630 <HAL_RCC_OscConfig+0x8a0>
 80035f4:	1d3b      	adds	r3, r7, #4
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	2b05      	cmp	r3, #5
 80035fc:	d10c      	bne.n	8003618 <HAL_RCC_OscConfig+0x888>
 80035fe:	4b2b      	ldr	r3, [pc, #172]	; (80036ac <HAL_RCC_OscConfig+0x91c>)
 8003600:	6a1b      	ldr	r3, [r3, #32]
 8003602:	4a2a      	ldr	r2, [pc, #168]	; (80036ac <HAL_RCC_OscConfig+0x91c>)
 8003604:	f043 0304 	orr.w	r3, r3, #4
 8003608:	6213      	str	r3, [r2, #32]
 800360a:	4b28      	ldr	r3, [pc, #160]	; (80036ac <HAL_RCC_OscConfig+0x91c>)
 800360c:	6a1b      	ldr	r3, [r3, #32]
 800360e:	4a27      	ldr	r2, [pc, #156]	; (80036ac <HAL_RCC_OscConfig+0x91c>)
 8003610:	f043 0301 	orr.w	r3, r3, #1
 8003614:	6213      	str	r3, [r2, #32]
 8003616:	e00b      	b.n	8003630 <HAL_RCC_OscConfig+0x8a0>
 8003618:	4b24      	ldr	r3, [pc, #144]	; (80036ac <HAL_RCC_OscConfig+0x91c>)
 800361a:	6a1b      	ldr	r3, [r3, #32]
 800361c:	4a23      	ldr	r2, [pc, #140]	; (80036ac <HAL_RCC_OscConfig+0x91c>)
 800361e:	f023 0301 	bic.w	r3, r3, #1
 8003622:	6213      	str	r3, [r2, #32]
 8003624:	4b21      	ldr	r3, [pc, #132]	; (80036ac <HAL_RCC_OscConfig+0x91c>)
 8003626:	6a1b      	ldr	r3, [r3, #32]
 8003628:	4a20      	ldr	r2, [pc, #128]	; (80036ac <HAL_RCC_OscConfig+0x91c>)
 800362a:	f023 0304 	bic.w	r3, r3, #4
 800362e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003630:	1d3b      	adds	r3, r7, #4
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d06a      	beq.n	8003710 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800363a:	f7fd fa7b 	bl	8000b34 <HAL_GetTick>
 800363e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003642:	e00b      	b.n	800365c <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003644:	f7fd fa76 	bl	8000b34 <HAL_GetTick>
 8003648:	4602      	mov	r2, r0
 800364a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800364e:	1ad3      	subs	r3, r2, r3
 8003650:	f241 3288 	movw	r2, #5000	; 0x1388
 8003654:	4293      	cmp	r3, r2
 8003656:	d901      	bls.n	800365c <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8003658:	2303      	movs	r3, #3
 800365a:	e2a7      	b.n	8003bac <HAL_RCC_OscConfig+0xe1c>
 800365c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003660:	2202      	movs	r2, #2
 8003662:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003664:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	fa93 f2a3 	rbit	r2, r3
 800366e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003672:	601a      	str	r2, [r3, #0]
 8003674:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003678:	2202      	movs	r2, #2
 800367a:	601a      	str	r2, [r3, #0]
 800367c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	fa93 f2a3 	rbit	r2, r3
 8003686:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800368a:	601a      	str	r2, [r3, #0]
  return result;
 800368c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003690:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003692:	fab3 f383 	clz	r3, r3
 8003696:	b2db      	uxtb	r3, r3
 8003698:	095b      	lsrs	r3, r3, #5
 800369a:	b2db      	uxtb	r3, r3
 800369c:	f043 0302 	orr.w	r3, r3, #2
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	2b02      	cmp	r3, #2
 80036a4:	d108      	bne.n	80036b8 <HAL_RCC_OscConfig+0x928>
 80036a6:	4b01      	ldr	r3, [pc, #4]	; (80036ac <HAL_RCC_OscConfig+0x91c>)
 80036a8:	6a1b      	ldr	r3, [r3, #32]
 80036aa:	e013      	b.n	80036d4 <HAL_RCC_OscConfig+0x944>
 80036ac:	40021000 	.word	0x40021000
 80036b0:	10908120 	.word	0x10908120
 80036b4:	40007000 	.word	0x40007000
 80036b8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80036bc:	2202      	movs	r2, #2
 80036be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036c0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	fa93 f2a3 	rbit	r2, r3
 80036ca:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80036ce:	601a      	str	r2, [r3, #0]
 80036d0:	4bc0      	ldr	r3, [pc, #768]	; (80039d4 <HAL_RCC_OscConfig+0xc44>)
 80036d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d4:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80036d8:	2102      	movs	r1, #2
 80036da:	6011      	str	r1, [r2, #0]
 80036dc:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80036e0:	6812      	ldr	r2, [r2, #0]
 80036e2:	fa92 f1a2 	rbit	r1, r2
 80036e6:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80036ea:	6011      	str	r1, [r2, #0]
  return result;
 80036ec:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80036f0:	6812      	ldr	r2, [r2, #0]
 80036f2:	fab2 f282 	clz	r2, r2
 80036f6:	b2d2      	uxtb	r2, r2
 80036f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036fc:	b2d2      	uxtb	r2, r2
 80036fe:	f002 021f 	and.w	r2, r2, #31
 8003702:	2101      	movs	r1, #1
 8003704:	fa01 f202 	lsl.w	r2, r1, r2
 8003708:	4013      	ands	r3, r2
 800370a:	2b00      	cmp	r3, #0
 800370c:	d09a      	beq.n	8003644 <HAL_RCC_OscConfig+0x8b4>
 800370e:	e063      	b.n	80037d8 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003710:	f7fd fa10 	bl	8000b34 <HAL_GetTick>
 8003714:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003718:	e00b      	b.n	8003732 <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800371a:	f7fd fa0b 	bl	8000b34 <HAL_GetTick>
 800371e:	4602      	mov	r2, r0
 8003720:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	f241 3288 	movw	r2, #5000	; 0x1388
 800372a:	4293      	cmp	r3, r2
 800372c:	d901      	bls.n	8003732 <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	e23c      	b.n	8003bac <HAL_RCC_OscConfig+0xe1c>
 8003732:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003736:	2202      	movs	r2, #2
 8003738:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800373a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	fa93 f2a3 	rbit	r2, r3
 8003744:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003748:	601a      	str	r2, [r3, #0]
 800374a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800374e:	2202      	movs	r2, #2
 8003750:	601a      	str	r2, [r3, #0]
 8003752:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	fa93 f2a3 	rbit	r2, r3
 800375c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003760:	601a      	str	r2, [r3, #0]
  return result;
 8003762:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003766:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003768:	fab3 f383 	clz	r3, r3
 800376c:	b2db      	uxtb	r3, r3
 800376e:	095b      	lsrs	r3, r3, #5
 8003770:	b2db      	uxtb	r3, r3
 8003772:	f043 0302 	orr.w	r3, r3, #2
 8003776:	b2db      	uxtb	r3, r3
 8003778:	2b02      	cmp	r3, #2
 800377a:	d102      	bne.n	8003782 <HAL_RCC_OscConfig+0x9f2>
 800377c:	4b95      	ldr	r3, [pc, #596]	; (80039d4 <HAL_RCC_OscConfig+0xc44>)
 800377e:	6a1b      	ldr	r3, [r3, #32]
 8003780:	e00d      	b.n	800379e <HAL_RCC_OscConfig+0xa0e>
 8003782:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003786:	2202      	movs	r2, #2
 8003788:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800378a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	fa93 f2a3 	rbit	r2, r3
 8003794:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003798:	601a      	str	r2, [r3, #0]
 800379a:	4b8e      	ldr	r3, [pc, #568]	; (80039d4 <HAL_RCC_OscConfig+0xc44>)
 800379c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379e:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80037a2:	2102      	movs	r1, #2
 80037a4:	6011      	str	r1, [r2, #0]
 80037a6:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80037aa:	6812      	ldr	r2, [r2, #0]
 80037ac:	fa92 f1a2 	rbit	r1, r2
 80037b0:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80037b4:	6011      	str	r1, [r2, #0]
  return result;
 80037b6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80037ba:	6812      	ldr	r2, [r2, #0]
 80037bc:	fab2 f282 	clz	r2, r2
 80037c0:	b2d2      	uxtb	r2, r2
 80037c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037c6:	b2d2      	uxtb	r2, r2
 80037c8:	f002 021f 	and.w	r2, r2, #31
 80037cc:	2101      	movs	r1, #1
 80037ce:	fa01 f202 	lsl.w	r2, r1, r2
 80037d2:	4013      	ands	r3, r2
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d1a0      	bne.n	800371a <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80037d8:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d105      	bne.n	80037ec <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037e0:	4b7c      	ldr	r3, [pc, #496]	; (80039d4 <HAL_RCC_OscConfig+0xc44>)
 80037e2:	69db      	ldr	r3, [r3, #28]
 80037e4:	4a7b      	ldr	r2, [pc, #492]	; (80039d4 <HAL_RCC_OscConfig+0xc44>)
 80037e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037ea:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037ec:	1d3b      	adds	r3, r7, #4
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	699b      	ldr	r3, [r3, #24]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	f000 81d9 	beq.w	8003baa <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037f8:	4b76      	ldr	r3, [pc, #472]	; (80039d4 <HAL_RCC_OscConfig+0xc44>)
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	f003 030c 	and.w	r3, r3, #12
 8003800:	2b08      	cmp	r3, #8
 8003802:	f000 81a6 	beq.w	8003b52 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003806:	1d3b      	adds	r3, r7, #4
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	699b      	ldr	r3, [r3, #24]
 800380c:	2b02      	cmp	r3, #2
 800380e:	f040 811e 	bne.w	8003a4e <HAL_RCC_OscConfig+0xcbe>
 8003812:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8003816:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800381a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800381c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	fa93 f2a3 	rbit	r2, r3
 8003826:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800382a:	601a      	str	r2, [r3, #0]
  return result;
 800382c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003830:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003832:	fab3 f383 	clz	r3, r3
 8003836:	b2db      	uxtb	r3, r3
 8003838:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800383c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	461a      	mov	r2, r3
 8003844:	2300      	movs	r3, #0
 8003846:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003848:	f7fd f974 	bl	8000b34 <HAL_GetTick>
 800384c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003850:	e009      	b.n	8003866 <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003852:	f7fd f96f 	bl	8000b34 <HAL_GetTick>
 8003856:	4602      	mov	r2, r0
 8003858:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	2b02      	cmp	r3, #2
 8003860:	d901      	bls.n	8003866 <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	e1a2      	b.n	8003bac <HAL_RCC_OscConfig+0xe1c>
 8003866:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800386a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800386e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003870:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	fa93 f2a3 	rbit	r2, r3
 800387a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800387e:	601a      	str	r2, [r3, #0]
  return result;
 8003880:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003884:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003886:	fab3 f383 	clz	r3, r3
 800388a:	b2db      	uxtb	r3, r3
 800388c:	095b      	lsrs	r3, r3, #5
 800388e:	b2db      	uxtb	r3, r3
 8003890:	f043 0301 	orr.w	r3, r3, #1
 8003894:	b2db      	uxtb	r3, r3
 8003896:	2b01      	cmp	r3, #1
 8003898:	d102      	bne.n	80038a0 <HAL_RCC_OscConfig+0xb10>
 800389a:	4b4e      	ldr	r3, [pc, #312]	; (80039d4 <HAL_RCC_OscConfig+0xc44>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	e01b      	b.n	80038d8 <HAL_RCC_OscConfig+0xb48>
 80038a0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80038a4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80038a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038aa:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	fa93 f2a3 	rbit	r2, r3
 80038b4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80038b8:	601a      	str	r2, [r3, #0]
 80038ba:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80038be:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80038c2:	601a      	str	r2, [r3, #0]
 80038c4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	fa93 f2a3 	rbit	r2, r3
 80038ce:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80038d2:	601a      	str	r2, [r3, #0]
 80038d4:	4b3f      	ldr	r3, [pc, #252]	; (80039d4 <HAL_RCC_OscConfig+0xc44>)
 80038d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d8:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80038dc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80038e0:	6011      	str	r1, [r2, #0]
 80038e2:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80038e6:	6812      	ldr	r2, [r2, #0]
 80038e8:	fa92 f1a2 	rbit	r1, r2
 80038ec:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80038f0:	6011      	str	r1, [r2, #0]
  return result;
 80038f2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80038f6:	6812      	ldr	r2, [r2, #0]
 80038f8:	fab2 f282 	clz	r2, r2
 80038fc:	b2d2      	uxtb	r2, r2
 80038fe:	f042 0220 	orr.w	r2, r2, #32
 8003902:	b2d2      	uxtb	r2, r2
 8003904:	f002 021f 	and.w	r2, r2, #31
 8003908:	2101      	movs	r1, #1
 800390a:	fa01 f202 	lsl.w	r2, r1, r2
 800390e:	4013      	ands	r3, r2
 8003910:	2b00      	cmp	r3, #0
 8003912:	d19e      	bne.n	8003852 <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003914:	4b2f      	ldr	r3, [pc, #188]	; (80039d4 <HAL_RCC_OscConfig+0xc44>)
 8003916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003918:	f023 020f 	bic.w	r2, r3, #15
 800391c:	1d3b      	adds	r3, r7, #4
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003922:	492c      	ldr	r1, [pc, #176]	; (80039d4 <HAL_RCC_OscConfig+0xc44>)
 8003924:	4313      	orrs	r3, r2
 8003926:	62cb      	str	r3, [r1, #44]	; 0x2c
 8003928:	4b2a      	ldr	r3, [pc, #168]	; (80039d4 <HAL_RCC_OscConfig+0xc44>)
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8003930:	1d3b      	adds	r3, r7, #4
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	6a19      	ldr	r1, [r3, #32]
 8003936:	1d3b      	adds	r3, r7, #4
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	69db      	ldr	r3, [r3, #28]
 800393c:	430b      	orrs	r3, r1
 800393e:	4925      	ldr	r1, [pc, #148]	; (80039d4 <HAL_RCC_OscConfig+0xc44>)
 8003940:	4313      	orrs	r3, r2
 8003942:	604b      	str	r3, [r1, #4]
 8003944:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003948:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800394c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800394e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	fa93 f2a3 	rbit	r2, r3
 8003958:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800395c:	601a      	str	r2, [r3, #0]
  return result;
 800395e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003962:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003964:	fab3 f383 	clz	r3, r3
 8003968:	b2db      	uxtb	r3, r3
 800396a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800396e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	461a      	mov	r2, r3
 8003976:	2301      	movs	r3, #1
 8003978:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800397a:	f7fd f8db 	bl	8000b34 <HAL_GetTick>
 800397e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003982:	e009      	b.n	8003998 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003984:	f7fd f8d6 	bl	8000b34 <HAL_GetTick>
 8003988:	4602      	mov	r2, r0
 800398a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800398e:	1ad3      	subs	r3, r2, r3
 8003990:	2b02      	cmp	r3, #2
 8003992:	d901      	bls.n	8003998 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8003994:	2303      	movs	r3, #3
 8003996:	e109      	b.n	8003bac <HAL_RCC_OscConfig+0xe1c>
 8003998:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800399c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80039a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039a2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	fa93 f2a3 	rbit	r2, r3
 80039ac:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80039b0:	601a      	str	r2, [r3, #0]
  return result;
 80039b2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80039b6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80039b8:	fab3 f383 	clz	r3, r3
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	095b      	lsrs	r3, r3, #5
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	f043 0301 	orr.w	r3, r3, #1
 80039c6:	b2db      	uxtb	r3, r3
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d105      	bne.n	80039d8 <HAL_RCC_OscConfig+0xc48>
 80039cc:	4b01      	ldr	r3, [pc, #4]	; (80039d4 <HAL_RCC_OscConfig+0xc44>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	e01e      	b.n	8003a10 <HAL_RCC_OscConfig+0xc80>
 80039d2:	bf00      	nop
 80039d4:	40021000 	.word	0x40021000
 80039d8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80039dc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80039e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039e2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	fa93 f2a3 	rbit	r2, r3
 80039ec:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80039f0:	601a      	str	r2, [r3, #0]
 80039f2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80039f6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80039fa:	601a      	str	r2, [r3, #0]
 80039fc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	fa93 f2a3 	rbit	r2, r3
 8003a06:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003a0a:	601a      	str	r2, [r3, #0]
 8003a0c:	4b6a      	ldr	r3, [pc, #424]	; (8003bb8 <HAL_RCC_OscConfig+0xe28>)
 8003a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a10:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003a14:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003a18:	6011      	str	r1, [r2, #0]
 8003a1a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003a1e:	6812      	ldr	r2, [r2, #0]
 8003a20:	fa92 f1a2 	rbit	r1, r2
 8003a24:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003a28:	6011      	str	r1, [r2, #0]
  return result;
 8003a2a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003a2e:	6812      	ldr	r2, [r2, #0]
 8003a30:	fab2 f282 	clz	r2, r2
 8003a34:	b2d2      	uxtb	r2, r2
 8003a36:	f042 0220 	orr.w	r2, r2, #32
 8003a3a:	b2d2      	uxtb	r2, r2
 8003a3c:	f002 021f 	and.w	r2, r2, #31
 8003a40:	2101      	movs	r1, #1
 8003a42:	fa01 f202 	lsl.w	r2, r1, r2
 8003a46:	4013      	ands	r3, r2
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d09b      	beq.n	8003984 <HAL_RCC_OscConfig+0xbf4>
 8003a4c:	e0ad      	b.n	8003baa <HAL_RCC_OscConfig+0xe1a>
 8003a4e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003a52:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003a56:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a58:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	fa93 f2a3 	rbit	r2, r3
 8003a62:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003a66:	601a      	str	r2, [r3, #0]
  return result;
 8003a68:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003a6c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a6e:	fab3 f383 	clz	r3, r3
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003a78:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	461a      	mov	r2, r3
 8003a80:	2300      	movs	r3, #0
 8003a82:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a84:	f7fd f856 	bl	8000b34 <HAL_GetTick>
 8003a88:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a8c:	e009      	b.n	8003aa2 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a8e:	f7fd f851 	bl	8000b34 <HAL_GetTick>
 8003a92:	4602      	mov	r2, r0
 8003a94:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	2b02      	cmp	r3, #2
 8003a9c:	d901      	bls.n	8003aa2 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8003a9e:	2303      	movs	r3, #3
 8003aa0:	e084      	b.n	8003bac <HAL_RCC_OscConfig+0xe1c>
 8003aa2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003aa6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003aaa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	fa93 f2a3 	rbit	r2, r3
 8003ab6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003aba:	601a      	str	r2, [r3, #0]
  return result;
 8003abc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003ac0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ac2:	fab3 f383 	clz	r3, r3
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	095b      	lsrs	r3, r3, #5
 8003aca:	b2db      	uxtb	r3, r3
 8003acc:	f043 0301 	orr.w	r3, r3, #1
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d102      	bne.n	8003adc <HAL_RCC_OscConfig+0xd4c>
 8003ad6:	4b38      	ldr	r3, [pc, #224]	; (8003bb8 <HAL_RCC_OscConfig+0xe28>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	e01b      	b.n	8003b14 <HAL_RCC_OscConfig+0xd84>
 8003adc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ae0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ae4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ae6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	fa93 f2a3 	rbit	r2, r3
 8003af0:	f107 0320 	add.w	r3, r7, #32
 8003af4:	601a      	str	r2, [r3, #0]
 8003af6:	f107 031c 	add.w	r3, r7, #28
 8003afa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003afe:	601a      	str	r2, [r3, #0]
 8003b00:	f107 031c 	add.w	r3, r7, #28
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	fa93 f2a3 	rbit	r2, r3
 8003b0a:	f107 0318 	add.w	r3, r7, #24
 8003b0e:	601a      	str	r2, [r3, #0]
 8003b10:	4b29      	ldr	r3, [pc, #164]	; (8003bb8 <HAL_RCC_OscConfig+0xe28>)
 8003b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b14:	f107 0214 	add.w	r2, r7, #20
 8003b18:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003b1c:	6011      	str	r1, [r2, #0]
 8003b1e:	f107 0214 	add.w	r2, r7, #20
 8003b22:	6812      	ldr	r2, [r2, #0]
 8003b24:	fa92 f1a2 	rbit	r1, r2
 8003b28:	f107 0210 	add.w	r2, r7, #16
 8003b2c:	6011      	str	r1, [r2, #0]
  return result;
 8003b2e:	f107 0210 	add.w	r2, r7, #16
 8003b32:	6812      	ldr	r2, [r2, #0]
 8003b34:	fab2 f282 	clz	r2, r2
 8003b38:	b2d2      	uxtb	r2, r2
 8003b3a:	f042 0220 	orr.w	r2, r2, #32
 8003b3e:	b2d2      	uxtb	r2, r2
 8003b40:	f002 021f 	and.w	r2, r2, #31
 8003b44:	2101      	movs	r1, #1
 8003b46:	fa01 f202 	lsl.w	r2, r1, r2
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d19e      	bne.n	8003a8e <HAL_RCC_OscConfig+0xcfe>
 8003b50:	e02b      	b.n	8003baa <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b52:	1d3b      	adds	r3, r7, #4
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	699b      	ldr	r3, [r3, #24]
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d101      	bne.n	8003b60 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e025      	b.n	8003bac <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003b60:	4b15      	ldr	r3, [pc, #84]	; (8003bb8 <HAL_RCC_OscConfig+0xe28>)
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8003b68:	4b13      	ldr	r3, [pc, #76]	; (8003bb8 <HAL_RCC_OscConfig+0xe28>)
 8003b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b6c:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003b70:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003b74:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8003b78:	1d3b      	adds	r3, r7, #4
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	69db      	ldr	r3, [r3, #28]
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d111      	bne.n	8003ba6 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003b82:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003b86:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003b8a:	1d3b      	adds	r3, r7, #4
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d108      	bne.n	8003ba6 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8003b94:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003b98:	f003 020f 	and.w	r2, r3, #15
 8003b9c:	1d3b      	adds	r3, r7, #4
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d001      	beq.n	8003baa <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e000      	b.n	8003bac <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8003baa:	2300      	movs	r3, #0
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	40021000 	.word	0x40021000

08003bbc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b09e      	sub	sp, #120	; 0x78
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d101      	bne.n	8003bd4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e162      	b.n	8003e9a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003bd4:	4b90      	ldr	r3, [pc, #576]	; (8003e18 <HAL_RCC_ClockConfig+0x25c>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 0307 	and.w	r3, r3, #7
 8003bdc:	683a      	ldr	r2, [r7, #0]
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d910      	bls.n	8003c04 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003be2:	4b8d      	ldr	r3, [pc, #564]	; (8003e18 <HAL_RCC_ClockConfig+0x25c>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f023 0207 	bic.w	r2, r3, #7
 8003bea:	498b      	ldr	r1, [pc, #556]	; (8003e18 <HAL_RCC_ClockConfig+0x25c>)
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bf2:	4b89      	ldr	r3, [pc, #548]	; (8003e18 <HAL_RCC_ClockConfig+0x25c>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 0307 	and.w	r3, r3, #7
 8003bfa:	683a      	ldr	r2, [r7, #0]
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d001      	beq.n	8003c04 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	e14a      	b.n	8003e9a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 0302 	and.w	r3, r3, #2
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d008      	beq.n	8003c22 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c10:	4b82      	ldr	r3, [pc, #520]	; (8003e1c <HAL_RCC_ClockConfig+0x260>)
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	497f      	ldr	r1, [pc, #508]	; (8003e1c <HAL_RCC_ClockConfig+0x260>)
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0301 	and.w	r3, r3, #1
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	f000 80dc 	beq.w	8003de8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d13c      	bne.n	8003cb2 <HAL_RCC_ClockConfig+0xf6>
 8003c38:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c3c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c40:	fa93 f3a3 	rbit	r3, r3
 8003c44:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003c46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c48:	fab3 f383 	clz	r3, r3
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	095b      	lsrs	r3, r3, #5
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	f043 0301 	orr.w	r3, r3, #1
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d102      	bne.n	8003c62 <HAL_RCC_ClockConfig+0xa6>
 8003c5c:	4b6f      	ldr	r3, [pc, #444]	; (8003e1c <HAL_RCC_ClockConfig+0x260>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	e00f      	b.n	8003c82 <HAL_RCC_ClockConfig+0xc6>
 8003c62:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c66:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003c6a:	fa93 f3a3 	rbit	r3, r3
 8003c6e:	667b      	str	r3, [r7, #100]	; 0x64
 8003c70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c74:	663b      	str	r3, [r7, #96]	; 0x60
 8003c76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c78:	fa93 f3a3 	rbit	r3, r3
 8003c7c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c7e:	4b67      	ldr	r3, [pc, #412]	; (8003e1c <HAL_RCC_ClockConfig+0x260>)
 8003c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c82:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003c86:	65ba      	str	r2, [r7, #88]	; 0x58
 8003c88:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003c8a:	fa92 f2a2 	rbit	r2, r2
 8003c8e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003c90:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003c92:	fab2 f282 	clz	r2, r2
 8003c96:	b2d2      	uxtb	r2, r2
 8003c98:	f042 0220 	orr.w	r2, r2, #32
 8003c9c:	b2d2      	uxtb	r2, r2
 8003c9e:	f002 021f 	and.w	r2, r2, #31
 8003ca2:	2101      	movs	r1, #1
 8003ca4:	fa01 f202 	lsl.w	r2, r1, r2
 8003ca8:	4013      	ands	r3, r2
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d17b      	bne.n	8003da6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e0f3      	b.n	8003e9a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	d13c      	bne.n	8003d34 <HAL_RCC_ClockConfig+0x178>
 8003cba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003cbe:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cc2:	fa93 f3a3 	rbit	r3, r3
 8003cc6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003cc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cca:	fab3 f383 	clz	r3, r3
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	095b      	lsrs	r3, r3, #5
 8003cd2:	b2db      	uxtb	r3, r3
 8003cd4:	f043 0301 	orr.w	r3, r3, #1
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d102      	bne.n	8003ce4 <HAL_RCC_ClockConfig+0x128>
 8003cde:	4b4f      	ldr	r3, [pc, #316]	; (8003e1c <HAL_RCC_ClockConfig+0x260>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	e00f      	b.n	8003d04 <HAL_RCC_ClockConfig+0x148>
 8003ce4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ce8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cec:	fa93 f3a3 	rbit	r3, r3
 8003cf0:	647b      	str	r3, [r7, #68]	; 0x44
 8003cf2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003cf6:	643b      	str	r3, [r7, #64]	; 0x40
 8003cf8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cfa:	fa93 f3a3 	rbit	r3, r3
 8003cfe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d00:	4b46      	ldr	r3, [pc, #280]	; (8003e1c <HAL_RCC_ClockConfig+0x260>)
 8003d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d04:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d08:	63ba      	str	r2, [r7, #56]	; 0x38
 8003d0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d0c:	fa92 f2a2 	rbit	r2, r2
 8003d10:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003d12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d14:	fab2 f282 	clz	r2, r2
 8003d18:	b2d2      	uxtb	r2, r2
 8003d1a:	f042 0220 	orr.w	r2, r2, #32
 8003d1e:	b2d2      	uxtb	r2, r2
 8003d20:	f002 021f 	and.w	r2, r2, #31
 8003d24:	2101      	movs	r1, #1
 8003d26:	fa01 f202 	lsl.w	r2, r1, r2
 8003d2a:	4013      	ands	r3, r2
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d13a      	bne.n	8003da6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	e0b2      	b.n	8003e9a <HAL_RCC_ClockConfig+0x2de>
 8003d34:	2302      	movs	r3, #2
 8003d36:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d3a:	fa93 f3a3 	rbit	r3, r3
 8003d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d42:	fab3 f383 	clz	r3, r3
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	095b      	lsrs	r3, r3, #5
 8003d4a:	b2db      	uxtb	r3, r3
 8003d4c:	f043 0301 	orr.w	r3, r3, #1
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d102      	bne.n	8003d5c <HAL_RCC_ClockConfig+0x1a0>
 8003d56:	4b31      	ldr	r3, [pc, #196]	; (8003e1c <HAL_RCC_ClockConfig+0x260>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	e00d      	b.n	8003d78 <HAL_RCC_ClockConfig+0x1bc>
 8003d5c:	2302      	movs	r3, #2
 8003d5e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d62:	fa93 f3a3 	rbit	r3, r3
 8003d66:	627b      	str	r3, [r7, #36]	; 0x24
 8003d68:	2302      	movs	r3, #2
 8003d6a:	623b      	str	r3, [r7, #32]
 8003d6c:	6a3b      	ldr	r3, [r7, #32]
 8003d6e:	fa93 f3a3 	rbit	r3, r3
 8003d72:	61fb      	str	r3, [r7, #28]
 8003d74:	4b29      	ldr	r3, [pc, #164]	; (8003e1c <HAL_RCC_ClockConfig+0x260>)
 8003d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d78:	2202      	movs	r2, #2
 8003d7a:	61ba      	str	r2, [r7, #24]
 8003d7c:	69ba      	ldr	r2, [r7, #24]
 8003d7e:	fa92 f2a2 	rbit	r2, r2
 8003d82:	617a      	str	r2, [r7, #20]
  return result;
 8003d84:	697a      	ldr	r2, [r7, #20]
 8003d86:	fab2 f282 	clz	r2, r2
 8003d8a:	b2d2      	uxtb	r2, r2
 8003d8c:	f042 0220 	orr.w	r2, r2, #32
 8003d90:	b2d2      	uxtb	r2, r2
 8003d92:	f002 021f 	and.w	r2, r2, #31
 8003d96:	2101      	movs	r1, #1
 8003d98:	fa01 f202 	lsl.w	r2, r1, r2
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d101      	bne.n	8003da6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e079      	b.n	8003e9a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003da6:	4b1d      	ldr	r3, [pc, #116]	; (8003e1c <HAL_RCC_ClockConfig+0x260>)
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	f023 0203 	bic.w	r2, r3, #3
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	491a      	ldr	r1, [pc, #104]	; (8003e1c <HAL_RCC_ClockConfig+0x260>)
 8003db4:	4313      	orrs	r3, r2
 8003db6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003db8:	f7fc febc 	bl	8000b34 <HAL_GetTick>
 8003dbc:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dbe:	e00a      	b.n	8003dd6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003dc0:	f7fc feb8 	bl	8000b34 <HAL_GetTick>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003dc8:	1ad3      	subs	r3, r2, r3
 8003dca:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d901      	bls.n	8003dd6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e061      	b.n	8003e9a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dd6:	4b11      	ldr	r3, [pc, #68]	; (8003e1c <HAL_RCC_ClockConfig+0x260>)
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	f003 020c 	and.w	r2, r3, #12
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	009b      	lsls	r3, r3, #2
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d1eb      	bne.n	8003dc0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003de8:	4b0b      	ldr	r3, [pc, #44]	; (8003e18 <HAL_RCC_ClockConfig+0x25c>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 0307 	and.w	r3, r3, #7
 8003df0:	683a      	ldr	r2, [r7, #0]
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d214      	bcs.n	8003e20 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003df6:	4b08      	ldr	r3, [pc, #32]	; (8003e18 <HAL_RCC_ClockConfig+0x25c>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f023 0207 	bic.w	r2, r3, #7
 8003dfe:	4906      	ldr	r1, [pc, #24]	; (8003e18 <HAL_RCC_ClockConfig+0x25c>)
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e06:	4b04      	ldr	r3, [pc, #16]	; (8003e18 <HAL_RCC_ClockConfig+0x25c>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 0307 	and.w	r3, r3, #7
 8003e0e:	683a      	ldr	r2, [r7, #0]
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d005      	beq.n	8003e20 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	e040      	b.n	8003e9a <HAL_RCC_ClockConfig+0x2de>
 8003e18:	40022000 	.word	0x40022000
 8003e1c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 0304 	and.w	r3, r3, #4
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d008      	beq.n	8003e3e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e2c:	4b1d      	ldr	r3, [pc, #116]	; (8003ea4 <HAL_RCC_ClockConfig+0x2e8>)
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	68db      	ldr	r3, [r3, #12]
 8003e38:	491a      	ldr	r1, [pc, #104]	; (8003ea4 <HAL_RCC_ClockConfig+0x2e8>)
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 0308 	and.w	r3, r3, #8
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d009      	beq.n	8003e5e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e4a:	4b16      	ldr	r3, [pc, #88]	; (8003ea4 <HAL_RCC_ClockConfig+0x2e8>)
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	691b      	ldr	r3, [r3, #16]
 8003e56:	00db      	lsls	r3, r3, #3
 8003e58:	4912      	ldr	r1, [pc, #72]	; (8003ea4 <HAL_RCC_ClockConfig+0x2e8>)
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003e5e:	f000 f829 	bl	8003eb4 <HAL_RCC_GetSysClockFreq>
 8003e62:	4601      	mov	r1, r0
 8003e64:	4b0f      	ldr	r3, [pc, #60]	; (8003ea4 <HAL_RCC_ClockConfig+0x2e8>)
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e6c:	22f0      	movs	r2, #240	; 0xf0
 8003e6e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e70:	693a      	ldr	r2, [r7, #16]
 8003e72:	fa92 f2a2 	rbit	r2, r2
 8003e76:	60fa      	str	r2, [r7, #12]
  return result;
 8003e78:	68fa      	ldr	r2, [r7, #12]
 8003e7a:	fab2 f282 	clz	r2, r2
 8003e7e:	b2d2      	uxtb	r2, r2
 8003e80:	40d3      	lsrs	r3, r2
 8003e82:	4a09      	ldr	r2, [pc, #36]	; (8003ea8 <HAL_RCC_ClockConfig+0x2ec>)
 8003e84:	5cd3      	ldrb	r3, [r2, r3]
 8003e86:	fa21 f303 	lsr.w	r3, r1, r3
 8003e8a:	4a08      	ldr	r2, [pc, #32]	; (8003eac <HAL_RCC_ClockConfig+0x2f0>)
 8003e8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003e8e:	4b08      	ldr	r3, [pc, #32]	; (8003eb0 <HAL_RCC_ClockConfig+0x2f4>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4618      	mov	r0, r3
 8003e94:	f7fc fe0a 	bl	8000aac <HAL_InitTick>
  
  return HAL_OK;
 8003e98:	2300      	movs	r3, #0
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3778      	adds	r7, #120	; 0x78
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}
 8003ea2:	bf00      	nop
 8003ea4:	40021000 	.word	0x40021000
 8003ea8:	08008038 	.word	0x08008038
 8003eac:	20000000 	.word	0x20000000
 8003eb0:	20000004 	.word	0x20000004

08003eb4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b08b      	sub	sp, #44	; 0x2c
 8003eb8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	61fb      	str	r3, [r7, #28]
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	61bb      	str	r3, [r7, #24]
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	627b      	str	r3, [r7, #36]	; 0x24
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003ece:	4b2a      	ldr	r3, [pc, #168]	; (8003f78 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	f003 030c 	and.w	r3, r3, #12
 8003eda:	2b04      	cmp	r3, #4
 8003edc:	d002      	beq.n	8003ee4 <HAL_RCC_GetSysClockFreq+0x30>
 8003ede:	2b08      	cmp	r3, #8
 8003ee0:	d003      	beq.n	8003eea <HAL_RCC_GetSysClockFreq+0x36>
 8003ee2:	e03f      	b.n	8003f64 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003ee4:	4b25      	ldr	r3, [pc, #148]	; (8003f7c <HAL_RCC_GetSysClockFreq+0xc8>)
 8003ee6:	623b      	str	r3, [r7, #32]
      break;
 8003ee8:	e03f      	b.n	8003f6a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003eea:	69fb      	ldr	r3, [r7, #28]
 8003eec:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003ef0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003ef4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ef6:	68ba      	ldr	r2, [r7, #8]
 8003ef8:	fa92 f2a2 	rbit	r2, r2
 8003efc:	607a      	str	r2, [r7, #4]
  return result;
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	fab2 f282 	clz	r2, r2
 8003f04:	b2d2      	uxtb	r2, r2
 8003f06:	40d3      	lsrs	r3, r2
 8003f08:	4a1d      	ldr	r2, [pc, #116]	; (8003f80 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003f0a:	5cd3      	ldrb	r3, [r2, r3]
 8003f0c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003f0e:	4b1a      	ldr	r3, [pc, #104]	; (8003f78 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f12:	f003 030f 	and.w	r3, r3, #15
 8003f16:	220f      	movs	r2, #15
 8003f18:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f1a:	693a      	ldr	r2, [r7, #16]
 8003f1c:	fa92 f2a2 	rbit	r2, r2
 8003f20:	60fa      	str	r2, [r7, #12]
  return result;
 8003f22:	68fa      	ldr	r2, [r7, #12]
 8003f24:	fab2 f282 	clz	r2, r2
 8003f28:	b2d2      	uxtb	r2, r2
 8003f2a:	40d3      	lsrs	r3, r2
 8003f2c:	4a15      	ldr	r2, [pc, #84]	; (8003f84 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003f2e:	5cd3      	ldrb	r3, [r2, r3]
 8003f30:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8003f32:	69fb      	ldr	r3, [r7, #28]
 8003f34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d008      	beq.n	8003f4e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003f3c:	4a0f      	ldr	r2, [pc, #60]	; (8003f7c <HAL_RCC_GetSysClockFreq+0xc8>)
 8003f3e:	69bb      	ldr	r3, [r7, #24]
 8003f40:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	fb02 f303 	mul.w	r3, r2, r3
 8003f4a:	627b      	str	r3, [r7, #36]	; 0x24
 8003f4c:	e007      	b.n	8003f5e <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003f4e:	4a0b      	ldr	r2, [pc, #44]	; (8003f7c <HAL_RCC_GetSysClockFreq+0xc8>)
 8003f50:	69bb      	ldr	r3, [r7, #24]
 8003f52:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	fb02 f303 	mul.w	r3, r2, r3
 8003f5c:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f60:	623b      	str	r3, [r7, #32]
      break;
 8003f62:	e002      	b.n	8003f6a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003f64:	4b05      	ldr	r3, [pc, #20]	; (8003f7c <HAL_RCC_GetSysClockFreq+0xc8>)
 8003f66:	623b      	str	r3, [r7, #32]
      break;
 8003f68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f6a:	6a3b      	ldr	r3, [r7, #32]
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	372c      	adds	r7, #44	; 0x2c
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr
 8003f78:	40021000 	.word	0x40021000
 8003f7c:	007a1200 	.word	0x007a1200
 8003f80:	08008050 	.word	0x08008050
 8003f84:	08008060 	.word	0x08008060

08003f88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f8c:	4b03      	ldr	r3, [pc, #12]	; (8003f9c <HAL_RCC_GetHCLKFreq+0x14>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	46bd      	mov	sp, r7
 8003f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f98:	4770      	bx	lr
 8003f9a:	bf00      	nop
 8003f9c:	20000000 	.word	0x20000000

08003fa0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b082      	sub	sp, #8
 8003fa4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003fa6:	f7ff ffef 	bl	8003f88 <HAL_RCC_GetHCLKFreq>
 8003faa:	4601      	mov	r1, r0
 8003fac:	4b0b      	ldr	r3, [pc, #44]	; (8003fdc <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003fb4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003fb8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fba:	687a      	ldr	r2, [r7, #4]
 8003fbc:	fa92 f2a2 	rbit	r2, r2
 8003fc0:	603a      	str	r2, [r7, #0]
  return result;
 8003fc2:	683a      	ldr	r2, [r7, #0]
 8003fc4:	fab2 f282 	clz	r2, r2
 8003fc8:	b2d2      	uxtb	r2, r2
 8003fca:	40d3      	lsrs	r3, r2
 8003fcc:	4a04      	ldr	r2, [pc, #16]	; (8003fe0 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003fce:	5cd3      	ldrb	r3, [r2, r3]
 8003fd0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3708      	adds	r7, #8
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}
 8003fdc:	40021000 	.word	0x40021000
 8003fe0:	08008048 	.word	0x08008048

08003fe4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b082      	sub	sp, #8
 8003fe8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003fea:	f7ff ffcd 	bl	8003f88 <HAL_RCC_GetHCLKFreq>
 8003fee:	4601      	mov	r1, r0
 8003ff0:	4b0b      	ldr	r3, [pc, #44]	; (8004020 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003ff8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003ffc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	fa92 f2a2 	rbit	r2, r2
 8004004:	603a      	str	r2, [r7, #0]
  return result;
 8004006:	683a      	ldr	r2, [r7, #0]
 8004008:	fab2 f282 	clz	r2, r2
 800400c:	b2d2      	uxtb	r2, r2
 800400e:	40d3      	lsrs	r3, r2
 8004010:	4a04      	ldr	r2, [pc, #16]	; (8004024 <HAL_RCC_GetPCLK2Freq+0x40>)
 8004012:	5cd3      	ldrb	r3, [r2, r3]
 8004014:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004018:	4618      	mov	r0, r3
 800401a:	3708      	adds	r7, #8
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}
 8004020:	40021000 	.word	0x40021000
 8004024:	08008048 	.word	0x08008048

08004028 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b092      	sub	sp, #72	; 0x48
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004030:	2300      	movs	r3, #0
 8004032:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004034:	2300      	movs	r3, #0
 8004036:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004038:	2300      	movs	r3, #0
 800403a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004046:	2b00      	cmp	r3, #0
 8004048:	f000 80d4 	beq.w	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800404c:	4b4e      	ldr	r3, [pc, #312]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800404e:	69db      	ldr	r3, [r3, #28]
 8004050:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004054:	2b00      	cmp	r3, #0
 8004056:	d10e      	bne.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004058:	4b4b      	ldr	r3, [pc, #300]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800405a:	69db      	ldr	r3, [r3, #28]
 800405c:	4a4a      	ldr	r2, [pc, #296]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800405e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004062:	61d3      	str	r3, [r2, #28]
 8004064:	4b48      	ldr	r3, [pc, #288]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004066:	69db      	ldr	r3, [r3, #28]
 8004068:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800406c:	60bb      	str	r3, [r7, #8]
 800406e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004070:	2301      	movs	r3, #1
 8004072:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004076:	4b45      	ldr	r3, [pc, #276]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800407e:	2b00      	cmp	r3, #0
 8004080:	d118      	bne.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004082:	4b42      	ldr	r3, [pc, #264]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a41      	ldr	r2, [pc, #260]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004088:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800408c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800408e:	f7fc fd51 	bl	8000b34 <HAL_GetTick>
 8004092:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004094:	e008      	b.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004096:	f7fc fd4d 	bl	8000b34 <HAL_GetTick>
 800409a:	4602      	mov	r2, r0
 800409c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800409e:	1ad3      	subs	r3, r2, r3
 80040a0:	2b64      	cmp	r3, #100	; 0x64
 80040a2:	d901      	bls.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80040a4:	2303      	movs	r3, #3
 80040a6:	e1d6      	b.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040a8:	4b38      	ldr	r3, [pc, #224]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d0f0      	beq.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80040b4:	4b34      	ldr	r3, [pc, #208]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040b6:	6a1b      	ldr	r3, [r3, #32]
 80040b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040bc:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80040be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	f000 8084 	beq.w	80041ce <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d07c      	beq.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80040d4:	4b2c      	ldr	r3, [pc, #176]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040d6:	6a1b      	ldr	r3, [r3, #32]
 80040d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80040e2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040e6:	fa93 f3a3 	rbit	r3, r3
 80040ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80040ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80040ee:	fab3 f383 	clz	r3, r3
 80040f2:	b2db      	uxtb	r3, r3
 80040f4:	461a      	mov	r2, r3
 80040f6:	4b26      	ldr	r3, [pc, #152]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80040f8:	4413      	add	r3, r2
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	461a      	mov	r2, r3
 80040fe:	2301      	movs	r3, #1
 8004100:	6013      	str	r3, [r2, #0]
 8004102:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004106:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800410a:	fa93 f3a3 	rbit	r3, r3
 800410e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004110:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004112:	fab3 f383 	clz	r3, r3
 8004116:	b2db      	uxtb	r3, r3
 8004118:	461a      	mov	r2, r3
 800411a:	4b1d      	ldr	r3, [pc, #116]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800411c:	4413      	add	r3, r2
 800411e:	009b      	lsls	r3, r3, #2
 8004120:	461a      	mov	r2, r3
 8004122:	2300      	movs	r3, #0
 8004124:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004126:	4a18      	ldr	r2, [pc, #96]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004128:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800412a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800412c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800412e:	f003 0301 	and.w	r3, r3, #1
 8004132:	2b00      	cmp	r3, #0
 8004134:	d04b      	beq.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004136:	f7fc fcfd 	bl	8000b34 <HAL_GetTick>
 800413a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800413c:	e00a      	b.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800413e:	f7fc fcf9 	bl	8000b34 <HAL_GetTick>
 8004142:	4602      	mov	r2, r0
 8004144:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004146:	1ad3      	subs	r3, r2, r3
 8004148:	f241 3288 	movw	r2, #5000	; 0x1388
 800414c:	4293      	cmp	r3, r2
 800414e:	d901      	bls.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004150:	2303      	movs	r3, #3
 8004152:	e180      	b.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8004154:	2302      	movs	r3, #2
 8004156:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800415a:	fa93 f3a3 	rbit	r3, r3
 800415e:	627b      	str	r3, [r7, #36]	; 0x24
 8004160:	2302      	movs	r3, #2
 8004162:	623b      	str	r3, [r7, #32]
 8004164:	6a3b      	ldr	r3, [r7, #32]
 8004166:	fa93 f3a3 	rbit	r3, r3
 800416a:	61fb      	str	r3, [r7, #28]
  return result;
 800416c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800416e:	fab3 f383 	clz	r3, r3
 8004172:	b2db      	uxtb	r3, r3
 8004174:	095b      	lsrs	r3, r3, #5
 8004176:	b2db      	uxtb	r3, r3
 8004178:	f043 0302 	orr.w	r3, r3, #2
 800417c:	b2db      	uxtb	r3, r3
 800417e:	2b02      	cmp	r3, #2
 8004180:	d108      	bne.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004182:	4b01      	ldr	r3, [pc, #4]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004184:	6a1b      	ldr	r3, [r3, #32]
 8004186:	e00d      	b.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004188:	40021000 	.word	0x40021000
 800418c:	40007000 	.word	0x40007000
 8004190:	10908100 	.word	0x10908100
 8004194:	2302      	movs	r3, #2
 8004196:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004198:	69bb      	ldr	r3, [r7, #24]
 800419a:	fa93 f3a3 	rbit	r3, r3
 800419e:	617b      	str	r3, [r7, #20]
 80041a0:	4ba0      	ldr	r3, [pc, #640]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80041a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a4:	2202      	movs	r2, #2
 80041a6:	613a      	str	r2, [r7, #16]
 80041a8:	693a      	ldr	r2, [r7, #16]
 80041aa:	fa92 f2a2 	rbit	r2, r2
 80041ae:	60fa      	str	r2, [r7, #12]
  return result;
 80041b0:	68fa      	ldr	r2, [r7, #12]
 80041b2:	fab2 f282 	clz	r2, r2
 80041b6:	b2d2      	uxtb	r2, r2
 80041b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041bc:	b2d2      	uxtb	r2, r2
 80041be:	f002 021f 	and.w	r2, r2, #31
 80041c2:	2101      	movs	r1, #1
 80041c4:	fa01 f202 	lsl.w	r2, r1, r2
 80041c8:	4013      	ands	r3, r2
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d0b7      	beq.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80041ce:	4b95      	ldr	r3, [pc, #596]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80041d0:	6a1b      	ldr	r3, [r3, #32]
 80041d2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	4992      	ldr	r1, [pc, #584]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80041dc:	4313      	orrs	r3, r2
 80041de:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80041e0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d105      	bne.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041e8:	4b8e      	ldr	r3, [pc, #568]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80041ea:	69db      	ldr	r3, [r3, #28]
 80041ec:	4a8d      	ldr	r2, [pc, #564]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80041ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041f2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 0301 	and.w	r3, r3, #1
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d008      	beq.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004200:	4b88      	ldr	r3, [pc, #544]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004204:	f023 0203 	bic.w	r2, r3, #3
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	4985      	ldr	r1, [pc, #532]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800420e:	4313      	orrs	r3, r2
 8004210:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 0302 	and.w	r3, r3, #2
 800421a:	2b00      	cmp	r3, #0
 800421c:	d008      	beq.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800421e:	4b81      	ldr	r3, [pc, #516]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004222:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	68db      	ldr	r3, [r3, #12]
 800422a:	497e      	ldr	r1, [pc, #504]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800422c:	4313      	orrs	r3, r2
 800422e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 0304 	and.w	r3, r3, #4
 8004238:	2b00      	cmp	r3, #0
 800423a:	d008      	beq.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800423c:	4b79      	ldr	r3, [pc, #484]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800423e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004240:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	691b      	ldr	r3, [r3, #16]
 8004248:	4976      	ldr	r1, [pc, #472]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800424a:	4313      	orrs	r3, r2
 800424c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 0320 	and.w	r3, r3, #32
 8004256:	2b00      	cmp	r3, #0
 8004258:	d008      	beq.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800425a:	4b72      	ldr	r3, [pc, #456]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800425c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800425e:	f023 0210 	bic.w	r2, r3, #16
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	69db      	ldr	r3, [r3, #28]
 8004266:	496f      	ldr	r1, [pc, #444]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004268:	4313      	orrs	r3, r2
 800426a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004274:	2b00      	cmp	r3, #0
 8004276:	d008      	beq.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004278:	4b6a      	ldr	r3, [pc, #424]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004284:	4967      	ldr	r1, [pc, #412]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004286:	4313      	orrs	r3, r2
 8004288:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004292:	2b00      	cmp	r3, #0
 8004294:	d008      	beq.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004296:	4b63      	ldr	r3, [pc, #396]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800429a:	f023 0220 	bic.w	r2, r3, #32
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6a1b      	ldr	r3, [r3, #32]
 80042a2:	4960      	ldr	r1, [pc, #384]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80042a4:	4313      	orrs	r3, r2
 80042a6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d008      	beq.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80042b4:	4b5b      	ldr	r3, [pc, #364]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80042b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c0:	4958      	ldr	r1, [pc, #352]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80042c2:	4313      	orrs	r3, r2
 80042c4:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 0308 	and.w	r3, r3, #8
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d008      	beq.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80042d2:	4b54      	ldr	r3, [pc, #336]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80042d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042d6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	695b      	ldr	r3, [r3, #20]
 80042de:	4951      	ldr	r1, [pc, #324]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80042e0:	4313      	orrs	r3, r2
 80042e2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 0310 	and.w	r3, r3, #16
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d008      	beq.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80042f0:	4b4c      	ldr	r3, [pc, #304]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80042f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	699b      	ldr	r3, [r3, #24]
 80042fc:	4949      	ldr	r1, [pc, #292]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80042fe:	4313      	orrs	r3, r2
 8004300:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800430a:	2b00      	cmp	r3, #0
 800430c:	d008      	beq.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800430e:	4b45      	ldr	r3, [pc, #276]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800431a:	4942      	ldr	r1, [pc, #264]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800431c:	4313      	orrs	r3, r2
 800431e:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004328:	2b00      	cmp	r3, #0
 800432a:	d008      	beq.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800432c:	4b3d      	ldr	r3, [pc, #244]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800432e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004330:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004338:	493a      	ldr	r1, [pc, #232]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800433a:	4313      	orrs	r3, r2
 800433c:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004346:	2b00      	cmp	r3, #0
 8004348:	d008      	beq.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800434a:	4b36      	ldr	r3, [pc, #216]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800434c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800434e:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004356:	4933      	ldr	r1, [pc, #204]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004358:	4313      	orrs	r3, r2
 800435a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004364:	2b00      	cmp	r3, #0
 8004366:	d008      	beq.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004368:	4b2e      	ldr	r3, [pc, #184]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800436a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800436c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004374:	492b      	ldr	r1, [pc, #172]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004376:	4313      	orrs	r3, r2
 8004378:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004382:	2b00      	cmp	r3, #0
 8004384:	d008      	beq.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004386:	4b27      	ldr	r3, [pc, #156]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800438a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004392:	4924      	ldr	r1, [pc, #144]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004394:	4313      	orrs	r3, r2
 8004396:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d008      	beq.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80043a4:	4b1f      	ldr	r3, [pc, #124]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80043a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043a8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043b0:	491c      	ldr	r1, [pc, #112]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80043b2:	4313      	orrs	r3, r2
 80043b4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d008      	beq.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80043c2:	4b18      	ldr	r3, [pc, #96]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80043c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043c6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043ce:	4915      	ldr	r1, [pc, #84]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80043d0:	4313      	orrs	r3, r2
 80043d2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d008      	beq.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80043e0:	4b10      	ldr	r3, [pc, #64]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80043e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043e4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ec:	490d      	ldr	r1, [pc, #52]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80043ee:	4313      	orrs	r3, r2
 80043f0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d008      	beq.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80043fe:	4b09      	ldr	r3, [pc, #36]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004402:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800440a:	4906      	ldr	r1, [pc, #24]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800440c:	4313      	orrs	r3, r2
 800440e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004418:	2b00      	cmp	r3, #0
 800441a:	d00c      	beq.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800441c:	4b01      	ldr	r3, [pc, #4]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800441e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004420:	e002      	b.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8004422:	bf00      	nop
 8004424:	40021000 	.word	0x40021000
 8004428:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004430:	490b      	ldr	r1, [pc, #44]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004432:	4313      	orrs	r3, r2
 8004434:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800443e:	2b00      	cmp	r3, #0
 8004440:	d008      	beq.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8004442:	4b07      	ldr	r3, [pc, #28]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004446:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800444e:	4904      	ldr	r1, [pc, #16]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004450:	4313      	orrs	r3, r2
 8004452:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004454:	2300      	movs	r3, #0
}
 8004456:	4618      	mov	r0, r3
 8004458:	3748      	adds	r7, #72	; 0x48
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}
 800445e:	bf00      	nop
 8004460:	40021000 	.word	0x40021000

08004464 <HAL_RTC_Init>:
  *         in the RTC_InitTypeDef structure and initialize the associated handle.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b082      	sub	sp, #8
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d101      	bne.n	8004476 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	e083      	b.n	800457e <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	7f5b      	ldrb	r3, [r3, #29]
 800447a:	b2db      	uxtb	r3, r3
 800447c:	2b00      	cmp	r3, #0
 800447e:	d105      	bne.n	800448c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2200      	movs	r2, #0
 8004484:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f7fc f956 	bl	8000738 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2202      	movs	r2, #2
 8004490:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	22ca      	movs	r2, #202	; 0xca
 8004498:	625a      	str	r2, [r3, #36]	; 0x24
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	2253      	movs	r2, #83	; 0x53
 80044a0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f000 f897 	bl	80045d6 <RTC_EnterInitMode>
 80044a8:	4603      	mov	r3, r0
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d008      	beq.n	80044c0 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	22ff      	movs	r2, #255	; 0xff
 80044b4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2204      	movs	r2, #4
 80044ba:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	e05e      	b.n	800457e <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	687a      	ldr	r2, [r7, #4]
 80044c8:	6812      	ldr	r2, [r2, #0]
 80044ca:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80044ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044d2:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	6899      	ldr	r1, [r3, #8]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	685a      	ldr	r2, [r3, #4]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	691b      	ldr	r3, [r3, #16]
 80044e2:	431a      	orrs	r2, r3
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	695b      	ldr	r3, [r3, #20]
 80044e8:	431a      	orrs	r2, r3
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	430a      	orrs	r2, r1
 80044f0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	68d2      	ldr	r2, [r2, #12]
 80044fa:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	6919      	ldr	r1, [r3, #16]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	041a      	lsls	r2, r3, #16
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	430a      	orrs	r2, r1
 800450e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	68da      	ldr	r2, [r3, #12]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800451e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	f003 0320 	and.w	r3, r3, #32
 800452a:	2b00      	cmp	r3, #0
 800452c:	d10e      	bne.n	800454c <HAL_RTC_Init+0xe8>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f000 f829 	bl	8004586 <HAL_RTC_WaitForSynchro>
 8004534:	4603      	mov	r3, r0
 8004536:	2b00      	cmp	r3, #0
 8004538:	d008      	beq.n	800454c <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	22ff      	movs	r2, #255	; 0xff
 8004540:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2204      	movs	r2, #4
 8004546:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8004548:	2301      	movs	r3, #1
 800454a:	e018      	b.n	800457e <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800455a:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	699a      	ldr	r2, [r3, #24]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	430a      	orrs	r2, r1
 800456c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	22ff      	movs	r2, #255	; 0xff
 8004574:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2201      	movs	r2, #1
 800457a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800457c:	2300      	movs	r3, #0
  }
}
 800457e:	4618      	mov	r0, r3
 8004580:	3708      	adds	r7, #8
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}

08004586 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004586:	b580      	push	{r7, lr}
 8004588:	b084      	sub	sp, #16
 800458a:	af00      	add	r7, sp, #0
 800458c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800458e:	2300      	movs	r3, #0
 8004590:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	68da      	ldr	r2, [r3, #12]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80045a0:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80045a2:	f7fc fac7 	bl	8000b34 <HAL_GetTick>
 80045a6:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80045a8:	e009      	b.n	80045be <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80045aa:	f7fc fac3 	bl	8000b34 <HAL_GetTick>
 80045ae:	4602      	mov	r2, r0
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	1ad3      	subs	r3, r2, r3
 80045b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80045b8:	d901      	bls.n	80045be <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80045ba:	2303      	movs	r3, #3
 80045bc:	e007      	b.n	80045ce <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	f003 0320 	and.w	r3, r3, #32
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d0ee      	beq.n	80045aa <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80045cc:	2300      	movs	r3, #0
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3710      	adds	r7, #16
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}

080045d6 <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - HAL_OK : RTC is in Init mode
  *          - HAL_TIMEOUT : RTC is not in Init mode and in Timeout
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80045d6:	b580      	push	{r7, lr}
 80045d8:	b084      	sub	sp, #16
 80045da:	af00      	add	r7, sp, #0
 80045dc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80045de:	2300      	movs	r3, #0
 80045e0:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	68db      	ldr	r3, [r3, #12]
 80045e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d119      	bne.n	8004624 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f04f 32ff 	mov.w	r2, #4294967295
 80045f8:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80045fa:	f7fc fa9b 	bl	8000b34 <HAL_GetTick>
 80045fe:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004600:	e009      	b.n	8004616 <RTC_EnterInitMode+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004602:	f7fc fa97 	bl	8000b34 <HAL_GetTick>
 8004606:	4602      	mov	r2, r0
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	1ad3      	subs	r3, r2, r3
 800460c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004610:	d901      	bls.n	8004616 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8004612:	2303      	movs	r3, #3
 8004614:	e007      	b.n	8004626 <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004620:	2b00      	cmp	r3, #0
 8004622:	d0ee      	beq.n	8004602 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8004624:	2300      	movs	r3, #0
}
 8004626:	4618      	mov	r0, r3
 8004628:	3710      	adds	r7, #16
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}

0800462e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800462e:	b580      	push	{r7, lr}
 8004630:	b082      	sub	sp, #8
 8004632:	af00      	add	r7, sp, #0
 8004634:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d101      	bne.n	8004640 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	e040      	b.n	80046c2 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004644:	2b00      	cmp	r3, #0
 8004646:	d106      	bne.n	8004656 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2200      	movs	r2, #0
 800464c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	f7fc f897 	bl	8000784 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2224      	movs	r2, #36	; 0x24
 800465a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f022 0201 	bic.w	r2, r2, #1
 800466a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	f000 f8c1 	bl	80047f4 <UART_SetConfig>
 8004672:	4603      	mov	r3, r0
 8004674:	2b01      	cmp	r3, #1
 8004676:	d101      	bne.n	800467c <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	e022      	b.n	80046c2 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004680:	2b00      	cmp	r3, #0
 8004682:	d002      	beq.n	800468a <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004684:	6878      	ldr	r0, [r7, #4]
 8004686:	f000 fa8b 	bl	8004ba0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	685a      	ldr	r2, [r3, #4]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004698:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	689a      	ldr	r2, [r3, #8]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80046a8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f042 0201 	orr.w	r2, r2, #1
 80046b8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f000 fb12 	bl	8004ce4 <UART_CheckIdleState>
 80046c0:	4603      	mov	r3, r0
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3708      	adds	r7, #8
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}

080046ca <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046ca:	b580      	push	{r7, lr}
 80046cc:	b08a      	sub	sp, #40	; 0x28
 80046ce:	af02      	add	r7, sp, #8
 80046d0:	60f8      	str	r0, [r7, #12]
 80046d2:	60b9      	str	r1, [r7, #8]
 80046d4:	603b      	str	r3, [r7, #0]
 80046d6:	4613      	mov	r3, r2
 80046d8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80046de:	2b20      	cmp	r3, #32
 80046e0:	f040 8082 	bne.w	80047e8 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d002      	beq.n	80046f0 <HAL_UART_Transmit+0x26>
 80046ea:	88fb      	ldrh	r3, [r7, #6]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d101      	bne.n	80046f4 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80046f0:	2301      	movs	r3, #1
 80046f2:	e07a      	b.n	80047ea <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d101      	bne.n	8004702 <HAL_UART_Transmit+0x38>
 80046fe:	2302      	movs	r3, #2
 8004700:	e073      	b.n	80047ea <HAL_UART_Transmit+0x120>
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2201      	movs	r2, #1
 8004706:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2200      	movs	r2, #0
 800470e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2221      	movs	r2, #33	; 0x21
 8004716:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004718:	f7fc fa0c 	bl	8000b34 <HAL_GetTick>
 800471c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	88fa      	ldrh	r2, [r7, #6]
 8004722:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	88fa      	ldrh	r2, [r7, #6]
 800472a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004736:	d108      	bne.n	800474a <HAL_UART_Transmit+0x80>
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	691b      	ldr	r3, [r3, #16]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d104      	bne.n	800474a <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004740:	2300      	movs	r3, #0
 8004742:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	61bb      	str	r3, [r7, #24]
 8004748:	e003      	b.n	8004752 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800474e:	2300      	movs	r3, #0
 8004750:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2200      	movs	r2, #0
 8004756:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800475a:	e02d      	b.n	80047b8 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	9300      	str	r3, [sp, #0]
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	2200      	movs	r2, #0
 8004764:	2180      	movs	r1, #128	; 0x80
 8004766:	68f8      	ldr	r0, [r7, #12]
 8004768:	f000 fb05 	bl	8004d76 <UART_WaitOnFlagUntilTimeout>
 800476c:	4603      	mov	r3, r0
 800476e:	2b00      	cmp	r3, #0
 8004770:	d001      	beq.n	8004776 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004772:	2303      	movs	r3, #3
 8004774:	e039      	b.n	80047ea <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004776:	69fb      	ldr	r3, [r7, #28]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d10b      	bne.n	8004794 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800477c:	69bb      	ldr	r3, [r7, #24]
 800477e:	881a      	ldrh	r2, [r3, #0]
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004788:	b292      	uxth	r2, r2
 800478a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800478c:	69bb      	ldr	r3, [r7, #24]
 800478e:	3302      	adds	r3, #2
 8004790:	61bb      	str	r3, [r7, #24]
 8004792:	e008      	b.n	80047a6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004794:	69fb      	ldr	r3, [r7, #28]
 8004796:	781a      	ldrb	r2, [r3, #0]
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	b292      	uxth	r2, r2
 800479e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80047a0:	69fb      	ldr	r3, [r7, #28]
 80047a2:	3301      	adds	r3, #1
 80047a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80047ac:	b29b      	uxth	r3, r3
 80047ae:	3b01      	subs	r3, #1
 80047b0:	b29a      	uxth	r2, r3
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80047be:	b29b      	uxth	r3, r3
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d1cb      	bne.n	800475c <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	9300      	str	r3, [sp, #0]
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	2200      	movs	r2, #0
 80047cc:	2140      	movs	r1, #64	; 0x40
 80047ce:	68f8      	ldr	r0, [r7, #12]
 80047d0:	f000 fad1 	bl	8004d76 <UART_WaitOnFlagUntilTimeout>
 80047d4:	4603      	mov	r3, r0
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d001      	beq.n	80047de <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80047da:	2303      	movs	r3, #3
 80047dc:	e005      	b.n	80047ea <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2220      	movs	r2, #32
 80047e2:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80047e4:	2300      	movs	r3, #0
 80047e6:	e000      	b.n	80047ea <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80047e8:	2302      	movs	r3, #2
  }
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3720      	adds	r7, #32
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}
	...

080047f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b088      	sub	sp, #32
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80047fc:	2300      	movs	r3, #0
 80047fe:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	689a      	ldr	r2, [r3, #8]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	691b      	ldr	r3, [r3, #16]
 8004808:	431a      	orrs	r2, r3
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	695b      	ldr	r3, [r3, #20]
 800480e:	431a      	orrs	r2, r3
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	69db      	ldr	r3, [r3, #28]
 8004814:	4313      	orrs	r3, r2
 8004816:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	4bab      	ldr	r3, [pc, #684]	; (8004acc <UART_SetConfig+0x2d8>)
 8004820:	4013      	ands	r3, r2
 8004822:	687a      	ldr	r2, [r7, #4]
 8004824:	6812      	ldr	r2, [r2, #0]
 8004826:	6979      	ldr	r1, [r7, #20]
 8004828:	430b      	orrs	r3, r1
 800482a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	68da      	ldr	r2, [r3, #12]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	430a      	orrs	r2, r1
 8004840:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	699b      	ldr	r3, [r3, #24]
 8004846:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6a1b      	ldr	r3, [r3, #32]
 800484c:	697a      	ldr	r2, [r7, #20]
 800484e:	4313      	orrs	r3, r2
 8004850:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	697a      	ldr	r2, [r7, #20]
 8004862:	430a      	orrs	r2, r1
 8004864:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a99      	ldr	r2, [pc, #612]	; (8004ad0 <UART_SetConfig+0x2dc>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d120      	bne.n	80048b2 <UART_SetConfig+0xbe>
 8004870:	4b98      	ldr	r3, [pc, #608]	; (8004ad4 <UART_SetConfig+0x2e0>)
 8004872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004874:	f003 0303 	and.w	r3, r3, #3
 8004878:	2b03      	cmp	r3, #3
 800487a:	d817      	bhi.n	80048ac <UART_SetConfig+0xb8>
 800487c:	a201      	add	r2, pc, #4	; (adr r2, 8004884 <UART_SetConfig+0x90>)
 800487e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004882:	bf00      	nop
 8004884:	08004895 	.word	0x08004895
 8004888:	080048a1 	.word	0x080048a1
 800488c:	080048a7 	.word	0x080048a7
 8004890:	0800489b 	.word	0x0800489b
 8004894:	2301      	movs	r3, #1
 8004896:	77fb      	strb	r3, [r7, #31]
 8004898:	e0b5      	b.n	8004a06 <UART_SetConfig+0x212>
 800489a:	2302      	movs	r3, #2
 800489c:	77fb      	strb	r3, [r7, #31]
 800489e:	e0b2      	b.n	8004a06 <UART_SetConfig+0x212>
 80048a0:	2304      	movs	r3, #4
 80048a2:	77fb      	strb	r3, [r7, #31]
 80048a4:	e0af      	b.n	8004a06 <UART_SetConfig+0x212>
 80048a6:	2308      	movs	r3, #8
 80048a8:	77fb      	strb	r3, [r7, #31]
 80048aa:	e0ac      	b.n	8004a06 <UART_SetConfig+0x212>
 80048ac:	2310      	movs	r3, #16
 80048ae:	77fb      	strb	r3, [r7, #31]
 80048b0:	e0a9      	b.n	8004a06 <UART_SetConfig+0x212>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a88      	ldr	r2, [pc, #544]	; (8004ad8 <UART_SetConfig+0x2e4>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d124      	bne.n	8004906 <UART_SetConfig+0x112>
 80048bc:	4b85      	ldr	r3, [pc, #532]	; (8004ad4 <UART_SetConfig+0x2e0>)
 80048be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80048c4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80048c8:	d011      	beq.n	80048ee <UART_SetConfig+0xfa>
 80048ca:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80048ce:	d817      	bhi.n	8004900 <UART_SetConfig+0x10c>
 80048d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80048d4:	d011      	beq.n	80048fa <UART_SetConfig+0x106>
 80048d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80048da:	d811      	bhi.n	8004900 <UART_SetConfig+0x10c>
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d003      	beq.n	80048e8 <UART_SetConfig+0xf4>
 80048e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048e4:	d006      	beq.n	80048f4 <UART_SetConfig+0x100>
 80048e6:	e00b      	b.n	8004900 <UART_SetConfig+0x10c>
 80048e8:	2300      	movs	r3, #0
 80048ea:	77fb      	strb	r3, [r7, #31]
 80048ec:	e08b      	b.n	8004a06 <UART_SetConfig+0x212>
 80048ee:	2302      	movs	r3, #2
 80048f0:	77fb      	strb	r3, [r7, #31]
 80048f2:	e088      	b.n	8004a06 <UART_SetConfig+0x212>
 80048f4:	2304      	movs	r3, #4
 80048f6:	77fb      	strb	r3, [r7, #31]
 80048f8:	e085      	b.n	8004a06 <UART_SetConfig+0x212>
 80048fa:	2308      	movs	r3, #8
 80048fc:	77fb      	strb	r3, [r7, #31]
 80048fe:	e082      	b.n	8004a06 <UART_SetConfig+0x212>
 8004900:	2310      	movs	r3, #16
 8004902:	77fb      	strb	r3, [r7, #31]
 8004904:	e07f      	b.n	8004a06 <UART_SetConfig+0x212>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a74      	ldr	r2, [pc, #464]	; (8004adc <UART_SetConfig+0x2e8>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d124      	bne.n	800495a <UART_SetConfig+0x166>
 8004910:	4b70      	ldr	r3, [pc, #448]	; (8004ad4 <UART_SetConfig+0x2e0>)
 8004912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004914:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004918:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800491c:	d011      	beq.n	8004942 <UART_SetConfig+0x14e>
 800491e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004922:	d817      	bhi.n	8004954 <UART_SetConfig+0x160>
 8004924:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004928:	d011      	beq.n	800494e <UART_SetConfig+0x15a>
 800492a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800492e:	d811      	bhi.n	8004954 <UART_SetConfig+0x160>
 8004930:	2b00      	cmp	r3, #0
 8004932:	d003      	beq.n	800493c <UART_SetConfig+0x148>
 8004934:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004938:	d006      	beq.n	8004948 <UART_SetConfig+0x154>
 800493a:	e00b      	b.n	8004954 <UART_SetConfig+0x160>
 800493c:	2300      	movs	r3, #0
 800493e:	77fb      	strb	r3, [r7, #31]
 8004940:	e061      	b.n	8004a06 <UART_SetConfig+0x212>
 8004942:	2302      	movs	r3, #2
 8004944:	77fb      	strb	r3, [r7, #31]
 8004946:	e05e      	b.n	8004a06 <UART_SetConfig+0x212>
 8004948:	2304      	movs	r3, #4
 800494a:	77fb      	strb	r3, [r7, #31]
 800494c:	e05b      	b.n	8004a06 <UART_SetConfig+0x212>
 800494e:	2308      	movs	r3, #8
 8004950:	77fb      	strb	r3, [r7, #31]
 8004952:	e058      	b.n	8004a06 <UART_SetConfig+0x212>
 8004954:	2310      	movs	r3, #16
 8004956:	77fb      	strb	r3, [r7, #31]
 8004958:	e055      	b.n	8004a06 <UART_SetConfig+0x212>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a60      	ldr	r2, [pc, #384]	; (8004ae0 <UART_SetConfig+0x2ec>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d124      	bne.n	80049ae <UART_SetConfig+0x1ba>
 8004964:	4b5b      	ldr	r3, [pc, #364]	; (8004ad4 <UART_SetConfig+0x2e0>)
 8004966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004968:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800496c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004970:	d011      	beq.n	8004996 <UART_SetConfig+0x1a2>
 8004972:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004976:	d817      	bhi.n	80049a8 <UART_SetConfig+0x1b4>
 8004978:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800497c:	d011      	beq.n	80049a2 <UART_SetConfig+0x1ae>
 800497e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004982:	d811      	bhi.n	80049a8 <UART_SetConfig+0x1b4>
 8004984:	2b00      	cmp	r3, #0
 8004986:	d003      	beq.n	8004990 <UART_SetConfig+0x19c>
 8004988:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800498c:	d006      	beq.n	800499c <UART_SetConfig+0x1a8>
 800498e:	e00b      	b.n	80049a8 <UART_SetConfig+0x1b4>
 8004990:	2300      	movs	r3, #0
 8004992:	77fb      	strb	r3, [r7, #31]
 8004994:	e037      	b.n	8004a06 <UART_SetConfig+0x212>
 8004996:	2302      	movs	r3, #2
 8004998:	77fb      	strb	r3, [r7, #31]
 800499a:	e034      	b.n	8004a06 <UART_SetConfig+0x212>
 800499c:	2304      	movs	r3, #4
 800499e:	77fb      	strb	r3, [r7, #31]
 80049a0:	e031      	b.n	8004a06 <UART_SetConfig+0x212>
 80049a2:	2308      	movs	r3, #8
 80049a4:	77fb      	strb	r3, [r7, #31]
 80049a6:	e02e      	b.n	8004a06 <UART_SetConfig+0x212>
 80049a8:	2310      	movs	r3, #16
 80049aa:	77fb      	strb	r3, [r7, #31]
 80049ac:	e02b      	b.n	8004a06 <UART_SetConfig+0x212>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a4c      	ldr	r2, [pc, #304]	; (8004ae4 <UART_SetConfig+0x2f0>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d124      	bne.n	8004a02 <UART_SetConfig+0x20e>
 80049b8:	4b46      	ldr	r3, [pc, #280]	; (8004ad4 <UART_SetConfig+0x2e0>)
 80049ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049bc:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80049c0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80049c4:	d011      	beq.n	80049ea <UART_SetConfig+0x1f6>
 80049c6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80049ca:	d817      	bhi.n	80049fc <UART_SetConfig+0x208>
 80049cc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80049d0:	d011      	beq.n	80049f6 <UART_SetConfig+0x202>
 80049d2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80049d6:	d811      	bhi.n	80049fc <UART_SetConfig+0x208>
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d003      	beq.n	80049e4 <UART_SetConfig+0x1f0>
 80049dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049e0:	d006      	beq.n	80049f0 <UART_SetConfig+0x1fc>
 80049e2:	e00b      	b.n	80049fc <UART_SetConfig+0x208>
 80049e4:	2300      	movs	r3, #0
 80049e6:	77fb      	strb	r3, [r7, #31]
 80049e8:	e00d      	b.n	8004a06 <UART_SetConfig+0x212>
 80049ea:	2302      	movs	r3, #2
 80049ec:	77fb      	strb	r3, [r7, #31]
 80049ee:	e00a      	b.n	8004a06 <UART_SetConfig+0x212>
 80049f0:	2304      	movs	r3, #4
 80049f2:	77fb      	strb	r3, [r7, #31]
 80049f4:	e007      	b.n	8004a06 <UART_SetConfig+0x212>
 80049f6:	2308      	movs	r3, #8
 80049f8:	77fb      	strb	r3, [r7, #31]
 80049fa:	e004      	b.n	8004a06 <UART_SetConfig+0x212>
 80049fc:	2310      	movs	r3, #16
 80049fe:	77fb      	strb	r3, [r7, #31]
 8004a00:	e001      	b.n	8004a06 <UART_SetConfig+0x212>
 8004a02:	2310      	movs	r3, #16
 8004a04:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	69db      	ldr	r3, [r3, #28]
 8004a0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a0e:	d16d      	bne.n	8004aec <UART_SetConfig+0x2f8>
  {
    switch (clocksource)
 8004a10:	7ffb      	ldrb	r3, [r7, #31]
 8004a12:	2b08      	cmp	r3, #8
 8004a14:	d827      	bhi.n	8004a66 <UART_SetConfig+0x272>
 8004a16:	a201      	add	r2, pc, #4	; (adr r2, 8004a1c <UART_SetConfig+0x228>)
 8004a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a1c:	08004a41 	.word	0x08004a41
 8004a20:	08004a49 	.word	0x08004a49
 8004a24:	08004a51 	.word	0x08004a51
 8004a28:	08004a67 	.word	0x08004a67
 8004a2c:	08004a57 	.word	0x08004a57
 8004a30:	08004a67 	.word	0x08004a67
 8004a34:	08004a67 	.word	0x08004a67
 8004a38:	08004a67 	.word	0x08004a67
 8004a3c:	08004a5f 	.word	0x08004a5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a40:	f7ff faae 	bl	8003fa0 <HAL_RCC_GetPCLK1Freq>
 8004a44:	61b8      	str	r0, [r7, #24]
        break;
 8004a46:	e013      	b.n	8004a70 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a48:	f7ff facc 	bl	8003fe4 <HAL_RCC_GetPCLK2Freq>
 8004a4c:	61b8      	str	r0, [r7, #24]
        break;
 8004a4e:	e00f      	b.n	8004a70 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a50:	4b25      	ldr	r3, [pc, #148]	; (8004ae8 <UART_SetConfig+0x2f4>)
 8004a52:	61bb      	str	r3, [r7, #24]
        break;
 8004a54:	e00c      	b.n	8004a70 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a56:	f7ff fa2d 	bl	8003eb4 <HAL_RCC_GetSysClockFreq>
 8004a5a:	61b8      	str	r0, [r7, #24]
        break;
 8004a5c:	e008      	b.n	8004a70 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a62:	61bb      	str	r3, [r7, #24]
        break;
 8004a64:	e004      	b.n	8004a70 <UART_SetConfig+0x27c>
      default:
        pclk = 0U;
 8004a66:	2300      	movs	r3, #0
 8004a68:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	77bb      	strb	r3, [r7, #30]
        break;
 8004a6e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004a70:	69bb      	ldr	r3, [r7, #24]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	f000 8086 	beq.w	8004b84 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004a78:	69bb      	ldr	r3, [r7, #24]
 8004a7a:	005a      	lsls	r2, r3, #1
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	085b      	lsrs	r3, r3, #1
 8004a82:	441a      	add	r2, r3
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a8c:	b29b      	uxth	r3, r3
 8004a8e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	2b0f      	cmp	r3, #15
 8004a94:	d916      	bls.n	8004ac4 <UART_SetConfig+0x2d0>
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a9c:	d212      	bcs.n	8004ac4 <UART_SetConfig+0x2d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	b29b      	uxth	r3, r3
 8004aa2:	f023 030f 	bic.w	r3, r3, #15
 8004aa6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	085b      	lsrs	r3, r3, #1
 8004aac:	b29b      	uxth	r3, r3
 8004aae:	f003 0307 	and.w	r3, r3, #7
 8004ab2:	b29a      	uxth	r2, r3
 8004ab4:	89fb      	ldrh	r3, [r7, #14]
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	89fa      	ldrh	r2, [r7, #14]
 8004ac0:	60da      	str	r2, [r3, #12]
 8004ac2:	e05f      	b.n	8004b84 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	77bb      	strb	r3, [r7, #30]
 8004ac8:	e05c      	b.n	8004b84 <UART_SetConfig+0x390>
 8004aca:	bf00      	nop
 8004acc:	efff69f3 	.word	0xefff69f3
 8004ad0:	40013800 	.word	0x40013800
 8004ad4:	40021000 	.word	0x40021000
 8004ad8:	40004400 	.word	0x40004400
 8004adc:	40004800 	.word	0x40004800
 8004ae0:	40004c00 	.word	0x40004c00
 8004ae4:	40005000 	.word	0x40005000
 8004ae8:	007a1200 	.word	0x007a1200
      }
    }
  }
  else
  {
    switch (clocksource)
 8004aec:	7ffb      	ldrb	r3, [r7, #31]
 8004aee:	2b08      	cmp	r3, #8
 8004af0:	d827      	bhi.n	8004b42 <UART_SetConfig+0x34e>
 8004af2:	a201      	add	r2, pc, #4	; (adr r2, 8004af8 <UART_SetConfig+0x304>)
 8004af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004af8:	08004b1d 	.word	0x08004b1d
 8004afc:	08004b25 	.word	0x08004b25
 8004b00:	08004b2d 	.word	0x08004b2d
 8004b04:	08004b43 	.word	0x08004b43
 8004b08:	08004b33 	.word	0x08004b33
 8004b0c:	08004b43 	.word	0x08004b43
 8004b10:	08004b43 	.word	0x08004b43
 8004b14:	08004b43 	.word	0x08004b43
 8004b18:	08004b3b 	.word	0x08004b3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b1c:	f7ff fa40 	bl	8003fa0 <HAL_RCC_GetPCLK1Freq>
 8004b20:	61b8      	str	r0, [r7, #24]
        break;
 8004b22:	e013      	b.n	8004b4c <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b24:	f7ff fa5e 	bl	8003fe4 <HAL_RCC_GetPCLK2Freq>
 8004b28:	61b8      	str	r0, [r7, #24]
        break;
 8004b2a:	e00f      	b.n	8004b4c <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b2c:	4b1b      	ldr	r3, [pc, #108]	; (8004b9c <UART_SetConfig+0x3a8>)
 8004b2e:	61bb      	str	r3, [r7, #24]
        break;
 8004b30:	e00c      	b.n	8004b4c <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b32:	f7ff f9bf 	bl	8003eb4 <HAL_RCC_GetSysClockFreq>
 8004b36:	61b8      	str	r0, [r7, #24]
        break;
 8004b38:	e008      	b.n	8004b4c <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b3e:	61bb      	str	r3, [r7, #24]
        break;
 8004b40:	e004      	b.n	8004b4c <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 8004b42:	2300      	movs	r3, #0
 8004b44:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	77bb      	strb	r3, [r7, #30]
        break;
 8004b4a:	bf00      	nop
    }

    if (pclk != 0U)
 8004b4c:	69bb      	ldr	r3, [r7, #24]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d018      	beq.n	8004b84 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	085a      	lsrs	r2, r3, #1
 8004b58:	69bb      	ldr	r3, [r7, #24]
 8004b5a:	441a      	add	r2, r3
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b64:	b29b      	uxth	r3, r3
 8004b66:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	2b0f      	cmp	r3, #15
 8004b6c:	d908      	bls.n	8004b80 <UART_SetConfig+0x38c>
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b74:	d204      	bcs.n	8004b80 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	693a      	ldr	r2, [r7, #16]
 8004b7c:	60da      	str	r2, [r3, #12]
 8004b7e:	e001      	b.n	8004b84 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8004b80:	2301      	movs	r3, #1
 8004b82:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2200      	movs	r2, #0
 8004b88:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004b90:	7fbb      	ldrb	r3, [r7, #30]
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	3720      	adds	r7, #32
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}
 8004b9a:	bf00      	nop
 8004b9c:	007a1200 	.word	0x007a1200

08004ba0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b083      	sub	sp, #12
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bac:	f003 0301 	and.w	r3, r3, #1
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d00a      	beq.n	8004bca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	430a      	orrs	r2, r1
 8004bc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bce:	f003 0302 	and.w	r3, r3, #2
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d00a      	beq.n	8004bec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	430a      	orrs	r2, r1
 8004bea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf0:	f003 0304 	and.w	r3, r3, #4
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d00a      	beq.n	8004c0e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	430a      	orrs	r2, r1
 8004c0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c12:	f003 0308 	and.w	r3, r3, #8
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d00a      	beq.n	8004c30 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	430a      	orrs	r2, r1
 8004c2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c34:	f003 0310 	and.w	r3, r3, #16
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d00a      	beq.n	8004c52 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	430a      	orrs	r2, r1
 8004c50:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c56:	f003 0320 	and.w	r3, r3, #32
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d00a      	beq.n	8004c74 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	430a      	orrs	r2, r1
 8004c72:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d01a      	beq.n	8004cb6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	430a      	orrs	r2, r1
 8004c94:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c9e:	d10a      	bne.n	8004cb6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	430a      	orrs	r2, r1
 8004cb4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d00a      	beq.n	8004cd8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	430a      	orrs	r2, r1
 8004cd6:	605a      	str	r2, [r3, #4]
  }
}
 8004cd8:	bf00      	nop
 8004cda:	370c      	adds	r7, #12
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce2:	4770      	bx	lr

08004ce4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b086      	sub	sp, #24
 8004ce8:	af02      	add	r7, sp, #8
 8004cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004cf4:	f7fb ff1e 	bl	8000b34 <HAL_GetTick>
 8004cf8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f003 0308 	and.w	r3, r3, #8
 8004d04:	2b08      	cmp	r3, #8
 8004d06:	d10e      	bne.n	8004d26 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d08:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004d0c:	9300      	str	r3, [sp, #0]
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2200      	movs	r2, #0
 8004d12:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f000 f82d 	bl	8004d76 <UART_WaitOnFlagUntilTimeout>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d001      	beq.n	8004d26 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d22:	2303      	movs	r3, #3
 8004d24:	e023      	b.n	8004d6e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f003 0304 	and.w	r3, r3, #4
 8004d30:	2b04      	cmp	r3, #4
 8004d32:	d10e      	bne.n	8004d52 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d34:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004d38:	9300      	str	r3, [sp, #0]
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f000 f817 	bl	8004d76 <UART_WaitOnFlagUntilTimeout>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d001      	beq.n	8004d52 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d4e:	2303      	movs	r3, #3
 8004d50:	e00d      	b.n	8004d6e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2220      	movs	r2, #32
 8004d56:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2220      	movs	r2, #32
 8004d5c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2200      	movs	r2, #0
 8004d62:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2200      	movs	r2, #0
 8004d68:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004d6c:	2300      	movs	r3, #0
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3710      	adds	r7, #16
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}

08004d76 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004d76:	b580      	push	{r7, lr}
 8004d78:	b084      	sub	sp, #16
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	60f8      	str	r0, [r7, #12]
 8004d7e:	60b9      	str	r1, [r7, #8]
 8004d80:	603b      	str	r3, [r7, #0]
 8004d82:	4613      	mov	r3, r2
 8004d84:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d86:	e05e      	b.n	8004e46 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d88:	69bb      	ldr	r3, [r7, #24]
 8004d8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d8e:	d05a      	beq.n	8004e46 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d90:	f7fb fed0 	bl	8000b34 <HAL_GetTick>
 8004d94:	4602      	mov	r2, r0
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	1ad3      	subs	r3, r2, r3
 8004d9a:	69ba      	ldr	r2, [r7, #24]
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	d302      	bcc.n	8004da6 <UART_WaitOnFlagUntilTimeout+0x30>
 8004da0:	69bb      	ldr	r3, [r7, #24]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d11b      	bne.n	8004dde <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004db4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	689a      	ldr	r2, [r3, #8]
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f022 0201 	bic.w	r2, r2, #1
 8004dc4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2220      	movs	r2, #32
 8004dca:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2220      	movs	r2, #32
 8004dd0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004dda:	2303      	movs	r3, #3
 8004ddc:	e043      	b.n	8004e66 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 0304 	and.w	r3, r3, #4
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d02c      	beq.n	8004e46 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	69db      	ldr	r3, [r3, #28]
 8004df2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004df6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004dfa:	d124      	bne.n	8004e46 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e04:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004e14:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	689a      	ldr	r2, [r3, #8]
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f022 0201 	bic.w	r2, r2, #1
 8004e24:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2220      	movs	r2, #32
 8004e2a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2220      	movs	r2, #32
 8004e30:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2220      	movs	r2, #32
 8004e36:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004e42:	2303      	movs	r3, #3
 8004e44:	e00f      	b.n	8004e66 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	69da      	ldr	r2, [r3, #28]
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	4013      	ands	r3, r2
 8004e50:	68ba      	ldr	r2, [r7, #8]
 8004e52:	429a      	cmp	r2, r3
 8004e54:	bf0c      	ite	eq
 8004e56:	2301      	moveq	r3, #1
 8004e58:	2300      	movne	r3, #0
 8004e5a:	b2db      	uxtb	r3, r3
 8004e5c:	461a      	mov	r2, r3
 8004e5e:	79fb      	ldrb	r3, [r7, #7]
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d091      	beq.n	8004d88 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e64:	2300      	movs	r3, #0
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3710      	adds	r7, #16
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}

08004e6e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004e6e:	b480      	push	{r7}
 8004e70:	b085      	sub	sp, #20
 8004e72:	af00      	add	r7, sp, #0
 8004e74:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004e76:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004e7a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004e82:	b29a      	uxth	r2, r3
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	b29b      	uxth	r3, r3
 8004e88:	43db      	mvns	r3, r3
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	4013      	ands	r3, r2
 8004e8e:	b29a      	uxth	r2, r3
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004e96:	2300      	movs	r3, #0
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3714      	adds	r7, #20
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr

08004ea4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004ea4:	b084      	sub	sp, #16
 8004ea6:	b480      	push	{r7}
 8004ea8:	b083      	sub	sp, #12
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	6078      	str	r0, [r7, #4]
 8004eae:	f107 0014 	add.w	r0, r7, #20
 8004eb2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2201      	movs	r2, #1
 8004eba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004ed6:	2300      	movs	r3, #0
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	370c      	adds	r7, #12
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	b004      	add	sp, #16
 8004ee4:	4770      	bx	lr

08004ee6 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004ee6:	b580      	push	{r7, lr}
 8004ee8:	b0c4      	sub	sp, #272	; 0x110
 8004eea:	af00      	add	r7, sp, #0
 8004eec:	1d3b      	adds	r3, r7, #4
 8004eee:	6018      	str	r0, [r3, #0]
 8004ef0:	463b      	mov	r3, r7
 8004ef2:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004ef4:	463b      	mov	r3, r7
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	785b      	ldrb	r3, [r3, #1]
 8004efa:	2b01      	cmp	r3, #1
 8004efc:	f040 8557 	bne.w	80059ae <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004f00:	463b      	mov	r3, r7
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	699a      	ldr	r2, [r3, #24]
 8004f06:	463b      	mov	r3, r7
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	691b      	ldr	r3, [r3, #16]
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d905      	bls.n	8004f1c <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8004f10:	463b      	mov	r3, r7
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	691b      	ldr	r3, [r3, #16]
 8004f16:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004f1a:	e004      	b.n	8004f26 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8004f1c:	463b      	mov	r3, r7
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	699b      	ldr	r3, [r3, #24]
 8004f22:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004f26:	463b      	mov	r3, r7
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	7b1b      	ldrb	r3, [r3, #12]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d12c      	bne.n	8004f8a <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004f30:	463b      	mov	r3, r7
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	6959      	ldr	r1, [r3, #20]
 8004f36:	463b      	mov	r3, r7
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	88da      	ldrh	r2, [r3, #6]
 8004f3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f40:	b29b      	uxth	r3, r3
 8004f42:	1d38      	adds	r0, r7, #4
 8004f44:	6800      	ldr	r0, [r0, #0]
 8004f46:	f001 f912 	bl	800616e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004f4a:	1d3b      	adds	r3, r7, #4
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	617b      	str	r3, [r7, #20]
 8004f50:	1d3b      	adds	r3, r7, #4
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f58:	b29b      	uxth	r3, r3
 8004f5a:	461a      	mov	r2, r3
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	4413      	add	r3, r2
 8004f60:	617b      	str	r3, [r7, #20]
 8004f62:	463b      	mov	r3, r7
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	781b      	ldrb	r3, [r3, #0]
 8004f68:	00da      	lsls	r2, r3, #3
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	4413      	add	r3, r2
 8004f6e:	f203 4202 	addw	r2, r3, #1026	; 0x402
 8004f72:	f107 0310 	add.w	r3, r7, #16
 8004f76:	601a      	str	r2, [r3, #0]
 8004f78:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f7c:	b29a      	uxth	r2, r3
 8004f7e:	f107 0310 	add.w	r3, r7, #16
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	801a      	strh	r2, [r3, #0]
 8004f86:	f000 bcdd 	b.w	8005944 <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004f8a:	463b      	mov	r3, r7
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	78db      	ldrb	r3, [r3, #3]
 8004f90:	2b02      	cmp	r3, #2
 8004f92:	f040 8347 	bne.w	8005624 <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004f96:	463b      	mov	r3, r7
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	6a1a      	ldr	r2, [r3, #32]
 8004f9c:	463b      	mov	r3, r7
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	691b      	ldr	r3, [r3, #16]
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	f240 82eb 	bls.w	800557e <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8004fa8:	1d3b      	adds	r3, r7, #4
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	463b      	mov	r3, r7
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	781b      	ldrb	r3, [r3, #0]
 8004fb2:	009b      	lsls	r3, r3, #2
 8004fb4:	4413      	add	r3, r2
 8004fb6:	881b      	ldrh	r3, [r3, #0]
 8004fb8:	b29b      	uxth	r3, r3
 8004fba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fc2:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8004fc6:	1d3b      	adds	r3, r7, #4
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	463b      	mov	r3, r7
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	781b      	ldrb	r3, [r3, #0]
 8004fd0:	009b      	lsls	r3, r3, #2
 8004fd2:	441a      	add	r2, r3
 8004fd4:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8004fd8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fdc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fe0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004fe4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fe8:	b29b      	uxth	r3, r3
 8004fea:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004fec:	463b      	mov	r3, r7
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	6a1a      	ldr	r2, [r3, #32]
 8004ff2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ff6:	1ad2      	subs	r2, r2, r3
 8004ff8:	463b      	mov	r3, r7
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004ffe:	1d3b      	adds	r3, r7, #4
 8005000:	681a      	ldr	r2, [r3, #0]
 8005002:	463b      	mov	r3, r7
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	781b      	ldrb	r3, [r3, #0]
 8005008:	009b      	lsls	r3, r3, #2
 800500a:	4413      	add	r3, r2
 800500c:	881b      	ldrh	r3, [r3, #0]
 800500e:	b29b      	uxth	r3, r3
 8005010:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005014:	2b00      	cmp	r3, #0
 8005016:	f000 8159 	beq.w	80052cc <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800501a:	1d3b      	adds	r3, r7, #4
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	637b      	str	r3, [r7, #52]	; 0x34
 8005020:	463b      	mov	r3, r7
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	785b      	ldrb	r3, [r3, #1]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d164      	bne.n	80050f4 <USB_EPStartXfer+0x20e>
 800502a:	1d3b      	adds	r3, r7, #4
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005030:	1d3b      	adds	r3, r7, #4
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005038:	b29b      	uxth	r3, r3
 800503a:	461a      	mov	r2, r3
 800503c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800503e:	4413      	add	r3, r2
 8005040:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005042:	463b      	mov	r3, r7
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	781b      	ldrb	r3, [r3, #0]
 8005048:	00da      	lsls	r2, r3, #3
 800504a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800504c:	4413      	add	r3, r2
 800504e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005052:	62bb      	str	r3, [r7, #40]	; 0x28
 8005054:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005058:	2b00      	cmp	r3, #0
 800505a:	d112      	bne.n	8005082 <USB_EPStartXfer+0x19c>
 800505c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800505e:	881b      	ldrh	r3, [r3, #0]
 8005060:	b29b      	uxth	r3, r3
 8005062:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005066:	b29a      	uxth	r2, r3
 8005068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800506a:	801a      	strh	r2, [r3, #0]
 800506c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800506e:	881b      	ldrh	r3, [r3, #0]
 8005070:	b29b      	uxth	r3, r3
 8005072:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005076:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800507a:	b29a      	uxth	r2, r3
 800507c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800507e:	801a      	strh	r2, [r3, #0]
 8005080:	e054      	b.n	800512c <USB_EPStartXfer+0x246>
 8005082:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005086:	2b3e      	cmp	r3, #62	; 0x3e
 8005088:	d817      	bhi.n	80050ba <USB_EPStartXfer+0x1d4>
 800508a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800508e:	085b      	lsrs	r3, r3, #1
 8005090:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005094:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005098:	f003 0301 	and.w	r3, r3, #1
 800509c:	2b00      	cmp	r3, #0
 800509e:	d004      	beq.n	80050aa <USB_EPStartXfer+0x1c4>
 80050a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050a4:	3301      	adds	r3, #1
 80050a6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80050aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050ae:	b29b      	uxth	r3, r3
 80050b0:	029b      	lsls	r3, r3, #10
 80050b2:	b29a      	uxth	r2, r3
 80050b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050b6:	801a      	strh	r2, [r3, #0]
 80050b8:	e038      	b.n	800512c <USB_EPStartXfer+0x246>
 80050ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050be:	095b      	lsrs	r3, r3, #5
 80050c0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80050c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050c8:	f003 031f 	and.w	r3, r3, #31
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d104      	bne.n	80050da <USB_EPStartXfer+0x1f4>
 80050d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050d4:	3b01      	subs	r3, #1
 80050d6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80050da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050de:	b29b      	uxth	r3, r3
 80050e0:	029b      	lsls	r3, r3, #10
 80050e2:	b29b      	uxth	r3, r3
 80050e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050ec:	b29a      	uxth	r2, r3
 80050ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050f0:	801a      	strh	r2, [r3, #0]
 80050f2:	e01b      	b.n	800512c <USB_EPStartXfer+0x246>
 80050f4:	463b      	mov	r3, r7
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	785b      	ldrb	r3, [r3, #1]
 80050fa:	2b01      	cmp	r3, #1
 80050fc:	d116      	bne.n	800512c <USB_EPStartXfer+0x246>
 80050fe:	1d3b      	adds	r3, r7, #4
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005106:	b29b      	uxth	r3, r3
 8005108:	461a      	mov	r2, r3
 800510a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800510c:	4413      	add	r3, r2
 800510e:	637b      	str	r3, [r7, #52]	; 0x34
 8005110:	463b      	mov	r3, r7
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	781b      	ldrb	r3, [r3, #0]
 8005116:	00da      	lsls	r2, r3, #3
 8005118:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800511a:	4413      	add	r3, r2
 800511c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005120:	633b      	str	r3, [r7, #48]	; 0x30
 8005122:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005126:	b29a      	uxth	r2, r3
 8005128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800512a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800512c:	463b      	mov	r3, r7
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	895b      	ldrh	r3, [r3, #10]
 8005132:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005136:	463b      	mov	r3, r7
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	6959      	ldr	r1, [r3, #20]
 800513c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005140:	b29b      	uxth	r3, r3
 8005142:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005146:	1d38      	adds	r0, r7, #4
 8005148:	6800      	ldr	r0, [r0, #0]
 800514a:	f001 f810 	bl	800616e <USB_WritePMA>
            ep->xfer_buff += len;
 800514e:	463b      	mov	r3, r7
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	695a      	ldr	r2, [r3, #20]
 8005154:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005158:	441a      	add	r2, r3
 800515a:	463b      	mov	r3, r7
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005160:	463b      	mov	r3, r7
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	6a1a      	ldr	r2, [r3, #32]
 8005166:	463b      	mov	r3, r7
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	691b      	ldr	r3, [r3, #16]
 800516c:	429a      	cmp	r2, r3
 800516e:	d909      	bls.n	8005184 <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 8005170:	463b      	mov	r3, r7
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	6a1a      	ldr	r2, [r3, #32]
 8005176:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800517a:	1ad2      	subs	r2, r2, r3
 800517c:	463b      	mov	r3, r7
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	621a      	str	r2, [r3, #32]
 8005182:	e008      	b.n	8005196 <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8005184:	463b      	mov	r3, r7
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	6a1b      	ldr	r3, [r3, #32]
 800518a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 800518e:	463b      	mov	r3, r7
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	2200      	movs	r2, #0
 8005194:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005196:	463b      	mov	r3, r7
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	785b      	ldrb	r3, [r3, #1]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d164      	bne.n	800526a <USB_EPStartXfer+0x384>
 80051a0:	1d3b      	adds	r3, r7, #4
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	61fb      	str	r3, [r7, #28]
 80051a6:	1d3b      	adds	r3, r7, #4
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051ae:	b29b      	uxth	r3, r3
 80051b0:	461a      	mov	r2, r3
 80051b2:	69fb      	ldr	r3, [r7, #28]
 80051b4:	4413      	add	r3, r2
 80051b6:	61fb      	str	r3, [r7, #28]
 80051b8:	463b      	mov	r3, r7
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	781b      	ldrb	r3, [r3, #0]
 80051be:	00da      	lsls	r2, r3, #3
 80051c0:	69fb      	ldr	r3, [r7, #28]
 80051c2:	4413      	add	r3, r2
 80051c4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80051c8:	61bb      	str	r3, [r7, #24]
 80051ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d112      	bne.n	80051f8 <USB_EPStartXfer+0x312>
 80051d2:	69bb      	ldr	r3, [r7, #24]
 80051d4:	881b      	ldrh	r3, [r3, #0]
 80051d6:	b29b      	uxth	r3, r3
 80051d8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80051dc:	b29a      	uxth	r2, r3
 80051de:	69bb      	ldr	r3, [r7, #24]
 80051e0:	801a      	strh	r2, [r3, #0]
 80051e2:	69bb      	ldr	r3, [r7, #24]
 80051e4:	881b      	ldrh	r3, [r3, #0]
 80051e6:	b29b      	uxth	r3, r3
 80051e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051f0:	b29a      	uxth	r2, r3
 80051f2:	69bb      	ldr	r3, [r7, #24]
 80051f4:	801a      	strh	r2, [r3, #0]
 80051f6:	e057      	b.n	80052a8 <USB_EPStartXfer+0x3c2>
 80051f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051fc:	2b3e      	cmp	r3, #62	; 0x3e
 80051fe:	d817      	bhi.n	8005230 <USB_EPStartXfer+0x34a>
 8005200:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005204:	085b      	lsrs	r3, r3, #1
 8005206:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800520a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800520e:	f003 0301 	and.w	r3, r3, #1
 8005212:	2b00      	cmp	r3, #0
 8005214:	d004      	beq.n	8005220 <USB_EPStartXfer+0x33a>
 8005216:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800521a:	3301      	adds	r3, #1
 800521c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005220:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005224:	b29b      	uxth	r3, r3
 8005226:	029b      	lsls	r3, r3, #10
 8005228:	b29a      	uxth	r2, r3
 800522a:	69bb      	ldr	r3, [r7, #24]
 800522c:	801a      	strh	r2, [r3, #0]
 800522e:	e03b      	b.n	80052a8 <USB_EPStartXfer+0x3c2>
 8005230:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005234:	095b      	lsrs	r3, r3, #5
 8005236:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800523a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800523e:	f003 031f 	and.w	r3, r3, #31
 8005242:	2b00      	cmp	r3, #0
 8005244:	d104      	bne.n	8005250 <USB_EPStartXfer+0x36a>
 8005246:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800524a:	3b01      	subs	r3, #1
 800524c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005250:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005254:	b29b      	uxth	r3, r3
 8005256:	029b      	lsls	r3, r3, #10
 8005258:	b29b      	uxth	r3, r3
 800525a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800525e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005262:	b29a      	uxth	r2, r3
 8005264:	69bb      	ldr	r3, [r7, #24]
 8005266:	801a      	strh	r2, [r3, #0]
 8005268:	e01e      	b.n	80052a8 <USB_EPStartXfer+0x3c2>
 800526a:	463b      	mov	r3, r7
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	785b      	ldrb	r3, [r3, #1]
 8005270:	2b01      	cmp	r3, #1
 8005272:	d119      	bne.n	80052a8 <USB_EPStartXfer+0x3c2>
 8005274:	1d3b      	adds	r3, r7, #4
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	627b      	str	r3, [r7, #36]	; 0x24
 800527a:	1d3b      	adds	r3, r7, #4
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005282:	b29b      	uxth	r3, r3
 8005284:	461a      	mov	r2, r3
 8005286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005288:	4413      	add	r3, r2
 800528a:	627b      	str	r3, [r7, #36]	; 0x24
 800528c:	463b      	mov	r3, r7
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	781b      	ldrb	r3, [r3, #0]
 8005292:	00da      	lsls	r2, r3, #3
 8005294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005296:	4413      	add	r3, r2
 8005298:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800529c:	623b      	str	r3, [r7, #32]
 800529e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052a2:	b29a      	uxth	r2, r3
 80052a4:	6a3b      	ldr	r3, [r7, #32]
 80052a6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80052a8:	463b      	mov	r3, r7
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	891b      	ldrh	r3, [r3, #8]
 80052ae:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80052b2:	463b      	mov	r3, r7
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	6959      	ldr	r1, [r3, #20]
 80052b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052bc:	b29b      	uxth	r3, r3
 80052be:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80052c2:	1d38      	adds	r0, r7, #4
 80052c4:	6800      	ldr	r0, [r0, #0]
 80052c6:	f000 ff52 	bl	800616e <USB_WritePMA>
 80052ca:	e33b      	b.n	8005944 <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80052cc:	463b      	mov	r3, r7
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	785b      	ldrb	r3, [r3, #1]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d164      	bne.n	80053a0 <USB_EPStartXfer+0x4ba>
 80052d6:	1d3b      	adds	r3, r7, #4
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052dc:	1d3b      	adds	r3, r7, #4
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	461a      	mov	r2, r3
 80052e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052ea:	4413      	add	r3, r2
 80052ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052ee:	463b      	mov	r3, r7
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	781b      	ldrb	r3, [r3, #0]
 80052f4:	00da      	lsls	r2, r3, #3
 80052f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052f8:	4413      	add	r3, r2
 80052fa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80052fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8005300:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005304:	2b00      	cmp	r3, #0
 8005306:	d112      	bne.n	800532e <USB_EPStartXfer+0x448>
 8005308:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800530a:	881b      	ldrh	r3, [r3, #0]
 800530c:	b29b      	uxth	r3, r3
 800530e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005312:	b29a      	uxth	r2, r3
 8005314:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005316:	801a      	strh	r2, [r3, #0]
 8005318:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800531a:	881b      	ldrh	r3, [r3, #0]
 800531c:	b29b      	uxth	r3, r3
 800531e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005322:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005326:	b29a      	uxth	r2, r3
 8005328:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800532a:	801a      	strh	r2, [r3, #0]
 800532c:	e057      	b.n	80053de <USB_EPStartXfer+0x4f8>
 800532e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005332:	2b3e      	cmp	r3, #62	; 0x3e
 8005334:	d817      	bhi.n	8005366 <USB_EPStartXfer+0x480>
 8005336:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800533a:	085b      	lsrs	r3, r3, #1
 800533c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005340:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005344:	f003 0301 	and.w	r3, r3, #1
 8005348:	2b00      	cmp	r3, #0
 800534a:	d004      	beq.n	8005356 <USB_EPStartXfer+0x470>
 800534c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005350:	3301      	adds	r3, #1
 8005352:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005356:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800535a:	b29b      	uxth	r3, r3
 800535c:	029b      	lsls	r3, r3, #10
 800535e:	b29a      	uxth	r2, r3
 8005360:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005362:	801a      	strh	r2, [r3, #0]
 8005364:	e03b      	b.n	80053de <USB_EPStartXfer+0x4f8>
 8005366:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800536a:	095b      	lsrs	r3, r3, #5
 800536c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005370:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005374:	f003 031f 	and.w	r3, r3, #31
 8005378:	2b00      	cmp	r3, #0
 800537a:	d104      	bne.n	8005386 <USB_EPStartXfer+0x4a0>
 800537c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005380:	3b01      	subs	r3, #1
 8005382:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005386:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800538a:	b29b      	uxth	r3, r3
 800538c:	029b      	lsls	r3, r3, #10
 800538e:	b29b      	uxth	r3, r3
 8005390:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005394:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005398:	b29a      	uxth	r2, r3
 800539a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800539c:	801a      	strh	r2, [r3, #0]
 800539e:	e01e      	b.n	80053de <USB_EPStartXfer+0x4f8>
 80053a0:	463b      	mov	r3, r7
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	785b      	ldrb	r3, [r3, #1]
 80053a6:	2b01      	cmp	r3, #1
 80053a8:	d119      	bne.n	80053de <USB_EPStartXfer+0x4f8>
 80053aa:	1d3b      	adds	r3, r7, #4
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	657b      	str	r3, [r7, #84]	; 0x54
 80053b0:	1d3b      	adds	r3, r7, #4
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053b8:	b29b      	uxth	r3, r3
 80053ba:	461a      	mov	r2, r3
 80053bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80053be:	4413      	add	r3, r2
 80053c0:	657b      	str	r3, [r7, #84]	; 0x54
 80053c2:	463b      	mov	r3, r7
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	781b      	ldrb	r3, [r3, #0]
 80053c8:	00da      	lsls	r2, r3, #3
 80053ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80053cc:	4413      	add	r3, r2
 80053ce:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80053d2:	653b      	str	r3, [r7, #80]	; 0x50
 80053d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053d8:	b29a      	uxth	r2, r3
 80053da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053dc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80053de:	463b      	mov	r3, r7
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	891b      	ldrh	r3, [r3, #8]
 80053e4:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80053e8:	463b      	mov	r3, r7
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	6959      	ldr	r1, [r3, #20]
 80053ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053f2:	b29b      	uxth	r3, r3
 80053f4:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80053f8:	1d38      	adds	r0, r7, #4
 80053fa:	6800      	ldr	r0, [r0, #0]
 80053fc:	f000 feb7 	bl	800616e <USB_WritePMA>
            ep->xfer_buff += len;
 8005400:	463b      	mov	r3, r7
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	695a      	ldr	r2, [r3, #20]
 8005406:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800540a:	441a      	add	r2, r3
 800540c:	463b      	mov	r3, r7
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005412:	463b      	mov	r3, r7
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	6a1a      	ldr	r2, [r3, #32]
 8005418:	463b      	mov	r3, r7
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	691b      	ldr	r3, [r3, #16]
 800541e:	429a      	cmp	r2, r3
 8005420:	d909      	bls.n	8005436 <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 8005422:	463b      	mov	r3, r7
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	6a1a      	ldr	r2, [r3, #32]
 8005428:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800542c:	1ad2      	subs	r2, r2, r3
 800542e:	463b      	mov	r3, r7
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	621a      	str	r2, [r3, #32]
 8005434:	e008      	b.n	8005448 <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 8005436:	463b      	mov	r3, r7
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	6a1b      	ldr	r3, [r3, #32]
 800543c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8005440:	463b      	mov	r3, r7
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	2200      	movs	r2, #0
 8005446:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005448:	1d3b      	adds	r3, r7, #4
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	647b      	str	r3, [r7, #68]	; 0x44
 800544e:	463b      	mov	r3, r7
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	785b      	ldrb	r3, [r3, #1]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d164      	bne.n	8005522 <USB_EPStartXfer+0x63c>
 8005458:	1d3b      	adds	r3, r7, #4
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800545e:	1d3b      	adds	r3, r7, #4
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005466:	b29b      	uxth	r3, r3
 8005468:	461a      	mov	r2, r3
 800546a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800546c:	4413      	add	r3, r2
 800546e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005470:	463b      	mov	r3, r7
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	781b      	ldrb	r3, [r3, #0]
 8005476:	00da      	lsls	r2, r3, #3
 8005478:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800547a:	4413      	add	r3, r2
 800547c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005480:	63bb      	str	r3, [r7, #56]	; 0x38
 8005482:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005486:	2b00      	cmp	r3, #0
 8005488:	d112      	bne.n	80054b0 <USB_EPStartXfer+0x5ca>
 800548a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800548c:	881b      	ldrh	r3, [r3, #0]
 800548e:	b29b      	uxth	r3, r3
 8005490:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005494:	b29a      	uxth	r2, r3
 8005496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005498:	801a      	strh	r2, [r3, #0]
 800549a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800549c:	881b      	ldrh	r3, [r3, #0]
 800549e:	b29b      	uxth	r3, r3
 80054a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054a8:	b29a      	uxth	r2, r3
 80054aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ac:	801a      	strh	r2, [r3, #0]
 80054ae:	e054      	b.n	800555a <USB_EPStartXfer+0x674>
 80054b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054b4:	2b3e      	cmp	r3, #62	; 0x3e
 80054b6:	d817      	bhi.n	80054e8 <USB_EPStartXfer+0x602>
 80054b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054bc:	085b      	lsrs	r3, r3, #1
 80054be:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80054c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054c6:	f003 0301 	and.w	r3, r3, #1
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d004      	beq.n	80054d8 <USB_EPStartXfer+0x5f2>
 80054ce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80054d2:	3301      	adds	r3, #1
 80054d4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80054d8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80054dc:	b29b      	uxth	r3, r3
 80054de:	029b      	lsls	r3, r3, #10
 80054e0:	b29a      	uxth	r2, r3
 80054e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054e4:	801a      	strh	r2, [r3, #0]
 80054e6:	e038      	b.n	800555a <USB_EPStartXfer+0x674>
 80054e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054ec:	095b      	lsrs	r3, r3, #5
 80054ee:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80054f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054f6:	f003 031f 	and.w	r3, r3, #31
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d104      	bne.n	8005508 <USB_EPStartXfer+0x622>
 80054fe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005502:	3b01      	subs	r3, #1
 8005504:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005508:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800550c:	b29b      	uxth	r3, r3
 800550e:	029b      	lsls	r3, r3, #10
 8005510:	b29b      	uxth	r3, r3
 8005512:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005516:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800551a:	b29a      	uxth	r2, r3
 800551c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800551e:	801a      	strh	r2, [r3, #0]
 8005520:	e01b      	b.n	800555a <USB_EPStartXfer+0x674>
 8005522:	463b      	mov	r3, r7
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	785b      	ldrb	r3, [r3, #1]
 8005528:	2b01      	cmp	r3, #1
 800552a:	d116      	bne.n	800555a <USB_EPStartXfer+0x674>
 800552c:	1d3b      	adds	r3, r7, #4
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005534:	b29b      	uxth	r3, r3
 8005536:	461a      	mov	r2, r3
 8005538:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800553a:	4413      	add	r3, r2
 800553c:	647b      	str	r3, [r7, #68]	; 0x44
 800553e:	463b      	mov	r3, r7
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	781b      	ldrb	r3, [r3, #0]
 8005544:	00da      	lsls	r2, r3, #3
 8005546:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005548:	4413      	add	r3, r2
 800554a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800554e:	643b      	str	r3, [r7, #64]	; 0x40
 8005550:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005554:	b29a      	uxth	r2, r3
 8005556:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005558:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800555a:	463b      	mov	r3, r7
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	895b      	ldrh	r3, [r3, #10]
 8005560:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005564:	463b      	mov	r3, r7
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	6959      	ldr	r1, [r3, #20]
 800556a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800556e:	b29b      	uxth	r3, r3
 8005570:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005574:	1d38      	adds	r0, r7, #4
 8005576:	6800      	ldr	r0, [r0, #0]
 8005578:	f000 fdf9 	bl	800616e <USB_WritePMA>
 800557c:	e1e2      	b.n	8005944 <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800557e:	463b      	mov	r3, r7
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	6a1b      	ldr	r3, [r3, #32]
 8005584:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8005588:	1d3b      	adds	r3, r7, #4
 800558a:	681a      	ldr	r2, [r3, #0]
 800558c:	463b      	mov	r3, r7
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	781b      	ldrb	r3, [r3, #0]
 8005592:	009b      	lsls	r3, r3, #2
 8005594:	4413      	add	r3, r2
 8005596:	881b      	ldrh	r3, [r3, #0]
 8005598:	b29b      	uxth	r3, r3
 800559a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800559e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055a2:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80055a6:	1d3b      	adds	r3, r7, #4
 80055a8:	681a      	ldr	r2, [r3, #0]
 80055aa:	463b      	mov	r3, r7
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	781b      	ldrb	r3, [r3, #0]
 80055b0:	009b      	lsls	r3, r3, #2
 80055b2:	441a      	add	r2, r3
 80055b4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80055b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055c8:	b29b      	uxth	r3, r3
 80055ca:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80055cc:	1d3b      	adds	r3, r7, #4
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	663b      	str	r3, [r7, #96]	; 0x60
 80055d2:	1d3b      	adds	r3, r7, #4
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055da:	b29b      	uxth	r3, r3
 80055dc:	461a      	mov	r2, r3
 80055de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80055e0:	4413      	add	r3, r2
 80055e2:	663b      	str	r3, [r7, #96]	; 0x60
 80055e4:	463b      	mov	r3, r7
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	781b      	ldrb	r3, [r3, #0]
 80055ea:	00da      	lsls	r2, r3, #3
 80055ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80055ee:	4413      	add	r3, r2
 80055f0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80055f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80055f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055fa:	b29a      	uxth	r2, r3
 80055fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80055fe:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005600:	463b      	mov	r3, r7
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	891b      	ldrh	r3, [r3, #8]
 8005606:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800560a:	463b      	mov	r3, r7
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	6959      	ldr	r1, [r3, #20]
 8005610:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005614:	b29b      	uxth	r3, r3
 8005616:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 800561a:	1d38      	adds	r0, r7, #4
 800561c:	6800      	ldr	r0, [r0, #0]
 800561e:	f000 fda6 	bl	800616e <USB_WritePMA>
 8005622:	e18f      	b.n	8005944 <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005624:	1d3b      	adds	r3, r7, #4
 8005626:	681a      	ldr	r2, [r3, #0]
 8005628:	463b      	mov	r3, r7
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	781b      	ldrb	r3, [r3, #0]
 800562e:	009b      	lsls	r3, r3, #2
 8005630:	4413      	add	r3, r2
 8005632:	881b      	ldrh	r3, [r3, #0]
 8005634:	b29b      	uxth	r3, r3
 8005636:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800563a:	2b00      	cmp	r3, #0
 800563c:	f000 808f 	beq.w	800575e <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005640:	1d3b      	adds	r3, r7, #4
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	67bb      	str	r3, [r7, #120]	; 0x78
 8005646:	463b      	mov	r3, r7
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	785b      	ldrb	r3, [r3, #1]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d164      	bne.n	800571a <USB_EPStartXfer+0x834>
 8005650:	1d3b      	adds	r3, r7, #4
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	673b      	str	r3, [r7, #112]	; 0x70
 8005656:	1d3b      	adds	r3, r7, #4
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800565e:	b29b      	uxth	r3, r3
 8005660:	461a      	mov	r2, r3
 8005662:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005664:	4413      	add	r3, r2
 8005666:	673b      	str	r3, [r7, #112]	; 0x70
 8005668:	463b      	mov	r3, r7
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	781b      	ldrb	r3, [r3, #0]
 800566e:	00da      	lsls	r2, r3, #3
 8005670:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005672:	4413      	add	r3, r2
 8005674:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005678:	66fb      	str	r3, [r7, #108]	; 0x6c
 800567a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800567e:	2b00      	cmp	r3, #0
 8005680:	d112      	bne.n	80056a8 <USB_EPStartXfer+0x7c2>
 8005682:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005684:	881b      	ldrh	r3, [r3, #0]
 8005686:	b29b      	uxth	r3, r3
 8005688:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800568c:	b29a      	uxth	r2, r3
 800568e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005690:	801a      	strh	r2, [r3, #0]
 8005692:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005694:	881b      	ldrh	r3, [r3, #0]
 8005696:	b29b      	uxth	r3, r3
 8005698:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800569c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056a0:	b29a      	uxth	r2, r3
 80056a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056a4:	801a      	strh	r2, [r3, #0]
 80056a6:	e054      	b.n	8005752 <USB_EPStartXfer+0x86c>
 80056a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056ac:	2b3e      	cmp	r3, #62	; 0x3e
 80056ae:	d817      	bhi.n	80056e0 <USB_EPStartXfer+0x7fa>
 80056b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056b4:	085b      	lsrs	r3, r3, #1
 80056b6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80056ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056be:	f003 0301 	and.w	r3, r3, #1
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d004      	beq.n	80056d0 <USB_EPStartXfer+0x7ea>
 80056c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056ca:	3301      	adds	r3, #1
 80056cc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80056d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056d4:	b29b      	uxth	r3, r3
 80056d6:	029b      	lsls	r3, r3, #10
 80056d8:	b29a      	uxth	r2, r3
 80056da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056dc:	801a      	strh	r2, [r3, #0]
 80056de:	e038      	b.n	8005752 <USB_EPStartXfer+0x86c>
 80056e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056e4:	095b      	lsrs	r3, r3, #5
 80056e6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80056ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056ee:	f003 031f 	and.w	r3, r3, #31
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d104      	bne.n	8005700 <USB_EPStartXfer+0x81a>
 80056f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056fa:	3b01      	subs	r3, #1
 80056fc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005704:	b29b      	uxth	r3, r3
 8005706:	029b      	lsls	r3, r3, #10
 8005708:	b29b      	uxth	r3, r3
 800570a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800570e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005712:	b29a      	uxth	r2, r3
 8005714:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005716:	801a      	strh	r2, [r3, #0]
 8005718:	e01b      	b.n	8005752 <USB_EPStartXfer+0x86c>
 800571a:	463b      	mov	r3, r7
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	785b      	ldrb	r3, [r3, #1]
 8005720:	2b01      	cmp	r3, #1
 8005722:	d116      	bne.n	8005752 <USB_EPStartXfer+0x86c>
 8005724:	1d3b      	adds	r3, r7, #4
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800572c:	b29b      	uxth	r3, r3
 800572e:	461a      	mov	r2, r3
 8005730:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005732:	4413      	add	r3, r2
 8005734:	67bb      	str	r3, [r7, #120]	; 0x78
 8005736:	463b      	mov	r3, r7
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	781b      	ldrb	r3, [r3, #0]
 800573c:	00da      	lsls	r2, r3, #3
 800573e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005740:	4413      	add	r3, r2
 8005742:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005746:	677b      	str	r3, [r7, #116]	; 0x74
 8005748:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800574c:	b29a      	uxth	r2, r3
 800574e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005750:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005752:	463b      	mov	r3, r7
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	895b      	ldrh	r3, [r3, #10]
 8005758:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 800575c:	e097      	b.n	800588e <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800575e:	463b      	mov	r3, r7
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	785b      	ldrb	r3, [r3, #1]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d168      	bne.n	800583a <USB_EPStartXfer+0x954>
 8005768:	1d3b      	adds	r3, r7, #4
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005770:	1d3b      	adds	r3, r7, #4
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005778:	b29b      	uxth	r3, r3
 800577a:	461a      	mov	r2, r3
 800577c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005780:	4413      	add	r3, r2
 8005782:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005786:	463b      	mov	r3, r7
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	781b      	ldrb	r3, [r3, #0]
 800578c:	00da      	lsls	r2, r3, #3
 800578e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005792:	4413      	add	r3, r2
 8005794:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005798:	67fb      	str	r3, [r7, #124]	; 0x7c
 800579a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d112      	bne.n	80057c8 <USB_EPStartXfer+0x8e2>
 80057a2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80057a4:	881b      	ldrh	r3, [r3, #0]
 80057a6:	b29b      	uxth	r3, r3
 80057a8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80057ac:	b29a      	uxth	r2, r3
 80057ae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80057b0:	801a      	strh	r2, [r3, #0]
 80057b2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80057b4:	881b      	ldrh	r3, [r3, #0]
 80057b6:	b29b      	uxth	r3, r3
 80057b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057c0:	b29a      	uxth	r2, r3
 80057c2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80057c4:	801a      	strh	r2, [r3, #0]
 80057c6:	e05d      	b.n	8005884 <USB_EPStartXfer+0x99e>
 80057c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057cc:	2b3e      	cmp	r3, #62	; 0x3e
 80057ce:	d817      	bhi.n	8005800 <USB_EPStartXfer+0x91a>
 80057d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057d4:	085b      	lsrs	r3, r3, #1
 80057d6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80057da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057de:	f003 0301 	and.w	r3, r3, #1
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d004      	beq.n	80057f0 <USB_EPStartXfer+0x90a>
 80057e6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80057ea:	3301      	adds	r3, #1
 80057ec:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80057f0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80057f4:	b29b      	uxth	r3, r3
 80057f6:	029b      	lsls	r3, r3, #10
 80057f8:	b29a      	uxth	r2, r3
 80057fa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80057fc:	801a      	strh	r2, [r3, #0]
 80057fe:	e041      	b.n	8005884 <USB_EPStartXfer+0x99e>
 8005800:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005804:	095b      	lsrs	r3, r3, #5
 8005806:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800580a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800580e:	f003 031f 	and.w	r3, r3, #31
 8005812:	2b00      	cmp	r3, #0
 8005814:	d104      	bne.n	8005820 <USB_EPStartXfer+0x93a>
 8005816:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800581a:	3b01      	subs	r3, #1
 800581c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005820:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005824:	b29b      	uxth	r3, r3
 8005826:	029b      	lsls	r3, r3, #10
 8005828:	b29b      	uxth	r3, r3
 800582a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800582e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005832:	b29a      	uxth	r2, r3
 8005834:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005836:	801a      	strh	r2, [r3, #0]
 8005838:	e024      	b.n	8005884 <USB_EPStartXfer+0x99e>
 800583a:	463b      	mov	r3, r7
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	785b      	ldrb	r3, [r3, #1]
 8005840:	2b01      	cmp	r3, #1
 8005842:	d11f      	bne.n	8005884 <USB_EPStartXfer+0x99e>
 8005844:	1d3b      	adds	r3, r7, #4
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800584c:	1d3b      	adds	r3, r7, #4
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005854:	b29b      	uxth	r3, r3
 8005856:	461a      	mov	r2, r3
 8005858:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800585c:	4413      	add	r3, r2
 800585e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005862:	463b      	mov	r3, r7
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	781b      	ldrb	r3, [r3, #0]
 8005868:	00da      	lsls	r2, r3, #3
 800586a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800586e:	4413      	add	r3, r2
 8005870:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005874:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005878:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800587c:	b29a      	uxth	r2, r3
 800587e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005882:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005884:	463b      	mov	r3, r7
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	891b      	ldrh	r3, [r3, #8]
 800588a:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800588e:	463b      	mov	r3, r7
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	6959      	ldr	r1, [r3, #20]
 8005894:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005898:	b29b      	uxth	r3, r3
 800589a:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 800589e:	1d38      	adds	r0, r7, #4
 80058a0:	6800      	ldr	r0, [r0, #0]
 80058a2:	f000 fc64 	bl	800616e <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80058a6:	463b      	mov	r3, r7
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	785b      	ldrb	r3, [r3, #1]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d122      	bne.n	80058f6 <USB_EPStartXfer+0xa10>
 80058b0:	1d3b      	adds	r3, r7, #4
 80058b2:	681a      	ldr	r2, [r3, #0]
 80058b4:	463b      	mov	r3, r7
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	781b      	ldrb	r3, [r3, #0]
 80058ba:	009b      	lsls	r3, r3, #2
 80058bc:	4413      	add	r3, r2
 80058be:	881b      	ldrh	r3, [r3, #0]
 80058c0:	b29b      	uxth	r3, r3
 80058c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058ca:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 80058ce:	1d3b      	adds	r3, r7, #4
 80058d0:	681a      	ldr	r2, [r3, #0]
 80058d2:	463b      	mov	r3, r7
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	781b      	ldrb	r3, [r3, #0]
 80058d8:	009b      	lsls	r3, r3, #2
 80058da:	441a      	add	r2, r3
 80058dc:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80058e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058ec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80058f0:	b29b      	uxth	r3, r3
 80058f2:	8013      	strh	r3, [r2, #0]
 80058f4:	e026      	b.n	8005944 <USB_EPStartXfer+0xa5e>
 80058f6:	463b      	mov	r3, r7
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	785b      	ldrb	r3, [r3, #1]
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d121      	bne.n	8005944 <USB_EPStartXfer+0xa5e>
 8005900:	1d3b      	adds	r3, r7, #4
 8005902:	681a      	ldr	r2, [r3, #0]
 8005904:	463b      	mov	r3, r7
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	781b      	ldrb	r3, [r3, #0]
 800590a:	009b      	lsls	r3, r3, #2
 800590c:	4413      	add	r3, r2
 800590e:	881b      	ldrh	r3, [r3, #0]
 8005910:	b29b      	uxth	r3, r3
 8005912:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005916:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800591a:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 800591e:	1d3b      	adds	r3, r7, #4
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	463b      	mov	r3, r7
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	781b      	ldrb	r3, [r3, #0]
 8005928:	009b      	lsls	r3, r3, #2
 800592a:	441a      	add	r2, r3
 800592c:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8005930:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005934:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005938:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800593c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005940:	b29b      	uxth	r3, r3
 8005942:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005944:	1d3b      	adds	r3, r7, #4
 8005946:	681a      	ldr	r2, [r3, #0]
 8005948:	463b      	mov	r3, r7
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	781b      	ldrb	r3, [r3, #0]
 800594e:	009b      	lsls	r3, r3, #2
 8005950:	4413      	add	r3, r2
 8005952:	881b      	ldrh	r3, [r3, #0]
 8005954:	b29b      	uxth	r3, r3
 8005956:	f107 020e 	add.w	r2, r7, #14
 800595a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800595e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005962:	8013      	strh	r3, [r2, #0]
 8005964:	f107 030e 	add.w	r3, r7, #14
 8005968:	f107 020e 	add.w	r2, r7, #14
 800596c:	8812      	ldrh	r2, [r2, #0]
 800596e:	f082 0210 	eor.w	r2, r2, #16
 8005972:	801a      	strh	r2, [r3, #0]
 8005974:	f107 030e 	add.w	r3, r7, #14
 8005978:	f107 020e 	add.w	r2, r7, #14
 800597c:	8812      	ldrh	r2, [r2, #0]
 800597e:	f082 0220 	eor.w	r2, r2, #32
 8005982:	801a      	strh	r2, [r3, #0]
 8005984:	1d3b      	adds	r3, r7, #4
 8005986:	681a      	ldr	r2, [r3, #0]
 8005988:	463b      	mov	r3, r7
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	781b      	ldrb	r3, [r3, #0]
 800598e:	009b      	lsls	r3, r3, #2
 8005990:	441a      	add	r2, r3
 8005992:	f107 030e 	add.w	r3, r7, #14
 8005996:	881b      	ldrh	r3, [r3, #0]
 8005998:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800599c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059a8:	b29b      	uxth	r3, r3
 80059aa:	8013      	strh	r3, [r2, #0]
 80059ac:	e3b5      	b.n	800611a <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80059ae:	463b      	mov	r3, r7
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	7b1b      	ldrb	r3, [r3, #12]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	f040 8090 	bne.w	8005ada <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80059ba:	463b      	mov	r3, r7
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	699a      	ldr	r2, [r3, #24]
 80059c0:	463b      	mov	r3, r7
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	691b      	ldr	r3, [r3, #16]
 80059c6:	429a      	cmp	r2, r3
 80059c8:	d90e      	bls.n	80059e8 <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 80059ca:	463b      	mov	r3, r7
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	691b      	ldr	r3, [r3, #16]
 80059d0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 80059d4:	463b      	mov	r3, r7
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	699a      	ldr	r2, [r3, #24]
 80059da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059de:	1ad2      	subs	r2, r2, r3
 80059e0:	463b      	mov	r3, r7
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	619a      	str	r2, [r3, #24]
 80059e6:	e008      	b.n	80059fa <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 80059e8:	463b      	mov	r3, r7
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	699b      	ldr	r3, [r3, #24]
 80059ee:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 80059f2:	463b      	mov	r3, r7
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	2200      	movs	r2, #0
 80059f8:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80059fa:	1d3b      	adds	r3, r7, #4
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005a02:	1d3b      	adds	r3, r7, #4
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a0a:	b29b      	uxth	r3, r3
 8005a0c:	461a      	mov	r2, r3
 8005a0e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005a12:	4413      	add	r3, r2
 8005a14:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005a18:	463b      	mov	r3, r7
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	781b      	ldrb	r3, [r3, #0]
 8005a1e:	00da      	lsls	r2, r3, #3
 8005a20:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005a24:	4413      	add	r3, r2
 8005a26:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005a2a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005a2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d116      	bne.n	8005a64 <USB_EPStartXfer+0xb7e>
 8005a36:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005a3a:	881b      	ldrh	r3, [r3, #0]
 8005a3c:	b29b      	uxth	r3, r3
 8005a3e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a42:	b29a      	uxth	r2, r3
 8005a44:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005a48:	801a      	strh	r2, [r3, #0]
 8005a4a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005a4e:	881b      	ldrh	r3, [r3, #0]
 8005a50:	b29b      	uxth	r3, r3
 8005a52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a5a:	b29a      	uxth	r2, r3
 8005a5c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005a60:	801a      	strh	r2, [r3, #0]
 8005a62:	e32c      	b.n	80060be <USB_EPStartXfer+0x11d8>
 8005a64:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a68:	2b3e      	cmp	r3, #62	; 0x3e
 8005a6a:	d818      	bhi.n	8005a9e <USB_EPStartXfer+0xbb8>
 8005a6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a70:	085b      	lsrs	r3, r3, #1
 8005a72:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005a76:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a7a:	f003 0301 	and.w	r3, r3, #1
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d004      	beq.n	8005a8c <USB_EPStartXfer+0xba6>
 8005a82:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005a86:	3301      	adds	r3, #1
 8005a88:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005a8c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005a90:	b29b      	uxth	r3, r3
 8005a92:	029b      	lsls	r3, r3, #10
 8005a94:	b29a      	uxth	r2, r3
 8005a96:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005a9a:	801a      	strh	r2, [r3, #0]
 8005a9c:	e30f      	b.n	80060be <USB_EPStartXfer+0x11d8>
 8005a9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005aa2:	095b      	lsrs	r3, r3, #5
 8005aa4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005aa8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005aac:	f003 031f 	and.w	r3, r3, #31
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d104      	bne.n	8005abe <USB_EPStartXfer+0xbd8>
 8005ab4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005ab8:	3b01      	subs	r3, #1
 8005aba:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005abe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005ac2:	b29b      	uxth	r3, r3
 8005ac4:	029b      	lsls	r3, r3, #10
 8005ac6:	b29b      	uxth	r3, r3
 8005ac8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005acc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ad0:	b29a      	uxth	r2, r3
 8005ad2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005ad6:	801a      	strh	r2, [r3, #0]
 8005ad8:	e2f1      	b.n	80060be <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005ada:	463b      	mov	r3, r7
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	78db      	ldrb	r3, [r3, #3]
 8005ae0:	2b02      	cmp	r3, #2
 8005ae2:	f040 818f 	bne.w	8005e04 <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005ae6:	463b      	mov	r3, r7
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	785b      	ldrb	r3, [r3, #1]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d175      	bne.n	8005bdc <USB_EPStartXfer+0xcf6>
 8005af0:	1d3b      	adds	r3, r7, #4
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005af8:	1d3b      	adds	r3, r7, #4
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b00:	b29b      	uxth	r3, r3
 8005b02:	461a      	mov	r2, r3
 8005b04:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005b08:	4413      	add	r3, r2
 8005b0a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005b0e:	463b      	mov	r3, r7
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	781b      	ldrb	r3, [r3, #0]
 8005b14:	00da      	lsls	r2, r3, #3
 8005b16:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005b1a:	4413      	add	r3, r2
 8005b1c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005b20:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005b24:	463b      	mov	r3, r7
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	691b      	ldr	r3, [r3, #16]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d116      	bne.n	8005b5c <USB_EPStartXfer+0xc76>
 8005b2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005b32:	881b      	ldrh	r3, [r3, #0]
 8005b34:	b29b      	uxth	r3, r3
 8005b36:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005b3a:	b29a      	uxth	r2, r3
 8005b3c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005b40:	801a      	strh	r2, [r3, #0]
 8005b42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005b46:	881b      	ldrh	r3, [r3, #0]
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b52:	b29a      	uxth	r2, r3
 8005b54:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005b58:	801a      	strh	r2, [r3, #0]
 8005b5a:	e065      	b.n	8005c28 <USB_EPStartXfer+0xd42>
 8005b5c:	463b      	mov	r3, r7
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	691b      	ldr	r3, [r3, #16]
 8005b62:	2b3e      	cmp	r3, #62	; 0x3e
 8005b64:	d81a      	bhi.n	8005b9c <USB_EPStartXfer+0xcb6>
 8005b66:	463b      	mov	r3, r7
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	691b      	ldr	r3, [r3, #16]
 8005b6c:	085b      	lsrs	r3, r3, #1
 8005b6e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005b72:	463b      	mov	r3, r7
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	691b      	ldr	r3, [r3, #16]
 8005b78:	f003 0301 	and.w	r3, r3, #1
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d004      	beq.n	8005b8a <USB_EPStartXfer+0xca4>
 8005b80:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005b84:	3301      	adds	r3, #1
 8005b86:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005b8a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005b8e:	b29b      	uxth	r3, r3
 8005b90:	029b      	lsls	r3, r3, #10
 8005b92:	b29a      	uxth	r2, r3
 8005b94:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005b98:	801a      	strh	r2, [r3, #0]
 8005b9a:	e045      	b.n	8005c28 <USB_EPStartXfer+0xd42>
 8005b9c:	463b      	mov	r3, r7
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	691b      	ldr	r3, [r3, #16]
 8005ba2:	095b      	lsrs	r3, r3, #5
 8005ba4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005ba8:	463b      	mov	r3, r7
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	691b      	ldr	r3, [r3, #16]
 8005bae:	f003 031f 	and.w	r3, r3, #31
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d104      	bne.n	8005bc0 <USB_EPStartXfer+0xcda>
 8005bb6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005bba:	3b01      	subs	r3, #1
 8005bbc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005bc0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005bc4:	b29b      	uxth	r3, r3
 8005bc6:	029b      	lsls	r3, r3, #10
 8005bc8:	b29b      	uxth	r3, r3
 8005bca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bd2:	b29a      	uxth	r2, r3
 8005bd4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005bd8:	801a      	strh	r2, [r3, #0]
 8005bda:	e025      	b.n	8005c28 <USB_EPStartXfer+0xd42>
 8005bdc:	463b      	mov	r3, r7
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	785b      	ldrb	r3, [r3, #1]
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	d120      	bne.n	8005c28 <USB_EPStartXfer+0xd42>
 8005be6:	1d3b      	adds	r3, r7, #4
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005bee:	1d3b      	adds	r3, r7, #4
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bf6:	b29b      	uxth	r3, r3
 8005bf8:	461a      	mov	r2, r3
 8005bfa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005bfe:	4413      	add	r3, r2
 8005c00:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005c04:	463b      	mov	r3, r7
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	781b      	ldrb	r3, [r3, #0]
 8005c0a:	00da      	lsls	r2, r3, #3
 8005c0c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005c10:	4413      	add	r3, r2
 8005c12:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005c16:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005c1a:	463b      	mov	r3, r7
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	691b      	ldr	r3, [r3, #16]
 8005c20:	b29a      	uxth	r2, r3
 8005c22:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005c26:	801a      	strh	r2, [r3, #0]
 8005c28:	1d3b      	adds	r3, r7, #4
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005c30:	463b      	mov	r3, r7
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	785b      	ldrb	r3, [r3, #1]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d175      	bne.n	8005d26 <USB_EPStartXfer+0xe40>
 8005c3a:	1d3b      	adds	r3, r7, #4
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005c42:	1d3b      	adds	r3, r7, #4
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c4a:	b29b      	uxth	r3, r3
 8005c4c:	461a      	mov	r2, r3
 8005c4e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005c52:	4413      	add	r3, r2
 8005c54:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005c58:	463b      	mov	r3, r7
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	781b      	ldrb	r3, [r3, #0]
 8005c5e:	00da      	lsls	r2, r3, #3
 8005c60:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005c64:	4413      	add	r3, r2
 8005c66:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005c6a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005c6e:	463b      	mov	r3, r7
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	691b      	ldr	r3, [r3, #16]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d116      	bne.n	8005ca6 <USB_EPStartXfer+0xdc0>
 8005c78:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005c7c:	881b      	ldrh	r3, [r3, #0]
 8005c7e:	b29b      	uxth	r3, r3
 8005c80:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005c84:	b29a      	uxth	r2, r3
 8005c86:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005c8a:	801a      	strh	r2, [r3, #0]
 8005c8c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005c90:	881b      	ldrh	r3, [r3, #0]
 8005c92:	b29b      	uxth	r3, r3
 8005c94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c9c:	b29a      	uxth	r2, r3
 8005c9e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005ca2:	801a      	strh	r2, [r3, #0]
 8005ca4:	e061      	b.n	8005d6a <USB_EPStartXfer+0xe84>
 8005ca6:	463b      	mov	r3, r7
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	691b      	ldr	r3, [r3, #16]
 8005cac:	2b3e      	cmp	r3, #62	; 0x3e
 8005cae:	d81a      	bhi.n	8005ce6 <USB_EPStartXfer+0xe00>
 8005cb0:	463b      	mov	r3, r7
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	691b      	ldr	r3, [r3, #16]
 8005cb6:	085b      	lsrs	r3, r3, #1
 8005cb8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005cbc:	463b      	mov	r3, r7
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	691b      	ldr	r3, [r3, #16]
 8005cc2:	f003 0301 	and.w	r3, r3, #1
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d004      	beq.n	8005cd4 <USB_EPStartXfer+0xdee>
 8005cca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cce:	3301      	adds	r3, #1
 8005cd0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005cd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cd8:	b29b      	uxth	r3, r3
 8005cda:	029b      	lsls	r3, r3, #10
 8005cdc:	b29a      	uxth	r2, r3
 8005cde:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005ce2:	801a      	strh	r2, [r3, #0]
 8005ce4:	e041      	b.n	8005d6a <USB_EPStartXfer+0xe84>
 8005ce6:	463b      	mov	r3, r7
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	691b      	ldr	r3, [r3, #16]
 8005cec:	095b      	lsrs	r3, r3, #5
 8005cee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005cf2:	463b      	mov	r3, r7
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	691b      	ldr	r3, [r3, #16]
 8005cf8:	f003 031f 	and.w	r3, r3, #31
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d104      	bne.n	8005d0a <USB_EPStartXfer+0xe24>
 8005d00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d04:	3b01      	subs	r3, #1
 8005d06:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005d0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d0e:	b29b      	uxth	r3, r3
 8005d10:	029b      	lsls	r3, r3, #10
 8005d12:	b29b      	uxth	r3, r3
 8005d14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d1c:	b29a      	uxth	r2, r3
 8005d1e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005d22:	801a      	strh	r2, [r3, #0]
 8005d24:	e021      	b.n	8005d6a <USB_EPStartXfer+0xe84>
 8005d26:	463b      	mov	r3, r7
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	785b      	ldrb	r3, [r3, #1]
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	d11c      	bne.n	8005d6a <USB_EPStartXfer+0xe84>
 8005d30:	1d3b      	adds	r3, r7, #4
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d38:	b29b      	uxth	r3, r3
 8005d3a:	461a      	mov	r2, r3
 8005d3c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005d40:	4413      	add	r3, r2
 8005d42:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005d46:	463b      	mov	r3, r7
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	781b      	ldrb	r3, [r3, #0]
 8005d4c:	00da      	lsls	r2, r3, #3
 8005d4e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005d52:	4413      	add	r3, r2
 8005d54:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005d58:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005d5c:	463b      	mov	r3, r7
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	691b      	ldr	r3, [r3, #16]
 8005d62:	b29a      	uxth	r2, r3
 8005d64:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005d68:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005d6a:	463b      	mov	r3, r7
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	69db      	ldr	r3, [r3, #28]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	f000 81a4 	beq.w	80060be <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005d76:	1d3b      	adds	r3, r7, #4
 8005d78:	681a      	ldr	r2, [r3, #0]
 8005d7a:	463b      	mov	r3, r7
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	781b      	ldrb	r3, [r3, #0]
 8005d80:	009b      	lsls	r3, r3, #2
 8005d82:	4413      	add	r3, r2
 8005d84:	881b      	ldrh	r3, [r3, #0]
 8005d86:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005d8a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005d8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d005      	beq.n	8005da2 <USB_EPStartXfer+0xebc>
 8005d96:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005d9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d10d      	bne.n	8005dbe <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005da2:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005da6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	f040 8187 	bne.w	80060be <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005db0:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005db4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	f040 8180 	bne.w	80060be <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8005dbe:	1d3b      	adds	r3, r7, #4
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	463b      	mov	r3, r7
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	781b      	ldrb	r3, [r3, #0]
 8005dc8:	009b      	lsls	r3, r3, #2
 8005dca:	4413      	add	r3, r2
 8005dcc:	881b      	ldrh	r3, [r3, #0]
 8005dce:	b29b      	uxth	r3, r3
 8005dd0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dd8:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8005ddc:	1d3b      	adds	r3, r7, #4
 8005dde:	681a      	ldr	r2, [r3, #0]
 8005de0:	463b      	mov	r3, r7
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	781b      	ldrb	r3, [r3, #0]
 8005de6:	009b      	lsls	r3, r3, #2
 8005de8:	441a      	add	r2, r3
 8005dea:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8005dee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005df2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005df6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dfa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005dfe:	b29b      	uxth	r3, r3
 8005e00:	8013      	strh	r3, [r2, #0]
 8005e02:	e15c      	b.n	80060be <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005e04:	463b      	mov	r3, r7
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	78db      	ldrb	r3, [r3, #3]
 8005e0a:	2b01      	cmp	r3, #1
 8005e0c:	f040 8155 	bne.w	80060ba <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005e10:	463b      	mov	r3, r7
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	699a      	ldr	r2, [r3, #24]
 8005e16:	463b      	mov	r3, r7
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	691b      	ldr	r3, [r3, #16]
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	d90e      	bls.n	8005e3e <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 8005e20:	463b      	mov	r3, r7
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	691b      	ldr	r3, [r3, #16]
 8005e26:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 8005e2a:	463b      	mov	r3, r7
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	699a      	ldr	r2, [r3, #24]
 8005e30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e34:	1ad2      	subs	r2, r2, r3
 8005e36:	463b      	mov	r3, r7
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	619a      	str	r2, [r3, #24]
 8005e3c:	e008      	b.n	8005e50 <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 8005e3e:	463b      	mov	r3, r7
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	699b      	ldr	r3, [r3, #24]
 8005e44:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 8005e48:	463b      	mov	r3, r7
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005e50:	463b      	mov	r3, r7
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	785b      	ldrb	r3, [r3, #1]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d16f      	bne.n	8005f3a <USB_EPStartXfer+0x1054>
 8005e5a:	1d3b      	adds	r3, r7, #4
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005e62:	1d3b      	adds	r3, r7, #4
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e6a:	b29b      	uxth	r3, r3
 8005e6c:	461a      	mov	r2, r3
 8005e6e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005e72:	4413      	add	r3, r2
 8005e74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005e78:	463b      	mov	r3, r7
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	781b      	ldrb	r3, [r3, #0]
 8005e7e:	00da      	lsls	r2, r3, #3
 8005e80:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005e84:	4413      	add	r3, r2
 8005e86:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005e8a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005e8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d116      	bne.n	8005ec4 <USB_EPStartXfer+0xfde>
 8005e96:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005e9a:	881b      	ldrh	r3, [r3, #0]
 8005e9c:	b29b      	uxth	r3, r3
 8005e9e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005ea2:	b29a      	uxth	r2, r3
 8005ea4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005ea8:	801a      	strh	r2, [r3, #0]
 8005eaa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005eae:	881b      	ldrh	r3, [r3, #0]
 8005eb0:	b29b      	uxth	r3, r3
 8005eb2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005eb6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005eba:	b29a      	uxth	r2, r3
 8005ebc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005ec0:	801a      	strh	r2, [r3, #0]
 8005ec2:	e05f      	b.n	8005f84 <USB_EPStartXfer+0x109e>
 8005ec4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ec8:	2b3e      	cmp	r3, #62	; 0x3e
 8005eca:	d818      	bhi.n	8005efe <USB_EPStartXfer+0x1018>
 8005ecc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ed0:	085b      	lsrs	r3, r3, #1
 8005ed2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005ed6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005eda:	f003 0301 	and.w	r3, r3, #1
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d004      	beq.n	8005eec <USB_EPStartXfer+0x1006>
 8005ee2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ee6:	3301      	adds	r3, #1
 8005ee8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005eec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ef0:	b29b      	uxth	r3, r3
 8005ef2:	029b      	lsls	r3, r3, #10
 8005ef4:	b29a      	uxth	r2, r3
 8005ef6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005efa:	801a      	strh	r2, [r3, #0]
 8005efc:	e042      	b.n	8005f84 <USB_EPStartXfer+0x109e>
 8005efe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f02:	095b      	lsrs	r3, r3, #5
 8005f04:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005f08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f0c:	f003 031f 	and.w	r3, r3, #31
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d104      	bne.n	8005f1e <USB_EPStartXfer+0x1038>
 8005f14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f18:	3b01      	subs	r3, #1
 8005f1a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005f1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f22:	b29b      	uxth	r3, r3
 8005f24:	029b      	lsls	r3, r3, #10
 8005f26:	b29b      	uxth	r3, r3
 8005f28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f30:	b29a      	uxth	r2, r3
 8005f32:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005f36:	801a      	strh	r2, [r3, #0]
 8005f38:	e024      	b.n	8005f84 <USB_EPStartXfer+0x109e>
 8005f3a:	463b      	mov	r3, r7
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	785b      	ldrb	r3, [r3, #1]
 8005f40:	2b01      	cmp	r3, #1
 8005f42:	d11f      	bne.n	8005f84 <USB_EPStartXfer+0x109e>
 8005f44:	1d3b      	adds	r3, r7, #4
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005f4c:	1d3b      	adds	r3, r7, #4
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f54:	b29b      	uxth	r3, r3
 8005f56:	461a      	mov	r2, r3
 8005f58:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005f5c:	4413      	add	r3, r2
 8005f5e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005f62:	463b      	mov	r3, r7
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	781b      	ldrb	r3, [r3, #0]
 8005f68:	00da      	lsls	r2, r3, #3
 8005f6a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005f6e:	4413      	add	r3, r2
 8005f70:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005f74:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005f78:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f7c:	b29a      	uxth	r2, r3
 8005f7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f82:	801a      	strh	r2, [r3, #0]
 8005f84:	1d3b      	adds	r3, r7, #4
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005f8c:	463b      	mov	r3, r7
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	785b      	ldrb	r3, [r3, #1]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d16f      	bne.n	8006076 <USB_EPStartXfer+0x1190>
 8005f96:	1d3b      	adds	r3, r7, #4
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005f9e:	1d3b      	adds	r3, r7, #4
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fa6:	b29b      	uxth	r3, r3
 8005fa8:	461a      	mov	r2, r3
 8005faa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005fae:	4413      	add	r3, r2
 8005fb0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005fb4:	463b      	mov	r3, r7
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	781b      	ldrb	r3, [r3, #0]
 8005fba:	00da      	lsls	r2, r3, #3
 8005fbc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005fc0:	4413      	add	r3, r2
 8005fc2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005fc6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005fca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d116      	bne.n	8006000 <USB_EPStartXfer+0x111a>
 8005fd2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005fd6:	881b      	ldrh	r3, [r3, #0]
 8005fd8:	b29b      	uxth	r3, r3
 8005fda:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005fde:	b29a      	uxth	r2, r3
 8005fe0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005fe4:	801a      	strh	r2, [r3, #0]
 8005fe6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005fea:	881b      	ldrh	r3, [r3, #0]
 8005fec:	b29b      	uxth	r3, r3
 8005fee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ff2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ff6:	b29a      	uxth	r2, r3
 8005ff8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005ffc:	801a      	strh	r2, [r3, #0]
 8005ffe:	e05e      	b.n	80060be <USB_EPStartXfer+0x11d8>
 8006000:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006004:	2b3e      	cmp	r3, #62	; 0x3e
 8006006:	d818      	bhi.n	800603a <USB_EPStartXfer+0x1154>
 8006008:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800600c:	085b      	lsrs	r3, r3, #1
 800600e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006012:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006016:	f003 0301 	and.w	r3, r3, #1
 800601a:	2b00      	cmp	r3, #0
 800601c:	d004      	beq.n	8006028 <USB_EPStartXfer+0x1142>
 800601e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006022:	3301      	adds	r3, #1
 8006024:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006028:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800602c:	b29b      	uxth	r3, r3
 800602e:	029b      	lsls	r3, r3, #10
 8006030:	b29a      	uxth	r2, r3
 8006032:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006036:	801a      	strh	r2, [r3, #0]
 8006038:	e041      	b.n	80060be <USB_EPStartXfer+0x11d8>
 800603a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800603e:	095b      	lsrs	r3, r3, #5
 8006040:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006044:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006048:	f003 031f 	and.w	r3, r3, #31
 800604c:	2b00      	cmp	r3, #0
 800604e:	d104      	bne.n	800605a <USB_EPStartXfer+0x1174>
 8006050:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006054:	3b01      	subs	r3, #1
 8006056:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800605a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800605e:	b29b      	uxth	r3, r3
 8006060:	029b      	lsls	r3, r3, #10
 8006062:	b29b      	uxth	r3, r3
 8006064:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006068:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800606c:	b29a      	uxth	r2, r3
 800606e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006072:	801a      	strh	r2, [r3, #0]
 8006074:	e023      	b.n	80060be <USB_EPStartXfer+0x11d8>
 8006076:	463b      	mov	r3, r7
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	785b      	ldrb	r3, [r3, #1]
 800607c:	2b01      	cmp	r3, #1
 800607e:	d11e      	bne.n	80060be <USB_EPStartXfer+0x11d8>
 8006080:	1d3b      	adds	r3, r7, #4
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006088:	b29b      	uxth	r3, r3
 800608a:	461a      	mov	r2, r3
 800608c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006090:	4413      	add	r3, r2
 8006092:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006096:	463b      	mov	r3, r7
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	781b      	ldrb	r3, [r3, #0]
 800609c:	00da      	lsls	r2, r3, #3
 800609e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80060a2:	4413      	add	r3, r2
 80060a4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80060a8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80060ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80060b0:	b29a      	uxth	r2, r3
 80060b2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80060b6:	801a      	strh	r2, [r3, #0]
 80060b8:	e001      	b.n	80060be <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 80060ba:	2301      	movs	r3, #1
 80060bc:	e02e      	b.n	800611c <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80060be:	1d3b      	adds	r3, r7, #4
 80060c0:	681a      	ldr	r2, [r3, #0]
 80060c2:	463b      	mov	r3, r7
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	781b      	ldrb	r3, [r3, #0]
 80060c8:	009b      	lsls	r3, r3, #2
 80060ca:	4413      	add	r3, r2
 80060cc:	881b      	ldrh	r3, [r3, #0]
 80060ce:	b29b      	uxth	r3, r3
 80060d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80060d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060d8:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80060dc:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80060e0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80060e4:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80060e8:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80060ec:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80060f0:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80060f4:	1d3b      	adds	r3, r7, #4
 80060f6:	681a      	ldr	r2, [r3, #0]
 80060f8:	463b      	mov	r3, r7
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	781b      	ldrb	r3, [r3, #0]
 80060fe:	009b      	lsls	r3, r3, #2
 8006100:	441a      	add	r2, r3
 8006102:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006106:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800610a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800610e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006112:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006116:	b29b      	uxth	r3, r3
 8006118:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800611a:	2300      	movs	r3, #0
}
 800611c:	4618      	mov	r0, r3
 800611e:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}

08006126 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006126:	b480      	push	{r7}
 8006128:	b083      	sub	sp, #12
 800612a:	af00      	add	r7, sp, #0
 800612c:	6078      	str	r0, [r7, #4]
 800612e:	460b      	mov	r3, r1
 8006130:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006132:	78fb      	ldrb	r3, [r7, #3]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d103      	bne.n	8006140 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2280      	movs	r2, #128	; 0x80
 800613c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006140:	2300      	movs	r3, #0
}
 8006142:	4618      	mov	r0, r3
 8006144:	370c      	adds	r7, #12
 8006146:	46bd      	mov	sp, r7
 8006148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614c:	4770      	bx	lr

0800614e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800614e:	b480      	push	{r7}
 8006150:	b085      	sub	sp, #20
 8006152:	af00      	add	r7, sp, #0
 8006154:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800615c:	b29b      	uxth	r3, r3
 800615e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006160:	68fb      	ldr	r3, [r7, #12]
}
 8006162:	4618      	mov	r0, r3
 8006164:	3714      	adds	r7, #20
 8006166:	46bd      	mov	sp, r7
 8006168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616c:	4770      	bx	lr

0800616e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800616e:	b480      	push	{r7}
 8006170:	b08d      	sub	sp, #52	; 0x34
 8006172:	af00      	add	r7, sp, #0
 8006174:	60f8      	str	r0, [r7, #12]
 8006176:	60b9      	str	r1, [r7, #8]
 8006178:	4611      	mov	r1, r2
 800617a:	461a      	mov	r2, r3
 800617c:	460b      	mov	r3, r1
 800617e:	80fb      	strh	r3, [r7, #6]
 8006180:	4613      	mov	r3, r2
 8006182:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006184:	88bb      	ldrh	r3, [r7, #4]
 8006186:	3301      	adds	r3, #1
 8006188:	085b      	lsrs	r3, r3, #1
 800618a:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006194:	88fa      	ldrh	r2, [r7, #6]
 8006196:	69fb      	ldr	r3, [r7, #28]
 8006198:	4413      	add	r3, r2
 800619a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800619e:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80061a0:	6a3b      	ldr	r3, [r7, #32]
 80061a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061a4:	e01b      	b.n	80061de <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 80061a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a8:	781b      	ldrb	r3, [r3, #0]
 80061aa:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80061ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ae:	3301      	adds	r3, #1
 80061b0:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80061b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b4:	781b      	ldrb	r3, [r3, #0]
 80061b6:	b29b      	uxth	r3, r3
 80061b8:	021b      	lsls	r3, r3, #8
 80061ba:	b29b      	uxth	r3, r3
 80061bc:	461a      	mov	r2, r3
 80061be:	69bb      	ldr	r3, [r7, #24]
 80061c0:	4313      	orrs	r3, r2
 80061c2:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	b29a      	uxth	r2, r3
 80061c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ca:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80061cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ce:	3302      	adds	r3, #2
 80061d0:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 80061d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d4:	3301      	adds	r3, #1
 80061d6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80061d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061da:	3b01      	subs	r3, #1
 80061dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d1e0      	bne.n	80061a6 <USB_WritePMA+0x38>
  }
}
 80061e4:	bf00      	nop
 80061e6:	bf00      	nop
 80061e8:	3734      	adds	r7, #52	; 0x34
 80061ea:	46bd      	mov	sp, r7
 80061ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f0:	4770      	bx	lr

080061f2 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80061f2:	b480      	push	{r7}
 80061f4:	b08b      	sub	sp, #44	; 0x2c
 80061f6:	af00      	add	r7, sp, #0
 80061f8:	60f8      	str	r0, [r7, #12]
 80061fa:	60b9      	str	r1, [r7, #8]
 80061fc:	4611      	mov	r1, r2
 80061fe:	461a      	mov	r2, r3
 8006200:	460b      	mov	r3, r1
 8006202:	80fb      	strh	r3, [r7, #6]
 8006204:	4613      	mov	r3, r2
 8006206:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006208:	88bb      	ldrh	r3, [r7, #4]
 800620a:	085b      	lsrs	r3, r3, #1
 800620c:	b29b      	uxth	r3, r3
 800620e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006218:	88fa      	ldrh	r2, [r7, #6]
 800621a:	697b      	ldr	r3, [r7, #20]
 800621c:	4413      	add	r3, r2
 800621e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006222:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006224:	69bb      	ldr	r3, [r7, #24]
 8006226:	627b      	str	r3, [r7, #36]	; 0x24
 8006228:	e018      	b.n	800625c <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800622a:	6a3b      	ldr	r3, [r7, #32]
 800622c:	881b      	ldrh	r3, [r3, #0]
 800622e:	b29b      	uxth	r3, r3
 8006230:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006232:	6a3b      	ldr	r3, [r7, #32]
 8006234:	3302      	adds	r3, #2
 8006236:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006238:	693b      	ldr	r3, [r7, #16]
 800623a:	b2da      	uxtb	r2, r3
 800623c:	69fb      	ldr	r3, [r7, #28]
 800623e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006240:	69fb      	ldr	r3, [r7, #28]
 8006242:	3301      	adds	r3, #1
 8006244:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006246:	693b      	ldr	r3, [r7, #16]
 8006248:	0a1b      	lsrs	r3, r3, #8
 800624a:	b2da      	uxtb	r2, r3
 800624c:	69fb      	ldr	r3, [r7, #28]
 800624e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006250:	69fb      	ldr	r3, [r7, #28]
 8006252:	3301      	adds	r3, #1
 8006254:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8006256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006258:	3b01      	subs	r3, #1
 800625a:	627b      	str	r3, [r7, #36]	; 0x24
 800625c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800625e:	2b00      	cmp	r3, #0
 8006260:	d1e3      	bne.n	800622a <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8006262:	88bb      	ldrh	r3, [r7, #4]
 8006264:	f003 0301 	and.w	r3, r3, #1
 8006268:	b29b      	uxth	r3, r3
 800626a:	2b00      	cmp	r3, #0
 800626c:	d007      	beq.n	800627e <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 800626e:	6a3b      	ldr	r3, [r7, #32]
 8006270:	881b      	ldrh	r3, [r3, #0]
 8006272:	b29b      	uxth	r3, r3
 8006274:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006276:	693b      	ldr	r3, [r7, #16]
 8006278:	b2da      	uxtb	r2, r3
 800627a:	69fb      	ldr	r3, [r7, #28]
 800627c:	701a      	strb	r2, [r3, #0]
  }
}
 800627e:	bf00      	nop
 8006280:	372c      	adds	r7, #44	; 0x2c
 8006282:	46bd      	mov	sp, r7
 8006284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006288:	4770      	bx	lr
	...

0800628c <initializeRegisters>:
		{0x7C, 0x84},
		{0x7D, 0x03},
		{0x7E, 0x01},
};

void initializeRegisters(void){
 800628c:	b5b0      	push	{r4, r5, r7, lr}
 800628e:	b082      	sub	sp, #8
 8006290:	af00      	add	r7, sp, #0
	uint8_t error = 0;
 8006292:	2300      	movs	r3, #0
 8006294:	71fb      	strb	r3, [r7, #7]

	error = gestureInit();
 8006296:	f000 fb2d 	bl	80068f4 <gestureInit>
 800629a:	4603      	mov	r3, r0
 800629c:	71fb      	strb	r3, [r7, #7]
	if(error){
 800629e:	79fb      	ldrb	r3, [r7, #7]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d010      	beq.n	80062c6 <initializeRegisters+0x3a>
		strcpy((char*)ref, "\r\nInitializing Error");
 80062a4:	4a18      	ldr	r2, [pc, #96]	; (8006308 <initializeRegisters+0x7c>)
 80062a6:	4b19      	ldr	r3, [pc, #100]	; (800630c <initializeRegisters+0x80>)
 80062a8:	4615      	mov	r5, r2
 80062aa:	461c      	mov	r4, r3
 80062ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80062ae:	6028      	str	r0, [r5, #0]
 80062b0:	6069      	str	r1, [r5, #4]
 80062b2:	60aa      	str	r2, [r5, #8]
 80062b4:	60eb      	str	r3, [r5, #12]
 80062b6:	6820      	ldr	r0, [r4, #0]
 80062b8:	6128      	str	r0, [r5, #16]
 80062ba:	7923      	ldrb	r3, [r4, #4]
 80062bc:	752b      	strb	r3, [r5, #20]
		printf("Initializing Error");
 80062be:	4814      	ldr	r0, [pc, #80]	; (8006310 <initializeRegisters+0x84>)
 80062c0:	f000 fbc6 	bl	8006a50 <iprintf>
 80062c4:	e00d      	b.n	80062e2 <initializeRegisters+0x56>
	}else{
		strcpy((char*)ref, "\n\r Initialized");
 80062c6:	4a10      	ldr	r2, [pc, #64]	; (8006308 <initializeRegisters+0x7c>)
 80062c8:	4b12      	ldr	r3, [pc, #72]	; (8006314 <initializeRegisters+0x88>)
 80062ca:	4614      	mov	r4, r2
 80062cc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80062ce:	6020      	str	r0, [r4, #0]
 80062d0:	6061      	str	r1, [r4, #4]
 80062d2:	60a2      	str	r2, [r4, #8]
 80062d4:	881a      	ldrh	r2, [r3, #0]
 80062d6:	789b      	ldrb	r3, [r3, #2]
 80062d8:	81a2      	strh	r2, [r4, #12]
 80062da:	73a3      	strb	r3, [r4, #14]
		printf("Initialized \n");
 80062dc:	480e      	ldr	r0, [pc, #56]	; (8006318 <initializeRegisters+0x8c>)
 80062de:	f000 fc3d 	bl	8006b5c <puts>
	}
	HAL_UART_Transmit(&huart3, ref, strlen((char*)ref), HAL_MAX_DELAY);
 80062e2:	4809      	ldr	r0, [pc, #36]	; (8006308 <initializeRegisters+0x7c>)
 80062e4:	f7f9 ff7c 	bl	80001e0 <strlen>
 80062e8:	4603      	mov	r3, r0
 80062ea:	b29a      	uxth	r2, r3
 80062ec:	f04f 33ff 	mov.w	r3, #4294967295
 80062f0:	4905      	ldr	r1, [pc, #20]	; (8006308 <initializeRegisters+0x7c>)
 80062f2:	480a      	ldr	r0, [pc, #40]	; (800631c <initializeRegisters+0x90>)
 80062f4:	f7fe f9e9 	bl	80046ca <HAL_UART_Transmit>
	HAL_Delay(1000);
 80062f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80062fc:	f7fa fc26 	bl	8000b4c <HAL_Delay>
};
 8006300:	bf00      	nop
 8006302:	3708      	adds	r7, #8
 8006304:	46bd      	mov	sp, r7
 8006306:	bdb0      	pop	{r4, r5, r7, pc}
 8006308:	20000680 	.word	0x20000680
 800630c:	08007da4 	.word	0x08007da4
 8006310:	08007dbc 	.word	0x08007dbc
 8006314:	08007dd0 	.word	0x08007dd0
 8006318:	08007de0 	.word	0x08007de0
 800631c:	20000250 	.word	0x20000250

08006320 <GESTURE_Actions>:

void GESTURE_Actions(void)
{
 8006320:	b5b0      	push	{r4, r5, r7, lr}
 8006322:	b082      	sub	sp, #8
 8006324:	af00      	add	r7, sp, #0
	uint8_t data0 = 0, error;
 8006326:	2300      	movs	r3, #0
 8006328:	71bb      	strb	r3, [r7, #6]
	error = registerRead(0x43, 1, &data0); /* Read Bank 0 for gestures */
 800632a:	1dbb      	adds	r3, r7, #6
 800632c:	461a      	mov	r2, r3
 800632e:	2101      	movs	r1, #1
 8006330:	2043      	movs	r0, #67	; 0x43
 8006332:	f000 fa1f 	bl	8006774 <registerRead>
 8006336:	4603      	mov	r3, r0
 8006338:	71fb      	strb	r3, [r7, #7]

	if(!error){
 800633a:	79fb      	ldrb	r3, [r7, #7]
 800633c:	2b00      	cmp	r3, #0
 800633e:	f040 81d8 	bne.w	80066f2 <GESTURE_Actions+0x3d2>
		switch(data0){ /* When will gestures be detected, the "data" will change */
 8006342:	79bb      	ldrb	r3, [r7, #6]
 8006344:	2b80      	cmp	r3, #128	; 0x80
 8006346:	f000 8193 	beq.w	8006670 <GESTURE_Actions+0x350>
 800634a:	2b80      	cmp	r3, #128	; 0x80
 800634c:	f300 81d2 	bgt.w	80066f4 <GESTURE_Actions+0x3d4>
 8006350:	2b20      	cmp	r3, #32
 8006352:	dc49      	bgt.n	80063e8 <GESTURE_Actions+0xc8>
 8006354:	2b00      	cmp	r3, #0
 8006356:	f340 81cd 	ble.w	80066f4 <GESTURE_Actions+0x3d4>
 800635a:	3b01      	subs	r3, #1
 800635c:	2b1f      	cmp	r3, #31
 800635e:	f200 81c9 	bhi.w	80066f4 <GESTURE_Actions+0x3d4>
 8006362:	a201      	add	r2, pc, #4	; (adr r2, 8006368 <GESTURE_Actions+0x48>)
 8006364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006368:	080063f1 	.word	0x080063f1
 800636c:	08006485 	.word	0x08006485
 8006370:	080066f5 	.word	0x080066f5
 8006374:	080065af 	.word	0x080065af
 8006378:	080066f5 	.word	0x080066f5
 800637c:	080066f5 	.word	0x080066f5
 8006380:	080066f5 	.word	0x080066f5
 8006384:	08006515 	.word	0x08006515
 8006388:	080066f5 	.word	0x080066f5
 800638c:	080066f5 	.word	0x080066f5
 8006390:	080066f5 	.word	0x080066f5
 8006394:	080066f5 	.word	0x080066f5
 8006398:	080066f5 	.word	0x080066f5
 800639c:	080066f5 	.word	0x080066f5
 80063a0:	080066f5 	.word	0x080066f5
 80063a4:	0800669d 	.word	0x0800669d
 80063a8:	080066f5 	.word	0x080066f5
 80063ac:	080066f5 	.word	0x080066f5
 80063b0:	080066f5 	.word	0x080066f5
 80063b4:	080066f5 	.word	0x080066f5
 80063b8:	080066f5 	.word	0x080066f5
 80063bc:	080066f5 	.word	0x080066f5
 80063c0:	080066f5 	.word	0x080066f5
 80063c4:	080066f5 	.word	0x080066f5
 80063c8:	080066f5 	.word	0x080066f5
 80063cc:	080066f5 	.word	0x080066f5
 80063d0:	080066f5 	.word	0x080066f5
 80063d4:	080066f5 	.word	0x080066f5
 80063d8:	080066f5 	.word	0x080066f5
 80063dc:	080066f5 	.word	0x080066f5
 80063e0:	080066f5 	.word	0x080066f5
 80063e4:	080066c9 	.word	0x080066c9
 80063e8:	2b40      	cmp	r3, #64	; 0x40
 80063ea:	f000 812c 	beq.w	8006646 <GESTURE_Actions+0x326>
 80063ee:	e181      	b.n	80066f4 <GESTURE_Actions+0x3d4>
		case GestureRight:
			HAL_Delay(GEST_ENTR_T);
 80063f0:	f44f 7016 	mov.w	r0, #600	; 0x258
 80063f4:	f7fa fbaa 	bl	8000b4c <HAL_Delay>
			registerRead(0x43, 1, &data0);
 80063f8:	1dbb      	adds	r3, r7, #6
 80063fa:	461a      	mov	r2, r3
 80063fc:	2101      	movs	r1, #1
 80063fe:	2043      	movs	r0, #67	; 0x43
 8006400:	f000 f9b8 	bl	8006774 <registerRead>
			if(data0 == GestureForward){
 8006404:	79bb      	ldrb	r3, [r7, #6]
 8006406:	2b10      	cmp	r3, #16
 8006408:	d115      	bne.n	8006436 <GESTURE_Actions+0x116>
				printf("Forward Gesture \n");
 800640a:	48c4      	ldr	r0, [pc, #784]	; (800671c <GESTURE_Actions+0x3fc>)
 800640c:	f000 fba6 	bl	8006b5c <puts>
				strcpy((char*)ref, "\r\n Forward Gesture");
 8006410:	4ac3      	ldr	r2, [pc, #780]	; (8006720 <GESTURE_Actions+0x400>)
 8006412:	4bc4      	ldr	r3, [pc, #784]	; (8006724 <GESTURE_Actions+0x404>)
 8006414:	4615      	mov	r5, r2
 8006416:	461c      	mov	r4, r3
 8006418:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800641a:	6028      	str	r0, [r5, #0]
 800641c:	6069      	str	r1, [r5, #4]
 800641e:	60aa      	str	r2, [r5, #8]
 8006420:	60eb      	str	r3, [r5, #12]
 8006422:	8823      	ldrh	r3, [r4, #0]
 8006424:	78a2      	ldrb	r2, [r4, #2]
 8006426:	822b      	strh	r3, [r5, #16]
 8006428:	4613      	mov	r3, r2
 800642a:	74ab      	strb	r3, [r5, #18]
				HAL_Delay(GEST_QUIT_T);
 800642c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006430:	f7fa fb8c 	bl	8000b4c <HAL_Delay>
				HAL_Delay(GEST_QUIT_T);
			}else{
				printf("Right \n");
				strcpy((char*)ref, "\r\n Gesture Right");
			}
			break;
 8006434:	e15e      	b.n	80066f4 <GESTURE_Actions+0x3d4>
			}else if(data0 == GestureBackwards){
 8006436:	79bb      	ldrb	r3, [r7, #6]
 8006438:	2b20      	cmp	r3, #32
 800643a:	d114      	bne.n	8006466 <GESTURE_Actions+0x146>
				printf("Backwards \n");
 800643c:	48ba      	ldr	r0, [pc, #744]	; (8006728 <GESTURE_Actions+0x408>)
 800643e:	f000 fb8d 	bl	8006b5c <puts>
				strcpy((char*)ref, "\r\n Backwards Gesture");
 8006442:	4ab7      	ldr	r2, [pc, #732]	; (8006720 <GESTURE_Actions+0x400>)
 8006444:	4bb9      	ldr	r3, [pc, #740]	; (800672c <GESTURE_Actions+0x40c>)
 8006446:	4615      	mov	r5, r2
 8006448:	461c      	mov	r4, r3
 800644a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800644c:	6028      	str	r0, [r5, #0]
 800644e:	6069      	str	r1, [r5, #4]
 8006450:	60aa      	str	r2, [r5, #8]
 8006452:	60eb      	str	r3, [r5, #12]
 8006454:	6820      	ldr	r0, [r4, #0]
 8006456:	6128      	str	r0, [r5, #16]
 8006458:	7923      	ldrb	r3, [r4, #4]
 800645a:	752b      	strb	r3, [r5, #20]
				HAL_Delay(GEST_QUIT_T);
 800645c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006460:	f7fa fb74 	bl	8000b4c <HAL_Delay>
			break;
 8006464:	e146      	b.n	80066f4 <GESTURE_Actions+0x3d4>
				printf("Right \n");
 8006466:	48b2      	ldr	r0, [pc, #712]	; (8006730 <GESTURE_Actions+0x410>)
 8006468:	f000 fb78 	bl	8006b5c <puts>
				strcpy((char*)ref, "\r\n Gesture Right");
 800646c:	4aac      	ldr	r2, [pc, #688]	; (8006720 <GESTURE_Actions+0x400>)
 800646e:	4bb1      	ldr	r3, [pc, #708]	; (8006734 <GESTURE_Actions+0x414>)
 8006470:	4615      	mov	r5, r2
 8006472:	461c      	mov	r4, r3
 8006474:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006476:	6028      	str	r0, [r5, #0]
 8006478:	6069      	str	r1, [r5, #4]
 800647a:	60aa      	str	r2, [r5, #8]
 800647c:	60eb      	str	r3, [r5, #12]
 800647e:	7823      	ldrb	r3, [r4, #0]
 8006480:	742b      	strb	r3, [r5, #16]
			break;
 8006482:	e137      	b.n	80066f4 <GESTURE_Actions+0x3d4>

		case GestureLeft:
			HAL_Delay(GEST_ENTR_T);
 8006484:	f44f 7016 	mov.w	r0, #600	; 0x258
 8006488:	f7fa fb60 	bl	8000b4c <HAL_Delay>
			registerRead(0x43, 1, &data0);
 800648c:	1dbb      	adds	r3, r7, #6
 800648e:	461a      	mov	r2, r3
 8006490:	2101      	movs	r1, #1
 8006492:	2043      	movs	r0, #67	; 0x43
 8006494:	f000 f96e 	bl	8006774 <registerRead>
			if(data0 == GestureForward){
 8006498:	79bb      	ldrb	r3, [r7, #6]
 800649a:	2b10      	cmp	r3, #16
 800649c:	d115      	bne.n	80064ca <GESTURE_Actions+0x1aa>
				printf("Forward \n");
 800649e:	48a6      	ldr	r0, [pc, #664]	; (8006738 <GESTURE_Actions+0x418>)
 80064a0:	f000 fb5c 	bl	8006b5c <puts>
				strcpy((char*)ref, "\r\n Forward Gesture");
 80064a4:	4a9e      	ldr	r2, [pc, #632]	; (8006720 <GESTURE_Actions+0x400>)
 80064a6:	4b9f      	ldr	r3, [pc, #636]	; (8006724 <GESTURE_Actions+0x404>)
 80064a8:	4615      	mov	r5, r2
 80064aa:	461c      	mov	r4, r3
 80064ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80064ae:	6028      	str	r0, [r5, #0]
 80064b0:	6069      	str	r1, [r5, #4]
 80064b2:	60aa      	str	r2, [r5, #8]
 80064b4:	60eb      	str	r3, [r5, #12]
 80064b6:	8823      	ldrh	r3, [r4, #0]
 80064b8:	78a2      	ldrb	r2, [r4, #2]
 80064ba:	822b      	strh	r3, [r5, #16]
 80064bc:	4613      	mov	r3, r2
 80064be:	74ab      	strb	r3, [r5, #18]
				HAL_Delay(GEST_QUIT_T);
 80064c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80064c4:	f7fa fb42 	bl	8000b4c <HAL_Delay>
			}else{
				printf("Left \n");
				strcpy((char*)ref, "\r\n Gesture Left");
			}

			break;
 80064c8:	e114      	b.n	80066f4 <GESTURE_Actions+0x3d4>
			}else if(data0 == GestureBackwards){
 80064ca:	79bb      	ldrb	r3, [r7, #6]
 80064cc:	2b20      	cmp	r3, #32
 80064ce:	d114      	bne.n	80064fa <GESTURE_Actions+0x1da>
				printf("Backwards \n");
 80064d0:	4895      	ldr	r0, [pc, #596]	; (8006728 <GESTURE_Actions+0x408>)
 80064d2:	f000 fb43 	bl	8006b5c <puts>
				strcpy((char*)ref, "\r\n Backwards Gesture");
 80064d6:	4a92      	ldr	r2, [pc, #584]	; (8006720 <GESTURE_Actions+0x400>)
 80064d8:	4b94      	ldr	r3, [pc, #592]	; (800672c <GESTURE_Actions+0x40c>)
 80064da:	4615      	mov	r5, r2
 80064dc:	461c      	mov	r4, r3
 80064de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80064e0:	6028      	str	r0, [r5, #0]
 80064e2:	6069      	str	r1, [r5, #4]
 80064e4:	60aa      	str	r2, [r5, #8]
 80064e6:	60eb      	str	r3, [r5, #12]
 80064e8:	6820      	ldr	r0, [r4, #0]
 80064ea:	6128      	str	r0, [r5, #16]
 80064ec:	7923      	ldrb	r3, [r4, #4]
 80064ee:	752b      	strb	r3, [r5, #20]
				HAL_Delay(GEST_QUIT_T);
 80064f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80064f4:	f7fa fb2a 	bl	8000b4c <HAL_Delay>
			break;
 80064f8:	e0fc      	b.n	80066f4 <GESTURE_Actions+0x3d4>
				printf("Left \n");
 80064fa:	4890      	ldr	r0, [pc, #576]	; (800673c <GESTURE_Actions+0x41c>)
 80064fc:	f000 fb2e 	bl	8006b5c <puts>
				strcpy((char*)ref, "\r\n Gesture Left");
 8006500:	4a87      	ldr	r2, [pc, #540]	; (8006720 <GESTURE_Actions+0x400>)
 8006502:	4b8f      	ldr	r3, [pc, #572]	; (8006740 <GESTURE_Actions+0x420>)
 8006504:	4614      	mov	r4, r2
 8006506:	461d      	mov	r5, r3
 8006508:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800650a:	6020      	str	r0, [r4, #0]
 800650c:	6061      	str	r1, [r4, #4]
 800650e:	60a2      	str	r2, [r4, #8]
 8006510:	60e3      	str	r3, [r4, #12]
			break;
 8006512:	e0ef      	b.n	80066f4 <GESTURE_Actions+0x3d4>

		case GestureUp:
			HAL_Delay(GEST_ENTR_T);
 8006514:	f44f 7016 	mov.w	r0, #600	; 0x258
 8006518:	f7fa fb18 	bl	8000b4c <HAL_Delay>
			registerRead(0x43, 1, &data0);
 800651c:	1dbb      	adds	r3, r7, #6
 800651e:	461a      	mov	r2, r3
 8006520:	2101      	movs	r1, #1
 8006522:	2043      	movs	r0, #67	; 0x43
 8006524:	f000 f926 	bl	8006774 <registerRead>
			if(data0 == GestureForward){
 8006528:	79bb      	ldrb	r3, [r7, #6]
 800652a:	2b10      	cmp	r3, #16
 800652c:	d115      	bne.n	800655a <GESTURE_Actions+0x23a>
				printf("Forward \n");
 800652e:	4882      	ldr	r0, [pc, #520]	; (8006738 <GESTURE_Actions+0x418>)
 8006530:	f000 fb14 	bl	8006b5c <puts>
				strcpy((char*)ref, "\n\r Forward Gesture");
 8006534:	4a7a      	ldr	r2, [pc, #488]	; (8006720 <GESTURE_Actions+0x400>)
 8006536:	4b83      	ldr	r3, [pc, #524]	; (8006744 <GESTURE_Actions+0x424>)
 8006538:	4615      	mov	r5, r2
 800653a:	461c      	mov	r4, r3
 800653c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800653e:	6028      	str	r0, [r5, #0]
 8006540:	6069      	str	r1, [r5, #4]
 8006542:	60aa      	str	r2, [r5, #8]
 8006544:	60eb      	str	r3, [r5, #12]
 8006546:	8823      	ldrh	r3, [r4, #0]
 8006548:	78a2      	ldrb	r2, [r4, #2]
 800654a:	822b      	strh	r3, [r5, #16]
 800654c:	4613      	mov	r3, r2
 800654e:	74ab      	strb	r3, [r5, #18]
				HAL_Delay(GEST_QUIT_T);
 8006550:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006554:	f7fa fafa 	bl	8000b4c <HAL_Delay>
				HAL_Delay(GEST_QUIT_T);
			}else{
				printf("Up \n");
				strcpy((char*)ref, "\r\n Upwards Gesture");
			}
			break;
 8006558:	e0cc      	b.n	80066f4 <GESTURE_Actions+0x3d4>
			}else if(data0 == GestureBackwards){
 800655a:	79bb      	ldrb	r3, [r7, #6]
 800655c:	2b20      	cmp	r3, #32
 800655e:	d114      	bne.n	800658a <GESTURE_Actions+0x26a>
				printf("Backwards \n");
 8006560:	4871      	ldr	r0, [pc, #452]	; (8006728 <GESTURE_Actions+0x408>)
 8006562:	f000 fafb 	bl	8006b5c <puts>
				strcpy((char*)ref, "\r\n Backwards Gesture");
 8006566:	4a6e      	ldr	r2, [pc, #440]	; (8006720 <GESTURE_Actions+0x400>)
 8006568:	4b70      	ldr	r3, [pc, #448]	; (800672c <GESTURE_Actions+0x40c>)
 800656a:	4615      	mov	r5, r2
 800656c:	461c      	mov	r4, r3
 800656e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006570:	6028      	str	r0, [r5, #0]
 8006572:	6069      	str	r1, [r5, #4]
 8006574:	60aa      	str	r2, [r5, #8]
 8006576:	60eb      	str	r3, [r5, #12]
 8006578:	6820      	ldr	r0, [r4, #0]
 800657a:	6128      	str	r0, [r5, #16]
 800657c:	7923      	ldrb	r3, [r4, #4]
 800657e:	752b      	strb	r3, [r5, #20]
				HAL_Delay(GEST_QUIT_T);
 8006580:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006584:	f7fa fae2 	bl	8000b4c <HAL_Delay>
			break;
 8006588:	e0b4      	b.n	80066f4 <GESTURE_Actions+0x3d4>
				printf("Up \n");
 800658a:	486f      	ldr	r0, [pc, #444]	; (8006748 <GESTURE_Actions+0x428>)
 800658c:	f000 fae6 	bl	8006b5c <puts>
				strcpy((char*)ref, "\r\n Upwards Gesture");
 8006590:	4a63      	ldr	r2, [pc, #396]	; (8006720 <GESTURE_Actions+0x400>)
 8006592:	4b6e      	ldr	r3, [pc, #440]	; (800674c <GESTURE_Actions+0x42c>)
 8006594:	4615      	mov	r5, r2
 8006596:	461c      	mov	r4, r3
 8006598:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800659a:	6028      	str	r0, [r5, #0]
 800659c:	6069      	str	r1, [r5, #4]
 800659e:	60aa      	str	r2, [r5, #8]
 80065a0:	60eb      	str	r3, [r5, #12]
 80065a2:	8823      	ldrh	r3, [r4, #0]
 80065a4:	78a2      	ldrb	r2, [r4, #2]
 80065a6:	822b      	strh	r3, [r5, #16]
 80065a8:	4613      	mov	r3, r2
 80065aa:	74ab      	strb	r3, [r5, #18]
			break;
 80065ac:	e0a2      	b.n	80066f4 <GESTURE_Actions+0x3d4>

		case GestureDown:
			HAL_Delay(GEST_ENTR_T);
 80065ae:	f44f 7016 	mov.w	r0, #600	; 0x258
 80065b2:	f7fa facb 	bl	8000b4c <HAL_Delay>
			registerRead(0x43, 1, &data0);
 80065b6:	1dbb      	adds	r3, r7, #6
 80065b8:	461a      	mov	r2, r3
 80065ba:	2101      	movs	r1, #1
 80065bc:	2043      	movs	r0, #67	; 0x43
 80065be:	f000 f8d9 	bl	8006774 <registerRead>
			if(data0 == GestureForward){
 80065c2:	79bb      	ldrb	r3, [r7, #6]
 80065c4:	2b10      	cmp	r3, #16
 80065c6:	d115      	bne.n	80065f4 <GESTURE_Actions+0x2d4>
				printf("Forward \n");
 80065c8:	485b      	ldr	r0, [pc, #364]	; (8006738 <GESTURE_Actions+0x418>)
 80065ca:	f000 fac7 	bl	8006b5c <puts>
				strcpy((char*)ref, "\r\n Forward Gesture");
 80065ce:	4a54      	ldr	r2, [pc, #336]	; (8006720 <GESTURE_Actions+0x400>)
 80065d0:	4b54      	ldr	r3, [pc, #336]	; (8006724 <GESTURE_Actions+0x404>)
 80065d2:	4615      	mov	r5, r2
 80065d4:	461c      	mov	r4, r3
 80065d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80065d8:	6028      	str	r0, [r5, #0]
 80065da:	6069      	str	r1, [r5, #4]
 80065dc:	60aa      	str	r2, [r5, #8]
 80065de:	60eb      	str	r3, [r5, #12]
 80065e0:	8823      	ldrh	r3, [r4, #0]
 80065e2:	78a2      	ldrb	r2, [r4, #2]
 80065e4:	822b      	strh	r3, [r5, #16]
 80065e6:	4613      	mov	r3, r2
 80065e8:	74ab      	strb	r3, [r5, #18]
				HAL_Delay(GEST_QUIT_T);
 80065ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80065ee:	f7fa faad 	bl	8000b4c <HAL_Delay>
				HAL_Delay(GEST_QUIT_T);
			}else{
				strcpy((char*)ref, "\r\n Downwards Gesture");
				printf("Downwards Gesture \n");
			}
			break;
 80065f2:	e07f      	b.n	80066f4 <GESTURE_Actions+0x3d4>
			}else if(data0 == GestureBackwards){
 80065f4:	79bb      	ldrb	r3, [r7, #6]
 80065f6:	2b20      	cmp	r3, #32
 80065f8:	d114      	bne.n	8006624 <GESTURE_Actions+0x304>
				printf("Backwards \n");
 80065fa:	484b      	ldr	r0, [pc, #300]	; (8006728 <GESTURE_Actions+0x408>)
 80065fc:	f000 faae 	bl	8006b5c <puts>
				strcpy((char*)ref, "\n\r Backwards Gesture");
 8006600:	4a47      	ldr	r2, [pc, #284]	; (8006720 <GESTURE_Actions+0x400>)
 8006602:	4b53      	ldr	r3, [pc, #332]	; (8006750 <GESTURE_Actions+0x430>)
 8006604:	4615      	mov	r5, r2
 8006606:	461c      	mov	r4, r3
 8006608:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800660a:	6028      	str	r0, [r5, #0]
 800660c:	6069      	str	r1, [r5, #4]
 800660e:	60aa      	str	r2, [r5, #8]
 8006610:	60eb      	str	r3, [r5, #12]
 8006612:	6820      	ldr	r0, [r4, #0]
 8006614:	6128      	str	r0, [r5, #16]
 8006616:	7923      	ldrb	r3, [r4, #4]
 8006618:	752b      	strb	r3, [r5, #20]
				HAL_Delay(GEST_QUIT_T);
 800661a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800661e:	f7fa fa95 	bl	8000b4c <HAL_Delay>
			break;
 8006622:	e067      	b.n	80066f4 <GESTURE_Actions+0x3d4>
				strcpy((char*)ref, "\r\n Downwards Gesture");
 8006624:	4a3e      	ldr	r2, [pc, #248]	; (8006720 <GESTURE_Actions+0x400>)
 8006626:	4b4b      	ldr	r3, [pc, #300]	; (8006754 <GESTURE_Actions+0x434>)
 8006628:	4615      	mov	r5, r2
 800662a:	461c      	mov	r4, r3
 800662c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800662e:	6028      	str	r0, [r5, #0]
 8006630:	6069      	str	r1, [r5, #4]
 8006632:	60aa      	str	r2, [r5, #8]
 8006634:	60eb      	str	r3, [r5, #12]
 8006636:	6820      	ldr	r0, [r4, #0]
 8006638:	6128      	str	r0, [r5, #16]
 800663a:	7923      	ldrb	r3, [r4, #4]
 800663c:	752b      	strb	r3, [r5, #20]
				printf("Downwards Gesture \n");
 800663e:	4846      	ldr	r0, [pc, #280]	; (8006758 <GESTURE_Actions+0x438>)
 8006640:	f000 fa8c 	bl	8006b5c <puts>
			break;
 8006644:	e056      	b.n	80066f4 <GESTURE_Actions+0x3d4>

		case GestureCW:
			printf("Clockwise Gesture \n");
 8006646:	4845      	ldr	r0, [pc, #276]	; (800675c <GESTURE_Actions+0x43c>)
 8006648:	f000 fa88 	bl	8006b5c <puts>
			strcpy((char*)ref, "\r\n Clockwise Gesture");
 800664c:	4a34      	ldr	r2, [pc, #208]	; (8006720 <GESTURE_Actions+0x400>)
 800664e:	4b44      	ldr	r3, [pc, #272]	; (8006760 <GESTURE_Actions+0x440>)
 8006650:	4615      	mov	r5, r2
 8006652:	461c      	mov	r4, r3
 8006654:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006656:	6028      	str	r0, [r5, #0]
 8006658:	6069      	str	r1, [r5, #4]
 800665a:	60aa      	str	r2, [r5, #8]
 800665c:	60eb      	str	r3, [r5, #12]
 800665e:	6820      	ldr	r0, [r4, #0]
 8006660:	6128      	str	r0, [r5, #16]
 8006662:	7923      	ldrb	r3, [r4, #4]
 8006664:	752b      	strb	r3, [r5, #20]
			HAL_Delay(GEST_QUIT_T);
 8006666:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800666a:	f7fa fa6f 	bl	8000b4c <HAL_Delay>
			break;
 800666e:	e041      	b.n	80066f4 <GESTURE_Actions+0x3d4>

		case GestureACW:
			printf("Anti-Clockwise Gesture \n");
 8006670:	483c      	ldr	r0, [pc, #240]	; (8006764 <GESTURE_Actions+0x444>)
 8006672:	f000 fa73 	bl	8006b5c <puts>
			strcpy((char*)ref, "\r\n Anti-clockwise Gesture");
 8006676:	4a2a      	ldr	r2, [pc, #168]	; (8006720 <GESTURE_Actions+0x400>)
 8006678:	4b3b      	ldr	r3, [pc, #236]	; (8006768 <GESTURE_Actions+0x448>)
 800667a:	4615      	mov	r5, r2
 800667c:	461c      	mov	r4, r3
 800667e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006680:	6028      	str	r0, [r5, #0]
 8006682:	6069      	str	r1, [r5, #4]
 8006684:	60aa      	str	r2, [r5, #8]
 8006686:	60eb      	str	r3, [r5, #12]
 8006688:	cc03      	ldmia	r4!, {r0, r1}
 800668a:	6128      	str	r0, [r5, #16]
 800668c:	6169      	str	r1, [r5, #20]
 800668e:	8823      	ldrh	r3, [r4, #0]
 8006690:	832b      	strh	r3, [r5, #24]
			HAL_Delay(GEST_QUIT_T);
 8006692:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006696:	f7fa fa59 	bl	8000b4c <HAL_Delay>
			break;
 800669a:	e02b      	b.n	80066f4 <GESTURE_Actions+0x3d4>

		case GestureForward:
			printf("Forward \n");
 800669c:	4826      	ldr	r0, [pc, #152]	; (8006738 <GESTURE_Actions+0x418>)
 800669e:	f000 fa5d 	bl	8006b5c <puts>
			strcpy((char*)ref, "\r\n Forward Gesture");
 80066a2:	4a1f      	ldr	r2, [pc, #124]	; (8006720 <GESTURE_Actions+0x400>)
 80066a4:	4b1f      	ldr	r3, [pc, #124]	; (8006724 <GESTURE_Actions+0x404>)
 80066a6:	4615      	mov	r5, r2
 80066a8:	461c      	mov	r4, r3
 80066aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80066ac:	6028      	str	r0, [r5, #0]
 80066ae:	6069      	str	r1, [r5, #4]
 80066b0:	60aa      	str	r2, [r5, #8]
 80066b2:	60eb      	str	r3, [r5, #12]
 80066b4:	8823      	ldrh	r3, [r4, #0]
 80066b6:	78a2      	ldrb	r2, [r4, #2]
 80066b8:	822b      	strh	r3, [r5, #16]
 80066ba:	4613      	mov	r3, r2
 80066bc:	74ab      	strb	r3, [r5, #18]
			HAL_Delay(GEST_QUIT_T);
 80066be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80066c2:	f7fa fa43 	bl	8000b4c <HAL_Delay>
			break;
 80066c6:	e015      	b.n	80066f4 <GESTURE_Actions+0x3d4>

		case GestureBackwards:
			printf("Backwards Gesture \n");
 80066c8:	4828      	ldr	r0, [pc, #160]	; (800676c <GESTURE_Actions+0x44c>)
 80066ca:	f000 fa47 	bl	8006b5c <puts>
			strcpy((char*)ref, "\r\n Backwards Gesture");
 80066ce:	4a14      	ldr	r2, [pc, #80]	; (8006720 <GESTURE_Actions+0x400>)
 80066d0:	4b16      	ldr	r3, [pc, #88]	; (800672c <GESTURE_Actions+0x40c>)
 80066d2:	4615      	mov	r5, r2
 80066d4:	461c      	mov	r4, r3
 80066d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80066d8:	6028      	str	r0, [r5, #0]
 80066da:	6069      	str	r1, [r5, #4]
 80066dc:	60aa      	str	r2, [r5, #8]
 80066de:	60eb      	str	r3, [r5, #12]
 80066e0:	6820      	ldr	r0, [r4, #0]
 80066e2:	6128      	str	r0, [r5, #16]
 80066e4:	7923      	ldrb	r3, [r4, #4]
 80066e6:	752b      	strb	r3, [r5, #20]
			HAL_Delay(GEST_QUIT_T);
 80066e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80066ec:	f7fa fa2e 	bl	8000b4c <HAL_Delay>
			break;
 80066f0:	e000      	b.n	80066f4 <GESTURE_Actions+0x3d4>
		}
	}
 80066f2:	bf00      	nop
	HAL_UART_Transmit(&huart3, ref, strlen((char*)ref), HAL_MAX_DELAY);
 80066f4:	480a      	ldr	r0, [pc, #40]	; (8006720 <GESTURE_Actions+0x400>)
 80066f6:	f7f9 fd73 	bl	80001e0 <strlen>
 80066fa:	4603      	mov	r3, r0
 80066fc:	b29a      	uxth	r2, r3
 80066fe:	f04f 33ff 	mov.w	r3, #4294967295
 8006702:	4907      	ldr	r1, [pc, #28]	; (8006720 <GESTURE_Actions+0x400>)
 8006704:	481a      	ldr	r0, [pc, #104]	; (8006770 <GESTURE_Actions+0x450>)
 8006706:	f7fd ffe0 	bl	80046ca <HAL_UART_Transmit>
	HAL_Delay(500);
 800670a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800670e:	f7fa fa1d 	bl	8000b4c <HAL_Delay>
};
 8006712:	bf00      	nop
 8006714:	3708      	adds	r7, #8
 8006716:	46bd      	mov	sp, r7
 8006718:	bdb0      	pop	{r4, r5, r7, pc}
 800671a:	bf00      	nop
 800671c:	08007df0 	.word	0x08007df0
 8006720:	20000680 	.word	0x20000680
 8006724:	08007e04 	.word	0x08007e04
 8006728:	08007e18 	.word	0x08007e18
 800672c:	08007e24 	.word	0x08007e24
 8006730:	08007e3c 	.word	0x08007e3c
 8006734:	08007e44 	.word	0x08007e44
 8006738:	08007e58 	.word	0x08007e58
 800673c:	08007e64 	.word	0x08007e64
 8006740:	08007e6c 	.word	0x08007e6c
 8006744:	08007e7c 	.word	0x08007e7c
 8006748:	08007e90 	.word	0x08007e90
 800674c:	08007e94 	.word	0x08007e94
 8006750:	08007ea8 	.word	0x08007ea8
 8006754:	08007ec0 	.word	0x08007ec0
 8006758:	08007ed8 	.word	0x08007ed8
 800675c:	08007eec 	.word	0x08007eec
 8006760:	08007f00 	.word	0x08007f00
 8006764:	08007f18 	.word	0x08007f18
 8006768:	08007f30 	.word	0x08007f30
 800676c:	08007f4c 	.word	0x08007f4c
 8006770:	20000250 	.word	0x20000250

08006774 <registerRead>:


static uint8_t registerRead(uint8_t addr, uint8_t qty, uint8_t data[])
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b088      	sub	sp, #32
 8006778:	af04      	add	r7, sp, #16
 800677a:	4603      	mov	r3, r0
 800677c:	603a      	str	r2, [r7, #0]
 800677e:	71fb      	strb	r3, [r7, #7]
 8006780:	460b      	mov	r3, r1
 8006782:	71bb      	strb	r3, [r7, #6]
	/* uint8_t tmp[3];
	tmp[0] = addr; */
	/* uint8_t result = 0; */

	uint8_t value = 0;
 8006784:	2300      	movs	r3, #0
 8006786:	73bb      	strb	r3, [r7, #14]
	HAL_StatusTypeDef result = HAL_OK;
 8006788:	2300      	movs	r3, #0
 800678a:	73fb      	strb	r3, [r7, #15]
	result = HAL_I2C_Mem_Write(&HandleI2C, GESTURE_ADDRESS_I2C << 1, addr, I2C_MEMADD_SIZE_8BIT, &value, 1, 10);
 800678c:	79fb      	ldrb	r3, [r7, #7]
 800678e:	b29a      	uxth	r2, r3
 8006790:	230a      	movs	r3, #10
 8006792:	9302      	str	r3, [sp, #8]
 8006794:	2301      	movs	r3, #1
 8006796:	9301      	str	r3, [sp, #4]
 8006798:	f107 030e 	add.w	r3, r7, #14
 800679c:	9300      	str	r3, [sp, #0]
 800679e:	2301      	movs	r3, #1
 80067a0:	21e6      	movs	r1, #230	; 0xe6
 80067a2:	4826      	ldr	r0, [pc, #152]	; (800683c <registerRead+0xc8>)
 80067a4:	f7fa fd3a 	bl	800121c <HAL_I2C_Mem_Write>
 80067a8:	4603      	mov	r3, r0
 80067aa:	73fb      	strb	r3, [r7, #15]

	/* result = HAL_I2C_Master_Transmit(&HandleI2C, GESTURE_ADDRESS_I2C << 1, &addr, 1, 10); */

	if (result != HAL_OK)
 80067ac:	7bfb      	ldrb	r3, [r7, #15]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d009      	beq.n	80067c6 <registerRead+0x52>
	{
		sprintf((char*)ref, "\r\n Error TX %d", result);
 80067b2:	7bfb      	ldrb	r3, [r7, #15]
 80067b4:	461a      	mov	r2, r3
 80067b6:	4922      	ldr	r1, [pc, #136]	; (8006840 <registerRead+0xcc>)
 80067b8:	4822      	ldr	r0, [pc, #136]	; (8006844 <registerRead+0xd0>)
 80067ba:	f000 f9d7 	bl	8006b6c <siprintf>
		printf("Error TX \n");
 80067be:	4822      	ldr	r0, [pc, #136]	; (8006848 <registerRead+0xd4>)
 80067c0:	f000 f9cc 	bl	8006b5c <puts>
 80067c4:	e005      	b.n	80067d2 <registerRead+0x5e>
	}else{
		sprintf((char*)ref, "\r\n Transmitted %d", result);
 80067c6:	7bfb      	ldrb	r3, [r7, #15]
 80067c8:	461a      	mov	r2, r3
 80067ca:	4920      	ldr	r1, [pc, #128]	; (800684c <registerRead+0xd8>)
 80067cc:	481d      	ldr	r0, [pc, #116]	; (8006844 <registerRead+0xd0>)
 80067ce:	f000 f9cd 	bl	8006b6c <siprintf>


	/* result = HAL_I2C_Master_Receive(&HandleI2C, GESTURE_ADDRESS_I2C << 1, data, qty, 10); */
	/* result = HAL_I2C_Mem_Read(&HandleI2C, GESTURE_ADDRESS_I2C << 1, addr, I2C_MEMADD_SIZE_8BIT, data, qty, 10); */

	if (HAL_I2C_Mem_Read(&HandleI2C, GESTURE_ADDRESS_I2C << 1, addr, I2C_MEMADD_SIZE_8BIT, data, qty, 10) != HAL_OK){
 80067d2:	79fb      	ldrb	r3, [r7, #7]
 80067d4:	b29a      	uxth	r2, r3
 80067d6:	79bb      	ldrb	r3, [r7, #6]
 80067d8:	b29b      	uxth	r3, r3
 80067da:	210a      	movs	r1, #10
 80067dc:	9102      	str	r1, [sp, #8]
 80067de:	9301      	str	r3, [sp, #4]
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	9300      	str	r3, [sp, #0]
 80067e4:	2301      	movs	r3, #1
 80067e6:	21e6      	movs	r1, #230	; 0xe6
 80067e8:	4814      	ldr	r0, [pc, #80]	; (800683c <registerRead+0xc8>)
 80067ea:	f7fa fe2b 	bl	8001444 <HAL_I2C_Mem_Read>
 80067ee:	4603      	mov	r3, r0
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d009      	beq.n	8006808 <registerRead+0x94>
		sprintf((char*)ref, "\r\n Error RX %d", result);
 80067f4:	7bfb      	ldrb	r3, [r7, #15]
 80067f6:	461a      	mov	r2, r3
 80067f8:	4915      	ldr	r1, [pc, #84]	; (8006850 <registerRead+0xdc>)
 80067fa:	4812      	ldr	r0, [pc, #72]	; (8006844 <registerRead+0xd0>)
 80067fc:	f000 f9b6 	bl	8006b6c <siprintf>
		printf("Error RX \n");
 8006800:	4814      	ldr	r0, [pc, #80]	; (8006854 <registerRead+0xe0>)
 8006802:	f000 f9ab 	bl	8006b5c <puts>
 8006806:	e005      	b.n	8006814 <registerRead+0xa0>
	}else{
		sprintf((char*)ref, "\r\n Received %d", result);
 8006808:	7bfb      	ldrb	r3, [r7, #15]
 800680a:	461a      	mov	r2, r3
 800680c:	4912      	ldr	r1, [pc, #72]	; (8006858 <registerRead+0xe4>)
 800680e:	480d      	ldr	r0, [pc, #52]	; (8006844 <registerRead+0xd0>)
 8006810:	f000 f9ac 	bl	8006b6c <siprintf>
	}
	HAL_UART_Transmit(&huart3, ref, strlen((char*)ref), HAL_MAX_DELAY);
 8006814:	480b      	ldr	r0, [pc, #44]	; (8006844 <registerRead+0xd0>)
 8006816:	f7f9 fce3 	bl	80001e0 <strlen>
 800681a:	4603      	mov	r3, r0
 800681c:	b29a      	uxth	r2, r3
 800681e:	f04f 33ff 	mov.w	r3, #4294967295
 8006822:	4908      	ldr	r1, [pc, #32]	; (8006844 <registerRead+0xd0>)
 8006824:	480d      	ldr	r0, [pc, #52]	; (800685c <registerRead+0xe8>)
 8006826:	f7fd ff50 	bl	80046ca <HAL_UART_Transmit>
	HAL_Delay(1000);
 800682a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800682e:	f7fa f98d 	bl	8000b4c <HAL_Delay>
	return result;
 8006832:	7bfb      	ldrb	r3, [r7, #15]
};
 8006834:	4618      	mov	r0, r3
 8006836:	3710      	adds	r7, #16
 8006838:	46bd      	mov	sp, r7
 800683a:	bd80      	pop	{r7, pc}
 800683c:	20000340 	.word	0x20000340
 8006840:	08007f60 	.word	0x08007f60
 8006844:	20000680 	.word	0x20000680
 8006848:	08007f70 	.word	0x08007f70
 800684c:	08007f7c 	.word	0x08007f7c
 8006850:	08007f90 	.word	0x08007f90
 8006854:	08007fa0 	.word	0x08007fa0
 8006858:	08007fac 	.word	0x08007fac
 800685c:	20000250 	.word	0x20000250

08006860 <registerWrite>:

static void registerWrite(uint8_t addr, uint8_t cmd)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b088      	sub	sp, #32
 8006864:	af04      	add	r7, sp, #16
 8006866:	4603      	mov	r3, r0
 8006868:	460a      	mov	r2, r1
 800686a:	71fb      	strb	r3, [r7, #7]
 800686c:	4613      	mov	r3, r2
 800686e:	71bb      	strb	r3, [r7, #6]
	/* uint8_t tmp[3] = { addr, cmd }; */
	/* uint8_t result = 0; */

	/* result = HAL_I2C_Master_Transmit(&HandleI2C, GESTURE_ADDRESS_I2C << 1, &addr, 2, 10); */

	HAL_StatusTypeDef result = HAL_OK;
 8006870:	2300      	movs	r3, #0
 8006872:	73fb      	strb	r3, [r7, #15]
	/* result = HAL_I2C_Mem_Write(&HandleI2C, GESTURE_ADDRESS_I2C << 1, (uint16_t)addr, I2C_MEMADD_SIZE_8BIT, &cmd, 2, 10); */

	if (HAL_I2C_Mem_Write(&HandleI2C, GESTURE_ADDRESS_I2C << 1, (uint16_t)addr, I2C_MEMADD_SIZE_8BIT, &cmd, 2, 10) != HAL_OK)
 8006874:	79fb      	ldrb	r3, [r7, #7]
 8006876:	b29a      	uxth	r2, r3
 8006878:	230a      	movs	r3, #10
 800687a:	9302      	str	r3, [sp, #8]
 800687c:	2302      	movs	r3, #2
 800687e:	9301      	str	r3, [sp, #4]
 8006880:	1dbb      	adds	r3, r7, #6
 8006882:	9300      	str	r3, [sp, #0]
 8006884:	2301      	movs	r3, #1
 8006886:	21e6      	movs	r1, #230	; 0xe6
 8006888:	4814      	ldr	r0, [pc, #80]	; (80068dc <registerWrite+0x7c>)
 800688a:	f7fa fcc7 	bl	800121c <HAL_I2C_Mem_Write>
 800688e:	4603      	mov	r3, r0
 8006890:	2b00      	cmp	r3, #0
 8006892:	d009      	beq.n	80068a8 <registerWrite+0x48>
	{
		sprintf((char*)ref, "\r\n Transmission Error %d", result);
 8006894:	7bfb      	ldrb	r3, [r7, #15]
 8006896:	461a      	mov	r2, r3
 8006898:	4911      	ldr	r1, [pc, #68]	; (80068e0 <registerWrite+0x80>)
 800689a:	4812      	ldr	r0, [pc, #72]	; (80068e4 <registerWrite+0x84>)
 800689c:	f000 f966 	bl	8006b6c <siprintf>
		printf("Transmission Error \n");
 80068a0:	4811      	ldr	r0, [pc, #68]	; (80068e8 <registerWrite+0x88>)
 80068a2:	f000 f95b 	bl	8006b5c <puts>
 80068a6:	e005      	b.n	80068b4 <registerWrite+0x54>
	}else{
		sprintf((char*)ref, "\r\n Transmission Successful %d", result);
 80068a8:	7bfb      	ldrb	r3, [r7, #15]
 80068aa:	461a      	mov	r2, r3
 80068ac:	490f      	ldr	r1, [pc, #60]	; (80068ec <registerWrite+0x8c>)
 80068ae:	480d      	ldr	r0, [pc, #52]	; (80068e4 <registerWrite+0x84>)
 80068b0:	f000 f95c 	bl	8006b6c <siprintf>
	}
	HAL_UART_Transmit(&huart3, ref, strlen((char*)ref), HAL_MAX_DELAY);
 80068b4:	480b      	ldr	r0, [pc, #44]	; (80068e4 <registerWrite+0x84>)
 80068b6:	f7f9 fc93 	bl	80001e0 <strlen>
 80068ba:	4603      	mov	r3, r0
 80068bc:	b29a      	uxth	r2, r3
 80068be:	f04f 33ff 	mov.w	r3, #4294967295
 80068c2:	4908      	ldr	r1, [pc, #32]	; (80068e4 <registerWrite+0x84>)
 80068c4:	480a      	ldr	r0, [pc, #40]	; (80068f0 <registerWrite+0x90>)
 80068c6:	f7fd ff00 	bl	80046ca <HAL_UART_Transmit>
	HAL_Delay(1000);
 80068ca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80068ce:	f7fa f93d 	bl	8000b4c <HAL_Delay>
};
 80068d2:	bf00      	nop
 80068d4:	3710      	adds	r7, #16
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}
 80068da:	bf00      	nop
 80068dc:	20000340 	.word	0x20000340
 80068e0:	08007fbc 	.word	0x08007fbc
 80068e4:	20000680 	.word	0x20000680
 80068e8:	08007fd8 	.word	0x08007fd8
 80068ec:	08007fec 	.word	0x08007fec
 80068f0:	20000250 	.word	0x20000250

080068f4 <gestureInit>:



uint8_t gestureInit(void)
{
 80068f4:	b5b0      	push	{r4, r5, r7, lr}
 80068f6:	b084      	sub	sp, #16
 80068f8:	af00      	add	r7, sp, #0
	uint8_t data0 = 0;
 80068fa:	2300      	movs	r3, #0
 80068fc:	71fb      	strb	r3, [r7, #7]
	uint8_t data1 = 1;
 80068fe:	2301      	movs	r3, #1
 8006900:	71bb      	strb	r3, [r7, #6]
	int result = 0;
 8006902:	2300      	movs	r3, #0
 8006904:	60fb      	str	r3, [r7, #12]

	registerRead(0,1, &data0);
 8006906:	1dfb      	adds	r3, r7, #7
 8006908:	461a      	mov	r2, r3
 800690a:	2101      	movs	r1, #1
 800690c:	2000      	movs	r0, #0
 800690e:	f7ff ff31 	bl	8006774 <registerRead>
	registerRead(1,1, &data1);
 8006912:	1dbb      	adds	r3, r7, #6
 8006914:	461a      	mov	r2, r3
 8006916:	2101      	movs	r1, #1
 8006918:	2001      	movs	r0, #1
 800691a:	f7ff ff2b 	bl	8006774 <registerRead>

	registerWrite(GESTURE_REG_BANK_SEL, GESTURE_BANK0);
 800691e:	2100      	movs	r1, #0
 8006920:	20ef      	movs	r0, #239	; 0xef
 8006922:	f7ff ff9d 	bl	8006860 <registerWrite>
	registerWrite(GESTURE_REG_BANK_SEL, GESTURE_BANK0);
 8006926:	2100      	movs	r1, #0
 8006928:	20ef      	movs	r0, #239	; 0xef
 800692a:	f7ff ff99 	bl	8006860 <registerWrite>

	if ((data0 != 0x20) || (data1 != 0x76)){
 800692e:	79fb      	ldrb	r3, [r7, #7]
 8006930:	2b20      	cmp	r3, #32
 8006932:	d102      	bne.n	800693a <gestureInit+0x46>
 8006934:	79bb      	ldrb	r3, [r7, #6]
 8006936:	2b76      	cmp	r3, #118	; 0x76
 8006938:	d001      	beq.n	800693e <gestureInit+0x4a>
		result = 1;
 800693a:	2301      	movs	r3, #1
 800693c:	60fb      	str	r3, [r7, #12]
	}

	if(data0 == 0x20){
 800693e:	79fb      	ldrb	r3, [r7, #7]
 8006940:	2b20      	cmp	r3, #32
 8006942:	d10b      	bne.n	800695c <gestureInit+0x68>
		strcpy((char*)ref, "\n\r Wake Up");
 8006944:	4a24      	ldr	r2, [pc, #144]	; (80069d8 <gestureInit+0xe4>)
 8006946:	4b25      	ldr	r3, [pc, #148]	; (80069dc <gestureInit+0xe8>)
 8006948:	cb03      	ldmia	r3!, {r0, r1}
 800694a:	6010      	str	r0, [r2, #0]
 800694c:	6051      	str	r1, [r2, #4]
 800694e:	8819      	ldrh	r1, [r3, #0]
 8006950:	789b      	ldrb	r3, [r3, #2]
 8006952:	8111      	strh	r1, [r2, #8]
 8006954:	7293      	strb	r3, [r2, #10]
		printf("\n\r Wake Up");
 8006956:	4821      	ldr	r0, [pc, #132]	; (80069dc <gestureInit+0xe8>)
 8006958:	f000 f87a 	bl	8006a50 <iprintf>
	}

	for(int i = 0; i < initialRegister; i++){
 800695c:	2300      	movs	r3, #0
 800695e:	60bb      	str	r3, [r7, #8]
 8006960:	e00f      	b.n	8006982 <gestureInit+0x8e>
		registerWrite(RegisterArray[i][0], RegisterArray[i][1]);
 8006962:	4a1f      	ldr	r2, [pc, #124]	; (80069e0 <gestureInit+0xec>)
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 800696a:	491d      	ldr	r1, [pc, #116]	; (80069e0 <gestureInit+0xec>)
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	005b      	lsls	r3, r3, #1
 8006970:	440b      	add	r3, r1
 8006972:	785b      	ldrb	r3, [r3, #1]
 8006974:	4619      	mov	r1, r3
 8006976:	4610      	mov	r0, r2
 8006978:	f7ff ff72 	bl	8006860 <registerWrite>
	for(int i = 0; i < initialRegister; i++){
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	3301      	adds	r3, #1
 8006980:	60bb      	str	r3, [r7, #8]
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	2bda      	cmp	r3, #218	; 0xda
 8006986:	d9ec      	bls.n	8006962 <gestureInit+0x6e>
	}
	strcpy((char*)ref, "\n\r Register Initialize Finished");
 8006988:	4a13      	ldr	r2, [pc, #76]	; (80069d8 <gestureInit+0xe4>)
 800698a:	4b16      	ldr	r3, [pc, #88]	; (80069e4 <gestureInit+0xf0>)
 800698c:	4614      	mov	r4, r2
 800698e:	461d      	mov	r5, r3
 8006990:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006992:	6020      	str	r0, [r4, #0]
 8006994:	6061      	str	r1, [r4, #4]
 8006996:	60a2      	str	r2, [r4, #8]
 8006998:	60e3      	str	r3, [r4, #12]
 800699a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800699c:	6120      	str	r0, [r4, #16]
 800699e:	6161      	str	r1, [r4, #20]
 80069a0:	61a2      	str	r2, [r4, #24]
 80069a2:	61e3      	str	r3, [r4, #28]
	registerWrite(GESTURE_REG_BANK_SEL, GESTURE_BANK0);
 80069a4:	2100      	movs	r1, #0
 80069a6:	20ef      	movs	r0, #239	; 0xef
 80069a8:	f7ff ff5a 	bl	8006860 <registerWrite>
	HAL_UART_Transmit(&huart3, ref, strlen((char*)ref), HAL_MAX_DELAY);
 80069ac:	480a      	ldr	r0, [pc, #40]	; (80069d8 <gestureInit+0xe4>)
 80069ae:	f7f9 fc17 	bl	80001e0 <strlen>
 80069b2:	4603      	mov	r3, r0
 80069b4:	b29a      	uxth	r2, r3
 80069b6:	f04f 33ff 	mov.w	r3, #4294967295
 80069ba:	4907      	ldr	r1, [pc, #28]	; (80069d8 <gestureInit+0xe4>)
 80069bc:	480a      	ldr	r0, [pc, #40]	; (80069e8 <gestureInit+0xf4>)
 80069be:	f7fd fe84 	bl	80046ca <HAL_UART_Transmit>
	HAL_Delay(1000);
 80069c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80069c6:	f7fa f8c1 	bl	8000b4c <HAL_Delay>
	return result;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	b2db      	uxtb	r3, r3
};
 80069ce:	4618      	mov	r0, r3
 80069d0:	3710      	adds	r7, #16
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bdb0      	pop	{r4, r5, r7, pc}
 80069d6:	bf00      	nop
 80069d8:	20000680 	.word	0x20000680
 80069dc:	0800800c 	.word	0x0800800c
 80069e0:	2000000c 	.word	0x2000000c
 80069e4:	08008018 	.word	0x08008018
 80069e8:	20000250 	.word	0x20000250

080069ec <__errno>:
 80069ec:	4b01      	ldr	r3, [pc, #4]	; (80069f4 <__errno+0x8>)
 80069ee:	6818      	ldr	r0, [r3, #0]
 80069f0:	4770      	bx	lr
 80069f2:	bf00      	nop
 80069f4:	200001c4 	.word	0x200001c4

080069f8 <__libc_init_array>:
 80069f8:	b570      	push	{r4, r5, r6, lr}
 80069fa:	4d0d      	ldr	r5, [pc, #52]	; (8006a30 <__libc_init_array+0x38>)
 80069fc:	4c0d      	ldr	r4, [pc, #52]	; (8006a34 <__libc_init_array+0x3c>)
 80069fe:	1b64      	subs	r4, r4, r5
 8006a00:	10a4      	asrs	r4, r4, #2
 8006a02:	2600      	movs	r6, #0
 8006a04:	42a6      	cmp	r6, r4
 8006a06:	d109      	bne.n	8006a1c <__libc_init_array+0x24>
 8006a08:	4d0b      	ldr	r5, [pc, #44]	; (8006a38 <__libc_init_array+0x40>)
 8006a0a:	4c0c      	ldr	r4, [pc, #48]	; (8006a3c <__libc_init_array+0x44>)
 8006a0c:	f001 f9be 	bl	8007d8c <_init>
 8006a10:	1b64      	subs	r4, r4, r5
 8006a12:	10a4      	asrs	r4, r4, #2
 8006a14:	2600      	movs	r6, #0
 8006a16:	42a6      	cmp	r6, r4
 8006a18:	d105      	bne.n	8006a26 <__libc_init_array+0x2e>
 8006a1a:	bd70      	pop	{r4, r5, r6, pc}
 8006a1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a20:	4798      	blx	r3
 8006a22:	3601      	adds	r6, #1
 8006a24:	e7ee      	b.n	8006a04 <__libc_init_array+0xc>
 8006a26:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a2a:	4798      	blx	r3
 8006a2c:	3601      	adds	r6, #1
 8006a2e:	e7f2      	b.n	8006a16 <__libc_init_array+0x1e>
 8006a30:	08008108 	.word	0x08008108
 8006a34:	08008108 	.word	0x08008108
 8006a38:	08008108 	.word	0x08008108
 8006a3c:	0800810c 	.word	0x0800810c

08006a40 <memset>:
 8006a40:	4402      	add	r2, r0
 8006a42:	4603      	mov	r3, r0
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d100      	bne.n	8006a4a <memset+0xa>
 8006a48:	4770      	bx	lr
 8006a4a:	f803 1b01 	strb.w	r1, [r3], #1
 8006a4e:	e7f9      	b.n	8006a44 <memset+0x4>

08006a50 <iprintf>:
 8006a50:	b40f      	push	{r0, r1, r2, r3}
 8006a52:	4b0a      	ldr	r3, [pc, #40]	; (8006a7c <iprintf+0x2c>)
 8006a54:	b513      	push	{r0, r1, r4, lr}
 8006a56:	681c      	ldr	r4, [r3, #0]
 8006a58:	b124      	cbz	r4, 8006a64 <iprintf+0x14>
 8006a5a:	69a3      	ldr	r3, [r4, #24]
 8006a5c:	b913      	cbnz	r3, 8006a64 <iprintf+0x14>
 8006a5e:	4620      	mov	r0, r4
 8006a60:	f000 fa7e 	bl	8006f60 <__sinit>
 8006a64:	ab05      	add	r3, sp, #20
 8006a66:	9a04      	ldr	r2, [sp, #16]
 8006a68:	68a1      	ldr	r1, [r4, #8]
 8006a6a:	9301      	str	r3, [sp, #4]
 8006a6c:	4620      	mov	r0, r4
 8006a6e:	f000 fdab 	bl	80075c8 <_vfiprintf_r>
 8006a72:	b002      	add	sp, #8
 8006a74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a78:	b004      	add	sp, #16
 8006a7a:	4770      	bx	lr
 8006a7c:	200001c4 	.word	0x200001c4

08006a80 <_puts_r>:
 8006a80:	b570      	push	{r4, r5, r6, lr}
 8006a82:	460e      	mov	r6, r1
 8006a84:	4605      	mov	r5, r0
 8006a86:	b118      	cbz	r0, 8006a90 <_puts_r+0x10>
 8006a88:	6983      	ldr	r3, [r0, #24]
 8006a8a:	b90b      	cbnz	r3, 8006a90 <_puts_r+0x10>
 8006a8c:	f000 fa68 	bl	8006f60 <__sinit>
 8006a90:	69ab      	ldr	r3, [r5, #24]
 8006a92:	68ac      	ldr	r4, [r5, #8]
 8006a94:	b913      	cbnz	r3, 8006a9c <_puts_r+0x1c>
 8006a96:	4628      	mov	r0, r5
 8006a98:	f000 fa62 	bl	8006f60 <__sinit>
 8006a9c:	4b2c      	ldr	r3, [pc, #176]	; (8006b50 <_puts_r+0xd0>)
 8006a9e:	429c      	cmp	r4, r3
 8006aa0:	d120      	bne.n	8006ae4 <_puts_r+0x64>
 8006aa2:	686c      	ldr	r4, [r5, #4]
 8006aa4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006aa6:	07db      	lsls	r3, r3, #31
 8006aa8:	d405      	bmi.n	8006ab6 <_puts_r+0x36>
 8006aaa:	89a3      	ldrh	r3, [r4, #12]
 8006aac:	0598      	lsls	r0, r3, #22
 8006aae:	d402      	bmi.n	8006ab6 <_puts_r+0x36>
 8006ab0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ab2:	f000 faf3 	bl	800709c <__retarget_lock_acquire_recursive>
 8006ab6:	89a3      	ldrh	r3, [r4, #12]
 8006ab8:	0719      	lsls	r1, r3, #28
 8006aba:	d51d      	bpl.n	8006af8 <_puts_r+0x78>
 8006abc:	6923      	ldr	r3, [r4, #16]
 8006abe:	b1db      	cbz	r3, 8006af8 <_puts_r+0x78>
 8006ac0:	3e01      	subs	r6, #1
 8006ac2:	68a3      	ldr	r3, [r4, #8]
 8006ac4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006ac8:	3b01      	subs	r3, #1
 8006aca:	60a3      	str	r3, [r4, #8]
 8006acc:	bb39      	cbnz	r1, 8006b1e <_puts_r+0x9e>
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	da38      	bge.n	8006b44 <_puts_r+0xc4>
 8006ad2:	4622      	mov	r2, r4
 8006ad4:	210a      	movs	r1, #10
 8006ad6:	4628      	mov	r0, r5
 8006ad8:	f000 f868 	bl	8006bac <__swbuf_r>
 8006adc:	3001      	adds	r0, #1
 8006ade:	d011      	beq.n	8006b04 <_puts_r+0x84>
 8006ae0:	250a      	movs	r5, #10
 8006ae2:	e011      	b.n	8006b08 <_puts_r+0x88>
 8006ae4:	4b1b      	ldr	r3, [pc, #108]	; (8006b54 <_puts_r+0xd4>)
 8006ae6:	429c      	cmp	r4, r3
 8006ae8:	d101      	bne.n	8006aee <_puts_r+0x6e>
 8006aea:	68ac      	ldr	r4, [r5, #8]
 8006aec:	e7da      	b.n	8006aa4 <_puts_r+0x24>
 8006aee:	4b1a      	ldr	r3, [pc, #104]	; (8006b58 <_puts_r+0xd8>)
 8006af0:	429c      	cmp	r4, r3
 8006af2:	bf08      	it	eq
 8006af4:	68ec      	ldreq	r4, [r5, #12]
 8006af6:	e7d5      	b.n	8006aa4 <_puts_r+0x24>
 8006af8:	4621      	mov	r1, r4
 8006afa:	4628      	mov	r0, r5
 8006afc:	f000 f8a8 	bl	8006c50 <__swsetup_r>
 8006b00:	2800      	cmp	r0, #0
 8006b02:	d0dd      	beq.n	8006ac0 <_puts_r+0x40>
 8006b04:	f04f 35ff 	mov.w	r5, #4294967295
 8006b08:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006b0a:	07da      	lsls	r2, r3, #31
 8006b0c:	d405      	bmi.n	8006b1a <_puts_r+0x9a>
 8006b0e:	89a3      	ldrh	r3, [r4, #12]
 8006b10:	059b      	lsls	r3, r3, #22
 8006b12:	d402      	bmi.n	8006b1a <_puts_r+0x9a>
 8006b14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b16:	f000 fac2 	bl	800709e <__retarget_lock_release_recursive>
 8006b1a:	4628      	mov	r0, r5
 8006b1c:	bd70      	pop	{r4, r5, r6, pc}
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	da04      	bge.n	8006b2c <_puts_r+0xac>
 8006b22:	69a2      	ldr	r2, [r4, #24]
 8006b24:	429a      	cmp	r2, r3
 8006b26:	dc06      	bgt.n	8006b36 <_puts_r+0xb6>
 8006b28:	290a      	cmp	r1, #10
 8006b2a:	d004      	beq.n	8006b36 <_puts_r+0xb6>
 8006b2c:	6823      	ldr	r3, [r4, #0]
 8006b2e:	1c5a      	adds	r2, r3, #1
 8006b30:	6022      	str	r2, [r4, #0]
 8006b32:	7019      	strb	r1, [r3, #0]
 8006b34:	e7c5      	b.n	8006ac2 <_puts_r+0x42>
 8006b36:	4622      	mov	r2, r4
 8006b38:	4628      	mov	r0, r5
 8006b3a:	f000 f837 	bl	8006bac <__swbuf_r>
 8006b3e:	3001      	adds	r0, #1
 8006b40:	d1bf      	bne.n	8006ac2 <_puts_r+0x42>
 8006b42:	e7df      	b.n	8006b04 <_puts_r+0x84>
 8006b44:	6823      	ldr	r3, [r4, #0]
 8006b46:	250a      	movs	r5, #10
 8006b48:	1c5a      	adds	r2, r3, #1
 8006b4a:	6022      	str	r2, [r4, #0]
 8006b4c:	701d      	strb	r5, [r3, #0]
 8006b4e:	e7db      	b.n	8006b08 <_puts_r+0x88>
 8006b50:	08008094 	.word	0x08008094
 8006b54:	080080b4 	.word	0x080080b4
 8006b58:	08008074 	.word	0x08008074

08006b5c <puts>:
 8006b5c:	4b02      	ldr	r3, [pc, #8]	; (8006b68 <puts+0xc>)
 8006b5e:	4601      	mov	r1, r0
 8006b60:	6818      	ldr	r0, [r3, #0]
 8006b62:	f7ff bf8d 	b.w	8006a80 <_puts_r>
 8006b66:	bf00      	nop
 8006b68:	200001c4 	.word	0x200001c4

08006b6c <siprintf>:
 8006b6c:	b40e      	push	{r1, r2, r3}
 8006b6e:	b500      	push	{lr}
 8006b70:	b09c      	sub	sp, #112	; 0x70
 8006b72:	ab1d      	add	r3, sp, #116	; 0x74
 8006b74:	9002      	str	r0, [sp, #8]
 8006b76:	9006      	str	r0, [sp, #24]
 8006b78:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006b7c:	4809      	ldr	r0, [pc, #36]	; (8006ba4 <siprintf+0x38>)
 8006b7e:	9107      	str	r1, [sp, #28]
 8006b80:	9104      	str	r1, [sp, #16]
 8006b82:	4909      	ldr	r1, [pc, #36]	; (8006ba8 <siprintf+0x3c>)
 8006b84:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b88:	9105      	str	r1, [sp, #20]
 8006b8a:	6800      	ldr	r0, [r0, #0]
 8006b8c:	9301      	str	r3, [sp, #4]
 8006b8e:	a902      	add	r1, sp, #8
 8006b90:	f000 fbf0 	bl	8007374 <_svfiprintf_r>
 8006b94:	9b02      	ldr	r3, [sp, #8]
 8006b96:	2200      	movs	r2, #0
 8006b98:	701a      	strb	r2, [r3, #0]
 8006b9a:	b01c      	add	sp, #112	; 0x70
 8006b9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ba0:	b003      	add	sp, #12
 8006ba2:	4770      	bx	lr
 8006ba4:	200001c4 	.word	0x200001c4
 8006ba8:	ffff0208 	.word	0xffff0208

08006bac <__swbuf_r>:
 8006bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bae:	460e      	mov	r6, r1
 8006bb0:	4614      	mov	r4, r2
 8006bb2:	4605      	mov	r5, r0
 8006bb4:	b118      	cbz	r0, 8006bbe <__swbuf_r+0x12>
 8006bb6:	6983      	ldr	r3, [r0, #24]
 8006bb8:	b90b      	cbnz	r3, 8006bbe <__swbuf_r+0x12>
 8006bba:	f000 f9d1 	bl	8006f60 <__sinit>
 8006bbe:	4b21      	ldr	r3, [pc, #132]	; (8006c44 <__swbuf_r+0x98>)
 8006bc0:	429c      	cmp	r4, r3
 8006bc2:	d12b      	bne.n	8006c1c <__swbuf_r+0x70>
 8006bc4:	686c      	ldr	r4, [r5, #4]
 8006bc6:	69a3      	ldr	r3, [r4, #24]
 8006bc8:	60a3      	str	r3, [r4, #8]
 8006bca:	89a3      	ldrh	r3, [r4, #12]
 8006bcc:	071a      	lsls	r2, r3, #28
 8006bce:	d52f      	bpl.n	8006c30 <__swbuf_r+0x84>
 8006bd0:	6923      	ldr	r3, [r4, #16]
 8006bd2:	b36b      	cbz	r3, 8006c30 <__swbuf_r+0x84>
 8006bd4:	6923      	ldr	r3, [r4, #16]
 8006bd6:	6820      	ldr	r0, [r4, #0]
 8006bd8:	1ac0      	subs	r0, r0, r3
 8006bda:	6963      	ldr	r3, [r4, #20]
 8006bdc:	b2f6      	uxtb	r6, r6
 8006bde:	4283      	cmp	r3, r0
 8006be0:	4637      	mov	r7, r6
 8006be2:	dc04      	bgt.n	8006bee <__swbuf_r+0x42>
 8006be4:	4621      	mov	r1, r4
 8006be6:	4628      	mov	r0, r5
 8006be8:	f000 f926 	bl	8006e38 <_fflush_r>
 8006bec:	bb30      	cbnz	r0, 8006c3c <__swbuf_r+0x90>
 8006bee:	68a3      	ldr	r3, [r4, #8]
 8006bf0:	3b01      	subs	r3, #1
 8006bf2:	60a3      	str	r3, [r4, #8]
 8006bf4:	6823      	ldr	r3, [r4, #0]
 8006bf6:	1c5a      	adds	r2, r3, #1
 8006bf8:	6022      	str	r2, [r4, #0]
 8006bfa:	701e      	strb	r6, [r3, #0]
 8006bfc:	6963      	ldr	r3, [r4, #20]
 8006bfe:	3001      	adds	r0, #1
 8006c00:	4283      	cmp	r3, r0
 8006c02:	d004      	beq.n	8006c0e <__swbuf_r+0x62>
 8006c04:	89a3      	ldrh	r3, [r4, #12]
 8006c06:	07db      	lsls	r3, r3, #31
 8006c08:	d506      	bpl.n	8006c18 <__swbuf_r+0x6c>
 8006c0a:	2e0a      	cmp	r6, #10
 8006c0c:	d104      	bne.n	8006c18 <__swbuf_r+0x6c>
 8006c0e:	4621      	mov	r1, r4
 8006c10:	4628      	mov	r0, r5
 8006c12:	f000 f911 	bl	8006e38 <_fflush_r>
 8006c16:	b988      	cbnz	r0, 8006c3c <__swbuf_r+0x90>
 8006c18:	4638      	mov	r0, r7
 8006c1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c1c:	4b0a      	ldr	r3, [pc, #40]	; (8006c48 <__swbuf_r+0x9c>)
 8006c1e:	429c      	cmp	r4, r3
 8006c20:	d101      	bne.n	8006c26 <__swbuf_r+0x7a>
 8006c22:	68ac      	ldr	r4, [r5, #8]
 8006c24:	e7cf      	b.n	8006bc6 <__swbuf_r+0x1a>
 8006c26:	4b09      	ldr	r3, [pc, #36]	; (8006c4c <__swbuf_r+0xa0>)
 8006c28:	429c      	cmp	r4, r3
 8006c2a:	bf08      	it	eq
 8006c2c:	68ec      	ldreq	r4, [r5, #12]
 8006c2e:	e7ca      	b.n	8006bc6 <__swbuf_r+0x1a>
 8006c30:	4621      	mov	r1, r4
 8006c32:	4628      	mov	r0, r5
 8006c34:	f000 f80c 	bl	8006c50 <__swsetup_r>
 8006c38:	2800      	cmp	r0, #0
 8006c3a:	d0cb      	beq.n	8006bd4 <__swbuf_r+0x28>
 8006c3c:	f04f 37ff 	mov.w	r7, #4294967295
 8006c40:	e7ea      	b.n	8006c18 <__swbuf_r+0x6c>
 8006c42:	bf00      	nop
 8006c44:	08008094 	.word	0x08008094
 8006c48:	080080b4 	.word	0x080080b4
 8006c4c:	08008074 	.word	0x08008074

08006c50 <__swsetup_r>:
 8006c50:	4b32      	ldr	r3, [pc, #200]	; (8006d1c <__swsetup_r+0xcc>)
 8006c52:	b570      	push	{r4, r5, r6, lr}
 8006c54:	681d      	ldr	r5, [r3, #0]
 8006c56:	4606      	mov	r6, r0
 8006c58:	460c      	mov	r4, r1
 8006c5a:	b125      	cbz	r5, 8006c66 <__swsetup_r+0x16>
 8006c5c:	69ab      	ldr	r3, [r5, #24]
 8006c5e:	b913      	cbnz	r3, 8006c66 <__swsetup_r+0x16>
 8006c60:	4628      	mov	r0, r5
 8006c62:	f000 f97d 	bl	8006f60 <__sinit>
 8006c66:	4b2e      	ldr	r3, [pc, #184]	; (8006d20 <__swsetup_r+0xd0>)
 8006c68:	429c      	cmp	r4, r3
 8006c6a:	d10f      	bne.n	8006c8c <__swsetup_r+0x3c>
 8006c6c:	686c      	ldr	r4, [r5, #4]
 8006c6e:	89a3      	ldrh	r3, [r4, #12]
 8006c70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006c74:	0719      	lsls	r1, r3, #28
 8006c76:	d42c      	bmi.n	8006cd2 <__swsetup_r+0x82>
 8006c78:	06dd      	lsls	r5, r3, #27
 8006c7a:	d411      	bmi.n	8006ca0 <__swsetup_r+0x50>
 8006c7c:	2309      	movs	r3, #9
 8006c7e:	6033      	str	r3, [r6, #0]
 8006c80:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006c84:	81a3      	strh	r3, [r4, #12]
 8006c86:	f04f 30ff 	mov.w	r0, #4294967295
 8006c8a:	e03e      	b.n	8006d0a <__swsetup_r+0xba>
 8006c8c:	4b25      	ldr	r3, [pc, #148]	; (8006d24 <__swsetup_r+0xd4>)
 8006c8e:	429c      	cmp	r4, r3
 8006c90:	d101      	bne.n	8006c96 <__swsetup_r+0x46>
 8006c92:	68ac      	ldr	r4, [r5, #8]
 8006c94:	e7eb      	b.n	8006c6e <__swsetup_r+0x1e>
 8006c96:	4b24      	ldr	r3, [pc, #144]	; (8006d28 <__swsetup_r+0xd8>)
 8006c98:	429c      	cmp	r4, r3
 8006c9a:	bf08      	it	eq
 8006c9c:	68ec      	ldreq	r4, [r5, #12]
 8006c9e:	e7e6      	b.n	8006c6e <__swsetup_r+0x1e>
 8006ca0:	0758      	lsls	r0, r3, #29
 8006ca2:	d512      	bpl.n	8006cca <__swsetup_r+0x7a>
 8006ca4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006ca6:	b141      	cbz	r1, 8006cba <__swsetup_r+0x6a>
 8006ca8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006cac:	4299      	cmp	r1, r3
 8006cae:	d002      	beq.n	8006cb6 <__swsetup_r+0x66>
 8006cb0:	4630      	mov	r0, r6
 8006cb2:	f000 fa59 	bl	8007168 <_free_r>
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	6363      	str	r3, [r4, #52]	; 0x34
 8006cba:	89a3      	ldrh	r3, [r4, #12]
 8006cbc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006cc0:	81a3      	strh	r3, [r4, #12]
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	6063      	str	r3, [r4, #4]
 8006cc6:	6923      	ldr	r3, [r4, #16]
 8006cc8:	6023      	str	r3, [r4, #0]
 8006cca:	89a3      	ldrh	r3, [r4, #12]
 8006ccc:	f043 0308 	orr.w	r3, r3, #8
 8006cd0:	81a3      	strh	r3, [r4, #12]
 8006cd2:	6923      	ldr	r3, [r4, #16]
 8006cd4:	b94b      	cbnz	r3, 8006cea <__swsetup_r+0x9a>
 8006cd6:	89a3      	ldrh	r3, [r4, #12]
 8006cd8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006cdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ce0:	d003      	beq.n	8006cea <__swsetup_r+0x9a>
 8006ce2:	4621      	mov	r1, r4
 8006ce4:	4630      	mov	r0, r6
 8006ce6:	f000 f9ff 	bl	80070e8 <__smakebuf_r>
 8006cea:	89a0      	ldrh	r0, [r4, #12]
 8006cec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006cf0:	f010 0301 	ands.w	r3, r0, #1
 8006cf4:	d00a      	beq.n	8006d0c <__swsetup_r+0xbc>
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	60a3      	str	r3, [r4, #8]
 8006cfa:	6963      	ldr	r3, [r4, #20]
 8006cfc:	425b      	negs	r3, r3
 8006cfe:	61a3      	str	r3, [r4, #24]
 8006d00:	6923      	ldr	r3, [r4, #16]
 8006d02:	b943      	cbnz	r3, 8006d16 <__swsetup_r+0xc6>
 8006d04:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006d08:	d1ba      	bne.n	8006c80 <__swsetup_r+0x30>
 8006d0a:	bd70      	pop	{r4, r5, r6, pc}
 8006d0c:	0781      	lsls	r1, r0, #30
 8006d0e:	bf58      	it	pl
 8006d10:	6963      	ldrpl	r3, [r4, #20]
 8006d12:	60a3      	str	r3, [r4, #8]
 8006d14:	e7f4      	b.n	8006d00 <__swsetup_r+0xb0>
 8006d16:	2000      	movs	r0, #0
 8006d18:	e7f7      	b.n	8006d0a <__swsetup_r+0xba>
 8006d1a:	bf00      	nop
 8006d1c:	200001c4 	.word	0x200001c4
 8006d20:	08008094 	.word	0x08008094
 8006d24:	080080b4 	.word	0x080080b4
 8006d28:	08008074 	.word	0x08008074

08006d2c <__sflush_r>:
 8006d2c:	898a      	ldrh	r2, [r1, #12]
 8006d2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d32:	4605      	mov	r5, r0
 8006d34:	0710      	lsls	r0, r2, #28
 8006d36:	460c      	mov	r4, r1
 8006d38:	d458      	bmi.n	8006dec <__sflush_r+0xc0>
 8006d3a:	684b      	ldr	r3, [r1, #4]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	dc05      	bgt.n	8006d4c <__sflush_r+0x20>
 8006d40:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	dc02      	bgt.n	8006d4c <__sflush_r+0x20>
 8006d46:	2000      	movs	r0, #0
 8006d48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006d4e:	2e00      	cmp	r6, #0
 8006d50:	d0f9      	beq.n	8006d46 <__sflush_r+0x1a>
 8006d52:	2300      	movs	r3, #0
 8006d54:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006d58:	682f      	ldr	r7, [r5, #0]
 8006d5a:	602b      	str	r3, [r5, #0]
 8006d5c:	d032      	beq.n	8006dc4 <__sflush_r+0x98>
 8006d5e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006d60:	89a3      	ldrh	r3, [r4, #12]
 8006d62:	075a      	lsls	r2, r3, #29
 8006d64:	d505      	bpl.n	8006d72 <__sflush_r+0x46>
 8006d66:	6863      	ldr	r3, [r4, #4]
 8006d68:	1ac0      	subs	r0, r0, r3
 8006d6a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006d6c:	b10b      	cbz	r3, 8006d72 <__sflush_r+0x46>
 8006d6e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006d70:	1ac0      	subs	r0, r0, r3
 8006d72:	2300      	movs	r3, #0
 8006d74:	4602      	mov	r2, r0
 8006d76:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006d78:	6a21      	ldr	r1, [r4, #32]
 8006d7a:	4628      	mov	r0, r5
 8006d7c:	47b0      	blx	r6
 8006d7e:	1c43      	adds	r3, r0, #1
 8006d80:	89a3      	ldrh	r3, [r4, #12]
 8006d82:	d106      	bne.n	8006d92 <__sflush_r+0x66>
 8006d84:	6829      	ldr	r1, [r5, #0]
 8006d86:	291d      	cmp	r1, #29
 8006d88:	d82c      	bhi.n	8006de4 <__sflush_r+0xb8>
 8006d8a:	4a2a      	ldr	r2, [pc, #168]	; (8006e34 <__sflush_r+0x108>)
 8006d8c:	40ca      	lsrs	r2, r1
 8006d8e:	07d6      	lsls	r6, r2, #31
 8006d90:	d528      	bpl.n	8006de4 <__sflush_r+0xb8>
 8006d92:	2200      	movs	r2, #0
 8006d94:	6062      	str	r2, [r4, #4]
 8006d96:	04d9      	lsls	r1, r3, #19
 8006d98:	6922      	ldr	r2, [r4, #16]
 8006d9a:	6022      	str	r2, [r4, #0]
 8006d9c:	d504      	bpl.n	8006da8 <__sflush_r+0x7c>
 8006d9e:	1c42      	adds	r2, r0, #1
 8006da0:	d101      	bne.n	8006da6 <__sflush_r+0x7a>
 8006da2:	682b      	ldr	r3, [r5, #0]
 8006da4:	b903      	cbnz	r3, 8006da8 <__sflush_r+0x7c>
 8006da6:	6560      	str	r0, [r4, #84]	; 0x54
 8006da8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006daa:	602f      	str	r7, [r5, #0]
 8006dac:	2900      	cmp	r1, #0
 8006dae:	d0ca      	beq.n	8006d46 <__sflush_r+0x1a>
 8006db0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006db4:	4299      	cmp	r1, r3
 8006db6:	d002      	beq.n	8006dbe <__sflush_r+0x92>
 8006db8:	4628      	mov	r0, r5
 8006dba:	f000 f9d5 	bl	8007168 <_free_r>
 8006dbe:	2000      	movs	r0, #0
 8006dc0:	6360      	str	r0, [r4, #52]	; 0x34
 8006dc2:	e7c1      	b.n	8006d48 <__sflush_r+0x1c>
 8006dc4:	6a21      	ldr	r1, [r4, #32]
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	4628      	mov	r0, r5
 8006dca:	47b0      	blx	r6
 8006dcc:	1c41      	adds	r1, r0, #1
 8006dce:	d1c7      	bne.n	8006d60 <__sflush_r+0x34>
 8006dd0:	682b      	ldr	r3, [r5, #0]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d0c4      	beq.n	8006d60 <__sflush_r+0x34>
 8006dd6:	2b1d      	cmp	r3, #29
 8006dd8:	d001      	beq.n	8006dde <__sflush_r+0xb2>
 8006dda:	2b16      	cmp	r3, #22
 8006ddc:	d101      	bne.n	8006de2 <__sflush_r+0xb6>
 8006dde:	602f      	str	r7, [r5, #0]
 8006de0:	e7b1      	b.n	8006d46 <__sflush_r+0x1a>
 8006de2:	89a3      	ldrh	r3, [r4, #12]
 8006de4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006de8:	81a3      	strh	r3, [r4, #12]
 8006dea:	e7ad      	b.n	8006d48 <__sflush_r+0x1c>
 8006dec:	690f      	ldr	r7, [r1, #16]
 8006dee:	2f00      	cmp	r7, #0
 8006df0:	d0a9      	beq.n	8006d46 <__sflush_r+0x1a>
 8006df2:	0793      	lsls	r3, r2, #30
 8006df4:	680e      	ldr	r6, [r1, #0]
 8006df6:	bf08      	it	eq
 8006df8:	694b      	ldreq	r3, [r1, #20]
 8006dfa:	600f      	str	r7, [r1, #0]
 8006dfc:	bf18      	it	ne
 8006dfe:	2300      	movne	r3, #0
 8006e00:	eba6 0807 	sub.w	r8, r6, r7
 8006e04:	608b      	str	r3, [r1, #8]
 8006e06:	f1b8 0f00 	cmp.w	r8, #0
 8006e0a:	dd9c      	ble.n	8006d46 <__sflush_r+0x1a>
 8006e0c:	6a21      	ldr	r1, [r4, #32]
 8006e0e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006e10:	4643      	mov	r3, r8
 8006e12:	463a      	mov	r2, r7
 8006e14:	4628      	mov	r0, r5
 8006e16:	47b0      	blx	r6
 8006e18:	2800      	cmp	r0, #0
 8006e1a:	dc06      	bgt.n	8006e2a <__sflush_r+0xfe>
 8006e1c:	89a3      	ldrh	r3, [r4, #12]
 8006e1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e22:	81a3      	strh	r3, [r4, #12]
 8006e24:	f04f 30ff 	mov.w	r0, #4294967295
 8006e28:	e78e      	b.n	8006d48 <__sflush_r+0x1c>
 8006e2a:	4407      	add	r7, r0
 8006e2c:	eba8 0800 	sub.w	r8, r8, r0
 8006e30:	e7e9      	b.n	8006e06 <__sflush_r+0xda>
 8006e32:	bf00      	nop
 8006e34:	20400001 	.word	0x20400001

08006e38 <_fflush_r>:
 8006e38:	b538      	push	{r3, r4, r5, lr}
 8006e3a:	690b      	ldr	r3, [r1, #16]
 8006e3c:	4605      	mov	r5, r0
 8006e3e:	460c      	mov	r4, r1
 8006e40:	b913      	cbnz	r3, 8006e48 <_fflush_r+0x10>
 8006e42:	2500      	movs	r5, #0
 8006e44:	4628      	mov	r0, r5
 8006e46:	bd38      	pop	{r3, r4, r5, pc}
 8006e48:	b118      	cbz	r0, 8006e52 <_fflush_r+0x1a>
 8006e4a:	6983      	ldr	r3, [r0, #24]
 8006e4c:	b90b      	cbnz	r3, 8006e52 <_fflush_r+0x1a>
 8006e4e:	f000 f887 	bl	8006f60 <__sinit>
 8006e52:	4b14      	ldr	r3, [pc, #80]	; (8006ea4 <_fflush_r+0x6c>)
 8006e54:	429c      	cmp	r4, r3
 8006e56:	d11b      	bne.n	8006e90 <_fflush_r+0x58>
 8006e58:	686c      	ldr	r4, [r5, #4]
 8006e5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d0ef      	beq.n	8006e42 <_fflush_r+0xa>
 8006e62:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006e64:	07d0      	lsls	r0, r2, #31
 8006e66:	d404      	bmi.n	8006e72 <_fflush_r+0x3a>
 8006e68:	0599      	lsls	r1, r3, #22
 8006e6a:	d402      	bmi.n	8006e72 <_fflush_r+0x3a>
 8006e6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e6e:	f000 f915 	bl	800709c <__retarget_lock_acquire_recursive>
 8006e72:	4628      	mov	r0, r5
 8006e74:	4621      	mov	r1, r4
 8006e76:	f7ff ff59 	bl	8006d2c <__sflush_r>
 8006e7a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006e7c:	07da      	lsls	r2, r3, #31
 8006e7e:	4605      	mov	r5, r0
 8006e80:	d4e0      	bmi.n	8006e44 <_fflush_r+0xc>
 8006e82:	89a3      	ldrh	r3, [r4, #12]
 8006e84:	059b      	lsls	r3, r3, #22
 8006e86:	d4dd      	bmi.n	8006e44 <_fflush_r+0xc>
 8006e88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e8a:	f000 f908 	bl	800709e <__retarget_lock_release_recursive>
 8006e8e:	e7d9      	b.n	8006e44 <_fflush_r+0xc>
 8006e90:	4b05      	ldr	r3, [pc, #20]	; (8006ea8 <_fflush_r+0x70>)
 8006e92:	429c      	cmp	r4, r3
 8006e94:	d101      	bne.n	8006e9a <_fflush_r+0x62>
 8006e96:	68ac      	ldr	r4, [r5, #8]
 8006e98:	e7df      	b.n	8006e5a <_fflush_r+0x22>
 8006e9a:	4b04      	ldr	r3, [pc, #16]	; (8006eac <_fflush_r+0x74>)
 8006e9c:	429c      	cmp	r4, r3
 8006e9e:	bf08      	it	eq
 8006ea0:	68ec      	ldreq	r4, [r5, #12]
 8006ea2:	e7da      	b.n	8006e5a <_fflush_r+0x22>
 8006ea4:	08008094 	.word	0x08008094
 8006ea8:	080080b4 	.word	0x080080b4
 8006eac:	08008074 	.word	0x08008074

08006eb0 <std>:
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	b510      	push	{r4, lr}
 8006eb4:	4604      	mov	r4, r0
 8006eb6:	e9c0 3300 	strd	r3, r3, [r0]
 8006eba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006ebe:	6083      	str	r3, [r0, #8]
 8006ec0:	8181      	strh	r1, [r0, #12]
 8006ec2:	6643      	str	r3, [r0, #100]	; 0x64
 8006ec4:	81c2      	strh	r2, [r0, #14]
 8006ec6:	6183      	str	r3, [r0, #24]
 8006ec8:	4619      	mov	r1, r3
 8006eca:	2208      	movs	r2, #8
 8006ecc:	305c      	adds	r0, #92	; 0x5c
 8006ece:	f7ff fdb7 	bl	8006a40 <memset>
 8006ed2:	4b05      	ldr	r3, [pc, #20]	; (8006ee8 <std+0x38>)
 8006ed4:	6263      	str	r3, [r4, #36]	; 0x24
 8006ed6:	4b05      	ldr	r3, [pc, #20]	; (8006eec <std+0x3c>)
 8006ed8:	62a3      	str	r3, [r4, #40]	; 0x28
 8006eda:	4b05      	ldr	r3, [pc, #20]	; (8006ef0 <std+0x40>)
 8006edc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006ede:	4b05      	ldr	r3, [pc, #20]	; (8006ef4 <std+0x44>)
 8006ee0:	6224      	str	r4, [r4, #32]
 8006ee2:	6323      	str	r3, [r4, #48]	; 0x30
 8006ee4:	bd10      	pop	{r4, pc}
 8006ee6:	bf00      	nop
 8006ee8:	08007b71 	.word	0x08007b71
 8006eec:	08007b93 	.word	0x08007b93
 8006ef0:	08007bcb 	.word	0x08007bcb
 8006ef4:	08007bef 	.word	0x08007bef

08006ef8 <_cleanup_r>:
 8006ef8:	4901      	ldr	r1, [pc, #4]	; (8006f00 <_cleanup_r+0x8>)
 8006efa:	f000 b8af 	b.w	800705c <_fwalk_reent>
 8006efe:	bf00      	nop
 8006f00:	08006e39 	.word	0x08006e39

08006f04 <__sfmoreglue>:
 8006f04:	b570      	push	{r4, r5, r6, lr}
 8006f06:	1e4a      	subs	r2, r1, #1
 8006f08:	2568      	movs	r5, #104	; 0x68
 8006f0a:	4355      	muls	r5, r2
 8006f0c:	460e      	mov	r6, r1
 8006f0e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006f12:	f000 f979 	bl	8007208 <_malloc_r>
 8006f16:	4604      	mov	r4, r0
 8006f18:	b140      	cbz	r0, 8006f2c <__sfmoreglue+0x28>
 8006f1a:	2100      	movs	r1, #0
 8006f1c:	e9c0 1600 	strd	r1, r6, [r0]
 8006f20:	300c      	adds	r0, #12
 8006f22:	60a0      	str	r0, [r4, #8]
 8006f24:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006f28:	f7ff fd8a 	bl	8006a40 <memset>
 8006f2c:	4620      	mov	r0, r4
 8006f2e:	bd70      	pop	{r4, r5, r6, pc}

08006f30 <__sfp_lock_acquire>:
 8006f30:	4801      	ldr	r0, [pc, #4]	; (8006f38 <__sfp_lock_acquire+0x8>)
 8006f32:	f000 b8b3 	b.w	800709c <__retarget_lock_acquire_recursive>
 8006f36:	bf00      	nop
 8006f38:	200006ba 	.word	0x200006ba

08006f3c <__sfp_lock_release>:
 8006f3c:	4801      	ldr	r0, [pc, #4]	; (8006f44 <__sfp_lock_release+0x8>)
 8006f3e:	f000 b8ae 	b.w	800709e <__retarget_lock_release_recursive>
 8006f42:	bf00      	nop
 8006f44:	200006ba 	.word	0x200006ba

08006f48 <__sinit_lock_acquire>:
 8006f48:	4801      	ldr	r0, [pc, #4]	; (8006f50 <__sinit_lock_acquire+0x8>)
 8006f4a:	f000 b8a7 	b.w	800709c <__retarget_lock_acquire_recursive>
 8006f4e:	bf00      	nop
 8006f50:	200006b5 	.word	0x200006b5

08006f54 <__sinit_lock_release>:
 8006f54:	4801      	ldr	r0, [pc, #4]	; (8006f5c <__sinit_lock_release+0x8>)
 8006f56:	f000 b8a2 	b.w	800709e <__retarget_lock_release_recursive>
 8006f5a:	bf00      	nop
 8006f5c:	200006b5 	.word	0x200006b5

08006f60 <__sinit>:
 8006f60:	b510      	push	{r4, lr}
 8006f62:	4604      	mov	r4, r0
 8006f64:	f7ff fff0 	bl	8006f48 <__sinit_lock_acquire>
 8006f68:	69a3      	ldr	r3, [r4, #24]
 8006f6a:	b11b      	cbz	r3, 8006f74 <__sinit+0x14>
 8006f6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f70:	f7ff bff0 	b.w	8006f54 <__sinit_lock_release>
 8006f74:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006f78:	6523      	str	r3, [r4, #80]	; 0x50
 8006f7a:	4b13      	ldr	r3, [pc, #76]	; (8006fc8 <__sinit+0x68>)
 8006f7c:	4a13      	ldr	r2, [pc, #76]	; (8006fcc <__sinit+0x6c>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	62a2      	str	r2, [r4, #40]	; 0x28
 8006f82:	42a3      	cmp	r3, r4
 8006f84:	bf04      	itt	eq
 8006f86:	2301      	moveq	r3, #1
 8006f88:	61a3      	streq	r3, [r4, #24]
 8006f8a:	4620      	mov	r0, r4
 8006f8c:	f000 f820 	bl	8006fd0 <__sfp>
 8006f90:	6060      	str	r0, [r4, #4]
 8006f92:	4620      	mov	r0, r4
 8006f94:	f000 f81c 	bl	8006fd0 <__sfp>
 8006f98:	60a0      	str	r0, [r4, #8]
 8006f9a:	4620      	mov	r0, r4
 8006f9c:	f000 f818 	bl	8006fd0 <__sfp>
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	60e0      	str	r0, [r4, #12]
 8006fa4:	2104      	movs	r1, #4
 8006fa6:	6860      	ldr	r0, [r4, #4]
 8006fa8:	f7ff ff82 	bl	8006eb0 <std>
 8006fac:	68a0      	ldr	r0, [r4, #8]
 8006fae:	2201      	movs	r2, #1
 8006fb0:	2109      	movs	r1, #9
 8006fb2:	f7ff ff7d 	bl	8006eb0 <std>
 8006fb6:	68e0      	ldr	r0, [r4, #12]
 8006fb8:	2202      	movs	r2, #2
 8006fba:	2112      	movs	r1, #18
 8006fbc:	f7ff ff78 	bl	8006eb0 <std>
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	61a3      	str	r3, [r4, #24]
 8006fc4:	e7d2      	b.n	8006f6c <__sinit+0xc>
 8006fc6:	bf00      	nop
 8006fc8:	08008070 	.word	0x08008070
 8006fcc:	08006ef9 	.word	0x08006ef9

08006fd0 <__sfp>:
 8006fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fd2:	4607      	mov	r7, r0
 8006fd4:	f7ff ffac 	bl	8006f30 <__sfp_lock_acquire>
 8006fd8:	4b1e      	ldr	r3, [pc, #120]	; (8007054 <__sfp+0x84>)
 8006fda:	681e      	ldr	r6, [r3, #0]
 8006fdc:	69b3      	ldr	r3, [r6, #24]
 8006fde:	b913      	cbnz	r3, 8006fe6 <__sfp+0x16>
 8006fe0:	4630      	mov	r0, r6
 8006fe2:	f7ff ffbd 	bl	8006f60 <__sinit>
 8006fe6:	3648      	adds	r6, #72	; 0x48
 8006fe8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006fec:	3b01      	subs	r3, #1
 8006fee:	d503      	bpl.n	8006ff8 <__sfp+0x28>
 8006ff0:	6833      	ldr	r3, [r6, #0]
 8006ff2:	b30b      	cbz	r3, 8007038 <__sfp+0x68>
 8006ff4:	6836      	ldr	r6, [r6, #0]
 8006ff6:	e7f7      	b.n	8006fe8 <__sfp+0x18>
 8006ff8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006ffc:	b9d5      	cbnz	r5, 8007034 <__sfp+0x64>
 8006ffe:	4b16      	ldr	r3, [pc, #88]	; (8007058 <__sfp+0x88>)
 8007000:	60e3      	str	r3, [r4, #12]
 8007002:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007006:	6665      	str	r5, [r4, #100]	; 0x64
 8007008:	f000 f847 	bl	800709a <__retarget_lock_init_recursive>
 800700c:	f7ff ff96 	bl	8006f3c <__sfp_lock_release>
 8007010:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007014:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007018:	6025      	str	r5, [r4, #0]
 800701a:	61a5      	str	r5, [r4, #24]
 800701c:	2208      	movs	r2, #8
 800701e:	4629      	mov	r1, r5
 8007020:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007024:	f7ff fd0c 	bl	8006a40 <memset>
 8007028:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800702c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007030:	4620      	mov	r0, r4
 8007032:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007034:	3468      	adds	r4, #104	; 0x68
 8007036:	e7d9      	b.n	8006fec <__sfp+0x1c>
 8007038:	2104      	movs	r1, #4
 800703a:	4638      	mov	r0, r7
 800703c:	f7ff ff62 	bl	8006f04 <__sfmoreglue>
 8007040:	4604      	mov	r4, r0
 8007042:	6030      	str	r0, [r6, #0]
 8007044:	2800      	cmp	r0, #0
 8007046:	d1d5      	bne.n	8006ff4 <__sfp+0x24>
 8007048:	f7ff ff78 	bl	8006f3c <__sfp_lock_release>
 800704c:	230c      	movs	r3, #12
 800704e:	603b      	str	r3, [r7, #0]
 8007050:	e7ee      	b.n	8007030 <__sfp+0x60>
 8007052:	bf00      	nop
 8007054:	08008070 	.word	0x08008070
 8007058:	ffff0001 	.word	0xffff0001

0800705c <_fwalk_reent>:
 800705c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007060:	4606      	mov	r6, r0
 8007062:	4688      	mov	r8, r1
 8007064:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007068:	2700      	movs	r7, #0
 800706a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800706e:	f1b9 0901 	subs.w	r9, r9, #1
 8007072:	d505      	bpl.n	8007080 <_fwalk_reent+0x24>
 8007074:	6824      	ldr	r4, [r4, #0]
 8007076:	2c00      	cmp	r4, #0
 8007078:	d1f7      	bne.n	800706a <_fwalk_reent+0xe>
 800707a:	4638      	mov	r0, r7
 800707c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007080:	89ab      	ldrh	r3, [r5, #12]
 8007082:	2b01      	cmp	r3, #1
 8007084:	d907      	bls.n	8007096 <_fwalk_reent+0x3a>
 8007086:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800708a:	3301      	adds	r3, #1
 800708c:	d003      	beq.n	8007096 <_fwalk_reent+0x3a>
 800708e:	4629      	mov	r1, r5
 8007090:	4630      	mov	r0, r6
 8007092:	47c0      	blx	r8
 8007094:	4307      	orrs	r7, r0
 8007096:	3568      	adds	r5, #104	; 0x68
 8007098:	e7e9      	b.n	800706e <_fwalk_reent+0x12>

0800709a <__retarget_lock_init_recursive>:
 800709a:	4770      	bx	lr

0800709c <__retarget_lock_acquire_recursive>:
 800709c:	4770      	bx	lr

0800709e <__retarget_lock_release_recursive>:
 800709e:	4770      	bx	lr

080070a0 <__swhatbuf_r>:
 80070a0:	b570      	push	{r4, r5, r6, lr}
 80070a2:	460e      	mov	r6, r1
 80070a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070a8:	2900      	cmp	r1, #0
 80070aa:	b096      	sub	sp, #88	; 0x58
 80070ac:	4614      	mov	r4, r2
 80070ae:	461d      	mov	r5, r3
 80070b0:	da07      	bge.n	80070c2 <__swhatbuf_r+0x22>
 80070b2:	2300      	movs	r3, #0
 80070b4:	602b      	str	r3, [r5, #0]
 80070b6:	89b3      	ldrh	r3, [r6, #12]
 80070b8:	061a      	lsls	r2, r3, #24
 80070ba:	d410      	bmi.n	80070de <__swhatbuf_r+0x3e>
 80070bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80070c0:	e00e      	b.n	80070e0 <__swhatbuf_r+0x40>
 80070c2:	466a      	mov	r2, sp
 80070c4:	f000 fdba 	bl	8007c3c <_fstat_r>
 80070c8:	2800      	cmp	r0, #0
 80070ca:	dbf2      	blt.n	80070b2 <__swhatbuf_r+0x12>
 80070cc:	9a01      	ldr	r2, [sp, #4]
 80070ce:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80070d2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80070d6:	425a      	negs	r2, r3
 80070d8:	415a      	adcs	r2, r3
 80070da:	602a      	str	r2, [r5, #0]
 80070dc:	e7ee      	b.n	80070bc <__swhatbuf_r+0x1c>
 80070de:	2340      	movs	r3, #64	; 0x40
 80070e0:	2000      	movs	r0, #0
 80070e2:	6023      	str	r3, [r4, #0]
 80070e4:	b016      	add	sp, #88	; 0x58
 80070e6:	bd70      	pop	{r4, r5, r6, pc}

080070e8 <__smakebuf_r>:
 80070e8:	898b      	ldrh	r3, [r1, #12]
 80070ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80070ec:	079d      	lsls	r5, r3, #30
 80070ee:	4606      	mov	r6, r0
 80070f0:	460c      	mov	r4, r1
 80070f2:	d507      	bpl.n	8007104 <__smakebuf_r+0x1c>
 80070f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80070f8:	6023      	str	r3, [r4, #0]
 80070fa:	6123      	str	r3, [r4, #16]
 80070fc:	2301      	movs	r3, #1
 80070fe:	6163      	str	r3, [r4, #20]
 8007100:	b002      	add	sp, #8
 8007102:	bd70      	pop	{r4, r5, r6, pc}
 8007104:	ab01      	add	r3, sp, #4
 8007106:	466a      	mov	r2, sp
 8007108:	f7ff ffca 	bl	80070a0 <__swhatbuf_r>
 800710c:	9900      	ldr	r1, [sp, #0]
 800710e:	4605      	mov	r5, r0
 8007110:	4630      	mov	r0, r6
 8007112:	f000 f879 	bl	8007208 <_malloc_r>
 8007116:	b948      	cbnz	r0, 800712c <__smakebuf_r+0x44>
 8007118:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800711c:	059a      	lsls	r2, r3, #22
 800711e:	d4ef      	bmi.n	8007100 <__smakebuf_r+0x18>
 8007120:	f023 0303 	bic.w	r3, r3, #3
 8007124:	f043 0302 	orr.w	r3, r3, #2
 8007128:	81a3      	strh	r3, [r4, #12]
 800712a:	e7e3      	b.n	80070f4 <__smakebuf_r+0xc>
 800712c:	4b0d      	ldr	r3, [pc, #52]	; (8007164 <__smakebuf_r+0x7c>)
 800712e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007130:	89a3      	ldrh	r3, [r4, #12]
 8007132:	6020      	str	r0, [r4, #0]
 8007134:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007138:	81a3      	strh	r3, [r4, #12]
 800713a:	9b00      	ldr	r3, [sp, #0]
 800713c:	6163      	str	r3, [r4, #20]
 800713e:	9b01      	ldr	r3, [sp, #4]
 8007140:	6120      	str	r0, [r4, #16]
 8007142:	b15b      	cbz	r3, 800715c <__smakebuf_r+0x74>
 8007144:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007148:	4630      	mov	r0, r6
 800714a:	f000 fd89 	bl	8007c60 <_isatty_r>
 800714e:	b128      	cbz	r0, 800715c <__smakebuf_r+0x74>
 8007150:	89a3      	ldrh	r3, [r4, #12]
 8007152:	f023 0303 	bic.w	r3, r3, #3
 8007156:	f043 0301 	orr.w	r3, r3, #1
 800715a:	81a3      	strh	r3, [r4, #12]
 800715c:	89a0      	ldrh	r0, [r4, #12]
 800715e:	4305      	orrs	r5, r0
 8007160:	81a5      	strh	r5, [r4, #12]
 8007162:	e7cd      	b.n	8007100 <__smakebuf_r+0x18>
 8007164:	08006ef9 	.word	0x08006ef9

08007168 <_free_r>:
 8007168:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800716a:	2900      	cmp	r1, #0
 800716c:	d048      	beq.n	8007200 <_free_r+0x98>
 800716e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007172:	9001      	str	r0, [sp, #4]
 8007174:	2b00      	cmp	r3, #0
 8007176:	f1a1 0404 	sub.w	r4, r1, #4
 800717a:	bfb8      	it	lt
 800717c:	18e4      	addlt	r4, r4, r3
 800717e:	f000 fdb9 	bl	8007cf4 <__malloc_lock>
 8007182:	4a20      	ldr	r2, [pc, #128]	; (8007204 <_free_r+0x9c>)
 8007184:	9801      	ldr	r0, [sp, #4]
 8007186:	6813      	ldr	r3, [r2, #0]
 8007188:	4615      	mov	r5, r2
 800718a:	b933      	cbnz	r3, 800719a <_free_r+0x32>
 800718c:	6063      	str	r3, [r4, #4]
 800718e:	6014      	str	r4, [r2, #0]
 8007190:	b003      	add	sp, #12
 8007192:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007196:	f000 bdb3 	b.w	8007d00 <__malloc_unlock>
 800719a:	42a3      	cmp	r3, r4
 800719c:	d90b      	bls.n	80071b6 <_free_r+0x4e>
 800719e:	6821      	ldr	r1, [r4, #0]
 80071a0:	1862      	adds	r2, r4, r1
 80071a2:	4293      	cmp	r3, r2
 80071a4:	bf04      	itt	eq
 80071a6:	681a      	ldreq	r2, [r3, #0]
 80071a8:	685b      	ldreq	r3, [r3, #4]
 80071aa:	6063      	str	r3, [r4, #4]
 80071ac:	bf04      	itt	eq
 80071ae:	1852      	addeq	r2, r2, r1
 80071b0:	6022      	streq	r2, [r4, #0]
 80071b2:	602c      	str	r4, [r5, #0]
 80071b4:	e7ec      	b.n	8007190 <_free_r+0x28>
 80071b6:	461a      	mov	r2, r3
 80071b8:	685b      	ldr	r3, [r3, #4]
 80071ba:	b10b      	cbz	r3, 80071c0 <_free_r+0x58>
 80071bc:	42a3      	cmp	r3, r4
 80071be:	d9fa      	bls.n	80071b6 <_free_r+0x4e>
 80071c0:	6811      	ldr	r1, [r2, #0]
 80071c2:	1855      	adds	r5, r2, r1
 80071c4:	42a5      	cmp	r5, r4
 80071c6:	d10b      	bne.n	80071e0 <_free_r+0x78>
 80071c8:	6824      	ldr	r4, [r4, #0]
 80071ca:	4421      	add	r1, r4
 80071cc:	1854      	adds	r4, r2, r1
 80071ce:	42a3      	cmp	r3, r4
 80071d0:	6011      	str	r1, [r2, #0]
 80071d2:	d1dd      	bne.n	8007190 <_free_r+0x28>
 80071d4:	681c      	ldr	r4, [r3, #0]
 80071d6:	685b      	ldr	r3, [r3, #4]
 80071d8:	6053      	str	r3, [r2, #4]
 80071da:	4421      	add	r1, r4
 80071dc:	6011      	str	r1, [r2, #0]
 80071de:	e7d7      	b.n	8007190 <_free_r+0x28>
 80071e0:	d902      	bls.n	80071e8 <_free_r+0x80>
 80071e2:	230c      	movs	r3, #12
 80071e4:	6003      	str	r3, [r0, #0]
 80071e6:	e7d3      	b.n	8007190 <_free_r+0x28>
 80071e8:	6825      	ldr	r5, [r4, #0]
 80071ea:	1961      	adds	r1, r4, r5
 80071ec:	428b      	cmp	r3, r1
 80071ee:	bf04      	itt	eq
 80071f0:	6819      	ldreq	r1, [r3, #0]
 80071f2:	685b      	ldreq	r3, [r3, #4]
 80071f4:	6063      	str	r3, [r4, #4]
 80071f6:	bf04      	itt	eq
 80071f8:	1949      	addeq	r1, r1, r5
 80071fa:	6021      	streq	r1, [r4, #0]
 80071fc:	6054      	str	r4, [r2, #4]
 80071fe:	e7c7      	b.n	8007190 <_free_r+0x28>
 8007200:	b003      	add	sp, #12
 8007202:	bd30      	pop	{r4, r5, pc}
 8007204:	20000248 	.word	0x20000248

08007208 <_malloc_r>:
 8007208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800720a:	1ccd      	adds	r5, r1, #3
 800720c:	f025 0503 	bic.w	r5, r5, #3
 8007210:	3508      	adds	r5, #8
 8007212:	2d0c      	cmp	r5, #12
 8007214:	bf38      	it	cc
 8007216:	250c      	movcc	r5, #12
 8007218:	2d00      	cmp	r5, #0
 800721a:	4606      	mov	r6, r0
 800721c:	db01      	blt.n	8007222 <_malloc_r+0x1a>
 800721e:	42a9      	cmp	r1, r5
 8007220:	d903      	bls.n	800722a <_malloc_r+0x22>
 8007222:	230c      	movs	r3, #12
 8007224:	6033      	str	r3, [r6, #0]
 8007226:	2000      	movs	r0, #0
 8007228:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800722a:	f000 fd63 	bl	8007cf4 <__malloc_lock>
 800722e:	4921      	ldr	r1, [pc, #132]	; (80072b4 <_malloc_r+0xac>)
 8007230:	680a      	ldr	r2, [r1, #0]
 8007232:	4614      	mov	r4, r2
 8007234:	b99c      	cbnz	r4, 800725e <_malloc_r+0x56>
 8007236:	4f20      	ldr	r7, [pc, #128]	; (80072b8 <_malloc_r+0xb0>)
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	b923      	cbnz	r3, 8007246 <_malloc_r+0x3e>
 800723c:	4621      	mov	r1, r4
 800723e:	4630      	mov	r0, r6
 8007240:	f000 fc86 	bl	8007b50 <_sbrk_r>
 8007244:	6038      	str	r0, [r7, #0]
 8007246:	4629      	mov	r1, r5
 8007248:	4630      	mov	r0, r6
 800724a:	f000 fc81 	bl	8007b50 <_sbrk_r>
 800724e:	1c43      	adds	r3, r0, #1
 8007250:	d123      	bne.n	800729a <_malloc_r+0x92>
 8007252:	230c      	movs	r3, #12
 8007254:	6033      	str	r3, [r6, #0]
 8007256:	4630      	mov	r0, r6
 8007258:	f000 fd52 	bl	8007d00 <__malloc_unlock>
 800725c:	e7e3      	b.n	8007226 <_malloc_r+0x1e>
 800725e:	6823      	ldr	r3, [r4, #0]
 8007260:	1b5b      	subs	r3, r3, r5
 8007262:	d417      	bmi.n	8007294 <_malloc_r+0x8c>
 8007264:	2b0b      	cmp	r3, #11
 8007266:	d903      	bls.n	8007270 <_malloc_r+0x68>
 8007268:	6023      	str	r3, [r4, #0]
 800726a:	441c      	add	r4, r3
 800726c:	6025      	str	r5, [r4, #0]
 800726e:	e004      	b.n	800727a <_malloc_r+0x72>
 8007270:	6863      	ldr	r3, [r4, #4]
 8007272:	42a2      	cmp	r2, r4
 8007274:	bf0c      	ite	eq
 8007276:	600b      	streq	r3, [r1, #0]
 8007278:	6053      	strne	r3, [r2, #4]
 800727a:	4630      	mov	r0, r6
 800727c:	f000 fd40 	bl	8007d00 <__malloc_unlock>
 8007280:	f104 000b 	add.w	r0, r4, #11
 8007284:	1d23      	adds	r3, r4, #4
 8007286:	f020 0007 	bic.w	r0, r0, #7
 800728a:	1ac2      	subs	r2, r0, r3
 800728c:	d0cc      	beq.n	8007228 <_malloc_r+0x20>
 800728e:	1a1b      	subs	r3, r3, r0
 8007290:	50a3      	str	r3, [r4, r2]
 8007292:	e7c9      	b.n	8007228 <_malloc_r+0x20>
 8007294:	4622      	mov	r2, r4
 8007296:	6864      	ldr	r4, [r4, #4]
 8007298:	e7cc      	b.n	8007234 <_malloc_r+0x2c>
 800729a:	1cc4      	adds	r4, r0, #3
 800729c:	f024 0403 	bic.w	r4, r4, #3
 80072a0:	42a0      	cmp	r0, r4
 80072a2:	d0e3      	beq.n	800726c <_malloc_r+0x64>
 80072a4:	1a21      	subs	r1, r4, r0
 80072a6:	4630      	mov	r0, r6
 80072a8:	f000 fc52 	bl	8007b50 <_sbrk_r>
 80072ac:	3001      	adds	r0, #1
 80072ae:	d1dd      	bne.n	800726c <_malloc_r+0x64>
 80072b0:	e7cf      	b.n	8007252 <_malloc_r+0x4a>
 80072b2:	bf00      	nop
 80072b4:	20000248 	.word	0x20000248
 80072b8:	2000024c 	.word	0x2000024c

080072bc <__ssputs_r>:
 80072bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072c0:	688e      	ldr	r6, [r1, #8]
 80072c2:	429e      	cmp	r6, r3
 80072c4:	4682      	mov	sl, r0
 80072c6:	460c      	mov	r4, r1
 80072c8:	4690      	mov	r8, r2
 80072ca:	461f      	mov	r7, r3
 80072cc:	d838      	bhi.n	8007340 <__ssputs_r+0x84>
 80072ce:	898a      	ldrh	r2, [r1, #12]
 80072d0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80072d4:	d032      	beq.n	800733c <__ssputs_r+0x80>
 80072d6:	6825      	ldr	r5, [r4, #0]
 80072d8:	6909      	ldr	r1, [r1, #16]
 80072da:	eba5 0901 	sub.w	r9, r5, r1
 80072de:	6965      	ldr	r5, [r4, #20]
 80072e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80072e4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80072e8:	3301      	adds	r3, #1
 80072ea:	444b      	add	r3, r9
 80072ec:	106d      	asrs	r5, r5, #1
 80072ee:	429d      	cmp	r5, r3
 80072f0:	bf38      	it	cc
 80072f2:	461d      	movcc	r5, r3
 80072f4:	0553      	lsls	r3, r2, #21
 80072f6:	d531      	bpl.n	800735c <__ssputs_r+0xa0>
 80072f8:	4629      	mov	r1, r5
 80072fa:	f7ff ff85 	bl	8007208 <_malloc_r>
 80072fe:	4606      	mov	r6, r0
 8007300:	b950      	cbnz	r0, 8007318 <__ssputs_r+0x5c>
 8007302:	230c      	movs	r3, #12
 8007304:	f8ca 3000 	str.w	r3, [sl]
 8007308:	89a3      	ldrh	r3, [r4, #12]
 800730a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800730e:	81a3      	strh	r3, [r4, #12]
 8007310:	f04f 30ff 	mov.w	r0, #4294967295
 8007314:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007318:	6921      	ldr	r1, [r4, #16]
 800731a:	464a      	mov	r2, r9
 800731c:	f000 fcc2 	bl	8007ca4 <memcpy>
 8007320:	89a3      	ldrh	r3, [r4, #12]
 8007322:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007326:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800732a:	81a3      	strh	r3, [r4, #12]
 800732c:	6126      	str	r6, [r4, #16]
 800732e:	6165      	str	r5, [r4, #20]
 8007330:	444e      	add	r6, r9
 8007332:	eba5 0509 	sub.w	r5, r5, r9
 8007336:	6026      	str	r6, [r4, #0]
 8007338:	60a5      	str	r5, [r4, #8]
 800733a:	463e      	mov	r6, r7
 800733c:	42be      	cmp	r6, r7
 800733e:	d900      	bls.n	8007342 <__ssputs_r+0x86>
 8007340:	463e      	mov	r6, r7
 8007342:	4632      	mov	r2, r6
 8007344:	6820      	ldr	r0, [r4, #0]
 8007346:	4641      	mov	r1, r8
 8007348:	f000 fcba 	bl	8007cc0 <memmove>
 800734c:	68a3      	ldr	r3, [r4, #8]
 800734e:	6822      	ldr	r2, [r4, #0]
 8007350:	1b9b      	subs	r3, r3, r6
 8007352:	4432      	add	r2, r6
 8007354:	60a3      	str	r3, [r4, #8]
 8007356:	6022      	str	r2, [r4, #0]
 8007358:	2000      	movs	r0, #0
 800735a:	e7db      	b.n	8007314 <__ssputs_r+0x58>
 800735c:	462a      	mov	r2, r5
 800735e:	f000 fcd5 	bl	8007d0c <_realloc_r>
 8007362:	4606      	mov	r6, r0
 8007364:	2800      	cmp	r0, #0
 8007366:	d1e1      	bne.n	800732c <__ssputs_r+0x70>
 8007368:	6921      	ldr	r1, [r4, #16]
 800736a:	4650      	mov	r0, sl
 800736c:	f7ff fefc 	bl	8007168 <_free_r>
 8007370:	e7c7      	b.n	8007302 <__ssputs_r+0x46>
	...

08007374 <_svfiprintf_r>:
 8007374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007378:	4698      	mov	r8, r3
 800737a:	898b      	ldrh	r3, [r1, #12]
 800737c:	061b      	lsls	r3, r3, #24
 800737e:	b09d      	sub	sp, #116	; 0x74
 8007380:	4607      	mov	r7, r0
 8007382:	460d      	mov	r5, r1
 8007384:	4614      	mov	r4, r2
 8007386:	d50e      	bpl.n	80073a6 <_svfiprintf_r+0x32>
 8007388:	690b      	ldr	r3, [r1, #16]
 800738a:	b963      	cbnz	r3, 80073a6 <_svfiprintf_r+0x32>
 800738c:	2140      	movs	r1, #64	; 0x40
 800738e:	f7ff ff3b 	bl	8007208 <_malloc_r>
 8007392:	6028      	str	r0, [r5, #0]
 8007394:	6128      	str	r0, [r5, #16]
 8007396:	b920      	cbnz	r0, 80073a2 <_svfiprintf_r+0x2e>
 8007398:	230c      	movs	r3, #12
 800739a:	603b      	str	r3, [r7, #0]
 800739c:	f04f 30ff 	mov.w	r0, #4294967295
 80073a0:	e0d1      	b.n	8007546 <_svfiprintf_r+0x1d2>
 80073a2:	2340      	movs	r3, #64	; 0x40
 80073a4:	616b      	str	r3, [r5, #20]
 80073a6:	2300      	movs	r3, #0
 80073a8:	9309      	str	r3, [sp, #36]	; 0x24
 80073aa:	2320      	movs	r3, #32
 80073ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80073b0:	f8cd 800c 	str.w	r8, [sp, #12]
 80073b4:	2330      	movs	r3, #48	; 0x30
 80073b6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007560 <_svfiprintf_r+0x1ec>
 80073ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80073be:	f04f 0901 	mov.w	r9, #1
 80073c2:	4623      	mov	r3, r4
 80073c4:	469a      	mov	sl, r3
 80073c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80073ca:	b10a      	cbz	r2, 80073d0 <_svfiprintf_r+0x5c>
 80073cc:	2a25      	cmp	r2, #37	; 0x25
 80073ce:	d1f9      	bne.n	80073c4 <_svfiprintf_r+0x50>
 80073d0:	ebba 0b04 	subs.w	fp, sl, r4
 80073d4:	d00b      	beq.n	80073ee <_svfiprintf_r+0x7a>
 80073d6:	465b      	mov	r3, fp
 80073d8:	4622      	mov	r2, r4
 80073da:	4629      	mov	r1, r5
 80073dc:	4638      	mov	r0, r7
 80073de:	f7ff ff6d 	bl	80072bc <__ssputs_r>
 80073e2:	3001      	adds	r0, #1
 80073e4:	f000 80aa 	beq.w	800753c <_svfiprintf_r+0x1c8>
 80073e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80073ea:	445a      	add	r2, fp
 80073ec:	9209      	str	r2, [sp, #36]	; 0x24
 80073ee:	f89a 3000 	ldrb.w	r3, [sl]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	f000 80a2 	beq.w	800753c <_svfiprintf_r+0x1c8>
 80073f8:	2300      	movs	r3, #0
 80073fa:	f04f 32ff 	mov.w	r2, #4294967295
 80073fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007402:	f10a 0a01 	add.w	sl, sl, #1
 8007406:	9304      	str	r3, [sp, #16]
 8007408:	9307      	str	r3, [sp, #28]
 800740a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800740e:	931a      	str	r3, [sp, #104]	; 0x68
 8007410:	4654      	mov	r4, sl
 8007412:	2205      	movs	r2, #5
 8007414:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007418:	4851      	ldr	r0, [pc, #324]	; (8007560 <_svfiprintf_r+0x1ec>)
 800741a:	f7f8 fee9 	bl	80001f0 <memchr>
 800741e:	9a04      	ldr	r2, [sp, #16]
 8007420:	b9d8      	cbnz	r0, 800745a <_svfiprintf_r+0xe6>
 8007422:	06d0      	lsls	r0, r2, #27
 8007424:	bf44      	itt	mi
 8007426:	2320      	movmi	r3, #32
 8007428:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800742c:	0711      	lsls	r1, r2, #28
 800742e:	bf44      	itt	mi
 8007430:	232b      	movmi	r3, #43	; 0x2b
 8007432:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007436:	f89a 3000 	ldrb.w	r3, [sl]
 800743a:	2b2a      	cmp	r3, #42	; 0x2a
 800743c:	d015      	beq.n	800746a <_svfiprintf_r+0xf6>
 800743e:	9a07      	ldr	r2, [sp, #28]
 8007440:	4654      	mov	r4, sl
 8007442:	2000      	movs	r0, #0
 8007444:	f04f 0c0a 	mov.w	ip, #10
 8007448:	4621      	mov	r1, r4
 800744a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800744e:	3b30      	subs	r3, #48	; 0x30
 8007450:	2b09      	cmp	r3, #9
 8007452:	d94e      	bls.n	80074f2 <_svfiprintf_r+0x17e>
 8007454:	b1b0      	cbz	r0, 8007484 <_svfiprintf_r+0x110>
 8007456:	9207      	str	r2, [sp, #28]
 8007458:	e014      	b.n	8007484 <_svfiprintf_r+0x110>
 800745a:	eba0 0308 	sub.w	r3, r0, r8
 800745e:	fa09 f303 	lsl.w	r3, r9, r3
 8007462:	4313      	orrs	r3, r2
 8007464:	9304      	str	r3, [sp, #16]
 8007466:	46a2      	mov	sl, r4
 8007468:	e7d2      	b.n	8007410 <_svfiprintf_r+0x9c>
 800746a:	9b03      	ldr	r3, [sp, #12]
 800746c:	1d19      	adds	r1, r3, #4
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	9103      	str	r1, [sp, #12]
 8007472:	2b00      	cmp	r3, #0
 8007474:	bfbb      	ittet	lt
 8007476:	425b      	neglt	r3, r3
 8007478:	f042 0202 	orrlt.w	r2, r2, #2
 800747c:	9307      	strge	r3, [sp, #28]
 800747e:	9307      	strlt	r3, [sp, #28]
 8007480:	bfb8      	it	lt
 8007482:	9204      	strlt	r2, [sp, #16]
 8007484:	7823      	ldrb	r3, [r4, #0]
 8007486:	2b2e      	cmp	r3, #46	; 0x2e
 8007488:	d10c      	bne.n	80074a4 <_svfiprintf_r+0x130>
 800748a:	7863      	ldrb	r3, [r4, #1]
 800748c:	2b2a      	cmp	r3, #42	; 0x2a
 800748e:	d135      	bne.n	80074fc <_svfiprintf_r+0x188>
 8007490:	9b03      	ldr	r3, [sp, #12]
 8007492:	1d1a      	adds	r2, r3, #4
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	9203      	str	r2, [sp, #12]
 8007498:	2b00      	cmp	r3, #0
 800749a:	bfb8      	it	lt
 800749c:	f04f 33ff 	movlt.w	r3, #4294967295
 80074a0:	3402      	adds	r4, #2
 80074a2:	9305      	str	r3, [sp, #20]
 80074a4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007570 <_svfiprintf_r+0x1fc>
 80074a8:	7821      	ldrb	r1, [r4, #0]
 80074aa:	2203      	movs	r2, #3
 80074ac:	4650      	mov	r0, sl
 80074ae:	f7f8 fe9f 	bl	80001f0 <memchr>
 80074b2:	b140      	cbz	r0, 80074c6 <_svfiprintf_r+0x152>
 80074b4:	2340      	movs	r3, #64	; 0x40
 80074b6:	eba0 000a 	sub.w	r0, r0, sl
 80074ba:	fa03 f000 	lsl.w	r0, r3, r0
 80074be:	9b04      	ldr	r3, [sp, #16]
 80074c0:	4303      	orrs	r3, r0
 80074c2:	3401      	adds	r4, #1
 80074c4:	9304      	str	r3, [sp, #16]
 80074c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074ca:	4826      	ldr	r0, [pc, #152]	; (8007564 <_svfiprintf_r+0x1f0>)
 80074cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80074d0:	2206      	movs	r2, #6
 80074d2:	f7f8 fe8d 	bl	80001f0 <memchr>
 80074d6:	2800      	cmp	r0, #0
 80074d8:	d038      	beq.n	800754c <_svfiprintf_r+0x1d8>
 80074da:	4b23      	ldr	r3, [pc, #140]	; (8007568 <_svfiprintf_r+0x1f4>)
 80074dc:	bb1b      	cbnz	r3, 8007526 <_svfiprintf_r+0x1b2>
 80074de:	9b03      	ldr	r3, [sp, #12]
 80074e0:	3307      	adds	r3, #7
 80074e2:	f023 0307 	bic.w	r3, r3, #7
 80074e6:	3308      	adds	r3, #8
 80074e8:	9303      	str	r3, [sp, #12]
 80074ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074ec:	4433      	add	r3, r6
 80074ee:	9309      	str	r3, [sp, #36]	; 0x24
 80074f0:	e767      	b.n	80073c2 <_svfiprintf_r+0x4e>
 80074f2:	fb0c 3202 	mla	r2, ip, r2, r3
 80074f6:	460c      	mov	r4, r1
 80074f8:	2001      	movs	r0, #1
 80074fa:	e7a5      	b.n	8007448 <_svfiprintf_r+0xd4>
 80074fc:	2300      	movs	r3, #0
 80074fe:	3401      	adds	r4, #1
 8007500:	9305      	str	r3, [sp, #20]
 8007502:	4619      	mov	r1, r3
 8007504:	f04f 0c0a 	mov.w	ip, #10
 8007508:	4620      	mov	r0, r4
 800750a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800750e:	3a30      	subs	r2, #48	; 0x30
 8007510:	2a09      	cmp	r2, #9
 8007512:	d903      	bls.n	800751c <_svfiprintf_r+0x1a8>
 8007514:	2b00      	cmp	r3, #0
 8007516:	d0c5      	beq.n	80074a4 <_svfiprintf_r+0x130>
 8007518:	9105      	str	r1, [sp, #20]
 800751a:	e7c3      	b.n	80074a4 <_svfiprintf_r+0x130>
 800751c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007520:	4604      	mov	r4, r0
 8007522:	2301      	movs	r3, #1
 8007524:	e7f0      	b.n	8007508 <_svfiprintf_r+0x194>
 8007526:	ab03      	add	r3, sp, #12
 8007528:	9300      	str	r3, [sp, #0]
 800752a:	462a      	mov	r2, r5
 800752c:	4b0f      	ldr	r3, [pc, #60]	; (800756c <_svfiprintf_r+0x1f8>)
 800752e:	a904      	add	r1, sp, #16
 8007530:	4638      	mov	r0, r7
 8007532:	f3af 8000 	nop.w
 8007536:	1c42      	adds	r2, r0, #1
 8007538:	4606      	mov	r6, r0
 800753a:	d1d6      	bne.n	80074ea <_svfiprintf_r+0x176>
 800753c:	89ab      	ldrh	r3, [r5, #12]
 800753e:	065b      	lsls	r3, r3, #25
 8007540:	f53f af2c 	bmi.w	800739c <_svfiprintf_r+0x28>
 8007544:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007546:	b01d      	add	sp, #116	; 0x74
 8007548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800754c:	ab03      	add	r3, sp, #12
 800754e:	9300      	str	r3, [sp, #0]
 8007550:	462a      	mov	r2, r5
 8007552:	4b06      	ldr	r3, [pc, #24]	; (800756c <_svfiprintf_r+0x1f8>)
 8007554:	a904      	add	r1, sp, #16
 8007556:	4638      	mov	r0, r7
 8007558:	f000 f9d4 	bl	8007904 <_printf_i>
 800755c:	e7eb      	b.n	8007536 <_svfiprintf_r+0x1c2>
 800755e:	bf00      	nop
 8007560:	080080d4 	.word	0x080080d4
 8007564:	080080de 	.word	0x080080de
 8007568:	00000000 	.word	0x00000000
 800756c:	080072bd 	.word	0x080072bd
 8007570:	080080da 	.word	0x080080da

08007574 <__sfputc_r>:
 8007574:	6893      	ldr	r3, [r2, #8]
 8007576:	3b01      	subs	r3, #1
 8007578:	2b00      	cmp	r3, #0
 800757a:	b410      	push	{r4}
 800757c:	6093      	str	r3, [r2, #8]
 800757e:	da08      	bge.n	8007592 <__sfputc_r+0x1e>
 8007580:	6994      	ldr	r4, [r2, #24]
 8007582:	42a3      	cmp	r3, r4
 8007584:	db01      	blt.n	800758a <__sfputc_r+0x16>
 8007586:	290a      	cmp	r1, #10
 8007588:	d103      	bne.n	8007592 <__sfputc_r+0x1e>
 800758a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800758e:	f7ff bb0d 	b.w	8006bac <__swbuf_r>
 8007592:	6813      	ldr	r3, [r2, #0]
 8007594:	1c58      	adds	r0, r3, #1
 8007596:	6010      	str	r0, [r2, #0]
 8007598:	7019      	strb	r1, [r3, #0]
 800759a:	4608      	mov	r0, r1
 800759c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80075a0:	4770      	bx	lr

080075a2 <__sfputs_r>:
 80075a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075a4:	4606      	mov	r6, r0
 80075a6:	460f      	mov	r7, r1
 80075a8:	4614      	mov	r4, r2
 80075aa:	18d5      	adds	r5, r2, r3
 80075ac:	42ac      	cmp	r4, r5
 80075ae:	d101      	bne.n	80075b4 <__sfputs_r+0x12>
 80075b0:	2000      	movs	r0, #0
 80075b2:	e007      	b.n	80075c4 <__sfputs_r+0x22>
 80075b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075b8:	463a      	mov	r2, r7
 80075ba:	4630      	mov	r0, r6
 80075bc:	f7ff ffda 	bl	8007574 <__sfputc_r>
 80075c0:	1c43      	adds	r3, r0, #1
 80075c2:	d1f3      	bne.n	80075ac <__sfputs_r+0xa>
 80075c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080075c8 <_vfiprintf_r>:
 80075c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075cc:	460d      	mov	r5, r1
 80075ce:	b09d      	sub	sp, #116	; 0x74
 80075d0:	4614      	mov	r4, r2
 80075d2:	4698      	mov	r8, r3
 80075d4:	4606      	mov	r6, r0
 80075d6:	b118      	cbz	r0, 80075e0 <_vfiprintf_r+0x18>
 80075d8:	6983      	ldr	r3, [r0, #24]
 80075da:	b90b      	cbnz	r3, 80075e0 <_vfiprintf_r+0x18>
 80075dc:	f7ff fcc0 	bl	8006f60 <__sinit>
 80075e0:	4b89      	ldr	r3, [pc, #548]	; (8007808 <_vfiprintf_r+0x240>)
 80075e2:	429d      	cmp	r5, r3
 80075e4:	d11b      	bne.n	800761e <_vfiprintf_r+0x56>
 80075e6:	6875      	ldr	r5, [r6, #4]
 80075e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80075ea:	07d9      	lsls	r1, r3, #31
 80075ec:	d405      	bmi.n	80075fa <_vfiprintf_r+0x32>
 80075ee:	89ab      	ldrh	r3, [r5, #12]
 80075f0:	059a      	lsls	r2, r3, #22
 80075f2:	d402      	bmi.n	80075fa <_vfiprintf_r+0x32>
 80075f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80075f6:	f7ff fd51 	bl	800709c <__retarget_lock_acquire_recursive>
 80075fa:	89ab      	ldrh	r3, [r5, #12]
 80075fc:	071b      	lsls	r3, r3, #28
 80075fe:	d501      	bpl.n	8007604 <_vfiprintf_r+0x3c>
 8007600:	692b      	ldr	r3, [r5, #16]
 8007602:	b9eb      	cbnz	r3, 8007640 <_vfiprintf_r+0x78>
 8007604:	4629      	mov	r1, r5
 8007606:	4630      	mov	r0, r6
 8007608:	f7ff fb22 	bl	8006c50 <__swsetup_r>
 800760c:	b1c0      	cbz	r0, 8007640 <_vfiprintf_r+0x78>
 800760e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007610:	07dc      	lsls	r4, r3, #31
 8007612:	d50e      	bpl.n	8007632 <_vfiprintf_r+0x6a>
 8007614:	f04f 30ff 	mov.w	r0, #4294967295
 8007618:	b01d      	add	sp, #116	; 0x74
 800761a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800761e:	4b7b      	ldr	r3, [pc, #492]	; (800780c <_vfiprintf_r+0x244>)
 8007620:	429d      	cmp	r5, r3
 8007622:	d101      	bne.n	8007628 <_vfiprintf_r+0x60>
 8007624:	68b5      	ldr	r5, [r6, #8]
 8007626:	e7df      	b.n	80075e8 <_vfiprintf_r+0x20>
 8007628:	4b79      	ldr	r3, [pc, #484]	; (8007810 <_vfiprintf_r+0x248>)
 800762a:	429d      	cmp	r5, r3
 800762c:	bf08      	it	eq
 800762e:	68f5      	ldreq	r5, [r6, #12]
 8007630:	e7da      	b.n	80075e8 <_vfiprintf_r+0x20>
 8007632:	89ab      	ldrh	r3, [r5, #12]
 8007634:	0598      	lsls	r0, r3, #22
 8007636:	d4ed      	bmi.n	8007614 <_vfiprintf_r+0x4c>
 8007638:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800763a:	f7ff fd30 	bl	800709e <__retarget_lock_release_recursive>
 800763e:	e7e9      	b.n	8007614 <_vfiprintf_r+0x4c>
 8007640:	2300      	movs	r3, #0
 8007642:	9309      	str	r3, [sp, #36]	; 0x24
 8007644:	2320      	movs	r3, #32
 8007646:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800764a:	f8cd 800c 	str.w	r8, [sp, #12]
 800764e:	2330      	movs	r3, #48	; 0x30
 8007650:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007814 <_vfiprintf_r+0x24c>
 8007654:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007658:	f04f 0901 	mov.w	r9, #1
 800765c:	4623      	mov	r3, r4
 800765e:	469a      	mov	sl, r3
 8007660:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007664:	b10a      	cbz	r2, 800766a <_vfiprintf_r+0xa2>
 8007666:	2a25      	cmp	r2, #37	; 0x25
 8007668:	d1f9      	bne.n	800765e <_vfiprintf_r+0x96>
 800766a:	ebba 0b04 	subs.w	fp, sl, r4
 800766e:	d00b      	beq.n	8007688 <_vfiprintf_r+0xc0>
 8007670:	465b      	mov	r3, fp
 8007672:	4622      	mov	r2, r4
 8007674:	4629      	mov	r1, r5
 8007676:	4630      	mov	r0, r6
 8007678:	f7ff ff93 	bl	80075a2 <__sfputs_r>
 800767c:	3001      	adds	r0, #1
 800767e:	f000 80aa 	beq.w	80077d6 <_vfiprintf_r+0x20e>
 8007682:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007684:	445a      	add	r2, fp
 8007686:	9209      	str	r2, [sp, #36]	; 0x24
 8007688:	f89a 3000 	ldrb.w	r3, [sl]
 800768c:	2b00      	cmp	r3, #0
 800768e:	f000 80a2 	beq.w	80077d6 <_vfiprintf_r+0x20e>
 8007692:	2300      	movs	r3, #0
 8007694:	f04f 32ff 	mov.w	r2, #4294967295
 8007698:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800769c:	f10a 0a01 	add.w	sl, sl, #1
 80076a0:	9304      	str	r3, [sp, #16]
 80076a2:	9307      	str	r3, [sp, #28]
 80076a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80076a8:	931a      	str	r3, [sp, #104]	; 0x68
 80076aa:	4654      	mov	r4, sl
 80076ac:	2205      	movs	r2, #5
 80076ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076b2:	4858      	ldr	r0, [pc, #352]	; (8007814 <_vfiprintf_r+0x24c>)
 80076b4:	f7f8 fd9c 	bl	80001f0 <memchr>
 80076b8:	9a04      	ldr	r2, [sp, #16]
 80076ba:	b9d8      	cbnz	r0, 80076f4 <_vfiprintf_r+0x12c>
 80076bc:	06d1      	lsls	r1, r2, #27
 80076be:	bf44      	itt	mi
 80076c0:	2320      	movmi	r3, #32
 80076c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80076c6:	0713      	lsls	r3, r2, #28
 80076c8:	bf44      	itt	mi
 80076ca:	232b      	movmi	r3, #43	; 0x2b
 80076cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80076d0:	f89a 3000 	ldrb.w	r3, [sl]
 80076d4:	2b2a      	cmp	r3, #42	; 0x2a
 80076d6:	d015      	beq.n	8007704 <_vfiprintf_r+0x13c>
 80076d8:	9a07      	ldr	r2, [sp, #28]
 80076da:	4654      	mov	r4, sl
 80076dc:	2000      	movs	r0, #0
 80076de:	f04f 0c0a 	mov.w	ip, #10
 80076e2:	4621      	mov	r1, r4
 80076e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80076e8:	3b30      	subs	r3, #48	; 0x30
 80076ea:	2b09      	cmp	r3, #9
 80076ec:	d94e      	bls.n	800778c <_vfiprintf_r+0x1c4>
 80076ee:	b1b0      	cbz	r0, 800771e <_vfiprintf_r+0x156>
 80076f0:	9207      	str	r2, [sp, #28]
 80076f2:	e014      	b.n	800771e <_vfiprintf_r+0x156>
 80076f4:	eba0 0308 	sub.w	r3, r0, r8
 80076f8:	fa09 f303 	lsl.w	r3, r9, r3
 80076fc:	4313      	orrs	r3, r2
 80076fe:	9304      	str	r3, [sp, #16]
 8007700:	46a2      	mov	sl, r4
 8007702:	e7d2      	b.n	80076aa <_vfiprintf_r+0xe2>
 8007704:	9b03      	ldr	r3, [sp, #12]
 8007706:	1d19      	adds	r1, r3, #4
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	9103      	str	r1, [sp, #12]
 800770c:	2b00      	cmp	r3, #0
 800770e:	bfbb      	ittet	lt
 8007710:	425b      	neglt	r3, r3
 8007712:	f042 0202 	orrlt.w	r2, r2, #2
 8007716:	9307      	strge	r3, [sp, #28]
 8007718:	9307      	strlt	r3, [sp, #28]
 800771a:	bfb8      	it	lt
 800771c:	9204      	strlt	r2, [sp, #16]
 800771e:	7823      	ldrb	r3, [r4, #0]
 8007720:	2b2e      	cmp	r3, #46	; 0x2e
 8007722:	d10c      	bne.n	800773e <_vfiprintf_r+0x176>
 8007724:	7863      	ldrb	r3, [r4, #1]
 8007726:	2b2a      	cmp	r3, #42	; 0x2a
 8007728:	d135      	bne.n	8007796 <_vfiprintf_r+0x1ce>
 800772a:	9b03      	ldr	r3, [sp, #12]
 800772c:	1d1a      	adds	r2, r3, #4
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	9203      	str	r2, [sp, #12]
 8007732:	2b00      	cmp	r3, #0
 8007734:	bfb8      	it	lt
 8007736:	f04f 33ff 	movlt.w	r3, #4294967295
 800773a:	3402      	adds	r4, #2
 800773c:	9305      	str	r3, [sp, #20]
 800773e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007824 <_vfiprintf_r+0x25c>
 8007742:	7821      	ldrb	r1, [r4, #0]
 8007744:	2203      	movs	r2, #3
 8007746:	4650      	mov	r0, sl
 8007748:	f7f8 fd52 	bl	80001f0 <memchr>
 800774c:	b140      	cbz	r0, 8007760 <_vfiprintf_r+0x198>
 800774e:	2340      	movs	r3, #64	; 0x40
 8007750:	eba0 000a 	sub.w	r0, r0, sl
 8007754:	fa03 f000 	lsl.w	r0, r3, r0
 8007758:	9b04      	ldr	r3, [sp, #16]
 800775a:	4303      	orrs	r3, r0
 800775c:	3401      	adds	r4, #1
 800775e:	9304      	str	r3, [sp, #16]
 8007760:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007764:	482c      	ldr	r0, [pc, #176]	; (8007818 <_vfiprintf_r+0x250>)
 8007766:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800776a:	2206      	movs	r2, #6
 800776c:	f7f8 fd40 	bl	80001f0 <memchr>
 8007770:	2800      	cmp	r0, #0
 8007772:	d03f      	beq.n	80077f4 <_vfiprintf_r+0x22c>
 8007774:	4b29      	ldr	r3, [pc, #164]	; (800781c <_vfiprintf_r+0x254>)
 8007776:	bb1b      	cbnz	r3, 80077c0 <_vfiprintf_r+0x1f8>
 8007778:	9b03      	ldr	r3, [sp, #12]
 800777a:	3307      	adds	r3, #7
 800777c:	f023 0307 	bic.w	r3, r3, #7
 8007780:	3308      	adds	r3, #8
 8007782:	9303      	str	r3, [sp, #12]
 8007784:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007786:	443b      	add	r3, r7
 8007788:	9309      	str	r3, [sp, #36]	; 0x24
 800778a:	e767      	b.n	800765c <_vfiprintf_r+0x94>
 800778c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007790:	460c      	mov	r4, r1
 8007792:	2001      	movs	r0, #1
 8007794:	e7a5      	b.n	80076e2 <_vfiprintf_r+0x11a>
 8007796:	2300      	movs	r3, #0
 8007798:	3401      	adds	r4, #1
 800779a:	9305      	str	r3, [sp, #20]
 800779c:	4619      	mov	r1, r3
 800779e:	f04f 0c0a 	mov.w	ip, #10
 80077a2:	4620      	mov	r0, r4
 80077a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80077a8:	3a30      	subs	r2, #48	; 0x30
 80077aa:	2a09      	cmp	r2, #9
 80077ac:	d903      	bls.n	80077b6 <_vfiprintf_r+0x1ee>
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d0c5      	beq.n	800773e <_vfiprintf_r+0x176>
 80077b2:	9105      	str	r1, [sp, #20]
 80077b4:	e7c3      	b.n	800773e <_vfiprintf_r+0x176>
 80077b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80077ba:	4604      	mov	r4, r0
 80077bc:	2301      	movs	r3, #1
 80077be:	e7f0      	b.n	80077a2 <_vfiprintf_r+0x1da>
 80077c0:	ab03      	add	r3, sp, #12
 80077c2:	9300      	str	r3, [sp, #0]
 80077c4:	462a      	mov	r2, r5
 80077c6:	4b16      	ldr	r3, [pc, #88]	; (8007820 <_vfiprintf_r+0x258>)
 80077c8:	a904      	add	r1, sp, #16
 80077ca:	4630      	mov	r0, r6
 80077cc:	f3af 8000 	nop.w
 80077d0:	4607      	mov	r7, r0
 80077d2:	1c78      	adds	r0, r7, #1
 80077d4:	d1d6      	bne.n	8007784 <_vfiprintf_r+0x1bc>
 80077d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80077d8:	07d9      	lsls	r1, r3, #31
 80077da:	d405      	bmi.n	80077e8 <_vfiprintf_r+0x220>
 80077dc:	89ab      	ldrh	r3, [r5, #12]
 80077de:	059a      	lsls	r2, r3, #22
 80077e0:	d402      	bmi.n	80077e8 <_vfiprintf_r+0x220>
 80077e2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80077e4:	f7ff fc5b 	bl	800709e <__retarget_lock_release_recursive>
 80077e8:	89ab      	ldrh	r3, [r5, #12]
 80077ea:	065b      	lsls	r3, r3, #25
 80077ec:	f53f af12 	bmi.w	8007614 <_vfiprintf_r+0x4c>
 80077f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80077f2:	e711      	b.n	8007618 <_vfiprintf_r+0x50>
 80077f4:	ab03      	add	r3, sp, #12
 80077f6:	9300      	str	r3, [sp, #0]
 80077f8:	462a      	mov	r2, r5
 80077fa:	4b09      	ldr	r3, [pc, #36]	; (8007820 <_vfiprintf_r+0x258>)
 80077fc:	a904      	add	r1, sp, #16
 80077fe:	4630      	mov	r0, r6
 8007800:	f000 f880 	bl	8007904 <_printf_i>
 8007804:	e7e4      	b.n	80077d0 <_vfiprintf_r+0x208>
 8007806:	bf00      	nop
 8007808:	08008094 	.word	0x08008094
 800780c:	080080b4 	.word	0x080080b4
 8007810:	08008074 	.word	0x08008074
 8007814:	080080d4 	.word	0x080080d4
 8007818:	080080de 	.word	0x080080de
 800781c:	00000000 	.word	0x00000000
 8007820:	080075a3 	.word	0x080075a3
 8007824:	080080da 	.word	0x080080da

08007828 <_printf_common>:
 8007828:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800782c:	4616      	mov	r6, r2
 800782e:	4699      	mov	r9, r3
 8007830:	688a      	ldr	r2, [r1, #8]
 8007832:	690b      	ldr	r3, [r1, #16]
 8007834:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007838:	4293      	cmp	r3, r2
 800783a:	bfb8      	it	lt
 800783c:	4613      	movlt	r3, r2
 800783e:	6033      	str	r3, [r6, #0]
 8007840:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007844:	4607      	mov	r7, r0
 8007846:	460c      	mov	r4, r1
 8007848:	b10a      	cbz	r2, 800784e <_printf_common+0x26>
 800784a:	3301      	adds	r3, #1
 800784c:	6033      	str	r3, [r6, #0]
 800784e:	6823      	ldr	r3, [r4, #0]
 8007850:	0699      	lsls	r1, r3, #26
 8007852:	bf42      	ittt	mi
 8007854:	6833      	ldrmi	r3, [r6, #0]
 8007856:	3302      	addmi	r3, #2
 8007858:	6033      	strmi	r3, [r6, #0]
 800785a:	6825      	ldr	r5, [r4, #0]
 800785c:	f015 0506 	ands.w	r5, r5, #6
 8007860:	d106      	bne.n	8007870 <_printf_common+0x48>
 8007862:	f104 0a19 	add.w	sl, r4, #25
 8007866:	68e3      	ldr	r3, [r4, #12]
 8007868:	6832      	ldr	r2, [r6, #0]
 800786a:	1a9b      	subs	r3, r3, r2
 800786c:	42ab      	cmp	r3, r5
 800786e:	dc26      	bgt.n	80078be <_printf_common+0x96>
 8007870:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007874:	1e13      	subs	r3, r2, #0
 8007876:	6822      	ldr	r2, [r4, #0]
 8007878:	bf18      	it	ne
 800787a:	2301      	movne	r3, #1
 800787c:	0692      	lsls	r2, r2, #26
 800787e:	d42b      	bmi.n	80078d8 <_printf_common+0xb0>
 8007880:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007884:	4649      	mov	r1, r9
 8007886:	4638      	mov	r0, r7
 8007888:	47c0      	blx	r8
 800788a:	3001      	adds	r0, #1
 800788c:	d01e      	beq.n	80078cc <_printf_common+0xa4>
 800788e:	6823      	ldr	r3, [r4, #0]
 8007890:	68e5      	ldr	r5, [r4, #12]
 8007892:	6832      	ldr	r2, [r6, #0]
 8007894:	f003 0306 	and.w	r3, r3, #6
 8007898:	2b04      	cmp	r3, #4
 800789a:	bf08      	it	eq
 800789c:	1aad      	subeq	r5, r5, r2
 800789e:	68a3      	ldr	r3, [r4, #8]
 80078a0:	6922      	ldr	r2, [r4, #16]
 80078a2:	bf0c      	ite	eq
 80078a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80078a8:	2500      	movne	r5, #0
 80078aa:	4293      	cmp	r3, r2
 80078ac:	bfc4      	itt	gt
 80078ae:	1a9b      	subgt	r3, r3, r2
 80078b0:	18ed      	addgt	r5, r5, r3
 80078b2:	2600      	movs	r6, #0
 80078b4:	341a      	adds	r4, #26
 80078b6:	42b5      	cmp	r5, r6
 80078b8:	d11a      	bne.n	80078f0 <_printf_common+0xc8>
 80078ba:	2000      	movs	r0, #0
 80078bc:	e008      	b.n	80078d0 <_printf_common+0xa8>
 80078be:	2301      	movs	r3, #1
 80078c0:	4652      	mov	r2, sl
 80078c2:	4649      	mov	r1, r9
 80078c4:	4638      	mov	r0, r7
 80078c6:	47c0      	blx	r8
 80078c8:	3001      	adds	r0, #1
 80078ca:	d103      	bne.n	80078d4 <_printf_common+0xac>
 80078cc:	f04f 30ff 	mov.w	r0, #4294967295
 80078d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078d4:	3501      	adds	r5, #1
 80078d6:	e7c6      	b.n	8007866 <_printf_common+0x3e>
 80078d8:	18e1      	adds	r1, r4, r3
 80078da:	1c5a      	adds	r2, r3, #1
 80078dc:	2030      	movs	r0, #48	; 0x30
 80078de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80078e2:	4422      	add	r2, r4
 80078e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80078e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80078ec:	3302      	adds	r3, #2
 80078ee:	e7c7      	b.n	8007880 <_printf_common+0x58>
 80078f0:	2301      	movs	r3, #1
 80078f2:	4622      	mov	r2, r4
 80078f4:	4649      	mov	r1, r9
 80078f6:	4638      	mov	r0, r7
 80078f8:	47c0      	blx	r8
 80078fa:	3001      	adds	r0, #1
 80078fc:	d0e6      	beq.n	80078cc <_printf_common+0xa4>
 80078fe:	3601      	adds	r6, #1
 8007900:	e7d9      	b.n	80078b6 <_printf_common+0x8e>
	...

08007904 <_printf_i>:
 8007904:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007908:	460c      	mov	r4, r1
 800790a:	4691      	mov	r9, r2
 800790c:	7e27      	ldrb	r7, [r4, #24]
 800790e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007910:	2f78      	cmp	r7, #120	; 0x78
 8007912:	4680      	mov	r8, r0
 8007914:	469a      	mov	sl, r3
 8007916:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800791a:	d807      	bhi.n	800792c <_printf_i+0x28>
 800791c:	2f62      	cmp	r7, #98	; 0x62
 800791e:	d80a      	bhi.n	8007936 <_printf_i+0x32>
 8007920:	2f00      	cmp	r7, #0
 8007922:	f000 80d8 	beq.w	8007ad6 <_printf_i+0x1d2>
 8007926:	2f58      	cmp	r7, #88	; 0x58
 8007928:	f000 80a3 	beq.w	8007a72 <_printf_i+0x16e>
 800792c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007930:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007934:	e03a      	b.n	80079ac <_printf_i+0xa8>
 8007936:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800793a:	2b15      	cmp	r3, #21
 800793c:	d8f6      	bhi.n	800792c <_printf_i+0x28>
 800793e:	a001      	add	r0, pc, #4	; (adr r0, 8007944 <_printf_i+0x40>)
 8007940:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007944:	0800799d 	.word	0x0800799d
 8007948:	080079b1 	.word	0x080079b1
 800794c:	0800792d 	.word	0x0800792d
 8007950:	0800792d 	.word	0x0800792d
 8007954:	0800792d 	.word	0x0800792d
 8007958:	0800792d 	.word	0x0800792d
 800795c:	080079b1 	.word	0x080079b1
 8007960:	0800792d 	.word	0x0800792d
 8007964:	0800792d 	.word	0x0800792d
 8007968:	0800792d 	.word	0x0800792d
 800796c:	0800792d 	.word	0x0800792d
 8007970:	08007abd 	.word	0x08007abd
 8007974:	080079e1 	.word	0x080079e1
 8007978:	08007a9f 	.word	0x08007a9f
 800797c:	0800792d 	.word	0x0800792d
 8007980:	0800792d 	.word	0x0800792d
 8007984:	08007adf 	.word	0x08007adf
 8007988:	0800792d 	.word	0x0800792d
 800798c:	080079e1 	.word	0x080079e1
 8007990:	0800792d 	.word	0x0800792d
 8007994:	0800792d 	.word	0x0800792d
 8007998:	08007aa7 	.word	0x08007aa7
 800799c:	680b      	ldr	r3, [r1, #0]
 800799e:	1d1a      	adds	r2, r3, #4
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	600a      	str	r2, [r1, #0]
 80079a4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80079a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80079ac:	2301      	movs	r3, #1
 80079ae:	e0a3      	b.n	8007af8 <_printf_i+0x1f4>
 80079b0:	6825      	ldr	r5, [r4, #0]
 80079b2:	6808      	ldr	r0, [r1, #0]
 80079b4:	062e      	lsls	r6, r5, #24
 80079b6:	f100 0304 	add.w	r3, r0, #4
 80079ba:	d50a      	bpl.n	80079d2 <_printf_i+0xce>
 80079bc:	6805      	ldr	r5, [r0, #0]
 80079be:	600b      	str	r3, [r1, #0]
 80079c0:	2d00      	cmp	r5, #0
 80079c2:	da03      	bge.n	80079cc <_printf_i+0xc8>
 80079c4:	232d      	movs	r3, #45	; 0x2d
 80079c6:	426d      	negs	r5, r5
 80079c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80079cc:	485e      	ldr	r0, [pc, #376]	; (8007b48 <_printf_i+0x244>)
 80079ce:	230a      	movs	r3, #10
 80079d0:	e019      	b.n	8007a06 <_printf_i+0x102>
 80079d2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80079d6:	6805      	ldr	r5, [r0, #0]
 80079d8:	600b      	str	r3, [r1, #0]
 80079da:	bf18      	it	ne
 80079dc:	b22d      	sxthne	r5, r5
 80079de:	e7ef      	b.n	80079c0 <_printf_i+0xbc>
 80079e0:	680b      	ldr	r3, [r1, #0]
 80079e2:	6825      	ldr	r5, [r4, #0]
 80079e4:	1d18      	adds	r0, r3, #4
 80079e6:	6008      	str	r0, [r1, #0]
 80079e8:	0628      	lsls	r0, r5, #24
 80079ea:	d501      	bpl.n	80079f0 <_printf_i+0xec>
 80079ec:	681d      	ldr	r5, [r3, #0]
 80079ee:	e002      	b.n	80079f6 <_printf_i+0xf2>
 80079f0:	0669      	lsls	r1, r5, #25
 80079f2:	d5fb      	bpl.n	80079ec <_printf_i+0xe8>
 80079f4:	881d      	ldrh	r5, [r3, #0]
 80079f6:	4854      	ldr	r0, [pc, #336]	; (8007b48 <_printf_i+0x244>)
 80079f8:	2f6f      	cmp	r7, #111	; 0x6f
 80079fa:	bf0c      	ite	eq
 80079fc:	2308      	moveq	r3, #8
 80079fe:	230a      	movne	r3, #10
 8007a00:	2100      	movs	r1, #0
 8007a02:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007a06:	6866      	ldr	r6, [r4, #4]
 8007a08:	60a6      	str	r6, [r4, #8]
 8007a0a:	2e00      	cmp	r6, #0
 8007a0c:	bfa2      	ittt	ge
 8007a0e:	6821      	ldrge	r1, [r4, #0]
 8007a10:	f021 0104 	bicge.w	r1, r1, #4
 8007a14:	6021      	strge	r1, [r4, #0]
 8007a16:	b90d      	cbnz	r5, 8007a1c <_printf_i+0x118>
 8007a18:	2e00      	cmp	r6, #0
 8007a1a:	d04d      	beq.n	8007ab8 <_printf_i+0x1b4>
 8007a1c:	4616      	mov	r6, r2
 8007a1e:	fbb5 f1f3 	udiv	r1, r5, r3
 8007a22:	fb03 5711 	mls	r7, r3, r1, r5
 8007a26:	5dc7      	ldrb	r7, [r0, r7]
 8007a28:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007a2c:	462f      	mov	r7, r5
 8007a2e:	42bb      	cmp	r3, r7
 8007a30:	460d      	mov	r5, r1
 8007a32:	d9f4      	bls.n	8007a1e <_printf_i+0x11a>
 8007a34:	2b08      	cmp	r3, #8
 8007a36:	d10b      	bne.n	8007a50 <_printf_i+0x14c>
 8007a38:	6823      	ldr	r3, [r4, #0]
 8007a3a:	07df      	lsls	r7, r3, #31
 8007a3c:	d508      	bpl.n	8007a50 <_printf_i+0x14c>
 8007a3e:	6923      	ldr	r3, [r4, #16]
 8007a40:	6861      	ldr	r1, [r4, #4]
 8007a42:	4299      	cmp	r1, r3
 8007a44:	bfde      	ittt	le
 8007a46:	2330      	movle	r3, #48	; 0x30
 8007a48:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007a4c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007a50:	1b92      	subs	r2, r2, r6
 8007a52:	6122      	str	r2, [r4, #16]
 8007a54:	f8cd a000 	str.w	sl, [sp]
 8007a58:	464b      	mov	r3, r9
 8007a5a:	aa03      	add	r2, sp, #12
 8007a5c:	4621      	mov	r1, r4
 8007a5e:	4640      	mov	r0, r8
 8007a60:	f7ff fee2 	bl	8007828 <_printf_common>
 8007a64:	3001      	adds	r0, #1
 8007a66:	d14c      	bne.n	8007b02 <_printf_i+0x1fe>
 8007a68:	f04f 30ff 	mov.w	r0, #4294967295
 8007a6c:	b004      	add	sp, #16
 8007a6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a72:	4835      	ldr	r0, [pc, #212]	; (8007b48 <_printf_i+0x244>)
 8007a74:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007a78:	6823      	ldr	r3, [r4, #0]
 8007a7a:	680e      	ldr	r6, [r1, #0]
 8007a7c:	061f      	lsls	r7, r3, #24
 8007a7e:	f856 5b04 	ldr.w	r5, [r6], #4
 8007a82:	600e      	str	r6, [r1, #0]
 8007a84:	d514      	bpl.n	8007ab0 <_printf_i+0x1ac>
 8007a86:	07d9      	lsls	r1, r3, #31
 8007a88:	bf44      	itt	mi
 8007a8a:	f043 0320 	orrmi.w	r3, r3, #32
 8007a8e:	6023      	strmi	r3, [r4, #0]
 8007a90:	b91d      	cbnz	r5, 8007a9a <_printf_i+0x196>
 8007a92:	6823      	ldr	r3, [r4, #0]
 8007a94:	f023 0320 	bic.w	r3, r3, #32
 8007a98:	6023      	str	r3, [r4, #0]
 8007a9a:	2310      	movs	r3, #16
 8007a9c:	e7b0      	b.n	8007a00 <_printf_i+0xfc>
 8007a9e:	6823      	ldr	r3, [r4, #0]
 8007aa0:	f043 0320 	orr.w	r3, r3, #32
 8007aa4:	6023      	str	r3, [r4, #0]
 8007aa6:	2378      	movs	r3, #120	; 0x78
 8007aa8:	4828      	ldr	r0, [pc, #160]	; (8007b4c <_printf_i+0x248>)
 8007aaa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007aae:	e7e3      	b.n	8007a78 <_printf_i+0x174>
 8007ab0:	065e      	lsls	r6, r3, #25
 8007ab2:	bf48      	it	mi
 8007ab4:	b2ad      	uxthmi	r5, r5
 8007ab6:	e7e6      	b.n	8007a86 <_printf_i+0x182>
 8007ab8:	4616      	mov	r6, r2
 8007aba:	e7bb      	b.n	8007a34 <_printf_i+0x130>
 8007abc:	680b      	ldr	r3, [r1, #0]
 8007abe:	6826      	ldr	r6, [r4, #0]
 8007ac0:	6960      	ldr	r0, [r4, #20]
 8007ac2:	1d1d      	adds	r5, r3, #4
 8007ac4:	600d      	str	r5, [r1, #0]
 8007ac6:	0635      	lsls	r5, r6, #24
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	d501      	bpl.n	8007ad0 <_printf_i+0x1cc>
 8007acc:	6018      	str	r0, [r3, #0]
 8007ace:	e002      	b.n	8007ad6 <_printf_i+0x1d2>
 8007ad0:	0671      	lsls	r1, r6, #25
 8007ad2:	d5fb      	bpl.n	8007acc <_printf_i+0x1c8>
 8007ad4:	8018      	strh	r0, [r3, #0]
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	6123      	str	r3, [r4, #16]
 8007ada:	4616      	mov	r6, r2
 8007adc:	e7ba      	b.n	8007a54 <_printf_i+0x150>
 8007ade:	680b      	ldr	r3, [r1, #0]
 8007ae0:	1d1a      	adds	r2, r3, #4
 8007ae2:	600a      	str	r2, [r1, #0]
 8007ae4:	681e      	ldr	r6, [r3, #0]
 8007ae6:	6862      	ldr	r2, [r4, #4]
 8007ae8:	2100      	movs	r1, #0
 8007aea:	4630      	mov	r0, r6
 8007aec:	f7f8 fb80 	bl	80001f0 <memchr>
 8007af0:	b108      	cbz	r0, 8007af6 <_printf_i+0x1f2>
 8007af2:	1b80      	subs	r0, r0, r6
 8007af4:	6060      	str	r0, [r4, #4]
 8007af6:	6863      	ldr	r3, [r4, #4]
 8007af8:	6123      	str	r3, [r4, #16]
 8007afa:	2300      	movs	r3, #0
 8007afc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b00:	e7a8      	b.n	8007a54 <_printf_i+0x150>
 8007b02:	6923      	ldr	r3, [r4, #16]
 8007b04:	4632      	mov	r2, r6
 8007b06:	4649      	mov	r1, r9
 8007b08:	4640      	mov	r0, r8
 8007b0a:	47d0      	blx	sl
 8007b0c:	3001      	adds	r0, #1
 8007b0e:	d0ab      	beq.n	8007a68 <_printf_i+0x164>
 8007b10:	6823      	ldr	r3, [r4, #0]
 8007b12:	079b      	lsls	r3, r3, #30
 8007b14:	d413      	bmi.n	8007b3e <_printf_i+0x23a>
 8007b16:	68e0      	ldr	r0, [r4, #12]
 8007b18:	9b03      	ldr	r3, [sp, #12]
 8007b1a:	4298      	cmp	r0, r3
 8007b1c:	bfb8      	it	lt
 8007b1e:	4618      	movlt	r0, r3
 8007b20:	e7a4      	b.n	8007a6c <_printf_i+0x168>
 8007b22:	2301      	movs	r3, #1
 8007b24:	4632      	mov	r2, r6
 8007b26:	4649      	mov	r1, r9
 8007b28:	4640      	mov	r0, r8
 8007b2a:	47d0      	blx	sl
 8007b2c:	3001      	adds	r0, #1
 8007b2e:	d09b      	beq.n	8007a68 <_printf_i+0x164>
 8007b30:	3501      	adds	r5, #1
 8007b32:	68e3      	ldr	r3, [r4, #12]
 8007b34:	9903      	ldr	r1, [sp, #12]
 8007b36:	1a5b      	subs	r3, r3, r1
 8007b38:	42ab      	cmp	r3, r5
 8007b3a:	dcf2      	bgt.n	8007b22 <_printf_i+0x21e>
 8007b3c:	e7eb      	b.n	8007b16 <_printf_i+0x212>
 8007b3e:	2500      	movs	r5, #0
 8007b40:	f104 0619 	add.w	r6, r4, #25
 8007b44:	e7f5      	b.n	8007b32 <_printf_i+0x22e>
 8007b46:	bf00      	nop
 8007b48:	080080e5 	.word	0x080080e5
 8007b4c:	080080f6 	.word	0x080080f6

08007b50 <_sbrk_r>:
 8007b50:	b538      	push	{r3, r4, r5, lr}
 8007b52:	4d06      	ldr	r5, [pc, #24]	; (8007b6c <_sbrk_r+0x1c>)
 8007b54:	2300      	movs	r3, #0
 8007b56:	4604      	mov	r4, r0
 8007b58:	4608      	mov	r0, r1
 8007b5a:	602b      	str	r3, [r5, #0]
 8007b5c:	f7f8 ff1e 	bl	800099c <_sbrk>
 8007b60:	1c43      	adds	r3, r0, #1
 8007b62:	d102      	bne.n	8007b6a <_sbrk_r+0x1a>
 8007b64:	682b      	ldr	r3, [r5, #0]
 8007b66:	b103      	cbz	r3, 8007b6a <_sbrk_r+0x1a>
 8007b68:	6023      	str	r3, [r4, #0]
 8007b6a:	bd38      	pop	{r3, r4, r5, pc}
 8007b6c:	200006bc 	.word	0x200006bc

08007b70 <__sread>:
 8007b70:	b510      	push	{r4, lr}
 8007b72:	460c      	mov	r4, r1
 8007b74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b78:	f000 f8ee 	bl	8007d58 <_read_r>
 8007b7c:	2800      	cmp	r0, #0
 8007b7e:	bfab      	itete	ge
 8007b80:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007b82:	89a3      	ldrhlt	r3, [r4, #12]
 8007b84:	181b      	addge	r3, r3, r0
 8007b86:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007b8a:	bfac      	ite	ge
 8007b8c:	6563      	strge	r3, [r4, #84]	; 0x54
 8007b8e:	81a3      	strhlt	r3, [r4, #12]
 8007b90:	bd10      	pop	{r4, pc}

08007b92 <__swrite>:
 8007b92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b96:	461f      	mov	r7, r3
 8007b98:	898b      	ldrh	r3, [r1, #12]
 8007b9a:	05db      	lsls	r3, r3, #23
 8007b9c:	4605      	mov	r5, r0
 8007b9e:	460c      	mov	r4, r1
 8007ba0:	4616      	mov	r6, r2
 8007ba2:	d505      	bpl.n	8007bb0 <__swrite+0x1e>
 8007ba4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ba8:	2302      	movs	r3, #2
 8007baa:	2200      	movs	r2, #0
 8007bac:	f000 f868 	bl	8007c80 <_lseek_r>
 8007bb0:	89a3      	ldrh	r3, [r4, #12]
 8007bb2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007bb6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007bba:	81a3      	strh	r3, [r4, #12]
 8007bbc:	4632      	mov	r2, r6
 8007bbe:	463b      	mov	r3, r7
 8007bc0:	4628      	mov	r0, r5
 8007bc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007bc6:	f000 b817 	b.w	8007bf8 <_write_r>

08007bca <__sseek>:
 8007bca:	b510      	push	{r4, lr}
 8007bcc:	460c      	mov	r4, r1
 8007bce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bd2:	f000 f855 	bl	8007c80 <_lseek_r>
 8007bd6:	1c43      	adds	r3, r0, #1
 8007bd8:	89a3      	ldrh	r3, [r4, #12]
 8007bda:	bf15      	itete	ne
 8007bdc:	6560      	strne	r0, [r4, #84]	; 0x54
 8007bde:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007be2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007be6:	81a3      	strheq	r3, [r4, #12]
 8007be8:	bf18      	it	ne
 8007bea:	81a3      	strhne	r3, [r4, #12]
 8007bec:	bd10      	pop	{r4, pc}

08007bee <__sclose>:
 8007bee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bf2:	f000 b813 	b.w	8007c1c <_close_r>
	...

08007bf8 <_write_r>:
 8007bf8:	b538      	push	{r3, r4, r5, lr}
 8007bfa:	4d07      	ldr	r5, [pc, #28]	; (8007c18 <_write_r+0x20>)
 8007bfc:	4604      	mov	r4, r0
 8007bfe:	4608      	mov	r0, r1
 8007c00:	4611      	mov	r1, r2
 8007c02:	2200      	movs	r2, #0
 8007c04:	602a      	str	r2, [r5, #0]
 8007c06:	461a      	mov	r2, r3
 8007c08:	f7f8 fe77 	bl	80008fa <_write>
 8007c0c:	1c43      	adds	r3, r0, #1
 8007c0e:	d102      	bne.n	8007c16 <_write_r+0x1e>
 8007c10:	682b      	ldr	r3, [r5, #0]
 8007c12:	b103      	cbz	r3, 8007c16 <_write_r+0x1e>
 8007c14:	6023      	str	r3, [r4, #0]
 8007c16:	bd38      	pop	{r3, r4, r5, pc}
 8007c18:	200006bc 	.word	0x200006bc

08007c1c <_close_r>:
 8007c1c:	b538      	push	{r3, r4, r5, lr}
 8007c1e:	4d06      	ldr	r5, [pc, #24]	; (8007c38 <_close_r+0x1c>)
 8007c20:	2300      	movs	r3, #0
 8007c22:	4604      	mov	r4, r0
 8007c24:	4608      	mov	r0, r1
 8007c26:	602b      	str	r3, [r5, #0]
 8007c28:	f7f8 fe83 	bl	8000932 <_close>
 8007c2c:	1c43      	adds	r3, r0, #1
 8007c2e:	d102      	bne.n	8007c36 <_close_r+0x1a>
 8007c30:	682b      	ldr	r3, [r5, #0]
 8007c32:	b103      	cbz	r3, 8007c36 <_close_r+0x1a>
 8007c34:	6023      	str	r3, [r4, #0]
 8007c36:	bd38      	pop	{r3, r4, r5, pc}
 8007c38:	200006bc 	.word	0x200006bc

08007c3c <_fstat_r>:
 8007c3c:	b538      	push	{r3, r4, r5, lr}
 8007c3e:	4d07      	ldr	r5, [pc, #28]	; (8007c5c <_fstat_r+0x20>)
 8007c40:	2300      	movs	r3, #0
 8007c42:	4604      	mov	r4, r0
 8007c44:	4608      	mov	r0, r1
 8007c46:	4611      	mov	r1, r2
 8007c48:	602b      	str	r3, [r5, #0]
 8007c4a:	f7f8 fe7e 	bl	800094a <_fstat>
 8007c4e:	1c43      	adds	r3, r0, #1
 8007c50:	d102      	bne.n	8007c58 <_fstat_r+0x1c>
 8007c52:	682b      	ldr	r3, [r5, #0]
 8007c54:	b103      	cbz	r3, 8007c58 <_fstat_r+0x1c>
 8007c56:	6023      	str	r3, [r4, #0]
 8007c58:	bd38      	pop	{r3, r4, r5, pc}
 8007c5a:	bf00      	nop
 8007c5c:	200006bc 	.word	0x200006bc

08007c60 <_isatty_r>:
 8007c60:	b538      	push	{r3, r4, r5, lr}
 8007c62:	4d06      	ldr	r5, [pc, #24]	; (8007c7c <_isatty_r+0x1c>)
 8007c64:	2300      	movs	r3, #0
 8007c66:	4604      	mov	r4, r0
 8007c68:	4608      	mov	r0, r1
 8007c6a:	602b      	str	r3, [r5, #0]
 8007c6c:	f7f8 fe7d 	bl	800096a <_isatty>
 8007c70:	1c43      	adds	r3, r0, #1
 8007c72:	d102      	bne.n	8007c7a <_isatty_r+0x1a>
 8007c74:	682b      	ldr	r3, [r5, #0]
 8007c76:	b103      	cbz	r3, 8007c7a <_isatty_r+0x1a>
 8007c78:	6023      	str	r3, [r4, #0]
 8007c7a:	bd38      	pop	{r3, r4, r5, pc}
 8007c7c:	200006bc 	.word	0x200006bc

08007c80 <_lseek_r>:
 8007c80:	b538      	push	{r3, r4, r5, lr}
 8007c82:	4d07      	ldr	r5, [pc, #28]	; (8007ca0 <_lseek_r+0x20>)
 8007c84:	4604      	mov	r4, r0
 8007c86:	4608      	mov	r0, r1
 8007c88:	4611      	mov	r1, r2
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	602a      	str	r2, [r5, #0]
 8007c8e:	461a      	mov	r2, r3
 8007c90:	f7f8 fe76 	bl	8000980 <_lseek>
 8007c94:	1c43      	adds	r3, r0, #1
 8007c96:	d102      	bne.n	8007c9e <_lseek_r+0x1e>
 8007c98:	682b      	ldr	r3, [r5, #0]
 8007c9a:	b103      	cbz	r3, 8007c9e <_lseek_r+0x1e>
 8007c9c:	6023      	str	r3, [r4, #0]
 8007c9e:	bd38      	pop	{r3, r4, r5, pc}
 8007ca0:	200006bc 	.word	0x200006bc

08007ca4 <memcpy>:
 8007ca4:	440a      	add	r2, r1
 8007ca6:	4291      	cmp	r1, r2
 8007ca8:	f100 33ff 	add.w	r3, r0, #4294967295
 8007cac:	d100      	bne.n	8007cb0 <memcpy+0xc>
 8007cae:	4770      	bx	lr
 8007cb0:	b510      	push	{r4, lr}
 8007cb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007cb6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007cba:	4291      	cmp	r1, r2
 8007cbc:	d1f9      	bne.n	8007cb2 <memcpy+0xe>
 8007cbe:	bd10      	pop	{r4, pc}

08007cc0 <memmove>:
 8007cc0:	4288      	cmp	r0, r1
 8007cc2:	b510      	push	{r4, lr}
 8007cc4:	eb01 0402 	add.w	r4, r1, r2
 8007cc8:	d902      	bls.n	8007cd0 <memmove+0x10>
 8007cca:	4284      	cmp	r4, r0
 8007ccc:	4623      	mov	r3, r4
 8007cce:	d807      	bhi.n	8007ce0 <memmove+0x20>
 8007cd0:	1e43      	subs	r3, r0, #1
 8007cd2:	42a1      	cmp	r1, r4
 8007cd4:	d008      	beq.n	8007ce8 <memmove+0x28>
 8007cd6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007cda:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007cde:	e7f8      	b.n	8007cd2 <memmove+0x12>
 8007ce0:	4402      	add	r2, r0
 8007ce2:	4601      	mov	r1, r0
 8007ce4:	428a      	cmp	r2, r1
 8007ce6:	d100      	bne.n	8007cea <memmove+0x2a>
 8007ce8:	bd10      	pop	{r4, pc}
 8007cea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007cee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007cf2:	e7f7      	b.n	8007ce4 <memmove+0x24>

08007cf4 <__malloc_lock>:
 8007cf4:	4801      	ldr	r0, [pc, #4]	; (8007cfc <__malloc_lock+0x8>)
 8007cf6:	f7ff b9d1 	b.w	800709c <__retarget_lock_acquire_recursive>
 8007cfa:	bf00      	nop
 8007cfc:	200006b6 	.word	0x200006b6

08007d00 <__malloc_unlock>:
 8007d00:	4801      	ldr	r0, [pc, #4]	; (8007d08 <__malloc_unlock+0x8>)
 8007d02:	f7ff b9cc 	b.w	800709e <__retarget_lock_release_recursive>
 8007d06:	bf00      	nop
 8007d08:	200006b6 	.word	0x200006b6

08007d0c <_realloc_r>:
 8007d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d0e:	4607      	mov	r7, r0
 8007d10:	4614      	mov	r4, r2
 8007d12:	460e      	mov	r6, r1
 8007d14:	b921      	cbnz	r1, 8007d20 <_realloc_r+0x14>
 8007d16:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007d1a:	4611      	mov	r1, r2
 8007d1c:	f7ff ba74 	b.w	8007208 <_malloc_r>
 8007d20:	b922      	cbnz	r2, 8007d2c <_realloc_r+0x20>
 8007d22:	f7ff fa21 	bl	8007168 <_free_r>
 8007d26:	4625      	mov	r5, r4
 8007d28:	4628      	mov	r0, r5
 8007d2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d2c:	f000 f826 	bl	8007d7c <_malloc_usable_size_r>
 8007d30:	42a0      	cmp	r0, r4
 8007d32:	d20f      	bcs.n	8007d54 <_realloc_r+0x48>
 8007d34:	4621      	mov	r1, r4
 8007d36:	4638      	mov	r0, r7
 8007d38:	f7ff fa66 	bl	8007208 <_malloc_r>
 8007d3c:	4605      	mov	r5, r0
 8007d3e:	2800      	cmp	r0, #0
 8007d40:	d0f2      	beq.n	8007d28 <_realloc_r+0x1c>
 8007d42:	4631      	mov	r1, r6
 8007d44:	4622      	mov	r2, r4
 8007d46:	f7ff ffad 	bl	8007ca4 <memcpy>
 8007d4a:	4631      	mov	r1, r6
 8007d4c:	4638      	mov	r0, r7
 8007d4e:	f7ff fa0b 	bl	8007168 <_free_r>
 8007d52:	e7e9      	b.n	8007d28 <_realloc_r+0x1c>
 8007d54:	4635      	mov	r5, r6
 8007d56:	e7e7      	b.n	8007d28 <_realloc_r+0x1c>

08007d58 <_read_r>:
 8007d58:	b538      	push	{r3, r4, r5, lr}
 8007d5a:	4d07      	ldr	r5, [pc, #28]	; (8007d78 <_read_r+0x20>)
 8007d5c:	4604      	mov	r4, r0
 8007d5e:	4608      	mov	r0, r1
 8007d60:	4611      	mov	r1, r2
 8007d62:	2200      	movs	r2, #0
 8007d64:	602a      	str	r2, [r5, #0]
 8007d66:	461a      	mov	r2, r3
 8007d68:	f7f8 fdaa 	bl	80008c0 <_read>
 8007d6c:	1c43      	adds	r3, r0, #1
 8007d6e:	d102      	bne.n	8007d76 <_read_r+0x1e>
 8007d70:	682b      	ldr	r3, [r5, #0]
 8007d72:	b103      	cbz	r3, 8007d76 <_read_r+0x1e>
 8007d74:	6023      	str	r3, [r4, #0]
 8007d76:	bd38      	pop	{r3, r4, r5, pc}
 8007d78:	200006bc 	.word	0x200006bc

08007d7c <_malloc_usable_size_r>:
 8007d7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d80:	1f18      	subs	r0, r3, #4
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	bfbc      	itt	lt
 8007d86:	580b      	ldrlt	r3, [r1, r0]
 8007d88:	18c0      	addlt	r0, r0, r3
 8007d8a:	4770      	bx	lr

08007d8c <_init>:
 8007d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d8e:	bf00      	nop
 8007d90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d92:	bc08      	pop	{r3}
 8007d94:	469e      	mov	lr, r3
 8007d96:	4770      	bx	lr

08007d98 <_fini>:
 8007d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d9a:	bf00      	nop
 8007d9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d9e:	bc08      	pop	{r3}
 8007da0:	469e      	mov	lr, r3
 8007da2:	4770      	bx	lr
