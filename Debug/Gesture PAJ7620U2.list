
Gesture PAJ7620U2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007070  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000204  08007204  08007204  00017204  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007408  08007408  00020228  2**0
                  CONTENTS
  4 .ARM          00000000  08007408  08007408  00020228  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007408  08007408  00020228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007408  08007408  00017408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800740c  0800740c  0001740c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000228  20000000  08007410  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000538  20000228  08007638  00020228  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000760  08007638  00020760  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012c26  00000000  00000000  00020258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002839  00000000  00000000  00032e7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d58  00000000  00000000  000356b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c60  00000000  00000000  00036410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000227f2  00000000  00000000  00037070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010ed8  00000000  00000000  00059862  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cbacf  00000000  00000000  0006a73a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00136209  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d74  00000000  00000000  0013625c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000228 	.word	0x20000228
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080071ec 	.word	0x080071ec

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000022c 	.word	0x2000022c
 80001d0:	080071ec 	.word	0x080071ec

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001e4:	b580      	push	{r7, lr}
 80001e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001e8:	f000 fc58 	bl	8000a9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001ec:	f000 f812 	bl	8000214 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001f0:	f000 f96c 	bl	80004cc <MX_GPIO_Init>
  MX_RTC_Init();
 80001f4:	f000 f8be 	bl	8000374 <MX_RTC_Init>
  MX_USART3_UART_Init();
 80001f8:	f000 f912 	bl	8000420 <MX_USART3_UART_Init>
  MX_USB_PCD_Init();
 80001fc:	f000 f940 	bl	8000480 <MX_USB_PCD_Init>
  MX_I2C1_Init();
 8000200:	f000 f878 	bl	80002f4 <MX_I2C1_Init>
  MX_UART4_Init();
 8000204:	f000 f8dc 	bl	80003c0 <MX_UART4_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  initializeRegisters();
 8000208:	f005 ffce 	bl	80061a8 <initializeRegisters>
	  GESTURE_Actions();
 800020c:	f006 f814 	bl	8006238 <GESTURE_Actions>
	  initializeRegisters();
 8000210:	e7fa      	b.n	8000208 <main+0x24>
	...

08000214 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b0a6      	sub	sp, #152	; 0x98
 8000218:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800021a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800021e:	2228      	movs	r2, #40	; 0x28
 8000220:	2100      	movs	r1, #0
 8000222:	4618      	mov	r0, r3
 8000224:	f006 fb14 	bl	8006850 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000228:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800022c:	2200      	movs	r2, #0
 800022e:	601a      	str	r2, [r3, #0]
 8000230:	605a      	str	r2, [r3, #4]
 8000232:	609a      	str	r2, [r3, #8]
 8000234:	60da      	str	r2, [r3, #12]
 8000236:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000238:	1d3b      	adds	r3, r7, #4
 800023a:	2258      	movs	r2, #88	; 0x58
 800023c:	2100      	movs	r1, #0
 800023e:	4618      	mov	r0, r3
 8000240:	f006 fb06 	bl	8006850 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8000244:	230b      	movs	r3, #11
 8000246:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000248:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800024c:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800024e:	2301      	movs	r3, #1
 8000250:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000252:	2310      	movs	r3, #16
 8000254:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000258:	2301      	movs	r3, #1
 800025a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800025e:	2302      	movs	r3, #2
 8000260:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000264:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000268:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800026c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000270:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000274:	2300      	movs	r3, #0
 8000276:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800027a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800027e:	4618      	mov	r0, r3
 8000280:	f002 fd14 	bl	8002cac <HAL_RCC_OscConfig>
 8000284:	4603      	mov	r3, r0
 8000286:	2b00      	cmp	r3, #0
 8000288:	d001      	beq.n	800028e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800028a:	f000 f9c1 	bl	8000610 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800028e:	230f      	movs	r3, #15
 8000290:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000292:	2302      	movs	r3, #2
 8000294:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000296:	2300      	movs	r3, #0
 8000298:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800029a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800029e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002a0:	2300      	movs	r3, #0
 80002a2:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002a4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80002a8:	2102      	movs	r1, #2
 80002aa:	4618      	mov	r0, r3
 80002ac:	f003 fc14 	bl	8003ad8 <HAL_RCC_ClockConfig>
 80002b0:	4603      	mov	r3, r0
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d001      	beq.n	80002ba <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80002b6:	f000 f9ab 	bl	8000610 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART3
 80002ba:	4b0d      	ldr	r3, [pc, #52]	; (80002f0 <SystemClock_Config+0xdc>)
 80002bc:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80002be:	2300      	movs	r3, #0
 80002c0:	617b      	str	r3, [r7, #20]
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80002c2:	2300      	movs	r3, #0
 80002c4:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80002c6:	2300      	movs	r3, #0
 80002c8:	623b      	str	r3, [r7, #32]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80002ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80002ce:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80002d0:	2300      	movs	r3, #0
 80002d2:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002d4:	1d3b      	adds	r3, r7, #4
 80002d6:	4618      	mov	r0, r3
 80002d8:	f003 fe34 	bl	8003f44 <HAL_RCCEx_PeriphCLKConfig>
 80002dc:	4603      	mov	r3, r0
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d001      	beq.n	80002e6 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80002e2:	f000 f995 	bl	8000610 <Error_Handler>
  }
}
 80002e6:	bf00      	nop
 80002e8:	3798      	adds	r7, #152	; 0x98
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bd80      	pop	{r7, pc}
 80002ee:	bf00      	nop
 80002f0:	0003002c 	.word	0x0003002c

080002f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80002f8:	4b1b      	ldr	r3, [pc, #108]	; (8000368 <MX_I2C1_Init+0x74>)
 80002fa:	4a1c      	ldr	r2, [pc, #112]	; (800036c <MX_I2C1_Init+0x78>)
 80002fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80002fe:	4b1a      	ldr	r3, [pc, #104]	; (8000368 <MX_I2C1_Init+0x74>)
 8000300:	4a1b      	ldr	r2, [pc, #108]	; (8000370 <MX_I2C1_Init+0x7c>)
 8000302:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000304:	4b18      	ldr	r3, [pc, #96]	; (8000368 <MX_I2C1_Init+0x74>)
 8000306:	2200      	movs	r2, #0
 8000308:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800030a:	4b17      	ldr	r3, [pc, #92]	; (8000368 <MX_I2C1_Init+0x74>)
 800030c:	2201      	movs	r2, #1
 800030e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000310:	4b15      	ldr	r3, [pc, #84]	; (8000368 <MX_I2C1_Init+0x74>)
 8000312:	2200      	movs	r2, #0
 8000314:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000316:	4b14      	ldr	r3, [pc, #80]	; (8000368 <MX_I2C1_Init+0x74>)
 8000318:	2200      	movs	r2, #0
 800031a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800031c:	4b12      	ldr	r3, [pc, #72]	; (8000368 <MX_I2C1_Init+0x74>)
 800031e:	2200      	movs	r2, #0
 8000320:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000322:	4b11      	ldr	r3, [pc, #68]	; (8000368 <MX_I2C1_Init+0x74>)
 8000324:	2200      	movs	r2, #0
 8000326:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000328:	4b0f      	ldr	r3, [pc, #60]	; (8000368 <MX_I2C1_Init+0x74>)
 800032a:	2200      	movs	r2, #0
 800032c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800032e:	480e      	ldr	r0, [pc, #56]	; (8000368 <MX_I2C1_Init+0x74>)
 8000330:	f000 fef2 	bl	8001118 <HAL_I2C_Init>
 8000334:	4603      	mov	r3, r0
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800033a:	f000 f969 	bl	8000610 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800033e:	2100      	movs	r1, #0
 8000340:	4809      	ldr	r0, [pc, #36]	; (8000368 <MX_I2C1_Init+0x74>)
 8000342:	f001 fb43 	bl	80019cc <HAL_I2CEx_ConfigAnalogFilter>
 8000346:	4603      	mov	r3, r0
 8000348:	2b00      	cmp	r3, #0
 800034a:	d001      	beq.n	8000350 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800034c:	f000 f960 	bl	8000610 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000350:	2100      	movs	r1, #0
 8000352:	4805      	ldr	r0, [pc, #20]	; (8000368 <MX_I2C1_Init+0x74>)
 8000354:	f001 fb85 	bl	8001a62 <HAL_I2CEx_ConfigDigitalFilter>
 8000358:	4603      	mov	r3, r0
 800035a:	2b00      	cmp	r3, #0
 800035c:	d001      	beq.n	8000362 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800035e:	f000 f957 	bl	8000610 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000362:	bf00      	nop
 8000364:	bd80      	pop	{r7, pc}
 8000366:	bf00      	nop
 8000368:	200002d4 	.word	0x200002d4
 800036c:	40005400 	.word	0x40005400
 8000370:	2000090e 	.word	0x2000090e

08000374 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000378:	4b0f      	ldr	r3, [pc, #60]	; (80003b8 <MX_RTC_Init+0x44>)
 800037a:	4a10      	ldr	r2, [pc, #64]	; (80003bc <MX_RTC_Init+0x48>)
 800037c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800037e:	4b0e      	ldr	r3, [pc, #56]	; (80003b8 <MX_RTC_Init+0x44>)
 8000380:	2200      	movs	r2, #0
 8000382:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000384:	4b0c      	ldr	r3, [pc, #48]	; (80003b8 <MX_RTC_Init+0x44>)
 8000386:	227f      	movs	r2, #127	; 0x7f
 8000388:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800038a:	4b0b      	ldr	r3, [pc, #44]	; (80003b8 <MX_RTC_Init+0x44>)
 800038c:	22ff      	movs	r2, #255	; 0xff
 800038e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000390:	4b09      	ldr	r3, [pc, #36]	; (80003b8 <MX_RTC_Init+0x44>)
 8000392:	2200      	movs	r2, #0
 8000394:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000396:	4b08      	ldr	r3, [pc, #32]	; (80003b8 <MX_RTC_Init+0x44>)
 8000398:	2200      	movs	r2, #0
 800039a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800039c:	4b06      	ldr	r3, [pc, #24]	; (80003b8 <MX_RTC_Init+0x44>)
 800039e:	2200      	movs	r2, #0
 80003a0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80003a2:	4805      	ldr	r0, [pc, #20]	; (80003b8 <MX_RTC_Init+0x44>)
 80003a4:	f003 ffec 	bl	8004380 <HAL_RTC_Init>
 80003a8:	4603      	mov	r3, r0
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d001      	beq.n	80003b2 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80003ae:	f000 f92f 	bl	8000610 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80003b2:	bf00      	nop
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	200003a4 	.word	0x200003a4
 80003bc:	40002800 	.word	0x40002800

080003c0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80003c4:	4b14      	ldr	r3, [pc, #80]	; (8000418 <MX_UART4_Init+0x58>)
 80003c6:	4a15      	ldr	r2, [pc, #84]	; (800041c <MX_UART4_Init+0x5c>)
 80003c8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80003ca:	4b13      	ldr	r3, [pc, #76]	; (8000418 <MX_UART4_Init+0x58>)
 80003cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80003d0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80003d2:	4b11      	ldr	r3, [pc, #68]	; (8000418 <MX_UART4_Init+0x58>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80003d8:	4b0f      	ldr	r3, [pc, #60]	; (8000418 <MX_UART4_Init+0x58>)
 80003da:	2200      	movs	r2, #0
 80003dc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80003de:	4b0e      	ldr	r3, [pc, #56]	; (8000418 <MX_UART4_Init+0x58>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80003e4:	4b0c      	ldr	r3, [pc, #48]	; (8000418 <MX_UART4_Init+0x58>)
 80003e6:	220c      	movs	r2, #12
 80003e8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003ea:	4b0b      	ldr	r3, [pc, #44]	; (8000418 <MX_UART4_Init+0x58>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80003f0:	4b09      	ldr	r3, [pc, #36]	; (8000418 <MX_UART4_Init+0x58>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003f6:	4b08      	ldr	r3, [pc, #32]	; (8000418 <MX_UART4_Init+0x58>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80003fc:	4b06      	ldr	r3, [pc, #24]	; (8000418 <MX_UART4_Init+0x58>)
 80003fe:	2200      	movs	r2, #0
 8000400:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000402:	4805      	ldr	r0, [pc, #20]	; (8000418 <MX_UART4_Init+0x58>)
 8000404:	f004 f8a1 	bl	800454a <HAL_UART_Init>
 8000408:	4603      	mov	r3, r0
 800040a:	2b00      	cmp	r3, #0
 800040c:	d001      	beq.n	8000412 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 800040e:	f000 f8ff 	bl	8000610 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000412:	bf00      	nop
 8000414:	bd80      	pop	{r7, pc}
 8000416:	bf00      	nop
 8000418:	200003c8 	.word	0x200003c8
 800041c:	40004c00 	.word	0x40004c00

08000420 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000424:	4b14      	ldr	r3, [pc, #80]	; (8000478 <MX_USART3_UART_Init+0x58>)
 8000426:	4a15      	ldr	r2, [pc, #84]	; (800047c <MX_USART3_UART_Init+0x5c>)
 8000428:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 800042a:	4b13      	ldr	r3, [pc, #76]	; (8000478 <MX_USART3_UART_Init+0x58>)
 800042c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000430:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000432:	4b11      	ldr	r3, [pc, #68]	; (8000478 <MX_USART3_UART_Init+0x58>)
 8000434:	2200      	movs	r2, #0
 8000436:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000438:	4b0f      	ldr	r3, [pc, #60]	; (8000478 <MX_USART3_UART_Init+0x58>)
 800043a:	2200      	movs	r2, #0
 800043c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800043e:	4b0e      	ldr	r3, [pc, #56]	; (8000478 <MX_USART3_UART_Init+0x58>)
 8000440:	2200      	movs	r2, #0
 8000442:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000444:	4b0c      	ldr	r3, [pc, #48]	; (8000478 <MX_USART3_UART_Init+0x58>)
 8000446:	220c      	movs	r2, #12
 8000448:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800044a:	4b0b      	ldr	r3, [pc, #44]	; (8000478 <MX_USART3_UART_Init+0x58>)
 800044c:	2200      	movs	r2, #0
 800044e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000450:	4b09      	ldr	r3, [pc, #36]	; (8000478 <MX_USART3_UART_Init+0x58>)
 8000452:	2200      	movs	r2, #0
 8000454:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000456:	4b08      	ldr	r3, [pc, #32]	; (8000478 <MX_USART3_UART_Init+0x58>)
 8000458:	2200      	movs	r2, #0
 800045a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800045c:	4b06      	ldr	r3, [pc, #24]	; (8000478 <MX_USART3_UART_Init+0x58>)
 800045e:	2200      	movs	r2, #0
 8000460:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000462:	4805      	ldr	r0, [pc, #20]	; (8000478 <MX_USART3_UART_Init+0x58>)
 8000464:	f004 f871 	bl	800454a <HAL_UART_Init>
 8000468:	4603      	mov	r3, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d001      	beq.n	8000472 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800046e:	f000 f8cf 	bl	8000610 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000472:	bf00      	nop
 8000474:	bd80      	pop	{r7, pc}
 8000476:	bf00      	nop
 8000478:	20000250 	.word	0x20000250
 800047c:	40004800 	.word	0x40004800

08000480 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000484:	4b0f      	ldr	r3, [pc, #60]	; (80004c4 <MX_USB_PCD_Init+0x44>)
 8000486:	4a10      	ldr	r2, [pc, #64]	; (80004c8 <MX_USB_PCD_Init+0x48>)
 8000488:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800048a:	4b0e      	ldr	r3, [pc, #56]	; (80004c4 <MX_USB_PCD_Init+0x44>)
 800048c:	2208      	movs	r2, #8
 800048e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000490:	4b0c      	ldr	r3, [pc, #48]	; (80004c4 <MX_USB_PCD_Init+0x44>)
 8000492:	2202      	movs	r2, #2
 8000494:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000496:	4b0b      	ldr	r3, [pc, #44]	; (80004c4 <MX_USB_PCD_Init+0x44>)
 8000498:	2202      	movs	r2, #2
 800049a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800049c:	4b09      	ldr	r3, [pc, #36]	; (80004c4 <MX_USB_PCD_Init+0x44>)
 800049e:	2200      	movs	r2, #0
 80004a0:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80004a2:	4b08      	ldr	r3, [pc, #32]	; (80004c4 <MX_USB_PCD_Init+0x44>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80004a8:	4b06      	ldr	r3, [pc, #24]	; (80004c4 <MX_USB_PCD_Init+0x44>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80004ae:	4805      	ldr	r0, [pc, #20]	; (80004c4 <MX_USB_PCD_Init+0x44>)
 80004b0:	f001 fb23 	bl	8001afa <HAL_PCD_Init>
 80004b4:	4603      	mov	r3, r0
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <MX_USB_PCD_Init+0x3e>
  {
    Error_Handler();
 80004ba:	f000 f8a9 	bl	8000610 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80004be:	bf00      	nop
 80004c0:	bd80      	pop	{r7, pc}
 80004c2:	bf00      	nop
 80004c4:	2000044c 	.word	0x2000044c
 80004c8:	40005c00 	.word	0x40005c00

080004cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b08c      	sub	sp, #48	; 0x30
 80004d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d2:	f107 031c 	add.w	r3, r7, #28
 80004d6:	2200      	movs	r2, #0
 80004d8:	601a      	str	r2, [r3, #0]
 80004da:	605a      	str	r2, [r3, #4]
 80004dc:	609a      	str	r2, [r3, #8]
 80004de:	60da      	str	r2, [r3, #12]
 80004e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004e2:	4b46      	ldr	r3, [pc, #280]	; (80005fc <MX_GPIO_Init+0x130>)
 80004e4:	695b      	ldr	r3, [r3, #20]
 80004e6:	4a45      	ldr	r2, [pc, #276]	; (80005fc <MX_GPIO_Init+0x130>)
 80004e8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80004ec:	6153      	str	r3, [r2, #20]
 80004ee:	4b43      	ldr	r3, [pc, #268]	; (80005fc <MX_GPIO_Init+0x130>)
 80004f0:	695b      	ldr	r3, [r3, #20]
 80004f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80004f6:	61bb      	str	r3, [r7, #24]
 80004f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004fa:	4b40      	ldr	r3, [pc, #256]	; (80005fc <MX_GPIO_Init+0x130>)
 80004fc:	695b      	ldr	r3, [r3, #20]
 80004fe:	4a3f      	ldr	r2, [pc, #252]	; (80005fc <MX_GPIO_Init+0x130>)
 8000500:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000504:	6153      	str	r3, [r2, #20]
 8000506:	4b3d      	ldr	r3, [pc, #244]	; (80005fc <MX_GPIO_Init+0x130>)
 8000508:	695b      	ldr	r3, [r3, #20]
 800050a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800050e:	617b      	str	r3, [r7, #20]
 8000510:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000512:	4b3a      	ldr	r3, [pc, #232]	; (80005fc <MX_GPIO_Init+0x130>)
 8000514:	695b      	ldr	r3, [r3, #20]
 8000516:	4a39      	ldr	r2, [pc, #228]	; (80005fc <MX_GPIO_Init+0x130>)
 8000518:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800051c:	6153      	str	r3, [r2, #20]
 800051e:	4b37      	ldr	r3, [pc, #220]	; (80005fc <MX_GPIO_Init+0x130>)
 8000520:	695b      	ldr	r3, [r3, #20]
 8000522:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000526:	613b      	str	r3, [r7, #16]
 8000528:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800052a:	4b34      	ldr	r3, [pc, #208]	; (80005fc <MX_GPIO_Init+0x130>)
 800052c:	695b      	ldr	r3, [r3, #20]
 800052e:	4a33      	ldr	r2, [pc, #204]	; (80005fc <MX_GPIO_Init+0x130>)
 8000530:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000534:	6153      	str	r3, [r2, #20]
 8000536:	4b31      	ldr	r3, [pc, #196]	; (80005fc <MX_GPIO_Init+0x130>)
 8000538:	695b      	ldr	r3, [r3, #20]
 800053a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800053e:	60fb      	str	r3, [r7, #12]
 8000540:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000542:	4b2e      	ldr	r3, [pc, #184]	; (80005fc <MX_GPIO_Init+0x130>)
 8000544:	695b      	ldr	r3, [r3, #20]
 8000546:	4a2d      	ldr	r2, [pc, #180]	; (80005fc <MX_GPIO_Init+0x130>)
 8000548:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800054c:	6153      	str	r3, [r2, #20]
 800054e:	4b2b      	ldr	r3, [pc, #172]	; (80005fc <MX_GPIO_Init+0x130>)
 8000550:	695b      	ldr	r3, [r3, #20]
 8000552:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000556:	60bb      	str	r3, [r7, #8]
 8000558:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800055a:	4b28      	ldr	r3, [pc, #160]	; (80005fc <MX_GPIO_Init+0x130>)
 800055c:	695b      	ldr	r3, [r3, #20]
 800055e:	4a27      	ldr	r2, [pc, #156]	; (80005fc <MX_GPIO_Init+0x130>)
 8000560:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000564:	6153      	str	r3, [r2, #20]
 8000566:	4b25      	ldr	r3, [pc, #148]	; (80005fc <MX_GPIO_Init+0x130>)
 8000568:	695b      	ldr	r3, [r3, #20]
 800056a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800056e:	607b      	str	r3, [r7, #4]
 8000570:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000572:	2200      	movs	r2, #0
 8000574:	f244 0181 	movw	r1, #16513	; 0x4081
 8000578:	4821      	ldr	r0, [pc, #132]	; (8000600 <MX_GPIO_Init+0x134>)
 800057a:	f000 fdb5 	bl	80010e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800057e:	2200      	movs	r2, #0
 8000580:	2140      	movs	r1, #64	; 0x40
 8000582:	4820      	ldr	r0, [pc, #128]	; (8000604 <MX_GPIO_Init+0x138>)
 8000584:	f000 fdb0 	bl	80010e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000588:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800058c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800058e:	4b1e      	ldr	r3, [pc, #120]	; (8000608 <MX_GPIO_Init+0x13c>)
 8000590:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000592:	2300      	movs	r3, #0
 8000594:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000596:	f107 031c 	add.w	r3, r7, #28
 800059a:	4619      	mov	r1, r3
 800059c:	481b      	ldr	r0, [pc, #108]	; (800060c <MX_GPIO_Init+0x140>)
 800059e:	f000 fc19 	bl	8000dd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80005a2:	f244 0381 	movw	r3, #16513	; 0x4081
 80005a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005a8:	2301      	movs	r3, #1
 80005aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ac:	2300      	movs	r3, #0
 80005ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005b0:	2300      	movs	r3, #0
 80005b2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005b4:	f107 031c 	add.w	r3, r7, #28
 80005b8:	4619      	mov	r1, r3
 80005ba:	4811      	ldr	r0, [pc, #68]	; (8000600 <MX_GPIO_Init+0x134>)
 80005bc:	f000 fc0a 	bl	8000dd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80005c0:	2340      	movs	r3, #64	; 0x40
 80005c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005c4:	2301      	movs	r3, #1
 80005c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c8:	2300      	movs	r3, #0
 80005ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005cc:	2300      	movs	r3, #0
 80005ce:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80005d0:	f107 031c 	add.w	r3, r7, #28
 80005d4:	4619      	mov	r1, r3
 80005d6:	480b      	ldr	r0, [pc, #44]	; (8000604 <MX_GPIO_Init+0x138>)
 80005d8:	f000 fbfc 	bl	8000dd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80005dc:	2380      	movs	r3, #128	; 0x80
 80005de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005e0:	2300      	movs	r3, #0
 80005e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e4:	2300      	movs	r3, #0
 80005e6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80005e8:	f107 031c 	add.w	r3, r7, #28
 80005ec:	4619      	mov	r1, r3
 80005ee:	4805      	ldr	r0, [pc, #20]	; (8000604 <MX_GPIO_Init+0x138>)
 80005f0:	f000 fbf0 	bl	8000dd4 <HAL_GPIO_Init>

}
 80005f4:	bf00      	nop
 80005f6:	3730      	adds	r7, #48	; 0x30
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	40021000 	.word	0x40021000
 8000600:	48000400 	.word	0x48000400
 8000604:	48001800 	.word	0x48001800
 8000608:	10110000 	.word	0x10110000
 800060c:	48000800 	.word	0x48000800

08000610 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000614:	b672      	cpsid	i
}
 8000616:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000618:	e7fe      	b.n	8000618 <Error_Handler+0x8>
	...

0800061c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800061c:	b480      	push	{r7}
 800061e:	b083      	sub	sp, #12
 8000620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000622:	4b0f      	ldr	r3, [pc, #60]	; (8000660 <HAL_MspInit+0x44>)
 8000624:	699b      	ldr	r3, [r3, #24]
 8000626:	4a0e      	ldr	r2, [pc, #56]	; (8000660 <HAL_MspInit+0x44>)
 8000628:	f043 0301 	orr.w	r3, r3, #1
 800062c:	6193      	str	r3, [r2, #24]
 800062e:	4b0c      	ldr	r3, [pc, #48]	; (8000660 <HAL_MspInit+0x44>)
 8000630:	699b      	ldr	r3, [r3, #24]
 8000632:	f003 0301 	and.w	r3, r3, #1
 8000636:	607b      	str	r3, [r7, #4]
 8000638:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800063a:	4b09      	ldr	r3, [pc, #36]	; (8000660 <HAL_MspInit+0x44>)
 800063c:	69db      	ldr	r3, [r3, #28]
 800063e:	4a08      	ldr	r2, [pc, #32]	; (8000660 <HAL_MspInit+0x44>)
 8000640:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000644:	61d3      	str	r3, [r2, #28]
 8000646:	4b06      	ldr	r3, [pc, #24]	; (8000660 <HAL_MspInit+0x44>)
 8000648:	69db      	ldr	r3, [r3, #28]
 800064a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800064e:	603b      	str	r3, [r7, #0]
 8000650:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000652:	bf00      	nop
 8000654:	370c      	adds	r7, #12
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop
 8000660:	40021000 	.word	0x40021000

08000664 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b08a      	sub	sp, #40	; 0x28
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800066c:	f107 0314 	add.w	r3, r7, #20
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	605a      	str	r2, [r3, #4]
 8000676:	609a      	str	r2, [r3, #8]
 8000678:	60da      	str	r2, [r3, #12]
 800067a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4a17      	ldr	r2, [pc, #92]	; (80006e0 <HAL_I2C_MspInit+0x7c>)
 8000682:	4293      	cmp	r3, r2
 8000684:	d128      	bne.n	80006d8 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000686:	4b17      	ldr	r3, [pc, #92]	; (80006e4 <HAL_I2C_MspInit+0x80>)
 8000688:	695b      	ldr	r3, [r3, #20]
 800068a:	4a16      	ldr	r2, [pc, #88]	; (80006e4 <HAL_I2C_MspInit+0x80>)
 800068c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000690:	6153      	str	r3, [r2, #20]
 8000692:	4b14      	ldr	r3, [pc, #80]	; (80006e4 <HAL_I2C_MspInit+0x80>)
 8000694:	695b      	ldr	r3, [r3, #20]
 8000696:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800069a:	613b      	str	r3, [r7, #16]
 800069c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800069e:	f44f 7340 	mov.w	r3, #768	; 0x300
 80006a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006a4:	2312      	movs	r3, #18
 80006a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006a8:	2301      	movs	r3, #1
 80006aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006ac:	2303      	movs	r3, #3
 80006ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80006b0:	2304      	movs	r3, #4
 80006b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006b4:	f107 0314 	add.w	r3, r7, #20
 80006b8:	4619      	mov	r1, r3
 80006ba:	480b      	ldr	r0, [pc, #44]	; (80006e8 <HAL_I2C_MspInit+0x84>)
 80006bc:	f000 fb8a 	bl	8000dd4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80006c0:	4b08      	ldr	r3, [pc, #32]	; (80006e4 <HAL_I2C_MspInit+0x80>)
 80006c2:	69db      	ldr	r3, [r3, #28]
 80006c4:	4a07      	ldr	r2, [pc, #28]	; (80006e4 <HAL_I2C_MspInit+0x80>)
 80006c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006ca:	61d3      	str	r3, [r2, #28]
 80006cc:	4b05      	ldr	r3, [pc, #20]	; (80006e4 <HAL_I2C_MspInit+0x80>)
 80006ce:	69db      	ldr	r3, [r3, #28]
 80006d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006d4:	60fb      	str	r3, [r7, #12]
 80006d6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80006d8:	bf00      	nop
 80006da:	3728      	adds	r7, #40	; 0x28
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	40005400 	.word	0x40005400
 80006e4:	40021000 	.word	0x40021000
 80006e8:	48000400 	.word	0x48000400

080006ec <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b085      	sub	sp, #20
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	4a0d      	ldr	r2, [pc, #52]	; (8000730 <HAL_RTC_MspInit+0x44>)
 80006fa:	4293      	cmp	r3, r2
 80006fc:	d111      	bne.n	8000722 <HAL_RTC_MspInit+0x36>
 80006fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000702:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	fa93 f3a3 	rbit	r3, r3
 800070a:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800070c:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800070e:	fab3 f383 	clz	r3, r3
 8000712:	b2db      	uxtb	r3, r3
 8000714:	461a      	mov	r2, r3
 8000716:	4b07      	ldr	r3, [pc, #28]	; (8000734 <HAL_RTC_MspInit+0x48>)
 8000718:	4413      	add	r3, r2
 800071a:	009b      	lsls	r3, r3, #2
 800071c:	461a      	mov	r2, r3
 800071e:	2301      	movs	r3, #1
 8000720:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000722:	bf00      	nop
 8000724:	3714      	adds	r7, #20
 8000726:	46bd      	mov	sp, r7
 8000728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072c:	4770      	bx	lr
 800072e:	bf00      	nop
 8000730:	40002800 	.word	0x40002800
 8000734:	10908100 	.word	0x10908100

08000738 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b08c      	sub	sp, #48	; 0x30
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000740:	f107 031c 	add.w	r3, r7, #28
 8000744:	2200      	movs	r2, #0
 8000746:	601a      	str	r2, [r3, #0]
 8000748:	605a      	str	r2, [r3, #4]
 800074a:	609a      	str	r2, [r3, #8]
 800074c:	60da      	str	r2, [r3, #12]
 800074e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	4a2f      	ldr	r2, [pc, #188]	; (8000814 <HAL_UART_MspInit+0xdc>)
 8000756:	4293      	cmp	r3, r2
 8000758:	d129      	bne.n	80007ae <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800075a:	4b2f      	ldr	r3, [pc, #188]	; (8000818 <HAL_UART_MspInit+0xe0>)
 800075c:	69db      	ldr	r3, [r3, #28]
 800075e:	4a2e      	ldr	r2, [pc, #184]	; (8000818 <HAL_UART_MspInit+0xe0>)
 8000760:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000764:	61d3      	str	r3, [r2, #28]
 8000766:	4b2c      	ldr	r3, [pc, #176]	; (8000818 <HAL_UART_MspInit+0xe0>)
 8000768:	69db      	ldr	r3, [r3, #28]
 800076a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800076e:	61bb      	str	r3, [r7, #24]
 8000770:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000772:	4b29      	ldr	r3, [pc, #164]	; (8000818 <HAL_UART_MspInit+0xe0>)
 8000774:	695b      	ldr	r3, [r3, #20]
 8000776:	4a28      	ldr	r2, [pc, #160]	; (8000818 <HAL_UART_MspInit+0xe0>)
 8000778:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800077c:	6153      	str	r3, [r2, #20]
 800077e:	4b26      	ldr	r3, [pc, #152]	; (8000818 <HAL_UART_MspInit+0xe0>)
 8000780:	695b      	ldr	r3, [r3, #20]
 8000782:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000786:	617b      	str	r3, [r7, #20]
 8000788:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800078a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800078e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000790:	2302      	movs	r3, #2
 8000792:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000794:	2300      	movs	r3, #0
 8000796:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000798:	2303      	movs	r3, #3
 800079a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 800079c:	2305      	movs	r3, #5
 800079e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007a0:	f107 031c 	add.w	r3, r7, #28
 80007a4:	4619      	mov	r1, r3
 80007a6:	481d      	ldr	r0, [pc, #116]	; (800081c <HAL_UART_MspInit+0xe4>)
 80007a8:	f000 fb14 	bl	8000dd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80007ac:	e02d      	b.n	800080a <HAL_UART_MspInit+0xd2>
  else if(huart->Instance==USART3)
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	4a1b      	ldr	r2, [pc, #108]	; (8000820 <HAL_UART_MspInit+0xe8>)
 80007b4:	4293      	cmp	r3, r2
 80007b6:	d128      	bne.n	800080a <HAL_UART_MspInit+0xd2>
    __HAL_RCC_USART3_CLK_ENABLE();
 80007b8:	4b17      	ldr	r3, [pc, #92]	; (8000818 <HAL_UART_MspInit+0xe0>)
 80007ba:	69db      	ldr	r3, [r3, #28]
 80007bc:	4a16      	ldr	r2, [pc, #88]	; (8000818 <HAL_UART_MspInit+0xe0>)
 80007be:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80007c2:	61d3      	str	r3, [r2, #28]
 80007c4:	4b14      	ldr	r3, [pc, #80]	; (8000818 <HAL_UART_MspInit+0xe0>)
 80007c6:	69db      	ldr	r3, [r3, #28]
 80007c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80007cc:	613b      	str	r3, [r7, #16]
 80007ce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80007d0:	4b11      	ldr	r3, [pc, #68]	; (8000818 <HAL_UART_MspInit+0xe0>)
 80007d2:	695b      	ldr	r3, [r3, #20]
 80007d4:	4a10      	ldr	r2, [pc, #64]	; (8000818 <HAL_UART_MspInit+0xe0>)
 80007d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80007da:	6153      	str	r3, [r2, #20]
 80007dc:	4b0e      	ldr	r3, [pc, #56]	; (8000818 <HAL_UART_MspInit+0xe0>)
 80007de:	695b      	ldr	r3, [r3, #20]
 80007e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80007e4:	60fb      	str	r3, [r7, #12]
 80007e6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80007e8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80007ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ee:	2302      	movs	r3, #2
 80007f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f2:	2300      	movs	r3, #0
 80007f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007f6:	2303      	movs	r3, #3
 80007f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80007fa:	2307      	movs	r3, #7
 80007fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007fe:	f107 031c 	add.w	r3, r7, #28
 8000802:	4619      	mov	r1, r3
 8000804:	4807      	ldr	r0, [pc, #28]	; (8000824 <HAL_UART_MspInit+0xec>)
 8000806:	f000 fae5 	bl	8000dd4 <HAL_GPIO_Init>
}
 800080a:	bf00      	nop
 800080c:	3730      	adds	r7, #48	; 0x30
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	40004c00 	.word	0x40004c00
 8000818:	40021000 	.word	0x40021000
 800081c:	48000800 	.word	0x48000800
 8000820:	40004800 	.word	0x40004800
 8000824:	48000c00 	.word	0x48000c00

08000828 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b084      	sub	sp, #16
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4a0d      	ldr	r2, [pc, #52]	; (800086c <HAL_PCD_MspInit+0x44>)
 8000836:	4293      	cmp	r3, r2
 8000838:	d113      	bne.n	8000862 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800083a:	4b0d      	ldr	r3, [pc, #52]	; (8000870 <HAL_PCD_MspInit+0x48>)
 800083c:	69db      	ldr	r3, [r3, #28]
 800083e:	4a0c      	ldr	r2, [pc, #48]	; (8000870 <HAL_PCD_MspInit+0x48>)
 8000840:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000844:	61d3      	str	r3, [r2, #28]
 8000846:	4b0a      	ldr	r3, [pc, #40]	; (8000870 <HAL_PCD_MspInit+0x48>)
 8000848:	69db      	ldr	r3, [r3, #28]
 800084a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800084e:	60fb      	str	r3, [r7, #12]
 8000850:	68fb      	ldr	r3, [r7, #12]
    /* USB interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 8000852:	2200      	movs	r2, #0
 8000854:	2100      	movs	r1, #0
 8000856:	2014      	movs	r0, #20
 8000858:	f000 fa85 	bl	8000d66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 800085c:	2014      	movs	r0, #20
 800085e:	f000 fa9e 	bl	8000d9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000862:	bf00      	nop
 8000864:	3710      	adds	r7, #16
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	40005c00 	.word	0x40005c00
 8000870:	40021000 	.word	0x40021000

08000874 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000878:	e7fe      	b.n	8000878 <NMI_Handler+0x4>

0800087a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800087a:	b480      	push	{r7}
 800087c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800087e:	e7fe      	b.n	800087e <HardFault_Handler+0x4>

08000880 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000884:	e7fe      	b.n	8000884 <MemManage_Handler+0x4>

08000886 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000886:	b480      	push	{r7}
 8000888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800088a:	e7fe      	b.n	800088a <BusFault_Handler+0x4>

0800088c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000890:	e7fe      	b.n	8000890 <UsageFault_Handler+0x4>

08000892 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000892:	b480      	push	{r7}
 8000894:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000896:	bf00      	nop
 8000898:	46bd      	mov	sp, r7
 800089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089e:	4770      	bx	lr

080008a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008a4:	bf00      	nop
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr

080008ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008ae:	b480      	push	{r7}
 80008b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008b2:	bf00      	nop
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr

080008bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008c0:	f000 f932 	bl	8000b28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008c4:	bf00      	nop
 80008c6:	bd80      	pop	{r7, pc}

080008c8 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80008cc:	4802      	ldr	r0, [pc, #8]	; (80008d8 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 80008ce:	f001 f9f2 	bl	8001cb6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 80008d2:	bf00      	nop
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	2000044c 	.word	0x2000044c

080008dc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b086      	sub	sp, #24
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	60f8      	str	r0, [r7, #12]
 80008e4:	60b9      	str	r1, [r7, #8]
 80008e6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008e8:	2300      	movs	r3, #0
 80008ea:	617b      	str	r3, [r7, #20]
 80008ec:	e00a      	b.n	8000904 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80008ee:	f3af 8000 	nop.w
 80008f2:	4601      	mov	r1, r0
 80008f4:	68bb      	ldr	r3, [r7, #8]
 80008f6:	1c5a      	adds	r2, r3, #1
 80008f8:	60ba      	str	r2, [r7, #8]
 80008fa:	b2ca      	uxtb	r2, r1
 80008fc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008fe:	697b      	ldr	r3, [r7, #20]
 8000900:	3301      	adds	r3, #1
 8000902:	617b      	str	r3, [r7, #20]
 8000904:	697a      	ldr	r2, [r7, #20]
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	429a      	cmp	r2, r3
 800090a:	dbf0      	blt.n	80008ee <_read+0x12>
	}

return len;
 800090c:	687b      	ldr	r3, [r7, #4]
}
 800090e:	4618      	mov	r0, r3
 8000910:	3718      	adds	r7, #24
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}

08000916 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000916:	b580      	push	{r7, lr}
 8000918:	b086      	sub	sp, #24
 800091a:	af00      	add	r7, sp, #0
 800091c:	60f8      	str	r0, [r7, #12]
 800091e:	60b9      	str	r1, [r7, #8]
 8000920:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000922:	2300      	movs	r3, #0
 8000924:	617b      	str	r3, [r7, #20]
 8000926:	e009      	b.n	800093c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000928:	68bb      	ldr	r3, [r7, #8]
 800092a:	1c5a      	adds	r2, r3, #1
 800092c:	60ba      	str	r2, [r7, #8]
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	4618      	mov	r0, r3
 8000932:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000936:	697b      	ldr	r3, [r7, #20]
 8000938:	3301      	adds	r3, #1
 800093a:	617b      	str	r3, [r7, #20]
 800093c:	697a      	ldr	r2, [r7, #20]
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	429a      	cmp	r2, r3
 8000942:	dbf1      	blt.n	8000928 <_write+0x12>
	}
	return len;
 8000944:	687b      	ldr	r3, [r7, #4]
}
 8000946:	4618      	mov	r0, r3
 8000948:	3718      	adds	r7, #24
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}

0800094e <_close>:

int _close(int file)
{
 800094e:	b480      	push	{r7}
 8000950:	b083      	sub	sp, #12
 8000952:	af00      	add	r7, sp, #0
 8000954:	6078      	str	r0, [r7, #4]
	return -1;
 8000956:	f04f 33ff 	mov.w	r3, #4294967295
}
 800095a:	4618      	mov	r0, r3
 800095c:	370c      	adds	r7, #12
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr

08000966 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000966:	b480      	push	{r7}
 8000968:	b083      	sub	sp, #12
 800096a:	af00      	add	r7, sp, #0
 800096c:	6078      	str	r0, [r7, #4]
 800096e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000976:	605a      	str	r2, [r3, #4]
	return 0;
 8000978:	2300      	movs	r3, #0
}
 800097a:	4618      	mov	r0, r3
 800097c:	370c      	adds	r7, #12
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr

08000986 <_isatty>:

int _isatty(int file)
{
 8000986:	b480      	push	{r7}
 8000988:	b083      	sub	sp, #12
 800098a:	af00      	add	r7, sp, #0
 800098c:	6078      	str	r0, [r7, #4]
	return 1;
 800098e:	2301      	movs	r3, #1
}
 8000990:	4618      	mov	r0, r3
 8000992:	370c      	adds	r7, #12
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr

0800099c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800099c:	b480      	push	{r7}
 800099e:	b085      	sub	sp, #20
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	60f8      	str	r0, [r7, #12]
 80009a4:	60b9      	str	r1, [r7, #8]
 80009a6:	607a      	str	r2, [r7, #4]
	return 0;
 80009a8:	2300      	movs	r3, #0
}
 80009aa:	4618      	mov	r0, r3
 80009ac:	3714      	adds	r7, #20
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr
	...

080009b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b086      	sub	sp, #24
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009c0:	4a14      	ldr	r2, [pc, #80]	; (8000a14 <_sbrk+0x5c>)
 80009c2:	4b15      	ldr	r3, [pc, #84]	; (8000a18 <_sbrk+0x60>)
 80009c4:	1ad3      	subs	r3, r2, r3
 80009c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009c8:	697b      	ldr	r3, [r7, #20]
 80009ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009cc:	4b13      	ldr	r3, [pc, #76]	; (8000a1c <_sbrk+0x64>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d102      	bne.n	80009da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009d4:	4b11      	ldr	r3, [pc, #68]	; (8000a1c <_sbrk+0x64>)
 80009d6:	4a12      	ldr	r2, [pc, #72]	; (8000a20 <_sbrk+0x68>)
 80009d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009da:	4b10      	ldr	r3, [pc, #64]	; (8000a1c <_sbrk+0x64>)
 80009dc:	681a      	ldr	r2, [r3, #0]
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	4413      	add	r3, r2
 80009e2:	693a      	ldr	r2, [r7, #16]
 80009e4:	429a      	cmp	r2, r3
 80009e6:	d207      	bcs.n	80009f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009e8:	f005 ff08 	bl	80067fc <__errno>
 80009ec:	4603      	mov	r3, r0
 80009ee:	220c      	movs	r2, #12
 80009f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009f2:	f04f 33ff 	mov.w	r3, #4294967295
 80009f6:	e009      	b.n	8000a0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009f8:	4b08      	ldr	r3, [pc, #32]	; (8000a1c <_sbrk+0x64>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009fe:	4b07      	ldr	r3, [pc, #28]	; (8000a1c <_sbrk+0x64>)
 8000a00:	681a      	ldr	r2, [r3, #0]
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	4413      	add	r3, r2
 8000a06:	4a05      	ldr	r2, [pc, #20]	; (8000a1c <_sbrk+0x64>)
 8000a08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a0a:	68fb      	ldr	r3, [r7, #12]
}
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	3718      	adds	r7, #24
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	20010000 	.word	0x20010000
 8000a18:	00000400 	.word	0x00000400
 8000a1c:	20000244 	.word	0x20000244
 8000a20:	20000760 	.word	0x20000760

08000a24 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a28:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <SystemInit+0x20>)
 8000a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a2e:	4a05      	ldr	r2, [pc, #20]	; (8000a44 <SystemInit+0x20>)
 8000a30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a38:	bf00      	nop
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	e000ed00 	.word	0xe000ed00

08000a48 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a80 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a4c:	480d      	ldr	r0, [pc, #52]	; (8000a84 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a4e:	490e      	ldr	r1, [pc, #56]	; (8000a88 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a50:	4a0e      	ldr	r2, [pc, #56]	; (8000a8c <LoopForever+0xe>)
  movs r3, #0
 8000a52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a54:	e002      	b.n	8000a5c <LoopCopyDataInit>

08000a56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a5a:	3304      	adds	r3, #4

08000a5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a60:	d3f9      	bcc.n	8000a56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a62:	4a0b      	ldr	r2, [pc, #44]	; (8000a90 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a64:	4c0b      	ldr	r4, [pc, #44]	; (8000a94 <LoopForever+0x16>)
  movs r3, #0
 8000a66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a68:	e001      	b.n	8000a6e <LoopFillZerobss>

08000a6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a6c:	3204      	adds	r2, #4

08000a6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a70:	d3fb      	bcc.n	8000a6a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a72:	f7ff ffd7 	bl	8000a24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a76:	f005 fec7 	bl	8006808 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a7a:	f7ff fbb3 	bl	80001e4 <main>

08000a7e <LoopForever>:

LoopForever:
    b LoopForever
 8000a7e:	e7fe      	b.n	8000a7e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a80:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000a84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a88:	20000228 	.word	0x20000228
  ldr r2, =_sidata
 8000a8c:	08007410 	.word	0x08007410
  ldr r2, =_sbss
 8000a90:	20000228 	.word	0x20000228
  ldr r4, =_ebss
 8000a94:	20000760 	.word	0x20000760

08000a98 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a98:	e7fe      	b.n	8000a98 <ADC1_2_IRQHandler>
	...

08000a9c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000aa0:	4b08      	ldr	r3, [pc, #32]	; (8000ac4 <HAL_Init+0x28>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a07      	ldr	r2, [pc, #28]	; (8000ac4 <HAL_Init+0x28>)
 8000aa6:	f043 0310 	orr.w	r3, r3, #16
 8000aaa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aac:	2003      	movs	r0, #3
 8000aae:	f000 f94f 	bl	8000d50 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ab2:	2000      	movs	r0, #0
 8000ab4:	f000 f808 	bl	8000ac8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ab8:	f7ff fdb0 	bl	800061c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000abc:	2300      	movs	r3, #0
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	40022000 	.word	0x40022000

08000ac8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ad0:	4b12      	ldr	r3, [pc, #72]	; (8000b1c <HAL_InitTick+0x54>)
 8000ad2:	681a      	ldr	r2, [r3, #0]
 8000ad4:	4b12      	ldr	r3, [pc, #72]	; (8000b20 <HAL_InitTick+0x58>)
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	4619      	mov	r1, r3
 8000ada:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ade:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ae2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f000 f967 	bl	8000dba <HAL_SYSTICK_Config>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000af2:	2301      	movs	r3, #1
 8000af4:	e00e      	b.n	8000b14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	2b0f      	cmp	r3, #15
 8000afa:	d80a      	bhi.n	8000b12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000afc:	2200      	movs	r2, #0
 8000afe:	6879      	ldr	r1, [r7, #4]
 8000b00:	f04f 30ff 	mov.w	r0, #4294967295
 8000b04:	f000 f92f 	bl	8000d66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b08:	4a06      	ldr	r2, [pc, #24]	; (8000b24 <HAL_InitTick+0x5c>)
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	e000      	b.n	8000b14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b12:	2301      	movs	r3, #1
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	3708      	adds	r7, #8
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	20000000 	.word	0x20000000
 8000b20:	20000008 	.word	0x20000008
 8000b24:	20000004 	.word	0x20000004

08000b28 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b2c:	4b06      	ldr	r3, [pc, #24]	; (8000b48 <HAL_IncTick+0x20>)
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	461a      	mov	r2, r3
 8000b32:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <HAL_IncTick+0x24>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4413      	add	r3, r2
 8000b38:	4a04      	ldr	r2, [pc, #16]	; (8000b4c <HAL_IncTick+0x24>)
 8000b3a:	6013      	str	r3, [r2, #0]
}
 8000b3c:	bf00      	nop
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	20000008 	.word	0x20000008
 8000b4c:	20000738 	.word	0x20000738

08000b50 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  return uwTick;  
 8000b54:	4b03      	ldr	r3, [pc, #12]	; (8000b64 <HAL_GetTick+0x14>)
 8000b56:	681b      	ldr	r3, [r3, #0]
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	20000738 	.word	0x20000738

08000b68 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b084      	sub	sp, #16
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b70:	f7ff ffee 	bl	8000b50 <HAL_GetTick>
 8000b74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b80:	d005      	beq.n	8000b8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b82:	4b0a      	ldr	r3, [pc, #40]	; (8000bac <HAL_Delay+0x44>)
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	461a      	mov	r2, r3
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	4413      	add	r3, r2
 8000b8c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000b8e:	bf00      	nop
 8000b90:	f7ff ffde 	bl	8000b50 <HAL_GetTick>
 8000b94:	4602      	mov	r2, r0
 8000b96:	68bb      	ldr	r3, [r7, #8]
 8000b98:	1ad3      	subs	r3, r2, r3
 8000b9a:	68fa      	ldr	r2, [r7, #12]
 8000b9c:	429a      	cmp	r2, r3
 8000b9e:	d8f7      	bhi.n	8000b90 <HAL_Delay+0x28>
  {
  }
}
 8000ba0:	bf00      	nop
 8000ba2:	bf00      	nop
 8000ba4:	3710      	adds	r7, #16
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	20000008 	.word	0x20000008

08000bb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b085      	sub	sp, #20
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	f003 0307 	and.w	r3, r3, #7
 8000bbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bc0:	4b0c      	ldr	r3, [pc, #48]	; (8000bf4 <__NVIC_SetPriorityGrouping+0x44>)
 8000bc2:	68db      	ldr	r3, [r3, #12]
 8000bc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bc6:	68ba      	ldr	r2, [r7, #8]
 8000bc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bcc:	4013      	ands	r3, r2
 8000bce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bd4:	68bb      	ldr	r3, [r7, #8]
 8000bd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000be0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000be2:	4a04      	ldr	r2, [pc, #16]	; (8000bf4 <__NVIC_SetPriorityGrouping+0x44>)
 8000be4:	68bb      	ldr	r3, [r7, #8]
 8000be6:	60d3      	str	r3, [r2, #12]
}
 8000be8:	bf00      	nop
 8000bea:	3714      	adds	r7, #20
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr
 8000bf4:	e000ed00 	.word	0xe000ed00

08000bf8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bfc:	4b04      	ldr	r3, [pc, #16]	; (8000c10 <__NVIC_GetPriorityGrouping+0x18>)
 8000bfe:	68db      	ldr	r3, [r3, #12]
 8000c00:	0a1b      	lsrs	r3, r3, #8
 8000c02:	f003 0307 	and.w	r3, r3, #7
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr
 8000c10:	e000ed00 	.word	0xe000ed00

08000c14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b083      	sub	sp, #12
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	db0b      	blt.n	8000c3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c26:	79fb      	ldrb	r3, [r7, #7]
 8000c28:	f003 021f 	and.w	r2, r3, #31
 8000c2c:	4907      	ldr	r1, [pc, #28]	; (8000c4c <__NVIC_EnableIRQ+0x38>)
 8000c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c32:	095b      	lsrs	r3, r3, #5
 8000c34:	2001      	movs	r0, #1
 8000c36:	fa00 f202 	lsl.w	r2, r0, r2
 8000c3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c3e:	bf00      	nop
 8000c40:	370c      	adds	r7, #12
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	e000e100 	.word	0xe000e100

08000c50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	4603      	mov	r3, r0
 8000c58:	6039      	str	r1, [r7, #0]
 8000c5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	db0a      	blt.n	8000c7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	b2da      	uxtb	r2, r3
 8000c68:	490c      	ldr	r1, [pc, #48]	; (8000c9c <__NVIC_SetPriority+0x4c>)
 8000c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6e:	0112      	lsls	r2, r2, #4
 8000c70:	b2d2      	uxtb	r2, r2
 8000c72:	440b      	add	r3, r1
 8000c74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c78:	e00a      	b.n	8000c90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	b2da      	uxtb	r2, r3
 8000c7e:	4908      	ldr	r1, [pc, #32]	; (8000ca0 <__NVIC_SetPriority+0x50>)
 8000c80:	79fb      	ldrb	r3, [r7, #7]
 8000c82:	f003 030f 	and.w	r3, r3, #15
 8000c86:	3b04      	subs	r3, #4
 8000c88:	0112      	lsls	r2, r2, #4
 8000c8a:	b2d2      	uxtb	r2, r2
 8000c8c:	440b      	add	r3, r1
 8000c8e:	761a      	strb	r2, [r3, #24]
}
 8000c90:	bf00      	nop
 8000c92:	370c      	adds	r7, #12
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr
 8000c9c:	e000e100 	.word	0xe000e100
 8000ca0:	e000ed00 	.word	0xe000ed00

08000ca4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b089      	sub	sp, #36	; 0x24
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	60f8      	str	r0, [r7, #12]
 8000cac:	60b9      	str	r1, [r7, #8]
 8000cae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	f003 0307 	and.w	r3, r3, #7
 8000cb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cb8:	69fb      	ldr	r3, [r7, #28]
 8000cba:	f1c3 0307 	rsb	r3, r3, #7
 8000cbe:	2b04      	cmp	r3, #4
 8000cc0:	bf28      	it	cs
 8000cc2:	2304      	movcs	r3, #4
 8000cc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cc6:	69fb      	ldr	r3, [r7, #28]
 8000cc8:	3304      	adds	r3, #4
 8000cca:	2b06      	cmp	r3, #6
 8000ccc:	d902      	bls.n	8000cd4 <NVIC_EncodePriority+0x30>
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	3b03      	subs	r3, #3
 8000cd2:	e000      	b.n	8000cd6 <NVIC_EncodePriority+0x32>
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cd8:	f04f 32ff 	mov.w	r2, #4294967295
 8000cdc:	69bb      	ldr	r3, [r7, #24]
 8000cde:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce2:	43da      	mvns	r2, r3
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	401a      	ands	r2, r3
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cec:	f04f 31ff 	mov.w	r1, #4294967295
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf6:	43d9      	mvns	r1, r3
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cfc:	4313      	orrs	r3, r2
         );
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3724      	adds	r7, #36	; 0x24
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
	...

08000d0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	3b01      	subs	r3, #1
 8000d18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d1c:	d301      	bcc.n	8000d22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d1e:	2301      	movs	r3, #1
 8000d20:	e00f      	b.n	8000d42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d22:	4a0a      	ldr	r2, [pc, #40]	; (8000d4c <SysTick_Config+0x40>)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	3b01      	subs	r3, #1
 8000d28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d2a:	210f      	movs	r1, #15
 8000d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d30:	f7ff ff8e 	bl	8000c50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d34:	4b05      	ldr	r3, [pc, #20]	; (8000d4c <SysTick_Config+0x40>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d3a:	4b04      	ldr	r3, [pc, #16]	; (8000d4c <SysTick_Config+0x40>)
 8000d3c:	2207      	movs	r2, #7
 8000d3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d40:	2300      	movs	r3, #0
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	3708      	adds	r7, #8
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	e000e010 	.word	0xe000e010

08000d50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d58:	6878      	ldr	r0, [r7, #4]
 8000d5a:	f7ff ff29 	bl	8000bb0 <__NVIC_SetPriorityGrouping>
}
 8000d5e:	bf00      	nop
 8000d60:	3708      	adds	r7, #8
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}

08000d66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d66:	b580      	push	{r7, lr}
 8000d68:	b086      	sub	sp, #24
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	60b9      	str	r1, [r7, #8]
 8000d70:	607a      	str	r2, [r7, #4]
 8000d72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d74:	2300      	movs	r3, #0
 8000d76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d78:	f7ff ff3e 	bl	8000bf8 <__NVIC_GetPriorityGrouping>
 8000d7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d7e:	687a      	ldr	r2, [r7, #4]
 8000d80:	68b9      	ldr	r1, [r7, #8]
 8000d82:	6978      	ldr	r0, [r7, #20]
 8000d84:	f7ff ff8e 	bl	8000ca4 <NVIC_EncodePriority>
 8000d88:	4602      	mov	r2, r0
 8000d8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d8e:	4611      	mov	r1, r2
 8000d90:	4618      	mov	r0, r3
 8000d92:	f7ff ff5d 	bl	8000c50 <__NVIC_SetPriority>
}
 8000d96:	bf00      	nop
 8000d98:	3718      	adds	r7, #24
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}

08000d9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d9e:	b580      	push	{r7, lr}
 8000da0:	b082      	sub	sp, #8
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	4603      	mov	r3, r0
 8000da6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000da8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dac:	4618      	mov	r0, r3
 8000dae:	f7ff ff31 	bl	8000c14 <__NVIC_EnableIRQ>
}
 8000db2:	bf00      	nop
 8000db4:	3708      	adds	r7, #8
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}

08000dba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dba:	b580      	push	{r7, lr}
 8000dbc:	b082      	sub	sp, #8
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dc2:	6878      	ldr	r0, [r7, #4]
 8000dc4:	f7ff ffa2 	bl	8000d0c <SysTick_Config>
 8000dc8:	4603      	mov	r3, r0
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	3708      	adds	r7, #8
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
	...

08000dd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b087      	sub	sp, #28
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
 8000ddc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dde:	2300      	movs	r3, #0
 8000de0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000de2:	e160      	b.n	80010a6 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	2101      	movs	r1, #1
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	fa01 f303 	lsl.w	r3, r1, r3
 8000df0:	4013      	ands	r3, r2
 8000df2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	f000 8152 	beq.w	80010a0 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	2b01      	cmp	r3, #1
 8000e02:	d00b      	beq.n	8000e1c <HAL_GPIO_Init+0x48>
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	2b02      	cmp	r3, #2
 8000e0a:	d007      	beq.n	8000e1c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e10:	2b11      	cmp	r3, #17
 8000e12:	d003      	beq.n	8000e1c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	2b12      	cmp	r3, #18
 8000e1a:	d130      	bne.n	8000e7e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	689b      	ldr	r3, [r3, #8]
 8000e20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000e22:	697b      	ldr	r3, [r7, #20]
 8000e24:	005b      	lsls	r3, r3, #1
 8000e26:	2203      	movs	r2, #3
 8000e28:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2c:	43db      	mvns	r3, r3
 8000e2e:	693a      	ldr	r2, [r7, #16]
 8000e30:	4013      	ands	r3, r2
 8000e32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	68da      	ldr	r2, [r3, #12]
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	005b      	lsls	r3, r3, #1
 8000e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e40:	693a      	ldr	r2, [r7, #16]
 8000e42:	4313      	orrs	r3, r2
 8000e44:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	693a      	ldr	r2, [r7, #16]
 8000e4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e52:	2201      	movs	r2, #1
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5a:	43db      	mvns	r3, r3
 8000e5c:	693a      	ldr	r2, [r7, #16]
 8000e5e:	4013      	ands	r3, r2
 8000e60:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	091b      	lsrs	r3, r3, #4
 8000e68:	f003 0201 	and.w	r2, r3, #1
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e72:	693a      	ldr	r2, [r7, #16]
 8000e74:	4313      	orrs	r3, r2
 8000e76:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	693a      	ldr	r2, [r7, #16]
 8000e7c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	68db      	ldr	r3, [r3, #12]
 8000e82:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	005b      	lsls	r3, r3, #1
 8000e88:	2203      	movs	r2, #3
 8000e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8e:	43db      	mvns	r3, r3
 8000e90:	693a      	ldr	r2, [r7, #16]
 8000e92:	4013      	ands	r3, r2
 8000e94:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	689a      	ldr	r2, [r3, #8]
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	005b      	lsls	r3, r3, #1
 8000e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea2:	693a      	ldr	r2, [r7, #16]
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	693a      	ldr	r2, [r7, #16]
 8000eac:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	2b02      	cmp	r3, #2
 8000eb4:	d003      	beq.n	8000ebe <HAL_GPIO_Init+0xea>
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	2b12      	cmp	r3, #18
 8000ebc:	d123      	bne.n	8000f06 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	08da      	lsrs	r2, r3, #3
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	3208      	adds	r2, #8
 8000ec6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000eca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	f003 0307 	and.w	r3, r3, #7
 8000ed2:	009b      	lsls	r3, r3, #2
 8000ed4:	220f      	movs	r2, #15
 8000ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eda:	43db      	mvns	r3, r3
 8000edc:	693a      	ldr	r2, [r7, #16]
 8000ede:	4013      	ands	r3, r2
 8000ee0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	691a      	ldr	r2, [r3, #16]
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	f003 0307 	and.w	r3, r3, #7
 8000eec:	009b      	lsls	r3, r3, #2
 8000eee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef2:	693a      	ldr	r2, [r7, #16]
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	08da      	lsrs	r2, r3, #3
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	3208      	adds	r2, #8
 8000f00:	6939      	ldr	r1, [r7, #16]
 8000f02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	005b      	lsls	r3, r3, #1
 8000f10:	2203      	movs	r2, #3
 8000f12:	fa02 f303 	lsl.w	r3, r2, r3
 8000f16:	43db      	mvns	r3, r3
 8000f18:	693a      	ldr	r2, [r7, #16]
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	f003 0203 	and.w	r2, r3, #3
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	005b      	lsls	r3, r3, #1
 8000f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2e:	693a      	ldr	r2, [r7, #16]
 8000f30:	4313      	orrs	r3, r2
 8000f32:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	693a      	ldr	r2, [r7, #16]
 8000f38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	f000 80ac 	beq.w	80010a0 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f48:	4b5e      	ldr	r3, [pc, #376]	; (80010c4 <HAL_GPIO_Init+0x2f0>)
 8000f4a:	699b      	ldr	r3, [r3, #24]
 8000f4c:	4a5d      	ldr	r2, [pc, #372]	; (80010c4 <HAL_GPIO_Init+0x2f0>)
 8000f4e:	f043 0301 	orr.w	r3, r3, #1
 8000f52:	6193      	str	r3, [r2, #24]
 8000f54:	4b5b      	ldr	r3, [pc, #364]	; (80010c4 <HAL_GPIO_Init+0x2f0>)
 8000f56:	699b      	ldr	r3, [r3, #24]
 8000f58:	f003 0301 	and.w	r3, r3, #1
 8000f5c:	60bb      	str	r3, [r7, #8]
 8000f5e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f60:	4a59      	ldr	r2, [pc, #356]	; (80010c8 <HAL_GPIO_Init+0x2f4>)
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	089b      	lsrs	r3, r3, #2
 8000f66:	3302      	adds	r3, #2
 8000f68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f6c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	f003 0303 	and.w	r3, r3, #3
 8000f74:	009b      	lsls	r3, r3, #2
 8000f76:	220f      	movs	r2, #15
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	43db      	mvns	r3, r3
 8000f7e:	693a      	ldr	r2, [r7, #16]
 8000f80:	4013      	ands	r3, r2
 8000f82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f8a:	d025      	beq.n	8000fd8 <HAL_GPIO_Init+0x204>
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	4a4f      	ldr	r2, [pc, #316]	; (80010cc <HAL_GPIO_Init+0x2f8>)
 8000f90:	4293      	cmp	r3, r2
 8000f92:	d01f      	beq.n	8000fd4 <HAL_GPIO_Init+0x200>
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	4a4e      	ldr	r2, [pc, #312]	; (80010d0 <HAL_GPIO_Init+0x2fc>)
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	d019      	beq.n	8000fd0 <HAL_GPIO_Init+0x1fc>
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	4a4d      	ldr	r2, [pc, #308]	; (80010d4 <HAL_GPIO_Init+0x300>)
 8000fa0:	4293      	cmp	r3, r2
 8000fa2:	d013      	beq.n	8000fcc <HAL_GPIO_Init+0x1f8>
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	4a4c      	ldr	r2, [pc, #304]	; (80010d8 <HAL_GPIO_Init+0x304>)
 8000fa8:	4293      	cmp	r3, r2
 8000faa:	d00d      	beq.n	8000fc8 <HAL_GPIO_Init+0x1f4>
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	4a4b      	ldr	r2, [pc, #300]	; (80010dc <HAL_GPIO_Init+0x308>)
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d007      	beq.n	8000fc4 <HAL_GPIO_Init+0x1f0>
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	4a4a      	ldr	r2, [pc, #296]	; (80010e0 <HAL_GPIO_Init+0x30c>)
 8000fb8:	4293      	cmp	r3, r2
 8000fba:	d101      	bne.n	8000fc0 <HAL_GPIO_Init+0x1ec>
 8000fbc:	2306      	movs	r3, #6
 8000fbe:	e00c      	b.n	8000fda <HAL_GPIO_Init+0x206>
 8000fc0:	2307      	movs	r3, #7
 8000fc2:	e00a      	b.n	8000fda <HAL_GPIO_Init+0x206>
 8000fc4:	2305      	movs	r3, #5
 8000fc6:	e008      	b.n	8000fda <HAL_GPIO_Init+0x206>
 8000fc8:	2304      	movs	r3, #4
 8000fca:	e006      	b.n	8000fda <HAL_GPIO_Init+0x206>
 8000fcc:	2303      	movs	r3, #3
 8000fce:	e004      	b.n	8000fda <HAL_GPIO_Init+0x206>
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	e002      	b.n	8000fda <HAL_GPIO_Init+0x206>
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	e000      	b.n	8000fda <HAL_GPIO_Init+0x206>
 8000fd8:	2300      	movs	r3, #0
 8000fda:	697a      	ldr	r2, [r7, #20]
 8000fdc:	f002 0203 	and.w	r2, r2, #3
 8000fe0:	0092      	lsls	r2, r2, #2
 8000fe2:	4093      	lsls	r3, r2
 8000fe4:	693a      	ldr	r2, [r7, #16]
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000fea:	4937      	ldr	r1, [pc, #220]	; (80010c8 <HAL_GPIO_Init+0x2f4>)
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	089b      	lsrs	r3, r3, #2
 8000ff0:	3302      	adds	r3, #2
 8000ff2:	693a      	ldr	r2, [r7, #16]
 8000ff4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ff8:	4b3a      	ldr	r3, [pc, #232]	; (80010e4 <HAL_GPIO_Init+0x310>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	43db      	mvns	r3, r3
 8001002:	693a      	ldr	r2, [r7, #16]
 8001004:	4013      	ands	r3, r2
 8001006:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001010:	2b00      	cmp	r3, #0
 8001012:	d003      	beq.n	800101c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001014:	693a      	ldr	r2, [r7, #16]
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	4313      	orrs	r3, r2
 800101a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800101c:	4a31      	ldr	r2, [pc, #196]	; (80010e4 <HAL_GPIO_Init+0x310>)
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001022:	4b30      	ldr	r3, [pc, #192]	; (80010e4 <HAL_GPIO_Init+0x310>)
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	43db      	mvns	r3, r3
 800102c:	693a      	ldr	r2, [r7, #16]
 800102e:	4013      	ands	r3, r2
 8001030:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800103a:	2b00      	cmp	r3, #0
 800103c:	d003      	beq.n	8001046 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 800103e:	693a      	ldr	r2, [r7, #16]
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	4313      	orrs	r3, r2
 8001044:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001046:	4a27      	ldr	r2, [pc, #156]	; (80010e4 <HAL_GPIO_Init+0x310>)
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800104c:	4b25      	ldr	r3, [pc, #148]	; (80010e4 <HAL_GPIO_Init+0x310>)
 800104e:	689b      	ldr	r3, [r3, #8]
 8001050:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	43db      	mvns	r3, r3
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	4013      	ands	r3, r2
 800105a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001064:	2b00      	cmp	r3, #0
 8001066:	d003      	beq.n	8001070 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001068:	693a      	ldr	r2, [r7, #16]
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	4313      	orrs	r3, r2
 800106e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001070:	4a1c      	ldr	r2, [pc, #112]	; (80010e4 <HAL_GPIO_Init+0x310>)
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001076:	4b1b      	ldr	r3, [pc, #108]	; (80010e4 <HAL_GPIO_Init+0x310>)
 8001078:	68db      	ldr	r3, [r3, #12]
 800107a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	43db      	mvns	r3, r3
 8001080:	693a      	ldr	r2, [r7, #16]
 8001082:	4013      	ands	r3, r2
 8001084:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800108e:	2b00      	cmp	r3, #0
 8001090:	d003      	beq.n	800109a <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001092:	693a      	ldr	r2, [r7, #16]
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	4313      	orrs	r3, r2
 8001098:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800109a:	4a12      	ldr	r2, [pc, #72]	; (80010e4 <HAL_GPIO_Init+0x310>)
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	3301      	adds	r3, #1
 80010a4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	fa22 f303 	lsr.w	r3, r2, r3
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	f47f ae97 	bne.w	8000de4 <HAL_GPIO_Init+0x10>
  }
}
 80010b6:	bf00      	nop
 80010b8:	bf00      	nop
 80010ba:	371c      	adds	r7, #28
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr
 80010c4:	40021000 	.word	0x40021000
 80010c8:	40010000 	.word	0x40010000
 80010cc:	48000400 	.word	0x48000400
 80010d0:	48000800 	.word	0x48000800
 80010d4:	48000c00 	.word	0x48000c00
 80010d8:	48001000 	.word	0x48001000
 80010dc:	48001400 	.word	0x48001400
 80010e0:	48001800 	.word	0x48001800
 80010e4:	40010400 	.word	0x40010400

080010e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	460b      	mov	r3, r1
 80010f2:	807b      	strh	r3, [r7, #2]
 80010f4:	4613      	mov	r3, r2
 80010f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010f8:	787b      	ldrb	r3, [r7, #1]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d003      	beq.n	8001106 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010fe:	887a      	ldrh	r2, [r7, #2]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001104:	e002      	b.n	800110c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001106:	887a      	ldrh	r2, [r7, #2]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800110c:	bf00      	nop
 800110e:	370c      	adds	r7, #12
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr

08001118 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d101      	bne.n	800112a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001126:	2301      	movs	r3, #1
 8001128:	e081      	b.n	800122e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001130:	b2db      	uxtb	r3, r3
 8001132:	2b00      	cmp	r3, #0
 8001134:	d106      	bne.n	8001144 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2200      	movs	r2, #0
 800113a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800113e:	6878      	ldr	r0, [r7, #4]
 8001140:	f7ff fa90 	bl	8000664 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2224      	movs	r2, #36	; 0x24
 8001148:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f022 0201 	bic.w	r2, r2, #1
 800115a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	685a      	ldr	r2, [r3, #4]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001168:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	689a      	ldr	r2, [r3, #8]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001178:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	68db      	ldr	r3, [r3, #12]
 800117e:	2b01      	cmp	r3, #1
 8001180:	d107      	bne.n	8001192 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	689a      	ldr	r2, [r3, #8]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800118e:	609a      	str	r2, [r3, #8]
 8001190:	e006      	b.n	80011a0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	689a      	ldr	r2, [r3, #8]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800119e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	68db      	ldr	r3, [r3, #12]
 80011a4:	2b02      	cmp	r3, #2
 80011a6:	d104      	bne.n	80011b2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80011b0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	687a      	ldr	r2, [r7, #4]
 80011ba:	6812      	ldr	r2, [r2, #0]
 80011bc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80011c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011c4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	68da      	ldr	r2, [r3, #12]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80011d4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	691a      	ldr	r2, [r3, #16]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	695b      	ldr	r3, [r3, #20]
 80011de:	ea42 0103 	orr.w	r1, r2, r3
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	699b      	ldr	r3, [r3, #24]
 80011e6:	021a      	lsls	r2, r3, #8
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	430a      	orrs	r2, r1
 80011ee:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	69d9      	ldr	r1, [r3, #28]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6a1a      	ldr	r2, [r3, #32]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	430a      	orrs	r2, r1
 80011fe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f042 0201 	orr.w	r2, r2, #1
 800120e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2200      	movs	r2, #0
 8001214:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2220      	movs	r2, #32
 800121a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2200      	movs	r2, #0
 8001222:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2200      	movs	r2, #0
 8001228:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800122c:	2300      	movs	r3, #0
}
 800122e:	4618      	mov	r0, r3
 8001230:	3708      	adds	r7, #8
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
	...

08001238 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b088      	sub	sp, #32
 800123c:	af02      	add	r7, sp, #8
 800123e:	60f8      	str	r0, [r7, #12]
 8001240:	607a      	str	r2, [r7, #4]
 8001242:	461a      	mov	r2, r3
 8001244:	460b      	mov	r3, r1
 8001246:	817b      	strh	r3, [r7, #10]
 8001248:	4613      	mov	r3, r2
 800124a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001252:	b2db      	uxtb	r3, r3
 8001254:	2b20      	cmp	r3, #32
 8001256:	f040 80da 	bne.w	800140e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001260:	2b01      	cmp	r3, #1
 8001262:	d101      	bne.n	8001268 <HAL_I2C_Master_Transmit+0x30>
 8001264:	2302      	movs	r3, #2
 8001266:	e0d3      	b.n	8001410 <HAL_I2C_Master_Transmit+0x1d8>
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	2201      	movs	r2, #1
 800126c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001270:	f7ff fc6e 	bl	8000b50 <HAL_GetTick>
 8001274:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	9300      	str	r3, [sp, #0]
 800127a:	2319      	movs	r3, #25
 800127c:	2201      	movs	r2, #1
 800127e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001282:	68f8      	ldr	r0, [r7, #12]
 8001284:	f000 f9e6 	bl	8001654 <I2C_WaitOnFlagUntilTimeout>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	e0be      	b.n	8001410 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	2221      	movs	r2, #33	; 0x21
 8001296:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	2210      	movs	r2, #16
 800129e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	2200      	movs	r2, #0
 80012a6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	687a      	ldr	r2, [r7, #4]
 80012ac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	893a      	ldrh	r2, [r7, #8]
 80012b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	2200      	movs	r2, #0
 80012b8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012be:	b29b      	uxth	r3, r3
 80012c0:	2bff      	cmp	r3, #255	; 0xff
 80012c2:	d90e      	bls.n	80012e2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	22ff      	movs	r2, #255	; 0xff
 80012c8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012ce:	b2da      	uxtb	r2, r3
 80012d0:	8979      	ldrh	r1, [r7, #10]
 80012d2:	4b51      	ldr	r3, [pc, #324]	; (8001418 <HAL_I2C_Master_Transmit+0x1e0>)
 80012d4:	9300      	str	r3, [sp, #0]
 80012d6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80012da:	68f8      	ldr	r0, [r7, #12]
 80012dc:	f000 fb48 	bl	8001970 <I2C_TransferConfig>
 80012e0:	e06c      	b.n	80013bc <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012e6:	b29a      	uxth	r2, r3
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012f0:	b2da      	uxtb	r2, r3
 80012f2:	8979      	ldrh	r1, [r7, #10]
 80012f4:	4b48      	ldr	r3, [pc, #288]	; (8001418 <HAL_I2C_Master_Transmit+0x1e0>)
 80012f6:	9300      	str	r3, [sp, #0]
 80012f8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80012fc:	68f8      	ldr	r0, [r7, #12]
 80012fe:	f000 fb37 	bl	8001970 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8001302:	e05b      	b.n	80013bc <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001304:	697a      	ldr	r2, [r7, #20]
 8001306:	6a39      	ldr	r1, [r7, #32]
 8001308:	68f8      	ldr	r0, [r7, #12]
 800130a:	f000 f9e3 	bl	80016d4 <I2C_WaitOnTXISFlagUntilTimeout>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001314:	2301      	movs	r3, #1
 8001316:	e07b      	b.n	8001410 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800131c:	781a      	ldrb	r2, [r3, #0]
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001328:	1c5a      	adds	r2, r3, #1
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001332:	b29b      	uxth	r3, r3
 8001334:	3b01      	subs	r3, #1
 8001336:	b29a      	uxth	r2, r3
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001340:	3b01      	subs	r3, #1
 8001342:	b29a      	uxth	r2, r3
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800134c:	b29b      	uxth	r3, r3
 800134e:	2b00      	cmp	r3, #0
 8001350:	d034      	beq.n	80013bc <HAL_I2C_Master_Transmit+0x184>
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001356:	2b00      	cmp	r3, #0
 8001358:	d130      	bne.n	80013bc <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	9300      	str	r3, [sp, #0]
 800135e:	6a3b      	ldr	r3, [r7, #32]
 8001360:	2200      	movs	r2, #0
 8001362:	2180      	movs	r1, #128	; 0x80
 8001364:	68f8      	ldr	r0, [r7, #12]
 8001366:	f000 f975 	bl	8001654 <I2C_WaitOnFlagUntilTimeout>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001370:	2301      	movs	r3, #1
 8001372:	e04d      	b.n	8001410 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001378:	b29b      	uxth	r3, r3
 800137a:	2bff      	cmp	r3, #255	; 0xff
 800137c:	d90e      	bls.n	800139c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	22ff      	movs	r2, #255	; 0xff
 8001382:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001388:	b2da      	uxtb	r2, r3
 800138a:	8979      	ldrh	r1, [r7, #10]
 800138c:	2300      	movs	r3, #0
 800138e:	9300      	str	r3, [sp, #0]
 8001390:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001394:	68f8      	ldr	r0, [r7, #12]
 8001396:	f000 faeb 	bl	8001970 <I2C_TransferConfig>
 800139a:	e00f      	b.n	80013bc <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013a0:	b29a      	uxth	r2, r3
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013aa:	b2da      	uxtb	r2, r3
 80013ac:	8979      	ldrh	r1, [r7, #10]
 80013ae:	2300      	movs	r3, #0
 80013b0:	9300      	str	r3, [sp, #0]
 80013b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80013b6:	68f8      	ldr	r0, [r7, #12]
 80013b8:	f000 fada 	bl	8001970 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013c0:	b29b      	uxth	r3, r3
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d19e      	bne.n	8001304 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80013c6:	697a      	ldr	r2, [r7, #20]
 80013c8:	6a39      	ldr	r1, [r7, #32]
 80013ca:	68f8      	ldr	r0, [r7, #12]
 80013cc:	f000 f9c2 	bl	8001754 <I2C_WaitOnSTOPFlagUntilTimeout>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e01a      	b.n	8001410 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	2220      	movs	r2, #32
 80013e0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	6859      	ldr	r1, [r3, #4]
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	4b0b      	ldr	r3, [pc, #44]	; (800141c <HAL_I2C_Master_Transmit+0x1e4>)
 80013ee:	400b      	ands	r3, r1
 80013f0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	2220      	movs	r2, #32
 80013f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	2200      	movs	r2, #0
 80013fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	2200      	movs	r2, #0
 8001406:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800140a:	2300      	movs	r3, #0
 800140c:	e000      	b.n	8001410 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800140e:	2302      	movs	r3, #2
  }
}
 8001410:	4618      	mov	r0, r3
 8001412:	3718      	adds	r7, #24
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	80002000 	.word	0x80002000
 800141c:	fe00e800 	.word	0xfe00e800

08001420 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b088      	sub	sp, #32
 8001424:	af02      	add	r7, sp, #8
 8001426:	60f8      	str	r0, [r7, #12]
 8001428:	607a      	str	r2, [r7, #4]
 800142a:	461a      	mov	r2, r3
 800142c:	460b      	mov	r3, r1
 800142e:	817b      	strh	r3, [r7, #10]
 8001430:	4613      	mov	r3, r2
 8001432:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800143a:	b2db      	uxtb	r3, r3
 800143c:	2b20      	cmp	r3, #32
 800143e:	f040 80db 	bne.w	80015f8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001448:	2b01      	cmp	r3, #1
 800144a:	d101      	bne.n	8001450 <HAL_I2C_Master_Receive+0x30>
 800144c:	2302      	movs	r3, #2
 800144e:	e0d4      	b.n	80015fa <HAL_I2C_Master_Receive+0x1da>
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	2201      	movs	r2, #1
 8001454:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001458:	f7ff fb7a 	bl	8000b50 <HAL_GetTick>
 800145c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	9300      	str	r3, [sp, #0]
 8001462:	2319      	movs	r3, #25
 8001464:	2201      	movs	r2, #1
 8001466:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800146a:	68f8      	ldr	r0, [r7, #12]
 800146c:	f000 f8f2 	bl	8001654 <I2C_WaitOnFlagUntilTimeout>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	e0bf      	b.n	80015fa <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	2222      	movs	r2, #34	; 0x22
 800147e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	2210      	movs	r2, #16
 8001486:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	2200      	movs	r2, #0
 800148e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	687a      	ldr	r2, [r7, #4]
 8001494:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	893a      	ldrh	r2, [r7, #8]
 800149a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	2200      	movs	r2, #0
 80014a0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014a6:	b29b      	uxth	r3, r3
 80014a8:	2bff      	cmp	r3, #255	; 0xff
 80014aa:	d90e      	bls.n	80014ca <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	22ff      	movs	r2, #255	; 0xff
 80014b0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014b6:	b2da      	uxtb	r2, r3
 80014b8:	8979      	ldrh	r1, [r7, #10]
 80014ba:	4b52      	ldr	r3, [pc, #328]	; (8001604 <HAL_I2C_Master_Receive+0x1e4>)
 80014bc:	9300      	str	r3, [sp, #0]
 80014be:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80014c2:	68f8      	ldr	r0, [r7, #12]
 80014c4:	f000 fa54 	bl	8001970 <I2C_TransferConfig>
 80014c8:	e06d      	b.n	80015a6 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014ce:	b29a      	uxth	r2, r3
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014d8:	b2da      	uxtb	r2, r3
 80014da:	8979      	ldrh	r1, [r7, #10]
 80014dc:	4b49      	ldr	r3, [pc, #292]	; (8001604 <HAL_I2C_Master_Receive+0x1e4>)
 80014de:	9300      	str	r3, [sp, #0]
 80014e0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80014e4:	68f8      	ldr	r0, [r7, #12]
 80014e6:	f000 fa43 	bl	8001970 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80014ea:	e05c      	b.n	80015a6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014ec:	697a      	ldr	r2, [r7, #20]
 80014ee:	6a39      	ldr	r1, [r7, #32]
 80014f0:	68f8      	ldr	r0, [r7, #12]
 80014f2:	f000 f96b 	bl	80017cc <I2C_WaitOnRXNEFlagUntilTimeout>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80014fc:	2301      	movs	r3, #1
 80014fe:	e07c      	b.n	80015fa <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800150a:	b2d2      	uxtb	r2, r2
 800150c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001512:	1c5a      	adds	r2, r3, #1
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800151c:	3b01      	subs	r3, #1
 800151e:	b29a      	uxth	r2, r3
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001528:	b29b      	uxth	r3, r3
 800152a:	3b01      	subs	r3, #1
 800152c:	b29a      	uxth	r2, r3
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001536:	b29b      	uxth	r3, r3
 8001538:	2b00      	cmp	r3, #0
 800153a:	d034      	beq.n	80015a6 <HAL_I2C_Master_Receive+0x186>
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001540:	2b00      	cmp	r3, #0
 8001542:	d130      	bne.n	80015a6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	9300      	str	r3, [sp, #0]
 8001548:	6a3b      	ldr	r3, [r7, #32]
 800154a:	2200      	movs	r2, #0
 800154c:	2180      	movs	r1, #128	; 0x80
 800154e:	68f8      	ldr	r0, [r7, #12]
 8001550:	f000 f880 	bl	8001654 <I2C_WaitOnFlagUntilTimeout>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	e04d      	b.n	80015fa <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001562:	b29b      	uxth	r3, r3
 8001564:	2bff      	cmp	r3, #255	; 0xff
 8001566:	d90e      	bls.n	8001586 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	22ff      	movs	r2, #255	; 0xff
 800156c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001572:	b2da      	uxtb	r2, r3
 8001574:	8979      	ldrh	r1, [r7, #10]
 8001576:	2300      	movs	r3, #0
 8001578:	9300      	str	r3, [sp, #0]
 800157a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800157e:	68f8      	ldr	r0, [r7, #12]
 8001580:	f000 f9f6 	bl	8001970 <I2C_TransferConfig>
 8001584:	e00f      	b.n	80015a6 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800158a:	b29a      	uxth	r2, r3
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001594:	b2da      	uxtb	r2, r3
 8001596:	8979      	ldrh	r1, [r7, #10]
 8001598:	2300      	movs	r3, #0
 800159a:	9300      	str	r3, [sp, #0]
 800159c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80015a0:	68f8      	ldr	r0, [r7, #12]
 80015a2:	f000 f9e5 	bl	8001970 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015aa:	b29b      	uxth	r3, r3
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d19d      	bne.n	80014ec <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015b0:	697a      	ldr	r2, [r7, #20]
 80015b2:	6a39      	ldr	r1, [r7, #32]
 80015b4:	68f8      	ldr	r0, [r7, #12]
 80015b6:	f000 f8cd 	bl	8001754 <I2C_WaitOnSTOPFlagUntilTimeout>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80015c0:	2301      	movs	r3, #1
 80015c2:	e01a      	b.n	80015fa <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	2220      	movs	r2, #32
 80015ca:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	6859      	ldr	r1, [r3, #4]
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	4b0c      	ldr	r3, [pc, #48]	; (8001608 <HAL_I2C_Master_Receive+0x1e8>)
 80015d8:	400b      	ands	r3, r1
 80015da:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	2220      	movs	r2, #32
 80015e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	2200      	movs	r2, #0
 80015e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	2200      	movs	r2, #0
 80015f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80015f4:	2300      	movs	r3, #0
 80015f6:	e000      	b.n	80015fa <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80015f8:	2302      	movs	r3, #2
  }
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3718      	adds	r7, #24
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	80002400 	.word	0x80002400
 8001608:	fe00e800 	.word	0xfe00e800

0800160c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	699b      	ldr	r3, [r3, #24]
 800161a:	f003 0302 	and.w	r3, r3, #2
 800161e:	2b02      	cmp	r3, #2
 8001620:	d103      	bne.n	800162a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	2200      	movs	r2, #0
 8001628:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	699b      	ldr	r3, [r3, #24]
 8001630:	f003 0301 	and.w	r3, r3, #1
 8001634:	2b01      	cmp	r3, #1
 8001636:	d007      	beq.n	8001648 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	699a      	ldr	r2, [r3, #24]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f042 0201 	orr.w	r2, r2, #1
 8001646:	619a      	str	r2, [r3, #24]
  }
}
 8001648:	bf00      	nop
 800164a:	370c      	adds	r7, #12
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr

08001654 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0
 800165a:	60f8      	str	r0, [r7, #12]
 800165c:	60b9      	str	r1, [r7, #8]
 800165e:	603b      	str	r3, [r7, #0]
 8001660:	4613      	mov	r3, r2
 8001662:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001664:	e022      	b.n	80016ac <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800166c:	d01e      	beq.n	80016ac <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800166e:	f7ff fa6f 	bl	8000b50 <HAL_GetTick>
 8001672:	4602      	mov	r2, r0
 8001674:	69bb      	ldr	r3, [r7, #24]
 8001676:	1ad3      	subs	r3, r2, r3
 8001678:	683a      	ldr	r2, [r7, #0]
 800167a:	429a      	cmp	r2, r3
 800167c:	d302      	bcc.n	8001684 <I2C_WaitOnFlagUntilTimeout+0x30>
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d113      	bne.n	80016ac <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001688:	f043 0220 	orr.w	r2, r3, #32
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	2220      	movs	r2, #32
 8001694:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	2200      	movs	r2, #0
 800169c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	2200      	movs	r2, #0
 80016a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80016a8:	2301      	movs	r3, #1
 80016aa:	e00f      	b.n	80016cc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	699a      	ldr	r2, [r3, #24]
 80016b2:	68bb      	ldr	r3, [r7, #8]
 80016b4:	4013      	ands	r3, r2
 80016b6:	68ba      	ldr	r2, [r7, #8]
 80016b8:	429a      	cmp	r2, r3
 80016ba:	bf0c      	ite	eq
 80016bc:	2301      	moveq	r3, #1
 80016be:	2300      	movne	r3, #0
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	461a      	mov	r2, r3
 80016c4:	79fb      	ldrb	r3, [r7, #7]
 80016c6:	429a      	cmp	r2, r3
 80016c8:	d0cd      	beq.n	8001666 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80016ca:	2300      	movs	r3, #0
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3710      	adds	r7, #16
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}

080016d4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0
 80016da:	60f8      	str	r0, [r7, #12]
 80016dc:	60b9      	str	r1, [r7, #8]
 80016de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80016e0:	e02c      	b.n	800173c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80016e2:	687a      	ldr	r2, [r7, #4]
 80016e4:	68b9      	ldr	r1, [r7, #8]
 80016e6:	68f8      	ldr	r0, [r7, #12]
 80016e8:	f000 f8dc 	bl	80018a4 <I2C_IsAcknowledgeFailed>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e02a      	b.n	800174c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80016f6:	68bb      	ldr	r3, [r7, #8]
 80016f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016fc:	d01e      	beq.n	800173c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80016fe:	f7ff fa27 	bl	8000b50 <HAL_GetTick>
 8001702:	4602      	mov	r2, r0
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	1ad3      	subs	r3, r2, r3
 8001708:	68ba      	ldr	r2, [r7, #8]
 800170a:	429a      	cmp	r2, r3
 800170c:	d302      	bcc.n	8001714 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d113      	bne.n	800173c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001718:	f043 0220 	orr.w	r2, r3, #32
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	2220      	movs	r2, #32
 8001724:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	2200      	movs	r2, #0
 800172c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	2200      	movs	r2, #0
 8001734:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	e007      	b.n	800174c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	699b      	ldr	r3, [r3, #24]
 8001742:	f003 0302 	and.w	r3, r3, #2
 8001746:	2b02      	cmp	r3, #2
 8001748:	d1cb      	bne.n	80016e2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800174a:	2300      	movs	r3, #0
}
 800174c:	4618      	mov	r0, r3
 800174e:	3710      	adds	r7, #16
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}

08001754 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af00      	add	r7, sp, #0
 800175a:	60f8      	str	r0, [r7, #12]
 800175c:	60b9      	str	r1, [r7, #8]
 800175e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001760:	e028      	b.n	80017b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001762:	687a      	ldr	r2, [r7, #4]
 8001764:	68b9      	ldr	r1, [r7, #8]
 8001766:	68f8      	ldr	r0, [r7, #12]
 8001768:	f000 f89c 	bl	80018a4 <I2C_IsAcknowledgeFailed>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e026      	b.n	80017c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001776:	f7ff f9eb 	bl	8000b50 <HAL_GetTick>
 800177a:	4602      	mov	r2, r0
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	1ad3      	subs	r3, r2, r3
 8001780:	68ba      	ldr	r2, [r7, #8]
 8001782:	429a      	cmp	r2, r3
 8001784:	d302      	bcc.n	800178c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d113      	bne.n	80017b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001790:	f043 0220 	orr.w	r2, r3, #32
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	2220      	movs	r2, #32
 800179c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	2200      	movs	r2, #0
 80017a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	2200      	movs	r2, #0
 80017ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
 80017b2:	e007      	b.n	80017c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	699b      	ldr	r3, [r3, #24]
 80017ba:	f003 0320 	and.w	r3, r3, #32
 80017be:	2b20      	cmp	r3, #32
 80017c0:	d1cf      	bne.n	8001762 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80017c2:	2300      	movs	r3, #0
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3710      	adds	r7, #16
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}

080017cc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	60f8      	str	r0, [r7, #12]
 80017d4:	60b9      	str	r1, [r7, #8]
 80017d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80017d8:	e055      	b.n	8001886 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80017da:	687a      	ldr	r2, [r7, #4]
 80017dc:	68b9      	ldr	r1, [r7, #8]
 80017de:	68f8      	ldr	r0, [r7, #12]
 80017e0:	f000 f860 	bl	80018a4 <I2C_IsAcknowledgeFailed>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e053      	b.n	8001896 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	699b      	ldr	r3, [r3, #24]
 80017f4:	f003 0320 	and.w	r3, r3, #32
 80017f8:	2b20      	cmp	r3, #32
 80017fa:	d129      	bne.n	8001850 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	699b      	ldr	r3, [r3, #24]
 8001802:	f003 0304 	and.w	r3, r3, #4
 8001806:	2b04      	cmp	r3, #4
 8001808:	d105      	bne.n	8001816 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8001812:	2300      	movs	r3, #0
 8001814:	e03f      	b.n	8001896 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	2220      	movs	r2, #32
 800181c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	6859      	ldr	r1, [r3, #4]
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	4b1d      	ldr	r3, [pc, #116]	; (80018a0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 800182a:	400b      	ands	r3, r1
 800182c:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	2200      	movs	r2, #0
 8001832:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	2220      	movs	r2, #32
 8001838:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	2200      	movs	r2, #0
 8001840:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	2200      	movs	r2, #0
 8001848:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	e022      	b.n	8001896 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001850:	f7ff f97e 	bl	8000b50 <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	68ba      	ldr	r2, [r7, #8]
 800185c:	429a      	cmp	r2, r3
 800185e:	d302      	bcc.n	8001866 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d10f      	bne.n	8001886 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800186a:	f043 0220 	orr.w	r2, r3, #32
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	2220      	movs	r2, #32
 8001876:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	2200      	movs	r2, #0
 800187e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e007      	b.n	8001896 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	699b      	ldr	r3, [r3, #24]
 800188c:	f003 0304 	and.w	r3, r3, #4
 8001890:	2b04      	cmp	r3, #4
 8001892:	d1a2      	bne.n	80017da <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001894:	2300      	movs	r3, #0
}
 8001896:	4618      	mov	r0, r3
 8001898:	3710      	adds	r7, #16
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	fe00e800 	.word	0xfe00e800

080018a4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	60f8      	str	r0, [r7, #12]
 80018ac:	60b9      	str	r1, [r7, #8]
 80018ae:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	699b      	ldr	r3, [r3, #24]
 80018b6:	f003 0310 	and.w	r3, r3, #16
 80018ba:	2b10      	cmp	r3, #16
 80018bc:	d151      	bne.n	8001962 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80018be:	e022      	b.n	8001906 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018c6:	d01e      	beq.n	8001906 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018c8:	f7ff f942 	bl	8000b50 <HAL_GetTick>
 80018cc:	4602      	mov	r2, r0
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	68ba      	ldr	r2, [r7, #8]
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d302      	bcc.n	80018de <I2C_IsAcknowledgeFailed+0x3a>
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d113      	bne.n	8001906 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018e2:	f043 0220 	orr.w	r2, r3, #32
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	2220      	movs	r2, #32
 80018ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	2200      	movs	r2, #0
 80018f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	2200      	movs	r2, #0
 80018fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e02e      	b.n	8001964 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	699b      	ldr	r3, [r3, #24]
 800190c:	f003 0320 	and.w	r3, r3, #32
 8001910:	2b20      	cmp	r3, #32
 8001912:	d1d5      	bne.n	80018c0 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	2210      	movs	r2, #16
 800191a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	2220      	movs	r2, #32
 8001922:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001924:	68f8      	ldr	r0, [r7, #12]
 8001926:	f7ff fe71 	bl	800160c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	6859      	ldr	r1, [r3, #4]
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	4b0d      	ldr	r3, [pc, #52]	; (800196c <I2C_IsAcknowledgeFailed+0xc8>)
 8001936:	400b      	ands	r3, r1
 8001938:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800193e:	f043 0204 	orr.w	r2, r3, #4
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	2220      	movs	r2, #32
 800194a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	2200      	movs	r2, #0
 8001952:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	2200      	movs	r2, #0
 800195a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e000      	b.n	8001964 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8001962:	2300      	movs	r3, #0
}
 8001964:	4618      	mov	r0, r3
 8001966:	3710      	adds	r7, #16
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	fe00e800 	.word	0xfe00e800

08001970 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001970:	b480      	push	{r7}
 8001972:	b085      	sub	sp, #20
 8001974:	af00      	add	r7, sp, #0
 8001976:	60f8      	str	r0, [r7, #12]
 8001978:	607b      	str	r3, [r7, #4]
 800197a:	460b      	mov	r3, r1
 800197c:	817b      	strh	r3, [r7, #10]
 800197e:	4613      	mov	r3, r2
 8001980:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	685a      	ldr	r2, [r3, #4]
 8001988:	69bb      	ldr	r3, [r7, #24]
 800198a:	0d5b      	lsrs	r3, r3, #21
 800198c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001990:	4b0d      	ldr	r3, [pc, #52]	; (80019c8 <I2C_TransferConfig+0x58>)
 8001992:	430b      	orrs	r3, r1
 8001994:	43db      	mvns	r3, r3
 8001996:	ea02 0103 	and.w	r1, r2, r3
 800199a:	897b      	ldrh	r3, [r7, #10]
 800199c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80019a0:	7a7b      	ldrb	r3, [r7, #9]
 80019a2:	041b      	lsls	r3, r3, #16
 80019a4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80019a8:	431a      	orrs	r2, r3
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	431a      	orrs	r2, r3
 80019ae:	69bb      	ldr	r3, [r7, #24]
 80019b0:	431a      	orrs	r2, r3
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	430a      	orrs	r2, r1
 80019b8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80019ba:	bf00      	nop
 80019bc:	3714      	adds	r7, #20
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	03ff63ff 	.word	0x03ff63ff

080019cc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	2b20      	cmp	r3, #32
 80019e0:	d138      	bne.n	8001a54 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d101      	bne.n	80019f0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80019ec:	2302      	movs	r3, #2
 80019ee:	e032      	b.n	8001a56 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2201      	movs	r2, #1
 80019f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2224      	movs	r2, #36	; 0x24
 80019fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f022 0201 	bic.w	r2, r2, #1
 8001a0e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001a1e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	6819      	ldr	r1, [r3, #0]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	683a      	ldr	r2, [r7, #0]
 8001a2c:	430a      	orrs	r2, r1
 8001a2e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f042 0201 	orr.w	r2, r2, #1
 8001a3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2220      	movs	r2, #32
 8001a44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001a50:	2300      	movs	r3, #0
 8001a52:	e000      	b.n	8001a56 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001a54:	2302      	movs	r3, #2
  }
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	370c      	adds	r7, #12
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr

08001a62 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001a62:	b480      	push	{r7}
 8001a64:	b085      	sub	sp, #20
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
 8001a6a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	2b20      	cmp	r3, #32
 8001a76:	d139      	bne.n	8001aec <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d101      	bne.n	8001a86 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001a82:	2302      	movs	r3, #2
 8001a84:	e033      	b.n	8001aee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2201      	movs	r2, #1
 8001a8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2224      	movs	r2, #36	; 0x24
 8001a92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f022 0201 	bic.w	r2, r2, #1
 8001aa4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001ab4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	021b      	lsls	r3, r3, #8
 8001aba:	68fa      	ldr	r2, [r7, #12]
 8001abc:	4313      	orrs	r3, r2
 8001abe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	68fa      	ldr	r2, [r7, #12]
 8001ac6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f042 0201 	orr.w	r2, r2, #1
 8001ad6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2220      	movs	r2, #32
 8001adc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	e000      	b.n	8001aee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001aec:	2302      	movs	r3, #2
  }
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3714      	adds	r7, #20
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr

08001afa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001afa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001afc:	b08b      	sub	sp, #44	; 0x2c
 8001afe:	af06      	add	r7, sp, #24
 8001b00:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d101      	bne.n	8001b0c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e0d0      	b.n	8001cae <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d106      	bne.n	8001b26 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f7fe fe81 	bl	8000828 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2203      	movs	r2, #3
 8001b2a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4618      	mov	r0, r3
 8001b34:	f003 f929 	bl	8004d8a <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b38:	2300      	movs	r3, #0
 8001b3a:	73fb      	strb	r3, [r7, #15]
 8001b3c:	e04c      	b.n	8001bd8 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001b3e:	7bfb      	ldrb	r3, [r7, #15]
 8001b40:	6879      	ldr	r1, [r7, #4]
 8001b42:	1c5a      	adds	r2, r3, #1
 8001b44:	4613      	mov	r3, r2
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	4413      	add	r3, r2
 8001b4a:	00db      	lsls	r3, r3, #3
 8001b4c:	440b      	add	r3, r1
 8001b4e:	3301      	adds	r3, #1
 8001b50:	2201      	movs	r2, #1
 8001b52:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001b54:	7bfb      	ldrb	r3, [r7, #15]
 8001b56:	6879      	ldr	r1, [r7, #4]
 8001b58:	1c5a      	adds	r2, r3, #1
 8001b5a:	4613      	mov	r3, r2
 8001b5c:	009b      	lsls	r3, r3, #2
 8001b5e:	4413      	add	r3, r2
 8001b60:	00db      	lsls	r3, r3, #3
 8001b62:	440b      	add	r3, r1
 8001b64:	7bfa      	ldrb	r2, [r7, #15]
 8001b66:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001b68:	7bfa      	ldrb	r2, [r7, #15]
 8001b6a:	7bfb      	ldrb	r3, [r7, #15]
 8001b6c:	b298      	uxth	r0, r3
 8001b6e:	6879      	ldr	r1, [r7, #4]
 8001b70:	4613      	mov	r3, r2
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	4413      	add	r3, r2
 8001b76:	00db      	lsls	r3, r3, #3
 8001b78:	440b      	add	r3, r1
 8001b7a:	3336      	adds	r3, #54	; 0x36
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001b80:	7bfb      	ldrb	r3, [r7, #15]
 8001b82:	6879      	ldr	r1, [r7, #4]
 8001b84:	1c5a      	adds	r2, r3, #1
 8001b86:	4613      	mov	r3, r2
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	4413      	add	r3, r2
 8001b8c:	00db      	lsls	r3, r3, #3
 8001b8e:	440b      	add	r3, r1
 8001b90:	3303      	adds	r3, #3
 8001b92:	2200      	movs	r2, #0
 8001b94:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001b96:	7bfa      	ldrb	r2, [r7, #15]
 8001b98:	6879      	ldr	r1, [r7, #4]
 8001b9a:	4613      	mov	r3, r2
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	4413      	add	r3, r2
 8001ba0:	00db      	lsls	r3, r3, #3
 8001ba2:	440b      	add	r3, r1
 8001ba4:	3338      	adds	r3, #56	; 0x38
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001baa:	7bfa      	ldrb	r2, [r7, #15]
 8001bac:	6879      	ldr	r1, [r7, #4]
 8001bae:	4613      	mov	r3, r2
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	4413      	add	r3, r2
 8001bb4:	00db      	lsls	r3, r3, #3
 8001bb6:	440b      	add	r3, r1
 8001bb8:	333c      	adds	r3, #60	; 0x3c
 8001bba:	2200      	movs	r2, #0
 8001bbc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001bbe:	7bfa      	ldrb	r2, [r7, #15]
 8001bc0:	6879      	ldr	r1, [r7, #4]
 8001bc2:	4613      	mov	r3, r2
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	4413      	add	r3, r2
 8001bc8:	00db      	lsls	r3, r3, #3
 8001bca:	440b      	add	r3, r1
 8001bcc:	3340      	adds	r3, #64	; 0x40
 8001bce:	2200      	movs	r2, #0
 8001bd0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bd2:	7bfb      	ldrb	r3, [r7, #15]
 8001bd4:	3301      	adds	r3, #1
 8001bd6:	73fb      	strb	r3, [r7, #15]
 8001bd8:	7bfa      	ldrb	r2, [r7, #15]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d3ad      	bcc.n	8001b3e <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001be2:	2300      	movs	r3, #0
 8001be4:	73fb      	strb	r3, [r7, #15]
 8001be6:	e044      	b.n	8001c72 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001be8:	7bfa      	ldrb	r2, [r7, #15]
 8001bea:	6879      	ldr	r1, [r7, #4]
 8001bec:	4613      	mov	r3, r2
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	4413      	add	r3, r2
 8001bf2:	00db      	lsls	r3, r3, #3
 8001bf4:	440b      	add	r3, r1
 8001bf6:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001bfe:	7bfa      	ldrb	r2, [r7, #15]
 8001c00:	6879      	ldr	r1, [r7, #4]
 8001c02:	4613      	mov	r3, r2
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	4413      	add	r3, r2
 8001c08:	00db      	lsls	r3, r3, #3
 8001c0a:	440b      	add	r3, r1
 8001c0c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c10:	7bfa      	ldrb	r2, [r7, #15]
 8001c12:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001c14:	7bfa      	ldrb	r2, [r7, #15]
 8001c16:	6879      	ldr	r1, [r7, #4]
 8001c18:	4613      	mov	r3, r2
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	4413      	add	r3, r2
 8001c1e:	00db      	lsls	r3, r3, #3
 8001c20:	440b      	add	r3, r1
 8001c22:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001c26:	2200      	movs	r2, #0
 8001c28:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001c2a:	7bfa      	ldrb	r2, [r7, #15]
 8001c2c:	6879      	ldr	r1, [r7, #4]
 8001c2e:	4613      	mov	r3, r2
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	4413      	add	r3, r2
 8001c34:	00db      	lsls	r3, r3, #3
 8001c36:	440b      	add	r3, r1
 8001c38:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001c40:	7bfa      	ldrb	r2, [r7, #15]
 8001c42:	6879      	ldr	r1, [r7, #4]
 8001c44:	4613      	mov	r3, r2
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	4413      	add	r3, r2
 8001c4a:	00db      	lsls	r3, r3, #3
 8001c4c:	440b      	add	r3, r1
 8001c4e:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001c52:	2200      	movs	r2, #0
 8001c54:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001c56:	7bfa      	ldrb	r2, [r7, #15]
 8001c58:	6879      	ldr	r1, [r7, #4]
 8001c5a:	4613      	mov	r3, r2
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	4413      	add	r3, r2
 8001c60:	00db      	lsls	r3, r3, #3
 8001c62:	440b      	add	r3, r1
 8001c64:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001c68:	2200      	movs	r2, #0
 8001c6a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c6c:	7bfb      	ldrb	r3, [r7, #15]
 8001c6e:	3301      	adds	r3, #1
 8001c70:	73fb      	strb	r3, [r7, #15]
 8001c72:	7bfa      	ldrb	r2, [r7, #15]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d3b5      	bcc.n	8001be8 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	603b      	str	r3, [r7, #0]
 8001c82:	687e      	ldr	r6, [r7, #4]
 8001c84:	466d      	mov	r5, sp
 8001c86:	f106 0410 	add.w	r4, r6, #16
 8001c8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c8c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c8e:	6823      	ldr	r3, [r4, #0]
 8001c90:	602b      	str	r3, [r5, #0]
 8001c92:	1d33      	adds	r3, r6, #4
 8001c94:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c96:	6838      	ldr	r0, [r7, #0]
 8001c98:	f003 f892 	bl	8004dc0 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8001cac:	2300      	movs	r3, #0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3714      	adds	r7, #20
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001cb6 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001cb6:	b580      	push	{r7, lr}
 8001cb8:	b082      	sub	sp, #8
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f004 f9d1 	bl	800606a <USB_ReadInterrupts>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001cce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001cd2:	d102      	bne.n	8001cda <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f000 f954 	bl	8001f82 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f004 f9c3 	bl	800606a <USB_ReadInterrupts>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cee:	d112      	bne.n	8001d16 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001cf8:	b29a      	uxth	r2, r3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d02:	b292      	uxth	r2, r2
 8001d04:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f000 f8f7 	bl	8001efc <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001d0e:	2100      	movs	r1, #0
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	f000 f911 	bl	8001f38 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f004 f9a5 	bl	800606a <USB_ReadInterrupts>
 8001d20:	4603      	mov	r3, r0
 8001d22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d26:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001d2a:	d10b      	bne.n	8001d44 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d34:	b29a      	uxth	r2, r3
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001d3e:	b292      	uxth	r2, r2
 8001d40:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f004 f98e 	bl	800606a <USB_ReadInterrupts>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d58:	d10b      	bne.n	8001d72 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d62:	b29a      	uxth	r2, r3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001d6c:	b292      	uxth	r2, r2
 8001d6e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4618      	mov	r0, r3
 8001d78:	f004 f977 	bl	800606a <USB_ReadInterrupts>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d86:	d126      	bne.n	8001dd6 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001d90:	b29a      	uxth	r2, r3
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f022 0204 	bic.w	r2, r2, #4
 8001d9a:	b292      	uxth	r2, r2
 8001d9c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001da8:	b29a      	uxth	r2, r3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f022 0208 	bic.w	r2, r2, #8
 8001db2:	b292      	uxth	r2, r2
 8001db4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	f000 f8b3 	bl	8001f24 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001dc6:	b29a      	uxth	r2, r3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001dd0:	b292      	uxth	r2, r2
 8001dd2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f004 f945 	bl	800606a <USB_ReadInterrupts>
 8001de0:	4603      	mov	r3, r0
 8001de2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001de6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001dea:	d126      	bne.n	8001e3a <HAL_PCD_IRQHandler+0x184>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001df4:	b29a      	uxth	r2, r3
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f042 0208 	orr.w	r2, r2, #8
 8001dfe:	b292      	uxth	r2, r2
 8001e00:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e0c:	b29a      	uxth	r2, r3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e16:	b292      	uxth	r2, r2
 8001e18:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e24:	b29a      	uxth	r2, r3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f042 0204 	orr.w	r2, r2, #4
 8001e2e:	b292      	uxth	r2, r2
 8001e30:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001e34:	6878      	ldr	r0, [r7, #4]
 8001e36:	f000 f86b 	bl	8001f10 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f004 f913 	bl	800606a <USB_ReadInterrupts>
 8001e44:	4603      	mov	r3, r0
 8001e46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e4e:	d10e      	bne.n	8001e6e <HAL_PCD_IRQHandler+0x1b8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e58:	b29a      	uxth	r2, r3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001e62:	b292      	uxth	r2, r2
 8001e64:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f000 f83d 	bl	8001ee8 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4618      	mov	r0, r3
 8001e74:	f004 f8f9 	bl	800606a <USB_ReadInterrupts>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e82:	d10b      	bne.n	8001e9c <HAL_PCD_IRQHandler+0x1e6>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e8c:	b29a      	uxth	r2, r3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e96:	b292      	uxth	r2, r2
 8001e98:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001e9c:	bf00      	nop
 8001e9e:	3708      	adds	r7, #8
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}

08001ea4 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	460b      	mov	r3, r1
 8001eae:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataOutStageCallback could be implemented in the user file
   */
}
 8001eb0:	bf00      	nop
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr

08001ebc <HAL_PCD_DataInStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	460b      	mov	r3, r1
 8001ec6:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataInStageCallback could be implemented in the user file
   */
}
 8001ec8:	bf00      	nop
 8001eca:	370c      	adds	r7, #12
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr

08001ed4 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SetupStageCallback could be implemented in the user file
   */
}
 8001edc:	bf00      	nop
 8001ede:	370c      	adds	r7, #12
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr

08001ee8 <HAL_PCD_SOFCallback>:
  * @brief  USB Start Of Frame callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */
}
 8001ef0:	bf00      	nop
 8001ef2:	370c      	adds	r7, #12
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr

08001efc <HAL_PCD_ResetCallback>:
  * @brief  USB Reset callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResetCallback could be implemented in the user file
   */
}
 8001f04:	bf00      	nop
 8001f06:	370c      	adds	r7, #12
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr

08001f10 <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 8001f18:	bf00      	nop
 8001f1a:	370c      	adds	r7, #12
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr

08001f24 <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 8001f2c:	bf00      	nop
 8001f2e:	370c      	adds	r7, #12
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr

08001f38 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
 8001f40:	460b      	mov	r3, r1
 8001f42:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d101      	bne.n	8001f52 <HAL_PCD_SetAddress+0x1a>
 8001f4e:	2302      	movs	r3, #2
 8001f50:	e013      	b.n	8001f7a <HAL_PCD_SetAddress+0x42>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2201      	movs	r2, #1
 8001f56:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	78fa      	ldrb	r2, [r7, #3]
 8001f5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	78fa      	ldrb	r2, [r7, #3]
 8001f68:	4611      	mov	r1, r2
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f004 f869 	bl	8006042 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2200      	movs	r2, #0
 8001f74:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001f78:	2300      	movs	r3, #0
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3708      	adds	r7, #8
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}

08001f82 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001f82:	b580      	push	{r7, lr}
 8001f84:	b08e      	sub	sp, #56	; 0x38
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001f8a:	e2d1      	b.n	8002530 <PCD_EP_ISR_Handler+0x5ae>
  {
    wIstr = hpcd->Instance->ISTR;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f94:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001f96:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	f003 030f 	and.w	r3, r3, #15
 8001f9e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001fa2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	f040 8152 	bne.w	8002250 <PCD_EP_ISR_Handler+0x2ce>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001fac:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001fae:	f003 0310 	and.w	r3, r3, #16
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d150      	bne.n	8002058 <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	881b      	ldrh	r3, [r3, #0]
 8001fbc:	b29b      	uxth	r3, r3
 8001fbe:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001fc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fc6:	81fb      	strh	r3, [r7, #14]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	89fb      	ldrh	r3, [r7, #14]
 8001fce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001fd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001fd6:	b29b      	uxth	r3, r3
 8001fd8:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	3328      	adds	r3, #40	; 0x28
 8001fde:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fe8:	b29b      	uxth	r3, r3
 8001fea:	461a      	mov	r2, r3
 8001fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	00db      	lsls	r3, r3, #3
 8001ff2:	4413      	add	r3, r2
 8001ff4:	687a      	ldr	r2, [r7, #4]
 8001ff6:	6812      	ldr	r2, [r2, #0]
 8001ff8:	4413      	add	r3, r2
 8001ffa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001ffe:	881b      	ldrh	r3, [r3, #0]
 8002000:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002006:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200a:	695a      	ldr	r2, [r3, #20]
 800200c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200e:	69db      	ldr	r3, [r3, #28]
 8002010:	441a      	add	r2, r3
 8002012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002014:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002016:	2100      	movs	r1, #0
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f7ff ff4f 	bl	8001ebc <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002024:	b2db      	uxtb	r3, r3
 8002026:	2b00      	cmp	r3, #0
 8002028:	f000 8282 	beq.w	8002530 <PCD_EP_ISR_Handler+0x5ae>
 800202c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202e:	699b      	ldr	r3, [r3, #24]
 8002030:	2b00      	cmp	r3, #0
 8002032:	f040 827d 	bne.w	8002530 <PCD_EP_ISR_Handler+0x5ae>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800203c:	b2db      	uxtb	r3, r3
 800203e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002042:	b2da      	uxtb	r2, r3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	b292      	uxth	r2, r2
 800204a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2200      	movs	r2, #0
 8002052:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002056:	e26b      	b.n	8002530 <PCD_EP_ISR_Handler+0x5ae>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800205e:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	881b      	ldrh	r3, [r3, #0]
 8002066:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002068:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800206a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800206e:	2b00      	cmp	r3, #0
 8002070:	d032      	beq.n	80020d8 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800207a:	b29b      	uxth	r3, r3
 800207c:	461a      	mov	r2, r3
 800207e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	00db      	lsls	r3, r3, #3
 8002084:	4413      	add	r3, r2
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	6812      	ldr	r2, [r2, #0]
 800208a:	4413      	add	r3, r2
 800208c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002090:	881b      	ldrh	r3, [r3, #0]
 8002092:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002098:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6818      	ldr	r0, [r3, #0]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80020a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a6:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80020a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020aa:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80020ac:	b29b      	uxth	r3, r3
 80020ae:	f004 f82e 	bl	800610e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	881b      	ldrh	r3, [r3, #0]
 80020b8:	b29a      	uxth	r2, r3
 80020ba:	f640 738f 	movw	r3, #3983	; 0xf8f
 80020be:	4013      	ands	r3, r2
 80020c0:	823b      	strh	r3, [r7, #16]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	8a3a      	ldrh	r2, [r7, #16]
 80020c8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80020cc:	b292      	uxth	r2, r2
 80020ce:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	f7ff feff 	bl	8001ed4 <HAL_PCD_SetupStageCallback>
 80020d6:	e22b      	b.n	8002530 <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80020d8:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80020dc:	2b00      	cmp	r3, #0
 80020de:	f280 8227 	bge.w	8002530 <PCD_EP_ISR_Handler+0x5ae>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	881b      	ldrh	r3, [r3, #0]
 80020e8:	b29a      	uxth	r2, r3
 80020ea:	f640 738f 	movw	r3, #3983	; 0xf8f
 80020ee:	4013      	ands	r3, r2
 80020f0:	83bb      	strh	r3, [r7, #28]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	8bba      	ldrh	r2, [r7, #28]
 80020f8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80020fc:	b292      	uxth	r2, r2
 80020fe:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002108:	b29b      	uxth	r3, r3
 800210a:	461a      	mov	r2, r3
 800210c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	00db      	lsls	r3, r3, #3
 8002112:	4413      	add	r3, r2
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	6812      	ldr	r2, [r2, #0]
 8002118:	4413      	add	r3, r2
 800211a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800211e:	881b      	ldrh	r3, [r3, #0]
 8002120:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002126:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212a:	69db      	ldr	r3, [r3, #28]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d019      	beq.n	8002164 <PCD_EP_ISR_Handler+0x1e2>
 8002130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002132:	695b      	ldr	r3, [r3, #20]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d015      	beq.n	8002164 <PCD_EP_ISR_Handler+0x1e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6818      	ldr	r0, [r3, #0]
 800213c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213e:	6959      	ldr	r1, [r3, #20]
 8002140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002142:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002146:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002148:	b29b      	uxth	r3, r3
 800214a:	f003 ffe0 	bl	800610e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800214e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002150:	695a      	ldr	r2, [r3, #20]
 8002152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002154:	69db      	ldr	r3, [r3, #28]
 8002156:	441a      	add	r2, r3
 8002158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800215c:	2100      	movs	r1, #0
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f7ff fea0 	bl	8001ea4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	61bb      	str	r3, [r7, #24]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002172:	b29b      	uxth	r3, r3
 8002174:	461a      	mov	r2, r3
 8002176:	69bb      	ldr	r3, [r7, #24]
 8002178:	4413      	add	r3, r2
 800217a:	61bb      	str	r3, [r7, #24]
 800217c:	69bb      	ldr	r3, [r7, #24]
 800217e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002182:	617b      	str	r3, [r7, #20]
 8002184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002186:	691b      	ldr	r3, [r3, #16]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d112      	bne.n	80021b2 <PCD_EP_ISR_Handler+0x230>
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	881b      	ldrh	r3, [r3, #0]
 8002190:	b29b      	uxth	r3, r3
 8002192:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002196:	b29a      	uxth	r2, r3
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	801a      	strh	r2, [r3, #0]
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	881b      	ldrh	r3, [r3, #0]
 80021a0:	b29b      	uxth	r3, r3
 80021a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80021a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80021aa:	b29a      	uxth	r2, r3
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	801a      	strh	r2, [r3, #0]
 80021b0:	e02f      	b.n	8002212 <PCD_EP_ISR_Handler+0x290>
 80021b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b4:	691b      	ldr	r3, [r3, #16]
 80021b6:	2b3e      	cmp	r3, #62	; 0x3e
 80021b8:	d813      	bhi.n	80021e2 <PCD_EP_ISR_Handler+0x260>
 80021ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021bc:	691b      	ldr	r3, [r3, #16]
 80021be:	085b      	lsrs	r3, r3, #1
 80021c0:	633b      	str	r3, [r7, #48]	; 0x30
 80021c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c4:	691b      	ldr	r3, [r3, #16]
 80021c6:	f003 0301 	and.w	r3, r3, #1
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d002      	beq.n	80021d4 <PCD_EP_ISR_Handler+0x252>
 80021ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021d0:	3301      	adds	r3, #1
 80021d2:	633b      	str	r3, [r7, #48]	; 0x30
 80021d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021d6:	b29b      	uxth	r3, r3
 80021d8:	029b      	lsls	r3, r3, #10
 80021da:	b29a      	uxth	r2, r3
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	801a      	strh	r2, [r3, #0]
 80021e0:	e017      	b.n	8002212 <PCD_EP_ISR_Handler+0x290>
 80021e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e4:	691b      	ldr	r3, [r3, #16]
 80021e6:	095b      	lsrs	r3, r3, #5
 80021e8:	633b      	str	r3, [r7, #48]	; 0x30
 80021ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ec:	691b      	ldr	r3, [r3, #16]
 80021ee:	f003 031f 	and.w	r3, r3, #31
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d102      	bne.n	80021fc <PCD_EP_ISR_Handler+0x27a>
 80021f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021f8:	3b01      	subs	r3, #1
 80021fa:	633b      	str	r3, [r7, #48]	; 0x30
 80021fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021fe:	b29b      	uxth	r3, r3
 8002200:	029b      	lsls	r3, r3, #10
 8002202:	b29b      	uxth	r3, r3
 8002204:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002208:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800220c:	b29a      	uxth	r2, r3
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	881b      	ldrh	r3, [r3, #0]
 8002218:	b29b      	uxth	r3, r3
 800221a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800221e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002222:	827b      	strh	r3, [r7, #18]
 8002224:	8a7b      	ldrh	r3, [r7, #18]
 8002226:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800222a:	827b      	strh	r3, [r7, #18]
 800222c:	8a7b      	ldrh	r3, [r7, #18]
 800222e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002232:	827b      	strh	r3, [r7, #18]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	8a7b      	ldrh	r3, [r7, #18]
 800223a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800223e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002242:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002246:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800224a:	b29b      	uxth	r3, r3
 800224c:	8013      	strh	r3, [r2, #0]
 800224e:	e16f      	b.n	8002530 <PCD_EP_ISR_Handler+0x5ae>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	461a      	mov	r2, r3
 8002256:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	4413      	add	r3, r2
 800225e:	881b      	ldrh	r3, [r3, #0]
 8002260:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002262:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002266:	2b00      	cmp	r3, #0
 8002268:	f280 80e4 	bge.w	8002434 <PCD_EP_ISR_Handler+0x4b2>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	461a      	mov	r2, r3
 8002272:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	4413      	add	r3, r2
 800227a:	881b      	ldrh	r3, [r3, #0]
 800227c:	b29a      	uxth	r2, r3
 800227e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002282:	4013      	ands	r3, r2
 8002284:	853b      	strh	r3, [r7, #40]	; 0x28
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	461a      	mov	r2, r3
 800228c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	4413      	add	r3, r2
 8002294:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002296:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800229a:	b292      	uxth	r2, r2
 800229c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800229e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80022a2:	4613      	mov	r3, r2
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	4413      	add	r3, r2
 80022a8:	00db      	lsls	r3, r3, #3
 80022aa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	4413      	add	r3, r2
 80022b2:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80022b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b6:	7b1b      	ldrb	r3, [r3, #12]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d120      	bne.n	80022fe <PCD_EP_ISR_Handler+0x37c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022c4:	b29b      	uxth	r3, r3
 80022c6:	461a      	mov	r2, r3
 80022c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	00db      	lsls	r3, r3, #3
 80022ce:	4413      	add	r3, r2
 80022d0:	687a      	ldr	r2, [r7, #4]
 80022d2:	6812      	ldr	r2, [r2, #0]
 80022d4:	4413      	add	r3, r2
 80022d6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80022da:	881b      	ldrh	r3, [r3, #0]
 80022dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022e0:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80022e2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	f000 8083 	beq.w	80023f0 <PCD_EP_ISR_Handler+0x46e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6818      	ldr	r0, [r3, #0]
 80022ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f0:	6959      	ldr	r1, [r3, #20]
 80022f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f4:	88da      	ldrh	r2, [r3, #6]
 80022f6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80022f8:	f003 ff09 	bl	800610e <USB_ReadPMA>
 80022fc:	e078      	b.n	80023f0 <PCD_EP_ISR_Handler+0x46e>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80022fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002300:	78db      	ldrb	r3, [r3, #3]
 8002302:	2b02      	cmp	r3, #2
 8002304:	d108      	bne.n	8002318 <PCD_EP_ISR_Handler+0x396>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002306:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002308:	461a      	mov	r2, r3
 800230a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	f000 f91d 	bl	800254c <HAL_PCD_EP_DB_Receive>
 8002312:	4603      	mov	r3, r0
 8002314:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002316:	e06b      	b.n	80023f0 <PCD_EP_ISR_Handler+0x46e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	461a      	mov	r2, r3
 800231e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	4413      	add	r3, r2
 8002326:	881b      	ldrh	r3, [r3, #0]
 8002328:	b29b      	uxth	r3, r3
 800232a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800232e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002332:	847b      	strh	r3, [r7, #34]	; 0x22
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	461a      	mov	r2, r3
 800233a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	441a      	add	r2, r3
 8002342:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002344:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002348:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800234c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002350:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002354:	b29b      	uxth	r3, r3
 8002356:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	461a      	mov	r2, r3
 800235e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	4413      	add	r3, r2
 8002366:	881b      	ldrh	r3, [r3, #0]
 8002368:	b29b      	uxth	r3, r3
 800236a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d01f      	beq.n	80023b2 <PCD_EP_ISR_Handler+0x430>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800237a:	b29b      	uxth	r3, r3
 800237c:	461a      	mov	r2, r3
 800237e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	00db      	lsls	r3, r3, #3
 8002384:	4413      	add	r3, r2
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	6812      	ldr	r2, [r2, #0]
 800238a:	4413      	add	r3, r2
 800238c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002390:	881b      	ldrh	r3, [r3, #0]
 8002392:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002396:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002398:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800239a:	2b00      	cmp	r3, #0
 800239c:	d028      	beq.n	80023f0 <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6818      	ldr	r0, [r3, #0]
 80023a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a4:	6959      	ldr	r1, [r3, #20]
 80023a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a8:	891a      	ldrh	r2, [r3, #8]
 80023aa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80023ac:	f003 feaf 	bl	800610e <USB_ReadPMA>
 80023b0:	e01e      	b.n	80023f0 <PCD_EP_ISR_Handler+0x46e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	461a      	mov	r2, r3
 80023be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	00db      	lsls	r3, r3, #3
 80023c4:	4413      	add	r3, r2
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	6812      	ldr	r2, [r2, #0]
 80023ca:	4413      	add	r3, r2
 80023cc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80023d0:	881b      	ldrh	r3, [r3, #0]
 80023d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023d6:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80023d8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d008      	beq.n	80023f0 <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6818      	ldr	r0, [r3, #0]
 80023e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e4:	6959      	ldr	r1, [r3, #20]
 80023e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e8:	895a      	ldrh	r2, [r3, #10]
 80023ea:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80023ec:	f003 fe8f 	bl	800610e <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80023f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f2:	69da      	ldr	r2, [r3, #28]
 80023f4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80023f6:	441a      	add	r2, r3
 80023f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fa:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80023fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fe:	695a      	ldr	r2, [r3, #20]
 8002400:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002402:	441a      	add	r2, r3
 8002404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002406:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240a:	699b      	ldr	r3, [r3, #24]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d004      	beq.n	800241a <PCD_EP_ISR_Handler+0x498>
 8002410:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002414:	691b      	ldr	r3, [r3, #16]
 8002416:	429a      	cmp	r2, r3
 8002418:	d206      	bcs.n	8002428 <PCD_EP_ISR_Handler+0x4a6>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800241a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241c:	781b      	ldrb	r3, [r3, #0]
 800241e:	4619      	mov	r1, r3
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	f7ff fd3f 	bl	8001ea4 <HAL_PCD_DataOutStageCallback>
 8002426:	e005      	b.n	8002434 <PCD_EP_ISR_Handler+0x4b2>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800242e:	4618      	mov	r0, r3
 8002430:	f002 fce7 	bl	8004e02 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002434:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002436:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800243a:	2b00      	cmp	r3, #0
 800243c:	d078      	beq.n	8002530 <PCD_EP_ISR_Handler+0x5ae>
      {
        ep = &hpcd->IN_ep[epindex];
 800243e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002442:	1c5a      	adds	r2, r3, #1
 8002444:	4613      	mov	r3, r2
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	4413      	add	r3, r2
 800244a:	00db      	lsls	r3, r3, #3
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	4413      	add	r3, r2
 8002450:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	461a      	mov	r2, r3
 8002458:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	4413      	add	r3, r2
 8002460:	881b      	ldrh	r3, [r3, #0]
 8002462:	b29b      	uxth	r3, r3
 8002464:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002468:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800246c:	843b      	strh	r3, [r7, #32]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	461a      	mov	r2, r3
 8002474:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	441a      	add	r2, r3
 800247c:	8c3b      	ldrh	r3, [r7, #32]
 800247e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002482:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002486:	b29b      	uxth	r3, r3
 8002488:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 800248a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248c:	78db      	ldrb	r3, [r3, #3]
 800248e:	2b02      	cmp	r3, #2
 8002490:	d108      	bne.n	80024a4 <PCD_EP_ISR_Handler+0x522>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002494:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8002496:	2b02      	cmp	r3, #2
 8002498:	d144      	bne.n	8002524 <PCD_EP_ISR_Handler+0x5a2>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800249a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800249c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d13f      	bne.n	8002524 <PCD_EP_ISR_Handler+0x5a2>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024ac:	b29b      	uxth	r3, r3
 80024ae:	461a      	mov	r2, r3
 80024b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	00db      	lsls	r3, r3, #3
 80024b6:	4413      	add	r3, r2
 80024b8:	687a      	ldr	r2, [r7, #4]
 80024ba:	6812      	ldr	r2, [r2, #0]
 80024bc:	4413      	add	r3, r2
 80024be:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80024c2:	881b      	ldrh	r3, [r3, #0]
 80024c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024c8:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80024ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024cc:	699a      	ldr	r2, [r3, #24]
 80024ce:	8bfb      	ldrh	r3, [r7, #30]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d906      	bls.n	80024e2 <PCD_EP_ISR_Handler+0x560>
          {
            ep->xfer_len -= TxByteNbre;
 80024d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d6:	699a      	ldr	r2, [r3, #24]
 80024d8:	8bfb      	ldrh	r3, [r7, #30]
 80024da:	1ad2      	subs	r2, r2, r3
 80024dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024de:	619a      	str	r2, [r3, #24]
 80024e0:	e002      	b.n	80024e8 <PCD_EP_ISR_Handler+0x566>
          }
          else
          {
            ep->xfer_len = 0U;
 80024e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e4:	2200      	movs	r2, #0
 80024e6:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80024e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ea:	699b      	ldr	r3, [r3, #24]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d106      	bne.n	80024fe <PCD_EP_ISR_Handler+0x57c>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80024f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	4619      	mov	r1, r3
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f7ff fce0 	bl	8001ebc <HAL_PCD_DataInStageCallback>
 80024fc:	e018      	b.n	8002530 <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80024fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002500:	695a      	ldr	r2, [r3, #20]
 8002502:	8bfb      	ldrh	r3, [r7, #30]
 8002504:	441a      	add	r2, r3
 8002506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002508:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 800250a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250c:	69da      	ldr	r2, [r3, #28]
 800250e:	8bfb      	ldrh	r3, [r7, #30]
 8002510:	441a      	add	r2, r3
 8002512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002514:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800251c:	4618      	mov	r0, r3
 800251e:	f002 fc70 	bl	8004e02 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002522:	e005      	b.n	8002530 <PCD_EP_ISR_Handler+0x5ae>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002524:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002526:	461a      	mov	r2, r3
 8002528:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f000 f917 	bl	800275e <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002538:	b29b      	uxth	r3, r3
 800253a:	b21b      	sxth	r3, r3
 800253c:	2b00      	cmp	r3, #0
 800253e:	f6ff ad25 	blt.w	8001f8c <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002542:	2300      	movs	r3, #0
}
 8002544:	4618      	mov	r0, r3
 8002546:	3738      	adds	r7, #56	; 0x38
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}

0800254c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b088      	sub	sp, #32
 8002550:	af00      	add	r7, sp, #0
 8002552:	60f8      	str	r0, [r7, #12]
 8002554:	60b9      	str	r1, [r7, #8]
 8002556:	4613      	mov	r3, r2
 8002558:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800255a:	88fb      	ldrh	r3, [r7, #6]
 800255c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002560:	2b00      	cmp	r3, #0
 8002562:	d07c      	beq.n	800265e <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800256c:	b29b      	uxth	r3, r3
 800256e:	461a      	mov	r2, r3
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	00db      	lsls	r3, r3, #3
 8002576:	4413      	add	r3, r2
 8002578:	68fa      	ldr	r2, [r7, #12]
 800257a:	6812      	ldr	r2, [r2, #0]
 800257c:	4413      	add	r3, r2
 800257e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002582:	881b      	ldrh	r3, [r3, #0]
 8002584:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002588:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	699a      	ldr	r2, [r3, #24]
 800258e:	8b7b      	ldrh	r3, [r7, #26]
 8002590:	429a      	cmp	r2, r3
 8002592:	d306      	bcc.n	80025a2 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	699a      	ldr	r2, [r3, #24]
 8002598:	8b7b      	ldrh	r3, [r7, #26]
 800259a:	1ad2      	subs	r2, r2, r3
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	619a      	str	r2, [r3, #24]
 80025a0:	e002      	b.n	80025a8 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	2200      	movs	r2, #0
 80025a6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	699b      	ldr	r3, [r3, #24]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d123      	bne.n	80025f8 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	461a      	mov	r2, r3
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	4413      	add	r3, r2
 80025be:	881b      	ldrh	r3, [r3, #0]
 80025c0:	b29b      	uxth	r3, r3
 80025c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80025c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025ca:	833b      	strh	r3, [r7, #24]
 80025cc:	8b3b      	ldrh	r3, [r7, #24]
 80025ce:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80025d2:	833b      	strh	r3, [r7, #24]
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	461a      	mov	r2, r3
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	441a      	add	r2, r3
 80025e2:	8b3b      	ldrh	r3, [r7, #24]
 80025e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80025e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80025ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025f4:	b29b      	uxth	r3, r3
 80025f6:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80025f8:	88fb      	ldrh	r3, [r7, #6]
 80025fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d01f      	beq.n	8002642 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	461a      	mov	r2, r3
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	4413      	add	r3, r2
 8002610:	881b      	ldrh	r3, [r3, #0]
 8002612:	b29b      	uxth	r3, r3
 8002614:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002618:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800261c:	82fb      	strh	r3, [r7, #22]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	461a      	mov	r2, r3
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	441a      	add	r2, r3
 800262c:	8afb      	ldrh	r3, [r7, #22]
 800262e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002632:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002636:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800263a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800263e:	b29b      	uxth	r3, r3
 8002640:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002642:	8b7b      	ldrh	r3, [r7, #26]
 8002644:	2b00      	cmp	r3, #0
 8002646:	f000 8085 	beq.w	8002754 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	6818      	ldr	r0, [r3, #0]
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	6959      	ldr	r1, [r3, #20]
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	891a      	ldrh	r2, [r3, #8]
 8002656:	8b7b      	ldrh	r3, [r7, #26]
 8002658:	f003 fd59 	bl	800610e <USB_ReadPMA>
 800265c:	e07a      	b.n	8002754 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002666:	b29b      	uxth	r3, r3
 8002668:	461a      	mov	r2, r3
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	00db      	lsls	r3, r3, #3
 8002670:	4413      	add	r3, r2
 8002672:	68fa      	ldr	r2, [r7, #12]
 8002674:	6812      	ldr	r2, [r2, #0]
 8002676:	4413      	add	r3, r2
 8002678:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800267c:	881b      	ldrh	r3, [r3, #0]
 800267e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002682:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	699a      	ldr	r2, [r3, #24]
 8002688:	8b7b      	ldrh	r3, [r7, #26]
 800268a:	429a      	cmp	r2, r3
 800268c:	d306      	bcc.n	800269c <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	699a      	ldr	r2, [r3, #24]
 8002692:	8b7b      	ldrh	r3, [r7, #26]
 8002694:	1ad2      	subs	r2, r2, r3
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	619a      	str	r2, [r3, #24]
 800269a:	e002      	b.n	80026a2 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	2200      	movs	r2, #0
 80026a0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	699b      	ldr	r3, [r3, #24]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d123      	bne.n	80026f2 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	461a      	mov	r2, r3
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	4413      	add	r3, r2
 80026b8:	881b      	ldrh	r3, [r3, #0]
 80026ba:	b29b      	uxth	r3, r3
 80026bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80026c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026c4:	83fb      	strh	r3, [r7, #30]
 80026c6:	8bfb      	ldrh	r3, [r7, #30]
 80026c8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80026cc:	83fb      	strh	r3, [r7, #30]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	461a      	mov	r2, r3
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	781b      	ldrb	r3, [r3, #0]
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	441a      	add	r2, r3
 80026dc:	8bfb      	ldrh	r3, [r7, #30]
 80026de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80026e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80026e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80026f2:	88fb      	ldrh	r3, [r7, #6]
 80026f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d11f      	bne.n	800273c <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	461a      	mov	r2, r3
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	4413      	add	r3, r2
 800270a:	881b      	ldrh	r3, [r3, #0]
 800270c:	b29b      	uxth	r3, r3
 800270e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002712:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002716:	83bb      	strh	r3, [r7, #28]
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	461a      	mov	r2, r3
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	781b      	ldrb	r3, [r3, #0]
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	441a      	add	r2, r3
 8002726:	8bbb      	ldrh	r3, [r7, #28]
 8002728:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800272c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002730:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002734:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002738:	b29b      	uxth	r3, r3
 800273a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800273c:	8b7b      	ldrh	r3, [r7, #26]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d008      	beq.n	8002754 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	6818      	ldr	r0, [r3, #0]
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	6959      	ldr	r1, [r3, #20]
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	895a      	ldrh	r2, [r3, #10]
 800274e:	8b7b      	ldrh	r3, [r7, #26]
 8002750:	f003 fcdd 	bl	800610e <USB_ReadPMA>
    }
  }

  return count;
 8002754:	8b7b      	ldrh	r3, [r7, #26]
}
 8002756:	4618      	mov	r0, r3
 8002758:	3720      	adds	r7, #32
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}

0800275e <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800275e:	b580      	push	{r7, lr}
 8002760:	b094      	sub	sp, #80	; 0x50
 8002762:	af00      	add	r7, sp, #0
 8002764:	60f8      	str	r0, [r7, #12]
 8002766:	60b9      	str	r1, [r7, #8]
 8002768:	4613      	mov	r3, r2
 800276a:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800276c:	88fb      	ldrh	r3, [r7, #6]
 800276e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002772:	2b00      	cmp	r3, #0
 8002774:	f000 8136 	beq.w	80029e4 <HAL_PCD_EP_DB_Transmit+0x286>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002780:	b29b      	uxth	r3, r3
 8002782:	461a      	mov	r2, r3
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	00db      	lsls	r3, r3, #3
 800278a:	4413      	add	r3, r2
 800278c:	68fa      	ldr	r2, [r7, #12]
 800278e:	6812      	ldr	r2, [r2, #0]
 8002790:	4413      	add	r3, r2
 8002792:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002796:	881b      	ldrh	r3, [r3, #0]
 8002798:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800279c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len > TxByteNbre)
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	699a      	ldr	r2, [r3, #24]
 80027a4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d907      	bls.n	80027bc <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxByteNbre;
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	699a      	ldr	r2, [r3, #24]
 80027b0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80027b4:	1ad2      	subs	r2, r2, r3
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	619a      	str	r2, [r3, #24]
 80027ba:	e002      	b.n	80027c2 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	2200      	movs	r2, #0
 80027c0:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	699b      	ldr	r3, [r3, #24]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d12c      	bne.n	8002824 <HAL_PCD_EP_DB_Transmit+0xc6>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	4619      	mov	r1, r3
 80027d0:	68f8      	ldr	r0, [r7, #12]
 80027d2:	f7ff fb73 	bl	8001ebc <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80027d6:	88fb      	ldrh	r3, [r7, #6]
 80027d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027dc:	2b00      	cmp	r3, #0
 80027de:	f000 8238 	beq.w	8002c52 <HAL_PCD_EP_DB_Transmit+0x4f4>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	461a      	mov	r2, r3
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	4413      	add	r3, r2
 80027f0:	881b      	ldrh	r3, [r3, #0]
 80027f2:	b29b      	uxth	r3, r3
 80027f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027fc:	82fb      	strh	r3, [r7, #22]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	461a      	mov	r2, r3
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	441a      	add	r2, r3
 800280c:	8afb      	ldrh	r3, [r7, #22]
 800280e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002812:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002816:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800281a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800281e:	b29b      	uxth	r3, r3
 8002820:	8013      	strh	r3, [r2, #0]
 8002822:	e216      	b.n	8002c52 <HAL_PCD_EP_DB_Transmit+0x4f4>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002824:	88fb      	ldrh	r3, [r7, #6]
 8002826:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d01f      	beq.n	800286e <HAL_PCD_EP_DB_Transmit+0x110>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	461a      	mov	r2, r3
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	4413      	add	r3, r2
 800283c:	881b      	ldrh	r3, [r3, #0]
 800283e:	b29b      	uxth	r3, r3
 8002840:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002844:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002848:	857b      	strh	r3, [r7, #42]	; 0x2a
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	461a      	mov	r2, r3
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	441a      	add	r2, r3
 8002858:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800285a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800285e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002862:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002866:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800286a:	b29b      	uxth	r3, r3
 800286c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002874:	2b01      	cmp	r3, #1
 8002876:	f040 81ec 	bne.w	8002c52 <HAL_PCD_EP_DB_Transmit+0x4f4>
      {
        ep->xfer_buff += TxByteNbre;
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	695a      	ldr	r2, [r3, #20]
 800287e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002882:	441a      	add	r2, r3
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	69da      	ldr	r2, [r3, #28]
 800288c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002890:	441a      	add	r2, r3
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	6a1a      	ldr	r2, [r3, #32]
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	691b      	ldr	r3, [r3, #16]
 800289e:	429a      	cmp	r2, r3
 80028a0:	d309      	bcc.n	80028b6 <HAL_PCD_EP_DB_Transmit+0x158>
        {
          len = ep->maxpacket;
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	691b      	ldr	r3, [r3, #16]
 80028a6:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	6a1a      	ldr	r2, [r3, #32]
 80028ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028ae:	1ad2      	subs	r2, r2, r3
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	621a      	str	r2, [r3, #32]
 80028b4:	e015      	b.n	80028e2 <HAL_PCD_EP_DB_Transmit+0x184>
        }
        else if (ep->xfer_len_db == 0U)
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	6a1b      	ldr	r3, [r3, #32]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d107      	bne.n	80028ce <HAL_PCD_EP_DB_Transmit+0x170>
        {
          len = TxByteNbre;
 80028be:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80028c2:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	2200      	movs	r2, #0
 80028c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80028cc:	e009      	b.n	80028e2 <HAL_PCD_EP_DB_Transmit+0x184>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	2200      	movs	r2, #0
 80028d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	6a1b      	ldr	r3, [r3, #32]
 80028da:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	2200      	movs	r2, #0
 80028e0:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	785b      	ldrb	r3, [r3, #1]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d155      	bne.n	8002996 <HAL_PCD_EP_DB_Transmit+0x238>
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	61fb      	str	r3, [r7, #28]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028f8:	b29b      	uxth	r3, r3
 80028fa:	461a      	mov	r2, r3
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	4413      	add	r3, r2
 8002900:	61fb      	str	r3, [r7, #28]
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	781b      	ldrb	r3, [r3, #0]
 8002906:	00da      	lsls	r2, r3, #3
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	4413      	add	r3, r2
 800290c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002910:	61bb      	str	r3, [r7, #24]
 8002912:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002914:	2b00      	cmp	r3, #0
 8002916:	d112      	bne.n	800293e <HAL_PCD_EP_DB_Transmit+0x1e0>
 8002918:	69bb      	ldr	r3, [r7, #24]
 800291a:	881b      	ldrh	r3, [r3, #0]
 800291c:	b29b      	uxth	r3, r3
 800291e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002922:	b29a      	uxth	r2, r3
 8002924:	69bb      	ldr	r3, [r7, #24]
 8002926:	801a      	strh	r2, [r3, #0]
 8002928:	69bb      	ldr	r3, [r7, #24]
 800292a:	881b      	ldrh	r3, [r3, #0]
 800292c:	b29b      	uxth	r3, r3
 800292e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002932:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002936:	b29a      	uxth	r2, r3
 8002938:	69bb      	ldr	r3, [r7, #24]
 800293a:	801a      	strh	r2, [r3, #0]
 800293c:	e047      	b.n	80029ce <HAL_PCD_EP_DB_Transmit+0x270>
 800293e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002940:	2b3e      	cmp	r3, #62	; 0x3e
 8002942:	d811      	bhi.n	8002968 <HAL_PCD_EP_DB_Transmit+0x20a>
 8002944:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002946:	085b      	lsrs	r3, r3, #1
 8002948:	62fb      	str	r3, [r7, #44]	; 0x2c
 800294a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800294c:	f003 0301 	and.w	r3, r3, #1
 8002950:	2b00      	cmp	r3, #0
 8002952:	d002      	beq.n	800295a <HAL_PCD_EP_DB_Transmit+0x1fc>
 8002954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002956:	3301      	adds	r3, #1
 8002958:	62fb      	str	r3, [r7, #44]	; 0x2c
 800295a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800295c:	b29b      	uxth	r3, r3
 800295e:	029b      	lsls	r3, r3, #10
 8002960:	b29a      	uxth	r2, r3
 8002962:	69bb      	ldr	r3, [r7, #24]
 8002964:	801a      	strh	r2, [r3, #0]
 8002966:	e032      	b.n	80029ce <HAL_PCD_EP_DB_Transmit+0x270>
 8002968:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800296a:	095b      	lsrs	r3, r3, #5
 800296c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800296e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002970:	f003 031f 	and.w	r3, r3, #31
 8002974:	2b00      	cmp	r3, #0
 8002976:	d102      	bne.n	800297e <HAL_PCD_EP_DB_Transmit+0x220>
 8002978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800297a:	3b01      	subs	r3, #1
 800297c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800297e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002980:	b29b      	uxth	r3, r3
 8002982:	029b      	lsls	r3, r3, #10
 8002984:	b29b      	uxth	r3, r3
 8002986:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800298a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800298e:	b29a      	uxth	r2, r3
 8002990:	69bb      	ldr	r3, [r7, #24]
 8002992:	801a      	strh	r2, [r3, #0]
 8002994:	e01b      	b.n	80029ce <HAL_PCD_EP_DB_Transmit+0x270>
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	785b      	ldrb	r3, [r3, #1]
 800299a:	2b01      	cmp	r3, #1
 800299c:	d117      	bne.n	80029ce <HAL_PCD_EP_DB_Transmit+0x270>
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	627b      	str	r3, [r7, #36]	; 0x24
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	461a      	mov	r2, r3
 80029b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b2:	4413      	add	r3, r2
 80029b4:	627b      	str	r3, [r7, #36]	; 0x24
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	781b      	ldrb	r3, [r3, #0]
 80029ba:	00da      	lsls	r2, r3, #3
 80029bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029be:	4413      	add	r3, r2
 80029c0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80029c4:	623b      	str	r3, [r7, #32]
 80029c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029c8:	b29a      	uxth	r2, r3
 80029ca:	6a3b      	ldr	r3, [r7, #32]
 80029cc:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	6818      	ldr	r0, [r3, #0]
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	6959      	ldr	r1, [r3, #20]
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	891a      	ldrh	r2, [r3, #8]
 80029da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029dc:	b29b      	uxth	r3, r3
 80029de:	f003 fb54 	bl	800608a <USB_WritePMA>
 80029e2:	e136      	b.n	8002c52 <HAL_PCD_EP_DB_Transmit+0x4f4>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	461a      	mov	r2, r3
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	00db      	lsls	r3, r3, #3
 80029f6:	4413      	add	r3, r2
 80029f8:	68fa      	ldr	r2, [r7, #12]
 80029fa:	6812      	ldr	r2, [r2, #0]
 80029fc:	4413      	add	r3, r2
 80029fe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002a02:	881b      	ldrh	r3, [r3, #0]
 8002a04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a08:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len >= TxByteNbre)
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	699a      	ldr	r2, [r3, #24]
 8002a10:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d307      	bcc.n	8002a28 <HAL_PCD_EP_DB_Transmit+0x2ca>
    {
      ep->xfer_len -= TxByteNbre;
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	699a      	ldr	r2, [r3, #24]
 8002a1c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002a20:	1ad2      	subs	r2, r2, r3
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	619a      	str	r2, [r3, #24]
 8002a26:	e002      	b.n	8002a2e <HAL_PCD_EP_DB_Transmit+0x2d0>
    }
    else
    {
      ep->xfer_len = 0U;
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	699b      	ldr	r3, [r3, #24]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d12e      	bne.n	8002a94 <HAL_PCD_EP_DB_Transmit+0x336>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	781b      	ldrb	r3, [r3, #0]
 8002a3a:	4619      	mov	r1, r3
 8002a3c:	68f8      	ldr	r0, [r7, #12]
 8002a3e:	f7ff fa3d 	bl	8001ebc <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002a42:	88fb      	ldrh	r3, [r7, #6]
 8002a44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	f040 8102 	bne.w	8002c52 <HAL_PCD_EP_DB_Transmit+0x4f4>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	461a      	mov	r2, r3
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	4413      	add	r3, r2
 8002a5c:	881b      	ldrh	r3, [r3, #0]
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a68:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	461a      	mov	r2, r3
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	781b      	ldrb	r3, [r3, #0]
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	441a      	add	r2, r3
 8002a7a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002a7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a86:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	8013      	strh	r3, [r2, #0]
 8002a92:	e0de      	b.n	8002c52 <HAL_PCD_EP_DB_Transmit+0x4f4>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002a94:	88fb      	ldrh	r3, [r7, #6]
 8002a96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d11f      	bne.n	8002ade <HAL_PCD_EP_DB_Transmit+0x380>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	461a      	mov	r2, r3
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	4413      	add	r3, r2
 8002aac:	881b      	ldrh	r3, [r3, #0]
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ab4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ab8:	867b      	strh	r3, [r7, #50]	; 0x32
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	461a      	mov	r2, r3
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	781b      	ldrb	r3, [r3, #0]
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	441a      	add	r2, r3
 8002ac8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8002aca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ace:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ad2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ad6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ada:	b29b      	uxth	r3, r3
 8002adc:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	f040 80b4 	bne.w	8002c52 <HAL_PCD_EP_DB_Transmit+0x4f4>
      {
        ep->xfer_buff += TxByteNbre;
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	695a      	ldr	r2, [r3, #20]
 8002aee:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002af2:	441a      	add	r2, r3
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	69da      	ldr	r2, [r3, #28]
 8002afc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002b00:	441a      	add	r2, r3
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	6a1a      	ldr	r2, [r3, #32]
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	691b      	ldr	r3, [r3, #16]
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d309      	bcc.n	8002b26 <HAL_PCD_EP_DB_Transmit+0x3c8>
        {
          len = ep->maxpacket;
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	691b      	ldr	r3, [r3, #16]
 8002b16:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	6a1a      	ldr	r2, [r3, #32]
 8002b1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b1e:	1ad2      	subs	r2, r2, r3
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	621a      	str	r2, [r3, #32]
 8002b24:	e015      	b.n	8002b52 <HAL_PCD_EP_DB_Transmit+0x3f4>
        }
        else if (ep->xfer_len_db == 0U)
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	6a1b      	ldr	r3, [r3, #32]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d107      	bne.n	8002b3e <HAL_PCD_EP_DB_Transmit+0x3e0>
        {
          len = TxByteNbre;
 8002b2e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002b32:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	2200      	movs	r2, #0
 8002b38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002b3c:	e009      	b.n	8002b52 <HAL_PCD_EP_DB_Transmit+0x3f4>
        }
        else
        {
          len = ep->xfer_len_db;
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	6a1b      	ldr	r3, [r3, #32]
 8002b42:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	2200      	movs	r2, #0
 8002b48:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	643b      	str	r3, [r7, #64]	; 0x40
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	785b      	ldrb	r3, [r3, #1]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d155      	bne.n	8002c0c <HAL_PCD_EP_DB_Transmit+0x4ae>
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	461a      	mov	r2, r3
 8002b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b74:	4413      	add	r3, r2
 8002b76:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	00da      	lsls	r2, r3, #3
 8002b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b80:	4413      	add	r3, r2
 8002b82:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002b86:	637b      	str	r3, [r7, #52]	; 0x34
 8002b88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d112      	bne.n	8002bb4 <HAL_PCD_EP_DB_Transmit+0x456>
 8002b8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b90:	881b      	ldrh	r3, [r3, #0]
 8002b92:	b29b      	uxth	r3, r3
 8002b94:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002b98:	b29a      	uxth	r2, r3
 8002b9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b9c:	801a      	strh	r2, [r3, #0]
 8002b9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ba0:	881b      	ldrh	r3, [r3, #0]
 8002ba2:	b29b      	uxth	r3, r3
 8002ba4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ba8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002bac:	b29a      	uxth	r2, r3
 8002bae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bb0:	801a      	strh	r2, [r3, #0]
 8002bb2:	e044      	b.n	8002c3e <HAL_PCD_EP_DB_Transmit+0x4e0>
 8002bb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bb6:	2b3e      	cmp	r3, #62	; 0x3e
 8002bb8:	d811      	bhi.n	8002bde <HAL_PCD_EP_DB_Transmit+0x480>
 8002bba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bbc:	085b      	lsrs	r3, r3, #1
 8002bbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002bc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bc2:	f003 0301 	and.w	r3, r3, #1
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d002      	beq.n	8002bd0 <HAL_PCD_EP_DB_Transmit+0x472>
 8002bca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bcc:	3301      	adds	r3, #1
 8002bce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002bd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	029b      	lsls	r3, r3, #10
 8002bd6:	b29a      	uxth	r2, r3
 8002bd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bda:	801a      	strh	r2, [r3, #0]
 8002bdc:	e02f      	b.n	8002c3e <HAL_PCD_EP_DB_Transmit+0x4e0>
 8002bde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002be0:	095b      	lsrs	r3, r3, #5
 8002be2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002be4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002be6:	f003 031f 	and.w	r3, r3, #31
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d102      	bne.n	8002bf4 <HAL_PCD_EP_DB_Transmit+0x496>
 8002bee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bf0:	3b01      	subs	r3, #1
 8002bf2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002bf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	029b      	lsls	r3, r3, #10
 8002bfa:	b29b      	uxth	r3, r3
 8002bfc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c04:	b29a      	uxth	r2, r3
 8002c06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c08:	801a      	strh	r2, [r3, #0]
 8002c0a:	e018      	b.n	8002c3e <HAL_PCD_EP_DB_Transmit+0x4e0>
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	785b      	ldrb	r3, [r3, #1]
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d114      	bne.n	8002c3e <HAL_PCD_EP_DB_Transmit+0x4e0>
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c1c:	b29b      	uxth	r3, r3
 8002c1e:	461a      	mov	r2, r3
 8002c20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c22:	4413      	add	r3, r2
 8002c24:	643b      	str	r3, [r7, #64]	; 0x40
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	781b      	ldrb	r3, [r3, #0]
 8002c2a:	00da      	lsls	r2, r3, #3
 8002c2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c2e:	4413      	add	r3, r2
 8002c30:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002c34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c38:	b29a      	uxth	r2, r3
 8002c3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c3c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	6818      	ldr	r0, [r3, #0]
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	6959      	ldr	r1, [r3, #20]
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	895a      	ldrh	r2, [r3, #10]
 8002c4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c4c:	b29b      	uxth	r3, r3
 8002c4e:	f003 fa1c 	bl	800608a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	461a      	mov	r2, r3
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	781b      	ldrb	r3, [r3, #0]
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	4413      	add	r3, r2
 8002c60:	881b      	ldrh	r3, [r3, #0]
 8002c62:	b29b      	uxth	r3, r3
 8002c64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c6c:	82bb      	strh	r3, [r7, #20]
 8002c6e:	8abb      	ldrh	r3, [r7, #20]
 8002c70:	f083 0310 	eor.w	r3, r3, #16
 8002c74:	82bb      	strh	r3, [r7, #20]
 8002c76:	8abb      	ldrh	r3, [r7, #20]
 8002c78:	f083 0320 	eor.w	r3, r3, #32
 8002c7c:	82bb      	strh	r3, [r7, #20]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	461a      	mov	r2, r3
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	441a      	add	r2, r3
 8002c8c:	8abb      	ldrh	r3, [r7, #20]
 8002c8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c9e:	b29b      	uxth	r3, r3
 8002ca0:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002ca2:	2300      	movs	r3, #0
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3750      	adds	r7, #80	; 0x50
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}

08002cac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	1d3b      	adds	r3, r7, #4
 8002cb6:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002cb8:	1d3b      	adds	r3, r7, #4
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d102      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	f000 bf01 	b.w	8003ac8 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cc6:	1d3b      	adds	r3, r7, #4
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 0301 	and.w	r3, r3, #1
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	f000 8160 	beq.w	8002f96 <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002cd6:	4bae      	ldr	r3, [pc, #696]	; (8002f90 <HAL_RCC_OscConfig+0x2e4>)
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	f003 030c 	and.w	r3, r3, #12
 8002cde:	2b04      	cmp	r3, #4
 8002ce0:	d00c      	beq.n	8002cfc <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002ce2:	4bab      	ldr	r3, [pc, #684]	; (8002f90 <HAL_RCC_OscConfig+0x2e4>)
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	f003 030c 	and.w	r3, r3, #12
 8002cea:	2b08      	cmp	r3, #8
 8002cec:	d159      	bne.n	8002da2 <HAL_RCC_OscConfig+0xf6>
 8002cee:	4ba8      	ldr	r3, [pc, #672]	; (8002f90 <HAL_RCC_OscConfig+0x2e4>)
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002cf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cfa:	d152      	bne.n	8002da2 <HAL_RCC_OscConfig+0xf6>
 8002cfc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d00:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d04:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002d08:	fa93 f3a3 	rbit	r3, r3
 8002d0c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  return result;
 8002d10:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d14:	fab3 f383 	clz	r3, r3
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	095b      	lsrs	r3, r3, #5
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	f043 0301 	orr.w	r3, r3, #1
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d102      	bne.n	8002d2e <HAL_RCC_OscConfig+0x82>
 8002d28:	4b99      	ldr	r3, [pc, #612]	; (8002f90 <HAL_RCC_OscConfig+0x2e4>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	e015      	b.n	8002d5a <HAL_RCC_OscConfig+0xae>
 8002d2e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d32:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d36:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8002d3a:	fa93 f3a3 	rbit	r3, r3
 8002d3e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8002d42:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d46:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002d4a:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8002d4e:	fa93 f3a3 	rbit	r3, r3
 8002d52:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002d56:	4b8e      	ldr	r3, [pc, #568]	; (8002f90 <HAL_RCC_OscConfig+0x2e4>)
 8002d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002d5e:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8002d62:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8002d66:	fa92 f2a2 	rbit	r2, r2
 8002d6a:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8002d6e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002d72:	fab2 f282 	clz	r2, r2
 8002d76:	b2d2      	uxtb	r2, r2
 8002d78:	f042 0220 	orr.w	r2, r2, #32
 8002d7c:	b2d2      	uxtb	r2, r2
 8002d7e:	f002 021f 	and.w	r2, r2, #31
 8002d82:	2101      	movs	r1, #1
 8002d84:	fa01 f202 	lsl.w	r2, r1, r2
 8002d88:	4013      	ands	r3, r2
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	f000 8102 	beq.w	8002f94 <HAL_RCC_OscConfig+0x2e8>
 8002d90:	1d3b      	adds	r3, r7, #4
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	f040 80fc 	bne.w	8002f94 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	f000 be93 	b.w	8003ac8 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002da2:	1d3b      	adds	r3, r7, #4
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dac:	d106      	bne.n	8002dbc <HAL_RCC_OscConfig+0x110>
 8002dae:	4b78      	ldr	r3, [pc, #480]	; (8002f90 <HAL_RCC_OscConfig+0x2e4>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a77      	ldr	r2, [pc, #476]	; (8002f90 <HAL_RCC_OscConfig+0x2e4>)
 8002db4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002db8:	6013      	str	r3, [r2, #0]
 8002dba:	e030      	b.n	8002e1e <HAL_RCC_OscConfig+0x172>
 8002dbc:	1d3b      	adds	r3, r7, #4
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d10c      	bne.n	8002de0 <HAL_RCC_OscConfig+0x134>
 8002dc6:	4b72      	ldr	r3, [pc, #456]	; (8002f90 <HAL_RCC_OscConfig+0x2e4>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a71      	ldr	r2, [pc, #452]	; (8002f90 <HAL_RCC_OscConfig+0x2e4>)
 8002dcc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dd0:	6013      	str	r3, [r2, #0]
 8002dd2:	4b6f      	ldr	r3, [pc, #444]	; (8002f90 <HAL_RCC_OscConfig+0x2e4>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a6e      	ldr	r2, [pc, #440]	; (8002f90 <HAL_RCC_OscConfig+0x2e4>)
 8002dd8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ddc:	6013      	str	r3, [r2, #0]
 8002dde:	e01e      	b.n	8002e1e <HAL_RCC_OscConfig+0x172>
 8002de0:	1d3b      	adds	r3, r7, #4
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002dea:	d10c      	bne.n	8002e06 <HAL_RCC_OscConfig+0x15a>
 8002dec:	4b68      	ldr	r3, [pc, #416]	; (8002f90 <HAL_RCC_OscConfig+0x2e4>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a67      	ldr	r2, [pc, #412]	; (8002f90 <HAL_RCC_OscConfig+0x2e4>)
 8002df2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002df6:	6013      	str	r3, [r2, #0]
 8002df8:	4b65      	ldr	r3, [pc, #404]	; (8002f90 <HAL_RCC_OscConfig+0x2e4>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a64      	ldr	r2, [pc, #400]	; (8002f90 <HAL_RCC_OscConfig+0x2e4>)
 8002dfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e02:	6013      	str	r3, [r2, #0]
 8002e04:	e00b      	b.n	8002e1e <HAL_RCC_OscConfig+0x172>
 8002e06:	4b62      	ldr	r3, [pc, #392]	; (8002f90 <HAL_RCC_OscConfig+0x2e4>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a61      	ldr	r2, [pc, #388]	; (8002f90 <HAL_RCC_OscConfig+0x2e4>)
 8002e0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e10:	6013      	str	r3, [r2, #0]
 8002e12:	4b5f      	ldr	r3, [pc, #380]	; (8002f90 <HAL_RCC_OscConfig+0x2e4>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a5e      	ldr	r2, [pc, #376]	; (8002f90 <HAL_RCC_OscConfig+0x2e4>)
 8002e18:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e1c:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e1e:	1d3b      	adds	r3, r7, #4
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d059      	beq.n	8002edc <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e28:	f7fd fe92 	bl	8000b50 <HAL_GetTick>
 8002e2c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e30:	e00a      	b.n	8002e48 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e32:	f7fd fe8d 	bl	8000b50 <HAL_GetTick>
 8002e36:	4602      	mov	r2, r0
 8002e38:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	2b64      	cmp	r3, #100	; 0x64
 8002e40:	d902      	bls.n	8002e48 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	f000 be40 	b.w	8003ac8 <HAL_RCC_OscConfig+0xe1c>
 8002e48:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e4c:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e50:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8002e54:	fa93 f3a3 	rbit	r3, r3
 8002e58:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8002e5c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e60:	fab3 f383 	clz	r3, r3
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	095b      	lsrs	r3, r3, #5
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	f043 0301 	orr.w	r3, r3, #1
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d102      	bne.n	8002e7a <HAL_RCC_OscConfig+0x1ce>
 8002e74:	4b46      	ldr	r3, [pc, #280]	; (8002f90 <HAL_RCC_OscConfig+0x2e4>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	e015      	b.n	8002ea6 <HAL_RCC_OscConfig+0x1fa>
 8002e7a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e7e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e82:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8002e86:	fa93 f3a3 	rbit	r3, r3
 8002e8a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8002e8e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e92:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002e96:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8002e9a:	fa93 f3a3 	rbit	r3, r3
 8002e9e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002ea2:	4b3b      	ldr	r3, [pc, #236]	; (8002f90 <HAL_RCC_OscConfig+0x2e4>)
 8002ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002eaa:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8002eae:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8002eb2:	fa92 f2a2 	rbit	r2, r2
 8002eb6:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8002eba:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002ebe:	fab2 f282 	clz	r2, r2
 8002ec2:	b2d2      	uxtb	r2, r2
 8002ec4:	f042 0220 	orr.w	r2, r2, #32
 8002ec8:	b2d2      	uxtb	r2, r2
 8002eca:	f002 021f 	and.w	r2, r2, #31
 8002ece:	2101      	movs	r1, #1
 8002ed0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d0ab      	beq.n	8002e32 <HAL_RCC_OscConfig+0x186>
 8002eda:	e05c      	b.n	8002f96 <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002edc:	f7fd fe38 	bl	8000b50 <HAL_GetTick>
 8002ee0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ee4:	e00a      	b.n	8002efc <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ee6:	f7fd fe33 	bl	8000b50 <HAL_GetTick>
 8002eea:	4602      	mov	r2, r0
 8002eec:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	2b64      	cmp	r3, #100	; 0x64
 8002ef4:	d902      	bls.n	8002efc <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	f000 bde6 	b.w	8003ac8 <HAL_RCC_OscConfig+0xe1c>
 8002efc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f00:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f04:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8002f08:	fa93 f3a3 	rbit	r3, r3
 8002f0c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8002f10:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f14:	fab3 f383 	clz	r3, r3
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	095b      	lsrs	r3, r3, #5
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	f043 0301 	orr.w	r3, r3, #1
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d102      	bne.n	8002f2e <HAL_RCC_OscConfig+0x282>
 8002f28:	4b19      	ldr	r3, [pc, #100]	; (8002f90 <HAL_RCC_OscConfig+0x2e4>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	e015      	b.n	8002f5a <HAL_RCC_OscConfig+0x2ae>
 8002f2e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f32:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f36:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8002f3a:	fa93 f3a3 	rbit	r3, r3
 8002f3e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8002f42:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f46:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002f4a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002f4e:	fa93 f3a3 	rbit	r3, r3
 8002f52:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002f56:	4b0e      	ldr	r3, [pc, #56]	; (8002f90 <HAL_RCC_OscConfig+0x2e4>)
 8002f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002f5e:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8002f62:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8002f66:	fa92 f2a2 	rbit	r2, r2
 8002f6a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8002f6e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002f72:	fab2 f282 	clz	r2, r2
 8002f76:	b2d2      	uxtb	r2, r2
 8002f78:	f042 0220 	orr.w	r2, r2, #32
 8002f7c:	b2d2      	uxtb	r2, r2
 8002f7e:	f002 021f 	and.w	r2, r2, #31
 8002f82:	2101      	movs	r1, #1
 8002f84:	fa01 f202 	lsl.w	r2, r1, r2
 8002f88:	4013      	ands	r3, r2
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d1ab      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x23a>
 8002f8e:	e002      	b.n	8002f96 <HAL_RCC_OscConfig+0x2ea>
 8002f90:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f96:	1d3b      	adds	r3, r7, #4
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 0302 	and.w	r3, r3, #2
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	f000 8170 	beq.w	8003286 <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002fa6:	4bd0      	ldr	r3, [pc, #832]	; (80032e8 <HAL_RCC_OscConfig+0x63c>)
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	f003 030c 	and.w	r3, r3, #12
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d00c      	beq.n	8002fcc <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002fb2:	4bcd      	ldr	r3, [pc, #820]	; (80032e8 <HAL_RCC_OscConfig+0x63c>)
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	f003 030c 	and.w	r3, r3, #12
 8002fba:	2b08      	cmp	r3, #8
 8002fbc:	d16d      	bne.n	800309a <HAL_RCC_OscConfig+0x3ee>
 8002fbe:	4bca      	ldr	r3, [pc, #808]	; (80032e8 <HAL_RCC_OscConfig+0x63c>)
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002fc6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fca:	d166      	bne.n	800309a <HAL_RCC_OscConfig+0x3ee>
 8002fcc:	2302      	movs	r3, #2
 8002fce:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd2:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8002fd6:	fa93 f3a3 	rbit	r3, r3
 8002fda:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8002fde:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fe2:	fab3 f383 	clz	r3, r3
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	095b      	lsrs	r3, r3, #5
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	f043 0301 	orr.w	r3, r3, #1
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d102      	bne.n	8002ffc <HAL_RCC_OscConfig+0x350>
 8002ff6:	4bbc      	ldr	r3, [pc, #752]	; (80032e8 <HAL_RCC_OscConfig+0x63c>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	e013      	b.n	8003024 <HAL_RCC_OscConfig+0x378>
 8002ffc:	2302      	movs	r3, #2
 8002ffe:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003002:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8003006:	fa93 f3a3 	rbit	r3, r3
 800300a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 800300e:	2302      	movs	r3, #2
 8003010:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003014:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8003018:	fa93 f3a3 	rbit	r3, r3
 800301c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003020:	4bb1      	ldr	r3, [pc, #708]	; (80032e8 <HAL_RCC_OscConfig+0x63c>)
 8003022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003024:	2202      	movs	r2, #2
 8003026:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 800302a:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 800302e:	fa92 f2a2 	rbit	r2, r2
 8003032:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8003036:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800303a:	fab2 f282 	clz	r2, r2
 800303e:	b2d2      	uxtb	r2, r2
 8003040:	f042 0220 	orr.w	r2, r2, #32
 8003044:	b2d2      	uxtb	r2, r2
 8003046:	f002 021f 	and.w	r2, r2, #31
 800304a:	2101      	movs	r1, #1
 800304c:	fa01 f202 	lsl.w	r2, r1, r2
 8003050:	4013      	ands	r3, r2
 8003052:	2b00      	cmp	r3, #0
 8003054:	d007      	beq.n	8003066 <HAL_RCC_OscConfig+0x3ba>
 8003056:	1d3b      	adds	r3, r7, #4
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	2b01      	cmp	r3, #1
 800305e:	d002      	beq.n	8003066 <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	f000 bd31 	b.w	8003ac8 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003066:	4ba0      	ldr	r3, [pc, #640]	; (80032e8 <HAL_RCC_OscConfig+0x63c>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800306e:	1d3b      	adds	r3, r7, #4
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	691b      	ldr	r3, [r3, #16]
 8003074:	21f8      	movs	r1, #248	; 0xf8
 8003076:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800307a:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 800307e:	fa91 f1a1 	rbit	r1, r1
 8003082:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8003086:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800308a:	fab1 f181 	clz	r1, r1
 800308e:	b2c9      	uxtb	r1, r1
 8003090:	408b      	lsls	r3, r1
 8003092:	4995      	ldr	r1, [pc, #596]	; (80032e8 <HAL_RCC_OscConfig+0x63c>)
 8003094:	4313      	orrs	r3, r2
 8003096:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003098:	e0f5      	b.n	8003286 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800309a:	1d3b      	adds	r3, r7, #4
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	f000 8085 	beq.w	80031b0 <HAL_RCC_OscConfig+0x504>
 80030a6:	2301      	movs	r3, #1
 80030a8:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ac:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80030b0:	fa93 f3a3 	rbit	r3, r3
 80030b4:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 80030b8:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030bc:	fab3 f383 	clz	r3, r3
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80030c6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	461a      	mov	r2, r3
 80030ce:	2301      	movs	r3, #1
 80030d0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030d2:	f7fd fd3d 	bl	8000b50 <HAL_GetTick>
 80030d6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030da:	e00a      	b.n	80030f2 <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030dc:	f7fd fd38 	bl	8000b50 <HAL_GetTick>
 80030e0:	4602      	mov	r2, r0
 80030e2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	2b02      	cmp	r3, #2
 80030ea:	d902      	bls.n	80030f2 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80030ec:	2303      	movs	r3, #3
 80030ee:	f000 bceb 	b.w	8003ac8 <HAL_RCC_OscConfig+0xe1c>
 80030f2:	2302      	movs	r3, #2
 80030f4:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f8:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80030fc:	fa93 f3a3 	rbit	r3, r3
 8003100:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8003104:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003108:	fab3 f383 	clz	r3, r3
 800310c:	b2db      	uxtb	r3, r3
 800310e:	095b      	lsrs	r3, r3, #5
 8003110:	b2db      	uxtb	r3, r3
 8003112:	f043 0301 	orr.w	r3, r3, #1
 8003116:	b2db      	uxtb	r3, r3
 8003118:	2b01      	cmp	r3, #1
 800311a:	d102      	bne.n	8003122 <HAL_RCC_OscConfig+0x476>
 800311c:	4b72      	ldr	r3, [pc, #456]	; (80032e8 <HAL_RCC_OscConfig+0x63c>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	e013      	b.n	800314a <HAL_RCC_OscConfig+0x49e>
 8003122:	2302      	movs	r3, #2
 8003124:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003128:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800312c:	fa93 f3a3 	rbit	r3, r3
 8003130:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8003134:	2302      	movs	r3, #2
 8003136:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800313a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800313e:	fa93 f3a3 	rbit	r3, r3
 8003142:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003146:	4b68      	ldr	r3, [pc, #416]	; (80032e8 <HAL_RCC_OscConfig+0x63c>)
 8003148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314a:	2202      	movs	r2, #2
 800314c:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8003150:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8003154:	fa92 f2a2 	rbit	r2, r2
 8003158:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 800315c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003160:	fab2 f282 	clz	r2, r2
 8003164:	b2d2      	uxtb	r2, r2
 8003166:	f042 0220 	orr.w	r2, r2, #32
 800316a:	b2d2      	uxtb	r2, r2
 800316c:	f002 021f 	and.w	r2, r2, #31
 8003170:	2101      	movs	r1, #1
 8003172:	fa01 f202 	lsl.w	r2, r1, r2
 8003176:	4013      	ands	r3, r2
 8003178:	2b00      	cmp	r3, #0
 800317a:	d0af      	beq.n	80030dc <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800317c:	4b5a      	ldr	r3, [pc, #360]	; (80032e8 <HAL_RCC_OscConfig+0x63c>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003184:	1d3b      	adds	r3, r7, #4
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	691b      	ldr	r3, [r3, #16]
 800318a:	21f8      	movs	r1, #248	; 0xf8
 800318c:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003190:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8003194:	fa91 f1a1 	rbit	r1, r1
 8003198:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 800319c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80031a0:	fab1 f181 	clz	r1, r1
 80031a4:	b2c9      	uxtb	r1, r1
 80031a6:	408b      	lsls	r3, r1
 80031a8:	494f      	ldr	r1, [pc, #316]	; (80032e8 <HAL_RCC_OscConfig+0x63c>)
 80031aa:	4313      	orrs	r3, r2
 80031ac:	600b      	str	r3, [r1, #0]
 80031ae:	e06a      	b.n	8003286 <HAL_RCC_OscConfig+0x5da>
 80031b0:	2301      	movs	r3, #1
 80031b2:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031b6:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80031ba:	fa93 f3a3 	rbit	r3, r3
 80031be:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80031c2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031c6:	fab3 f383 	clz	r3, r3
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80031d0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	461a      	mov	r2, r3
 80031d8:	2300      	movs	r3, #0
 80031da:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031dc:	f7fd fcb8 	bl	8000b50 <HAL_GetTick>
 80031e0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031e4:	e00a      	b.n	80031fc <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031e6:	f7fd fcb3 	bl	8000b50 <HAL_GetTick>
 80031ea:	4602      	mov	r2, r0
 80031ec:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d902      	bls.n	80031fc <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	f000 bc66 	b.w	8003ac8 <HAL_RCC_OscConfig+0xe1c>
 80031fc:	2302      	movs	r3, #2
 80031fe:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003202:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003206:	fa93 f3a3 	rbit	r3, r3
 800320a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 800320e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003212:	fab3 f383 	clz	r3, r3
 8003216:	b2db      	uxtb	r3, r3
 8003218:	095b      	lsrs	r3, r3, #5
 800321a:	b2db      	uxtb	r3, r3
 800321c:	f043 0301 	orr.w	r3, r3, #1
 8003220:	b2db      	uxtb	r3, r3
 8003222:	2b01      	cmp	r3, #1
 8003224:	d102      	bne.n	800322c <HAL_RCC_OscConfig+0x580>
 8003226:	4b30      	ldr	r3, [pc, #192]	; (80032e8 <HAL_RCC_OscConfig+0x63c>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	e013      	b.n	8003254 <HAL_RCC_OscConfig+0x5a8>
 800322c:	2302      	movs	r3, #2
 800322e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003232:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003236:	fa93 f3a3 	rbit	r3, r3
 800323a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800323e:	2302      	movs	r3, #2
 8003240:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003244:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003248:	fa93 f3a3 	rbit	r3, r3
 800324c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003250:	4b25      	ldr	r3, [pc, #148]	; (80032e8 <HAL_RCC_OscConfig+0x63c>)
 8003252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003254:	2202      	movs	r2, #2
 8003256:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800325a:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800325e:	fa92 f2a2 	rbit	r2, r2
 8003262:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8003266:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800326a:	fab2 f282 	clz	r2, r2
 800326e:	b2d2      	uxtb	r2, r2
 8003270:	f042 0220 	orr.w	r2, r2, #32
 8003274:	b2d2      	uxtb	r2, r2
 8003276:	f002 021f 	and.w	r2, r2, #31
 800327a:	2101      	movs	r1, #1
 800327c:	fa01 f202 	lsl.w	r2, r1, r2
 8003280:	4013      	ands	r3, r2
 8003282:	2b00      	cmp	r3, #0
 8003284:	d1af      	bne.n	80031e6 <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003286:	1d3b      	adds	r3, r7, #4
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 0308 	and.w	r3, r3, #8
 8003290:	2b00      	cmp	r3, #0
 8003292:	f000 80da 	beq.w	800344a <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003296:	1d3b      	adds	r3, r7, #4
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	695b      	ldr	r3, [r3, #20]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d069      	beq.n	8003374 <HAL_RCC_OscConfig+0x6c8>
 80032a0:	2301      	movs	r3, #1
 80032a2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032aa:	fa93 f3a3 	rbit	r3, r3
 80032ae:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80032b2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032b6:	fab3 f383 	clz	r3, r3
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	461a      	mov	r2, r3
 80032be:	4b0b      	ldr	r3, [pc, #44]	; (80032ec <HAL_RCC_OscConfig+0x640>)
 80032c0:	4413      	add	r3, r2
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	461a      	mov	r2, r3
 80032c6:	2301      	movs	r3, #1
 80032c8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032ca:	f7fd fc41 	bl	8000b50 <HAL_GetTick>
 80032ce:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032d2:	e00d      	b.n	80032f0 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032d4:	f7fd fc3c 	bl	8000b50 <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80032de:	1ad3      	subs	r3, r2, r3
 80032e0:	2b02      	cmp	r3, #2
 80032e2:	d905      	bls.n	80032f0 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 80032e4:	2303      	movs	r3, #3
 80032e6:	e3ef      	b.n	8003ac8 <HAL_RCC_OscConfig+0xe1c>
 80032e8:	40021000 	.word	0x40021000
 80032ec:	10908120 	.word	0x10908120
 80032f0:	2302      	movs	r3, #2
 80032f2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032fa:	fa93 f2a3 	rbit	r2, r3
 80032fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003302:	601a      	str	r2, [r3, #0]
 8003304:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8003308:	2202      	movs	r2, #2
 800330a:	601a      	str	r2, [r3, #0]
 800330c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	fa93 f2a3 	rbit	r2, r3
 8003316:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800331a:	601a      	str	r2, [r3, #0]
 800331c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003320:	2202      	movs	r2, #2
 8003322:	601a      	str	r2, [r3, #0]
 8003324:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	fa93 f2a3 	rbit	r2, r3
 800332e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003332:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003334:	4ba4      	ldr	r3, [pc, #656]	; (80035c8 <HAL_RCC_OscConfig+0x91c>)
 8003336:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003338:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800333c:	2102      	movs	r1, #2
 800333e:	6019      	str	r1, [r3, #0]
 8003340:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	fa93 f1a3 	rbit	r1, r3
 800334a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800334e:	6019      	str	r1, [r3, #0]
  return result;
 8003350:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	fab3 f383 	clz	r3, r3
 800335a:	b2db      	uxtb	r3, r3
 800335c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003360:	b2db      	uxtb	r3, r3
 8003362:	f003 031f 	and.w	r3, r3, #31
 8003366:	2101      	movs	r1, #1
 8003368:	fa01 f303 	lsl.w	r3, r1, r3
 800336c:	4013      	ands	r3, r2
 800336e:	2b00      	cmp	r3, #0
 8003370:	d0b0      	beq.n	80032d4 <HAL_RCC_OscConfig+0x628>
 8003372:	e06a      	b.n	800344a <HAL_RCC_OscConfig+0x79e>
 8003374:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003378:	2201      	movs	r2, #1
 800337a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800337c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	fa93 f2a3 	rbit	r2, r3
 8003386:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800338a:	601a      	str	r2, [r3, #0]
  return result;
 800338c:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003390:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003392:	fab3 f383 	clz	r3, r3
 8003396:	b2db      	uxtb	r3, r3
 8003398:	461a      	mov	r2, r3
 800339a:	4b8c      	ldr	r3, [pc, #560]	; (80035cc <HAL_RCC_OscConfig+0x920>)
 800339c:	4413      	add	r3, r2
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	461a      	mov	r2, r3
 80033a2:	2300      	movs	r3, #0
 80033a4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033a6:	f7fd fbd3 	bl	8000b50 <HAL_GetTick>
 80033aa:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033ae:	e009      	b.n	80033c4 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033b0:	f7fd fbce 	bl	8000b50 <HAL_GetTick>
 80033b4:	4602      	mov	r2, r0
 80033b6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80033ba:	1ad3      	subs	r3, r2, r3
 80033bc:	2b02      	cmp	r3, #2
 80033be:	d901      	bls.n	80033c4 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 80033c0:	2303      	movs	r3, #3
 80033c2:	e381      	b.n	8003ac8 <HAL_RCC_OscConfig+0xe1c>
 80033c4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80033c8:	2202      	movs	r2, #2
 80033ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033cc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	fa93 f2a3 	rbit	r2, r3
 80033d6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80033da:	601a      	str	r2, [r3, #0]
 80033dc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80033e0:	2202      	movs	r2, #2
 80033e2:	601a      	str	r2, [r3, #0]
 80033e4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	fa93 f2a3 	rbit	r2, r3
 80033ee:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80033f2:	601a      	str	r2, [r3, #0]
 80033f4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80033f8:	2202      	movs	r2, #2
 80033fa:	601a      	str	r2, [r3, #0]
 80033fc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	fa93 f2a3 	rbit	r2, r3
 8003406:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800340a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800340c:	4b6e      	ldr	r3, [pc, #440]	; (80035c8 <HAL_RCC_OscConfig+0x91c>)
 800340e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003410:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003414:	2102      	movs	r1, #2
 8003416:	6019      	str	r1, [r3, #0]
 8003418:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	fa93 f1a3 	rbit	r1, r3
 8003422:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003426:	6019      	str	r1, [r3, #0]
  return result;
 8003428:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	fab3 f383 	clz	r3, r3
 8003432:	b2db      	uxtb	r3, r3
 8003434:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003438:	b2db      	uxtb	r3, r3
 800343a:	f003 031f 	and.w	r3, r3, #31
 800343e:	2101      	movs	r1, #1
 8003440:	fa01 f303 	lsl.w	r3, r1, r3
 8003444:	4013      	ands	r3, r2
 8003446:	2b00      	cmp	r3, #0
 8003448:	d1b2      	bne.n	80033b0 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800344a:	1d3b      	adds	r3, r7, #4
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0304 	and.w	r3, r3, #4
 8003454:	2b00      	cmp	r3, #0
 8003456:	f000 8157 	beq.w	8003708 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800345a:	2300      	movs	r3, #0
 800345c:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003460:	4b59      	ldr	r3, [pc, #356]	; (80035c8 <HAL_RCC_OscConfig+0x91c>)
 8003462:	69db      	ldr	r3, [r3, #28]
 8003464:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003468:	2b00      	cmp	r3, #0
 800346a:	d112      	bne.n	8003492 <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800346c:	4b56      	ldr	r3, [pc, #344]	; (80035c8 <HAL_RCC_OscConfig+0x91c>)
 800346e:	69db      	ldr	r3, [r3, #28]
 8003470:	4a55      	ldr	r2, [pc, #340]	; (80035c8 <HAL_RCC_OscConfig+0x91c>)
 8003472:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003476:	61d3      	str	r3, [r2, #28]
 8003478:	4b53      	ldr	r3, [pc, #332]	; (80035c8 <HAL_RCC_OscConfig+0x91c>)
 800347a:	69db      	ldr	r3, [r3, #28]
 800347c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003480:	f107 030c 	add.w	r3, r7, #12
 8003484:	601a      	str	r2, [r3, #0]
 8003486:	f107 030c 	add.w	r3, r7, #12
 800348a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800348c:	2301      	movs	r3, #1
 800348e:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003492:	4b4f      	ldr	r3, [pc, #316]	; (80035d0 <HAL_RCC_OscConfig+0x924>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800349a:	2b00      	cmp	r3, #0
 800349c:	d11a      	bne.n	80034d4 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800349e:	4b4c      	ldr	r3, [pc, #304]	; (80035d0 <HAL_RCC_OscConfig+0x924>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a4b      	ldr	r2, [pc, #300]	; (80035d0 <HAL_RCC_OscConfig+0x924>)
 80034a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034a8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034aa:	f7fd fb51 	bl	8000b50 <HAL_GetTick>
 80034ae:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034b2:	e009      	b.n	80034c8 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034b4:	f7fd fb4c 	bl	8000b50 <HAL_GetTick>
 80034b8:	4602      	mov	r2, r0
 80034ba:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80034be:	1ad3      	subs	r3, r2, r3
 80034c0:	2b64      	cmp	r3, #100	; 0x64
 80034c2:	d901      	bls.n	80034c8 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 80034c4:	2303      	movs	r3, #3
 80034c6:	e2ff      	b.n	8003ac8 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034c8:	4b41      	ldr	r3, [pc, #260]	; (80035d0 <HAL_RCC_OscConfig+0x924>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d0ef      	beq.n	80034b4 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034d4:	1d3b      	adds	r3, r7, #4
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d106      	bne.n	80034ec <HAL_RCC_OscConfig+0x840>
 80034de:	4b3a      	ldr	r3, [pc, #232]	; (80035c8 <HAL_RCC_OscConfig+0x91c>)
 80034e0:	6a1b      	ldr	r3, [r3, #32]
 80034e2:	4a39      	ldr	r2, [pc, #228]	; (80035c8 <HAL_RCC_OscConfig+0x91c>)
 80034e4:	f043 0301 	orr.w	r3, r3, #1
 80034e8:	6213      	str	r3, [r2, #32]
 80034ea:	e02f      	b.n	800354c <HAL_RCC_OscConfig+0x8a0>
 80034ec:	1d3b      	adds	r3, r7, #4
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d10c      	bne.n	8003510 <HAL_RCC_OscConfig+0x864>
 80034f6:	4b34      	ldr	r3, [pc, #208]	; (80035c8 <HAL_RCC_OscConfig+0x91c>)
 80034f8:	6a1b      	ldr	r3, [r3, #32]
 80034fa:	4a33      	ldr	r2, [pc, #204]	; (80035c8 <HAL_RCC_OscConfig+0x91c>)
 80034fc:	f023 0301 	bic.w	r3, r3, #1
 8003500:	6213      	str	r3, [r2, #32]
 8003502:	4b31      	ldr	r3, [pc, #196]	; (80035c8 <HAL_RCC_OscConfig+0x91c>)
 8003504:	6a1b      	ldr	r3, [r3, #32]
 8003506:	4a30      	ldr	r2, [pc, #192]	; (80035c8 <HAL_RCC_OscConfig+0x91c>)
 8003508:	f023 0304 	bic.w	r3, r3, #4
 800350c:	6213      	str	r3, [r2, #32]
 800350e:	e01d      	b.n	800354c <HAL_RCC_OscConfig+0x8a0>
 8003510:	1d3b      	adds	r3, r7, #4
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	2b05      	cmp	r3, #5
 8003518:	d10c      	bne.n	8003534 <HAL_RCC_OscConfig+0x888>
 800351a:	4b2b      	ldr	r3, [pc, #172]	; (80035c8 <HAL_RCC_OscConfig+0x91c>)
 800351c:	6a1b      	ldr	r3, [r3, #32]
 800351e:	4a2a      	ldr	r2, [pc, #168]	; (80035c8 <HAL_RCC_OscConfig+0x91c>)
 8003520:	f043 0304 	orr.w	r3, r3, #4
 8003524:	6213      	str	r3, [r2, #32]
 8003526:	4b28      	ldr	r3, [pc, #160]	; (80035c8 <HAL_RCC_OscConfig+0x91c>)
 8003528:	6a1b      	ldr	r3, [r3, #32]
 800352a:	4a27      	ldr	r2, [pc, #156]	; (80035c8 <HAL_RCC_OscConfig+0x91c>)
 800352c:	f043 0301 	orr.w	r3, r3, #1
 8003530:	6213      	str	r3, [r2, #32]
 8003532:	e00b      	b.n	800354c <HAL_RCC_OscConfig+0x8a0>
 8003534:	4b24      	ldr	r3, [pc, #144]	; (80035c8 <HAL_RCC_OscConfig+0x91c>)
 8003536:	6a1b      	ldr	r3, [r3, #32]
 8003538:	4a23      	ldr	r2, [pc, #140]	; (80035c8 <HAL_RCC_OscConfig+0x91c>)
 800353a:	f023 0301 	bic.w	r3, r3, #1
 800353e:	6213      	str	r3, [r2, #32]
 8003540:	4b21      	ldr	r3, [pc, #132]	; (80035c8 <HAL_RCC_OscConfig+0x91c>)
 8003542:	6a1b      	ldr	r3, [r3, #32]
 8003544:	4a20      	ldr	r2, [pc, #128]	; (80035c8 <HAL_RCC_OscConfig+0x91c>)
 8003546:	f023 0304 	bic.w	r3, r3, #4
 800354a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800354c:	1d3b      	adds	r3, r7, #4
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d06a      	beq.n	800362c <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003556:	f7fd fafb 	bl	8000b50 <HAL_GetTick>
 800355a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800355e:	e00b      	b.n	8003578 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003560:	f7fd faf6 	bl	8000b50 <HAL_GetTick>
 8003564:	4602      	mov	r2, r0
 8003566:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003570:	4293      	cmp	r3, r2
 8003572:	d901      	bls.n	8003578 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8003574:	2303      	movs	r3, #3
 8003576:	e2a7      	b.n	8003ac8 <HAL_RCC_OscConfig+0xe1c>
 8003578:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800357c:	2202      	movs	r2, #2
 800357e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003580:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	fa93 f2a3 	rbit	r2, r3
 800358a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800358e:	601a      	str	r2, [r3, #0]
 8003590:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003594:	2202      	movs	r2, #2
 8003596:	601a      	str	r2, [r3, #0]
 8003598:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	fa93 f2a3 	rbit	r2, r3
 80035a2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80035a6:	601a      	str	r2, [r3, #0]
  return result;
 80035a8:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80035ac:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035ae:	fab3 f383 	clz	r3, r3
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	095b      	lsrs	r3, r3, #5
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	f043 0302 	orr.w	r3, r3, #2
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	2b02      	cmp	r3, #2
 80035c0:	d108      	bne.n	80035d4 <HAL_RCC_OscConfig+0x928>
 80035c2:	4b01      	ldr	r3, [pc, #4]	; (80035c8 <HAL_RCC_OscConfig+0x91c>)
 80035c4:	6a1b      	ldr	r3, [r3, #32]
 80035c6:	e013      	b.n	80035f0 <HAL_RCC_OscConfig+0x944>
 80035c8:	40021000 	.word	0x40021000
 80035cc:	10908120 	.word	0x10908120
 80035d0:	40007000 	.word	0x40007000
 80035d4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80035d8:	2202      	movs	r2, #2
 80035da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035dc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	fa93 f2a3 	rbit	r2, r3
 80035e6:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80035ea:	601a      	str	r2, [r3, #0]
 80035ec:	4bc0      	ldr	r3, [pc, #768]	; (80038f0 <HAL_RCC_OscConfig+0xc44>)
 80035ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f0:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80035f4:	2102      	movs	r1, #2
 80035f6:	6011      	str	r1, [r2, #0]
 80035f8:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80035fc:	6812      	ldr	r2, [r2, #0]
 80035fe:	fa92 f1a2 	rbit	r1, r2
 8003602:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003606:	6011      	str	r1, [r2, #0]
  return result;
 8003608:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800360c:	6812      	ldr	r2, [r2, #0]
 800360e:	fab2 f282 	clz	r2, r2
 8003612:	b2d2      	uxtb	r2, r2
 8003614:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003618:	b2d2      	uxtb	r2, r2
 800361a:	f002 021f 	and.w	r2, r2, #31
 800361e:	2101      	movs	r1, #1
 8003620:	fa01 f202 	lsl.w	r2, r1, r2
 8003624:	4013      	ands	r3, r2
 8003626:	2b00      	cmp	r3, #0
 8003628:	d09a      	beq.n	8003560 <HAL_RCC_OscConfig+0x8b4>
 800362a:	e063      	b.n	80036f4 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800362c:	f7fd fa90 	bl	8000b50 <HAL_GetTick>
 8003630:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003634:	e00b      	b.n	800364e <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003636:	f7fd fa8b 	bl	8000b50 <HAL_GetTick>
 800363a:	4602      	mov	r2, r0
 800363c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003640:	1ad3      	subs	r3, r2, r3
 8003642:	f241 3288 	movw	r2, #5000	; 0x1388
 8003646:	4293      	cmp	r3, r2
 8003648:	d901      	bls.n	800364e <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 800364a:	2303      	movs	r3, #3
 800364c:	e23c      	b.n	8003ac8 <HAL_RCC_OscConfig+0xe1c>
 800364e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003652:	2202      	movs	r2, #2
 8003654:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003656:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	fa93 f2a3 	rbit	r2, r3
 8003660:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003664:	601a      	str	r2, [r3, #0]
 8003666:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800366a:	2202      	movs	r2, #2
 800366c:	601a      	str	r2, [r3, #0]
 800366e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	fa93 f2a3 	rbit	r2, r3
 8003678:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800367c:	601a      	str	r2, [r3, #0]
  return result;
 800367e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003682:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003684:	fab3 f383 	clz	r3, r3
 8003688:	b2db      	uxtb	r3, r3
 800368a:	095b      	lsrs	r3, r3, #5
 800368c:	b2db      	uxtb	r3, r3
 800368e:	f043 0302 	orr.w	r3, r3, #2
 8003692:	b2db      	uxtb	r3, r3
 8003694:	2b02      	cmp	r3, #2
 8003696:	d102      	bne.n	800369e <HAL_RCC_OscConfig+0x9f2>
 8003698:	4b95      	ldr	r3, [pc, #596]	; (80038f0 <HAL_RCC_OscConfig+0xc44>)
 800369a:	6a1b      	ldr	r3, [r3, #32]
 800369c:	e00d      	b.n	80036ba <HAL_RCC_OscConfig+0xa0e>
 800369e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80036a2:	2202      	movs	r2, #2
 80036a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036a6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	fa93 f2a3 	rbit	r2, r3
 80036b0:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80036b4:	601a      	str	r2, [r3, #0]
 80036b6:	4b8e      	ldr	r3, [pc, #568]	; (80038f0 <HAL_RCC_OscConfig+0xc44>)
 80036b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ba:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80036be:	2102      	movs	r1, #2
 80036c0:	6011      	str	r1, [r2, #0]
 80036c2:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80036c6:	6812      	ldr	r2, [r2, #0]
 80036c8:	fa92 f1a2 	rbit	r1, r2
 80036cc:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80036d0:	6011      	str	r1, [r2, #0]
  return result;
 80036d2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80036d6:	6812      	ldr	r2, [r2, #0]
 80036d8:	fab2 f282 	clz	r2, r2
 80036dc:	b2d2      	uxtb	r2, r2
 80036de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036e2:	b2d2      	uxtb	r2, r2
 80036e4:	f002 021f 	and.w	r2, r2, #31
 80036e8:	2101      	movs	r1, #1
 80036ea:	fa01 f202 	lsl.w	r2, r1, r2
 80036ee:	4013      	ands	r3, r2
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d1a0      	bne.n	8003636 <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80036f4:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d105      	bne.n	8003708 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036fc:	4b7c      	ldr	r3, [pc, #496]	; (80038f0 <HAL_RCC_OscConfig+0xc44>)
 80036fe:	69db      	ldr	r3, [r3, #28]
 8003700:	4a7b      	ldr	r2, [pc, #492]	; (80038f0 <HAL_RCC_OscConfig+0xc44>)
 8003702:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003706:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003708:	1d3b      	adds	r3, r7, #4
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	699b      	ldr	r3, [r3, #24]
 800370e:	2b00      	cmp	r3, #0
 8003710:	f000 81d9 	beq.w	8003ac6 <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003714:	4b76      	ldr	r3, [pc, #472]	; (80038f0 <HAL_RCC_OscConfig+0xc44>)
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f003 030c 	and.w	r3, r3, #12
 800371c:	2b08      	cmp	r3, #8
 800371e:	f000 81a6 	beq.w	8003a6e <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003722:	1d3b      	adds	r3, r7, #4
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	699b      	ldr	r3, [r3, #24]
 8003728:	2b02      	cmp	r3, #2
 800372a:	f040 811e 	bne.w	800396a <HAL_RCC_OscConfig+0xcbe>
 800372e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8003732:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003736:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003738:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	fa93 f2a3 	rbit	r2, r3
 8003742:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003746:	601a      	str	r2, [r3, #0]
  return result;
 8003748:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800374c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800374e:	fab3 f383 	clz	r3, r3
 8003752:	b2db      	uxtb	r3, r3
 8003754:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003758:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	461a      	mov	r2, r3
 8003760:	2300      	movs	r3, #0
 8003762:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003764:	f7fd f9f4 	bl	8000b50 <HAL_GetTick>
 8003768:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800376c:	e009      	b.n	8003782 <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800376e:	f7fd f9ef 	bl	8000b50 <HAL_GetTick>
 8003772:	4602      	mov	r2, r0
 8003774:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	2b02      	cmp	r3, #2
 800377c:	d901      	bls.n	8003782 <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 800377e:	2303      	movs	r3, #3
 8003780:	e1a2      	b.n	8003ac8 <HAL_RCC_OscConfig+0xe1c>
 8003782:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003786:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800378a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800378c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	fa93 f2a3 	rbit	r2, r3
 8003796:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800379a:	601a      	str	r2, [r3, #0]
  return result;
 800379c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80037a0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037a2:	fab3 f383 	clz	r3, r3
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	095b      	lsrs	r3, r3, #5
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	f043 0301 	orr.w	r3, r3, #1
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d102      	bne.n	80037bc <HAL_RCC_OscConfig+0xb10>
 80037b6:	4b4e      	ldr	r3, [pc, #312]	; (80038f0 <HAL_RCC_OscConfig+0xc44>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	e01b      	b.n	80037f4 <HAL_RCC_OscConfig+0xb48>
 80037bc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80037c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037c6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	fa93 f2a3 	rbit	r2, r3
 80037d0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80037d4:	601a      	str	r2, [r3, #0]
 80037d6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80037da:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037de:	601a      	str	r2, [r3, #0]
 80037e0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	fa93 f2a3 	rbit	r2, r3
 80037ea:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80037ee:	601a      	str	r2, [r3, #0]
 80037f0:	4b3f      	ldr	r3, [pc, #252]	; (80038f0 <HAL_RCC_OscConfig+0xc44>)
 80037f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f4:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80037f8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80037fc:	6011      	str	r1, [r2, #0]
 80037fe:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8003802:	6812      	ldr	r2, [r2, #0]
 8003804:	fa92 f1a2 	rbit	r1, r2
 8003808:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800380c:	6011      	str	r1, [r2, #0]
  return result;
 800380e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003812:	6812      	ldr	r2, [r2, #0]
 8003814:	fab2 f282 	clz	r2, r2
 8003818:	b2d2      	uxtb	r2, r2
 800381a:	f042 0220 	orr.w	r2, r2, #32
 800381e:	b2d2      	uxtb	r2, r2
 8003820:	f002 021f 	and.w	r2, r2, #31
 8003824:	2101      	movs	r1, #1
 8003826:	fa01 f202 	lsl.w	r2, r1, r2
 800382a:	4013      	ands	r3, r2
 800382c:	2b00      	cmp	r3, #0
 800382e:	d19e      	bne.n	800376e <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003830:	4b2f      	ldr	r3, [pc, #188]	; (80038f0 <HAL_RCC_OscConfig+0xc44>)
 8003832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003834:	f023 020f 	bic.w	r2, r3, #15
 8003838:	1d3b      	adds	r3, r7, #4
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383e:	492c      	ldr	r1, [pc, #176]	; (80038f0 <HAL_RCC_OscConfig+0xc44>)
 8003840:	4313      	orrs	r3, r2
 8003842:	62cb      	str	r3, [r1, #44]	; 0x2c
 8003844:	4b2a      	ldr	r3, [pc, #168]	; (80038f0 <HAL_RCC_OscConfig+0xc44>)
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 800384c:	1d3b      	adds	r3, r7, #4
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	6a19      	ldr	r1, [r3, #32]
 8003852:	1d3b      	adds	r3, r7, #4
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	69db      	ldr	r3, [r3, #28]
 8003858:	430b      	orrs	r3, r1
 800385a:	4925      	ldr	r1, [pc, #148]	; (80038f0 <HAL_RCC_OscConfig+0xc44>)
 800385c:	4313      	orrs	r3, r2
 800385e:	604b      	str	r3, [r1, #4]
 8003860:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003864:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003868:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800386a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	fa93 f2a3 	rbit	r2, r3
 8003874:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003878:	601a      	str	r2, [r3, #0]
  return result;
 800387a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800387e:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003880:	fab3 f383 	clz	r3, r3
 8003884:	b2db      	uxtb	r3, r3
 8003886:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800388a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	461a      	mov	r2, r3
 8003892:	2301      	movs	r3, #1
 8003894:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003896:	f7fd f95b 	bl	8000b50 <HAL_GetTick>
 800389a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800389e:	e009      	b.n	80038b4 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038a0:	f7fd f956 	bl	8000b50 <HAL_GetTick>
 80038a4:	4602      	mov	r2, r0
 80038a6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80038aa:	1ad3      	subs	r3, r2, r3
 80038ac:	2b02      	cmp	r3, #2
 80038ae:	d901      	bls.n	80038b4 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80038b0:	2303      	movs	r3, #3
 80038b2:	e109      	b.n	8003ac8 <HAL_RCC_OscConfig+0xe1c>
 80038b4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80038b8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80038bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038be:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	fa93 f2a3 	rbit	r2, r3
 80038c8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80038cc:	601a      	str	r2, [r3, #0]
  return result;
 80038ce:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80038d2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80038d4:	fab3 f383 	clz	r3, r3
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	095b      	lsrs	r3, r3, #5
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	f043 0301 	orr.w	r3, r3, #1
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d105      	bne.n	80038f4 <HAL_RCC_OscConfig+0xc48>
 80038e8:	4b01      	ldr	r3, [pc, #4]	; (80038f0 <HAL_RCC_OscConfig+0xc44>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	e01e      	b.n	800392c <HAL_RCC_OscConfig+0xc80>
 80038ee:	bf00      	nop
 80038f0:	40021000 	.word	0x40021000
 80038f4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80038f8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80038fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038fe:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	fa93 f2a3 	rbit	r2, r3
 8003908:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800390c:	601a      	str	r2, [r3, #0]
 800390e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003912:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003916:	601a      	str	r2, [r3, #0]
 8003918:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	fa93 f2a3 	rbit	r2, r3
 8003922:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003926:	601a      	str	r2, [r3, #0]
 8003928:	4b6a      	ldr	r3, [pc, #424]	; (8003ad4 <HAL_RCC_OscConfig+0xe28>)
 800392a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003930:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003934:	6011      	str	r1, [r2, #0]
 8003936:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800393a:	6812      	ldr	r2, [r2, #0]
 800393c:	fa92 f1a2 	rbit	r1, r2
 8003940:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003944:	6011      	str	r1, [r2, #0]
  return result;
 8003946:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800394a:	6812      	ldr	r2, [r2, #0]
 800394c:	fab2 f282 	clz	r2, r2
 8003950:	b2d2      	uxtb	r2, r2
 8003952:	f042 0220 	orr.w	r2, r2, #32
 8003956:	b2d2      	uxtb	r2, r2
 8003958:	f002 021f 	and.w	r2, r2, #31
 800395c:	2101      	movs	r1, #1
 800395e:	fa01 f202 	lsl.w	r2, r1, r2
 8003962:	4013      	ands	r3, r2
 8003964:	2b00      	cmp	r3, #0
 8003966:	d09b      	beq.n	80038a0 <HAL_RCC_OscConfig+0xbf4>
 8003968:	e0ad      	b.n	8003ac6 <HAL_RCC_OscConfig+0xe1a>
 800396a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800396e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003972:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003974:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	fa93 f2a3 	rbit	r2, r3
 800397e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003982:	601a      	str	r2, [r3, #0]
  return result;
 8003984:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003988:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800398a:	fab3 f383 	clz	r3, r3
 800398e:	b2db      	uxtb	r3, r3
 8003990:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003994:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003998:	009b      	lsls	r3, r3, #2
 800399a:	461a      	mov	r2, r3
 800399c:	2300      	movs	r3, #0
 800399e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039a0:	f7fd f8d6 	bl	8000b50 <HAL_GetTick>
 80039a4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039a8:	e009      	b.n	80039be <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039aa:	f7fd f8d1 	bl	8000b50 <HAL_GetTick>
 80039ae:	4602      	mov	r2, r0
 80039b0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	2b02      	cmp	r3, #2
 80039b8:	d901      	bls.n	80039be <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80039ba:	2303      	movs	r3, #3
 80039bc:	e084      	b.n	8003ac8 <HAL_RCC_OscConfig+0xe1c>
 80039be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80039c2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80039c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	fa93 f2a3 	rbit	r2, r3
 80039d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80039d6:	601a      	str	r2, [r3, #0]
  return result;
 80039d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80039dc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039de:	fab3 f383 	clz	r3, r3
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	095b      	lsrs	r3, r3, #5
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	f043 0301 	orr.w	r3, r3, #1
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d102      	bne.n	80039f8 <HAL_RCC_OscConfig+0xd4c>
 80039f2:	4b38      	ldr	r3, [pc, #224]	; (8003ad4 <HAL_RCC_OscConfig+0xe28>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	e01b      	b.n	8003a30 <HAL_RCC_OscConfig+0xd84>
 80039f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039fc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a00:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	fa93 f2a3 	rbit	r2, r3
 8003a0c:	f107 0320 	add.w	r3, r7, #32
 8003a10:	601a      	str	r2, [r3, #0]
 8003a12:	f107 031c 	add.w	r3, r7, #28
 8003a16:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a1a:	601a      	str	r2, [r3, #0]
 8003a1c:	f107 031c 	add.w	r3, r7, #28
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	fa93 f2a3 	rbit	r2, r3
 8003a26:	f107 0318 	add.w	r3, r7, #24
 8003a2a:	601a      	str	r2, [r3, #0]
 8003a2c:	4b29      	ldr	r3, [pc, #164]	; (8003ad4 <HAL_RCC_OscConfig+0xe28>)
 8003a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a30:	f107 0214 	add.w	r2, r7, #20
 8003a34:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003a38:	6011      	str	r1, [r2, #0]
 8003a3a:	f107 0214 	add.w	r2, r7, #20
 8003a3e:	6812      	ldr	r2, [r2, #0]
 8003a40:	fa92 f1a2 	rbit	r1, r2
 8003a44:	f107 0210 	add.w	r2, r7, #16
 8003a48:	6011      	str	r1, [r2, #0]
  return result;
 8003a4a:	f107 0210 	add.w	r2, r7, #16
 8003a4e:	6812      	ldr	r2, [r2, #0]
 8003a50:	fab2 f282 	clz	r2, r2
 8003a54:	b2d2      	uxtb	r2, r2
 8003a56:	f042 0220 	orr.w	r2, r2, #32
 8003a5a:	b2d2      	uxtb	r2, r2
 8003a5c:	f002 021f 	and.w	r2, r2, #31
 8003a60:	2101      	movs	r1, #1
 8003a62:	fa01 f202 	lsl.w	r2, r1, r2
 8003a66:	4013      	ands	r3, r2
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d19e      	bne.n	80039aa <HAL_RCC_OscConfig+0xcfe>
 8003a6c:	e02b      	b.n	8003ac6 <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a6e:	1d3b      	adds	r3, r7, #4
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	699b      	ldr	r3, [r3, #24]
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d101      	bne.n	8003a7c <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e025      	b.n	8003ac8 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003a7c:	4b15      	ldr	r3, [pc, #84]	; (8003ad4 <HAL_RCC_OscConfig+0xe28>)
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8003a84:	4b13      	ldr	r3, [pc, #76]	; (8003ad4 <HAL_RCC_OscConfig+0xe28>)
 8003a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a88:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003a8c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003a90:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8003a94:	1d3b      	adds	r3, r7, #4
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	69db      	ldr	r3, [r3, #28]
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d111      	bne.n	8003ac2 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003a9e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003aa2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003aa6:	1d3b      	adds	r3, r7, #4
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d108      	bne.n	8003ac2 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8003ab0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003ab4:	f003 020f 	and.w	r2, r3, #15
 8003ab8:	1d3b      	adds	r3, r7, #4
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d001      	beq.n	8003ac6 <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e000      	b.n	8003ac8 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8003ac6:	2300      	movs	r3, #0
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	40021000 	.word	0x40021000

08003ad8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b09e      	sub	sp, #120	; 0x78
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
 8003ae0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d101      	bne.n	8003af0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	e162      	b.n	8003db6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003af0:	4b90      	ldr	r3, [pc, #576]	; (8003d34 <HAL_RCC_ClockConfig+0x25c>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 0307 	and.w	r3, r3, #7
 8003af8:	683a      	ldr	r2, [r7, #0]
 8003afa:	429a      	cmp	r2, r3
 8003afc:	d910      	bls.n	8003b20 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003afe:	4b8d      	ldr	r3, [pc, #564]	; (8003d34 <HAL_RCC_ClockConfig+0x25c>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f023 0207 	bic.w	r2, r3, #7
 8003b06:	498b      	ldr	r1, [pc, #556]	; (8003d34 <HAL_RCC_ClockConfig+0x25c>)
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b0e:	4b89      	ldr	r3, [pc, #548]	; (8003d34 <HAL_RCC_ClockConfig+0x25c>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 0307 	and.w	r3, r3, #7
 8003b16:	683a      	ldr	r2, [r7, #0]
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d001      	beq.n	8003b20 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e14a      	b.n	8003db6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 0302 	and.w	r3, r3, #2
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d008      	beq.n	8003b3e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b2c:	4b82      	ldr	r3, [pc, #520]	; (8003d38 <HAL_RCC_ClockConfig+0x260>)
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	497f      	ldr	r1, [pc, #508]	; (8003d38 <HAL_RCC_ClockConfig+0x260>)
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 0301 	and.w	r3, r3, #1
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	f000 80dc 	beq.w	8003d04 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d13c      	bne.n	8003bce <HAL_RCC_ClockConfig+0xf6>
 8003b54:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b58:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b5c:	fa93 f3a3 	rbit	r3, r3
 8003b60:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003b62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b64:	fab3 f383 	clz	r3, r3
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	095b      	lsrs	r3, r3, #5
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	f043 0301 	orr.w	r3, r3, #1
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d102      	bne.n	8003b7e <HAL_RCC_ClockConfig+0xa6>
 8003b78:	4b6f      	ldr	r3, [pc, #444]	; (8003d38 <HAL_RCC_ClockConfig+0x260>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	e00f      	b.n	8003b9e <HAL_RCC_ClockConfig+0xc6>
 8003b7e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b82:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b84:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b86:	fa93 f3a3 	rbit	r3, r3
 8003b8a:	667b      	str	r3, [r7, #100]	; 0x64
 8003b8c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b90:	663b      	str	r3, [r7, #96]	; 0x60
 8003b92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b94:	fa93 f3a3 	rbit	r3, r3
 8003b98:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b9a:	4b67      	ldr	r3, [pc, #412]	; (8003d38 <HAL_RCC_ClockConfig+0x260>)
 8003b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003ba2:	65ba      	str	r2, [r7, #88]	; 0x58
 8003ba4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003ba6:	fa92 f2a2 	rbit	r2, r2
 8003baa:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003bac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003bae:	fab2 f282 	clz	r2, r2
 8003bb2:	b2d2      	uxtb	r2, r2
 8003bb4:	f042 0220 	orr.w	r2, r2, #32
 8003bb8:	b2d2      	uxtb	r2, r2
 8003bba:	f002 021f 	and.w	r2, r2, #31
 8003bbe:	2101      	movs	r1, #1
 8003bc0:	fa01 f202 	lsl.w	r2, r1, r2
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d17b      	bne.n	8003cc2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e0f3      	b.n	8003db6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	2b02      	cmp	r3, #2
 8003bd4:	d13c      	bne.n	8003c50 <HAL_RCC_ClockConfig+0x178>
 8003bd6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003bda:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bdc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bde:	fa93 f3a3 	rbit	r3, r3
 8003be2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003be4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003be6:	fab3 f383 	clz	r3, r3
 8003bea:	b2db      	uxtb	r3, r3
 8003bec:	095b      	lsrs	r3, r3, #5
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	f043 0301 	orr.w	r3, r3, #1
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d102      	bne.n	8003c00 <HAL_RCC_ClockConfig+0x128>
 8003bfa:	4b4f      	ldr	r3, [pc, #316]	; (8003d38 <HAL_RCC_ClockConfig+0x260>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	e00f      	b.n	8003c20 <HAL_RCC_ClockConfig+0x148>
 8003c00:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c04:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c08:	fa93 f3a3 	rbit	r3, r3
 8003c0c:	647b      	str	r3, [r7, #68]	; 0x44
 8003c0e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c12:	643b      	str	r3, [r7, #64]	; 0x40
 8003c14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c16:	fa93 f3a3 	rbit	r3, r3
 8003c1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c1c:	4b46      	ldr	r3, [pc, #280]	; (8003d38 <HAL_RCC_ClockConfig+0x260>)
 8003c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c20:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c24:	63ba      	str	r2, [r7, #56]	; 0x38
 8003c26:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c28:	fa92 f2a2 	rbit	r2, r2
 8003c2c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003c2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c30:	fab2 f282 	clz	r2, r2
 8003c34:	b2d2      	uxtb	r2, r2
 8003c36:	f042 0220 	orr.w	r2, r2, #32
 8003c3a:	b2d2      	uxtb	r2, r2
 8003c3c:	f002 021f 	and.w	r2, r2, #31
 8003c40:	2101      	movs	r1, #1
 8003c42:	fa01 f202 	lsl.w	r2, r1, r2
 8003c46:	4013      	ands	r3, r2
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d13a      	bne.n	8003cc2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e0b2      	b.n	8003db6 <HAL_RCC_ClockConfig+0x2de>
 8003c50:	2302      	movs	r3, #2
 8003c52:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c56:	fa93 f3a3 	rbit	r3, r3
 8003c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c5e:	fab3 f383 	clz	r3, r3
 8003c62:	b2db      	uxtb	r3, r3
 8003c64:	095b      	lsrs	r3, r3, #5
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	f043 0301 	orr.w	r3, r3, #1
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d102      	bne.n	8003c78 <HAL_RCC_ClockConfig+0x1a0>
 8003c72:	4b31      	ldr	r3, [pc, #196]	; (8003d38 <HAL_RCC_ClockConfig+0x260>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	e00d      	b.n	8003c94 <HAL_RCC_ClockConfig+0x1bc>
 8003c78:	2302      	movs	r3, #2
 8003c7a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c7e:	fa93 f3a3 	rbit	r3, r3
 8003c82:	627b      	str	r3, [r7, #36]	; 0x24
 8003c84:	2302      	movs	r3, #2
 8003c86:	623b      	str	r3, [r7, #32]
 8003c88:	6a3b      	ldr	r3, [r7, #32]
 8003c8a:	fa93 f3a3 	rbit	r3, r3
 8003c8e:	61fb      	str	r3, [r7, #28]
 8003c90:	4b29      	ldr	r3, [pc, #164]	; (8003d38 <HAL_RCC_ClockConfig+0x260>)
 8003c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c94:	2202      	movs	r2, #2
 8003c96:	61ba      	str	r2, [r7, #24]
 8003c98:	69ba      	ldr	r2, [r7, #24]
 8003c9a:	fa92 f2a2 	rbit	r2, r2
 8003c9e:	617a      	str	r2, [r7, #20]
  return result;
 8003ca0:	697a      	ldr	r2, [r7, #20]
 8003ca2:	fab2 f282 	clz	r2, r2
 8003ca6:	b2d2      	uxtb	r2, r2
 8003ca8:	f042 0220 	orr.w	r2, r2, #32
 8003cac:	b2d2      	uxtb	r2, r2
 8003cae:	f002 021f 	and.w	r2, r2, #31
 8003cb2:	2101      	movs	r1, #1
 8003cb4:	fa01 f202 	lsl.w	r2, r1, r2
 8003cb8:	4013      	ands	r3, r2
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d101      	bne.n	8003cc2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e079      	b.n	8003db6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003cc2:	4b1d      	ldr	r3, [pc, #116]	; (8003d38 <HAL_RCC_ClockConfig+0x260>)
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	f023 0203 	bic.w	r2, r3, #3
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	491a      	ldr	r1, [pc, #104]	; (8003d38 <HAL_RCC_ClockConfig+0x260>)
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003cd4:	f7fc ff3c 	bl	8000b50 <HAL_GetTick>
 8003cd8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cda:	e00a      	b.n	8003cf2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cdc:	f7fc ff38 	bl	8000b50 <HAL_GetTick>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d901      	bls.n	8003cf2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	e061      	b.n	8003db6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cf2:	4b11      	ldr	r3, [pc, #68]	; (8003d38 <HAL_RCC_ClockConfig+0x260>)
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	f003 020c 	and.w	r2, r3, #12
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	009b      	lsls	r3, r3, #2
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d1eb      	bne.n	8003cdc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d04:	4b0b      	ldr	r3, [pc, #44]	; (8003d34 <HAL_RCC_ClockConfig+0x25c>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 0307 	and.w	r3, r3, #7
 8003d0c:	683a      	ldr	r2, [r7, #0]
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d214      	bcs.n	8003d3c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d12:	4b08      	ldr	r3, [pc, #32]	; (8003d34 <HAL_RCC_ClockConfig+0x25c>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f023 0207 	bic.w	r2, r3, #7
 8003d1a:	4906      	ldr	r1, [pc, #24]	; (8003d34 <HAL_RCC_ClockConfig+0x25c>)
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d22:	4b04      	ldr	r3, [pc, #16]	; (8003d34 <HAL_RCC_ClockConfig+0x25c>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 0307 	and.w	r3, r3, #7
 8003d2a:	683a      	ldr	r2, [r7, #0]
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d005      	beq.n	8003d3c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	e040      	b.n	8003db6 <HAL_RCC_ClockConfig+0x2de>
 8003d34:	40022000 	.word	0x40022000
 8003d38:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 0304 	and.w	r3, r3, #4
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d008      	beq.n	8003d5a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d48:	4b1d      	ldr	r3, [pc, #116]	; (8003dc0 <HAL_RCC_ClockConfig+0x2e8>)
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	491a      	ldr	r1, [pc, #104]	; (8003dc0 <HAL_RCC_ClockConfig+0x2e8>)
 8003d56:	4313      	orrs	r3, r2
 8003d58:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 0308 	and.w	r3, r3, #8
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d009      	beq.n	8003d7a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d66:	4b16      	ldr	r3, [pc, #88]	; (8003dc0 <HAL_RCC_ClockConfig+0x2e8>)
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	691b      	ldr	r3, [r3, #16]
 8003d72:	00db      	lsls	r3, r3, #3
 8003d74:	4912      	ldr	r1, [pc, #72]	; (8003dc0 <HAL_RCC_ClockConfig+0x2e8>)
 8003d76:	4313      	orrs	r3, r2
 8003d78:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003d7a:	f000 f829 	bl	8003dd0 <HAL_RCC_GetSysClockFreq>
 8003d7e:	4601      	mov	r1, r0
 8003d80:	4b0f      	ldr	r3, [pc, #60]	; (8003dc0 <HAL_RCC_ClockConfig+0x2e8>)
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d88:	22f0      	movs	r2, #240	; 0xf0
 8003d8a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d8c:	693a      	ldr	r2, [r7, #16]
 8003d8e:	fa92 f2a2 	rbit	r2, r2
 8003d92:	60fa      	str	r2, [r7, #12]
  return result;
 8003d94:	68fa      	ldr	r2, [r7, #12]
 8003d96:	fab2 f282 	clz	r2, r2
 8003d9a:	b2d2      	uxtb	r2, r2
 8003d9c:	40d3      	lsrs	r3, r2
 8003d9e:	4a09      	ldr	r2, [pc, #36]	; (8003dc4 <HAL_RCC_ClockConfig+0x2ec>)
 8003da0:	5cd3      	ldrb	r3, [r2, r3]
 8003da2:	fa21 f303 	lsr.w	r3, r1, r3
 8003da6:	4a08      	ldr	r2, [pc, #32]	; (8003dc8 <HAL_RCC_ClockConfig+0x2f0>)
 8003da8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003daa:	4b08      	ldr	r3, [pc, #32]	; (8003dcc <HAL_RCC_ClockConfig+0x2f4>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4618      	mov	r0, r3
 8003db0:	f7fc fe8a 	bl	8000ac8 <HAL_InitTick>
  
  return HAL_OK;
 8003db4:	2300      	movs	r3, #0
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3778      	adds	r7, #120	; 0x78
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}
 8003dbe:	bf00      	nop
 8003dc0:	40021000 	.word	0x40021000
 8003dc4:	0800736c 	.word	0x0800736c
 8003dc8:	20000000 	.word	0x20000000
 8003dcc:	20000004 	.word	0x20000004

08003dd0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b08b      	sub	sp, #44	; 0x2c
 8003dd4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	61fb      	str	r3, [r7, #28]
 8003dda:	2300      	movs	r3, #0
 8003ddc:	61bb      	str	r3, [r7, #24]
 8003dde:	2300      	movs	r3, #0
 8003de0:	627b      	str	r3, [r7, #36]	; 0x24
 8003de2:	2300      	movs	r3, #0
 8003de4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003de6:	2300      	movs	r3, #0
 8003de8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003dea:	4b2a      	ldr	r3, [pc, #168]	; (8003e94 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003df0:	69fb      	ldr	r3, [r7, #28]
 8003df2:	f003 030c 	and.w	r3, r3, #12
 8003df6:	2b04      	cmp	r3, #4
 8003df8:	d002      	beq.n	8003e00 <HAL_RCC_GetSysClockFreq+0x30>
 8003dfa:	2b08      	cmp	r3, #8
 8003dfc:	d003      	beq.n	8003e06 <HAL_RCC_GetSysClockFreq+0x36>
 8003dfe:	e03f      	b.n	8003e80 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003e00:	4b25      	ldr	r3, [pc, #148]	; (8003e98 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003e02:	623b      	str	r3, [r7, #32]
      break;
 8003e04:	e03f      	b.n	8003e86 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003e06:	69fb      	ldr	r3, [r7, #28]
 8003e08:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003e0c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003e10:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e12:	68ba      	ldr	r2, [r7, #8]
 8003e14:	fa92 f2a2 	rbit	r2, r2
 8003e18:	607a      	str	r2, [r7, #4]
  return result;
 8003e1a:	687a      	ldr	r2, [r7, #4]
 8003e1c:	fab2 f282 	clz	r2, r2
 8003e20:	b2d2      	uxtb	r2, r2
 8003e22:	40d3      	lsrs	r3, r2
 8003e24:	4a1d      	ldr	r2, [pc, #116]	; (8003e9c <HAL_RCC_GetSysClockFreq+0xcc>)
 8003e26:	5cd3      	ldrb	r3, [r2, r3]
 8003e28:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003e2a:	4b1a      	ldr	r3, [pc, #104]	; (8003e94 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e2e:	f003 030f 	and.w	r3, r3, #15
 8003e32:	220f      	movs	r2, #15
 8003e34:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e36:	693a      	ldr	r2, [r7, #16]
 8003e38:	fa92 f2a2 	rbit	r2, r2
 8003e3c:	60fa      	str	r2, [r7, #12]
  return result;
 8003e3e:	68fa      	ldr	r2, [r7, #12]
 8003e40:	fab2 f282 	clz	r2, r2
 8003e44:	b2d2      	uxtb	r2, r2
 8003e46:	40d3      	lsrs	r3, r2
 8003e48:	4a15      	ldr	r2, [pc, #84]	; (8003ea0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003e4a:	5cd3      	ldrb	r3, [r2, r3]
 8003e4c:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8003e4e:	69fb      	ldr	r3, [r7, #28]
 8003e50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d008      	beq.n	8003e6a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003e58:	4a0f      	ldr	r2, [pc, #60]	; (8003e98 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003e5a:	69bb      	ldr	r3, [r7, #24]
 8003e5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	fb02 f303 	mul.w	r3, r2, r3
 8003e66:	627b      	str	r3, [r7, #36]	; 0x24
 8003e68:	e007      	b.n	8003e7a <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003e6a:	4a0b      	ldr	r2, [pc, #44]	; (8003e98 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003e6c:	69bb      	ldr	r3, [r7, #24]
 8003e6e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	fb02 f303 	mul.w	r3, r2, r3
 8003e78:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7c:	623b      	str	r3, [r7, #32]
      break;
 8003e7e:	e002      	b.n	8003e86 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003e80:	4b05      	ldr	r3, [pc, #20]	; (8003e98 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003e82:	623b      	str	r3, [r7, #32]
      break;
 8003e84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e86:	6a3b      	ldr	r3, [r7, #32]
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	372c      	adds	r7, #44	; 0x2c
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr
 8003e94:	40021000 	.word	0x40021000
 8003e98:	007a1200 	.word	0x007a1200
 8003e9c:	08007384 	.word	0x08007384
 8003ea0:	08007394 	.word	0x08007394

08003ea4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ea8:	4b03      	ldr	r3, [pc, #12]	; (8003eb8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr
 8003eb6:	bf00      	nop
 8003eb8:	20000000 	.word	0x20000000

08003ebc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b082      	sub	sp, #8
 8003ec0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003ec2:	f7ff ffef 	bl	8003ea4 <HAL_RCC_GetHCLKFreq>
 8003ec6:	4601      	mov	r1, r0
 8003ec8:	4b0b      	ldr	r3, [pc, #44]	; (8003ef8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003ed0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003ed4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ed6:	687a      	ldr	r2, [r7, #4]
 8003ed8:	fa92 f2a2 	rbit	r2, r2
 8003edc:	603a      	str	r2, [r7, #0]
  return result;
 8003ede:	683a      	ldr	r2, [r7, #0]
 8003ee0:	fab2 f282 	clz	r2, r2
 8003ee4:	b2d2      	uxtb	r2, r2
 8003ee6:	40d3      	lsrs	r3, r2
 8003ee8:	4a04      	ldr	r2, [pc, #16]	; (8003efc <HAL_RCC_GetPCLK1Freq+0x40>)
 8003eea:	5cd3      	ldrb	r3, [r2, r3]
 8003eec:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3708      	adds	r7, #8
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}
 8003ef8:	40021000 	.word	0x40021000
 8003efc:	0800737c 	.word	0x0800737c

08003f00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b082      	sub	sp, #8
 8003f04:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003f06:	f7ff ffcd 	bl	8003ea4 <HAL_RCC_GetHCLKFreq>
 8003f0a:	4601      	mov	r1, r0
 8003f0c:	4b0b      	ldr	r3, [pc, #44]	; (8003f3c <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003f14:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003f18:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	fa92 f2a2 	rbit	r2, r2
 8003f20:	603a      	str	r2, [r7, #0]
  return result;
 8003f22:	683a      	ldr	r2, [r7, #0]
 8003f24:	fab2 f282 	clz	r2, r2
 8003f28:	b2d2      	uxtb	r2, r2
 8003f2a:	40d3      	lsrs	r3, r2
 8003f2c:	4a04      	ldr	r2, [pc, #16]	; (8003f40 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003f2e:	5cd3      	ldrb	r3, [r2, r3]
 8003f30:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003f34:	4618      	mov	r0, r3
 8003f36:	3708      	adds	r7, #8
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}
 8003f3c:	40021000 	.word	0x40021000
 8003f40:	0800737c 	.word	0x0800737c

08003f44 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b092      	sub	sp, #72	; 0x48
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003f50:	2300      	movs	r3, #0
 8003f52:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003f54:	2300      	movs	r3, #0
 8003f56:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	f000 80d4 	beq.w	8004110 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f68:	4b4e      	ldr	r3, [pc, #312]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f6a:	69db      	ldr	r3, [r3, #28]
 8003f6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d10e      	bne.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f74:	4b4b      	ldr	r3, [pc, #300]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f76:	69db      	ldr	r3, [r3, #28]
 8003f78:	4a4a      	ldr	r2, [pc, #296]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f7e:	61d3      	str	r3, [r2, #28]
 8003f80:	4b48      	ldr	r3, [pc, #288]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f82:	69db      	ldr	r3, [r3, #28]
 8003f84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f88:	60bb      	str	r3, [r7, #8]
 8003f8a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f92:	4b45      	ldr	r3, [pc, #276]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d118      	bne.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f9e:	4b42      	ldr	r3, [pc, #264]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a41      	ldr	r2, [pc, #260]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003fa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fa8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003faa:	f7fc fdd1 	bl	8000b50 <HAL_GetTick>
 8003fae:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fb0:	e008      	b.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fb2:	f7fc fdcd 	bl	8000b50 <HAL_GetTick>
 8003fb6:	4602      	mov	r2, r0
 8003fb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fba:	1ad3      	subs	r3, r2, r3
 8003fbc:	2b64      	cmp	r3, #100	; 0x64
 8003fbe:	d901      	bls.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003fc0:	2303      	movs	r3, #3
 8003fc2:	e1d6      	b.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fc4:	4b38      	ldr	r3, [pc, #224]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d0f0      	beq.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003fd0:	4b34      	ldr	r3, [pc, #208]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fd2:	6a1b      	ldr	r3, [r3, #32]
 8003fd4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fd8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003fda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	f000 8084 	beq.w	80040ea <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d07c      	beq.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ff0:	4b2c      	ldr	r3, [pc, #176]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ff2:	6a1b      	ldr	r3, [r3, #32]
 8003ff4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ff8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ffa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003ffe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004002:	fa93 f3a3 	rbit	r3, r3
 8004006:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800400a:	fab3 f383 	clz	r3, r3
 800400e:	b2db      	uxtb	r3, r3
 8004010:	461a      	mov	r2, r3
 8004012:	4b26      	ldr	r3, [pc, #152]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004014:	4413      	add	r3, r2
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	461a      	mov	r2, r3
 800401a:	2301      	movs	r3, #1
 800401c:	6013      	str	r3, [r2, #0]
 800401e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004022:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004026:	fa93 f3a3 	rbit	r3, r3
 800402a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800402c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800402e:	fab3 f383 	clz	r3, r3
 8004032:	b2db      	uxtb	r3, r3
 8004034:	461a      	mov	r2, r3
 8004036:	4b1d      	ldr	r3, [pc, #116]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004038:	4413      	add	r3, r2
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	461a      	mov	r2, r3
 800403e:	2300      	movs	r3, #0
 8004040:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004042:	4a18      	ldr	r2, [pc, #96]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004044:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004046:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004048:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800404a:	f003 0301 	and.w	r3, r3, #1
 800404e:	2b00      	cmp	r3, #0
 8004050:	d04b      	beq.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004052:	f7fc fd7d 	bl	8000b50 <HAL_GetTick>
 8004056:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004058:	e00a      	b.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800405a:	f7fc fd79 	bl	8000b50 <HAL_GetTick>
 800405e:	4602      	mov	r2, r0
 8004060:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004062:	1ad3      	subs	r3, r2, r3
 8004064:	f241 3288 	movw	r2, #5000	; 0x1388
 8004068:	4293      	cmp	r3, r2
 800406a:	d901      	bls.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800406c:	2303      	movs	r3, #3
 800406e:	e180      	b.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8004070:	2302      	movs	r3, #2
 8004072:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004076:	fa93 f3a3 	rbit	r3, r3
 800407a:	627b      	str	r3, [r7, #36]	; 0x24
 800407c:	2302      	movs	r3, #2
 800407e:	623b      	str	r3, [r7, #32]
 8004080:	6a3b      	ldr	r3, [r7, #32]
 8004082:	fa93 f3a3 	rbit	r3, r3
 8004086:	61fb      	str	r3, [r7, #28]
  return result;
 8004088:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800408a:	fab3 f383 	clz	r3, r3
 800408e:	b2db      	uxtb	r3, r3
 8004090:	095b      	lsrs	r3, r3, #5
 8004092:	b2db      	uxtb	r3, r3
 8004094:	f043 0302 	orr.w	r3, r3, #2
 8004098:	b2db      	uxtb	r3, r3
 800409a:	2b02      	cmp	r3, #2
 800409c:	d108      	bne.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800409e:	4b01      	ldr	r3, [pc, #4]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040a0:	6a1b      	ldr	r3, [r3, #32]
 80040a2:	e00d      	b.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80040a4:	40021000 	.word	0x40021000
 80040a8:	40007000 	.word	0x40007000
 80040ac:	10908100 	.word	0x10908100
 80040b0:	2302      	movs	r3, #2
 80040b2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040b4:	69bb      	ldr	r3, [r7, #24]
 80040b6:	fa93 f3a3 	rbit	r3, r3
 80040ba:	617b      	str	r3, [r7, #20]
 80040bc:	4ba0      	ldr	r3, [pc, #640]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80040be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c0:	2202      	movs	r2, #2
 80040c2:	613a      	str	r2, [r7, #16]
 80040c4:	693a      	ldr	r2, [r7, #16]
 80040c6:	fa92 f2a2 	rbit	r2, r2
 80040ca:	60fa      	str	r2, [r7, #12]
  return result;
 80040cc:	68fa      	ldr	r2, [r7, #12]
 80040ce:	fab2 f282 	clz	r2, r2
 80040d2:	b2d2      	uxtb	r2, r2
 80040d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80040d8:	b2d2      	uxtb	r2, r2
 80040da:	f002 021f 	and.w	r2, r2, #31
 80040de:	2101      	movs	r1, #1
 80040e0:	fa01 f202 	lsl.w	r2, r1, r2
 80040e4:	4013      	ands	r3, r2
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d0b7      	beq.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80040ea:	4b95      	ldr	r3, [pc, #596]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80040ec:	6a1b      	ldr	r3, [r3, #32]
 80040ee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	4992      	ldr	r1, [pc, #584]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80040f8:	4313      	orrs	r3, r2
 80040fa:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80040fc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004100:	2b01      	cmp	r3, #1
 8004102:	d105      	bne.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004104:	4b8e      	ldr	r3, [pc, #568]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004106:	69db      	ldr	r3, [r3, #28]
 8004108:	4a8d      	ldr	r2, [pc, #564]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800410a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800410e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 0301 	and.w	r3, r3, #1
 8004118:	2b00      	cmp	r3, #0
 800411a:	d008      	beq.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800411c:	4b88      	ldr	r3, [pc, #544]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800411e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004120:	f023 0203 	bic.w	r2, r3, #3
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	4985      	ldr	r1, [pc, #532]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800412a:	4313      	orrs	r3, r2
 800412c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 0302 	and.w	r3, r3, #2
 8004136:	2b00      	cmp	r3, #0
 8004138:	d008      	beq.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800413a:	4b81      	ldr	r3, [pc, #516]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800413c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800413e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	68db      	ldr	r3, [r3, #12]
 8004146:	497e      	ldr	r1, [pc, #504]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004148:	4313      	orrs	r3, r2
 800414a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 0304 	and.w	r3, r3, #4
 8004154:	2b00      	cmp	r3, #0
 8004156:	d008      	beq.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004158:	4b79      	ldr	r3, [pc, #484]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800415a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800415c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	691b      	ldr	r3, [r3, #16]
 8004164:	4976      	ldr	r1, [pc, #472]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004166:	4313      	orrs	r3, r2
 8004168:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 0320 	and.w	r3, r3, #32
 8004172:	2b00      	cmp	r3, #0
 8004174:	d008      	beq.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004176:	4b72      	ldr	r3, [pc, #456]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800417a:	f023 0210 	bic.w	r2, r3, #16
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	69db      	ldr	r3, [r3, #28]
 8004182:	496f      	ldr	r1, [pc, #444]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004184:	4313      	orrs	r3, r2
 8004186:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004190:	2b00      	cmp	r3, #0
 8004192:	d008      	beq.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004194:	4b6a      	ldr	r3, [pc, #424]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041a0:	4967      	ldr	r1, [pc, #412]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80041a2:	4313      	orrs	r3, r2
 80041a4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d008      	beq.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80041b2:	4b63      	ldr	r3, [pc, #396]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80041b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041b6:	f023 0220 	bic.w	r2, r3, #32
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6a1b      	ldr	r3, [r3, #32]
 80041be:	4960      	ldr	r1, [pc, #384]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80041c0:	4313      	orrs	r3, r2
 80041c2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d008      	beq.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80041d0:	4b5b      	ldr	r3, [pc, #364]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80041d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041d4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041dc:	4958      	ldr	r1, [pc, #352]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80041de:	4313      	orrs	r3, r2
 80041e0:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 0308 	and.w	r3, r3, #8
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d008      	beq.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80041ee:	4b54      	ldr	r3, [pc, #336]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80041f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041f2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	695b      	ldr	r3, [r3, #20]
 80041fa:	4951      	ldr	r1, [pc, #324]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80041fc:	4313      	orrs	r3, r2
 80041fe:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 0310 	and.w	r3, r3, #16
 8004208:	2b00      	cmp	r3, #0
 800420a:	d008      	beq.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800420c:	4b4c      	ldr	r3, [pc, #304]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800420e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004210:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	699b      	ldr	r3, [r3, #24]
 8004218:	4949      	ldr	r1, [pc, #292]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800421a:	4313      	orrs	r3, r2
 800421c:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004226:	2b00      	cmp	r3, #0
 8004228:	d008      	beq.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800422a:	4b45      	ldr	r3, [pc, #276]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004236:	4942      	ldr	r1, [pc, #264]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004238:	4313      	orrs	r3, r2
 800423a:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004244:	2b00      	cmp	r3, #0
 8004246:	d008      	beq.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004248:	4b3d      	ldr	r3, [pc, #244]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800424a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800424c:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004254:	493a      	ldr	r1, [pc, #232]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004256:	4313      	orrs	r3, r2
 8004258:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004262:	2b00      	cmp	r3, #0
 8004264:	d008      	beq.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004266:	4b36      	ldr	r3, [pc, #216]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800426a:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004272:	4933      	ldr	r1, [pc, #204]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004274:	4313      	orrs	r3, r2
 8004276:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004280:	2b00      	cmp	r3, #0
 8004282:	d008      	beq.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004284:	4b2e      	ldr	r3, [pc, #184]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004288:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004290:	492b      	ldr	r1, [pc, #172]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004292:	4313      	orrs	r3, r2
 8004294:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d008      	beq.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80042a2:	4b27      	ldr	r3, [pc, #156]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80042a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a6:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ae:	4924      	ldr	r1, [pc, #144]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80042b0:	4313      	orrs	r3, r2
 80042b2:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d008      	beq.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80042c0:	4b1f      	ldr	r3, [pc, #124]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80042c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042c4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042cc:	491c      	ldr	r1, [pc, #112]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80042ce:	4313      	orrs	r3, r2
 80042d0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d008      	beq.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80042de:	4b18      	ldr	r3, [pc, #96]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80042e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042ea:	4915      	ldr	r1, [pc, #84]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80042ec:	4313      	orrs	r3, r2
 80042ee:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d008      	beq.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80042fc:	4b10      	ldr	r3, [pc, #64]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80042fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004300:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004308:	490d      	ldr	r1, [pc, #52]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800430a:	4313      	orrs	r3, r2
 800430c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004316:	2b00      	cmp	r3, #0
 8004318:	d008      	beq.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800431a:	4b09      	ldr	r3, [pc, #36]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800431c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800431e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004326:	4906      	ldr	r1, [pc, #24]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004328:	4313      	orrs	r3, r2
 800432a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004334:	2b00      	cmp	r3, #0
 8004336:	d00c      	beq.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8004338:	4b01      	ldr	r3, [pc, #4]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800433a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800433c:	e002      	b.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x400>
 800433e:	bf00      	nop
 8004340:	40021000 	.word	0x40021000
 8004344:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800434c:	490b      	ldr	r1, [pc, #44]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800434e:	4313      	orrs	r3, r2
 8004350:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800435a:	2b00      	cmp	r3, #0
 800435c:	d008      	beq.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800435e:	4b07      	ldr	r3, [pc, #28]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004362:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800436a:	4904      	ldr	r1, [pc, #16]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800436c:	4313      	orrs	r3, r2
 800436e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004370:	2300      	movs	r3, #0
}
 8004372:	4618      	mov	r0, r3
 8004374:	3748      	adds	r7, #72	; 0x48
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}
 800437a:	bf00      	nop
 800437c:	40021000 	.word	0x40021000

08004380 <HAL_RTC_Init>:
  *         in the RTC_InitTypeDef structure and initialize the associated handle.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b082      	sub	sp, #8
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d101      	bne.n	8004392 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	e083      	b.n	800449a <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	7f5b      	ldrb	r3, [r3, #29]
 8004396:	b2db      	uxtb	r3, r3
 8004398:	2b00      	cmp	r3, #0
 800439a:	d105      	bne.n	80043a8 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2200      	movs	r2, #0
 80043a0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f7fc f9a2 	bl	80006ec <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2202      	movs	r2, #2
 80043ac:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	22ca      	movs	r2, #202	; 0xca
 80043b4:	625a      	str	r2, [r3, #36]	; 0x24
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	2253      	movs	r2, #83	; 0x53
 80043bc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f000 f897 	bl	80044f2 <RTC_EnterInitMode>
 80043c4:	4603      	mov	r3, r0
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d008      	beq.n	80043dc <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	22ff      	movs	r2, #255	; 0xff
 80043d0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2204      	movs	r2, #4
 80043d6:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	e05e      	b.n	800449a <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	687a      	ldr	r2, [r7, #4]
 80043e4:	6812      	ldr	r2, [r2, #0]
 80043e6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80043ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043ee:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	6899      	ldr	r1, [r3, #8]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	685a      	ldr	r2, [r3, #4]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	691b      	ldr	r3, [r3, #16]
 80043fe:	431a      	orrs	r2, r3
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	695b      	ldr	r3, [r3, #20]
 8004404:	431a      	orrs	r2, r3
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	430a      	orrs	r2, r1
 800440c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	687a      	ldr	r2, [r7, #4]
 8004414:	68d2      	ldr	r2, [r2, #12]
 8004416:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	6919      	ldr	r1, [r3, #16]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	041a      	lsls	r2, r3, #16
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	430a      	orrs	r2, r1
 800442a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	68da      	ldr	r2, [r3, #12]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800443a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	f003 0320 	and.w	r3, r3, #32
 8004446:	2b00      	cmp	r3, #0
 8004448:	d10e      	bne.n	8004468 <HAL_RTC_Init+0xe8>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f000 f829 	bl	80044a2 <HAL_RTC_WaitForSynchro>
 8004450:	4603      	mov	r3, r0
 8004452:	2b00      	cmp	r3, #0
 8004454:	d008      	beq.n	8004468 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	22ff      	movs	r2, #255	; 0xff
 800445c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2204      	movs	r2, #4
 8004462:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	e018      	b.n	800449a <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004476:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	699a      	ldr	r2, [r3, #24]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	430a      	orrs	r2, r1
 8004488:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	22ff      	movs	r2, #255	; 0xff
 8004490:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2201      	movs	r2, #1
 8004496:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8004498:	2300      	movs	r3, #0
  }
}
 800449a:	4618      	mov	r0, r3
 800449c:	3708      	adds	r7, #8
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}

080044a2 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80044a2:	b580      	push	{r7, lr}
 80044a4:	b084      	sub	sp, #16
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80044aa:	2300      	movs	r3, #0
 80044ac:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	68da      	ldr	r2, [r3, #12]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80044bc:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80044be:	f7fc fb47 	bl	8000b50 <HAL_GetTick>
 80044c2:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80044c4:	e009      	b.n	80044da <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80044c6:	f7fc fb43 	bl	8000b50 <HAL_GetTick>
 80044ca:	4602      	mov	r2, r0
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	1ad3      	subs	r3, r2, r3
 80044d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80044d4:	d901      	bls.n	80044da <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80044d6:	2303      	movs	r3, #3
 80044d8:	e007      	b.n	80044ea <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	68db      	ldr	r3, [r3, #12]
 80044e0:	f003 0320 	and.w	r3, r3, #32
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d0ee      	beq.n	80044c6 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80044e8:	2300      	movs	r3, #0
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3710      	adds	r7, #16
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}

080044f2 <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - HAL_OK : RTC is in Init mode
  *          - HAL_TIMEOUT : RTC is not in Init mode and in Timeout
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80044f2:	b580      	push	{r7, lr}
 80044f4:	b084      	sub	sp, #16
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80044fa:	2300      	movs	r3, #0
 80044fc:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004508:	2b00      	cmp	r3, #0
 800450a:	d119      	bne.n	8004540 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f04f 32ff 	mov.w	r2, #4294967295
 8004514:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004516:	f7fc fb1b 	bl	8000b50 <HAL_GetTick>
 800451a:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800451c:	e009      	b.n	8004532 <RTC_EnterInitMode+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800451e:	f7fc fb17 	bl	8000b50 <HAL_GetTick>
 8004522:	4602      	mov	r2, r0
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	1ad3      	subs	r3, r2, r3
 8004528:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800452c:	d901      	bls.n	8004532 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800452e:	2303      	movs	r3, #3
 8004530:	e007      	b.n	8004542 <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	68db      	ldr	r3, [r3, #12]
 8004538:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800453c:	2b00      	cmp	r3, #0
 800453e:	d0ee      	beq.n	800451e <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8004540:	2300      	movs	r3, #0
}
 8004542:	4618      	mov	r0, r3
 8004544:	3710      	adds	r7, #16
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}

0800454a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800454a:	b580      	push	{r7, lr}
 800454c:	b082      	sub	sp, #8
 800454e:	af00      	add	r7, sp, #0
 8004550:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d101      	bne.n	800455c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	e040      	b.n	80045de <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004560:	2b00      	cmp	r3, #0
 8004562:	d106      	bne.n	8004572 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2200      	movs	r2, #0
 8004568:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	f7fc f8e3 	bl	8000738 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2224      	movs	r2, #36	; 0x24
 8004576:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	681a      	ldr	r2, [r3, #0]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f022 0201 	bic.w	r2, r2, #1
 8004586:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004588:	6878      	ldr	r0, [r7, #4]
 800458a:	f000 f8c1 	bl	8004710 <UART_SetConfig>
 800458e:	4603      	mov	r3, r0
 8004590:	2b01      	cmp	r3, #1
 8004592:	d101      	bne.n	8004598 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	e022      	b.n	80045de <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800459c:	2b00      	cmp	r3, #0
 800459e:	d002      	beq.n	80045a6 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80045a0:	6878      	ldr	r0, [r7, #4]
 80045a2:	f000 fa8b 	bl	8004abc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	685a      	ldr	r2, [r3, #4]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80045b4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	689a      	ldr	r2, [r3, #8]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80045c4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f042 0201 	orr.w	r2, r2, #1
 80045d4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f000 fb12 	bl	8004c00 <UART_CheckIdleState>
 80045dc:	4603      	mov	r3, r0
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3708      	adds	r7, #8
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}

080045e6 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045e6:	b580      	push	{r7, lr}
 80045e8:	b08a      	sub	sp, #40	; 0x28
 80045ea:	af02      	add	r7, sp, #8
 80045ec:	60f8      	str	r0, [r7, #12]
 80045ee:	60b9      	str	r1, [r7, #8]
 80045f0:	603b      	str	r3, [r7, #0]
 80045f2:	4613      	mov	r3, r2
 80045f4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045fa:	2b20      	cmp	r3, #32
 80045fc:	f040 8082 	bne.w	8004704 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d002      	beq.n	800460c <HAL_UART_Transmit+0x26>
 8004606:	88fb      	ldrh	r3, [r7, #6]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d101      	bne.n	8004610 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	e07a      	b.n	8004706 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004616:	2b01      	cmp	r3, #1
 8004618:	d101      	bne.n	800461e <HAL_UART_Transmit+0x38>
 800461a:	2302      	movs	r3, #2
 800461c:	e073      	b.n	8004706 <HAL_UART_Transmit+0x120>
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2201      	movs	r2, #1
 8004622:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2200      	movs	r2, #0
 800462a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2221      	movs	r2, #33	; 0x21
 8004632:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004634:	f7fc fa8c 	bl	8000b50 <HAL_GetTick>
 8004638:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	88fa      	ldrh	r2, [r7, #6]
 800463e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	88fa      	ldrh	r2, [r7, #6]
 8004646:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004652:	d108      	bne.n	8004666 <HAL_UART_Transmit+0x80>
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	691b      	ldr	r3, [r3, #16]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d104      	bne.n	8004666 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800465c:	2300      	movs	r3, #0
 800465e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	61bb      	str	r3, [r7, #24]
 8004664:	e003      	b.n	800466e <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800466a:	2300      	movs	r3, #0
 800466c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2200      	movs	r2, #0
 8004672:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004676:	e02d      	b.n	80046d4 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	9300      	str	r3, [sp, #0]
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	2200      	movs	r2, #0
 8004680:	2180      	movs	r1, #128	; 0x80
 8004682:	68f8      	ldr	r0, [r7, #12]
 8004684:	f000 fb05 	bl	8004c92 <UART_WaitOnFlagUntilTimeout>
 8004688:	4603      	mov	r3, r0
 800468a:	2b00      	cmp	r3, #0
 800468c:	d001      	beq.n	8004692 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800468e:	2303      	movs	r3, #3
 8004690:	e039      	b.n	8004706 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004692:	69fb      	ldr	r3, [r7, #28]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d10b      	bne.n	80046b0 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004698:	69bb      	ldr	r3, [r7, #24]
 800469a:	881a      	ldrh	r2, [r3, #0]
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046a4:	b292      	uxth	r2, r2
 80046a6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80046a8:	69bb      	ldr	r3, [r7, #24]
 80046aa:	3302      	adds	r3, #2
 80046ac:	61bb      	str	r3, [r7, #24]
 80046ae:	e008      	b.n	80046c2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80046b0:	69fb      	ldr	r3, [r7, #28]
 80046b2:	781a      	ldrb	r2, [r3, #0]
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	b292      	uxth	r2, r2
 80046ba:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80046bc:	69fb      	ldr	r3, [r7, #28]
 80046be:	3301      	adds	r3, #1
 80046c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	3b01      	subs	r3, #1
 80046cc:	b29a      	uxth	r2, r3
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80046da:	b29b      	uxth	r3, r3
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d1cb      	bne.n	8004678 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	9300      	str	r3, [sp, #0]
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	2200      	movs	r2, #0
 80046e8:	2140      	movs	r1, #64	; 0x40
 80046ea:	68f8      	ldr	r0, [r7, #12]
 80046ec:	f000 fad1 	bl	8004c92 <UART_WaitOnFlagUntilTimeout>
 80046f0:	4603      	mov	r3, r0
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d001      	beq.n	80046fa <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80046f6:	2303      	movs	r3, #3
 80046f8:	e005      	b.n	8004706 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2220      	movs	r2, #32
 80046fe:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004700:	2300      	movs	r3, #0
 8004702:	e000      	b.n	8004706 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004704:	2302      	movs	r3, #2
  }
}
 8004706:	4618      	mov	r0, r3
 8004708:	3720      	adds	r7, #32
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}
	...

08004710 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b088      	sub	sp, #32
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004718:	2300      	movs	r3, #0
 800471a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	689a      	ldr	r2, [r3, #8]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	691b      	ldr	r3, [r3, #16]
 8004724:	431a      	orrs	r2, r3
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	695b      	ldr	r3, [r3, #20]
 800472a:	431a      	orrs	r2, r3
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	69db      	ldr	r3, [r3, #28]
 8004730:	4313      	orrs	r3, r2
 8004732:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	4bab      	ldr	r3, [pc, #684]	; (80049e8 <UART_SetConfig+0x2d8>)
 800473c:	4013      	ands	r3, r2
 800473e:	687a      	ldr	r2, [r7, #4]
 8004740:	6812      	ldr	r2, [r2, #0]
 8004742:	6979      	ldr	r1, [r7, #20]
 8004744:	430b      	orrs	r3, r1
 8004746:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	68da      	ldr	r2, [r3, #12]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	430a      	orrs	r2, r1
 800475c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	699b      	ldr	r3, [r3, #24]
 8004762:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6a1b      	ldr	r3, [r3, #32]
 8004768:	697a      	ldr	r2, [r7, #20]
 800476a:	4313      	orrs	r3, r2
 800476c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	697a      	ldr	r2, [r7, #20]
 800477e:	430a      	orrs	r2, r1
 8004780:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a99      	ldr	r2, [pc, #612]	; (80049ec <UART_SetConfig+0x2dc>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d120      	bne.n	80047ce <UART_SetConfig+0xbe>
 800478c:	4b98      	ldr	r3, [pc, #608]	; (80049f0 <UART_SetConfig+0x2e0>)
 800478e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004790:	f003 0303 	and.w	r3, r3, #3
 8004794:	2b03      	cmp	r3, #3
 8004796:	d817      	bhi.n	80047c8 <UART_SetConfig+0xb8>
 8004798:	a201      	add	r2, pc, #4	; (adr r2, 80047a0 <UART_SetConfig+0x90>)
 800479a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800479e:	bf00      	nop
 80047a0:	080047b1 	.word	0x080047b1
 80047a4:	080047bd 	.word	0x080047bd
 80047a8:	080047c3 	.word	0x080047c3
 80047ac:	080047b7 	.word	0x080047b7
 80047b0:	2301      	movs	r3, #1
 80047b2:	77fb      	strb	r3, [r7, #31]
 80047b4:	e0b5      	b.n	8004922 <UART_SetConfig+0x212>
 80047b6:	2302      	movs	r3, #2
 80047b8:	77fb      	strb	r3, [r7, #31]
 80047ba:	e0b2      	b.n	8004922 <UART_SetConfig+0x212>
 80047bc:	2304      	movs	r3, #4
 80047be:	77fb      	strb	r3, [r7, #31]
 80047c0:	e0af      	b.n	8004922 <UART_SetConfig+0x212>
 80047c2:	2308      	movs	r3, #8
 80047c4:	77fb      	strb	r3, [r7, #31]
 80047c6:	e0ac      	b.n	8004922 <UART_SetConfig+0x212>
 80047c8:	2310      	movs	r3, #16
 80047ca:	77fb      	strb	r3, [r7, #31]
 80047cc:	e0a9      	b.n	8004922 <UART_SetConfig+0x212>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a88      	ldr	r2, [pc, #544]	; (80049f4 <UART_SetConfig+0x2e4>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d124      	bne.n	8004822 <UART_SetConfig+0x112>
 80047d8:	4b85      	ldr	r3, [pc, #532]	; (80049f0 <UART_SetConfig+0x2e0>)
 80047da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80047e0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80047e4:	d011      	beq.n	800480a <UART_SetConfig+0xfa>
 80047e6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80047ea:	d817      	bhi.n	800481c <UART_SetConfig+0x10c>
 80047ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80047f0:	d011      	beq.n	8004816 <UART_SetConfig+0x106>
 80047f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80047f6:	d811      	bhi.n	800481c <UART_SetConfig+0x10c>
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d003      	beq.n	8004804 <UART_SetConfig+0xf4>
 80047fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004800:	d006      	beq.n	8004810 <UART_SetConfig+0x100>
 8004802:	e00b      	b.n	800481c <UART_SetConfig+0x10c>
 8004804:	2300      	movs	r3, #0
 8004806:	77fb      	strb	r3, [r7, #31]
 8004808:	e08b      	b.n	8004922 <UART_SetConfig+0x212>
 800480a:	2302      	movs	r3, #2
 800480c:	77fb      	strb	r3, [r7, #31]
 800480e:	e088      	b.n	8004922 <UART_SetConfig+0x212>
 8004810:	2304      	movs	r3, #4
 8004812:	77fb      	strb	r3, [r7, #31]
 8004814:	e085      	b.n	8004922 <UART_SetConfig+0x212>
 8004816:	2308      	movs	r3, #8
 8004818:	77fb      	strb	r3, [r7, #31]
 800481a:	e082      	b.n	8004922 <UART_SetConfig+0x212>
 800481c:	2310      	movs	r3, #16
 800481e:	77fb      	strb	r3, [r7, #31]
 8004820:	e07f      	b.n	8004922 <UART_SetConfig+0x212>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a74      	ldr	r2, [pc, #464]	; (80049f8 <UART_SetConfig+0x2e8>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d124      	bne.n	8004876 <UART_SetConfig+0x166>
 800482c:	4b70      	ldr	r3, [pc, #448]	; (80049f0 <UART_SetConfig+0x2e0>)
 800482e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004830:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004834:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004838:	d011      	beq.n	800485e <UART_SetConfig+0x14e>
 800483a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800483e:	d817      	bhi.n	8004870 <UART_SetConfig+0x160>
 8004840:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004844:	d011      	beq.n	800486a <UART_SetConfig+0x15a>
 8004846:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800484a:	d811      	bhi.n	8004870 <UART_SetConfig+0x160>
 800484c:	2b00      	cmp	r3, #0
 800484e:	d003      	beq.n	8004858 <UART_SetConfig+0x148>
 8004850:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004854:	d006      	beq.n	8004864 <UART_SetConfig+0x154>
 8004856:	e00b      	b.n	8004870 <UART_SetConfig+0x160>
 8004858:	2300      	movs	r3, #0
 800485a:	77fb      	strb	r3, [r7, #31]
 800485c:	e061      	b.n	8004922 <UART_SetConfig+0x212>
 800485e:	2302      	movs	r3, #2
 8004860:	77fb      	strb	r3, [r7, #31]
 8004862:	e05e      	b.n	8004922 <UART_SetConfig+0x212>
 8004864:	2304      	movs	r3, #4
 8004866:	77fb      	strb	r3, [r7, #31]
 8004868:	e05b      	b.n	8004922 <UART_SetConfig+0x212>
 800486a:	2308      	movs	r3, #8
 800486c:	77fb      	strb	r3, [r7, #31]
 800486e:	e058      	b.n	8004922 <UART_SetConfig+0x212>
 8004870:	2310      	movs	r3, #16
 8004872:	77fb      	strb	r3, [r7, #31]
 8004874:	e055      	b.n	8004922 <UART_SetConfig+0x212>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a60      	ldr	r2, [pc, #384]	; (80049fc <UART_SetConfig+0x2ec>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d124      	bne.n	80048ca <UART_SetConfig+0x1ba>
 8004880:	4b5b      	ldr	r3, [pc, #364]	; (80049f0 <UART_SetConfig+0x2e0>)
 8004882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004884:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004888:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800488c:	d011      	beq.n	80048b2 <UART_SetConfig+0x1a2>
 800488e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004892:	d817      	bhi.n	80048c4 <UART_SetConfig+0x1b4>
 8004894:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004898:	d011      	beq.n	80048be <UART_SetConfig+0x1ae>
 800489a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800489e:	d811      	bhi.n	80048c4 <UART_SetConfig+0x1b4>
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d003      	beq.n	80048ac <UART_SetConfig+0x19c>
 80048a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048a8:	d006      	beq.n	80048b8 <UART_SetConfig+0x1a8>
 80048aa:	e00b      	b.n	80048c4 <UART_SetConfig+0x1b4>
 80048ac:	2300      	movs	r3, #0
 80048ae:	77fb      	strb	r3, [r7, #31]
 80048b0:	e037      	b.n	8004922 <UART_SetConfig+0x212>
 80048b2:	2302      	movs	r3, #2
 80048b4:	77fb      	strb	r3, [r7, #31]
 80048b6:	e034      	b.n	8004922 <UART_SetConfig+0x212>
 80048b8:	2304      	movs	r3, #4
 80048ba:	77fb      	strb	r3, [r7, #31]
 80048bc:	e031      	b.n	8004922 <UART_SetConfig+0x212>
 80048be:	2308      	movs	r3, #8
 80048c0:	77fb      	strb	r3, [r7, #31]
 80048c2:	e02e      	b.n	8004922 <UART_SetConfig+0x212>
 80048c4:	2310      	movs	r3, #16
 80048c6:	77fb      	strb	r3, [r7, #31]
 80048c8:	e02b      	b.n	8004922 <UART_SetConfig+0x212>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a4c      	ldr	r2, [pc, #304]	; (8004a00 <UART_SetConfig+0x2f0>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d124      	bne.n	800491e <UART_SetConfig+0x20e>
 80048d4:	4b46      	ldr	r3, [pc, #280]	; (80049f0 <UART_SetConfig+0x2e0>)
 80048d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d8:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80048dc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80048e0:	d011      	beq.n	8004906 <UART_SetConfig+0x1f6>
 80048e2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80048e6:	d817      	bhi.n	8004918 <UART_SetConfig+0x208>
 80048e8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80048ec:	d011      	beq.n	8004912 <UART_SetConfig+0x202>
 80048ee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80048f2:	d811      	bhi.n	8004918 <UART_SetConfig+0x208>
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d003      	beq.n	8004900 <UART_SetConfig+0x1f0>
 80048f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048fc:	d006      	beq.n	800490c <UART_SetConfig+0x1fc>
 80048fe:	e00b      	b.n	8004918 <UART_SetConfig+0x208>
 8004900:	2300      	movs	r3, #0
 8004902:	77fb      	strb	r3, [r7, #31]
 8004904:	e00d      	b.n	8004922 <UART_SetConfig+0x212>
 8004906:	2302      	movs	r3, #2
 8004908:	77fb      	strb	r3, [r7, #31]
 800490a:	e00a      	b.n	8004922 <UART_SetConfig+0x212>
 800490c:	2304      	movs	r3, #4
 800490e:	77fb      	strb	r3, [r7, #31]
 8004910:	e007      	b.n	8004922 <UART_SetConfig+0x212>
 8004912:	2308      	movs	r3, #8
 8004914:	77fb      	strb	r3, [r7, #31]
 8004916:	e004      	b.n	8004922 <UART_SetConfig+0x212>
 8004918:	2310      	movs	r3, #16
 800491a:	77fb      	strb	r3, [r7, #31]
 800491c:	e001      	b.n	8004922 <UART_SetConfig+0x212>
 800491e:	2310      	movs	r3, #16
 8004920:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	69db      	ldr	r3, [r3, #28]
 8004926:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800492a:	d16d      	bne.n	8004a08 <UART_SetConfig+0x2f8>
  {
    switch (clocksource)
 800492c:	7ffb      	ldrb	r3, [r7, #31]
 800492e:	2b08      	cmp	r3, #8
 8004930:	d827      	bhi.n	8004982 <UART_SetConfig+0x272>
 8004932:	a201      	add	r2, pc, #4	; (adr r2, 8004938 <UART_SetConfig+0x228>)
 8004934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004938:	0800495d 	.word	0x0800495d
 800493c:	08004965 	.word	0x08004965
 8004940:	0800496d 	.word	0x0800496d
 8004944:	08004983 	.word	0x08004983
 8004948:	08004973 	.word	0x08004973
 800494c:	08004983 	.word	0x08004983
 8004950:	08004983 	.word	0x08004983
 8004954:	08004983 	.word	0x08004983
 8004958:	0800497b 	.word	0x0800497b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800495c:	f7ff faae 	bl	8003ebc <HAL_RCC_GetPCLK1Freq>
 8004960:	61b8      	str	r0, [r7, #24]
        break;
 8004962:	e013      	b.n	800498c <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004964:	f7ff facc 	bl	8003f00 <HAL_RCC_GetPCLK2Freq>
 8004968:	61b8      	str	r0, [r7, #24]
        break;
 800496a:	e00f      	b.n	800498c <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800496c:	4b25      	ldr	r3, [pc, #148]	; (8004a04 <UART_SetConfig+0x2f4>)
 800496e:	61bb      	str	r3, [r7, #24]
        break;
 8004970:	e00c      	b.n	800498c <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004972:	f7ff fa2d 	bl	8003dd0 <HAL_RCC_GetSysClockFreq>
 8004976:	61b8      	str	r0, [r7, #24]
        break;
 8004978:	e008      	b.n	800498c <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800497a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800497e:	61bb      	str	r3, [r7, #24]
        break;
 8004980:	e004      	b.n	800498c <UART_SetConfig+0x27c>
      default:
        pclk = 0U;
 8004982:	2300      	movs	r3, #0
 8004984:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	77bb      	strb	r3, [r7, #30]
        break;
 800498a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800498c:	69bb      	ldr	r3, [r7, #24]
 800498e:	2b00      	cmp	r3, #0
 8004990:	f000 8086 	beq.w	8004aa0 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004994:	69bb      	ldr	r3, [r7, #24]
 8004996:	005a      	lsls	r2, r3, #1
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	085b      	lsrs	r3, r3, #1
 800499e:	441a      	add	r2, r3
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	2b0f      	cmp	r3, #15
 80049b0:	d916      	bls.n	80049e0 <UART_SetConfig+0x2d0>
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049b8:	d212      	bcs.n	80049e0 <UART_SetConfig+0x2d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	b29b      	uxth	r3, r3
 80049be:	f023 030f 	bic.w	r3, r3, #15
 80049c2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	085b      	lsrs	r3, r3, #1
 80049c8:	b29b      	uxth	r3, r3
 80049ca:	f003 0307 	and.w	r3, r3, #7
 80049ce:	b29a      	uxth	r2, r3
 80049d0:	89fb      	ldrh	r3, [r7, #14]
 80049d2:	4313      	orrs	r3, r2
 80049d4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	89fa      	ldrh	r2, [r7, #14]
 80049dc:	60da      	str	r2, [r3, #12]
 80049de:	e05f      	b.n	8004aa0 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 80049e0:	2301      	movs	r3, #1
 80049e2:	77bb      	strb	r3, [r7, #30]
 80049e4:	e05c      	b.n	8004aa0 <UART_SetConfig+0x390>
 80049e6:	bf00      	nop
 80049e8:	efff69f3 	.word	0xefff69f3
 80049ec:	40013800 	.word	0x40013800
 80049f0:	40021000 	.word	0x40021000
 80049f4:	40004400 	.word	0x40004400
 80049f8:	40004800 	.word	0x40004800
 80049fc:	40004c00 	.word	0x40004c00
 8004a00:	40005000 	.word	0x40005000
 8004a04:	007a1200 	.word	0x007a1200
      }
    }
  }
  else
  {
    switch (clocksource)
 8004a08:	7ffb      	ldrb	r3, [r7, #31]
 8004a0a:	2b08      	cmp	r3, #8
 8004a0c:	d827      	bhi.n	8004a5e <UART_SetConfig+0x34e>
 8004a0e:	a201      	add	r2, pc, #4	; (adr r2, 8004a14 <UART_SetConfig+0x304>)
 8004a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a14:	08004a39 	.word	0x08004a39
 8004a18:	08004a41 	.word	0x08004a41
 8004a1c:	08004a49 	.word	0x08004a49
 8004a20:	08004a5f 	.word	0x08004a5f
 8004a24:	08004a4f 	.word	0x08004a4f
 8004a28:	08004a5f 	.word	0x08004a5f
 8004a2c:	08004a5f 	.word	0x08004a5f
 8004a30:	08004a5f 	.word	0x08004a5f
 8004a34:	08004a57 	.word	0x08004a57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a38:	f7ff fa40 	bl	8003ebc <HAL_RCC_GetPCLK1Freq>
 8004a3c:	61b8      	str	r0, [r7, #24]
        break;
 8004a3e:	e013      	b.n	8004a68 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a40:	f7ff fa5e 	bl	8003f00 <HAL_RCC_GetPCLK2Freq>
 8004a44:	61b8      	str	r0, [r7, #24]
        break;
 8004a46:	e00f      	b.n	8004a68 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a48:	4b1b      	ldr	r3, [pc, #108]	; (8004ab8 <UART_SetConfig+0x3a8>)
 8004a4a:	61bb      	str	r3, [r7, #24]
        break;
 8004a4c:	e00c      	b.n	8004a68 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a4e:	f7ff f9bf 	bl	8003dd0 <HAL_RCC_GetSysClockFreq>
 8004a52:	61b8      	str	r0, [r7, #24]
        break;
 8004a54:	e008      	b.n	8004a68 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a5a:	61bb      	str	r3, [r7, #24]
        break;
 8004a5c:	e004      	b.n	8004a68 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	77bb      	strb	r3, [r7, #30]
        break;
 8004a66:	bf00      	nop
    }

    if (pclk != 0U)
 8004a68:	69bb      	ldr	r3, [r7, #24]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d018      	beq.n	8004aa0 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	085a      	lsrs	r2, r3, #1
 8004a74:	69bb      	ldr	r3, [r7, #24]
 8004a76:	441a      	add	r2, r3
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	2b0f      	cmp	r3, #15
 8004a88:	d908      	bls.n	8004a9c <UART_SetConfig+0x38c>
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a90:	d204      	bcs.n	8004a9c <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	693a      	ldr	r2, [r7, #16]
 8004a98:	60da      	str	r2, [r3, #12]
 8004a9a:	e001      	b.n	8004aa0 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004aac:	7fbb      	ldrb	r3, [r7, #30]
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3720      	adds	r7, #32
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}
 8004ab6:	bf00      	nop
 8004ab8:	007a1200 	.word	0x007a1200

08004abc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b083      	sub	sp, #12
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac8:	f003 0301 	and.w	r3, r3, #1
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d00a      	beq.n	8004ae6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	430a      	orrs	r2, r1
 8004ae4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aea:	f003 0302 	and.w	r3, r3, #2
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d00a      	beq.n	8004b08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	430a      	orrs	r2, r1
 8004b06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b0c:	f003 0304 	and.w	r3, r3, #4
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d00a      	beq.n	8004b2a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	430a      	orrs	r2, r1
 8004b28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b2e:	f003 0308 	and.w	r3, r3, #8
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d00a      	beq.n	8004b4c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	430a      	orrs	r2, r1
 8004b4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b50:	f003 0310 	and.w	r3, r3, #16
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d00a      	beq.n	8004b6e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	430a      	orrs	r2, r1
 8004b6c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b72:	f003 0320 	and.w	r3, r3, #32
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d00a      	beq.n	8004b90 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	430a      	orrs	r2, r1
 8004b8e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d01a      	beq.n	8004bd2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	430a      	orrs	r2, r1
 8004bb0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004bba:	d10a      	bne.n	8004bd2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	430a      	orrs	r2, r1
 8004bd0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d00a      	beq.n	8004bf4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	430a      	orrs	r2, r1
 8004bf2:	605a      	str	r2, [r3, #4]
  }
}
 8004bf4:	bf00      	nop
 8004bf6:	370c      	adds	r7, #12
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr

08004c00 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b086      	sub	sp, #24
 8004c04:	af02      	add	r7, sp, #8
 8004c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004c10:	f7fb ff9e 	bl	8000b50 <HAL_GetTick>
 8004c14:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f003 0308 	and.w	r3, r3, #8
 8004c20:	2b08      	cmp	r3, #8
 8004c22:	d10e      	bne.n	8004c42 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c24:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c28:	9300      	str	r3, [sp, #0]
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f000 f82d 	bl	8004c92 <UART_WaitOnFlagUntilTimeout>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d001      	beq.n	8004c42 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c3e:	2303      	movs	r3, #3
 8004c40:	e023      	b.n	8004c8a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f003 0304 	and.w	r3, r3, #4
 8004c4c:	2b04      	cmp	r3, #4
 8004c4e:	d10e      	bne.n	8004c6e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c50:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c54:	9300      	str	r3, [sp, #0]
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f000 f817 	bl	8004c92 <UART_WaitOnFlagUntilTimeout>
 8004c64:	4603      	mov	r3, r0
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d001      	beq.n	8004c6e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c6a:	2303      	movs	r3, #3
 8004c6c:	e00d      	b.n	8004c8a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2220      	movs	r2, #32
 8004c72:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2220      	movs	r2, #32
 8004c78:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2200      	movs	r2, #0
 8004c84:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004c88:	2300      	movs	r3, #0
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3710      	adds	r7, #16
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}

08004c92 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004c92:	b580      	push	{r7, lr}
 8004c94:	b084      	sub	sp, #16
 8004c96:	af00      	add	r7, sp, #0
 8004c98:	60f8      	str	r0, [r7, #12]
 8004c9a:	60b9      	str	r1, [r7, #8]
 8004c9c:	603b      	str	r3, [r7, #0]
 8004c9e:	4613      	mov	r3, r2
 8004ca0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ca2:	e05e      	b.n	8004d62 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ca4:	69bb      	ldr	r3, [r7, #24]
 8004ca6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004caa:	d05a      	beq.n	8004d62 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cac:	f7fb ff50 	bl	8000b50 <HAL_GetTick>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	1ad3      	subs	r3, r2, r3
 8004cb6:	69ba      	ldr	r2, [r7, #24]
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	d302      	bcc.n	8004cc2 <UART_WaitOnFlagUntilTimeout+0x30>
 8004cbc:	69bb      	ldr	r3, [r7, #24]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d11b      	bne.n	8004cfa <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004cd0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	689a      	ldr	r2, [r3, #8]
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f022 0201 	bic.w	r2, r2, #1
 8004ce0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2220      	movs	r2, #32
 8004ce6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2220      	movs	r2, #32
 8004cec:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004cf6:	2303      	movs	r3, #3
 8004cf8:	e043      	b.n	8004d82 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f003 0304 	and.w	r3, r3, #4
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d02c      	beq.n	8004d62 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	69db      	ldr	r3, [r3, #28]
 8004d0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d16:	d124      	bne.n	8004d62 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d20:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004d30:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	689a      	ldr	r2, [r3, #8]
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f022 0201 	bic.w	r2, r2, #1
 8004d40:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2220      	movs	r2, #32
 8004d46:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2220      	movs	r2, #32
 8004d4c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2220      	movs	r2, #32
 8004d52:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004d5e:	2303      	movs	r3, #3
 8004d60:	e00f      	b.n	8004d82 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	69da      	ldr	r2, [r3, #28]
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	4013      	ands	r3, r2
 8004d6c:	68ba      	ldr	r2, [r7, #8]
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	bf0c      	ite	eq
 8004d72:	2301      	moveq	r3, #1
 8004d74:	2300      	movne	r3, #0
 8004d76:	b2db      	uxtb	r3, r3
 8004d78:	461a      	mov	r2, r3
 8004d7a:	79fb      	ldrb	r3, [r7, #7]
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d091      	beq.n	8004ca4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d80:	2300      	movs	r3, #0
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3710      	adds	r7, #16
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}

08004d8a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004d8a:	b480      	push	{r7}
 8004d8c:	b085      	sub	sp, #20
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004d92:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004d96:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004d9e:	b29a      	uxth	r2, r3
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	43db      	mvns	r3, r3
 8004da6:	b29b      	uxth	r3, r3
 8004da8:	4013      	ands	r3, r2
 8004daa:	b29a      	uxth	r2, r3
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004db2:	2300      	movs	r3, #0
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	3714      	adds	r7, #20
 8004db8:	46bd      	mov	sp, r7
 8004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbe:	4770      	bx	lr

08004dc0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004dc0:	b084      	sub	sp, #16
 8004dc2:	b480      	push	{r7}
 8004dc4:	b083      	sub	sp, #12
 8004dc6:	af00      	add	r7, sp, #0
 8004dc8:	6078      	str	r0, [r7, #4]
 8004dca:	f107 0014 	add.w	r0, r7, #20
 8004dce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2200      	movs	r2, #0
 8004de6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2200      	movs	r2, #0
 8004dee:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004df2:	2300      	movs	r3, #0
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	370c      	adds	r7, #12
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfe:	b004      	add	sp, #16
 8004e00:	4770      	bx	lr

08004e02 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004e02:	b580      	push	{r7, lr}
 8004e04:	b0c4      	sub	sp, #272	; 0x110
 8004e06:	af00      	add	r7, sp, #0
 8004e08:	1d3b      	adds	r3, r7, #4
 8004e0a:	6018      	str	r0, [r3, #0]
 8004e0c:	463b      	mov	r3, r7
 8004e0e:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004e10:	463b      	mov	r3, r7
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	785b      	ldrb	r3, [r3, #1]
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	f040 8557 	bne.w	80058ca <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004e1c:	463b      	mov	r3, r7
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	699a      	ldr	r2, [r3, #24]
 8004e22:	463b      	mov	r3, r7
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	691b      	ldr	r3, [r3, #16]
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	d905      	bls.n	8004e38 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8004e2c:	463b      	mov	r3, r7
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	691b      	ldr	r3, [r3, #16]
 8004e32:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004e36:	e004      	b.n	8004e42 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8004e38:	463b      	mov	r3, r7
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	699b      	ldr	r3, [r3, #24]
 8004e3e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004e42:	463b      	mov	r3, r7
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	7b1b      	ldrb	r3, [r3, #12]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d12c      	bne.n	8004ea6 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004e4c:	463b      	mov	r3, r7
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	6959      	ldr	r1, [r3, #20]
 8004e52:	463b      	mov	r3, r7
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	88da      	ldrh	r2, [r3, #6]
 8004e58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e5c:	b29b      	uxth	r3, r3
 8004e5e:	1d38      	adds	r0, r7, #4
 8004e60:	6800      	ldr	r0, [r0, #0]
 8004e62:	f001 f912 	bl	800608a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004e66:	1d3b      	adds	r3, r7, #4
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	617b      	str	r3, [r7, #20]
 8004e6c:	1d3b      	adds	r3, r7, #4
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e74:	b29b      	uxth	r3, r3
 8004e76:	461a      	mov	r2, r3
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	4413      	add	r3, r2
 8004e7c:	617b      	str	r3, [r7, #20]
 8004e7e:	463b      	mov	r3, r7
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	781b      	ldrb	r3, [r3, #0]
 8004e84:	00da      	lsls	r2, r3, #3
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	4413      	add	r3, r2
 8004e8a:	f203 4202 	addw	r2, r3, #1026	; 0x402
 8004e8e:	f107 0310 	add.w	r3, r7, #16
 8004e92:	601a      	str	r2, [r3, #0]
 8004e94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e98:	b29a      	uxth	r2, r3
 8004e9a:	f107 0310 	add.w	r3, r7, #16
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	801a      	strh	r2, [r3, #0]
 8004ea2:	f000 bcdd 	b.w	8005860 <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004ea6:	463b      	mov	r3, r7
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	78db      	ldrb	r3, [r3, #3]
 8004eac:	2b02      	cmp	r3, #2
 8004eae:	f040 8347 	bne.w	8005540 <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004eb2:	463b      	mov	r3, r7
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	6a1a      	ldr	r2, [r3, #32]
 8004eb8:	463b      	mov	r3, r7
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	691b      	ldr	r3, [r3, #16]
 8004ebe:	429a      	cmp	r2, r3
 8004ec0:	f240 82eb 	bls.w	800549a <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8004ec4:	1d3b      	adds	r3, r7, #4
 8004ec6:	681a      	ldr	r2, [r3, #0]
 8004ec8:	463b      	mov	r3, r7
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	781b      	ldrb	r3, [r3, #0]
 8004ece:	009b      	lsls	r3, r3, #2
 8004ed0:	4413      	add	r3, r2
 8004ed2:	881b      	ldrh	r3, [r3, #0]
 8004ed4:	b29b      	uxth	r3, r3
 8004ed6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004eda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ede:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8004ee2:	1d3b      	adds	r3, r7, #4
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	463b      	mov	r3, r7
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	781b      	ldrb	r3, [r3, #0]
 8004eec:	009b      	lsls	r3, r3, #2
 8004eee:	441a      	add	r2, r3
 8004ef0:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8004ef4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ef8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004efc:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004f00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f04:	b29b      	uxth	r3, r3
 8004f06:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004f08:	463b      	mov	r3, r7
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	6a1a      	ldr	r2, [r3, #32]
 8004f0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f12:	1ad2      	subs	r2, r2, r3
 8004f14:	463b      	mov	r3, r7
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004f1a:	1d3b      	adds	r3, r7, #4
 8004f1c:	681a      	ldr	r2, [r3, #0]
 8004f1e:	463b      	mov	r3, r7
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	781b      	ldrb	r3, [r3, #0]
 8004f24:	009b      	lsls	r3, r3, #2
 8004f26:	4413      	add	r3, r2
 8004f28:	881b      	ldrh	r3, [r3, #0]
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	f000 8159 	beq.w	80051e8 <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004f36:	1d3b      	adds	r3, r7, #4
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	637b      	str	r3, [r7, #52]	; 0x34
 8004f3c:	463b      	mov	r3, r7
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	785b      	ldrb	r3, [r3, #1]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d164      	bne.n	8005010 <USB_EPStartXfer+0x20e>
 8004f46:	1d3b      	adds	r3, r7, #4
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f4c:	1d3b      	adds	r3, r7, #4
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f54:	b29b      	uxth	r3, r3
 8004f56:	461a      	mov	r2, r3
 8004f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f5a:	4413      	add	r3, r2
 8004f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f5e:	463b      	mov	r3, r7
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	781b      	ldrb	r3, [r3, #0]
 8004f64:	00da      	lsls	r2, r3, #3
 8004f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f68:	4413      	add	r3, r2
 8004f6a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004f6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d112      	bne.n	8004f9e <USB_EPStartXfer+0x19c>
 8004f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f7a:	881b      	ldrh	r3, [r3, #0]
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004f82:	b29a      	uxth	r2, r3
 8004f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f86:	801a      	strh	r2, [r3, #0]
 8004f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f8a:	881b      	ldrh	r3, [r3, #0]
 8004f8c:	b29b      	uxth	r3, r3
 8004f8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f96:	b29a      	uxth	r2, r3
 8004f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f9a:	801a      	strh	r2, [r3, #0]
 8004f9c:	e054      	b.n	8005048 <USB_EPStartXfer+0x246>
 8004f9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fa2:	2b3e      	cmp	r3, #62	; 0x3e
 8004fa4:	d817      	bhi.n	8004fd6 <USB_EPStartXfer+0x1d4>
 8004fa6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004faa:	085b      	lsrs	r3, r3, #1
 8004fac:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004fb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fb4:	f003 0301 	and.w	r3, r3, #1
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d004      	beq.n	8004fc6 <USB_EPStartXfer+0x1c4>
 8004fbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004fc0:	3301      	adds	r3, #1
 8004fc2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004fc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004fca:	b29b      	uxth	r3, r3
 8004fcc:	029b      	lsls	r3, r3, #10
 8004fce:	b29a      	uxth	r2, r3
 8004fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fd2:	801a      	strh	r2, [r3, #0]
 8004fd4:	e038      	b.n	8005048 <USB_EPStartXfer+0x246>
 8004fd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fda:	095b      	lsrs	r3, r3, #5
 8004fdc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004fe0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fe4:	f003 031f 	and.w	r3, r3, #31
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d104      	bne.n	8004ff6 <USB_EPStartXfer+0x1f4>
 8004fec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ff0:	3b01      	subs	r3, #1
 8004ff2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004ff6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ffa:	b29b      	uxth	r3, r3
 8004ffc:	029b      	lsls	r3, r3, #10
 8004ffe:	b29b      	uxth	r3, r3
 8005000:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005004:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005008:	b29a      	uxth	r2, r3
 800500a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800500c:	801a      	strh	r2, [r3, #0]
 800500e:	e01b      	b.n	8005048 <USB_EPStartXfer+0x246>
 8005010:	463b      	mov	r3, r7
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	785b      	ldrb	r3, [r3, #1]
 8005016:	2b01      	cmp	r3, #1
 8005018:	d116      	bne.n	8005048 <USB_EPStartXfer+0x246>
 800501a:	1d3b      	adds	r3, r7, #4
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005022:	b29b      	uxth	r3, r3
 8005024:	461a      	mov	r2, r3
 8005026:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005028:	4413      	add	r3, r2
 800502a:	637b      	str	r3, [r7, #52]	; 0x34
 800502c:	463b      	mov	r3, r7
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	781b      	ldrb	r3, [r3, #0]
 8005032:	00da      	lsls	r2, r3, #3
 8005034:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005036:	4413      	add	r3, r2
 8005038:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800503c:	633b      	str	r3, [r7, #48]	; 0x30
 800503e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005042:	b29a      	uxth	r2, r3
 8005044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005046:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005048:	463b      	mov	r3, r7
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	895b      	ldrh	r3, [r3, #10]
 800504e:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005052:	463b      	mov	r3, r7
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	6959      	ldr	r1, [r3, #20]
 8005058:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800505c:	b29b      	uxth	r3, r3
 800505e:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005062:	1d38      	adds	r0, r7, #4
 8005064:	6800      	ldr	r0, [r0, #0]
 8005066:	f001 f810 	bl	800608a <USB_WritePMA>
            ep->xfer_buff += len;
 800506a:	463b      	mov	r3, r7
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	695a      	ldr	r2, [r3, #20]
 8005070:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005074:	441a      	add	r2, r3
 8005076:	463b      	mov	r3, r7
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800507c:	463b      	mov	r3, r7
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	6a1a      	ldr	r2, [r3, #32]
 8005082:	463b      	mov	r3, r7
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	691b      	ldr	r3, [r3, #16]
 8005088:	429a      	cmp	r2, r3
 800508a:	d909      	bls.n	80050a0 <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 800508c:	463b      	mov	r3, r7
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	6a1a      	ldr	r2, [r3, #32]
 8005092:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005096:	1ad2      	subs	r2, r2, r3
 8005098:	463b      	mov	r3, r7
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	621a      	str	r2, [r3, #32]
 800509e:	e008      	b.n	80050b2 <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 80050a0:	463b      	mov	r3, r7
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	6a1b      	ldr	r3, [r3, #32]
 80050a6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 80050aa:	463b      	mov	r3, r7
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	2200      	movs	r2, #0
 80050b0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80050b2:	463b      	mov	r3, r7
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	785b      	ldrb	r3, [r3, #1]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d164      	bne.n	8005186 <USB_EPStartXfer+0x384>
 80050bc:	1d3b      	adds	r3, r7, #4
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	61fb      	str	r3, [r7, #28]
 80050c2:	1d3b      	adds	r3, r7, #4
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050ca:	b29b      	uxth	r3, r3
 80050cc:	461a      	mov	r2, r3
 80050ce:	69fb      	ldr	r3, [r7, #28]
 80050d0:	4413      	add	r3, r2
 80050d2:	61fb      	str	r3, [r7, #28]
 80050d4:	463b      	mov	r3, r7
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	781b      	ldrb	r3, [r3, #0]
 80050da:	00da      	lsls	r2, r3, #3
 80050dc:	69fb      	ldr	r3, [r7, #28]
 80050de:	4413      	add	r3, r2
 80050e0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80050e4:	61bb      	str	r3, [r7, #24]
 80050e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d112      	bne.n	8005114 <USB_EPStartXfer+0x312>
 80050ee:	69bb      	ldr	r3, [r7, #24]
 80050f0:	881b      	ldrh	r3, [r3, #0]
 80050f2:	b29b      	uxth	r3, r3
 80050f4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80050f8:	b29a      	uxth	r2, r3
 80050fa:	69bb      	ldr	r3, [r7, #24]
 80050fc:	801a      	strh	r2, [r3, #0]
 80050fe:	69bb      	ldr	r3, [r7, #24]
 8005100:	881b      	ldrh	r3, [r3, #0]
 8005102:	b29b      	uxth	r3, r3
 8005104:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005108:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800510c:	b29a      	uxth	r2, r3
 800510e:	69bb      	ldr	r3, [r7, #24]
 8005110:	801a      	strh	r2, [r3, #0]
 8005112:	e057      	b.n	80051c4 <USB_EPStartXfer+0x3c2>
 8005114:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005118:	2b3e      	cmp	r3, #62	; 0x3e
 800511a:	d817      	bhi.n	800514c <USB_EPStartXfer+0x34a>
 800511c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005120:	085b      	lsrs	r3, r3, #1
 8005122:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005126:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800512a:	f003 0301 	and.w	r3, r3, #1
 800512e:	2b00      	cmp	r3, #0
 8005130:	d004      	beq.n	800513c <USB_EPStartXfer+0x33a>
 8005132:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005136:	3301      	adds	r3, #1
 8005138:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800513c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005140:	b29b      	uxth	r3, r3
 8005142:	029b      	lsls	r3, r3, #10
 8005144:	b29a      	uxth	r2, r3
 8005146:	69bb      	ldr	r3, [r7, #24]
 8005148:	801a      	strh	r2, [r3, #0]
 800514a:	e03b      	b.n	80051c4 <USB_EPStartXfer+0x3c2>
 800514c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005150:	095b      	lsrs	r3, r3, #5
 8005152:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005156:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800515a:	f003 031f 	and.w	r3, r3, #31
 800515e:	2b00      	cmp	r3, #0
 8005160:	d104      	bne.n	800516c <USB_EPStartXfer+0x36a>
 8005162:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005166:	3b01      	subs	r3, #1
 8005168:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800516c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005170:	b29b      	uxth	r3, r3
 8005172:	029b      	lsls	r3, r3, #10
 8005174:	b29b      	uxth	r3, r3
 8005176:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800517a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800517e:	b29a      	uxth	r2, r3
 8005180:	69bb      	ldr	r3, [r7, #24]
 8005182:	801a      	strh	r2, [r3, #0]
 8005184:	e01e      	b.n	80051c4 <USB_EPStartXfer+0x3c2>
 8005186:	463b      	mov	r3, r7
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	785b      	ldrb	r3, [r3, #1]
 800518c:	2b01      	cmp	r3, #1
 800518e:	d119      	bne.n	80051c4 <USB_EPStartXfer+0x3c2>
 8005190:	1d3b      	adds	r3, r7, #4
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	627b      	str	r3, [r7, #36]	; 0x24
 8005196:	1d3b      	adds	r3, r7, #4
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800519e:	b29b      	uxth	r3, r3
 80051a0:	461a      	mov	r2, r3
 80051a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a4:	4413      	add	r3, r2
 80051a6:	627b      	str	r3, [r7, #36]	; 0x24
 80051a8:	463b      	mov	r3, r7
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	781b      	ldrb	r3, [r3, #0]
 80051ae:	00da      	lsls	r2, r3, #3
 80051b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b2:	4413      	add	r3, r2
 80051b4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80051b8:	623b      	str	r3, [r7, #32]
 80051ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051be:	b29a      	uxth	r2, r3
 80051c0:	6a3b      	ldr	r3, [r7, #32]
 80051c2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80051c4:	463b      	mov	r3, r7
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	891b      	ldrh	r3, [r3, #8]
 80051ca:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80051ce:	463b      	mov	r3, r7
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	6959      	ldr	r1, [r3, #20]
 80051d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051d8:	b29b      	uxth	r3, r3
 80051da:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80051de:	1d38      	adds	r0, r7, #4
 80051e0:	6800      	ldr	r0, [r0, #0]
 80051e2:	f000 ff52 	bl	800608a <USB_WritePMA>
 80051e6:	e33b      	b.n	8005860 <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80051e8:	463b      	mov	r3, r7
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	785b      	ldrb	r3, [r3, #1]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d164      	bne.n	80052bc <USB_EPStartXfer+0x4ba>
 80051f2:	1d3b      	adds	r3, r7, #4
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051f8:	1d3b      	adds	r3, r7, #4
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005200:	b29b      	uxth	r3, r3
 8005202:	461a      	mov	r2, r3
 8005204:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005206:	4413      	add	r3, r2
 8005208:	64fb      	str	r3, [r7, #76]	; 0x4c
 800520a:	463b      	mov	r3, r7
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	781b      	ldrb	r3, [r3, #0]
 8005210:	00da      	lsls	r2, r3, #3
 8005212:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005214:	4413      	add	r3, r2
 8005216:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800521a:	64bb      	str	r3, [r7, #72]	; 0x48
 800521c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005220:	2b00      	cmp	r3, #0
 8005222:	d112      	bne.n	800524a <USB_EPStartXfer+0x448>
 8005224:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005226:	881b      	ldrh	r3, [r3, #0]
 8005228:	b29b      	uxth	r3, r3
 800522a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800522e:	b29a      	uxth	r2, r3
 8005230:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005232:	801a      	strh	r2, [r3, #0]
 8005234:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005236:	881b      	ldrh	r3, [r3, #0]
 8005238:	b29b      	uxth	r3, r3
 800523a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800523e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005242:	b29a      	uxth	r2, r3
 8005244:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005246:	801a      	strh	r2, [r3, #0]
 8005248:	e057      	b.n	80052fa <USB_EPStartXfer+0x4f8>
 800524a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800524e:	2b3e      	cmp	r3, #62	; 0x3e
 8005250:	d817      	bhi.n	8005282 <USB_EPStartXfer+0x480>
 8005252:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005256:	085b      	lsrs	r3, r3, #1
 8005258:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800525c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005260:	f003 0301 	and.w	r3, r3, #1
 8005264:	2b00      	cmp	r3, #0
 8005266:	d004      	beq.n	8005272 <USB_EPStartXfer+0x470>
 8005268:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800526c:	3301      	adds	r3, #1
 800526e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005272:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005276:	b29b      	uxth	r3, r3
 8005278:	029b      	lsls	r3, r3, #10
 800527a:	b29a      	uxth	r2, r3
 800527c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800527e:	801a      	strh	r2, [r3, #0]
 8005280:	e03b      	b.n	80052fa <USB_EPStartXfer+0x4f8>
 8005282:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005286:	095b      	lsrs	r3, r3, #5
 8005288:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800528c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005290:	f003 031f 	and.w	r3, r3, #31
 8005294:	2b00      	cmp	r3, #0
 8005296:	d104      	bne.n	80052a2 <USB_EPStartXfer+0x4a0>
 8005298:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800529c:	3b01      	subs	r3, #1
 800529e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80052a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052a6:	b29b      	uxth	r3, r3
 80052a8:	029b      	lsls	r3, r3, #10
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052b4:	b29a      	uxth	r2, r3
 80052b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052b8:	801a      	strh	r2, [r3, #0]
 80052ba:	e01e      	b.n	80052fa <USB_EPStartXfer+0x4f8>
 80052bc:	463b      	mov	r3, r7
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	785b      	ldrb	r3, [r3, #1]
 80052c2:	2b01      	cmp	r3, #1
 80052c4:	d119      	bne.n	80052fa <USB_EPStartXfer+0x4f8>
 80052c6:	1d3b      	adds	r3, r7, #4
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	657b      	str	r3, [r7, #84]	; 0x54
 80052cc:	1d3b      	adds	r3, r7, #4
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052d4:	b29b      	uxth	r3, r3
 80052d6:	461a      	mov	r2, r3
 80052d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052da:	4413      	add	r3, r2
 80052dc:	657b      	str	r3, [r7, #84]	; 0x54
 80052de:	463b      	mov	r3, r7
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	781b      	ldrb	r3, [r3, #0]
 80052e4:	00da      	lsls	r2, r3, #3
 80052e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052e8:	4413      	add	r3, r2
 80052ea:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80052ee:	653b      	str	r3, [r7, #80]	; 0x50
 80052f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052f4:	b29a      	uxth	r2, r3
 80052f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052f8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80052fa:	463b      	mov	r3, r7
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	891b      	ldrh	r3, [r3, #8]
 8005300:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005304:	463b      	mov	r3, r7
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	6959      	ldr	r1, [r3, #20]
 800530a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800530e:	b29b      	uxth	r3, r3
 8005310:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005314:	1d38      	adds	r0, r7, #4
 8005316:	6800      	ldr	r0, [r0, #0]
 8005318:	f000 feb7 	bl	800608a <USB_WritePMA>
            ep->xfer_buff += len;
 800531c:	463b      	mov	r3, r7
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	695a      	ldr	r2, [r3, #20]
 8005322:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005326:	441a      	add	r2, r3
 8005328:	463b      	mov	r3, r7
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800532e:	463b      	mov	r3, r7
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	6a1a      	ldr	r2, [r3, #32]
 8005334:	463b      	mov	r3, r7
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	691b      	ldr	r3, [r3, #16]
 800533a:	429a      	cmp	r2, r3
 800533c:	d909      	bls.n	8005352 <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 800533e:	463b      	mov	r3, r7
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	6a1a      	ldr	r2, [r3, #32]
 8005344:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005348:	1ad2      	subs	r2, r2, r3
 800534a:	463b      	mov	r3, r7
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	621a      	str	r2, [r3, #32]
 8005350:	e008      	b.n	8005364 <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 8005352:	463b      	mov	r3, r7
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	6a1b      	ldr	r3, [r3, #32]
 8005358:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 800535c:	463b      	mov	r3, r7
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	2200      	movs	r2, #0
 8005362:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005364:	1d3b      	adds	r3, r7, #4
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	647b      	str	r3, [r7, #68]	; 0x44
 800536a:	463b      	mov	r3, r7
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	785b      	ldrb	r3, [r3, #1]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d164      	bne.n	800543e <USB_EPStartXfer+0x63c>
 8005374:	1d3b      	adds	r3, r7, #4
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	63fb      	str	r3, [r7, #60]	; 0x3c
 800537a:	1d3b      	adds	r3, r7, #4
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005382:	b29b      	uxth	r3, r3
 8005384:	461a      	mov	r2, r3
 8005386:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005388:	4413      	add	r3, r2
 800538a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800538c:	463b      	mov	r3, r7
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	781b      	ldrb	r3, [r3, #0]
 8005392:	00da      	lsls	r2, r3, #3
 8005394:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005396:	4413      	add	r3, r2
 8005398:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800539c:	63bb      	str	r3, [r7, #56]	; 0x38
 800539e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d112      	bne.n	80053cc <USB_EPStartXfer+0x5ca>
 80053a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053a8:	881b      	ldrh	r3, [r3, #0]
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80053b0:	b29a      	uxth	r2, r3
 80053b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053b4:	801a      	strh	r2, [r3, #0]
 80053b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053b8:	881b      	ldrh	r3, [r3, #0]
 80053ba:	b29b      	uxth	r3, r3
 80053bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053c4:	b29a      	uxth	r2, r3
 80053c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053c8:	801a      	strh	r2, [r3, #0]
 80053ca:	e054      	b.n	8005476 <USB_EPStartXfer+0x674>
 80053cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053d0:	2b3e      	cmp	r3, #62	; 0x3e
 80053d2:	d817      	bhi.n	8005404 <USB_EPStartXfer+0x602>
 80053d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053d8:	085b      	lsrs	r3, r3, #1
 80053da:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80053de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053e2:	f003 0301 	and.w	r3, r3, #1
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d004      	beq.n	80053f4 <USB_EPStartXfer+0x5f2>
 80053ea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80053ee:	3301      	adds	r3, #1
 80053f0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80053f4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80053f8:	b29b      	uxth	r3, r3
 80053fa:	029b      	lsls	r3, r3, #10
 80053fc:	b29a      	uxth	r2, r3
 80053fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005400:	801a      	strh	r2, [r3, #0]
 8005402:	e038      	b.n	8005476 <USB_EPStartXfer+0x674>
 8005404:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005408:	095b      	lsrs	r3, r3, #5
 800540a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800540e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005412:	f003 031f 	and.w	r3, r3, #31
 8005416:	2b00      	cmp	r3, #0
 8005418:	d104      	bne.n	8005424 <USB_EPStartXfer+0x622>
 800541a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800541e:	3b01      	subs	r3, #1
 8005420:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005424:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005428:	b29b      	uxth	r3, r3
 800542a:	029b      	lsls	r3, r3, #10
 800542c:	b29b      	uxth	r3, r3
 800542e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005432:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005436:	b29a      	uxth	r2, r3
 8005438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800543a:	801a      	strh	r2, [r3, #0]
 800543c:	e01b      	b.n	8005476 <USB_EPStartXfer+0x674>
 800543e:	463b      	mov	r3, r7
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	785b      	ldrb	r3, [r3, #1]
 8005444:	2b01      	cmp	r3, #1
 8005446:	d116      	bne.n	8005476 <USB_EPStartXfer+0x674>
 8005448:	1d3b      	adds	r3, r7, #4
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005450:	b29b      	uxth	r3, r3
 8005452:	461a      	mov	r2, r3
 8005454:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005456:	4413      	add	r3, r2
 8005458:	647b      	str	r3, [r7, #68]	; 0x44
 800545a:	463b      	mov	r3, r7
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	781b      	ldrb	r3, [r3, #0]
 8005460:	00da      	lsls	r2, r3, #3
 8005462:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005464:	4413      	add	r3, r2
 8005466:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800546a:	643b      	str	r3, [r7, #64]	; 0x40
 800546c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005470:	b29a      	uxth	r2, r3
 8005472:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005474:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005476:	463b      	mov	r3, r7
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	895b      	ldrh	r3, [r3, #10]
 800547c:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005480:	463b      	mov	r3, r7
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	6959      	ldr	r1, [r3, #20]
 8005486:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800548a:	b29b      	uxth	r3, r3
 800548c:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005490:	1d38      	adds	r0, r7, #4
 8005492:	6800      	ldr	r0, [r0, #0]
 8005494:	f000 fdf9 	bl	800608a <USB_WritePMA>
 8005498:	e1e2      	b.n	8005860 <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800549a:	463b      	mov	r3, r7
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	6a1b      	ldr	r3, [r3, #32]
 80054a0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80054a4:	1d3b      	adds	r3, r7, #4
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	463b      	mov	r3, r7
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	781b      	ldrb	r3, [r3, #0]
 80054ae:	009b      	lsls	r3, r3, #2
 80054b0:	4413      	add	r3, r2
 80054b2:	881b      	ldrh	r3, [r3, #0]
 80054b4:	b29b      	uxth	r3, r3
 80054b6:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80054ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054be:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80054c2:	1d3b      	adds	r3, r7, #4
 80054c4:	681a      	ldr	r2, [r3, #0]
 80054c6:	463b      	mov	r3, r7
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	781b      	ldrb	r3, [r3, #0]
 80054cc:	009b      	lsls	r3, r3, #2
 80054ce:	441a      	add	r2, r3
 80054d0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80054d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054e4:	b29b      	uxth	r3, r3
 80054e6:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80054e8:	1d3b      	adds	r3, r7, #4
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	663b      	str	r3, [r7, #96]	; 0x60
 80054ee:	1d3b      	adds	r3, r7, #4
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	461a      	mov	r2, r3
 80054fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80054fc:	4413      	add	r3, r2
 80054fe:	663b      	str	r3, [r7, #96]	; 0x60
 8005500:	463b      	mov	r3, r7
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	781b      	ldrb	r3, [r3, #0]
 8005506:	00da      	lsls	r2, r3, #3
 8005508:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800550a:	4413      	add	r3, r2
 800550c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005510:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005512:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005516:	b29a      	uxth	r2, r3
 8005518:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800551a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800551c:	463b      	mov	r3, r7
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	891b      	ldrh	r3, [r3, #8]
 8005522:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005526:	463b      	mov	r3, r7
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	6959      	ldr	r1, [r3, #20]
 800552c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005530:	b29b      	uxth	r3, r3
 8005532:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005536:	1d38      	adds	r0, r7, #4
 8005538:	6800      	ldr	r0, [r0, #0]
 800553a:	f000 fda6 	bl	800608a <USB_WritePMA>
 800553e:	e18f      	b.n	8005860 <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005540:	1d3b      	adds	r3, r7, #4
 8005542:	681a      	ldr	r2, [r3, #0]
 8005544:	463b      	mov	r3, r7
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	781b      	ldrb	r3, [r3, #0]
 800554a:	009b      	lsls	r3, r3, #2
 800554c:	4413      	add	r3, r2
 800554e:	881b      	ldrh	r3, [r3, #0]
 8005550:	b29b      	uxth	r3, r3
 8005552:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005556:	2b00      	cmp	r3, #0
 8005558:	f000 808f 	beq.w	800567a <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800555c:	1d3b      	adds	r3, r7, #4
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	67bb      	str	r3, [r7, #120]	; 0x78
 8005562:	463b      	mov	r3, r7
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	785b      	ldrb	r3, [r3, #1]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d164      	bne.n	8005636 <USB_EPStartXfer+0x834>
 800556c:	1d3b      	adds	r3, r7, #4
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	673b      	str	r3, [r7, #112]	; 0x70
 8005572:	1d3b      	adds	r3, r7, #4
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800557a:	b29b      	uxth	r3, r3
 800557c:	461a      	mov	r2, r3
 800557e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005580:	4413      	add	r3, r2
 8005582:	673b      	str	r3, [r7, #112]	; 0x70
 8005584:	463b      	mov	r3, r7
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	781b      	ldrb	r3, [r3, #0]
 800558a:	00da      	lsls	r2, r3, #3
 800558c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800558e:	4413      	add	r3, r2
 8005590:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005594:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005596:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800559a:	2b00      	cmp	r3, #0
 800559c:	d112      	bne.n	80055c4 <USB_EPStartXfer+0x7c2>
 800559e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055a0:	881b      	ldrh	r3, [r3, #0]
 80055a2:	b29b      	uxth	r3, r3
 80055a4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80055a8:	b29a      	uxth	r2, r3
 80055aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055ac:	801a      	strh	r2, [r3, #0]
 80055ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055b0:	881b      	ldrh	r3, [r3, #0]
 80055b2:	b29b      	uxth	r3, r3
 80055b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055bc:	b29a      	uxth	r2, r3
 80055be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055c0:	801a      	strh	r2, [r3, #0]
 80055c2:	e054      	b.n	800566e <USB_EPStartXfer+0x86c>
 80055c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055c8:	2b3e      	cmp	r3, #62	; 0x3e
 80055ca:	d817      	bhi.n	80055fc <USB_EPStartXfer+0x7fa>
 80055cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055d0:	085b      	lsrs	r3, r3, #1
 80055d2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80055d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055da:	f003 0301 	and.w	r3, r3, #1
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d004      	beq.n	80055ec <USB_EPStartXfer+0x7ea>
 80055e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055e6:	3301      	adds	r3, #1
 80055e8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80055ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055f0:	b29b      	uxth	r3, r3
 80055f2:	029b      	lsls	r3, r3, #10
 80055f4:	b29a      	uxth	r2, r3
 80055f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055f8:	801a      	strh	r2, [r3, #0]
 80055fa:	e038      	b.n	800566e <USB_EPStartXfer+0x86c>
 80055fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005600:	095b      	lsrs	r3, r3, #5
 8005602:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005606:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800560a:	f003 031f 	and.w	r3, r3, #31
 800560e:	2b00      	cmp	r3, #0
 8005610:	d104      	bne.n	800561c <USB_EPStartXfer+0x81a>
 8005612:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005616:	3b01      	subs	r3, #1
 8005618:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800561c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005620:	b29b      	uxth	r3, r3
 8005622:	029b      	lsls	r3, r3, #10
 8005624:	b29b      	uxth	r3, r3
 8005626:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800562a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800562e:	b29a      	uxth	r2, r3
 8005630:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005632:	801a      	strh	r2, [r3, #0]
 8005634:	e01b      	b.n	800566e <USB_EPStartXfer+0x86c>
 8005636:	463b      	mov	r3, r7
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	785b      	ldrb	r3, [r3, #1]
 800563c:	2b01      	cmp	r3, #1
 800563e:	d116      	bne.n	800566e <USB_EPStartXfer+0x86c>
 8005640:	1d3b      	adds	r3, r7, #4
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005648:	b29b      	uxth	r3, r3
 800564a:	461a      	mov	r2, r3
 800564c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800564e:	4413      	add	r3, r2
 8005650:	67bb      	str	r3, [r7, #120]	; 0x78
 8005652:	463b      	mov	r3, r7
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	781b      	ldrb	r3, [r3, #0]
 8005658:	00da      	lsls	r2, r3, #3
 800565a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800565c:	4413      	add	r3, r2
 800565e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005662:	677b      	str	r3, [r7, #116]	; 0x74
 8005664:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005668:	b29a      	uxth	r2, r3
 800566a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800566c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800566e:	463b      	mov	r3, r7
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	895b      	ldrh	r3, [r3, #10]
 8005674:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 8005678:	e097      	b.n	80057aa <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800567a:	463b      	mov	r3, r7
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	785b      	ldrb	r3, [r3, #1]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d168      	bne.n	8005756 <USB_EPStartXfer+0x954>
 8005684:	1d3b      	adds	r3, r7, #4
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800568c:	1d3b      	adds	r3, r7, #4
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005694:	b29b      	uxth	r3, r3
 8005696:	461a      	mov	r2, r3
 8005698:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800569c:	4413      	add	r3, r2
 800569e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80056a2:	463b      	mov	r3, r7
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	781b      	ldrb	r3, [r3, #0]
 80056a8:	00da      	lsls	r2, r3, #3
 80056aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80056ae:	4413      	add	r3, r2
 80056b0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80056b4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80056b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d112      	bne.n	80056e4 <USB_EPStartXfer+0x8e2>
 80056be:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80056c0:	881b      	ldrh	r3, [r3, #0]
 80056c2:	b29b      	uxth	r3, r3
 80056c4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80056c8:	b29a      	uxth	r2, r3
 80056ca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80056cc:	801a      	strh	r2, [r3, #0]
 80056ce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80056d0:	881b      	ldrh	r3, [r3, #0]
 80056d2:	b29b      	uxth	r3, r3
 80056d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056dc:	b29a      	uxth	r2, r3
 80056de:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80056e0:	801a      	strh	r2, [r3, #0]
 80056e2:	e05d      	b.n	80057a0 <USB_EPStartXfer+0x99e>
 80056e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056e8:	2b3e      	cmp	r3, #62	; 0x3e
 80056ea:	d817      	bhi.n	800571c <USB_EPStartXfer+0x91a>
 80056ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056f0:	085b      	lsrs	r3, r3, #1
 80056f2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80056f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056fa:	f003 0301 	and.w	r3, r3, #1
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d004      	beq.n	800570c <USB_EPStartXfer+0x90a>
 8005702:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005706:	3301      	adds	r3, #1
 8005708:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800570c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005710:	b29b      	uxth	r3, r3
 8005712:	029b      	lsls	r3, r3, #10
 8005714:	b29a      	uxth	r2, r3
 8005716:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005718:	801a      	strh	r2, [r3, #0]
 800571a:	e041      	b.n	80057a0 <USB_EPStartXfer+0x99e>
 800571c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005720:	095b      	lsrs	r3, r3, #5
 8005722:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005726:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800572a:	f003 031f 	and.w	r3, r3, #31
 800572e:	2b00      	cmp	r3, #0
 8005730:	d104      	bne.n	800573c <USB_EPStartXfer+0x93a>
 8005732:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005736:	3b01      	subs	r3, #1
 8005738:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800573c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005740:	b29b      	uxth	r3, r3
 8005742:	029b      	lsls	r3, r3, #10
 8005744:	b29b      	uxth	r3, r3
 8005746:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800574a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800574e:	b29a      	uxth	r2, r3
 8005750:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005752:	801a      	strh	r2, [r3, #0]
 8005754:	e024      	b.n	80057a0 <USB_EPStartXfer+0x99e>
 8005756:	463b      	mov	r3, r7
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	785b      	ldrb	r3, [r3, #1]
 800575c:	2b01      	cmp	r3, #1
 800575e:	d11f      	bne.n	80057a0 <USB_EPStartXfer+0x99e>
 8005760:	1d3b      	adds	r3, r7, #4
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005768:	1d3b      	adds	r3, r7, #4
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005770:	b29b      	uxth	r3, r3
 8005772:	461a      	mov	r2, r3
 8005774:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005778:	4413      	add	r3, r2
 800577a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800577e:	463b      	mov	r3, r7
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	781b      	ldrb	r3, [r3, #0]
 8005784:	00da      	lsls	r2, r3, #3
 8005786:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800578a:	4413      	add	r3, r2
 800578c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005790:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005794:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005798:	b29a      	uxth	r2, r3
 800579a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800579e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80057a0:	463b      	mov	r3, r7
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	891b      	ldrh	r3, [r3, #8]
 80057a6:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80057aa:	463b      	mov	r3, r7
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	6959      	ldr	r1, [r3, #20]
 80057b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057b4:	b29b      	uxth	r3, r3
 80057b6:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80057ba:	1d38      	adds	r0, r7, #4
 80057bc:	6800      	ldr	r0, [r0, #0]
 80057be:	f000 fc64 	bl	800608a <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80057c2:	463b      	mov	r3, r7
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	785b      	ldrb	r3, [r3, #1]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d122      	bne.n	8005812 <USB_EPStartXfer+0xa10>
 80057cc:	1d3b      	adds	r3, r7, #4
 80057ce:	681a      	ldr	r2, [r3, #0]
 80057d0:	463b      	mov	r3, r7
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	781b      	ldrb	r3, [r3, #0]
 80057d6:	009b      	lsls	r3, r3, #2
 80057d8:	4413      	add	r3, r2
 80057da:	881b      	ldrh	r3, [r3, #0]
 80057dc:	b29b      	uxth	r3, r3
 80057de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057e6:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 80057ea:	1d3b      	adds	r3, r7, #4
 80057ec:	681a      	ldr	r2, [r3, #0]
 80057ee:	463b      	mov	r3, r7
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	781b      	ldrb	r3, [r3, #0]
 80057f4:	009b      	lsls	r3, r3, #2
 80057f6:	441a      	add	r2, r3
 80057f8:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80057fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005800:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005804:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005808:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800580c:	b29b      	uxth	r3, r3
 800580e:	8013      	strh	r3, [r2, #0]
 8005810:	e026      	b.n	8005860 <USB_EPStartXfer+0xa5e>
 8005812:	463b      	mov	r3, r7
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	785b      	ldrb	r3, [r3, #1]
 8005818:	2b01      	cmp	r3, #1
 800581a:	d121      	bne.n	8005860 <USB_EPStartXfer+0xa5e>
 800581c:	1d3b      	adds	r3, r7, #4
 800581e:	681a      	ldr	r2, [r3, #0]
 8005820:	463b      	mov	r3, r7
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	781b      	ldrb	r3, [r3, #0]
 8005826:	009b      	lsls	r3, r3, #2
 8005828:	4413      	add	r3, r2
 800582a:	881b      	ldrh	r3, [r3, #0]
 800582c:	b29b      	uxth	r3, r3
 800582e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005832:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005836:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 800583a:	1d3b      	adds	r3, r7, #4
 800583c:	681a      	ldr	r2, [r3, #0]
 800583e:	463b      	mov	r3, r7
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	781b      	ldrb	r3, [r3, #0]
 8005844:	009b      	lsls	r3, r3, #2
 8005846:	441a      	add	r2, r3
 8005848:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 800584c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005850:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005854:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005858:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800585c:	b29b      	uxth	r3, r3
 800585e:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005860:	1d3b      	adds	r3, r7, #4
 8005862:	681a      	ldr	r2, [r3, #0]
 8005864:	463b      	mov	r3, r7
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	781b      	ldrb	r3, [r3, #0]
 800586a:	009b      	lsls	r3, r3, #2
 800586c:	4413      	add	r3, r2
 800586e:	881b      	ldrh	r3, [r3, #0]
 8005870:	b29b      	uxth	r3, r3
 8005872:	f107 020e 	add.w	r2, r7, #14
 8005876:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800587a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800587e:	8013      	strh	r3, [r2, #0]
 8005880:	f107 030e 	add.w	r3, r7, #14
 8005884:	f107 020e 	add.w	r2, r7, #14
 8005888:	8812      	ldrh	r2, [r2, #0]
 800588a:	f082 0210 	eor.w	r2, r2, #16
 800588e:	801a      	strh	r2, [r3, #0]
 8005890:	f107 030e 	add.w	r3, r7, #14
 8005894:	f107 020e 	add.w	r2, r7, #14
 8005898:	8812      	ldrh	r2, [r2, #0]
 800589a:	f082 0220 	eor.w	r2, r2, #32
 800589e:	801a      	strh	r2, [r3, #0]
 80058a0:	1d3b      	adds	r3, r7, #4
 80058a2:	681a      	ldr	r2, [r3, #0]
 80058a4:	463b      	mov	r3, r7
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	781b      	ldrb	r3, [r3, #0]
 80058aa:	009b      	lsls	r3, r3, #2
 80058ac:	441a      	add	r2, r3
 80058ae:	f107 030e 	add.w	r3, r7, #14
 80058b2:	881b      	ldrh	r3, [r3, #0]
 80058b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058c4:	b29b      	uxth	r3, r3
 80058c6:	8013      	strh	r3, [r2, #0]
 80058c8:	e3b5      	b.n	8006036 <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80058ca:	463b      	mov	r3, r7
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	7b1b      	ldrb	r3, [r3, #12]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	f040 8090 	bne.w	80059f6 <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80058d6:	463b      	mov	r3, r7
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	699a      	ldr	r2, [r3, #24]
 80058dc:	463b      	mov	r3, r7
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	691b      	ldr	r3, [r3, #16]
 80058e2:	429a      	cmp	r2, r3
 80058e4:	d90e      	bls.n	8005904 <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 80058e6:	463b      	mov	r3, r7
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	691b      	ldr	r3, [r3, #16]
 80058ec:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 80058f0:	463b      	mov	r3, r7
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	699a      	ldr	r2, [r3, #24]
 80058f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058fa:	1ad2      	subs	r2, r2, r3
 80058fc:	463b      	mov	r3, r7
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	619a      	str	r2, [r3, #24]
 8005902:	e008      	b.n	8005916 <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 8005904:	463b      	mov	r3, r7
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	699b      	ldr	r3, [r3, #24]
 800590a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 800590e:	463b      	mov	r3, r7
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	2200      	movs	r2, #0
 8005914:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005916:	1d3b      	adds	r3, r7, #4
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800591e:	1d3b      	adds	r3, r7, #4
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005926:	b29b      	uxth	r3, r3
 8005928:	461a      	mov	r2, r3
 800592a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800592e:	4413      	add	r3, r2
 8005930:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005934:	463b      	mov	r3, r7
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	781b      	ldrb	r3, [r3, #0]
 800593a:	00da      	lsls	r2, r3, #3
 800593c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005940:	4413      	add	r3, r2
 8005942:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005946:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800594a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800594e:	2b00      	cmp	r3, #0
 8005950:	d116      	bne.n	8005980 <USB_EPStartXfer+0xb7e>
 8005952:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005956:	881b      	ldrh	r3, [r3, #0]
 8005958:	b29b      	uxth	r3, r3
 800595a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800595e:	b29a      	uxth	r2, r3
 8005960:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005964:	801a      	strh	r2, [r3, #0]
 8005966:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800596a:	881b      	ldrh	r3, [r3, #0]
 800596c:	b29b      	uxth	r3, r3
 800596e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005972:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005976:	b29a      	uxth	r2, r3
 8005978:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800597c:	801a      	strh	r2, [r3, #0]
 800597e:	e32c      	b.n	8005fda <USB_EPStartXfer+0x11d8>
 8005980:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005984:	2b3e      	cmp	r3, #62	; 0x3e
 8005986:	d818      	bhi.n	80059ba <USB_EPStartXfer+0xbb8>
 8005988:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800598c:	085b      	lsrs	r3, r3, #1
 800598e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005992:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005996:	f003 0301 	and.w	r3, r3, #1
 800599a:	2b00      	cmp	r3, #0
 800599c:	d004      	beq.n	80059a8 <USB_EPStartXfer+0xba6>
 800599e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80059a2:	3301      	adds	r3, #1
 80059a4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80059a8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80059ac:	b29b      	uxth	r3, r3
 80059ae:	029b      	lsls	r3, r3, #10
 80059b0:	b29a      	uxth	r2, r3
 80059b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80059b6:	801a      	strh	r2, [r3, #0]
 80059b8:	e30f      	b.n	8005fda <USB_EPStartXfer+0x11d8>
 80059ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059be:	095b      	lsrs	r3, r3, #5
 80059c0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80059c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059c8:	f003 031f 	and.w	r3, r3, #31
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d104      	bne.n	80059da <USB_EPStartXfer+0xbd8>
 80059d0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80059d4:	3b01      	subs	r3, #1
 80059d6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80059da:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80059de:	b29b      	uxth	r3, r3
 80059e0:	029b      	lsls	r3, r3, #10
 80059e2:	b29b      	uxth	r3, r3
 80059e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059ec:	b29a      	uxth	r2, r3
 80059ee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80059f2:	801a      	strh	r2, [r3, #0]
 80059f4:	e2f1      	b.n	8005fda <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80059f6:	463b      	mov	r3, r7
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	78db      	ldrb	r3, [r3, #3]
 80059fc:	2b02      	cmp	r3, #2
 80059fe:	f040 818f 	bne.w	8005d20 <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005a02:	463b      	mov	r3, r7
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	785b      	ldrb	r3, [r3, #1]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d175      	bne.n	8005af8 <USB_EPStartXfer+0xcf6>
 8005a0c:	1d3b      	adds	r3, r7, #4
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005a14:	1d3b      	adds	r3, r7, #4
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a1c:	b29b      	uxth	r3, r3
 8005a1e:	461a      	mov	r2, r3
 8005a20:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005a24:	4413      	add	r3, r2
 8005a26:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005a2a:	463b      	mov	r3, r7
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	781b      	ldrb	r3, [r3, #0]
 8005a30:	00da      	lsls	r2, r3, #3
 8005a32:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005a36:	4413      	add	r3, r2
 8005a38:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005a3c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005a40:	463b      	mov	r3, r7
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	691b      	ldr	r3, [r3, #16]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d116      	bne.n	8005a78 <USB_EPStartXfer+0xc76>
 8005a4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005a4e:	881b      	ldrh	r3, [r3, #0]
 8005a50:	b29b      	uxth	r3, r3
 8005a52:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a56:	b29a      	uxth	r2, r3
 8005a58:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005a5c:	801a      	strh	r2, [r3, #0]
 8005a5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005a62:	881b      	ldrh	r3, [r3, #0]
 8005a64:	b29b      	uxth	r3, r3
 8005a66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a6e:	b29a      	uxth	r2, r3
 8005a70:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005a74:	801a      	strh	r2, [r3, #0]
 8005a76:	e065      	b.n	8005b44 <USB_EPStartXfer+0xd42>
 8005a78:	463b      	mov	r3, r7
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	691b      	ldr	r3, [r3, #16]
 8005a7e:	2b3e      	cmp	r3, #62	; 0x3e
 8005a80:	d81a      	bhi.n	8005ab8 <USB_EPStartXfer+0xcb6>
 8005a82:	463b      	mov	r3, r7
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	691b      	ldr	r3, [r3, #16]
 8005a88:	085b      	lsrs	r3, r3, #1
 8005a8a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005a8e:	463b      	mov	r3, r7
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	691b      	ldr	r3, [r3, #16]
 8005a94:	f003 0301 	and.w	r3, r3, #1
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d004      	beq.n	8005aa6 <USB_EPStartXfer+0xca4>
 8005a9c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005aa0:	3301      	adds	r3, #1
 8005aa2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005aa6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005aaa:	b29b      	uxth	r3, r3
 8005aac:	029b      	lsls	r3, r3, #10
 8005aae:	b29a      	uxth	r2, r3
 8005ab0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005ab4:	801a      	strh	r2, [r3, #0]
 8005ab6:	e045      	b.n	8005b44 <USB_EPStartXfer+0xd42>
 8005ab8:	463b      	mov	r3, r7
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	691b      	ldr	r3, [r3, #16]
 8005abe:	095b      	lsrs	r3, r3, #5
 8005ac0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005ac4:	463b      	mov	r3, r7
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	691b      	ldr	r3, [r3, #16]
 8005aca:	f003 031f 	and.w	r3, r3, #31
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d104      	bne.n	8005adc <USB_EPStartXfer+0xcda>
 8005ad2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005ad6:	3b01      	subs	r3, #1
 8005ad8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005adc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005ae0:	b29b      	uxth	r3, r3
 8005ae2:	029b      	lsls	r3, r3, #10
 8005ae4:	b29b      	uxth	r3, r3
 8005ae6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005aea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005aee:	b29a      	uxth	r2, r3
 8005af0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005af4:	801a      	strh	r2, [r3, #0]
 8005af6:	e025      	b.n	8005b44 <USB_EPStartXfer+0xd42>
 8005af8:	463b      	mov	r3, r7
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	785b      	ldrb	r3, [r3, #1]
 8005afe:	2b01      	cmp	r3, #1
 8005b00:	d120      	bne.n	8005b44 <USB_EPStartXfer+0xd42>
 8005b02:	1d3b      	adds	r3, r7, #4
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005b0a:	1d3b      	adds	r3, r7, #4
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b12:	b29b      	uxth	r3, r3
 8005b14:	461a      	mov	r2, r3
 8005b16:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005b1a:	4413      	add	r3, r2
 8005b1c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005b20:	463b      	mov	r3, r7
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	781b      	ldrb	r3, [r3, #0]
 8005b26:	00da      	lsls	r2, r3, #3
 8005b28:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005b2c:	4413      	add	r3, r2
 8005b2e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005b32:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005b36:	463b      	mov	r3, r7
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	691b      	ldr	r3, [r3, #16]
 8005b3c:	b29a      	uxth	r2, r3
 8005b3e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005b42:	801a      	strh	r2, [r3, #0]
 8005b44:	1d3b      	adds	r3, r7, #4
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005b4c:	463b      	mov	r3, r7
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	785b      	ldrb	r3, [r3, #1]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d175      	bne.n	8005c42 <USB_EPStartXfer+0xe40>
 8005b56:	1d3b      	adds	r3, r7, #4
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005b5e:	1d3b      	adds	r3, r7, #4
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b66:	b29b      	uxth	r3, r3
 8005b68:	461a      	mov	r2, r3
 8005b6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005b6e:	4413      	add	r3, r2
 8005b70:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005b74:	463b      	mov	r3, r7
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	781b      	ldrb	r3, [r3, #0]
 8005b7a:	00da      	lsls	r2, r3, #3
 8005b7c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005b80:	4413      	add	r3, r2
 8005b82:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005b86:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005b8a:	463b      	mov	r3, r7
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	691b      	ldr	r3, [r3, #16]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d116      	bne.n	8005bc2 <USB_EPStartXfer+0xdc0>
 8005b94:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005b98:	881b      	ldrh	r3, [r3, #0]
 8005b9a:	b29b      	uxth	r3, r3
 8005b9c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005ba0:	b29a      	uxth	r2, r3
 8005ba2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005ba6:	801a      	strh	r2, [r3, #0]
 8005ba8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005bac:	881b      	ldrh	r3, [r3, #0]
 8005bae:	b29b      	uxth	r3, r3
 8005bb0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bb4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bb8:	b29a      	uxth	r2, r3
 8005bba:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005bbe:	801a      	strh	r2, [r3, #0]
 8005bc0:	e061      	b.n	8005c86 <USB_EPStartXfer+0xe84>
 8005bc2:	463b      	mov	r3, r7
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	691b      	ldr	r3, [r3, #16]
 8005bc8:	2b3e      	cmp	r3, #62	; 0x3e
 8005bca:	d81a      	bhi.n	8005c02 <USB_EPStartXfer+0xe00>
 8005bcc:	463b      	mov	r3, r7
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	691b      	ldr	r3, [r3, #16]
 8005bd2:	085b      	lsrs	r3, r3, #1
 8005bd4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005bd8:	463b      	mov	r3, r7
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	691b      	ldr	r3, [r3, #16]
 8005bde:	f003 0301 	and.w	r3, r3, #1
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d004      	beq.n	8005bf0 <USB_EPStartXfer+0xdee>
 8005be6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bea:	3301      	adds	r3, #1
 8005bec:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005bf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bf4:	b29b      	uxth	r3, r3
 8005bf6:	029b      	lsls	r3, r3, #10
 8005bf8:	b29a      	uxth	r2, r3
 8005bfa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005bfe:	801a      	strh	r2, [r3, #0]
 8005c00:	e041      	b.n	8005c86 <USB_EPStartXfer+0xe84>
 8005c02:	463b      	mov	r3, r7
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	691b      	ldr	r3, [r3, #16]
 8005c08:	095b      	lsrs	r3, r3, #5
 8005c0a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005c0e:	463b      	mov	r3, r7
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	691b      	ldr	r3, [r3, #16]
 8005c14:	f003 031f 	and.w	r3, r3, #31
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d104      	bne.n	8005c26 <USB_EPStartXfer+0xe24>
 8005c1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c20:	3b01      	subs	r3, #1
 8005c22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005c26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c2a:	b29b      	uxth	r3, r3
 8005c2c:	029b      	lsls	r3, r3, #10
 8005c2e:	b29b      	uxth	r3, r3
 8005c30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c38:	b29a      	uxth	r2, r3
 8005c3a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005c3e:	801a      	strh	r2, [r3, #0]
 8005c40:	e021      	b.n	8005c86 <USB_EPStartXfer+0xe84>
 8005c42:	463b      	mov	r3, r7
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	785b      	ldrb	r3, [r3, #1]
 8005c48:	2b01      	cmp	r3, #1
 8005c4a:	d11c      	bne.n	8005c86 <USB_EPStartXfer+0xe84>
 8005c4c:	1d3b      	adds	r3, r7, #4
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c54:	b29b      	uxth	r3, r3
 8005c56:	461a      	mov	r2, r3
 8005c58:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005c5c:	4413      	add	r3, r2
 8005c5e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005c62:	463b      	mov	r3, r7
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	781b      	ldrb	r3, [r3, #0]
 8005c68:	00da      	lsls	r2, r3, #3
 8005c6a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005c6e:	4413      	add	r3, r2
 8005c70:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005c74:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005c78:	463b      	mov	r3, r7
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	691b      	ldr	r3, [r3, #16]
 8005c7e:	b29a      	uxth	r2, r3
 8005c80:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005c84:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005c86:	463b      	mov	r3, r7
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	69db      	ldr	r3, [r3, #28]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	f000 81a4 	beq.w	8005fda <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005c92:	1d3b      	adds	r3, r7, #4
 8005c94:	681a      	ldr	r2, [r3, #0]
 8005c96:	463b      	mov	r3, r7
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	781b      	ldrb	r3, [r3, #0]
 8005c9c:	009b      	lsls	r3, r3, #2
 8005c9e:	4413      	add	r3, r2
 8005ca0:	881b      	ldrh	r3, [r3, #0]
 8005ca2:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005ca6:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005caa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d005      	beq.n	8005cbe <USB_EPStartXfer+0xebc>
 8005cb2:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005cb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d10d      	bne.n	8005cda <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005cbe:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005cc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	f040 8187 	bne.w	8005fda <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005ccc:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005cd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	f040 8180 	bne.w	8005fda <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8005cda:	1d3b      	adds	r3, r7, #4
 8005cdc:	681a      	ldr	r2, [r3, #0]
 8005cde:	463b      	mov	r3, r7
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	781b      	ldrb	r3, [r3, #0]
 8005ce4:	009b      	lsls	r3, r3, #2
 8005ce6:	4413      	add	r3, r2
 8005ce8:	881b      	ldrh	r3, [r3, #0]
 8005cea:	b29b      	uxth	r3, r3
 8005cec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cf0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cf4:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8005cf8:	1d3b      	adds	r3, r7, #4
 8005cfa:	681a      	ldr	r2, [r3, #0]
 8005cfc:	463b      	mov	r3, r7
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	781b      	ldrb	r3, [r3, #0]
 8005d02:	009b      	lsls	r3, r3, #2
 8005d04:	441a      	add	r2, r3
 8005d06:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8005d0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d16:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005d1a:	b29b      	uxth	r3, r3
 8005d1c:	8013      	strh	r3, [r2, #0]
 8005d1e:	e15c      	b.n	8005fda <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005d20:	463b      	mov	r3, r7
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	78db      	ldrb	r3, [r3, #3]
 8005d26:	2b01      	cmp	r3, #1
 8005d28:	f040 8155 	bne.w	8005fd6 <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005d2c:	463b      	mov	r3, r7
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	699a      	ldr	r2, [r3, #24]
 8005d32:	463b      	mov	r3, r7
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	691b      	ldr	r3, [r3, #16]
 8005d38:	429a      	cmp	r2, r3
 8005d3a:	d90e      	bls.n	8005d5a <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 8005d3c:	463b      	mov	r3, r7
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	691b      	ldr	r3, [r3, #16]
 8005d42:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 8005d46:	463b      	mov	r3, r7
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	699a      	ldr	r2, [r3, #24]
 8005d4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d50:	1ad2      	subs	r2, r2, r3
 8005d52:	463b      	mov	r3, r7
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	619a      	str	r2, [r3, #24]
 8005d58:	e008      	b.n	8005d6c <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 8005d5a:	463b      	mov	r3, r7
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	699b      	ldr	r3, [r3, #24]
 8005d60:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 8005d64:	463b      	mov	r3, r7
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005d6c:	463b      	mov	r3, r7
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	785b      	ldrb	r3, [r3, #1]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d16f      	bne.n	8005e56 <USB_EPStartXfer+0x1054>
 8005d76:	1d3b      	adds	r3, r7, #4
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005d7e:	1d3b      	adds	r3, r7, #4
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	461a      	mov	r2, r3
 8005d8a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005d8e:	4413      	add	r3, r2
 8005d90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005d94:	463b      	mov	r3, r7
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	781b      	ldrb	r3, [r3, #0]
 8005d9a:	00da      	lsls	r2, r3, #3
 8005d9c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005da0:	4413      	add	r3, r2
 8005da2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005da6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005daa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d116      	bne.n	8005de0 <USB_EPStartXfer+0xfde>
 8005db2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005db6:	881b      	ldrh	r3, [r3, #0]
 8005db8:	b29b      	uxth	r3, r3
 8005dba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005dbe:	b29a      	uxth	r2, r3
 8005dc0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005dc4:	801a      	strh	r2, [r3, #0]
 8005dc6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005dca:	881b      	ldrh	r3, [r3, #0]
 8005dcc:	b29b      	uxth	r3, r3
 8005dce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005dd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005dd6:	b29a      	uxth	r2, r3
 8005dd8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005ddc:	801a      	strh	r2, [r3, #0]
 8005dde:	e05f      	b.n	8005ea0 <USB_EPStartXfer+0x109e>
 8005de0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005de4:	2b3e      	cmp	r3, #62	; 0x3e
 8005de6:	d818      	bhi.n	8005e1a <USB_EPStartXfer+0x1018>
 8005de8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005dec:	085b      	lsrs	r3, r3, #1
 8005dee:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005df2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005df6:	f003 0301 	and.w	r3, r3, #1
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d004      	beq.n	8005e08 <USB_EPStartXfer+0x1006>
 8005dfe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e02:	3301      	adds	r3, #1
 8005e04:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005e08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e0c:	b29b      	uxth	r3, r3
 8005e0e:	029b      	lsls	r3, r3, #10
 8005e10:	b29a      	uxth	r2, r3
 8005e12:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005e16:	801a      	strh	r2, [r3, #0]
 8005e18:	e042      	b.n	8005ea0 <USB_EPStartXfer+0x109e>
 8005e1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e1e:	095b      	lsrs	r3, r3, #5
 8005e20:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005e24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e28:	f003 031f 	and.w	r3, r3, #31
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d104      	bne.n	8005e3a <USB_EPStartXfer+0x1038>
 8005e30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e34:	3b01      	subs	r3, #1
 8005e36:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005e3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e3e:	b29b      	uxth	r3, r3
 8005e40:	029b      	lsls	r3, r3, #10
 8005e42:	b29b      	uxth	r3, r3
 8005e44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e4c:	b29a      	uxth	r2, r3
 8005e4e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005e52:	801a      	strh	r2, [r3, #0]
 8005e54:	e024      	b.n	8005ea0 <USB_EPStartXfer+0x109e>
 8005e56:	463b      	mov	r3, r7
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	785b      	ldrb	r3, [r3, #1]
 8005e5c:	2b01      	cmp	r3, #1
 8005e5e:	d11f      	bne.n	8005ea0 <USB_EPStartXfer+0x109e>
 8005e60:	1d3b      	adds	r3, r7, #4
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005e68:	1d3b      	adds	r3, r7, #4
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e70:	b29b      	uxth	r3, r3
 8005e72:	461a      	mov	r2, r3
 8005e74:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e78:	4413      	add	r3, r2
 8005e7a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005e7e:	463b      	mov	r3, r7
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	781b      	ldrb	r3, [r3, #0]
 8005e84:	00da      	lsls	r2, r3, #3
 8005e86:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e8a:	4413      	add	r3, r2
 8005e8c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005e90:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005e94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e98:	b29a      	uxth	r2, r3
 8005e9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005e9e:	801a      	strh	r2, [r3, #0]
 8005ea0:	1d3b      	adds	r3, r7, #4
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005ea8:	463b      	mov	r3, r7
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	785b      	ldrb	r3, [r3, #1]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d16f      	bne.n	8005f92 <USB_EPStartXfer+0x1190>
 8005eb2:	1d3b      	adds	r3, r7, #4
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005eba:	1d3b      	adds	r3, r7, #4
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ec2:	b29b      	uxth	r3, r3
 8005ec4:	461a      	mov	r2, r3
 8005ec6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005eca:	4413      	add	r3, r2
 8005ecc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005ed0:	463b      	mov	r3, r7
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	781b      	ldrb	r3, [r3, #0]
 8005ed6:	00da      	lsls	r2, r3, #3
 8005ed8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005edc:	4413      	add	r3, r2
 8005ede:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005ee2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005ee6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d116      	bne.n	8005f1c <USB_EPStartXfer+0x111a>
 8005eee:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005ef2:	881b      	ldrh	r3, [r3, #0]
 8005ef4:	b29b      	uxth	r3, r3
 8005ef6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005efa:	b29a      	uxth	r2, r3
 8005efc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005f00:	801a      	strh	r2, [r3, #0]
 8005f02:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005f06:	881b      	ldrh	r3, [r3, #0]
 8005f08:	b29b      	uxth	r3, r3
 8005f0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f12:	b29a      	uxth	r2, r3
 8005f14:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005f18:	801a      	strh	r2, [r3, #0]
 8005f1a:	e05e      	b.n	8005fda <USB_EPStartXfer+0x11d8>
 8005f1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f20:	2b3e      	cmp	r3, #62	; 0x3e
 8005f22:	d818      	bhi.n	8005f56 <USB_EPStartXfer+0x1154>
 8005f24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f28:	085b      	lsrs	r3, r3, #1
 8005f2a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005f2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f32:	f003 0301 	and.w	r3, r3, #1
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d004      	beq.n	8005f44 <USB_EPStartXfer+0x1142>
 8005f3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f3e:	3301      	adds	r3, #1
 8005f40:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005f44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f48:	b29b      	uxth	r3, r3
 8005f4a:	029b      	lsls	r3, r3, #10
 8005f4c:	b29a      	uxth	r2, r3
 8005f4e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005f52:	801a      	strh	r2, [r3, #0]
 8005f54:	e041      	b.n	8005fda <USB_EPStartXfer+0x11d8>
 8005f56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f5a:	095b      	lsrs	r3, r3, #5
 8005f5c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005f60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f64:	f003 031f 	and.w	r3, r3, #31
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d104      	bne.n	8005f76 <USB_EPStartXfer+0x1174>
 8005f6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f70:	3b01      	subs	r3, #1
 8005f72:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005f76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f7a:	b29b      	uxth	r3, r3
 8005f7c:	029b      	lsls	r3, r3, #10
 8005f7e:	b29b      	uxth	r3, r3
 8005f80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f88:	b29a      	uxth	r2, r3
 8005f8a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005f8e:	801a      	strh	r2, [r3, #0]
 8005f90:	e023      	b.n	8005fda <USB_EPStartXfer+0x11d8>
 8005f92:	463b      	mov	r3, r7
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	785b      	ldrb	r3, [r3, #1]
 8005f98:	2b01      	cmp	r3, #1
 8005f9a:	d11e      	bne.n	8005fda <USB_EPStartXfer+0x11d8>
 8005f9c:	1d3b      	adds	r3, r7, #4
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fa4:	b29b      	uxth	r3, r3
 8005fa6:	461a      	mov	r2, r3
 8005fa8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005fac:	4413      	add	r3, r2
 8005fae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005fb2:	463b      	mov	r3, r7
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	781b      	ldrb	r3, [r3, #0]
 8005fb8:	00da      	lsls	r2, r3, #3
 8005fba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005fbe:	4413      	add	r3, r2
 8005fc0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005fc4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005fc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005fcc:	b29a      	uxth	r2, r3
 8005fce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005fd2:	801a      	strh	r2, [r3, #0]
 8005fd4:	e001      	b.n	8005fda <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	e02e      	b.n	8006038 <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005fda:	1d3b      	adds	r3, r7, #4
 8005fdc:	681a      	ldr	r2, [r3, #0]
 8005fde:	463b      	mov	r3, r7
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	781b      	ldrb	r3, [r3, #0]
 8005fe4:	009b      	lsls	r3, r3, #2
 8005fe6:	4413      	add	r3, r2
 8005fe8:	881b      	ldrh	r3, [r3, #0]
 8005fea:	b29b      	uxth	r3, r3
 8005fec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ff0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ff4:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8005ff8:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005ffc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006000:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8006004:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006008:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800600c:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8006010:	1d3b      	adds	r3, r7, #4
 8006012:	681a      	ldr	r2, [r3, #0]
 8006014:	463b      	mov	r3, r7
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	781b      	ldrb	r3, [r3, #0]
 800601a:	009b      	lsls	r3, r3, #2
 800601c:	441a      	add	r2, r3
 800601e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006022:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006026:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800602a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800602e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006032:	b29b      	uxth	r3, r3
 8006034:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006036:	2300      	movs	r3, #0
}
 8006038:	4618      	mov	r0, r3
 800603a:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}

08006042 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006042:	b480      	push	{r7}
 8006044:	b083      	sub	sp, #12
 8006046:	af00      	add	r7, sp, #0
 8006048:	6078      	str	r0, [r7, #4]
 800604a:	460b      	mov	r3, r1
 800604c:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800604e:	78fb      	ldrb	r3, [r7, #3]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d103      	bne.n	800605c <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2280      	movs	r2, #128	; 0x80
 8006058:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800605c:	2300      	movs	r3, #0
}
 800605e:	4618      	mov	r0, r3
 8006060:	370c      	adds	r7, #12
 8006062:	46bd      	mov	sp, r7
 8006064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006068:	4770      	bx	lr

0800606a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800606a:	b480      	push	{r7}
 800606c:	b085      	sub	sp, #20
 800606e:	af00      	add	r7, sp, #0
 8006070:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006078:	b29b      	uxth	r3, r3
 800607a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800607c:	68fb      	ldr	r3, [r7, #12]
}
 800607e:	4618      	mov	r0, r3
 8006080:	3714      	adds	r7, #20
 8006082:	46bd      	mov	sp, r7
 8006084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006088:	4770      	bx	lr

0800608a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800608a:	b480      	push	{r7}
 800608c:	b08d      	sub	sp, #52	; 0x34
 800608e:	af00      	add	r7, sp, #0
 8006090:	60f8      	str	r0, [r7, #12]
 8006092:	60b9      	str	r1, [r7, #8]
 8006094:	4611      	mov	r1, r2
 8006096:	461a      	mov	r2, r3
 8006098:	460b      	mov	r3, r1
 800609a:	80fb      	strh	r3, [r7, #6]
 800609c:	4613      	mov	r3, r2
 800609e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80060a0:	88bb      	ldrh	r3, [r7, #4]
 80060a2:	3301      	adds	r3, #1
 80060a4:	085b      	lsrs	r3, r3, #1
 80060a6:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80060b0:	88fa      	ldrh	r2, [r7, #6]
 80060b2:	69fb      	ldr	r3, [r7, #28]
 80060b4:	4413      	add	r3, r2
 80060b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060ba:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80060bc:	6a3b      	ldr	r3, [r7, #32]
 80060be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060c0:	e01b      	b.n	80060fa <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 80060c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c4:	781b      	ldrb	r3, [r3, #0]
 80060c6:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80060c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ca:	3301      	adds	r3, #1
 80060cc:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80060ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d0:	781b      	ldrb	r3, [r3, #0]
 80060d2:	b29b      	uxth	r3, r3
 80060d4:	021b      	lsls	r3, r3, #8
 80060d6:	b29b      	uxth	r3, r3
 80060d8:	461a      	mov	r2, r3
 80060da:	69bb      	ldr	r3, [r7, #24]
 80060dc:	4313      	orrs	r3, r2
 80060de:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	b29a      	uxth	r2, r3
 80060e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060e6:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80060e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ea:	3302      	adds	r3, #2
 80060ec:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 80060ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f0:	3301      	adds	r3, #1
 80060f2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80060f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060f6:	3b01      	subs	r3, #1
 80060f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d1e0      	bne.n	80060c2 <USB_WritePMA+0x38>
  }
}
 8006100:	bf00      	nop
 8006102:	bf00      	nop
 8006104:	3734      	adds	r7, #52	; 0x34
 8006106:	46bd      	mov	sp, r7
 8006108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610c:	4770      	bx	lr

0800610e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800610e:	b480      	push	{r7}
 8006110:	b08b      	sub	sp, #44	; 0x2c
 8006112:	af00      	add	r7, sp, #0
 8006114:	60f8      	str	r0, [r7, #12]
 8006116:	60b9      	str	r1, [r7, #8]
 8006118:	4611      	mov	r1, r2
 800611a:	461a      	mov	r2, r3
 800611c:	460b      	mov	r3, r1
 800611e:	80fb      	strh	r3, [r7, #6]
 8006120:	4613      	mov	r3, r2
 8006122:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006124:	88bb      	ldrh	r3, [r7, #4]
 8006126:	085b      	lsrs	r3, r3, #1
 8006128:	b29b      	uxth	r3, r3
 800612a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006134:	88fa      	ldrh	r2, [r7, #6]
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	4413      	add	r3, r2
 800613a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800613e:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006140:	69bb      	ldr	r3, [r7, #24]
 8006142:	627b      	str	r3, [r7, #36]	; 0x24
 8006144:	e018      	b.n	8006178 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006146:	6a3b      	ldr	r3, [r7, #32]
 8006148:	881b      	ldrh	r3, [r3, #0]
 800614a:	b29b      	uxth	r3, r3
 800614c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800614e:	6a3b      	ldr	r3, [r7, #32]
 8006150:	3302      	adds	r3, #2
 8006152:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	b2da      	uxtb	r2, r3
 8006158:	69fb      	ldr	r3, [r7, #28]
 800615a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800615c:	69fb      	ldr	r3, [r7, #28]
 800615e:	3301      	adds	r3, #1
 8006160:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	0a1b      	lsrs	r3, r3, #8
 8006166:	b2da      	uxtb	r2, r3
 8006168:	69fb      	ldr	r3, [r7, #28]
 800616a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800616c:	69fb      	ldr	r3, [r7, #28]
 800616e:	3301      	adds	r3, #1
 8006170:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8006172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006174:	3b01      	subs	r3, #1
 8006176:	627b      	str	r3, [r7, #36]	; 0x24
 8006178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800617a:	2b00      	cmp	r3, #0
 800617c:	d1e3      	bne.n	8006146 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800617e:	88bb      	ldrh	r3, [r7, #4]
 8006180:	f003 0301 	and.w	r3, r3, #1
 8006184:	b29b      	uxth	r3, r3
 8006186:	2b00      	cmp	r3, #0
 8006188:	d007      	beq.n	800619a <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 800618a:	6a3b      	ldr	r3, [r7, #32]
 800618c:	881b      	ldrh	r3, [r3, #0]
 800618e:	b29b      	uxth	r3, r3
 8006190:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	b2da      	uxtb	r2, r3
 8006196:	69fb      	ldr	r3, [r7, #28]
 8006198:	701a      	strb	r2, [r3, #0]
  }
}
 800619a:	bf00      	nop
 800619c:	372c      	adds	r7, #44	; 0x2c
 800619e:	46bd      	mov	sp, r7
 80061a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a4:	4770      	bx	lr
	...

080061a8 <initializeRegisters>:
		{0x7C, 0x84},
		{0x7D, 0x03},
		{0x7E, 0x01},
};

void initializeRegisters(void){
 80061a8:	b5b0      	push	{r4, r5, r7, lr}
 80061aa:	b082      	sub	sp, #8
 80061ac:	af00      	add	r7, sp, #0
	uint8_t error = 0;
 80061ae:	2300      	movs	r3, #0
 80061b0:	71fb      	strb	r3, [r7, #7]

	error = gestureInit();
 80061b2:	f000 fa05 	bl	80065c0 <gestureInit>
 80061b6:	4603      	mov	r3, r0
 80061b8:	71fb      	strb	r3, [r7, #7]
	if(error){
 80061ba:	79fb      	ldrb	r3, [r7, #7]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d010      	beq.n	80061e2 <initializeRegisters+0x3a>
		strcpy((char*)ref, "Initializing Error \n");
 80061c0:	4a17      	ldr	r2, [pc, #92]	; (8006220 <initializeRegisters+0x78>)
 80061c2:	4b18      	ldr	r3, [pc, #96]	; (8006224 <initializeRegisters+0x7c>)
 80061c4:	4615      	mov	r5, r2
 80061c6:	461c      	mov	r4, r3
 80061c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80061ca:	6028      	str	r0, [r5, #0]
 80061cc:	6069      	str	r1, [r5, #4]
 80061ce:	60aa      	str	r2, [r5, #8]
 80061d0:	60eb      	str	r3, [r5, #12]
 80061d2:	6820      	ldr	r0, [r4, #0]
 80061d4:	6128      	str	r0, [r5, #16]
 80061d6:	7923      	ldrb	r3, [r4, #4]
 80061d8:	752b      	strb	r3, [r5, #20]
		printf("Initializing Error \n");
 80061da:	4813      	ldr	r0, [pc, #76]	; (8006228 <initializeRegisters+0x80>)
 80061dc:	f000 fbae 	bl	800693c <puts>
 80061e0:	e00b      	b.n	80061fa <initializeRegisters+0x52>
	}else{
		strcpy((char*)ref, "Initialized \n");
 80061e2:	4a0f      	ldr	r2, [pc, #60]	; (8006220 <initializeRegisters+0x78>)
 80061e4:	4b11      	ldr	r3, [pc, #68]	; (800622c <initializeRegisters+0x84>)
 80061e6:	4614      	mov	r4, r2
 80061e8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80061ea:	6020      	str	r0, [r4, #0]
 80061ec:	6061      	str	r1, [r4, #4]
 80061ee:	60a2      	str	r2, [r4, #8]
 80061f0:	881b      	ldrh	r3, [r3, #0]
 80061f2:	81a3      	strh	r3, [r4, #12]
		printf("Initialized \n");
 80061f4:	480e      	ldr	r0, [pc, #56]	; (8006230 <initializeRegisters+0x88>)
 80061f6:	f000 fba1 	bl	800693c <puts>
	}
	HAL_UART_Transmit(&HandleUART, ref, strlen((char*)ref), HAL_MAX_DELAY);
 80061fa:	4809      	ldr	r0, [pc, #36]	; (8006220 <initializeRegisters+0x78>)
 80061fc:	f7f9 ffea 	bl	80001d4 <strlen>
 8006200:	4603      	mov	r3, r0
 8006202:	b29a      	uxth	r2, r3
 8006204:	f04f 33ff 	mov.w	r3, #4294967295
 8006208:	4905      	ldr	r1, [pc, #20]	; (8006220 <initializeRegisters+0x78>)
 800620a:	480a      	ldr	r0, [pc, #40]	; (8006234 <initializeRegisters+0x8c>)
 800620c:	f7fe f9eb 	bl	80045e6 <HAL_UART_Transmit>
	HAL_Delay(1000);
 8006210:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006214:	f7fa fca8 	bl	8000b68 <HAL_Delay>
};
 8006218:	bf00      	nop
 800621a:	3708      	adds	r7, #8
 800621c:	46bd      	mov	sp, r7
 800621e:	bdb0      	pop	{r4, r5, r7, pc}
 8006220:	2000073c 	.word	0x2000073c
 8006224:	08007204 	.word	0x08007204
 8006228:	0800721c 	.word	0x0800721c
 800622c:	08007230 	.word	0x08007230
 8006230:	08007240 	.word	0x08007240
 8006234:	20000320 	.word	0x20000320

08006238 <GESTURE_Actions>:

void GESTURE_Actions(void)
{
 8006238:	b5b0      	push	{r4, r5, r7, lr}
 800623a:	b082      	sub	sp, #8
 800623c:	af00      	add	r7, sp, #0
	uint8_t data0 = 0, error;
 800623e:	2300      	movs	r3, #0
 8006240:	71bb      	strb	r3, [r7, #6]
	error = registerRead(0x43, 1, &data0); /* Read Bank 0 for gestures */
 8006242:	1dbb      	adds	r3, r7, #6
 8006244:	461a      	mov	r2, r3
 8006246:	2101      	movs	r1, #1
 8006248:	2043      	movs	r0, #67	; 0x43
 800624a:	f000 fa71 	bl	8006730 <registerRead>
 800624e:	4603      	mov	r3, r0
 8006250:	71fb      	strb	r3, [r7, #7]

	if(!error){
 8006252:	79fb      	ldrb	r3, [r7, #7]
 8006254:	2b00      	cmp	r3, #0
 8006256:	f040 817a 	bne.w	800654e <GESTURE_Actions+0x316>
		switch(data0){ /* When will gestures be detected, the "data" will change */
 800625a:	79bb      	ldrb	r3, [r7, #6]
 800625c:	2b80      	cmp	r3, #128	; 0x80
 800625e:	f000 8167 	beq.w	8006530 <GESTURE_Actions+0x2f8>
 8006262:	2b80      	cmp	r3, #128	; 0x80
 8006264:	f300 8174 	bgt.w	8006550 <GESTURE_Actions+0x318>
 8006268:	2b20      	cmp	r3, #32
 800626a:	dc49      	bgt.n	8006300 <GESTURE_Actions+0xc8>
 800626c:	2b00      	cmp	r3, #0
 800626e:	f340 816f 	ble.w	8006550 <GESTURE_Actions+0x318>
 8006272:	3b01      	subs	r3, #1
 8006274:	2b1f      	cmp	r3, #31
 8006276:	f200 816b 	bhi.w	8006550 <GESTURE_Actions+0x318>
 800627a:	a201      	add	r2, pc, #4	; (adr r2, 8006280 <GESTURE_Actions+0x48>)
 800627c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006280:	08006309 	.word	0x08006309
 8006284:	08006377 	.word	0x08006377
 8006288:	08006551 	.word	0x08006551
 800628c:	080063eb 	.word	0x080063eb
 8006290:	08006551 	.word	0x08006551
 8006294:	08006551 	.word	0x08006551
 8006298:	08006551 	.word	0x08006551
 800629c:	0800645b 	.word	0x0800645b
 80062a0:	08006551 	.word	0x08006551
 80062a4:	08006551 	.word	0x08006551
 80062a8:	08006551 	.word	0x08006551
 80062ac:	08006551 	.word	0x08006551
 80062b0:	08006551 	.word	0x08006551
 80062b4:	08006551 	.word	0x08006551
 80062b8:	08006551 	.word	0x08006551
 80062bc:	080064cf 	.word	0x080064cf
 80062c0:	08006551 	.word	0x08006551
 80062c4:	08006551 	.word	0x08006551
 80062c8:	08006551 	.word	0x08006551
 80062cc:	08006551 	.word	0x08006551
 80062d0:	08006551 	.word	0x08006551
 80062d4:	08006551 	.word	0x08006551
 80062d8:	08006551 	.word	0x08006551
 80062dc:	08006551 	.word	0x08006551
 80062e0:	08006551 	.word	0x08006551
 80062e4:	08006551 	.word	0x08006551
 80062e8:	08006551 	.word	0x08006551
 80062ec:	08006551 	.word	0x08006551
 80062f0:	08006551 	.word	0x08006551
 80062f4:	08006551 	.word	0x08006551
 80062f8:	08006551 	.word	0x08006551
 80062fc:	080064ed 	.word	0x080064ed
 8006300:	2b40      	cmp	r3, #64	; 0x40
 8006302:	f000 8106 	beq.w	8006512 <GESTURE_Actions+0x2da>
 8006306:	e123      	b.n	8006550 <GESTURE_Actions+0x318>
		case GestureRight:
			HAL_Delay(GEST_ENTR_T);
 8006308:	f44f 7016 	mov.w	r0, #600	; 0x258
 800630c:	f7fa fc2c 	bl	8000b68 <HAL_Delay>
			registerRead(0x43, 1, &data0);
 8006310:	1dbb      	adds	r3, r7, #6
 8006312:	461a      	mov	r2, r3
 8006314:	2101      	movs	r1, #1
 8006316:	2043      	movs	r0, #67	; 0x43
 8006318:	f000 fa0a 	bl	8006730 <registerRead>
			if(data0 == GestureForward){
 800631c:	79bb      	ldrb	r3, [r7, #6]
 800631e:	2b40      	cmp	r3, #64	; 0x40
 8006320:	d10e      	bne.n	8006340 <GESTURE_Actions+0x108>
				printf("Forward \n");
 8006322:	4895      	ldr	r0, [pc, #596]	; (8006578 <GESTURE_Actions+0x340>)
 8006324:	f000 fb0a 	bl	800693c <puts>
				strcpy((char*)ref, "Forward \n");
 8006328:	4a94      	ldr	r2, [pc, #592]	; (800657c <GESTURE_Actions+0x344>)
 800632a:	4b95      	ldr	r3, [pc, #596]	; (8006580 <GESTURE_Actions+0x348>)
 800632c:	cb03      	ldmia	r3!, {r0, r1}
 800632e:	6010      	str	r0, [r2, #0]
 8006330:	6051      	str	r1, [r2, #4]
 8006332:	881b      	ldrh	r3, [r3, #0]
 8006334:	8113      	strh	r3, [r2, #8]
				HAL_Delay(GEST_QUIT_T);
 8006336:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800633a:	f7fa fc15 	bl	8000b68 <HAL_Delay>
				HAL_Delay(GEST_QUIT_T);
			}else{
				printf("Right \n");
				strcpy((char*)ref, "Right \n");
			}
			break;
 800633e:	e107      	b.n	8006550 <GESTURE_Actions+0x318>
			}else if(data0 == GestureBackwards){
 8006340:	79bb      	ldrb	r3, [r7, #6]
 8006342:	2b80      	cmp	r3, #128	; 0x80
 8006344:	d10e      	bne.n	8006364 <GESTURE_Actions+0x12c>
				printf("Backwards \n");
 8006346:	488f      	ldr	r0, [pc, #572]	; (8006584 <GESTURE_Actions+0x34c>)
 8006348:	f000 faf8 	bl	800693c <puts>
				strcpy((char*)ref, "Backwards \n");
 800634c:	4a8b      	ldr	r2, [pc, #556]	; (800657c <GESTURE_Actions+0x344>)
 800634e:	4b8e      	ldr	r3, [pc, #568]	; (8006588 <GESTURE_Actions+0x350>)
 8006350:	4614      	mov	r4, r2
 8006352:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006354:	6020      	str	r0, [r4, #0]
 8006356:	6061      	str	r1, [r4, #4]
 8006358:	60a2      	str	r2, [r4, #8]
				HAL_Delay(GEST_QUIT_T);
 800635a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800635e:	f7fa fc03 	bl	8000b68 <HAL_Delay>
			break;
 8006362:	e0f5      	b.n	8006550 <GESTURE_Actions+0x318>
				printf("Right \n");
 8006364:	4889      	ldr	r0, [pc, #548]	; (800658c <GESTURE_Actions+0x354>)
 8006366:	f000 fae9 	bl	800693c <puts>
				strcpy((char*)ref, "Right \n");
 800636a:	4a84      	ldr	r2, [pc, #528]	; (800657c <GESTURE_Actions+0x344>)
 800636c:	4b88      	ldr	r3, [pc, #544]	; (8006590 <GESTURE_Actions+0x358>)
 800636e:	cb03      	ldmia	r3!, {r0, r1}
 8006370:	6010      	str	r0, [r2, #0]
 8006372:	6051      	str	r1, [r2, #4]
			break;
 8006374:	e0ec      	b.n	8006550 <GESTURE_Actions+0x318>

		case GestureLeft:
			HAL_Delay(GEST_ENTR_T);
 8006376:	f44f 7016 	mov.w	r0, #600	; 0x258
 800637a:	f7fa fbf5 	bl	8000b68 <HAL_Delay>
			registerRead(0x43, 1, &data0);
 800637e:	1dbb      	adds	r3, r7, #6
 8006380:	461a      	mov	r2, r3
 8006382:	2101      	movs	r1, #1
 8006384:	2043      	movs	r0, #67	; 0x43
 8006386:	f000 f9d3 	bl	8006730 <registerRead>
			if(data0 == GestureForward){
 800638a:	79bb      	ldrb	r3, [r7, #6]
 800638c:	2b40      	cmp	r3, #64	; 0x40
 800638e:	d10e      	bne.n	80063ae <GESTURE_Actions+0x176>
				printf("Forward \n");
 8006390:	4879      	ldr	r0, [pc, #484]	; (8006578 <GESTURE_Actions+0x340>)
 8006392:	f000 fad3 	bl	800693c <puts>
				strcpy((char*)ref, "Forward \n");
 8006396:	4a79      	ldr	r2, [pc, #484]	; (800657c <GESTURE_Actions+0x344>)
 8006398:	4b79      	ldr	r3, [pc, #484]	; (8006580 <GESTURE_Actions+0x348>)
 800639a:	cb03      	ldmia	r3!, {r0, r1}
 800639c:	6010      	str	r0, [r2, #0]
 800639e:	6051      	str	r1, [r2, #4]
 80063a0:	881b      	ldrh	r3, [r3, #0]
 80063a2:	8113      	strh	r3, [r2, #8]
				HAL_Delay(GEST_QUIT_T);
 80063a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80063a8:	f7fa fbde 	bl	8000b68 <HAL_Delay>
				HAL_Delay(GEST_QUIT_T);
			}else{
				printf("Left \n");
				strcpy((char*)ref, "Left \n");
			}
			break;
 80063ac:	e0d0      	b.n	8006550 <GESTURE_Actions+0x318>
			}else if(data0 == GestureBackwards){
 80063ae:	79bb      	ldrb	r3, [r7, #6]
 80063b0:	2b80      	cmp	r3, #128	; 0x80
 80063b2:	d10e      	bne.n	80063d2 <GESTURE_Actions+0x19a>
				printf("Backwards \n");
 80063b4:	4873      	ldr	r0, [pc, #460]	; (8006584 <GESTURE_Actions+0x34c>)
 80063b6:	f000 fac1 	bl	800693c <puts>
				strcpy((char*)ref, "Backwards \n");
 80063ba:	4a70      	ldr	r2, [pc, #448]	; (800657c <GESTURE_Actions+0x344>)
 80063bc:	4b72      	ldr	r3, [pc, #456]	; (8006588 <GESTURE_Actions+0x350>)
 80063be:	4614      	mov	r4, r2
 80063c0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80063c2:	6020      	str	r0, [r4, #0]
 80063c4:	6061      	str	r1, [r4, #4]
 80063c6:	60a2      	str	r2, [r4, #8]
				HAL_Delay(GEST_QUIT_T);
 80063c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80063cc:	f7fa fbcc 	bl	8000b68 <HAL_Delay>
			break;
 80063d0:	e0be      	b.n	8006550 <GESTURE_Actions+0x318>
				printf("Left \n");
 80063d2:	4870      	ldr	r0, [pc, #448]	; (8006594 <GESTURE_Actions+0x35c>)
 80063d4:	f000 fab2 	bl	800693c <puts>
				strcpy((char*)ref, "Left \n");
 80063d8:	4b68      	ldr	r3, [pc, #416]	; (800657c <GESTURE_Actions+0x344>)
 80063da:	4a6f      	ldr	r2, [pc, #444]	; (8006598 <GESTURE_Actions+0x360>)
 80063dc:	6810      	ldr	r0, [r2, #0]
 80063de:	6018      	str	r0, [r3, #0]
 80063e0:	8891      	ldrh	r1, [r2, #4]
 80063e2:	7992      	ldrb	r2, [r2, #6]
 80063e4:	8099      	strh	r1, [r3, #4]
 80063e6:	719a      	strb	r2, [r3, #6]
			break;
 80063e8:	e0b2      	b.n	8006550 <GESTURE_Actions+0x318>

		case GestureUp:
			HAL_Delay(GEST_ENTR_T);
 80063ea:	f44f 7016 	mov.w	r0, #600	; 0x258
 80063ee:	f7fa fbbb 	bl	8000b68 <HAL_Delay>
			registerRead(0x43, 1, &data0);
 80063f2:	1dbb      	adds	r3, r7, #6
 80063f4:	461a      	mov	r2, r3
 80063f6:	2101      	movs	r1, #1
 80063f8:	2043      	movs	r0, #67	; 0x43
 80063fa:	f000 f999 	bl	8006730 <registerRead>
			if(data0 == GestureForward){
 80063fe:	79bb      	ldrb	r3, [r7, #6]
 8006400:	2b40      	cmp	r3, #64	; 0x40
 8006402:	d10e      	bne.n	8006422 <GESTURE_Actions+0x1ea>
				printf("Forward \n");
 8006404:	485c      	ldr	r0, [pc, #368]	; (8006578 <GESTURE_Actions+0x340>)
 8006406:	f000 fa99 	bl	800693c <puts>
				strcpy((char*)ref, "Forward \n");
 800640a:	4a5c      	ldr	r2, [pc, #368]	; (800657c <GESTURE_Actions+0x344>)
 800640c:	4b5c      	ldr	r3, [pc, #368]	; (8006580 <GESTURE_Actions+0x348>)
 800640e:	cb03      	ldmia	r3!, {r0, r1}
 8006410:	6010      	str	r0, [r2, #0]
 8006412:	6051      	str	r1, [r2, #4]
 8006414:	881b      	ldrh	r3, [r3, #0]
 8006416:	8113      	strh	r3, [r2, #8]
				HAL_Delay(GEST_QUIT_T);
 8006418:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800641c:	f7fa fba4 	bl	8000b68 <HAL_Delay>
				HAL_Delay(GEST_QUIT_T);
			}else{
				printf("Up \n");
				strcpy((char*)ref, "Up \n");
			}
			break;
 8006420:	e096      	b.n	8006550 <GESTURE_Actions+0x318>
			}else if(data0 == GestureBackwards){
 8006422:	79bb      	ldrb	r3, [r7, #6]
 8006424:	2b80      	cmp	r3, #128	; 0x80
 8006426:	d10e      	bne.n	8006446 <GESTURE_Actions+0x20e>
				printf("Backwards \n");
 8006428:	4856      	ldr	r0, [pc, #344]	; (8006584 <GESTURE_Actions+0x34c>)
 800642a:	f000 fa87 	bl	800693c <puts>
				strcpy((char*)ref, "Backwards \n");
 800642e:	4a53      	ldr	r2, [pc, #332]	; (800657c <GESTURE_Actions+0x344>)
 8006430:	4b55      	ldr	r3, [pc, #340]	; (8006588 <GESTURE_Actions+0x350>)
 8006432:	4614      	mov	r4, r2
 8006434:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006436:	6020      	str	r0, [r4, #0]
 8006438:	6061      	str	r1, [r4, #4]
 800643a:	60a2      	str	r2, [r4, #8]
				HAL_Delay(GEST_QUIT_T);
 800643c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006440:	f7fa fb92 	bl	8000b68 <HAL_Delay>
			break;
 8006444:	e084      	b.n	8006550 <GESTURE_Actions+0x318>
				printf("Up \n");
 8006446:	4855      	ldr	r0, [pc, #340]	; (800659c <GESTURE_Actions+0x364>)
 8006448:	f000 fa78 	bl	800693c <puts>
				strcpy((char*)ref, "Up \n");
 800644c:	4b4b      	ldr	r3, [pc, #300]	; (800657c <GESTURE_Actions+0x344>)
 800644e:	4a54      	ldr	r2, [pc, #336]	; (80065a0 <GESTURE_Actions+0x368>)
 8006450:	6810      	ldr	r0, [r2, #0]
 8006452:	6018      	str	r0, [r3, #0]
 8006454:	7912      	ldrb	r2, [r2, #4]
 8006456:	711a      	strb	r2, [r3, #4]
			break;
 8006458:	e07a      	b.n	8006550 <GESTURE_Actions+0x318>

		case GestureDown:
			HAL_Delay(GEST_ENTR_T);
 800645a:	f44f 7016 	mov.w	r0, #600	; 0x258
 800645e:	f7fa fb83 	bl	8000b68 <HAL_Delay>
			registerRead(0x43, 1, &data0);
 8006462:	1dbb      	adds	r3, r7, #6
 8006464:	461a      	mov	r2, r3
 8006466:	2101      	movs	r1, #1
 8006468:	2043      	movs	r0, #67	; 0x43
 800646a:	f000 f961 	bl	8006730 <registerRead>
			if(data0 == GestureForward){
 800646e:	79bb      	ldrb	r3, [r7, #6]
 8006470:	2b40      	cmp	r3, #64	; 0x40
 8006472:	d10e      	bne.n	8006492 <GESTURE_Actions+0x25a>
				printf("Forward \n");
 8006474:	4840      	ldr	r0, [pc, #256]	; (8006578 <GESTURE_Actions+0x340>)
 8006476:	f000 fa61 	bl	800693c <puts>
				strcpy((char*)ref, "Forward \n");
 800647a:	4a40      	ldr	r2, [pc, #256]	; (800657c <GESTURE_Actions+0x344>)
 800647c:	4b40      	ldr	r3, [pc, #256]	; (8006580 <GESTURE_Actions+0x348>)
 800647e:	cb03      	ldmia	r3!, {r0, r1}
 8006480:	6010      	str	r0, [r2, #0]
 8006482:	6051      	str	r1, [r2, #4]
 8006484:	881b      	ldrh	r3, [r3, #0]
 8006486:	8113      	strh	r3, [r2, #8]
				HAL_Delay(GEST_QUIT_T);
 8006488:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800648c:	f7fa fb6c 	bl	8000b68 <HAL_Delay>
				HAL_Delay(GEST_QUIT_T);
			}else{
				strcpy((char*)ref, "Down \n");
				printf("Down \n");
			}
			break;
 8006490:	e05e      	b.n	8006550 <GESTURE_Actions+0x318>
			}else if(data0 == GestureBackwards){
 8006492:	79bb      	ldrb	r3, [r7, #6]
 8006494:	2b80      	cmp	r3, #128	; 0x80
 8006496:	d10e      	bne.n	80064b6 <GESTURE_Actions+0x27e>
				printf("Backwards \n");
 8006498:	483a      	ldr	r0, [pc, #232]	; (8006584 <GESTURE_Actions+0x34c>)
 800649a:	f000 fa4f 	bl	800693c <puts>
				strcpy((char*)ref, "Backwards \n");
 800649e:	4a37      	ldr	r2, [pc, #220]	; (800657c <GESTURE_Actions+0x344>)
 80064a0:	4b39      	ldr	r3, [pc, #228]	; (8006588 <GESTURE_Actions+0x350>)
 80064a2:	4614      	mov	r4, r2
 80064a4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80064a6:	6020      	str	r0, [r4, #0]
 80064a8:	6061      	str	r1, [r4, #4]
 80064aa:	60a2      	str	r2, [r4, #8]
				HAL_Delay(GEST_QUIT_T);
 80064ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80064b0:	f7fa fb5a 	bl	8000b68 <HAL_Delay>
			break;
 80064b4:	e04c      	b.n	8006550 <GESTURE_Actions+0x318>
				strcpy((char*)ref, "Down \n");
 80064b6:	4b31      	ldr	r3, [pc, #196]	; (800657c <GESTURE_Actions+0x344>)
 80064b8:	4a3a      	ldr	r2, [pc, #232]	; (80065a4 <GESTURE_Actions+0x36c>)
 80064ba:	6810      	ldr	r0, [r2, #0]
 80064bc:	6018      	str	r0, [r3, #0]
 80064be:	8891      	ldrh	r1, [r2, #4]
 80064c0:	7992      	ldrb	r2, [r2, #6]
 80064c2:	8099      	strh	r1, [r3, #4]
 80064c4:	719a      	strb	r2, [r3, #6]
				printf("Down \n");
 80064c6:	4838      	ldr	r0, [pc, #224]	; (80065a8 <GESTURE_Actions+0x370>)
 80064c8:	f000 fa38 	bl	800693c <puts>
			break;
 80064cc:	e040      	b.n	8006550 <GESTURE_Actions+0x318>

		case GestureCW:
			printf("Clockwise \n");
 80064ce:	4837      	ldr	r0, [pc, #220]	; (80065ac <GESTURE_Actions+0x374>)
 80064d0:	f000 fa34 	bl	800693c <puts>
			strcpy((char*)ref, "Clockwise \n");
 80064d4:	4a29      	ldr	r2, [pc, #164]	; (800657c <GESTURE_Actions+0x344>)
 80064d6:	4b36      	ldr	r3, [pc, #216]	; (80065b0 <GESTURE_Actions+0x378>)
 80064d8:	4614      	mov	r4, r2
 80064da:	cb07      	ldmia	r3!, {r0, r1, r2}
 80064dc:	6020      	str	r0, [r4, #0]
 80064de:	6061      	str	r1, [r4, #4]
 80064e0:	60a2      	str	r2, [r4, #8]
			HAL_Delay(GEST_QUIT_T);
 80064e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80064e6:	f7fa fb3f 	bl	8000b68 <HAL_Delay>
			break;
 80064ea:	e031      	b.n	8006550 <GESTURE_Actions+0x318>

		case GestureACW:
			printf("Anti-Clockwise \n");
 80064ec:	4831      	ldr	r0, [pc, #196]	; (80065b4 <GESTURE_Actions+0x37c>)
 80064ee:	f000 fa25 	bl	800693c <puts>
			strcpy((char*)ref, "Anti-clockwise \n");
 80064f2:	4a22      	ldr	r2, [pc, #136]	; (800657c <GESTURE_Actions+0x344>)
 80064f4:	4b30      	ldr	r3, [pc, #192]	; (80065b8 <GESTURE_Actions+0x380>)
 80064f6:	4615      	mov	r5, r2
 80064f8:	461c      	mov	r4, r3
 80064fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80064fc:	6028      	str	r0, [r5, #0]
 80064fe:	6069      	str	r1, [r5, #4]
 8006500:	60aa      	str	r2, [r5, #8]
 8006502:	60eb      	str	r3, [r5, #12]
 8006504:	7823      	ldrb	r3, [r4, #0]
 8006506:	742b      	strb	r3, [r5, #16]
			HAL_Delay(GEST_QUIT_T);
 8006508:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800650c:	f7fa fb2c 	bl	8000b68 <HAL_Delay>
			break;
 8006510:	e01e      	b.n	8006550 <GESTURE_Actions+0x318>

		case GestureForward:
			printf("Forward \n");
 8006512:	4819      	ldr	r0, [pc, #100]	; (8006578 <GESTURE_Actions+0x340>)
 8006514:	f000 fa12 	bl	800693c <puts>
			strcpy((char*)ref, "Forward \n");
 8006518:	4a18      	ldr	r2, [pc, #96]	; (800657c <GESTURE_Actions+0x344>)
 800651a:	4b19      	ldr	r3, [pc, #100]	; (8006580 <GESTURE_Actions+0x348>)
 800651c:	cb03      	ldmia	r3!, {r0, r1}
 800651e:	6010      	str	r0, [r2, #0]
 8006520:	6051      	str	r1, [r2, #4]
 8006522:	881b      	ldrh	r3, [r3, #0]
 8006524:	8113      	strh	r3, [r2, #8]
			HAL_Delay(GEST_QUIT_T);
 8006526:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800652a:	f7fa fb1d 	bl	8000b68 <HAL_Delay>
			break;
 800652e:	e00f      	b.n	8006550 <GESTURE_Actions+0x318>

		case GestureBackwards:
			printf("Backwards \n");
 8006530:	4814      	ldr	r0, [pc, #80]	; (8006584 <GESTURE_Actions+0x34c>)
 8006532:	f000 fa03 	bl	800693c <puts>
			strcpy((char*)ref, "Backwards \n");
 8006536:	4a11      	ldr	r2, [pc, #68]	; (800657c <GESTURE_Actions+0x344>)
 8006538:	4b13      	ldr	r3, [pc, #76]	; (8006588 <GESTURE_Actions+0x350>)
 800653a:	4614      	mov	r4, r2
 800653c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800653e:	6020      	str	r0, [r4, #0]
 8006540:	6061      	str	r1, [r4, #4]
 8006542:	60a2      	str	r2, [r4, #8]
			HAL_Delay(GEST_QUIT_T);
 8006544:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006548:	f7fa fb0e 	bl	8000b68 <HAL_Delay>
			break;
 800654c:	e000      	b.n	8006550 <GESTURE_Actions+0x318>
		}
	}
 800654e:	bf00      	nop
	HAL_UART_Transmit(&HandleUART, ref, strlen((char*)ref), HAL_MAX_DELAY);
 8006550:	480a      	ldr	r0, [pc, #40]	; (800657c <GESTURE_Actions+0x344>)
 8006552:	f7f9 fe3f 	bl	80001d4 <strlen>
 8006556:	4603      	mov	r3, r0
 8006558:	b29a      	uxth	r2, r3
 800655a:	f04f 33ff 	mov.w	r3, #4294967295
 800655e:	4907      	ldr	r1, [pc, #28]	; (800657c <GESTURE_Actions+0x344>)
 8006560:	4816      	ldr	r0, [pc, #88]	; (80065bc <GESTURE_Actions+0x384>)
 8006562:	f7fe f840 	bl	80045e6 <HAL_UART_Transmit>
	HAL_Delay(1000);
 8006566:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800656a:	f7fa fafd 	bl	8000b68 <HAL_Delay>
};
 800656e:	bf00      	nop
 8006570:	3708      	adds	r7, #8
 8006572:	46bd      	mov	sp, r7
 8006574:	bdb0      	pop	{r4, r5, r7, pc}
 8006576:	bf00      	nop
 8006578:	08007250 	.word	0x08007250
 800657c:	2000073c 	.word	0x2000073c
 8006580:	0800725c 	.word	0x0800725c
 8006584:	08007268 	.word	0x08007268
 8006588:	08007274 	.word	0x08007274
 800658c:	08007280 	.word	0x08007280
 8006590:	08007288 	.word	0x08007288
 8006594:	08007290 	.word	0x08007290
 8006598:	08007298 	.word	0x08007298
 800659c:	080072a0 	.word	0x080072a0
 80065a0:	080072a4 	.word	0x080072a4
 80065a4:	080072ac 	.word	0x080072ac
 80065a8:	080072b4 	.word	0x080072b4
 80065ac:	080072bc 	.word	0x080072bc
 80065b0:	080072c8 	.word	0x080072c8
 80065b4:	080072d4 	.word	0x080072d4
 80065b8:	080072e4 	.word	0x080072e4
 80065bc:	20000320 	.word	0x20000320

080065c0 <gestureInit>:



uint8_t gestureInit(void)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b084      	sub	sp, #16
 80065c4:	af00      	add	r7, sp, #0
	uint8_t data0 = 0;
 80065c6:	2300      	movs	r3, #0
 80065c8:	71fb      	strb	r3, [r7, #7]
	uint8_t data1 = 1;
 80065ca:	2301      	movs	r3, #1
 80065cc:	71bb      	strb	r3, [r7, #6]
	int result = 0;
 80065ce:	2300      	movs	r3, #0
 80065d0:	60fb      	str	r3, [r7, #12]

	registerWrite(GESTURE_REG_BANK_SEL, GESTURE_BANK0);
 80065d2:	2100      	movs	r1, #0
 80065d4:	20ef      	movs	r0, #239	; 0xef
 80065d6:	f000 f85f 	bl	8006698 <registerWrite>
	registerWrite(GESTURE_REG_BANK_SEL, GESTURE_BANK0);
 80065da:	2100      	movs	r1, #0
 80065dc:	20ef      	movs	r0, #239	; 0xef
 80065de:	f000 f85b 	bl	8006698 <registerWrite>

	registerRead(0,1, &data0);
 80065e2:	1dfb      	adds	r3, r7, #7
 80065e4:	461a      	mov	r2, r3
 80065e6:	2101      	movs	r1, #1
 80065e8:	2000      	movs	r0, #0
 80065ea:	f000 f8a1 	bl	8006730 <registerRead>
	registerRead(1,1, &data1);
 80065ee:	1dbb      	adds	r3, r7, #6
 80065f0:	461a      	mov	r2, r3
 80065f2:	2101      	movs	r1, #1
 80065f4:	2001      	movs	r0, #1
 80065f6:	f000 f89b 	bl	8006730 <registerRead>

	if ((data0 != 0x20) || (data1 != 0x76)){
 80065fa:	79fb      	ldrb	r3, [r7, #7]
 80065fc:	2b20      	cmp	r3, #32
 80065fe:	d102      	bne.n	8006606 <gestureInit+0x46>
 8006600:	79bb      	ldrb	r3, [r7, #6]
 8006602:	2b76      	cmp	r3, #118	; 0x76
 8006604:	d001      	beq.n	800660a <gestureInit+0x4a>
		result = 1;
 8006606:	2301      	movs	r3, #1
 8006608:	60fb      	str	r3, [r7, #12]
	}

	if(data0 == 0x20){
 800660a:	79fb      	ldrb	r3, [r7, #7]
 800660c:	2b20      	cmp	r3, #32
 800660e:	d109      	bne.n	8006624 <gestureInit+0x64>
		strcpy((char*)ref, "Wake Up \n");
 8006610:	4a1c      	ldr	r2, [pc, #112]	; (8006684 <gestureInit+0xc4>)
 8006612:	4b1d      	ldr	r3, [pc, #116]	; (8006688 <gestureInit+0xc8>)
 8006614:	cb03      	ldmia	r3!, {r0, r1}
 8006616:	6010      	str	r0, [r2, #0]
 8006618:	6051      	str	r1, [r2, #4]
 800661a:	881b      	ldrh	r3, [r3, #0]
 800661c:	8113      	strh	r3, [r2, #8]
		printf("Wake Up \n");
 800661e:	481b      	ldr	r0, [pc, #108]	; (800668c <gestureInit+0xcc>)
 8006620:	f000 f98c 	bl	800693c <puts>
	}

	for(int i = 1; i < InitialRegister; i++){
 8006624:	2301      	movs	r3, #1
 8006626:	60bb      	str	r3, [r7, #8]
 8006628:	e00f      	b.n	800664a <gestureInit+0x8a>
		registerWrite(RegisterArray[i][0], RegisterArray[i][1]);
 800662a:	4a19      	ldr	r2, [pc, #100]	; (8006690 <gestureInit+0xd0>)
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8006632:	4917      	ldr	r1, [pc, #92]	; (8006690 <gestureInit+0xd0>)
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	005b      	lsls	r3, r3, #1
 8006638:	440b      	add	r3, r1
 800663a:	785b      	ldrb	r3, [r3, #1]
 800663c:	4619      	mov	r1, r3
 800663e:	4610      	mov	r0, r2
 8006640:	f000 f82a 	bl	8006698 <registerWrite>
	for(int i = 1; i < InitialRegister; i++){
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	3301      	adds	r3, #1
 8006648:	60bb      	str	r3, [r7, #8]
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	2bda      	cmp	r3, #218	; 0xda
 800664e:	d9ec      	bls.n	800662a <gestureInit+0x6a>
	}

	registerWrite(GESTURE_REG_BANK_SEL, GESTURE_BANK0);
 8006650:	2100      	movs	r1, #0
 8006652:	20ef      	movs	r0, #239	; 0xef
 8006654:	f000 f820 	bl	8006698 <registerWrite>
	HAL_UART_Transmit(&HandleUART, ref, strlen((char*)ref), HAL_MAX_DELAY);
 8006658:	480a      	ldr	r0, [pc, #40]	; (8006684 <gestureInit+0xc4>)
 800665a:	f7f9 fdbb 	bl	80001d4 <strlen>
 800665e:	4603      	mov	r3, r0
 8006660:	b29a      	uxth	r2, r3
 8006662:	f04f 33ff 	mov.w	r3, #4294967295
 8006666:	4907      	ldr	r1, [pc, #28]	; (8006684 <gestureInit+0xc4>)
 8006668:	480a      	ldr	r0, [pc, #40]	; (8006694 <gestureInit+0xd4>)
 800666a:	f7fd ffbc 	bl	80045e6 <HAL_UART_Transmit>
	HAL_Delay(1000);
 800666e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006672:	f7fa fa79 	bl	8000b68 <HAL_Delay>
	return result;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	b2db      	uxtb	r3, r3
};
 800667a:	4618      	mov	r0, r3
 800667c:	3710      	adds	r7, #16
 800667e:	46bd      	mov	sp, r7
 8006680:	bd80      	pop	{r7, pc}
 8006682:	bf00      	nop
 8006684:	2000073c 	.word	0x2000073c
 8006688:	080072f8 	.word	0x080072f8
 800668c:	08007304 	.word	0x08007304
 8006690:	2000000c 	.word	0x2000000c
 8006694:	20000320 	.word	0x20000320

08006698 <registerWrite>:

uint8_t registerWrite(uint8_t address, uint8_t cmd)
{
 8006698:	b5b0      	push	{r4, r5, r7, lr}
 800669a:	b086      	sub	sp, #24
 800669c:	af02      	add	r7, sp, #8
 800669e:	4603      	mov	r3, r0
 80066a0:	460a      	mov	r2, r1
 80066a2:	71fb      	strb	r3, [r7, #7]
 80066a4:	4613      	mov	r3, r2
 80066a6:	71bb      	strb	r3, [r7, #6]
	uint8_t data[3];
	data[0] = address;
 80066a8:	79fb      	ldrb	r3, [r7, #7]
 80066aa:	733b      	strb	r3, [r7, #12]
	data[1] = cmd;
 80066ac:	79bb      	ldrb	r3, [r7, #6]
 80066ae:	737b      	strb	r3, [r7, #13]
	char result = 1;
 80066b0:	2301      	movs	r3, #1
 80066b2:	73fb      	strb	r3, [r7, #15]

	result = HAL_I2C_Master_Transmit(HandleI2C, GESTURE_ADDRESS_I2C << 1, data, 2, 10);
 80066b4:	4b19      	ldr	r3, [pc, #100]	; (800671c <registerWrite+0x84>)
 80066b6:	6818      	ldr	r0, [r3, #0]
 80066b8:	f107 020c 	add.w	r2, r7, #12
 80066bc:	230a      	movs	r3, #10
 80066be:	9300      	str	r3, [sp, #0]
 80066c0:	2302      	movs	r3, #2
 80066c2:	21e6      	movs	r1, #230	; 0xe6
 80066c4:	f7fa fdb8 	bl	8001238 <HAL_I2C_Master_Transmit>
 80066c8:	4603      	mov	r3, r0
 80066ca:	73fb      	strb	r3, [r7, #15]

	if (result != 0)
 80066cc:	7bfb      	ldrb	r3, [r7, #15]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d00f      	beq.n	80066f2 <registerWrite+0x5a>
	{
		strcpy((char*)ref, "Transmission Error \n");
 80066d2:	4a13      	ldr	r2, [pc, #76]	; (8006720 <registerWrite+0x88>)
 80066d4:	4b13      	ldr	r3, [pc, #76]	; (8006724 <registerWrite+0x8c>)
 80066d6:	4615      	mov	r5, r2
 80066d8:	461c      	mov	r4, r3
 80066da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80066dc:	6028      	str	r0, [r5, #0]
 80066de:	6069      	str	r1, [r5, #4]
 80066e0:	60aa      	str	r2, [r5, #8]
 80066e2:	60eb      	str	r3, [r5, #12]
 80066e4:	6820      	ldr	r0, [r4, #0]
 80066e6:	6128      	str	r0, [r5, #16]
 80066e8:	7923      	ldrb	r3, [r4, #4]
 80066ea:	752b      	strb	r3, [r5, #20]
		printf("Transmission Error \n");
 80066ec:	480e      	ldr	r0, [pc, #56]	; (8006728 <registerWrite+0x90>)
 80066ee:	f000 f925 	bl	800693c <puts>
	}
	HAL_UART_Transmit(&HandleUART, ref, strlen((char*)ref), HAL_MAX_DELAY);
 80066f2:	480b      	ldr	r0, [pc, #44]	; (8006720 <registerWrite+0x88>)
 80066f4:	f7f9 fd6e 	bl	80001d4 <strlen>
 80066f8:	4603      	mov	r3, r0
 80066fa:	b29a      	uxth	r2, r3
 80066fc:	f04f 33ff 	mov.w	r3, #4294967295
 8006700:	4907      	ldr	r1, [pc, #28]	; (8006720 <registerWrite+0x88>)
 8006702:	480a      	ldr	r0, [pc, #40]	; (800672c <registerWrite+0x94>)
 8006704:	f7fd ff6f 	bl	80045e6 <HAL_UART_Transmit>
	HAL_Delay(1000);
 8006708:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800670c:	f7fa fa2c 	bl	8000b68 <HAL_Delay>
	return result;
 8006710:	7bfb      	ldrb	r3, [r7, #15]
};
 8006712:	4618      	mov	r0, r3
 8006714:	3710      	adds	r7, #16
 8006716:	46bd      	mov	sp, r7
 8006718:	bdb0      	pop	{r4, r5, r7, pc}
 800671a:	bf00      	nop
 800671c:	200003c4 	.word	0x200003c4
 8006720:	2000073c 	.word	0x2000073c
 8006724:	08007310 	.word	0x08007310
 8006728:	08007328 	.word	0x08007328
 800672c:	20000320 	.word	0x20000320

08006730 <registerRead>:

uint8_t registerRead(uint8_t address, uint8_t qty, uint8_t data[])
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b086      	sub	sp, #24
 8006734:	af02      	add	r7, sp, #8
 8006736:	4603      	mov	r3, r0
 8006738:	603a      	str	r2, [r7, #0]
 800673a:	71fb      	strb	r3, [r7, #7]
 800673c:	460b      	mov	r3, r1
 800673e:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp[3];
	tmp[0] = address;
 8006740:	79fb      	ldrb	r3, [r7, #7]
 8006742:	733b      	strb	r3, [r7, #12]
	char result = 1;
 8006744:	2301      	movs	r3, #1
 8006746:	73fb      	strb	r3, [r7, #15]

	result = HAL_I2C_Master_Transmit(HandleI2C, GESTURE_ADDRESS_I2C << 1, tmp, 1, 10);
 8006748:	4b25      	ldr	r3, [pc, #148]	; (80067e0 <registerRead+0xb0>)
 800674a:	6818      	ldr	r0, [r3, #0]
 800674c:	f107 020c 	add.w	r2, r7, #12
 8006750:	230a      	movs	r3, #10
 8006752:	9300      	str	r3, [sp, #0]
 8006754:	2301      	movs	r3, #1
 8006756:	21e6      	movs	r1, #230	; 0xe6
 8006758:	f7fa fd6e 	bl	8001238 <HAL_I2C_Master_Transmit>
 800675c:	4603      	mov	r3, r0
 800675e:	73fb      	strb	r3, [r7, #15]

	if (result != 0)
 8006760:	7bfb      	ldrb	r3, [r7, #15]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d00b      	beq.n	800677e <registerRead+0x4e>
	{
		strcpy((char*)ref, "Error TX \n");
 8006766:	4a1f      	ldr	r2, [pc, #124]	; (80067e4 <registerRead+0xb4>)
 8006768:	4b1f      	ldr	r3, [pc, #124]	; (80067e8 <registerRead+0xb8>)
 800676a:	cb03      	ldmia	r3!, {r0, r1}
 800676c:	6010      	str	r0, [r2, #0]
 800676e:	6051      	str	r1, [r2, #4]
 8006770:	8819      	ldrh	r1, [r3, #0]
 8006772:	789b      	ldrb	r3, [r3, #2]
 8006774:	8111      	strh	r1, [r2, #8]
 8006776:	7293      	strb	r3, [r2, #10]
		printf("Error TX \n");
 8006778:	481c      	ldr	r0, [pc, #112]	; (80067ec <registerRead+0xbc>)
 800677a:	f000 f8df 	bl	800693c <puts>
	}

	result = 1;
 800677e:	2301      	movs	r3, #1
 8006780:	73fb      	strb	r3, [r7, #15]
	result = HAL_I2C_Master_Receive(HandleI2C, (GESTURE_ADDRESS_I2C << 1) + 1, data, qty, 10);
 8006782:	4b17      	ldr	r3, [pc, #92]	; (80067e0 <registerRead+0xb0>)
 8006784:	6818      	ldr	r0, [r3, #0]
 8006786:	79bb      	ldrb	r3, [r7, #6]
 8006788:	b29b      	uxth	r3, r3
 800678a:	220a      	movs	r2, #10
 800678c:	9200      	str	r2, [sp, #0]
 800678e:	683a      	ldr	r2, [r7, #0]
 8006790:	21e7      	movs	r1, #231	; 0xe7
 8006792:	f7fa fe45 	bl	8001420 <HAL_I2C_Master_Receive>
 8006796:	4603      	mov	r3, r0
 8006798:	73fb      	strb	r3, [r7, #15]
	if (result != 0){
 800679a:	7bfb      	ldrb	r3, [r7, #15]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d00b      	beq.n	80067b8 <registerRead+0x88>
		strcpy((char*)ref, "Error RX \n");
 80067a0:	4a10      	ldr	r2, [pc, #64]	; (80067e4 <registerRead+0xb4>)
 80067a2:	4b13      	ldr	r3, [pc, #76]	; (80067f0 <registerRead+0xc0>)
 80067a4:	cb03      	ldmia	r3!, {r0, r1}
 80067a6:	6010      	str	r0, [r2, #0]
 80067a8:	6051      	str	r1, [r2, #4]
 80067aa:	8819      	ldrh	r1, [r3, #0]
 80067ac:	789b      	ldrb	r3, [r3, #2]
 80067ae:	8111      	strh	r1, [r2, #8]
 80067b0:	7293      	strb	r3, [r2, #10]
		printf("Error RX \n");
 80067b2:	4810      	ldr	r0, [pc, #64]	; (80067f4 <registerRead+0xc4>)
 80067b4:	f000 f8c2 	bl	800693c <puts>
	}
	HAL_UART_Transmit(&HandleUART, ref, strlen((char*)ref), HAL_MAX_DELAY);
 80067b8:	480a      	ldr	r0, [pc, #40]	; (80067e4 <registerRead+0xb4>)
 80067ba:	f7f9 fd0b 	bl	80001d4 <strlen>
 80067be:	4603      	mov	r3, r0
 80067c0:	b29a      	uxth	r2, r3
 80067c2:	f04f 33ff 	mov.w	r3, #4294967295
 80067c6:	4907      	ldr	r1, [pc, #28]	; (80067e4 <registerRead+0xb4>)
 80067c8:	480b      	ldr	r0, [pc, #44]	; (80067f8 <registerRead+0xc8>)
 80067ca:	f7fd ff0c 	bl	80045e6 <HAL_UART_Transmit>
	HAL_Delay(1000);
 80067ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80067d2:	f7fa f9c9 	bl	8000b68 <HAL_Delay>
	return result;
 80067d6:	7bfb      	ldrb	r3, [r7, #15]
};
 80067d8:	4618      	mov	r0, r3
 80067da:	3710      	adds	r7, #16
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd80      	pop	{r7, pc}
 80067e0:	200003c4 	.word	0x200003c4
 80067e4:	2000073c 	.word	0x2000073c
 80067e8:	0800733c 	.word	0x0800733c
 80067ec:	08007348 	.word	0x08007348
 80067f0:	08007354 	.word	0x08007354
 80067f4:	08007360 	.word	0x08007360
 80067f8:	20000320 	.word	0x20000320

080067fc <__errno>:
 80067fc:	4b01      	ldr	r3, [pc, #4]	; (8006804 <__errno+0x8>)
 80067fe:	6818      	ldr	r0, [r3, #0]
 8006800:	4770      	bx	lr
 8006802:	bf00      	nop
 8006804:	200001c4 	.word	0x200001c4

08006808 <__libc_init_array>:
 8006808:	b570      	push	{r4, r5, r6, lr}
 800680a:	4d0d      	ldr	r5, [pc, #52]	; (8006840 <__libc_init_array+0x38>)
 800680c:	4c0d      	ldr	r4, [pc, #52]	; (8006844 <__libc_init_array+0x3c>)
 800680e:	1b64      	subs	r4, r4, r5
 8006810:	10a4      	asrs	r4, r4, #2
 8006812:	2600      	movs	r6, #0
 8006814:	42a6      	cmp	r6, r4
 8006816:	d109      	bne.n	800682c <__libc_init_array+0x24>
 8006818:	4d0b      	ldr	r5, [pc, #44]	; (8006848 <__libc_init_array+0x40>)
 800681a:	4c0c      	ldr	r4, [pc, #48]	; (800684c <__libc_init_array+0x44>)
 800681c:	f000 fce6 	bl	80071ec <_init>
 8006820:	1b64      	subs	r4, r4, r5
 8006822:	10a4      	asrs	r4, r4, #2
 8006824:	2600      	movs	r6, #0
 8006826:	42a6      	cmp	r6, r4
 8006828:	d105      	bne.n	8006836 <__libc_init_array+0x2e>
 800682a:	bd70      	pop	{r4, r5, r6, pc}
 800682c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006830:	4798      	blx	r3
 8006832:	3601      	adds	r6, #1
 8006834:	e7ee      	b.n	8006814 <__libc_init_array+0xc>
 8006836:	f855 3b04 	ldr.w	r3, [r5], #4
 800683a:	4798      	blx	r3
 800683c:	3601      	adds	r6, #1
 800683e:	e7f2      	b.n	8006826 <__libc_init_array+0x1e>
 8006840:	08007408 	.word	0x08007408
 8006844:	08007408 	.word	0x08007408
 8006848:	08007408 	.word	0x08007408
 800684c:	0800740c 	.word	0x0800740c

08006850 <memset>:
 8006850:	4402      	add	r2, r0
 8006852:	4603      	mov	r3, r0
 8006854:	4293      	cmp	r3, r2
 8006856:	d100      	bne.n	800685a <memset+0xa>
 8006858:	4770      	bx	lr
 800685a:	f803 1b01 	strb.w	r1, [r3], #1
 800685e:	e7f9      	b.n	8006854 <memset+0x4>

08006860 <_puts_r>:
 8006860:	b570      	push	{r4, r5, r6, lr}
 8006862:	460e      	mov	r6, r1
 8006864:	4605      	mov	r5, r0
 8006866:	b118      	cbz	r0, 8006870 <_puts_r+0x10>
 8006868:	6983      	ldr	r3, [r0, #24]
 800686a:	b90b      	cbnz	r3, 8006870 <_puts_r+0x10>
 800686c:	f000 fa48 	bl	8006d00 <__sinit>
 8006870:	69ab      	ldr	r3, [r5, #24]
 8006872:	68ac      	ldr	r4, [r5, #8]
 8006874:	b913      	cbnz	r3, 800687c <_puts_r+0x1c>
 8006876:	4628      	mov	r0, r5
 8006878:	f000 fa42 	bl	8006d00 <__sinit>
 800687c:	4b2c      	ldr	r3, [pc, #176]	; (8006930 <_puts_r+0xd0>)
 800687e:	429c      	cmp	r4, r3
 8006880:	d120      	bne.n	80068c4 <_puts_r+0x64>
 8006882:	686c      	ldr	r4, [r5, #4]
 8006884:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006886:	07db      	lsls	r3, r3, #31
 8006888:	d405      	bmi.n	8006896 <_puts_r+0x36>
 800688a:	89a3      	ldrh	r3, [r4, #12]
 800688c:	0598      	lsls	r0, r3, #22
 800688e:	d402      	bmi.n	8006896 <_puts_r+0x36>
 8006890:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006892:	f000 fad3 	bl	8006e3c <__retarget_lock_acquire_recursive>
 8006896:	89a3      	ldrh	r3, [r4, #12]
 8006898:	0719      	lsls	r1, r3, #28
 800689a:	d51d      	bpl.n	80068d8 <_puts_r+0x78>
 800689c:	6923      	ldr	r3, [r4, #16]
 800689e:	b1db      	cbz	r3, 80068d8 <_puts_r+0x78>
 80068a0:	3e01      	subs	r6, #1
 80068a2:	68a3      	ldr	r3, [r4, #8]
 80068a4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80068a8:	3b01      	subs	r3, #1
 80068aa:	60a3      	str	r3, [r4, #8]
 80068ac:	bb39      	cbnz	r1, 80068fe <_puts_r+0x9e>
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	da38      	bge.n	8006924 <_puts_r+0xc4>
 80068b2:	4622      	mov	r2, r4
 80068b4:	210a      	movs	r1, #10
 80068b6:	4628      	mov	r0, r5
 80068b8:	f000 f848 	bl	800694c <__swbuf_r>
 80068bc:	3001      	adds	r0, #1
 80068be:	d011      	beq.n	80068e4 <_puts_r+0x84>
 80068c0:	250a      	movs	r5, #10
 80068c2:	e011      	b.n	80068e8 <_puts_r+0x88>
 80068c4:	4b1b      	ldr	r3, [pc, #108]	; (8006934 <_puts_r+0xd4>)
 80068c6:	429c      	cmp	r4, r3
 80068c8:	d101      	bne.n	80068ce <_puts_r+0x6e>
 80068ca:	68ac      	ldr	r4, [r5, #8]
 80068cc:	e7da      	b.n	8006884 <_puts_r+0x24>
 80068ce:	4b1a      	ldr	r3, [pc, #104]	; (8006938 <_puts_r+0xd8>)
 80068d0:	429c      	cmp	r4, r3
 80068d2:	bf08      	it	eq
 80068d4:	68ec      	ldreq	r4, [r5, #12]
 80068d6:	e7d5      	b.n	8006884 <_puts_r+0x24>
 80068d8:	4621      	mov	r1, r4
 80068da:	4628      	mov	r0, r5
 80068dc:	f000 f888 	bl	80069f0 <__swsetup_r>
 80068e0:	2800      	cmp	r0, #0
 80068e2:	d0dd      	beq.n	80068a0 <_puts_r+0x40>
 80068e4:	f04f 35ff 	mov.w	r5, #4294967295
 80068e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80068ea:	07da      	lsls	r2, r3, #31
 80068ec:	d405      	bmi.n	80068fa <_puts_r+0x9a>
 80068ee:	89a3      	ldrh	r3, [r4, #12]
 80068f0:	059b      	lsls	r3, r3, #22
 80068f2:	d402      	bmi.n	80068fa <_puts_r+0x9a>
 80068f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80068f6:	f000 faa2 	bl	8006e3e <__retarget_lock_release_recursive>
 80068fa:	4628      	mov	r0, r5
 80068fc:	bd70      	pop	{r4, r5, r6, pc}
 80068fe:	2b00      	cmp	r3, #0
 8006900:	da04      	bge.n	800690c <_puts_r+0xac>
 8006902:	69a2      	ldr	r2, [r4, #24]
 8006904:	429a      	cmp	r2, r3
 8006906:	dc06      	bgt.n	8006916 <_puts_r+0xb6>
 8006908:	290a      	cmp	r1, #10
 800690a:	d004      	beq.n	8006916 <_puts_r+0xb6>
 800690c:	6823      	ldr	r3, [r4, #0]
 800690e:	1c5a      	adds	r2, r3, #1
 8006910:	6022      	str	r2, [r4, #0]
 8006912:	7019      	strb	r1, [r3, #0]
 8006914:	e7c5      	b.n	80068a2 <_puts_r+0x42>
 8006916:	4622      	mov	r2, r4
 8006918:	4628      	mov	r0, r5
 800691a:	f000 f817 	bl	800694c <__swbuf_r>
 800691e:	3001      	adds	r0, #1
 8006920:	d1bf      	bne.n	80068a2 <_puts_r+0x42>
 8006922:	e7df      	b.n	80068e4 <_puts_r+0x84>
 8006924:	6823      	ldr	r3, [r4, #0]
 8006926:	250a      	movs	r5, #10
 8006928:	1c5a      	adds	r2, r3, #1
 800692a:	6022      	str	r2, [r4, #0]
 800692c:	701d      	strb	r5, [r3, #0]
 800692e:	e7db      	b.n	80068e8 <_puts_r+0x88>
 8006930:	080073c8 	.word	0x080073c8
 8006934:	080073e8 	.word	0x080073e8
 8006938:	080073a8 	.word	0x080073a8

0800693c <puts>:
 800693c:	4b02      	ldr	r3, [pc, #8]	; (8006948 <puts+0xc>)
 800693e:	4601      	mov	r1, r0
 8006940:	6818      	ldr	r0, [r3, #0]
 8006942:	f7ff bf8d 	b.w	8006860 <_puts_r>
 8006946:	bf00      	nop
 8006948:	200001c4 	.word	0x200001c4

0800694c <__swbuf_r>:
 800694c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800694e:	460e      	mov	r6, r1
 8006950:	4614      	mov	r4, r2
 8006952:	4605      	mov	r5, r0
 8006954:	b118      	cbz	r0, 800695e <__swbuf_r+0x12>
 8006956:	6983      	ldr	r3, [r0, #24]
 8006958:	b90b      	cbnz	r3, 800695e <__swbuf_r+0x12>
 800695a:	f000 f9d1 	bl	8006d00 <__sinit>
 800695e:	4b21      	ldr	r3, [pc, #132]	; (80069e4 <__swbuf_r+0x98>)
 8006960:	429c      	cmp	r4, r3
 8006962:	d12b      	bne.n	80069bc <__swbuf_r+0x70>
 8006964:	686c      	ldr	r4, [r5, #4]
 8006966:	69a3      	ldr	r3, [r4, #24]
 8006968:	60a3      	str	r3, [r4, #8]
 800696a:	89a3      	ldrh	r3, [r4, #12]
 800696c:	071a      	lsls	r2, r3, #28
 800696e:	d52f      	bpl.n	80069d0 <__swbuf_r+0x84>
 8006970:	6923      	ldr	r3, [r4, #16]
 8006972:	b36b      	cbz	r3, 80069d0 <__swbuf_r+0x84>
 8006974:	6923      	ldr	r3, [r4, #16]
 8006976:	6820      	ldr	r0, [r4, #0]
 8006978:	1ac0      	subs	r0, r0, r3
 800697a:	6963      	ldr	r3, [r4, #20]
 800697c:	b2f6      	uxtb	r6, r6
 800697e:	4283      	cmp	r3, r0
 8006980:	4637      	mov	r7, r6
 8006982:	dc04      	bgt.n	800698e <__swbuf_r+0x42>
 8006984:	4621      	mov	r1, r4
 8006986:	4628      	mov	r0, r5
 8006988:	f000 f926 	bl	8006bd8 <_fflush_r>
 800698c:	bb30      	cbnz	r0, 80069dc <__swbuf_r+0x90>
 800698e:	68a3      	ldr	r3, [r4, #8]
 8006990:	3b01      	subs	r3, #1
 8006992:	60a3      	str	r3, [r4, #8]
 8006994:	6823      	ldr	r3, [r4, #0]
 8006996:	1c5a      	adds	r2, r3, #1
 8006998:	6022      	str	r2, [r4, #0]
 800699a:	701e      	strb	r6, [r3, #0]
 800699c:	6963      	ldr	r3, [r4, #20]
 800699e:	3001      	adds	r0, #1
 80069a0:	4283      	cmp	r3, r0
 80069a2:	d004      	beq.n	80069ae <__swbuf_r+0x62>
 80069a4:	89a3      	ldrh	r3, [r4, #12]
 80069a6:	07db      	lsls	r3, r3, #31
 80069a8:	d506      	bpl.n	80069b8 <__swbuf_r+0x6c>
 80069aa:	2e0a      	cmp	r6, #10
 80069ac:	d104      	bne.n	80069b8 <__swbuf_r+0x6c>
 80069ae:	4621      	mov	r1, r4
 80069b0:	4628      	mov	r0, r5
 80069b2:	f000 f911 	bl	8006bd8 <_fflush_r>
 80069b6:	b988      	cbnz	r0, 80069dc <__swbuf_r+0x90>
 80069b8:	4638      	mov	r0, r7
 80069ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80069bc:	4b0a      	ldr	r3, [pc, #40]	; (80069e8 <__swbuf_r+0x9c>)
 80069be:	429c      	cmp	r4, r3
 80069c0:	d101      	bne.n	80069c6 <__swbuf_r+0x7a>
 80069c2:	68ac      	ldr	r4, [r5, #8]
 80069c4:	e7cf      	b.n	8006966 <__swbuf_r+0x1a>
 80069c6:	4b09      	ldr	r3, [pc, #36]	; (80069ec <__swbuf_r+0xa0>)
 80069c8:	429c      	cmp	r4, r3
 80069ca:	bf08      	it	eq
 80069cc:	68ec      	ldreq	r4, [r5, #12]
 80069ce:	e7ca      	b.n	8006966 <__swbuf_r+0x1a>
 80069d0:	4621      	mov	r1, r4
 80069d2:	4628      	mov	r0, r5
 80069d4:	f000 f80c 	bl	80069f0 <__swsetup_r>
 80069d8:	2800      	cmp	r0, #0
 80069da:	d0cb      	beq.n	8006974 <__swbuf_r+0x28>
 80069dc:	f04f 37ff 	mov.w	r7, #4294967295
 80069e0:	e7ea      	b.n	80069b8 <__swbuf_r+0x6c>
 80069e2:	bf00      	nop
 80069e4:	080073c8 	.word	0x080073c8
 80069e8:	080073e8 	.word	0x080073e8
 80069ec:	080073a8 	.word	0x080073a8

080069f0 <__swsetup_r>:
 80069f0:	4b32      	ldr	r3, [pc, #200]	; (8006abc <__swsetup_r+0xcc>)
 80069f2:	b570      	push	{r4, r5, r6, lr}
 80069f4:	681d      	ldr	r5, [r3, #0]
 80069f6:	4606      	mov	r6, r0
 80069f8:	460c      	mov	r4, r1
 80069fa:	b125      	cbz	r5, 8006a06 <__swsetup_r+0x16>
 80069fc:	69ab      	ldr	r3, [r5, #24]
 80069fe:	b913      	cbnz	r3, 8006a06 <__swsetup_r+0x16>
 8006a00:	4628      	mov	r0, r5
 8006a02:	f000 f97d 	bl	8006d00 <__sinit>
 8006a06:	4b2e      	ldr	r3, [pc, #184]	; (8006ac0 <__swsetup_r+0xd0>)
 8006a08:	429c      	cmp	r4, r3
 8006a0a:	d10f      	bne.n	8006a2c <__swsetup_r+0x3c>
 8006a0c:	686c      	ldr	r4, [r5, #4]
 8006a0e:	89a3      	ldrh	r3, [r4, #12]
 8006a10:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006a14:	0719      	lsls	r1, r3, #28
 8006a16:	d42c      	bmi.n	8006a72 <__swsetup_r+0x82>
 8006a18:	06dd      	lsls	r5, r3, #27
 8006a1a:	d411      	bmi.n	8006a40 <__swsetup_r+0x50>
 8006a1c:	2309      	movs	r3, #9
 8006a1e:	6033      	str	r3, [r6, #0]
 8006a20:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006a24:	81a3      	strh	r3, [r4, #12]
 8006a26:	f04f 30ff 	mov.w	r0, #4294967295
 8006a2a:	e03e      	b.n	8006aaa <__swsetup_r+0xba>
 8006a2c:	4b25      	ldr	r3, [pc, #148]	; (8006ac4 <__swsetup_r+0xd4>)
 8006a2e:	429c      	cmp	r4, r3
 8006a30:	d101      	bne.n	8006a36 <__swsetup_r+0x46>
 8006a32:	68ac      	ldr	r4, [r5, #8]
 8006a34:	e7eb      	b.n	8006a0e <__swsetup_r+0x1e>
 8006a36:	4b24      	ldr	r3, [pc, #144]	; (8006ac8 <__swsetup_r+0xd8>)
 8006a38:	429c      	cmp	r4, r3
 8006a3a:	bf08      	it	eq
 8006a3c:	68ec      	ldreq	r4, [r5, #12]
 8006a3e:	e7e6      	b.n	8006a0e <__swsetup_r+0x1e>
 8006a40:	0758      	lsls	r0, r3, #29
 8006a42:	d512      	bpl.n	8006a6a <__swsetup_r+0x7a>
 8006a44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006a46:	b141      	cbz	r1, 8006a5a <__swsetup_r+0x6a>
 8006a48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006a4c:	4299      	cmp	r1, r3
 8006a4e:	d002      	beq.n	8006a56 <__swsetup_r+0x66>
 8006a50:	4630      	mov	r0, r6
 8006a52:	f000 fa59 	bl	8006f08 <_free_r>
 8006a56:	2300      	movs	r3, #0
 8006a58:	6363      	str	r3, [r4, #52]	; 0x34
 8006a5a:	89a3      	ldrh	r3, [r4, #12]
 8006a5c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006a60:	81a3      	strh	r3, [r4, #12]
 8006a62:	2300      	movs	r3, #0
 8006a64:	6063      	str	r3, [r4, #4]
 8006a66:	6923      	ldr	r3, [r4, #16]
 8006a68:	6023      	str	r3, [r4, #0]
 8006a6a:	89a3      	ldrh	r3, [r4, #12]
 8006a6c:	f043 0308 	orr.w	r3, r3, #8
 8006a70:	81a3      	strh	r3, [r4, #12]
 8006a72:	6923      	ldr	r3, [r4, #16]
 8006a74:	b94b      	cbnz	r3, 8006a8a <__swsetup_r+0x9a>
 8006a76:	89a3      	ldrh	r3, [r4, #12]
 8006a78:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006a7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a80:	d003      	beq.n	8006a8a <__swsetup_r+0x9a>
 8006a82:	4621      	mov	r1, r4
 8006a84:	4630      	mov	r0, r6
 8006a86:	f000 f9ff 	bl	8006e88 <__smakebuf_r>
 8006a8a:	89a0      	ldrh	r0, [r4, #12]
 8006a8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006a90:	f010 0301 	ands.w	r3, r0, #1
 8006a94:	d00a      	beq.n	8006aac <__swsetup_r+0xbc>
 8006a96:	2300      	movs	r3, #0
 8006a98:	60a3      	str	r3, [r4, #8]
 8006a9a:	6963      	ldr	r3, [r4, #20]
 8006a9c:	425b      	negs	r3, r3
 8006a9e:	61a3      	str	r3, [r4, #24]
 8006aa0:	6923      	ldr	r3, [r4, #16]
 8006aa2:	b943      	cbnz	r3, 8006ab6 <__swsetup_r+0xc6>
 8006aa4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006aa8:	d1ba      	bne.n	8006a20 <__swsetup_r+0x30>
 8006aaa:	bd70      	pop	{r4, r5, r6, pc}
 8006aac:	0781      	lsls	r1, r0, #30
 8006aae:	bf58      	it	pl
 8006ab0:	6963      	ldrpl	r3, [r4, #20]
 8006ab2:	60a3      	str	r3, [r4, #8]
 8006ab4:	e7f4      	b.n	8006aa0 <__swsetup_r+0xb0>
 8006ab6:	2000      	movs	r0, #0
 8006ab8:	e7f7      	b.n	8006aaa <__swsetup_r+0xba>
 8006aba:	bf00      	nop
 8006abc:	200001c4 	.word	0x200001c4
 8006ac0:	080073c8 	.word	0x080073c8
 8006ac4:	080073e8 	.word	0x080073e8
 8006ac8:	080073a8 	.word	0x080073a8

08006acc <__sflush_r>:
 8006acc:	898a      	ldrh	r2, [r1, #12]
 8006ace:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ad2:	4605      	mov	r5, r0
 8006ad4:	0710      	lsls	r0, r2, #28
 8006ad6:	460c      	mov	r4, r1
 8006ad8:	d458      	bmi.n	8006b8c <__sflush_r+0xc0>
 8006ada:	684b      	ldr	r3, [r1, #4]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	dc05      	bgt.n	8006aec <__sflush_r+0x20>
 8006ae0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	dc02      	bgt.n	8006aec <__sflush_r+0x20>
 8006ae6:	2000      	movs	r0, #0
 8006ae8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006aec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006aee:	2e00      	cmp	r6, #0
 8006af0:	d0f9      	beq.n	8006ae6 <__sflush_r+0x1a>
 8006af2:	2300      	movs	r3, #0
 8006af4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006af8:	682f      	ldr	r7, [r5, #0]
 8006afa:	602b      	str	r3, [r5, #0]
 8006afc:	d032      	beq.n	8006b64 <__sflush_r+0x98>
 8006afe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006b00:	89a3      	ldrh	r3, [r4, #12]
 8006b02:	075a      	lsls	r2, r3, #29
 8006b04:	d505      	bpl.n	8006b12 <__sflush_r+0x46>
 8006b06:	6863      	ldr	r3, [r4, #4]
 8006b08:	1ac0      	subs	r0, r0, r3
 8006b0a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006b0c:	b10b      	cbz	r3, 8006b12 <__sflush_r+0x46>
 8006b0e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006b10:	1ac0      	subs	r0, r0, r3
 8006b12:	2300      	movs	r3, #0
 8006b14:	4602      	mov	r2, r0
 8006b16:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006b18:	6a21      	ldr	r1, [r4, #32]
 8006b1a:	4628      	mov	r0, r5
 8006b1c:	47b0      	blx	r6
 8006b1e:	1c43      	adds	r3, r0, #1
 8006b20:	89a3      	ldrh	r3, [r4, #12]
 8006b22:	d106      	bne.n	8006b32 <__sflush_r+0x66>
 8006b24:	6829      	ldr	r1, [r5, #0]
 8006b26:	291d      	cmp	r1, #29
 8006b28:	d82c      	bhi.n	8006b84 <__sflush_r+0xb8>
 8006b2a:	4a2a      	ldr	r2, [pc, #168]	; (8006bd4 <__sflush_r+0x108>)
 8006b2c:	40ca      	lsrs	r2, r1
 8006b2e:	07d6      	lsls	r6, r2, #31
 8006b30:	d528      	bpl.n	8006b84 <__sflush_r+0xb8>
 8006b32:	2200      	movs	r2, #0
 8006b34:	6062      	str	r2, [r4, #4]
 8006b36:	04d9      	lsls	r1, r3, #19
 8006b38:	6922      	ldr	r2, [r4, #16]
 8006b3a:	6022      	str	r2, [r4, #0]
 8006b3c:	d504      	bpl.n	8006b48 <__sflush_r+0x7c>
 8006b3e:	1c42      	adds	r2, r0, #1
 8006b40:	d101      	bne.n	8006b46 <__sflush_r+0x7a>
 8006b42:	682b      	ldr	r3, [r5, #0]
 8006b44:	b903      	cbnz	r3, 8006b48 <__sflush_r+0x7c>
 8006b46:	6560      	str	r0, [r4, #84]	; 0x54
 8006b48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006b4a:	602f      	str	r7, [r5, #0]
 8006b4c:	2900      	cmp	r1, #0
 8006b4e:	d0ca      	beq.n	8006ae6 <__sflush_r+0x1a>
 8006b50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006b54:	4299      	cmp	r1, r3
 8006b56:	d002      	beq.n	8006b5e <__sflush_r+0x92>
 8006b58:	4628      	mov	r0, r5
 8006b5a:	f000 f9d5 	bl	8006f08 <_free_r>
 8006b5e:	2000      	movs	r0, #0
 8006b60:	6360      	str	r0, [r4, #52]	; 0x34
 8006b62:	e7c1      	b.n	8006ae8 <__sflush_r+0x1c>
 8006b64:	6a21      	ldr	r1, [r4, #32]
 8006b66:	2301      	movs	r3, #1
 8006b68:	4628      	mov	r0, r5
 8006b6a:	47b0      	blx	r6
 8006b6c:	1c41      	adds	r1, r0, #1
 8006b6e:	d1c7      	bne.n	8006b00 <__sflush_r+0x34>
 8006b70:	682b      	ldr	r3, [r5, #0]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d0c4      	beq.n	8006b00 <__sflush_r+0x34>
 8006b76:	2b1d      	cmp	r3, #29
 8006b78:	d001      	beq.n	8006b7e <__sflush_r+0xb2>
 8006b7a:	2b16      	cmp	r3, #22
 8006b7c:	d101      	bne.n	8006b82 <__sflush_r+0xb6>
 8006b7e:	602f      	str	r7, [r5, #0]
 8006b80:	e7b1      	b.n	8006ae6 <__sflush_r+0x1a>
 8006b82:	89a3      	ldrh	r3, [r4, #12]
 8006b84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b88:	81a3      	strh	r3, [r4, #12]
 8006b8a:	e7ad      	b.n	8006ae8 <__sflush_r+0x1c>
 8006b8c:	690f      	ldr	r7, [r1, #16]
 8006b8e:	2f00      	cmp	r7, #0
 8006b90:	d0a9      	beq.n	8006ae6 <__sflush_r+0x1a>
 8006b92:	0793      	lsls	r3, r2, #30
 8006b94:	680e      	ldr	r6, [r1, #0]
 8006b96:	bf08      	it	eq
 8006b98:	694b      	ldreq	r3, [r1, #20]
 8006b9a:	600f      	str	r7, [r1, #0]
 8006b9c:	bf18      	it	ne
 8006b9e:	2300      	movne	r3, #0
 8006ba0:	eba6 0807 	sub.w	r8, r6, r7
 8006ba4:	608b      	str	r3, [r1, #8]
 8006ba6:	f1b8 0f00 	cmp.w	r8, #0
 8006baa:	dd9c      	ble.n	8006ae6 <__sflush_r+0x1a>
 8006bac:	6a21      	ldr	r1, [r4, #32]
 8006bae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006bb0:	4643      	mov	r3, r8
 8006bb2:	463a      	mov	r2, r7
 8006bb4:	4628      	mov	r0, r5
 8006bb6:	47b0      	blx	r6
 8006bb8:	2800      	cmp	r0, #0
 8006bba:	dc06      	bgt.n	8006bca <__sflush_r+0xfe>
 8006bbc:	89a3      	ldrh	r3, [r4, #12]
 8006bbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006bc2:	81a3      	strh	r3, [r4, #12]
 8006bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8006bc8:	e78e      	b.n	8006ae8 <__sflush_r+0x1c>
 8006bca:	4407      	add	r7, r0
 8006bcc:	eba8 0800 	sub.w	r8, r8, r0
 8006bd0:	e7e9      	b.n	8006ba6 <__sflush_r+0xda>
 8006bd2:	bf00      	nop
 8006bd4:	20400001 	.word	0x20400001

08006bd8 <_fflush_r>:
 8006bd8:	b538      	push	{r3, r4, r5, lr}
 8006bda:	690b      	ldr	r3, [r1, #16]
 8006bdc:	4605      	mov	r5, r0
 8006bde:	460c      	mov	r4, r1
 8006be0:	b913      	cbnz	r3, 8006be8 <_fflush_r+0x10>
 8006be2:	2500      	movs	r5, #0
 8006be4:	4628      	mov	r0, r5
 8006be6:	bd38      	pop	{r3, r4, r5, pc}
 8006be8:	b118      	cbz	r0, 8006bf2 <_fflush_r+0x1a>
 8006bea:	6983      	ldr	r3, [r0, #24]
 8006bec:	b90b      	cbnz	r3, 8006bf2 <_fflush_r+0x1a>
 8006bee:	f000 f887 	bl	8006d00 <__sinit>
 8006bf2:	4b14      	ldr	r3, [pc, #80]	; (8006c44 <_fflush_r+0x6c>)
 8006bf4:	429c      	cmp	r4, r3
 8006bf6:	d11b      	bne.n	8006c30 <_fflush_r+0x58>
 8006bf8:	686c      	ldr	r4, [r5, #4]
 8006bfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d0ef      	beq.n	8006be2 <_fflush_r+0xa>
 8006c02:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006c04:	07d0      	lsls	r0, r2, #31
 8006c06:	d404      	bmi.n	8006c12 <_fflush_r+0x3a>
 8006c08:	0599      	lsls	r1, r3, #22
 8006c0a:	d402      	bmi.n	8006c12 <_fflush_r+0x3a>
 8006c0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c0e:	f000 f915 	bl	8006e3c <__retarget_lock_acquire_recursive>
 8006c12:	4628      	mov	r0, r5
 8006c14:	4621      	mov	r1, r4
 8006c16:	f7ff ff59 	bl	8006acc <__sflush_r>
 8006c1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006c1c:	07da      	lsls	r2, r3, #31
 8006c1e:	4605      	mov	r5, r0
 8006c20:	d4e0      	bmi.n	8006be4 <_fflush_r+0xc>
 8006c22:	89a3      	ldrh	r3, [r4, #12]
 8006c24:	059b      	lsls	r3, r3, #22
 8006c26:	d4dd      	bmi.n	8006be4 <_fflush_r+0xc>
 8006c28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c2a:	f000 f908 	bl	8006e3e <__retarget_lock_release_recursive>
 8006c2e:	e7d9      	b.n	8006be4 <_fflush_r+0xc>
 8006c30:	4b05      	ldr	r3, [pc, #20]	; (8006c48 <_fflush_r+0x70>)
 8006c32:	429c      	cmp	r4, r3
 8006c34:	d101      	bne.n	8006c3a <_fflush_r+0x62>
 8006c36:	68ac      	ldr	r4, [r5, #8]
 8006c38:	e7df      	b.n	8006bfa <_fflush_r+0x22>
 8006c3a:	4b04      	ldr	r3, [pc, #16]	; (8006c4c <_fflush_r+0x74>)
 8006c3c:	429c      	cmp	r4, r3
 8006c3e:	bf08      	it	eq
 8006c40:	68ec      	ldreq	r4, [r5, #12]
 8006c42:	e7da      	b.n	8006bfa <_fflush_r+0x22>
 8006c44:	080073c8 	.word	0x080073c8
 8006c48:	080073e8 	.word	0x080073e8
 8006c4c:	080073a8 	.word	0x080073a8

08006c50 <std>:
 8006c50:	2300      	movs	r3, #0
 8006c52:	b510      	push	{r4, lr}
 8006c54:	4604      	mov	r4, r0
 8006c56:	e9c0 3300 	strd	r3, r3, [r0]
 8006c5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006c5e:	6083      	str	r3, [r0, #8]
 8006c60:	8181      	strh	r1, [r0, #12]
 8006c62:	6643      	str	r3, [r0, #100]	; 0x64
 8006c64:	81c2      	strh	r2, [r0, #14]
 8006c66:	6183      	str	r3, [r0, #24]
 8006c68:	4619      	mov	r1, r3
 8006c6a:	2208      	movs	r2, #8
 8006c6c:	305c      	adds	r0, #92	; 0x5c
 8006c6e:	f7ff fdef 	bl	8006850 <memset>
 8006c72:	4b05      	ldr	r3, [pc, #20]	; (8006c88 <std+0x38>)
 8006c74:	6263      	str	r3, [r4, #36]	; 0x24
 8006c76:	4b05      	ldr	r3, [pc, #20]	; (8006c8c <std+0x3c>)
 8006c78:	62a3      	str	r3, [r4, #40]	; 0x28
 8006c7a:	4b05      	ldr	r3, [pc, #20]	; (8006c90 <std+0x40>)
 8006c7c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006c7e:	4b05      	ldr	r3, [pc, #20]	; (8006c94 <std+0x44>)
 8006c80:	6224      	str	r4, [r4, #32]
 8006c82:	6323      	str	r3, [r4, #48]	; 0x30
 8006c84:	bd10      	pop	{r4, pc}
 8006c86:	bf00      	nop
 8006c88:	0800707d 	.word	0x0800707d
 8006c8c:	0800709f 	.word	0x0800709f
 8006c90:	080070d7 	.word	0x080070d7
 8006c94:	080070fb 	.word	0x080070fb

08006c98 <_cleanup_r>:
 8006c98:	4901      	ldr	r1, [pc, #4]	; (8006ca0 <_cleanup_r+0x8>)
 8006c9a:	f000 b8af 	b.w	8006dfc <_fwalk_reent>
 8006c9e:	bf00      	nop
 8006ca0:	08006bd9 	.word	0x08006bd9

08006ca4 <__sfmoreglue>:
 8006ca4:	b570      	push	{r4, r5, r6, lr}
 8006ca6:	1e4a      	subs	r2, r1, #1
 8006ca8:	2568      	movs	r5, #104	; 0x68
 8006caa:	4355      	muls	r5, r2
 8006cac:	460e      	mov	r6, r1
 8006cae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006cb2:	f000 f979 	bl	8006fa8 <_malloc_r>
 8006cb6:	4604      	mov	r4, r0
 8006cb8:	b140      	cbz	r0, 8006ccc <__sfmoreglue+0x28>
 8006cba:	2100      	movs	r1, #0
 8006cbc:	e9c0 1600 	strd	r1, r6, [r0]
 8006cc0:	300c      	adds	r0, #12
 8006cc2:	60a0      	str	r0, [r4, #8]
 8006cc4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006cc8:	f7ff fdc2 	bl	8006850 <memset>
 8006ccc:	4620      	mov	r0, r4
 8006cce:	bd70      	pop	{r4, r5, r6, pc}

08006cd0 <__sfp_lock_acquire>:
 8006cd0:	4801      	ldr	r0, [pc, #4]	; (8006cd8 <__sfp_lock_acquire+0x8>)
 8006cd2:	f000 b8b3 	b.w	8006e3c <__retarget_lock_acquire_recursive>
 8006cd6:	bf00      	nop
 8006cd8:	2000075a 	.word	0x2000075a

08006cdc <__sfp_lock_release>:
 8006cdc:	4801      	ldr	r0, [pc, #4]	; (8006ce4 <__sfp_lock_release+0x8>)
 8006cde:	f000 b8ae 	b.w	8006e3e <__retarget_lock_release_recursive>
 8006ce2:	bf00      	nop
 8006ce4:	2000075a 	.word	0x2000075a

08006ce8 <__sinit_lock_acquire>:
 8006ce8:	4801      	ldr	r0, [pc, #4]	; (8006cf0 <__sinit_lock_acquire+0x8>)
 8006cea:	f000 b8a7 	b.w	8006e3c <__retarget_lock_acquire_recursive>
 8006cee:	bf00      	nop
 8006cf0:	20000755 	.word	0x20000755

08006cf4 <__sinit_lock_release>:
 8006cf4:	4801      	ldr	r0, [pc, #4]	; (8006cfc <__sinit_lock_release+0x8>)
 8006cf6:	f000 b8a2 	b.w	8006e3e <__retarget_lock_release_recursive>
 8006cfa:	bf00      	nop
 8006cfc:	20000755 	.word	0x20000755

08006d00 <__sinit>:
 8006d00:	b510      	push	{r4, lr}
 8006d02:	4604      	mov	r4, r0
 8006d04:	f7ff fff0 	bl	8006ce8 <__sinit_lock_acquire>
 8006d08:	69a3      	ldr	r3, [r4, #24]
 8006d0a:	b11b      	cbz	r3, 8006d14 <__sinit+0x14>
 8006d0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d10:	f7ff bff0 	b.w	8006cf4 <__sinit_lock_release>
 8006d14:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006d18:	6523      	str	r3, [r4, #80]	; 0x50
 8006d1a:	4b13      	ldr	r3, [pc, #76]	; (8006d68 <__sinit+0x68>)
 8006d1c:	4a13      	ldr	r2, [pc, #76]	; (8006d6c <__sinit+0x6c>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	62a2      	str	r2, [r4, #40]	; 0x28
 8006d22:	42a3      	cmp	r3, r4
 8006d24:	bf04      	itt	eq
 8006d26:	2301      	moveq	r3, #1
 8006d28:	61a3      	streq	r3, [r4, #24]
 8006d2a:	4620      	mov	r0, r4
 8006d2c:	f000 f820 	bl	8006d70 <__sfp>
 8006d30:	6060      	str	r0, [r4, #4]
 8006d32:	4620      	mov	r0, r4
 8006d34:	f000 f81c 	bl	8006d70 <__sfp>
 8006d38:	60a0      	str	r0, [r4, #8]
 8006d3a:	4620      	mov	r0, r4
 8006d3c:	f000 f818 	bl	8006d70 <__sfp>
 8006d40:	2200      	movs	r2, #0
 8006d42:	60e0      	str	r0, [r4, #12]
 8006d44:	2104      	movs	r1, #4
 8006d46:	6860      	ldr	r0, [r4, #4]
 8006d48:	f7ff ff82 	bl	8006c50 <std>
 8006d4c:	68a0      	ldr	r0, [r4, #8]
 8006d4e:	2201      	movs	r2, #1
 8006d50:	2109      	movs	r1, #9
 8006d52:	f7ff ff7d 	bl	8006c50 <std>
 8006d56:	68e0      	ldr	r0, [r4, #12]
 8006d58:	2202      	movs	r2, #2
 8006d5a:	2112      	movs	r1, #18
 8006d5c:	f7ff ff78 	bl	8006c50 <std>
 8006d60:	2301      	movs	r3, #1
 8006d62:	61a3      	str	r3, [r4, #24]
 8006d64:	e7d2      	b.n	8006d0c <__sinit+0xc>
 8006d66:	bf00      	nop
 8006d68:	080073a4 	.word	0x080073a4
 8006d6c:	08006c99 	.word	0x08006c99

08006d70 <__sfp>:
 8006d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d72:	4607      	mov	r7, r0
 8006d74:	f7ff ffac 	bl	8006cd0 <__sfp_lock_acquire>
 8006d78:	4b1e      	ldr	r3, [pc, #120]	; (8006df4 <__sfp+0x84>)
 8006d7a:	681e      	ldr	r6, [r3, #0]
 8006d7c:	69b3      	ldr	r3, [r6, #24]
 8006d7e:	b913      	cbnz	r3, 8006d86 <__sfp+0x16>
 8006d80:	4630      	mov	r0, r6
 8006d82:	f7ff ffbd 	bl	8006d00 <__sinit>
 8006d86:	3648      	adds	r6, #72	; 0x48
 8006d88:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006d8c:	3b01      	subs	r3, #1
 8006d8e:	d503      	bpl.n	8006d98 <__sfp+0x28>
 8006d90:	6833      	ldr	r3, [r6, #0]
 8006d92:	b30b      	cbz	r3, 8006dd8 <__sfp+0x68>
 8006d94:	6836      	ldr	r6, [r6, #0]
 8006d96:	e7f7      	b.n	8006d88 <__sfp+0x18>
 8006d98:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006d9c:	b9d5      	cbnz	r5, 8006dd4 <__sfp+0x64>
 8006d9e:	4b16      	ldr	r3, [pc, #88]	; (8006df8 <__sfp+0x88>)
 8006da0:	60e3      	str	r3, [r4, #12]
 8006da2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006da6:	6665      	str	r5, [r4, #100]	; 0x64
 8006da8:	f000 f847 	bl	8006e3a <__retarget_lock_init_recursive>
 8006dac:	f7ff ff96 	bl	8006cdc <__sfp_lock_release>
 8006db0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006db4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006db8:	6025      	str	r5, [r4, #0]
 8006dba:	61a5      	str	r5, [r4, #24]
 8006dbc:	2208      	movs	r2, #8
 8006dbe:	4629      	mov	r1, r5
 8006dc0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006dc4:	f7ff fd44 	bl	8006850 <memset>
 8006dc8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006dcc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006dd0:	4620      	mov	r0, r4
 8006dd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006dd4:	3468      	adds	r4, #104	; 0x68
 8006dd6:	e7d9      	b.n	8006d8c <__sfp+0x1c>
 8006dd8:	2104      	movs	r1, #4
 8006dda:	4638      	mov	r0, r7
 8006ddc:	f7ff ff62 	bl	8006ca4 <__sfmoreglue>
 8006de0:	4604      	mov	r4, r0
 8006de2:	6030      	str	r0, [r6, #0]
 8006de4:	2800      	cmp	r0, #0
 8006de6:	d1d5      	bne.n	8006d94 <__sfp+0x24>
 8006de8:	f7ff ff78 	bl	8006cdc <__sfp_lock_release>
 8006dec:	230c      	movs	r3, #12
 8006dee:	603b      	str	r3, [r7, #0]
 8006df0:	e7ee      	b.n	8006dd0 <__sfp+0x60>
 8006df2:	bf00      	nop
 8006df4:	080073a4 	.word	0x080073a4
 8006df8:	ffff0001 	.word	0xffff0001

08006dfc <_fwalk_reent>:
 8006dfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e00:	4606      	mov	r6, r0
 8006e02:	4688      	mov	r8, r1
 8006e04:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006e08:	2700      	movs	r7, #0
 8006e0a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006e0e:	f1b9 0901 	subs.w	r9, r9, #1
 8006e12:	d505      	bpl.n	8006e20 <_fwalk_reent+0x24>
 8006e14:	6824      	ldr	r4, [r4, #0]
 8006e16:	2c00      	cmp	r4, #0
 8006e18:	d1f7      	bne.n	8006e0a <_fwalk_reent+0xe>
 8006e1a:	4638      	mov	r0, r7
 8006e1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e20:	89ab      	ldrh	r3, [r5, #12]
 8006e22:	2b01      	cmp	r3, #1
 8006e24:	d907      	bls.n	8006e36 <_fwalk_reent+0x3a>
 8006e26:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006e2a:	3301      	adds	r3, #1
 8006e2c:	d003      	beq.n	8006e36 <_fwalk_reent+0x3a>
 8006e2e:	4629      	mov	r1, r5
 8006e30:	4630      	mov	r0, r6
 8006e32:	47c0      	blx	r8
 8006e34:	4307      	orrs	r7, r0
 8006e36:	3568      	adds	r5, #104	; 0x68
 8006e38:	e7e9      	b.n	8006e0e <_fwalk_reent+0x12>

08006e3a <__retarget_lock_init_recursive>:
 8006e3a:	4770      	bx	lr

08006e3c <__retarget_lock_acquire_recursive>:
 8006e3c:	4770      	bx	lr

08006e3e <__retarget_lock_release_recursive>:
 8006e3e:	4770      	bx	lr

08006e40 <__swhatbuf_r>:
 8006e40:	b570      	push	{r4, r5, r6, lr}
 8006e42:	460e      	mov	r6, r1
 8006e44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e48:	2900      	cmp	r1, #0
 8006e4a:	b096      	sub	sp, #88	; 0x58
 8006e4c:	4614      	mov	r4, r2
 8006e4e:	461d      	mov	r5, r3
 8006e50:	da07      	bge.n	8006e62 <__swhatbuf_r+0x22>
 8006e52:	2300      	movs	r3, #0
 8006e54:	602b      	str	r3, [r5, #0]
 8006e56:	89b3      	ldrh	r3, [r6, #12]
 8006e58:	061a      	lsls	r2, r3, #24
 8006e5a:	d410      	bmi.n	8006e7e <__swhatbuf_r+0x3e>
 8006e5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e60:	e00e      	b.n	8006e80 <__swhatbuf_r+0x40>
 8006e62:	466a      	mov	r2, sp
 8006e64:	f000 f970 	bl	8007148 <_fstat_r>
 8006e68:	2800      	cmp	r0, #0
 8006e6a:	dbf2      	blt.n	8006e52 <__swhatbuf_r+0x12>
 8006e6c:	9a01      	ldr	r2, [sp, #4]
 8006e6e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006e72:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006e76:	425a      	negs	r2, r3
 8006e78:	415a      	adcs	r2, r3
 8006e7a:	602a      	str	r2, [r5, #0]
 8006e7c:	e7ee      	b.n	8006e5c <__swhatbuf_r+0x1c>
 8006e7e:	2340      	movs	r3, #64	; 0x40
 8006e80:	2000      	movs	r0, #0
 8006e82:	6023      	str	r3, [r4, #0]
 8006e84:	b016      	add	sp, #88	; 0x58
 8006e86:	bd70      	pop	{r4, r5, r6, pc}

08006e88 <__smakebuf_r>:
 8006e88:	898b      	ldrh	r3, [r1, #12]
 8006e8a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006e8c:	079d      	lsls	r5, r3, #30
 8006e8e:	4606      	mov	r6, r0
 8006e90:	460c      	mov	r4, r1
 8006e92:	d507      	bpl.n	8006ea4 <__smakebuf_r+0x1c>
 8006e94:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006e98:	6023      	str	r3, [r4, #0]
 8006e9a:	6123      	str	r3, [r4, #16]
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	6163      	str	r3, [r4, #20]
 8006ea0:	b002      	add	sp, #8
 8006ea2:	bd70      	pop	{r4, r5, r6, pc}
 8006ea4:	ab01      	add	r3, sp, #4
 8006ea6:	466a      	mov	r2, sp
 8006ea8:	f7ff ffca 	bl	8006e40 <__swhatbuf_r>
 8006eac:	9900      	ldr	r1, [sp, #0]
 8006eae:	4605      	mov	r5, r0
 8006eb0:	4630      	mov	r0, r6
 8006eb2:	f000 f879 	bl	8006fa8 <_malloc_r>
 8006eb6:	b948      	cbnz	r0, 8006ecc <__smakebuf_r+0x44>
 8006eb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ebc:	059a      	lsls	r2, r3, #22
 8006ebe:	d4ef      	bmi.n	8006ea0 <__smakebuf_r+0x18>
 8006ec0:	f023 0303 	bic.w	r3, r3, #3
 8006ec4:	f043 0302 	orr.w	r3, r3, #2
 8006ec8:	81a3      	strh	r3, [r4, #12]
 8006eca:	e7e3      	b.n	8006e94 <__smakebuf_r+0xc>
 8006ecc:	4b0d      	ldr	r3, [pc, #52]	; (8006f04 <__smakebuf_r+0x7c>)
 8006ece:	62b3      	str	r3, [r6, #40]	; 0x28
 8006ed0:	89a3      	ldrh	r3, [r4, #12]
 8006ed2:	6020      	str	r0, [r4, #0]
 8006ed4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ed8:	81a3      	strh	r3, [r4, #12]
 8006eda:	9b00      	ldr	r3, [sp, #0]
 8006edc:	6163      	str	r3, [r4, #20]
 8006ede:	9b01      	ldr	r3, [sp, #4]
 8006ee0:	6120      	str	r0, [r4, #16]
 8006ee2:	b15b      	cbz	r3, 8006efc <__smakebuf_r+0x74>
 8006ee4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ee8:	4630      	mov	r0, r6
 8006eea:	f000 f93f 	bl	800716c <_isatty_r>
 8006eee:	b128      	cbz	r0, 8006efc <__smakebuf_r+0x74>
 8006ef0:	89a3      	ldrh	r3, [r4, #12]
 8006ef2:	f023 0303 	bic.w	r3, r3, #3
 8006ef6:	f043 0301 	orr.w	r3, r3, #1
 8006efa:	81a3      	strh	r3, [r4, #12]
 8006efc:	89a0      	ldrh	r0, [r4, #12]
 8006efe:	4305      	orrs	r5, r0
 8006f00:	81a5      	strh	r5, [r4, #12]
 8006f02:	e7cd      	b.n	8006ea0 <__smakebuf_r+0x18>
 8006f04:	08006c99 	.word	0x08006c99

08006f08 <_free_r>:
 8006f08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006f0a:	2900      	cmp	r1, #0
 8006f0c:	d048      	beq.n	8006fa0 <_free_r+0x98>
 8006f0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f12:	9001      	str	r0, [sp, #4]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	f1a1 0404 	sub.w	r4, r1, #4
 8006f1a:	bfb8      	it	lt
 8006f1c:	18e4      	addlt	r4, r4, r3
 8006f1e:	f000 f947 	bl	80071b0 <__malloc_lock>
 8006f22:	4a20      	ldr	r2, [pc, #128]	; (8006fa4 <_free_r+0x9c>)
 8006f24:	9801      	ldr	r0, [sp, #4]
 8006f26:	6813      	ldr	r3, [r2, #0]
 8006f28:	4615      	mov	r5, r2
 8006f2a:	b933      	cbnz	r3, 8006f3a <_free_r+0x32>
 8006f2c:	6063      	str	r3, [r4, #4]
 8006f2e:	6014      	str	r4, [r2, #0]
 8006f30:	b003      	add	sp, #12
 8006f32:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006f36:	f000 b941 	b.w	80071bc <__malloc_unlock>
 8006f3a:	42a3      	cmp	r3, r4
 8006f3c:	d90b      	bls.n	8006f56 <_free_r+0x4e>
 8006f3e:	6821      	ldr	r1, [r4, #0]
 8006f40:	1862      	adds	r2, r4, r1
 8006f42:	4293      	cmp	r3, r2
 8006f44:	bf04      	itt	eq
 8006f46:	681a      	ldreq	r2, [r3, #0]
 8006f48:	685b      	ldreq	r3, [r3, #4]
 8006f4a:	6063      	str	r3, [r4, #4]
 8006f4c:	bf04      	itt	eq
 8006f4e:	1852      	addeq	r2, r2, r1
 8006f50:	6022      	streq	r2, [r4, #0]
 8006f52:	602c      	str	r4, [r5, #0]
 8006f54:	e7ec      	b.n	8006f30 <_free_r+0x28>
 8006f56:	461a      	mov	r2, r3
 8006f58:	685b      	ldr	r3, [r3, #4]
 8006f5a:	b10b      	cbz	r3, 8006f60 <_free_r+0x58>
 8006f5c:	42a3      	cmp	r3, r4
 8006f5e:	d9fa      	bls.n	8006f56 <_free_r+0x4e>
 8006f60:	6811      	ldr	r1, [r2, #0]
 8006f62:	1855      	adds	r5, r2, r1
 8006f64:	42a5      	cmp	r5, r4
 8006f66:	d10b      	bne.n	8006f80 <_free_r+0x78>
 8006f68:	6824      	ldr	r4, [r4, #0]
 8006f6a:	4421      	add	r1, r4
 8006f6c:	1854      	adds	r4, r2, r1
 8006f6e:	42a3      	cmp	r3, r4
 8006f70:	6011      	str	r1, [r2, #0]
 8006f72:	d1dd      	bne.n	8006f30 <_free_r+0x28>
 8006f74:	681c      	ldr	r4, [r3, #0]
 8006f76:	685b      	ldr	r3, [r3, #4]
 8006f78:	6053      	str	r3, [r2, #4]
 8006f7a:	4421      	add	r1, r4
 8006f7c:	6011      	str	r1, [r2, #0]
 8006f7e:	e7d7      	b.n	8006f30 <_free_r+0x28>
 8006f80:	d902      	bls.n	8006f88 <_free_r+0x80>
 8006f82:	230c      	movs	r3, #12
 8006f84:	6003      	str	r3, [r0, #0]
 8006f86:	e7d3      	b.n	8006f30 <_free_r+0x28>
 8006f88:	6825      	ldr	r5, [r4, #0]
 8006f8a:	1961      	adds	r1, r4, r5
 8006f8c:	428b      	cmp	r3, r1
 8006f8e:	bf04      	itt	eq
 8006f90:	6819      	ldreq	r1, [r3, #0]
 8006f92:	685b      	ldreq	r3, [r3, #4]
 8006f94:	6063      	str	r3, [r4, #4]
 8006f96:	bf04      	itt	eq
 8006f98:	1949      	addeq	r1, r1, r5
 8006f9a:	6021      	streq	r1, [r4, #0]
 8006f9c:	6054      	str	r4, [r2, #4]
 8006f9e:	e7c7      	b.n	8006f30 <_free_r+0x28>
 8006fa0:	b003      	add	sp, #12
 8006fa2:	bd30      	pop	{r4, r5, pc}
 8006fa4:	20000248 	.word	0x20000248

08006fa8 <_malloc_r>:
 8006fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006faa:	1ccd      	adds	r5, r1, #3
 8006fac:	f025 0503 	bic.w	r5, r5, #3
 8006fb0:	3508      	adds	r5, #8
 8006fb2:	2d0c      	cmp	r5, #12
 8006fb4:	bf38      	it	cc
 8006fb6:	250c      	movcc	r5, #12
 8006fb8:	2d00      	cmp	r5, #0
 8006fba:	4606      	mov	r6, r0
 8006fbc:	db01      	blt.n	8006fc2 <_malloc_r+0x1a>
 8006fbe:	42a9      	cmp	r1, r5
 8006fc0:	d903      	bls.n	8006fca <_malloc_r+0x22>
 8006fc2:	230c      	movs	r3, #12
 8006fc4:	6033      	str	r3, [r6, #0]
 8006fc6:	2000      	movs	r0, #0
 8006fc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006fca:	f000 f8f1 	bl	80071b0 <__malloc_lock>
 8006fce:	4921      	ldr	r1, [pc, #132]	; (8007054 <_malloc_r+0xac>)
 8006fd0:	680a      	ldr	r2, [r1, #0]
 8006fd2:	4614      	mov	r4, r2
 8006fd4:	b99c      	cbnz	r4, 8006ffe <_malloc_r+0x56>
 8006fd6:	4f20      	ldr	r7, [pc, #128]	; (8007058 <_malloc_r+0xb0>)
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	b923      	cbnz	r3, 8006fe6 <_malloc_r+0x3e>
 8006fdc:	4621      	mov	r1, r4
 8006fde:	4630      	mov	r0, r6
 8006fe0:	f000 f83c 	bl	800705c <_sbrk_r>
 8006fe4:	6038      	str	r0, [r7, #0]
 8006fe6:	4629      	mov	r1, r5
 8006fe8:	4630      	mov	r0, r6
 8006fea:	f000 f837 	bl	800705c <_sbrk_r>
 8006fee:	1c43      	adds	r3, r0, #1
 8006ff0:	d123      	bne.n	800703a <_malloc_r+0x92>
 8006ff2:	230c      	movs	r3, #12
 8006ff4:	6033      	str	r3, [r6, #0]
 8006ff6:	4630      	mov	r0, r6
 8006ff8:	f000 f8e0 	bl	80071bc <__malloc_unlock>
 8006ffc:	e7e3      	b.n	8006fc6 <_malloc_r+0x1e>
 8006ffe:	6823      	ldr	r3, [r4, #0]
 8007000:	1b5b      	subs	r3, r3, r5
 8007002:	d417      	bmi.n	8007034 <_malloc_r+0x8c>
 8007004:	2b0b      	cmp	r3, #11
 8007006:	d903      	bls.n	8007010 <_malloc_r+0x68>
 8007008:	6023      	str	r3, [r4, #0]
 800700a:	441c      	add	r4, r3
 800700c:	6025      	str	r5, [r4, #0]
 800700e:	e004      	b.n	800701a <_malloc_r+0x72>
 8007010:	6863      	ldr	r3, [r4, #4]
 8007012:	42a2      	cmp	r2, r4
 8007014:	bf0c      	ite	eq
 8007016:	600b      	streq	r3, [r1, #0]
 8007018:	6053      	strne	r3, [r2, #4]
 800701a:	4630      	mov	r0, r6
 800701c:	f000 f8ce 	bl	80071bc <__malloc_unlock>
 8007020:	f104 000b 	add.w	r0, r4, #11
 8007024:	1d23      	adds	r3, r4, #4
 8007026:	f020 0007 	bic.w	r0, r0, #7
 800702a:	1ac2      	subs	r2, r0, r3
 800702c:	d0cc      	beq.n	8006fc8 <_malloc_r+0x20>
 800702e:	1a1b      	subs	r3, r3, r0
 8007030:	50a3      	str	r3, [r4, r2]
 8007032:	e7c9      	b.n	8006fc8 <_malloc_r+0x20>
 8007034:	4622      	mov	r2, r4
 8007036:	6864      	ldr	r4, [r4, #4]
 8007038:	e7cc      	b.n	8006fd4 <_malloc_r+0x2c>
 800703a:	1cc4      	adds	r4, r0, #3
 800703c:	f024 0403 	bic.w	r4, r4, #3
 8007040:	42a0      	cmp	r0, r4
 8007042:	d0e3      	beq.n	800700c <_malloc_r+0x64>
 8007044:	1a21      	subs	r1, r4, r0
 8007046:	4630      	mov	r0, r6
 8007048:	f000 f808 	bl	800705c <_sbrk_r>
 800704c:	3001      	adds	r0, #1
 800704e:	d1dd      	bne.n	800700c <_malloc_r+0x64>
 8007050:	e7cf      	b.n	8006ff2 <_malloc_r+0x4a>
 8007052:	bf00      	nop
 8007054:	20000248 	.word	0x20000248
 8007058:	2000024c 	.word	0x2000024c

0800705c <_sbrk_r>:
 800705c:	b538      	push	{r3, r4, r5, lr}
 800705e:	4d06      	ldr	r5, [pc, #24]	; (8007078 <_sbrk_r+0x1c>)
 8007060:	2300      	movs	r3, #0
 8007062:	4604      	mov	r4, r0
 8007064:	4608      	mov	r0, r1
 8007066:	602b      	str	r3, [r5, #0]
 8007068:	f7f9 fca6 	bl	80009b8 <_sbrk>
 800706c:	1c43      	adds	r3, r0, #1
 800706e:	d102      	bne.n	8007076 <_sbrk_r+0x1a>
 8007070:	682b      	ldr	r3, [r5, #0]
 8007072:	b103      	cbz	r3, 8007076 <_sbrk_r+0x1a>
 8007074:	6023      	str	r3, [r4, #0]
 8007076:	bd38      	pop	{r3, r4, r5, pc}
 8007078:	2000075c 	.word	0x2000075c

0800707c <__sread>:
 800707c:	b510      	push	{r4, lr}
 800707e:	460c      	mov	r4, r1
 8007080:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007084:	f000 f8a0 	bl	80071c8 <_read_r>
 8007088:	2800      	cmp	r0, #0
 800708a:	bfab      	itete	ge
 800708c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800708e:	89a3      	ldrhlt	r3, [r4, #12]
 8007090:	181b      	addge	r3, r3, r0
 8007092:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007096:	bfac      	ite	ge
 8007098:	6563      	strge	r3, [r4, #84]	; 0x54
 800709a:	81a3      	strhlt	r3, [r4, #12]
 800709c:	bd10      	pop	{r4, pc}

0800709e <__swrite>:
 800709e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070a2:	461f      	mov	r7, r3
 80070a4:	898b      	ldrh	r3, [r1, #12]
 80070a6:	05db      	lsls	r3, r3, #23
 80070a8:	4605      	mov	r5, r0
 80070aa:	460c      	mov	r4, r1
 80070ac:	4616      	mov	r6, r2
 80070ae:	d505      	bpl.n	80070bc <__swrite+0x1e>
 80070b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070b4:	2302      	movs	r3, #2
 80070b6:	2200      	movs	r2, #0
 80070b8:	f000 f868 	bl	800718c <_lseek_r>
 80070bc:	89a3      	ldrh	r3, [r4, #12]
 80070be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80070c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80070c6:	81a3      	strh	r3, [r4, #12]
 80070c8:	4632      	mov	r2, r6
 80070ca:	463b      	mov	r3, r7
 80070cc:	4628      	mov	r0, r5
 80070ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80070d2:	f000 b817 	b.w	8007104 <_write_r>

080070d6 <__sseek>:
 80070d6:	b510      	push	{r4, lr}
 80070d8:	460c      	mov	r4, r1
 80070da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070de:	f000 f855 	bl	800718c <_lseek_r>
 80070e2:	1c43      	adds	r3, r0, #1
 80070e4:	89a3      	ldrh	r3, [r4, #12]
 80070e6:	bf15      	itete	ne
 80070e8:	6560      	strne	r0, [r4, #84]	; 0x54
 80070ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80070ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80070f2:	81a3      	strheq	r3, [r4, #12]
 80070f4:	bf18      	it	ne
 80070f6:	81a3      	strhne	r3, [r4, #12]
 80070f8:	bd10      	pop	{r4, pc}

080070fa <__sclose>:
 80070fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070fe:	f000 b813 	b.w	8007128 <_close_r>
	...

08007104 <_write_r>:
 8007104:	b538      	push	{r3, r4, r5, lr}
 8007106:	4d07      	ldr	r5, [pc, #28]	; (8007124 <_write_r+0x20>)
 8007108:	4604      	mov	r4, r0
 800710a:	4608      	mov	r0, r1
 800710c:	4611      	mov	r1, r2
 800710e:	2200      	movs	r2, #0
 8007110:	602a      	str	r2, [r5, #0]
 8007112:	461a      	mov	r2, r3
 8007114:	f7f9 fbff 	bl	8000916 <_write>
 8007118:	1c43      	adds	r3, r0, #1
 800711a:	d102      	bne.n	8007122 <_write_r+0x1e>
 800711c:	682b      	ldr	r3, [r5, #0]
 800711e:	b103      	cbz	r3, 8007122 <_write_r+0x1e>
 8007120:	6023      	str	r3, [r4, #0]
 8007122:	bd38      	pop	{r3, r4, r5, pc}
 8007124:	2000075c 	.word	0x2000075c

08007128 <_close_r>:
 8007128:	b538      	push	{r3, r4, r5, lr}
 800712a:	4d06      	ldr	r5, [pc, #24]	; (8007144 <_close_r+0x1c>)
 800712c:	2300      	movs	r3, #0
 800712e:	4604      	mov	r4, r0
 8007130:	4608      	mov	r0, r1
 8007132:	602b      	str	r3, [r5, #0]
 8007134:	f7f9 fc0b 	bl	800094e <_close>
 8007138:	1c43      	adds	r3, r0, #1
 800713a:	d102      	bne.n	8007142 <_close_r+0x1a>
 800713c:	682b      	ldr	r3, [r5, #0]
 800713e:	b103      	cbz	r3, 8007142 <_close_r+0x1a>
 8007140:	6023      	str	r3, [r4, #0]
 8007142:	bd38      	pop	{r3, r4, r5, pc}
 8007144:	2000075c 	.word	0x2000075c

08007148 <_fstat_r>:
 8007148:	b538      	push	{r3, r4, r5, lr}
 800714a:	4d07      	ldr	r5, [pc, #28]	; (8007168 <_fstat_r+0x20>)
 800714c:	2300      	movs	r3, #0
 800714e:	4604      	mov	r4, r0
 8007150:	4608      	mov	r0, r1
 8007152:	4611      	mov	r1, r2
 8007154:	602b      	str	r3, [r5, #0]
 8007156:	f7f9 fc06 	bl	8000966 <_fstat>
 800715a:	1c43      	adds	r3, r0, #1
 800715c:	d102      	bne.n	8007164 <_fstat_r+0x1c>
 800715e:	682b      	ldr	r3, [r5, #0]
 8007160:	b103      	cbz	r3, 8007164 <_fstat_r+0x1c>
 8007162:	6023      	str	r3, [r4, #0]
 8007164:	bd38      	pop	{r3, r4, r5, pc}
 8007166:	bf00      	nop
 8007168:	2000075c 	.word	0x2000075c

0800716c <_isatty_r>:
 800716c:	b538      	push	{r3, r4, r5, lr}
 800716e:	4d06      	ldr	r5, [pc, #24]	; (8007188 <_isatty_r+0x1c>)
 8007170:	2300      	movs	r3, #0
 8007172:	4604      	mov	r4, r0
 8007174:	4608      	mov	r0, r1
 8007176:	602b      	str	r3, [r5, #0]
 8007178:	f7f9 fc05 	bl	8000986 <_isatty>
 800717c:	1c43      	adds	r3, r0, #1
 800717e:	d102      	bne.n	8007186 <_isatty_r+0x1a>
 8007180:	682b      	ldr	r3, [r5, #0]
 8007182:	b103      	cbz	r3, 8007186 <_isatty_r+0x1a>
 8007184:	6023      	str	r3, [r4, #0]
 8007186:	bd38      	pop	{r3, r4, r5, pc}
 8007188:	2000075c 	.word	0x2000075c

0800718c <_lseek_r>:
 800718c:	b538      	push	{r3, r4, r5, lr}
 800718e:	4d07      	ldr	r5, [pc, #28]	; (80071ac <_lseek_r+0x20>)
 8007190:	4604      	mov	r4, r0
 8007192:	4608      	mov	r0, r1
 8007194:	4611      	mov	r1, r2
 8007196:	2200      	movs	r2, #0
 8007198:	602a      	str	r2, [r5, #0]
 800719a:	461a      	mov	r2, r3
 800719c:	f7f9 fbfe 	bl	800099c <_lseek>
 80071a0:	1c43      	adds	r3, r0, #1
 80071a2:	d102      	bne.n	80071aa <_lseek_r+0x1e>
 80071a4:	682b      	ldr	r3, [r5, #0]
 80071a6:	b103      	cbz	r3, 80071aa <_lseek_r+0x1e>
 80071a8:	6023      	str	r3, [r4, #0]
 80071aa:	bd38      	pop	{r3, r4, r5, pc}
 80071ac:	2000075c 	.word	0x2000075c

080071b0 <__malloc_lock>:
 80071b0:	4801      	ldr	r0, [pc, #4]	; (80071b8 <__malloc_lock+0x8>)
 80071b2:	f7ff be43 	b.w	8006e3c <__retarget_lock_acquire_recursive>
 80071b6:	bf00      	nop
 80071b8:	20000756 	.word	0x20000756

080071bc <__malloc_unlock>:
 80071bc:	4801      	ldr	r0, [pc, #4]	; (80071c4 <__malloc_unlock+0x8>)
 80071be:	f7ff be3e 	b.w	8006e3e <__retarget_lock_release_recursive>
 80071c2:	bf00      	nop
 80071c4:	20000756 	.word	0x20000756

080071c8 <_read_r>:
 80071c8:	b538      	push	{r3, r4, r5, lr}
 80071ca:	4d07      	ldr	r5, [pc, #28]	; (80071e8 <_read_r+0x20>)
 80071cc:	4604      	mov	r4, r0
 80071ce:	4608      	mov	r0, r1
 80071d0:	4611      	mov	r1, r2
 80071d2:	2200      	movs	r2, #0
 80071d4:	602a      	str	r2, [r5, #0]
 80071d6:	461a      	mov	r2, r3
 80071d8:	f7f9 fb80 	bl	80008dc <_read>
 80071dc:	1c43      	adds	r3, r0, #1
 80071de:	d102      	bne.n	80071e6 <_read_r+0x1e>
 80071e0:	682b      	ldr	r3, [r5, #0]
 80071e2:	b103      	cbz	r3, 80071e6 <_read_r+0x1e>
 80071e4:	6023      	str	r3, [r4, #0]
 80071e6:	bd38      	pop	{r3, r4, r5, pc}
 80071e8:	2000075c 	.word	0x2000075c

080071ec <_init>:
 80071ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071ee:	bf00      	nop
 80071f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071f2:	bc08      	pop	{r3}
 80071f4:	469e      	mov	lr, r3
 80071f6:	4770      	bx	lr

080071f8 <_fini>:
 80071f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071fa:	bf00      	nop
 80071fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071fe:	bc08      	pop	{r3}
 8007200:	469e      	mov	lr, r3
 8007202:	4770      	bx	lr
