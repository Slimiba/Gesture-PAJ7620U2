
Gesture PAJ7620U2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b70  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001cc  08003d04  08003d04  00013d04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ed0  08003ed0  00020228  2**0
                  CONTENTS
  4 .ARM          00000000  08003ed0  08003ed0  00020228  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003ed0  08003ed0  00020228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ed0  08003ed0  00013ed0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ed4  08003ed4  00013ed4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000228  20000000  08003ed8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000538  20000228  08004100  00020228  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000760  08004100  00020760  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017269  00000000  00000000  00020258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000321d  00000000  00000000  000374c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b48  00000000  00000000  0003a6de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001508  00000000  00000000  0003b226  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00010d2c  00000000  00000000  0003c72e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00004505  00000000  00000000  0004d45a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  0005195f  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000027b4  00000000  00000000  000519b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loc    0000b890  00000000  00000000  00054168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000228 	.word	0x20000228
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003cec 	.word	0x08003cec

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000022c 	.word	0x2000022c
 80001d0:	08003cec 	.word	0x08003cec

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001e4:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001e6:	2400      	movs	r4, #0
{
 80001e8:	b0a7      	sub	sp, #156	; 0x9c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001ea:	2214      	movs	r2, #20
 80001ec:	4621      	mov	r1, r4
 80001ee:	a801      	add	r0, sp, #4
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001f0:	9408      	str	r4, [sp, #32]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001f2:	f003 f8a5 	bl	8003340 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001f6:	2258      	movs	r2, #88	; 0x58
 80001f8:	4621      	mov	r1, r4
 80001fa:	a810      	add	r0, sp, #64	; 0x40
 80001fc:	f003 f8a0 	bl	8003340 <memset>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000200:	220b      	movs	r2, #11
 8000202:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000206:	e9cd 2306 	strd	r2, r3, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800020a:	2301      	movs	r3, #1
 800020c:	2210      	movs	r2, #16
 800020e:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000212:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000214:	2502      	movs	r5, #2
 8000216:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800021a:	e9cd 530c 	strd	r5, r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800021e:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000220:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000224:	e9cd 340e 	strd	r3, r4, [sp, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000228:	f001 fb9a 	bl	8001960 <HAL_RCC_OscConfig>
 800022c:	b108      	cbz	r0, 8000232 <SystemClock_Config+0x4e>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800022e:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000230:	e7fe      	b.n	8000230 <SystemClock_Config+0x4c>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000232:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000234:	e9cd 3501 	strd	r3, r5, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000238:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800023c:	e9cd 3004 	strd	r3, r0, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000240:	9003      	str	r0, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000242:	4629      	mov	r1, r5
 8000244:	a801      	add	r0, sp, #4
 8000246:	f001 fe4f 	bl	8001ee8 <HAL_RCC_ClockConfig>
 800024a:	b108      	cbz	r0, 8000250 <SystemClock_Config+0x6c>
 800024c:	b672      	cpsid	i
  while (1)
 800024e:	e7fe      	b.n	800024e <SystemClock_Config+0x6a>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART2
 8000250:	4b08      	ldr	r3, [pc, #32]	; (8000274 <SystemClock_Config+0x90>)
 8000252:	9310      	str	r3, [sp, #64]	; 0x40
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000254:	9013      	str	r0, [sp, #76]	; 0x4c
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000256:	9015      	str	r0, [sp, #84]	; 0x54
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000258:	9017      	str	r0, [sp, #92]	; 0x5c
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800025a:	f44f 7300 	mov.w	r3, #512	; 0x200
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800025e:	9025      	str	r0, [sp, #148]	; 0x94
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000260:	a810      	add	r0, sp, #64	; 0x40
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000262:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000264:	f001 ff1c 	bl	80020a0 <HAL_RCCEx_PeriphCLKConfig>
 8000268:	b108      	cbz	r0, 800026e <SystemClock_Config+0x8a>
 800026a:	b672      	cpsid	i
  while (1)
 800026c:	e7fe      	b.n	800026c <SystemClock_Config+0x88>
}
 800026e:	b027      	add	sp, #156	; 0x9c
 8000270:	bd30      	pop	{r4, r5, pc}
 8000272:	bf00      	nop
 8000274:	0003002a 	.word	0x0003002a

08000278 <main>:
{
 8000278:	b500      	push	{lr}
 800027a:	b08d      	sub	sp, #52	; 0x34
  HAL_Init();
 800027c:	f000 fa9c 	bl	80007b8 <HAL_Init>
  SystemClock_Config();
 8000280:	f7ff ffb0 	bl	80001e4 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000284:	2214      	movs	r2, #20
 8000286:	2100      	movs	r1, #0
 8000288:	a807      	add	r0, sp, #28
 800028a:	f003 f859 	bl	8003340 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800028e:	4b72      	ldr	r3, [pc, #456]	; (8000458 <main+0x1e0>)
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000290:	4872      	ldr	r0, [pc, #456]	; (800045c <main+0x1e4>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000292:	695a      	ldr	r2, [r3, #20]
 8000294:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000298:	615a      	str	r2, [r3, #20]
 800029a:	695a      	ldr	r2, [r3, #20]
 800029c:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 80002a0:	9201      	str	r2, [sp, #4]
 80002a2:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80002a4:	695a      	ldr	r2, [r3, #20]
 80002a6:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80002aa:	615a      	str	r2, [r3, #20]
 80002ac:	695a      	ldr	r2, [r3, #20]
 80002ae:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 80002b2:	9202      	str	r2, [sp, #8]
 80002b4:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002b6:	695a      	ldr	r2, [r3, #20]
 80002b8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80002bc:	615a      	str	r2, [r3, #20]
 80002be:	695a      	ldr	r2, [r3, #20]
 80002c0:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80002c4:	9203      	str	r2, [sp, #12]
 80002c6:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002c8:	695a      	ldr	r2, [r3, #20]
 80002ca:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80002ce:	615a      	str	r2, [r3, #20]
 80002d0:	695a      	ldr	r2, [r3, #20]
 80002d2:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 80002d6:	9204      	str	r2, [sp, #16]
 80002d8:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002da:	695a      	ldr	r2, [r3, #20]
 80002dc:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80002e0:	615a      	str	r2, [r3, #20]
 80002e2:	695a      	ldr	r2, [r3, #20]
 80002e4:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80002e8:	9205      	str	r2, [sp, #20]
 80002ea:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80002ec:	695a      	ldr	r2, [r3, #20]
 80002ee:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80002f2:	615a      	str	r2, [r3, #20]
 80002f4:	695b      	ldr	r3, [r3, #20]
 80002f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80002fa:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80002fc:	2200      	movs	r2, #0
 80002fe:	f244 0181 	movw	r1, #16513	; 0x4081
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000302:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000304:	f000 fbcc 	bl	8000aa0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000308:	2200      	movs	r2, #0
 800030a:	4855      	ldr	r0, [pc, #340]	; (8000460 <main+0x1e8>)
 800030c:	2140      	movs	r1, #64	; 0x40
 800030e:	f000 fbc7 	bl	8000aa0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000312:	4b54      	ldr	r3, [pc, #336]	; (8000464 <main+0x1ec>)
 8000314:	f44f 5000 	mov.w	r0, #8192	; 0x2000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000318:	2400      	movs	r4, #0
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800031a:	e9cd 0307 	strd	r0, r3, [sp, #28]
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800031e:	a907      	add	r1, sp, #28
 8000320:	4851      	ldr	r0, [pc, #324]	; (8000468 <main+0x1f0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000322:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000324:	2501      	movs	r5, #1
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000326:	f000 fae7 	bl	80008f8 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800032a:	f244 0381 	movw	r3, #16513	; 0x4081
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800032e:	484b      	ldr	r0, [pc, #300]	; (800045c <main+0x1e4>)
 8000330:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000332:	e9cd 3507 	strd	r3, r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000336:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800033a:	2602      	movs	r6, #2
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800033c:	f000 fadc 	bl	80008f8 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000340:	f44f 7340 	mov.w	r3, #768	; 0x300
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000344:	f04f 0c03 	mov.w	ip, #3
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000348:	e9cd 3607 	strd	r3, r6, [sp, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800034c:	4847      	ldr	r0, [pc, #284]	; (800046c <main+0x1f4>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800034e:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000350:	2307      	movs	r3, #7
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000352:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000354:	e9cd c30a 	strd	ip, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000358:	f000 face 	bl	80008f8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800035c:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800035e:	4840      	ldr	r0, [pc, #256]	; (8000460 <main+0x1e8>)
 8000360:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000362:	e9cd 3507 	strd	r3, r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000366:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800036a:	f000 fac5 	bl	80008f8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800036e:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000370:	483b      	ldr	r0, [pc, #236]	; (8000460 <main+0x1e8>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000372:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000374:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000376:	e9cd 3407 	strd	r3, r4, [sp, #28]
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800037a:	f000 fabd 	bl	80008f8 <HAL_GPIO_Init>
  hrtc.Instance = RTC;
 800037e:	483c      	ldr	r0, [pc, #240]	; (8000470 <main+0x1f8>)
 8000380:	4b3c      	ldr	r3, [pc, #240]	; (8000474 <main+0x1fc>)
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000382:	6184      	str	r4, [r0, #24]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000384:	e9c0 3400 	strd	r3, r4, [r0]
  hrtc.Init.SynchPrediv = 255;
 8000388:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
 800038c:	23ff      	movs	r3, #255	; 0xff
 800038e:	e9c0 e302 	strd	lr, r3, [r0, #8]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000392:	e9c0 4404 	strd	r4, r4, [r0, #16]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000396:	f001 fffb 	bl	8002390 <HAL_RTC_Init>
 800039a:	4603      	mov	r3, r0
 800039c:	b108      	cbz	r0, 80003a2 <main+0x12a>
 800039e:	b672      	cpsid	i
  while (1)
 80003a0:	e7fe      	b.n	80003a0 <main+0x128>
  hpcd_USB_FS.Instance = USB;
 80003a2:	4835      	ldr	r0, [pc, #212]	; (8000478 <main+0x200>)
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80003a4:	4935      	ldr	r1, [pc, #212]	; (800047c <main+0x204>)
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80003a6:	6086      	str	r6, [r0, #8]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80003a8:	2208      	movs	r2, #8
 80003aa:	e9c0 1200 	strd	r1, r2, [r0]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80003ae:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80003b2:	6106      	str	r6, [r0, #16]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80003b4:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80003b6:	f000 fe58 	bl	800106a <HAL_PCD_Init>
 80003ba:	b108      	cbz	r0, 80003c0 <main+0x148>
 80003bc:	b672      	cpsid	i
  while (1)
 80003be:	e7fe      	b.n	80003be <main+0x146>
  hi2c1.Instance = I2C1;
 80003c0:	4c2f      	ldr	r4, [pc, #188]	; (8000480 <main+0x208>)
  hi2c1.Init.Timing = 0x2000090E;
 80003c2:	4a30      	ldr	r2, [pc, #192]	; (8000484 <main+0x20c>)
 80003c4:	4b30      	ldr	r3, [pc, #192]	; (8000488 <main+0x210>)
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003c6:	6220      	str	r0, [r4, #32]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003c8:	e9c4 0502 	strd	r0, r5, [r4, #8]
  hi2c1.Init.OwnAddress2 = 0;
 80003cc:	e9c4 0004 	strd	r0, r0, [r4, #16]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003d0:	e9c4 0006 	strd	r0, r0, [r4, #24]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80003d4:	4620      	mov	r0, r4
  hi2c1.Init.Timing = 0x2000090E;
 80003d6:	e9c4 2300 	strd	r2, r3, [r4]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80003da:	f000 fc7b 	bl	8000cd4 <HAL_I2C_Init>
 80003de:	4601      	mov	r1, r0
 80003e0:	b108      	cbz	r0, 80003e6 <main+0x16e>
 80003e2:	b672      	cpsid	i
  while (1)
 80003e4:	e7fe      	b.n	80003e4 <main+0x16c>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80003e6:	4620      	mov	r0, r4
 80003e8:	f000 fdf4 	bl	8000fd4 <HAL_I2CEx_ConfigAnalogFilter>
 80003ec:	4601      	mov	r1, r0
 80003ee:	b108      	cbz	r0, 80003f4 <main+0x17c>
 80003f0:	b672      	cpsid	i
  while (1)
 80003f2:	e7fe      	b.n	80003f2 <main+0x17a>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80003f4:	4620      	mov	r0, r4
 80003f6:	f000 fe13 	bl	8001020 <HAL_I2CEx_ConfigDigitalFilter>
 80003fa:	4603      	mov	r3, r0
 80003fc:	b108      	cbz	r0, 8000402 <main+0x18a>
 80003fe:	b672      	cpsid	i
  while (1)
 8000400:	e7fe      	b.n	8000400 <main+0x188>
  huart4.Instance = UART4;
 8000402:	4822      	ldr	r0, [pc, #136]	; (800048c <main+0x214>)
  huart4.Init.BaudRate = 115200;
 8000404:	4a22      	ldr	r2, [pc, #136]	; (8000490 <main+0x218>)
  huart4.Init.Parity = UART_PARITY_NONE;
 8000406:	6103      	str	r3, [r0, #16]
  huart4.Init.BaudRate = 115200;
 8000408:	f44f 35e1 	mov.w	r5, #115200	; 0x1c200
  huart4.Init.Mode = UART_MODE_TX_RX;
 800040c:	240c      	movs	r4, #12
  huart4.Init.StopBits = UART_STOPBITS_1;
 800040e:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000412:	e9c0 4305 	strd	r4, r3, [r0, #20]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000416:	e9c0 3307 	strd	r3, r3, [r0, #28]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800041a:	6243      	str	r3, [r0, #36]	; 0x24
  huart4.Init.BaudRate = 115200;
 800041c:	e9c0 2500 	strd	r2, r5, [r0]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000420:	f002 fa31 	bl	8002886 <HAL_UART_Init>
 8000424:	4603      	mov	r3, r0
 8000426:	b108      	cbz	r0, 800042c <main+0x1b4>
 8000428:	b672      	cpsid	i
  while (1)
 800042a:	e7fe      	b.n	800042a <main+0x1b2>
  huart2.Instance = USART2;
 800042c:	4819      	ldr	r0, [pc, #100]	; (8000494 <main+0x21c>)
 800042e:	4a1a      	ldr	r2, [pc, #104]	; (8000498 <main+0x220>)
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000430:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.BaudRate = 115200;
 8000434:	e9c0 2500 	strd	r2, r5, [r0]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000438:	e9c0 3404 	strd	r3, r4, [r0, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800043c:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000440:	e9c0 3308 	strd	r3, r3, [r0, #32]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000444:	f002 fa1f 	bl	8002886 <HAL_UART_Init>
 8000448:	b108      	cbz	r0, 800044e <main+0x1d6>
 800044a:	b672      	cpsid	i
  while (1)
 800044c:	e7fe      	b.n	800044c <main+0x1d4>
	  initializeRegisters();
 800044e:	f002 ff1f 	bl	8003290 <initializeRegisters>
	  GESTURE_Actions();
 8000452:	f002 fdfb 	bl	800304c <GESTURE_Actions>
  while (1)
 8000456:	e7fa      	b.n	800044e <main+0x1d6>
 8000458:	40021000 	.word	0x40021000
 800045c:	48000400 	.word	0x48000400
 8000460:	48001800 	.word	0x48001800
 8000464:	10110000 	.word	0x10110000
 8000468:	48000800 	.word	0x48000800
 800046c:	48000c00 	.word	0x48000c00
 8000470:	20000320 	.word	0x20000320
 8000474:	40002800 	.word	0x40002800
 8000478:	2000044c 	.word	0x2000044c
 800047c:	40005c00 	.word	0x40005c00
 8000480:	20000250 	.word	0x20000250
 8000484:	40005400 	.word	0x40005400
 8000488:	2000090e 	.word	0x2000090e
 800048c:	20000344 	.word	0x20000344
 8000490:	40004c00 	.word	0x40004c00
 8000494:	200003c8 	.word	0x200003c8
 8000498:	40004400 	.word	0x40004400

0800049c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800049c:	4b0a      	ldr	r3, [pc, #40]	; (80004c8 <HAL_MspInit+0x2c>)
 800049e:	699a      	ldr	r2, [r3, #24]
 80004a0:	f042 0201 	orr.w	r2, r2, #1
 80004a4:	619a      	str	r2, [r3, #24]
 80004a6:	699a      	ldr	r2, [r3, #24]
{
 80004a8:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004aa:	f002 0201 	and.w	r2, r2, #1
 80004ae:	9200      	str	r2, [sp, #0]
 80004b0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004b2:	69da      	ldr	r2, [r3, #28]
 80004b4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80004b8:	61da      	str	r2, [r3, #28]
 80004ba:	69db      	ldr	r3, [r3, #28]
 80004bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004c0:	9301      	str	r3, [sp, #4]
 80004c2:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004c4:	b002      	add	sp, #8
 80004c6:	4770      	bx	lr
 80004c8:	40021000 	.word	0x40021000

080004cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80004cc:	b510      	push	{r4, lr}
 80004ce:	4604      	mov	r4, r0
 80004d0:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d2:	2214      	movs	r2, #20
 80004d4:	2100      	movs	r1, #0
 80004d6:	a803      	add	r0, sp, #12
 80004d8:	f002 ff32 	bl	8003340 <memset>
  if(hi2c->Instance==I2C1)
 80004dc:	6822      	ldr	r2, [r4, #0]
 80004de:	4b13      	ldr	r3, [pc, #76]	; (800052c <HAL_I2C_MspInit+0x60>)
 80004e0:	429a      	cmp	r2, r3
 80004e2:	d121      	bne.n	8000528 <HAL_I2C_MspInit+0x5c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004e4:	4c12      	ldr	r4, [pc, #72]	; (8000530 <HAL_I2C_MspInit+0x64>)
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004e6:	4813      	ldr	r0, [pc, #76]	; (8000534 <HAL_I2C_MspInit+0x68>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004e8:	6963      	ldr	r3, [r4, #20]
 80004ea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80004ee:	6163      	str	r3, [r4, #20]
 80004f0:	6963      	ldr	r3, [r4, #20]
 80004f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80004f6:	9301      	str	r3, [sp, #4]
 80004f8:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80004fa:	f44f 7240 	mov.w	r2, #768	; 0x300
 80004fe:	2312      	movs	r3, #18
 8000500:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000504:	2101      	movs	r1, #1
 8000506:	2303      	movs	r3, #3
 8000508:	e9cd 1305 	strd	r1, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800050c:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800050e:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000510:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000512:	f000 f9f1 	bl	80008f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000516:	69e3      	ldr	r3, [r4, #28]
 8000518:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800051c:	61e3      	str	r3, [r4, #28]
 800051e:	69e3      	ldr	r3, [r4, #28]
 8000520:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000524:	9302      	str	r3, [sp, #8]
 8000526:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000528:	b008      	add	sp, #32
 800052a:	bd10      	pop	{r4, pc}
 800052c:	40005400 	.word	0x40005400
 8000530:	40021000 	.word	0x40021000
 8000534:	48000400 	.word	0x48000400

08000538 <HAL_RTC_MspInit>:
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  if(hrtc->Instance==RTC)
 8000538:	6802      	ldr	r2, [r0, #0]
 800053a:	4b07      	ldr	r3, [pc, #28]	; (8000558 <HAL_RTC_MspInit+0x20>)
 800053c:	429a      	cmp	r2, r3
 800053e:	d10a      	bne.n	8000556 <HAL_RTC_MspInit+0x1e>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000540:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000544:	fa92 f2a2 	rbit	r2, r2
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000548:	4b04      	ldr	r3, [pc, #16]	; (800055c <HAL_RTC_MspInit+0x24>)
 800054a:	fab2 f282 	clz	r2, r2
 800054e:	4413      	add	r3, r2
 8000550:	009b      	lsls	r3, r3, #2
 8000552:	2201      	movs	r2, #1
 8000554:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000556:	4770      	bx	lr
 8000558:	40002800 	.word	0x40002800
 800055c:	10908100 	.word	0x10908100

08000560 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000560:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000562:	2214      	movs	r2, #20
{
 8000564:	b08a      	sub	sp, #40	; 0x28
 8000566:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000568:	2100      	movs	r1, #0
 800056a:	eb0d 0002 	add.w	r0, sp, r2
 800056e:	f002 fee7 	bl	8003340 <memset>
  if(huart->Instance==UART4)
 8000572:	6823      	ldr	r3, [r4, #0]
 8000574:	4a25      	ldr	r2, [pc, #148]	; (800060c <HAL_UART_MspInit+0xac>)
 8000576:	4293      	cmp	r3, r2
 8000578:	d123      	bne.n	80005c2 <HAL_UART_MspInit+0x62>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800057a:	4b25      	ldr	r3, [pc, #148]	; (8000610 <HAL_UART_MspInit+0xb0>)
 800057c:	69da      	ldr	r2, [r3, #28]
 800057e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000582:	61da      	str	r2, [r3, #28]
 8000584:	69da      	ldr	r2, [r3, #28]
 8000586:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 800058a:	9201      	str	r2, [sp, #4]
 800058c:	9a01      	ldr	r2, [sp, #4]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800058e:	695a      	ldr	r2, [r3, #20]
 8000590:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000594:	615a      	str	r2, [r3, #20]
 8000596:	695b      	ldr	r3, [r3, #20]
 8000598:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800059c:	9302      	str	r3, [sp, #8]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800059e:	f44f 6040 	mov.w	r0, #3072	; 0xc00
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80005a2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005a4:	2302      	movs	r3, #2
 80005a6:	e9cd 0305 	strd	r0, r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005aa:	2400      	movs	r4, #0
 80005ac:	2303      	movs	r3, #3
 80005ae:	e9cd 4307 	strd	r4, r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005b2:	4818      	ldr	r0, [pc, #96]	; (8000614 <HAL_UART_MspInit+0xb4>)
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 80005b4:	2305      	movs	r3, #5
 80005b6:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005b8:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ba:	f000 f99d 	bl	80008f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80005be:	b00a      	add	sp, #40	; 0x28
 80005c0:	bd10      	pop	{r4, pc}
  else if(huart->Instance==USART2)
 80005c2:	4a15      	ldr	r2, [pc, #84]	; (8000618 <HAL_UART_MspInit+0xb8>)
 80005c4:	4293      	cmp	r3, r2
 80005c6:	d1fa      	bne.n	80005be <HAL_UART_MspInit+0x5e>
    __HAL_RCC_USART2_CLK_ENABLE();
 80005c8:	4b11      	ldr	r3, [pc, #68]	; (8000610 <HAL_UART_MspInit+0xb0>)
 80005ca:	69da      	ldr	r2, [r3, #28]
 80005cc:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80005d0:	61da      	str	r2, [r3, #28]
 80005d2:	69da      	ldr	r2, [r3, #28]
 80005d4:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80005d8:	9203      	str	r2, [sp, #12]
 80005da:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005dc:	695a      	ldr	r2, [r3, #20]
 80005de:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80005e2:	615a      	str	r2, [r3, #20]
 80005e4:	695b      	ldr	r3, [r3, #20]
 80005e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005ea:	9304      	str	r3, [sp, #16]
 80005ec:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005ee:	220c      	movs	r2, #12
 80005f0:	2302      	movs	r3, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005f2:	2100      	movs	r1, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005f8:	2303      	movs	r3, #3
 80005fa:	e9cd 1307 	strd	r1, r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80005fe:	2307      	movs	r3, #7
 8000600:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000602:	a905      	add	r1, sp, #20
 8000604:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000608:	e7d7      	b.n	80005ba <HAL_UART_MspInit+0x5a>
 800060a:	bf00      	nop
 800060c:	40004c00 	.word	0x40004c00
 8000610:	40021000 	.word	0x40021000
 8000614:	48000800 	.word	0x48000800
 8000618:	40004400 	.word	0x40004400

0800061c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800061c:	b507      	push	{r0, r1, r2, lr}
  if(hpcd->Instance==USB)
 800061e:	4b0e      	ldr	r3, [pc, #56]	; (8000658 <HAL_PCD_MspInit+0x3c>)
 8000620:	6802      	ldr	r2, [r0, #0]
 8000622:	429a      	cmp	r2, r3
 8000624:	d115      	bne.n	8000652 <HAL_PCD_MspInit+0x36>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000626:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
    /* USB interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 800062a:	2014      	movs	r0, #20
    __HAL_RCC_USB_CLK_ENABLE();
 800062c:	69da      	ldr	r2, [r3, #28]
 800062e:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000632:	61da      	str	r2, [r3, #28]
 8000634:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 8000636:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 8000638:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800063c:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 800063e:	4611      	mov	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 8000640:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 8000642:	f000 f903 	bl	800084c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 8000646:	2014      	movs	r0, #20
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000648:	b003      	add	sp, #12
 800064a:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 800064e:	f000 b92f 	b.w	80008b0 <HAL_NVIC_EnableIRQ>
}
 8000652:	b003      	add	sp, #12
 8000654:	f85d fb04 	ldr.w	pc, [sp], #4
 8000658:	40005c00 	.word	0x40005c00

0800065c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800065c:	e7fe      	b.n	800065c <NMI_Handler>

0800065e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800065e:	e7fe      	b.n	800065e <HardFault_Handler>

08000660 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000660:	e7fe      	b.n	8000660 <MemManage_Handler>

08000662 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000662:	e7fe      	b.n	8000662 <BusFault_Handler>

08000664 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000664:	e7fe      	b.n	8000664 <UsageFault_Handler>

08000666 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000666:	4770      	bx	lr

08000668 <DebugMon_Handler>:
 8000668:	4770      	bx	lr

0800066a <PendSV_Handler>:
 800066a:	4770      	bx	lr

0800066c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800066c:	f000 b8b6 	b.w	80007dc <HAL_IncTick>

08000670 <USB_LP_CAN_RX0_IRQHandler>:
void USB_LP_CAN_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000670:	4801      	ldr	r0, [pc, #4]	; (8000678 <USB_LP_CAN_RX0_IRQHandler+0x8>)
 8000672:	f000 bd6d 	b.w	8001150 <HAL_PCD_IRQHandler>
 8000676:	bf00      	nop
 8000678:	2000044c 	.word	0x2000044c

0800067c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800067c:	b570      	push	{r4, r5, r6, lr}
 800067e:	460e      	mov	r6, r1
 8000680:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000682:	2500      	movs	r5, #0
 8000684:	42a5      	cmp	r5, r4
 8000686:	db01      	blt.n	800068c <_read+0x10>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8000688:	4620      	mov	r0, r4
 800068a:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 800068c:	f3af 8000 	nop.w
 8000690:	5570      	strb	r0, [r6, r5]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000692:	3501      	adds	r5, #1
 8000694:	e7f6      	b.n	8000684 <_read+0x8>

08000696 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000696:	b570      	push	{r4, r5, r6, lr}
 8000698:	460e      	mov	r6, r1
 800069a:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800069c:	2500      	movs	r5, #0
 800069e:	42a5      	cmp	r5, r4
 80006a0:	db01      	blt.n	80006a6 <_write+0x10>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 80006a2:	4620      	mov	r0, r4
 80006a4:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 80006a6:	5d70      	ldrb	r0, [r6, r5]
 80006a8:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006ac:	3501      	adds	r5, #1
 80006ae:	e7f6      	b.n	800069e <_write+0x8>

080006b0 <_close>:

int _close(int file)
{
	return -1;
}
 80006b0:	f04f 30ff 	mov.w	r0, #4294967295
 80006b4:	4770      	bx	lr

080006b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80006b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006ba:	604b      	str	r3, [r1, #4]
	return 0;
}
 80006bc:	2000      	movs	r0, #0
 80006be:	4770      	bx	lr

080006c0 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80006c0:	2001      	movs	r0, #1
 80006c2:	4770      	bx	lr

080006c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80006c4:	2000      	movs	r0, #0
 80006c6:	4770      	bx	lr

080006c8 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006c8:	4b0b      	ldr	r3, [pc, #44]	; (80006f8 <_sbrk+0x30>)
 80006ca:	6819      	ldr	r1, [r3, #0]
{
 80006cc:	b510      	push	{r4, lr}
 80006ce:	4602      	mov	r2, r0
  if (NULL == __sbrk_heap_end)
 80006d0:	b909      	cbnz	r1, 80006d6 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 80006d2:	490a      	ldr	r1, [pc, #40]	; (80006fc <_sbrk+0x34>)
 80006d4:	6019      	str	r1, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006d6:	6818      	ldr	r0, [r3, #0]
 80006d8:	4909      	ldr	r1, [pc, #36]	; (8000700 <_sbrk+0x38>)
 80006da:	4c0a      	ldr	r4, [pc, #40]	; (8000704 <_sbrk+0x3c>)
 80006dc:	4402      	add	r2, r0
 80006de:	1b09      	subs	r1, r1, r4
 80006e0:	428a      	cmp	r2, r1
 80006e2:	d906      	bls.n	80006f2 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 80006e4:	f002 fe02 	bl	80032ec <__errno>
 80006e8:	230c      	movs	r3, #12
 80006ea:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80006ec:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 80006f0:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 80006f2:	601a      	str	r2, [r3, #0]
  return (void *)prev_heap_end;
 80006f4:	e7fc      	b.n	80006f0 <_sbrk+0x28>
 80006f6:	bf00      	nop
 80006f8:	20000244 	.word	0x20000244
 80006fc:	20000760 	.word	0x20000760
 8000700:	20010000 	.word	0x20010000
 8000704:	00000400 	.word	0x00000400

08000708 <SystemInit>:
  */
void SystemInit(void)
{
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000708:	4a03      	ldr	r2, [pc, #12]	; (8000718 <SystemInit+0x10>)
 800070a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800070e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000712:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000716:	4770      	bx	lr
 8000718:	e000ed00 	.word	0xe000ed00

0800071c <Reset_Handler>:
 800071c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000754 <LoopForever+0x2>
 8000720:	480d      	ldr	r0, [pc, #52]	; (8000758 <LoopForever+0x6>)
 8000722:	490e      	ldr	r1, [pc, #56]	; (800075c <LoopForever+0xa>)
 8000724:	4a0e      	ldr	r2, [pc, #56]	; (8000760 <LoopForever+0xe>)
 8000726:	2300      	movs	r3, #0
 8000728:	e002      	b.n	8000730 <LoopCopyDataInit>

0800072a <CopyDataInit>:
 800072a:	58d4      	ldr	r4, [r2, r3]
 800072c:	50c4      	str	r4, [r0, r3]
 800072e:	3304      	adds	r3, #4

08000730 <LoopCopyDataInit>:
 8000730:	18c4      	adds	r4, r0, r3
 8000732:	428c      	cmp	r4, r1
 8000734:	d3f9      	bcc.n	800072a <CopyDataInit>
 8000736:	4a0b      	ldr	r2, [pc, #44]	; (8000764 <LoopForever+0x12>)
 8000738:	4c0b      	ldr	r4, [pc, #44]	; (8000768 <LoopForever+0x16>)
 800073a:	2300      	movs	r3, #0
 800073c:	e001      	b.n	8000742 <LoopFillZerobss>

0800073e <FillZerobss>:
 800073e:	6013      	str	r3, [r2, #0]
 8000740:	3204      	adds	r2, #4

08000742 <LoopFillZerobss>:
 8000742:	42a2      	cmp	r2, r4
 8000744:	d3fb      	bcc.n	800073e <FillZerobss>
 8000746:	f7ff ffdf 	bl	8000708 <SystemInit>
 800074a:	f002 fdd5 	bl	80032f8 <__libc_init_array>
 800074e:	f7ff fd93 	bl	8000278 <main>

08000752 <LoopForever>:
 8000752:	e7fe      	b.n	8000752 <LoopForever>
 8000754:	20010000 	.word	0x20010000
 8000758:	20000000 	.word	0x20000000
 800075c:	20000228 	.word	0x20000228
 8000760:	08003ed8 	.word	0x08003ed8
 8000764:	20000228 	.word	0x20000228
 8000768:	20000760 	.word	0x20000760

0800076c <ADC1_2_IRQHandler>:
 800076c:	e7fe      	b.n	800076c <ADC1_2_IRQHandler>
	...

08000770 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000770:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000772:	4a0e      	ldr	r2, [pc, #56]	; (80007ac <HAL_InitTick+0x3c>)
 8000774:	4b0e      	ldr	r3, [pc, #56]	; (80007b0 <HAL_InitTick+0x40>)
{
 8000776:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000778:	7818      	ldrb	r0, [r3, #0]
 800077a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800077e:	fbb3 f3f0 	udiv	r3, r3, r0
 8000782:	6810      	ldr	r0, [r2, #0]
 8000784:	fbb0 f0f3 	udiv	r0, r0, r3
 8000788:	f000 f8a0 	bl	80008cc <HAL_SYSTICK_Config>
 800078c:	4604      	mov	r4, r0
 800078e:	b958      	cbnz	r0, 80007a8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000790:	2d0f      	cmp	r5, #15
 8000792:	d809      	bhi.n	80007a8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000794:	4602      	mov	r2, r0
 8000796:	4629      	mov	r1, r5
 8000798:	f04f 30ff 	mov.w	r0, #4294967295
 800079c:	f000 f856 	bl	800084c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007a0:	4b04      	ldr	r3, [pc, #16]	; (80007b4 <HAL_InitTick+0x44>)
 80007a2:	4620      	mov	r0, r4
 80007a4:	601d      	str	r5, [r3, #0]
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
}
 80007a6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80007a8:	2001      	movs	r0, #1
 80007aa:	e7fc      	b.n	80007a6 <HAL_InitTick+0x36>
 80007ac:	20000000 	.word	0x20000000
 80007b0:	20000004 	.word	0x20000004
 80007b4:	20000008 	.word	0x20000008

080007b8 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007b8:	4a07      	ldr	r2, [pc, #28]	; (80007d8 <HAL_Init+0x20>)
{
 80007ba:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007bc:	6813      	ldr	r3, [r2, #0]
 80007be:	f043 0310 	orr.w	r3, r3, #16
 80007c2:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007c4:	2003      	movs	r0, #3
 80007c6:	f000 f82f 	bl	8000828 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80007ca:	2000      	movs	r0, #0
 80007cc:	f7ff ffd0 	bl	8000770 <HAL_InitTick>
  HAL_MspInit();
 80007d0:	f7ff fe64 	bl	800049c <HAL_MspInit>
}
 80007d4:	2000      	movs	r0, #0
 80007d6:	bd08      	pop	{r3, pc}
 80007d8:	40022000 	.word	0x40022000

080007dc <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80007dc:	4a03      	ldr	r2, [pc, #12]	; (80007ec <HAL_IncTick+0x10>)
 80007de:	4b04      	ldr	r3, [pc, #16]	; (80007f0 <HAL_IncTick+0x14>)
 80007e0:	6811      	ldr	r1, [r2, #0]
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	440b      	add	r3, r1
 80007e6:	6013      	str	r3, [r2, #0]
}
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop
 80007ec:	20000738 	.word	0x20000738
 80007f0:	20000004 	.word	0x20000004

080007f4 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 80007f4:	4b01      	ldr	r3, [pc, #4]	; (80007fc <HAL_GetTick+0x8>)
 80007f6:	6818      	ldr	r0, [r3, #0]
}
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	20000738 	.word	0x20000738

08000800 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000800:	b538      	push	{r3, r4, r5, lr}
 8000802:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000804:	f7ff fff6 	bl	80007f4 <HAL_GetTick>
  uint32_t wait = Delay;
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000808:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800080a:	bf1c      	itt	ne
 800080c:	4b05      	ldrne	r3, [pc, #20]	; (8000824 <HAL_Delay+0x24>)
 800080e:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000810:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000812:	bf18      	it	ne
 8000814:	18e4      	addne	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000816:	f7ff ffed 	bl	80007f4 <HAL_GetTick>
 800081a:	1b43      	subs	r3, r0, r5
 800081c:	42a3      	cmp	r3, r4
 800081e:	d3fa      	bcc.n	8000816 <HAL_Delay+0x16>
  {
  }
}
 8000820:	bd38      	pop	{r3, r4, r5, pc}
 8000822:	bf00      	nop
 8000824:	20000004 	.word	0x20000004

08000828 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000828:	4907      	ldr	r1, [pc, #28]	; (8000848 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800082a:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800082c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000830:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000832:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000834:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000838:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800083a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800083c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000840:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000844:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000846:	4770      	bx	lr
 8000848:	e000ed00 	.word	0xe000ed00

0800084c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800084c:	4b16      	ldr	r3, [pc, #88]	; (80008a8 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800084e:	b530      	push	{r4, r5, lr}
 8000850:	68dc      	ldr	r4, [r3, #12]
 8000852:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000856:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800085a:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800085c:	2d04      	cmp	r5, #4
 800085e:	bf28      	it	cs
 8000860:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000862:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000864:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000868:	bf8c      	ite	hi
 800086a:	3c03      	subhi	r4, #3
 800086c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800086e:	fa03 f505 	lsl.w	r5, r3, r5
 8000872:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000876:	40a3      	lsls	r3, r4
 8000878:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800087c:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 800087e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000880:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000884:	bfac      	ite	ge
 8000886:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800088a:	4a08      	ldrlt	r2, [pc, #32]	; (80008ac <HAL_NVIC_SetPriority+0x60>)
 800088c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8000890:	bfb8      	it	lt
 8000892:	f000 000f 	andlt.w	r0, r0, #15
 8000896:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000898:	bfaa      	itet	ge
 800089a:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800089e:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008a0:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80008a4:	bd30      	pop	{r4, r5, pc}
 80008a6:	bf00      	nop
 80008a8:	e000ed00 	.word	0xe000ed00
 80008ac:	e000ed14 	.word	0xe000ed14

080008b0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80008b0:	2800      	cmp	r0, #0
 80008b2:	db08      	blt.n	80008c6 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008b4:	0942      	lsrs	r2, r0, #5
 80008b6:	2301      	movs	r3, #1
 80008b8:	f000 001f 	and.w	r0, r0, #31
 80008bc:	fa03 f000 	lsl.w	r0, r3, r0
 80008c0:	4b01      	ldr	r3, [pc, #4]	; (80008c8 <HAL_NVIC_EnableIRQ+0x18>)
 80008c2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80008c6:	4770      	bx	lr
 80008c8:	e000e100 	.word	0xe000e100

080008cc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008cc:	3801      	subs	r0, #1
 80008ce:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80008d2:	d20a      	bcs.n	80008ea <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008d4:	4b06      	ldr	r3, [pc, #24]	; (80008f0 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008d6:	4a07      	ldr	r2, [pc, #28]	; (80008f4 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008d8:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008da:	21f0      	movs	r1, #240	; 0xf0
 80008dc:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008e0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008e2:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008e4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008e8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80008ea:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	e000e010 	.word	0xe000e010
 80008f4:	e000ed00 	.word	0xe000ed00

080008f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008fc:	f8df 8198 	ldr.w	r8, [pc, #408]	; 8000a98 <HAL_GPIO_Init+0x1a0>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000900:	4c63      	ldr	r4, [pc, #396]	; (8000a90 <HAL_GPIO_Init+0x198>)
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000902:	f8df 9198 	ldr.w	r9, [pc, #408]	; 8000a9c <HAL_GPIO_Init+0x1a4>
  uint32_t position = 0x00u;
 8000906:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000908:	680a      	ldr	r2, [r1, #0]
 800090a:	fa32 f503 	lsrs.w	r5, r2, r3
 800090e:	d102      	bne.n	8000916 <HAL_GPIO_Init+0x1e>
      }
    }

    position++;
  }
}
 8000910:	b003      	add	sp, #12
 8000912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000916:	f04f 0c01 	mov.w	ip, #1
 800091a:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00u)
 800091e:	ea1c 0202 	ands.w	r2, ip, r2
 8000922:	f000 80a6 	beq.w	8000a72 <HAL_GPIO_Init+0x17a>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000926:	684d      	ldr	r5, [r1, #4]
 8000928:	f025 0a10 	bic.w	sl, r5, #16
 800092c:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000930:	2603      	movs	r6, #3
 8000932:	f10a 37ff 	add.w	r7, sl, #4294967295
 8000936:	fa06 f60e 	lsl.w	r6, r6, lr
 800093a:	2f01      	cmp	r7, #1
 800093c:	ea6f 0606 	mvn.w	r6, r6
 8000940:	d811      	bhi.n	8000966 <HAL_GPIO_Init+0x6e>
        temp = GPIOx->OSPEEDR;
 8000942:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000944:	ea07 0b06 	and.w	fp, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000948:	68cf      	ldr	r7, [r1, #12]
 800094a:	fa07 f70e 	lsl.w	r7, r7, lr
 800094e:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->OSPEEDR = temp;
 8000952:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000954:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000956:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800095a:	f3c5 1700 	ubfx	r7, r5, #4, #1
 800095e:	409f      	lsls	r7, r3
 8000960:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->OTYPER = temp;
 8000964:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000966:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000968:	ea07 0c06 	and.w	ip, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800096c:	688f      	ldr	r7, [r1, #8]
 800096e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000972:	ea47 070c 	orr.w	r7, r7, ip
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000976:	f1ba 0f02 	cmp.w	sl, #2
      GPIOx->PUPDR = temp;
 800097a:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800097c:	d116      	bne.n	80009ac <HAL_GPIO_Init+0xb4>
        temp = GPIOx->AFR[position >> 3u];
 800097e:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000982:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000986:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 800098a:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800098e:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000992:	f04f 0c0f 	mov.w	ip, #15
 8000996:	fa0c fc0b 	lsl.w	ip, ip, fp
 800099a:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800099e:	690f      	ldr	r7, [r1, #16]
 80009a0:	fa07 f70b 	lsl.w	r7, r7, fp
 80009a4:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3u] = temp;
 80009a8:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 80009ac:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80009ae:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80009b0:	f005 0703 	and.w	r7, r5, #3
 80009b4:	fa07 fe0e 	lsl.w	lr, r7, lr
 80009b8:	ea4e 0606 	orr.w	r6, lr, r6
      GPIOx->MODER = temp;
 80009bc:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009be:	00ee      	lsls	r6, r5, #3
 80009c0:	d557      	bpl.n	8000a72 <HAL_GPIO_Init+0x17a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009c2:	f8d8 6018 	ldr.w	r6, [r8, #24]
 80009c6:	f046 0601 	orr.w	r6, r6, #1
 80009ca:	f8c8 6018 	str.w	r6, [r8, #24]
 80009ce:	f8d8 6018 	ldr.w	r6, [r8, #24]
 80009d2:	f023 0703 	bic.w	r7, r3, #3
 80009d6:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80009da:	f006 0601 	and.w	r6, r6, #1
 80009de:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 80009e2:	9601      	str	r6, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80009e4:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009e8:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 80009ea:	68be      	ldr	r6, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80009ec:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80009f0:	f04f 0c0f 	mov.w	ip, #15
 80009f4:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80009f8:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80009fc:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a00:	d039      	beq.n	8000a76 <HAL_GPIO_Init+0x17e>
 8000a02:	4e24      	ldr	r6, [pc, #144]	; (8000a94 <HAL_GPIO_Init+0x19c>)
 8000a04:	42b0      	cmp	r0, r6
 8000a06:	d038      	beq.n	8000a7a <HAL_GPIO_Init+0x182>
 8000a08:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000a0c:	42b0      	cmp	r0, r6
 8000a0e:	d036      	beq.n	8000a7e <HAL_GPIO_Init+0x186>
 8000a10:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000a14:	42b0      	cmp	r0, r6
 8000a16:	d034      	beq.n	8000a82 <HAL_GPIO_Init+0x18a>
 8000a18:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000a1c:	42b0      	cmp	r0, r6
 8000a1e:	d032      	beq.n	8000a86 <HAL_GPIO_Init+0x18e>
 8000a20:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000a24:	42b0      	cmp	r0, r6
 8000a26:	d030      	beq.n	8000a8a <HAL_GPIO_Init+0x192>
 8000a28:	4548      	cmp	r0, r9
 8000a2a:	bf0c      	ite	eq
 8000a2c:	2606      	moveq	r6, #6
 8000a2e:	2607      	movne	r6, #7
 8000a30:	fa06 f60e 	lsl.w	r6, r6, lr
 8000a34:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000a38:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 8000a3a:	6826      	ldr	r6, [r4, #0]
        temp &= ~(iocurrent);
 8000a3c:	43d7      	mvns	r7, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a3e:	f415 3f80 	tst.w	r5, #65536	; 0x10000
        temp &= ~(iocurrent);
 8000a42:	bf0c      	ite	eq
 8000a44:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000a46:	4316      	orrne	r6, r2
        EXTI->IMR = temp;
 8000a48:	6026      	str	r6, [r4, #0]
        temp = EXTI->EMR;
 8000a4a:	6866      	ldr	r6, [r4, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a4c:	f415 3f00 	tst.w	r5, #131072	; 0x20000
        temp &= ~(iocurrent);
 8000a50:	bf0c      	ite	eq
 8000a52:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000a54:	4316      	orrne	r6, r2
        EXTI->EMR = temp;
 8000a56:	6066      	str	r6, [r4, #4]
        temp = EXTI->RTSR;
 8000a58:	68a6      	ldr	r6, [r4, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a5a:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
        temp &= ~(iocurrent);
 8000a5e:	bf0c      	ite	eq
 8000a60:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000a62:	4316      	orrne	r6, r2
        EXTI->RTSR = temp;
 8000a64:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR;
 8000a66:	68e6      	ldr	r6, [r4, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a68:	02ad      	lsls	r5, r5, #10
        temp &= ~(iocurrent);
 8000a6a:	bf54      	ite	pl
 8000a6c:	403e      	andpl	r6, r7
          temp |= iocurrent;
 8000a6e:	4316      	orrmi	r6, r2
        EXTI->FTSR = temp;
 8000a70:	60e6      	str	r6, [r4, #12]
    position++;
 8000a72:	3301      	adds	r3, #1
 8000a74:	e748      	b.n	8000908 <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a76:	2600      	movs	r6, #0
 8000a78:	e7da      	b.n	8000a30 <HAL_GPIO_Init+0x138>
 8000a7a:	2601      	movs	r6, #1
 8000a7c:	e7d8      	b.n	8000a30 <HAL_GPIO_Init+0x138>
 8000a7e:	2602      	movs	r6, #2
 8000a80:	e7d6      	b.n	8000a30 <HAL_GPIO_Init+0x138>
 8000a82:	2603      	movs	r6, #3
 8000a84:	e7d4      	b.n	8000a30 <HAL_GPIO_Init+0x138>
 8000a86:	2604      	movs	r6, #4
 8000a88:	e7d2      	b.n	8000a30 <HAL_GPIO_Init+0x138>
 8000a8a:	2605      	movs	r6, #5
 8000a8c:	e7d0      	b.n	8000a30 <HAL_GPIO_Init+0x138>
 8000a8e:	bf00      	nop
 8000a90:	40010400 	.word	0x40010400
 8000a94:	48000400 	.word	0x48000400
 8000a98:	40021000 	.word	0x40021000
 8000a9c:	48001800 	.word	0x48001800

08000aa0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000aa0:	b10a      	cbz	r2, 8000aa6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000aa2:	6181      	str	r1, [r0, #24]
 8000aa4:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000aa6:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8000aa8:	4770      	bx	lr

08000aaa <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8000aaa:	6803      	ldr	r3, [r0, #0]
 8000aac:	699a      	ldr	r2, [r3, #24]
 8000aae:	0791      	lsls	r1, r2, #30
  {
    hi2c->Instance->TXDR = 0x00U;
 8000ab0:	bf44      	itt	mi
 8000ab2:	2200      	movmi	r2, #0
 8000ab4:	629a      	strmi	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000ab6:	699a      	ldr	r2, [r3, #24]
 8000ab8:	07d2      	lsls	r2, r2, #31
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8000aba:	bf5e      	ittt	pl
 8000abc:	699a      	ldrpl	r2, [r3, #24]
 8000abe:	f042 0201 	orrpl.w	r2, r2, #1
 8000ac2:	619a      	strpl	r2, [r3, #24]
  }
}
 8000ac4:	4770      	bx	lr
	...

08000ac8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8000ac8:	b530      	push	{r4, r5, lr}
 8000aca:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8000acc:	6804      	ldr	r4, [r0, #0]
 8000ace:	ea45 4202 	orr.w	r2, r5, r2, lsl #16
 8000ad2:	431a      	orrs	r2, r3
 8000ad4:	4b05      	ldr	r3, [pc, #20]	; (8000aec <I2C_TransferConfig+0x24>)
 8000ad6:	6860      	ldr	r0, [r4, #4]
 8000ad8:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8000adc:	ea43 5355 	orr.w	r3, r3, r5, lsr #21
 8000ae0:	430a      	orrs	r2, r1
 8000ae2:	ea20 0003 	bic.w	r0, r0, r3
 8000ae6:	4302      	orrs	r2, r0
 8000ae8:	6062      	str	r2, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8000aea:	bd30      	pop	{r4, r5, pc}
 8000aec:	03ff63ff 	.word	0x03ff63ff

08000af0 <I2C_IsAcknowledgeFailed>:
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000af0:	6803      	ldr	r3, [r0, #0]
{
 8000af2:	b570      	push	{r4, r5, r6, lr}
 8000af4:	4604      	mov	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000af6:	6998      	ldr	r0, [r3, #24]
 8000af8:	f010 0010 	ands.w	r0, r0, #16
{
 8000afc:	460d      	mov	r5, r1
 8000afe:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000b00:	d116      	bne.n	8000b30 <I2C_IsAcknowledgeFailed+0x40>
}
 8000b02:	bd70      	pop	{r4, r5, r6, pc}
      if (Timeout != HAL_MAX_DELAY)
 8000b04:	1c69      	adds	r1, r5, #1
 8000b06:	d014      	beq.n	8000b32 <I2C_IsAcknowledgeFailed+0x42>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000b08:	f7ff fe74 	bl	80007f4 <HAL_GetTick>
 8000b0c:	1b80      	subs	r0, r0, r6
 8000b0e:	42a8      	cmp	r0, r5
 8000b10:	d800      	bhi.n	8000b14 <I2C_IsAcknowledgeFailed+0x24>
 8000b12:	b96d      	cbnz	r5, 8000b30 <I2C_IsAcknowledgeFailed+0x40>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000b14:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000b16:	f043 0320 	orr.w	r3, r3, #32
 8000b1a:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8000b1c:	2320      	movs	r3, #32
 8000b1e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000b22:	2300      	movs	r3, #0
 8000b24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8000b28:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 8000b2c:	2001      	movs	r0, #1
 8000b2e:	e7e8      	b.n	8000b02 <I2C_IsAcknowledgeFailed+0x12>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000b30:	6823      	ldr	r3, [r4, #0]
 8000b32:	699a      	ldr	r2, [r3, #24]
 8000b34:	0692      	lsls	r2, r2, #26
 8000b36:	d5e5      	bpl.n	8000b04 <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000b38:	2210      	movs	r2, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000b3a:	2520      	movs	r5, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000b3c:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8000b3e:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000b40:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8000b42:	f7ff ffb2 	bl	8000aaa <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8000b46:	6822      	ldr	r2, [r4, #0]
 8000b48:	6853      	ldr	r3, [r2, #4]
 8000b4a:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8000b4e:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8000b52:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8000b56:	f023 0301 	bic.w	r3, r3, #1
 8000b5a:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8000b5c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000b5e:	f043 0304 	orr.w	r3, r3, #4
 8000b62:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8000b64:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
 8000b68:	e7db      	b.n	8000b22 <I2C_IsAcknowledgeFailed+0x32>

08000b6a <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8000b6a:	b570      	push	{r4, r5, r6, lr}
 8000b6c:	4604      	mov	r4, r0
 8000b6e:	460d      	mov	r5, r1
 8000b70:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8000b72:	6823      	ldr	r3, [r4, #0]
 8000b74:	699b      	ldr	r3, [r3, #24]
 8000b76:	075b      	lsls	r3, r3, #29
 8000b78:	d40e      	bmi.n	8000b98 <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8000b7a:	4632      	mov	r2, r6
 8000b7c:	4629      	mov	r1, r5
 8000b7e:	4620      	mov	r0, r4
 8000b80:	f7ff ffb6 	bl	8000af0 <I2C_IsAcknowledgeFailed>
 8000b84:	b9f0      	cbnz	r0, 8000bc4 <I2C_WaitOnRXNEFlagUntilTimeout+0x5a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8000b86:	6823      	ldr	r3, [r4, #0]
 8000b88:	699a      	ldr	r2, [r3, #24]
 8000b8a:	0691      	lsls	r1, r2, #26
 8000b8c:	d51c      	bpl.n	8000bc8 <I2C_WaitOnRXNEFlagUntilTimeout+0x5e>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8000b8e:	699a      	ldr	r2, [r3, #24]
 8000b90:	0752      	lsls	r2, r2, #29
 8000b92:	d503      	bpl.n	8000b9c <I2C_WaitOnRXNEFlagUntilTimeout+0x32>
 8000b94:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8000b96:	b10a      	cbz	r2, 8000b9c <I2C_WaitOnRXNEFlagUntilTimeout+0x32>
        return HAL_OK;
 8000b98:	2000      	movs	r0, #0
}
 8000b9a:	bd70      	pop	{r4, r5, r6, pc}
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000b9c:	2120      	movs	r1, #32
 8000b9e:	61d9      	str	r1, [r3, #28]
        I2C_RESET_CR2(hi2c);
 8000ba0:	685a      	ldr	r2, [r3, #4]
 8000ba2:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8000ba6:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8000baa:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8000bae:	f022 0201 	bic.w	r2, r2, #1
 8000bb2:	605a      	str	r2, [r3, #4]
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8000bb8:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000bbc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8000bc0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8000bc4:	2001      	movs	r0, #1
 8000bc6:	e7e8      	b.n	8000b9a <I2C_WaitOnRXNEFlagUntilTimeout+0x30>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000bc8:	f7ff fe14 	bl	80007f4 <HAL_GetTick>
 8000bcc:	1b80      	subs	r0, r0, r6
 8000bce:	42a8      	cmp	r0, r5
 8000bd0:	d801      	bhi.n	8000bd6 <I2C_WaitOnRXNEFlagUntilTimeout+0x6c>
 8000bd2:	2d00      	cmp	r5, #0
 8000bd4:	d1cd      	bne.n	8000b72 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000bd6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000bd8:	f043 0320 	orr.w	r3, r3, #32
 8000bdc:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8000bde:	2320      	movs	r3, #32
 8000be0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      __HAL_UNLOCK(hi2c);
 8000be4:	2300      	movs	r3, #0
 8000be6:	e7eb      	b.n	8000bc0 <I2C_WaitOnRXNEFlagUntilTimeout+0x56>

08000be8 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8000be8:	b570      	push	{r4, r5, r6, lr}
 8000bea:	4604      	mov	r4, r0
 8000bec:	460d      	mov	r5, r1
 8000bee:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000bf0:	6823      	ldr	r3, [r4, #0]
 8000bf2:	699b      	ldr	r3, [r3, #24]
 8000bf4:	069b      	lsls	r3, r3, #26
 8000bf6:	d501      	bpl.n	8000bfc <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8000bf8:	2000      	movs	r0, #0
}
 8000bfa:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8000bfc:	4632      	mov	r2, r6
 8000bfe:	4629      	mov	r1, r5
 8000c00:	4620      	mov	r0, r4
 8000c02:	f7ff ff75 	bl	8000af0 <I2C_IsAcknowledgeFailed>
 8000c06:	b990      	cbnz	r0, 8000c2e <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000c08:	f7ff fdf4 	bl	80007f4 <HAL_GetTick>
 8000c0c:	1b80      	subs	r0, r0, r6
 8000c0e:	42a8      	cmp	r0, r5
 8000c10:	d801      	bhi.n	8000c16 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 8000c12:	2d00      	cmp	r5, #0
 8000c14:	d1ec      	bne.n	8000bf0 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000c16:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000c18:	f043 0320 	orr.w	r3, r3, #32
 8000c1c:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8000c1e:	2320      	movs	r3, #32
 8000c20:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8000c24:	2300      	movs	r3, #0
 8000c26:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 8000c2a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8000c2e:	2001      	movs	r0, #1
 8000c30:	e7e3      	b.n	8000bfa <I2C_WaitOnSTOPFlagUntilTimeout+0x12>

08000c32 <I2C_WaitOnFlagUntilTimeout>:
{
 8000c32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c36:	9f06      	ldr	r7, [sp, #24]
 8000c38:	4604      	mov	r4, r0
 8000c3a:	4688      	mov	r8, r1
 8000c3c:	4616      	mov	r6, r2
 8000c3e:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000c40:	6822      	ldr	r2, [r4, #0]
 8000c42:	6993      	ldr	r3, [r2, #24]
 8000c44:	ea38 0303 	bics.w	r3, r8, r3
 8000c48:	bf0c      	ite	eq
 8000c4a:	2301      	moveq	r3, #1
 8000c4c:	2300      	movne	r3, #0
 8000c4e:	42b3      	cmp	r3, r6
 8000c50:	d001      	beq.n	8000c56 <I2C_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 8000c52:	2000      	movs	r0, #0
 8000c54:	e015      	b.n	8000c82 <I2C_WaitOnFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8000c56:	1c6b      	adds	r3, r5, #1
 8000c58:	d0f3      	beq.n	8000c42 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000c5a:	f7ff fdcb 	bl	80007f4 <HAL_GetTick>
 8000c5e:	1bc0      	subs	r0, r0, r7
 8000c60:	42a8      	cmp	r0, r5
 8000c62:	d801      	bhi.n	8000c68 <I2C_WaitOnFlagUntilTimeout+0x36>
 8000c64:	2d00      	cmp	r5, #0
 8000c66:	d1eb      	bne.n	8000c40 <I2C_WaitOnFlagUntilTimeout+0xe>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000c68:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000c6a:	f043 0320 	orr.w	r3, r3, #32
 8000c6e:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8000c70:	2320      	movs	r3, #32
 8000c72:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8000c76:	2300      	movs	r3, #0
 8000c78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 8000c7c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8000c80:	2001      	movs	r0, #1
}
 8000c82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000c86 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8000c86:	b570      	push	{r4, r5, r6, lr}
 8000c88:	4604      	mov	r4, r0
 8000c8a:	460d      	mov	r5, r1
 8000c8c:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8000c8e:	6823      	ldr	r3, [r4, #0]
 8000c90:	699b      	ldr	r3, [r3, #24]
 8000c92:	079b      	lsls	r3, r3, #30
 8000c94:	d501      	bpl.n	8000c9a <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 8000c96:	2000      	movs	r0, #0
}
 8000c98:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8000c9a:	4632      	mov	r2, r6
 8000c9c:	4629      	mov	r1, r5
 8000c9e:	4620      	mov	r0, r4
 8000ca0:	f7ff ff26 	bl	8000af0 <I2C_IsAcknowledgeFailed>
 8000ca4:	b9a0      	cbnz	r0, 8000cd0 <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 8000ca6:	1c6a      	adds	r2, r5, #1
 8000ca8:	d0f1      	beq.n	8000c8e <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000caa:	f7ff fda3 	bl	80007f4 <HAL_GetTick>
 8000cae:	1b80      	subs	r0, r0, r6
 8000cb0:	42a8      	cmp	r0, r5
 8000cb2:	d801      	bhi.n	8000cb8 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8000cb4:	2d00      	cmp	r5, #0
 8000cb6:	d1ea      	bne.n	8000c8e <I2C_WaitOnTXISFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000cb8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000cba:	f043 0320 	orr.w	r3, r3, #32
 8000cbe:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8000cc0:	2320      	movs	r3, #32
 8000cc2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 8000ccc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8000cd0:	2001      	movs	r0, #1
 8000cd2:	e7e1      	b.n	8000c98 <I2C_WaitOnTXISFlagUntilTimeout+0x12>

08000cd4 <HAL_I2C_Init>:
{
 8000cd4:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8000cd6:	4604      	mov	r4, r0
 8000cd8:	2800      	cmp	r0, #0
 8000cda:	d04a      	beq.n	8000d72 <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000cdc:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8000ce0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000ce4:	b91b      	cbnz	r3, 8000cee <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8000ce6:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8000cea:	f7ff fbef 	bl	80004cc <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000cee:	2324      	movs	r3, #36	; 0x24
 8000cf0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8000cf4:	6823      	ldr	r3, [r4, #0]
 8000cf6:	681a      	ldr	r2, [r3, #0]
 8000cf8:	f022 0201 	bic.w	r2, r2, #1
 8000cfc:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000cfe:	6862      	ldr	r2, [r4, #4]
 8000d00:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000d04:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000d06:	689a      	ldr	r2, [r3, #8]
 8000d08:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000d0c:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000d0e:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8000d12:	2901      	cmp	r1, #1
 8000d14:	d124      	bne.n	8000d60 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000d16:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000d1a:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000d1c:	685a      	ldr	r2, [r3, #4]
 8000d1e:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8000d22:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000d26:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000d28:	68da      	ldr	r2, [r3, #12]
 8000d2a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000d2e:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000d30:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 8000d34:	430a      	orrs	r2, r1
 8000d36:	69a1      	ldr	r1, [r4, #24]
 8000d38:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000d3c:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000d3e:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 8000d42:	430a      	orrs	r2, r1
 8000d44:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	f042 0201 	orr.w	r2, r2, #1
 8000d4c:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000d4e:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8000d50:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000d52:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000d54:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000d58:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000d5a:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8000d5e:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000d60:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000d64:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000d66:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000d68:	bf04      	itt	eq
 8000d6a:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 8000d6e:	605a      	streq	r2, [r3, #4]
 8000d70:	e7d4      	b.n	8000d1c <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8000d72:	2001      	movs	r0, #1
 8000d74:	e7f3      	b.n	8000d5e <HAL_I2C_Init+0x8a>
	...

08000d78 <HAL_I2C_Master_Transmit>:
{
 8000d78:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8000d7c:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000d7e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8000d82:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000d84:	2b20      	cmp	r3, #32
{
 8000d86:	4604      	mov	r4, r0
 8000d88:	460e      	mov	r6, r1
 8000d8a:	4691      	mov	r9, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000d8c:	f040 8086 	bne.w	8000e9c <HAL_I2C_Master_Transmit+0x124>
    __HAL_LOCK(hi2c);
 8000d90:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000d94:	2b01      	cmp	r3, #1
 8000d96:	f000 8081 	beq.w	8000e9c <HAL_I2C_Master_Transmit+0x124>
 8000d9a:	f04f 0a01 	mov.w	sl, #1
 8000d9e:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8000da2:	f7ff fd27 	bl	80007f4 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000da6:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 8000da8:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000daa:	9000      	str	r0, [sp, #0]
 8000dac:	4652      	mov	r2, sl
 8000dae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000db2:	4620      	mov	r0, r4
 8000db4:	f7ff ff3d 	bl	8000c32 <I2C_WaitOnFlagUntilTimeout>
 8000db8:	b118      	cbz	r0, 8000dc2 <HAL_I2C_Master_Transmit+0x4a>
      return HAL_ERROR;
 8000dba:	2001      	movs	r0, #1
}
 8000dbc:	b002      	add	sp, #8
 8000dbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000dc2:	2321      	movs	r3, #33	; 0x21
 8000dc4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8000dc8:	2310      	movs	r3, #16
 8000dca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000dce:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 8000dd0:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000dd4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr  = pData;
 8000dd6:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000dda:	b29b      	uxth	r3, r3
 8000ddc:	2bff      	cmp	r3, #255	; 0xff
    hi2c->XferISR   = NULL;
 8000dde:	6360      	str	r0, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000de0:	4b2f      	ldr	r3, [pc, #188]	; (8000ea0 <HAL_I2C_Master_Transmit+0x128>)
 8000de2:	d926      	bls.n	8000e32 <HAL_I2C_Master_Transmit+0xba>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000de4:	22ff      	movs	r2, #255	; 0xff
 8000de6:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8000de8:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000dea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000dee:	4631      	mov	r1, r6
 8000df0:	4620      	mov	r0, r4
 8000df2:	f7ff fe69 	bl	8000ac8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8000df6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000df8:	b29b      	uxth	r3, r3
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000dfa:	462a      	mov	r2, r5
 8000dfc:	4639      	mov	r1, r7
 8000dfe:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 8000e00:	b9fb      	cbnz	r3, 8000e42 <HAL_I2C_Master_Transmit+0xca>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000e02:	f7ff fef1 	bl	8000be8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8000e06:	2800      	cmp	r0, #0
 8000e08:	d1d7      	bne.n	8000dba <HAL_I2C_Master_Transmit+0x42>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000e0a:	6823      	ldr	r3, [r4, #0]
 8000e0c:	2120      	movs	r1, #32
 8000e0e:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8000e10:	685a      	ldr	r2, [r3, #4]
 8000e12:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8000e16:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8000e1a:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8000e1e:	f022 0201 	bic.w	r2, r2, #1
 8000e22:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8000e24:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8000e28:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8000e2c:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8000e30:	e7c4      	b.n	8000dbc <HAL_I2C_Master_Transmit+0x44>
      hi2c->XferSize = hi2c->XferCount;
 8000e32:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8000e34:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8000e36:	b292      	uxth	r2, r2
 8000e38:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000e3a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000e3e:	b2d2      	uxtb	r2, r2
 8000e40:	e7d5      	b.n	8000dee <HAL_I2C_Master_Transmit+0x76>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000e42:	f7ff ff20 	bl	8000c86 <I2C_WaitOnTXISFlagUntilTimeout>
 8000e46:	2800      	cmp	r0, #0
 8000e48:	d1b7      	bne.n	8000dba <HAL_I2C_Master_Transmit+0x42>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8000e4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000e4c:	6822      	ldr	r2, [r4, #0]
 8000e4e:	f813 1b01 	ldrb.w	r1, [r3], #1
 8000e52:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8000e54:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8000e56:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8000e58:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8000e5a:	3b01      	subs	r3, #1
 8000e5c:	b29b      	uxth	r3, r3
 8000e5e:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000e60:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8000e62:	3a01      	subs	r2, #1
 8000e64:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000e66:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8000e68:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d0c3      	beq.n	8000df6 <HAL_I2C_Master_Transmit+0x7e>
 8000e6e:	2a00      	cmp	r2, #0
 8000e70:	d1c1      	bne.n	8000df6 <HAL_I2C_Master_Transmit+0x7e>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000e72:	9500      	str	r5, [sp, #0]
 8000e74:	463b      	mov	r3, r7
 8000e76:	2180      	movs	r1, #128	; 0x80
 8000e78:	4620      	mov	r0, r4
 8000e7a:	f7ff feda 	bl	8000c32 <I2C_WaitOnFlagUntilTimeout>
 8000e7e:	2800      	cmp	r0, #0
 8000e80:	d19b      	bne.n	8000dba <HAL_I2C_Master_Transmit+0x42>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000e82:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000e84:	b29b      	uxth	r3, r3
 8000e86:	2bff      	cmp	r3, #255	; 0xff
 8000e88:	d903      	bls.n	8000e92 <HAL_I2C_Master_Transmit+0x11a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000e8a:	22ff      	movs	r2, #255	; 0xff
 8000e8c:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000e8e:	9000      	str	r0, [sp, #0]
 8000e90:	e7ab      	b.n	8000dea <HAL_I2C_Master_Transmit+0x72>
          hi2c->XferSize = hi2c->XferCount;
 8000e92:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000e94:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8000e96:	b292      	uxth	r2, r2
 8000e98:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000e9a:	e7ce      	b.n	8000e3a <HAL_I2C_Master_Transmit+0xc2>
    return HAL_BUSY;
 8000e9c:	2002      	movs	r0, #2
 8000e9e:	e78d      	b.n	8000dbc <HAL_I2C_Master_Transmit+0x44>
 8000ea0:	80002000 	.word	0x80002000

08000ea4 <HAL_I2C_Master_Receive>:
{
 8000ea4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8000ea8:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000eaa:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8000eae:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000eb0:	2b20      	cmp	r3, #32
{
 8000eb2:	4604      	mov	r4, r0
 8000eb4:	460e      	mov	r6, r1
 8000eb6:	4691      	mov	r9, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000eb8:	f040 8087 	bne.w	8000fca <HAL_I2C_Master_Receive+0x126>
    __HAL_LOCK(hi2c);
 8000ebc:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000ec0:	2b01      	cmp	r3, #1
 8000ec2:	f000 8082 	beq.w	8000fca <HAL_I2C_Master_Receive+0x126>
 8000ec6:	f04f 0a01 	mov.w	sl, #1
 8000eca:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8000ece:	f7ff fc91 	bl	80007f4 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000ed2:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 8000ed4:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000ed6:	9000      	str	r0, [sp, #0]
 8000ed8:	4652      	mov	r2, sl
 8000eda:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ede:	4620      	mov	r0, r4
 8000ee0:	f7ff fea7 	bl	8000c32 <I2C_WaitOnFlagUntilTimeout>
 8000ee4:	b118      	cbz	r0, 8000eee <HAL_I2C_Master_Receive+0x4a>
      return HAL_ERROR;
 8000ee6:	2001      	movs	r0, #1
}
 8000ee8:	b002      	add	sp, #8
 8000eea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8000eee:	2322      	movs	r3, #34	; 0x22
 8000ef0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8000ef4:	2310      	movs	r3, #16
 8000ef6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000efa:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 8000efc:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000f00:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr  = pData;
 8000f02:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000f06:	b29b      	uxth	r3, r3
 8000f08:	2bff      	cmp	r3, #255	; 0xff
    hi2c->XferISR   = NULL;
 8000f0a:	6360      	str	r0, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000f0c:	4b30      	ldr	r3, [pc, #192]	; (8000fd0 <HAL_I2C_Master_Receive+0x12c>)
 8000f0e:	d926      	bls.n	8000f5e <HAL_I2C_Master_Receive+0xba>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000f10:	22ff      	movs	r2, #255	; 0xff
 8000f12:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8000f14:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000f16:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000f1a:	4631      	mov	r1, r6
 8000f1c:	4620      	mov	r0, r4
 8000f1e:	f7ff fdd3 	bl	8000ac8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8000f22:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000f24:	b29b      	uxth	r3, r3
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000f26:	462a      	mov	r2, r5
 8000f28:	4639      	mov	r1, r7
 8000f2a:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 8000f2c:	b9fb      	cbnz	r3, 8000f6e <HAL_I2C_Master_Receive+0xca>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000f2e:	f7ff fe5b 	bl	8000be8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8000f32:	2800      	cmp	r0, #0
 8000f34:	d1d7      	bne.n	8000ee6 <HAL_I2C_Master_Receive+0x42>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000f36:	6823      	ldr	r3, [r4, #0]
 8000f38:	2120      	movs	r1, #32
 8000f3a:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8000f3c:	685a      	ldr	r2, [r3, #4]
 8000f3e:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8000f42:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8000f46:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8000f4a:	f022 0201 	bic.w	r2, r2, #1
 8000f4e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8000f50:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8000f54:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8000f58:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8000f5c:	e7c4      	b.n	8000ee8 <HAL_I2C_Master_Receive+0x44>
      hi2c->XferSize = hi2c->XferCount;
 8000f5e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8000f60:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8000f62:	b292      	uxth	r2, r2
 8000f64:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000f66:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000f6a:	b2d2      	uxtb	r2, r2
 8000f6c:	e7d5      	b.n	8000f1a <HAL_I2C_Master_Receive+0x76>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000f6e:	f7ff fdfc 	bl	8000b6a <I2C_WaitOnRXNEFlagUntilTimeout>
 8000f72:	2800      	cmp	r0, #0
 8000f74:	d1b7      	bne.n	8000ee6 <HAL_I2C_Master_Receive+0x42>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8000f76:	6823      	ldr	r3, [r4, #0]
 8000f78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000f7c:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8000f7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8000f80:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8000f82:	3301      	adds	r3, #1
 8000f84:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8000f86:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000f88:	3b01      	subs	r3, #1
 8000f8a:	b29b      	uxth	r3, r3
 8000f8c:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000f8e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8000f90:	3a01      	subs	r2, #1
 8000f92:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000f94:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8000f96:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d0c2      	beq.n	8000f22 <HAL_I2C_Master_Receive+0x7e>
 8000f9c:	2a00      	cmp	r2, #0
 8000f9e:	d1c0      	bne.n	8000f22 <HAL_I2C_Master_Receive+0x7e>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000fa0:	9500      	str	r5, [sp, #0]
 8000fa2:	463b      	mov	r3, r7
 8000fa4:	2180      	movs	r1, #128	; 0x80
 8000fa6:	4620      	mov	r0, r4
 8000fa8:	f7ff fe43 	bl	8000c32 <I2C_WaitOnFlagUntilTimeout>
 8000fac:	2800      	cmp	r0, #0
 8000fae:	d19a      	bne.n	8000ee6 <HAL_I2C_Master_Receive+0x42>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000fb0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000fb2:	b29b      	uxth	r3, r3
 8000fb4:	2bff      	cmp	r3, #255	; 0xff
 8000fb6:	d903      	bls.n	8000fc0 <HAL_I2C_Master_Receive+0x11c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000fb8:	22ff      	movs	r2, #255	; 0xff
 8000fba:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000fbc:	9000      	str	r0, [sp, #0]
 8000fbe:	e7aa      	b.n	8000f16 <HAL_I2C_Master_Receive+0x72>
          hi2c->XferSize = hi2c->XferCount;
 8000fc0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000fc2:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8000fc4:	b292      	uxth	r2, r2
 8000fc6:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000fc8:	e7cd      	b.n	8000f66 <HAL_I2C_Master_Receive+0xc2>
    return HAL_BUSY;
 8000fca:	2002      	movs	r0, #2
 8000fcc:	e78c      	b.n	8000ee8 <HAL_I2C_Master_Receive+0x44>
 8000fce:	bf00      	nop
 8000fd0:	80002400 	.word	0x80002400

08000fd4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8000fd4:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000fd6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8000fda:	2b20      	cmp	r3, #32
 8000fdc:	b2dc      	uxtb	r4, r3
 8000fde:	d11d      	bne.n	800101c <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000fe0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d019      	beq.n	800101c <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000fe8:	2324      	movs	r3, #36	; 0x24
 8000fea:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000fee:	6803      	ldr	r3, [r0, #0]
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	f022 0201 	bic.w	r2, r2, #1
 8000ff6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000ffe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	4311      	orrs	r1, r2
 8001004:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	f042 0201 	orr.w	r2, r2, #1
 800100c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800100e:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8001010:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001014:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8001018:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 800101a:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 800101c:	2002      	movs	r0, #2
 800101e:	e7fc      	b.n	800101a <HAL_I2CEx_ConfigAnalogFilter+0x46>

08001020 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001020:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001022:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001026:	2b20      	cmp	r3, #32
 8001028:	b2dc      	uxtb	r4, r3
 800102a:	d11c      	bne.n	8001066 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800102c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001030:	2b01      	cmp	r3, #1
 8001032:	d018      	beq.n	8001066 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001034:	2324      	movs	r3, #36	; 0x24
 8001036:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800103a:	6803      	ldr	r3, [r0, #0]
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	f022 0201 	bic.w	r2, r2, #1
 8001042:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001044:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001046:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800104a:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800104e:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	f042 0201 	orr.w	r2, r2, #1
 8001056:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001058:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800105a:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800105e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8001062:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8001064:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8001066:	2002      	movs	r0, #2
 8001068:	e7fc      	b.n	8001064 <HAL_I2CEx_ConfigDigitalFilter+0x44>

0800106a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800106a:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800106c:	4604      	mov	r4, r0
{
 800106e:	b087      	sub	sp, #28
  if (hpcd == NULL)
 8001070:	2800      	cmp	r0, #0
 8001072:	d04f      	beq.n	8001114 <HAL_PCD_Init+0xaa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001074:	f890 32a9 	ldrb.w	r3, [r0, #681]	; 0x2a9
 8001078:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800107c:	b91b      	cbnz	r3, 8001086 <HAL_PCD_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800107e:	f880 22a8 	strb.w	r2, [r0, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001082:	f7ff facb 	bl	800061c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001086:	2303      	movs	r3, #3
 8001088:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800108c:	6820      	ldr	r0, [r4, #0]
 800108e:	f001 fc28 	bl	80028e2 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001092:	2300      	movs	r3, #0
 8001094:	6865      	ldr	r5, [r4, #4]
 8001096:	2628      	movs	r6, #40	; 0x28
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001098:	2701      	movs	r7, #1
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800109a:	4618      	mov	r0, r3
 800109c:	b2d9      	uxtb	r1, r3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800109e:	428d      	cmp	r5, r1
 80010a0:	f103 0201 	add.w	r2, r3, #1
 80010a4:	d81b      	bhi.n	80010de <HAL_PCD_Init+0x74>
 80010a6:	2300      	movs	r3, #0
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80010a8:	2628      	movs	r6, #40	; 0x28
 80010aa:	4619      	mov	r1, r3
 80010ac:	b2d8      	uxtb	r0, r3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010ae:	4285      	cmp	r5, r0
 80010b0:	f103 0301 	add.w	r3, r3, #1
 80010b4:	d821      	bhi.n	80010fa <HAL_PCD_Init+0x90>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80010b6:	f104 0610 	add.w	r6, r4, #16
 80010ba:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80010bc:	466d      	mov	r5, sp
 80010be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010c0:	6833      	ldr	r3, [r6, #0]
 80010c2:	602b      	str	r3, [r5, #0]
 80010c4:	1d23      	adds	r3, r4, #4
 80010c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010c8:	6820      	ldr	r0, [r4, #0]
 80010ca:	f001 fc14 	bl	80028f6 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80010ce:	2000      	movs	r0, #0
  hpcd->State = HAL_PCD_STATE_READY;
 80010d0:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 80010d2:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80010d6:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  return HAL_OK;
}
 80010da:	b007      	add	sp, #28
 80010dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->IN_ep[i].is_in = 1U;
 80010de:	fb06 4301 	mla	r3, r6, r1, r4
    hpcd->IN_ep[i].xfer_buff = 0U;
 80010e2:	e9c3 000e 	strd	r0, r0, [r3, #56]	; 0x38
    hpcd->IN_ep[i].is_in = 1U;
 80010e6:	f883 7029 	strb.w	r7, [r3, #41]	; 0x29
    hpcd->IN_ep[i].num = i;
 80010ea:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
    hpcd->IN_ep[i].tx_fifo_num = i;
 80010ee:	86d9      	strh	r1, [r3, #54]	; 0x36
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80010f0:	f883 002b 	strb.w	r0, [r3, #43]	; 0x2b
    hpcd->IN_ep[i].xfer_len = 0U;
 80010f4:	6418      	str	r0, [r3, #64]	; 0x40
 80010f6:	4613      	mov	r3, r2
 80010f8:	e7d0      	b.n	800109c <HAL_PCD_Init+0x32>
    hpcd->OUT_ep[i].is_in = 0U;
 80010fa:	fb06 4200 	mla	r2, r6, r0, r4
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80010fe:	e9c2 115e 	strd	r1, r1, [r2, #376]	; 0x178
    hpcd->OUT_ep[i].is_in = 0U;
 8001102:	f882 1169 	strb.w	r1, [r2, #361]	; 0x169
    hpcd->OUT_ep[i].num = i;
 8001106:	f882 0168 	strb.w	r0, [r2, #360]	; 0x168
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800110a:	f882 116b 	strb.w	r1, [r2, #363]	; 0x16b
    hpcd->OUT_ep[i].xfer_len = 0U;
 800110e:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001112:	e7cb      	b.n	80010ac <HAL_PCD_Init+0x42>
    return HAL_ERROR;
 8001114:	2001      	movs	r0, #1
 8001116:	e7e0      	b.n	80010da <HAL_PCD_Init+0x70>

08001118 <HAL_PCD_DataOutStageCallback>:
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataOutStageCallback could be implemented in the user file
   */
}
 8001118:	4770      	bx	lr

0800111a <HAL_PCD_DataInStageCallback>:
 800111a:	4770      	bx	lr

0800111c <HAL_PCD_SetupStageCallback>:
 800111c:	4770      	bx	lr

0800111e <HAL_PCD_SOFCallback>:
 800111e:	4770      	bx	lr

08001120 <HAL_PCD_ResetCallback>:
 8001120:	4770      	bx	lr

08001122 <HAL_PCD_SuspendCallback>:
 8001122:	4770      	bx	lr

08001124 <HAL_PCD_ResumeCallback>:
 8001124:	4770      	bx	lr

08001126 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001126:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8001128:	f890 22a8 	ldrb.w	r2, [r0, #680]	; 0x2a8
 800112c:	2a01      	cmp	r2, #1
{
 800112e:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8001130:	d00b      	beq.n	800114a <HAL_PCD_SetAddress+0x24>
 8001132:	2201      	movs	r2, #1
 8001134:	f880 22a8 	strb.w	r2, [r0, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001138:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800113c:	6800      	ldr	r0, [r0, #0]
 800113e:	f001 fbee 	bl	800291e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001142:	2000      	movs	r0, #0
 8001144:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8

  return HAL_OK;
}
 8001148:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800114a:	2002      	movs	r0, #2
 800114c:	e7fc      	b.n	8001148 <HAL_PCD_SetAddress+0x22>
	...

08001150 <HAL_PCD_IRQHandler>:
{
 8001150:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001154:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001156:	6800      	ldr	r0, [r0, #0]
 8001158:	f001 fbe7 	bl	800292a <USB_ReadInterrupts>
 800115c:	0402      	lsls	r2, r0, #16
 800115e:	d509      	bpl.n	8001174 <HAL_PCD_IRQHandler+0x24>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
      {
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001160:	f8df a7f4 	ldr.w	sl, [pc, #2036]	; 8001958 <HAL_PCD_IRQHandler+0x808>
 8001164:	f8df 97f4 	ldr.w	r9, [pc, #2036]	; 800195c <HAL_PCD_IRQHandler+0x80c>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001168:	6820      	ldr	r0, [r4, #0]
 800116a:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 800116e:	041f      	lsls	r7, r3, #16
 8001170:	f100 8093 	bmi.w	800129a <HAL_PCD_IRQHandler+0x14a>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001174:	6820      	ldr	r0, [r4, #0]
 8001176:	f001 fbd8 	bl	800292a <USB_ReadInterrupts>
 800117a:	0543      	lsls	r3, r0, #21
 800117c:	d50f      	bpl.n	800119e <HAL_PCD_IRQHandler+0x4e>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800117e:	6822      	ldr	r2, [r4, #0]
 8001180:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001184:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001188:	041b      	lsls	r3, r3, #16
 800118a:	0c1b      	lsrs	r3, r3, #16
    HAL_PCD_ResetCallback(hpcd);
 800118c:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800118e:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8001192:	f7ff ffc5 	bl	8001120 <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001196:	2100      	movs	r1, #0
 8001198:	4620      	mov	r0, r4
 800119a:	f7ff ffc4 	bl	8001126 <HAL_PCD_SetAddress>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800119e:	6820      	ldr	r0, [r4, #0]
 80011a0:	f001 fbc3 	bl	800292a <USB_ReadInterrupts>
 80011a4:	0446      	lsls	r6, r0, #17
 80011a6:	d508      	bpl.n	80011ba <HAL_PCD_IRQHandler+0x6a>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80011a8:	6822      	ldr	r2, [r4, #0]
 80011aa:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80011ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80011b2:	041b      	lsls	r3, r3, #16
 80011b4:	0c1b      	lsrs	r3, r3, #16
 80011b6:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80011ba:	6820      	ldr	r0, [r4, #0]
 80011bc:	f001 fbb5 	bl	800292a <USB_ReadInterrupts>
 80011c0:	0485      	lsls	r5, r0, #18
 80011c2:	d508      	bpl.n	80011d6 <HAL_PCD_IRQHandler+0x86>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80011c4:	6822      	ldr	r2, [r4, #0]
 80011c6:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80011ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80011ce:	041b      	lsls	r3, r3, #16
 80011d0:	0c1b      	lsrs	r3, r3, #16
 80011d2:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80011d6:	6820      	ldr	r0, [r4, #0]
 80011d8:	f001 fba7 	bl	800292a <USB_ReadInterrupts>
 80011dc:	04c0      	lsls	r0, r0, #19
 80011de:	d51c      	bpl.n	800121a <HAL_PCD_IRQHandler+0xca>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80011e0:	6822      	ldr	r2, [r4, #0]
 80011e2:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80011e6:	f023 0304 	bic.w	r3, r3, #4
 80011ea:	041b      	lsls	r3, r3, #16
 80011ec:	0c1b      	lsrs	r3, r3, #16
 80011ee:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80011f2:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80011f6:	f023 0308 	bic.w	r3, r3, #8
 80011fa:	041b      	lsls	r3, r3, #16
 80011fc:	0c1b      	lsrs	r3, r3, #16
 80011fe:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 8001202:	4620      	mov	r0, r4
 8001204:	f7ff ff8e 	bl	8001124 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001208:	6822      	ldr	r2, [r4, #0]
 800120a:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800120e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001212:	041b      	lsls	r3, r3, #16
 8001214:	0c1b      	lsrs	r3, r3, #16
 8001216:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800121a:	6820      	ldr	r0, [r4, #0]
 800121c:	f001 fb85 	bl	800292a <USB_ReadInterrupts>
 8001220:	0501      	lsls	r1, r0, #20
 8001222:	d519      	bpl.n	8001258 <HAL_PCD_IRQHandler+0x108>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001224:	6822      	ldr	r2, [r4, #0]
 8001226:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 800122a:	b29b      	uxth	r3, r3
 800122c:	f043 0308 	orr.w	r3, r3, #8
 8001230:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001234:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001238:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800123c:	041b      	lsls	r3, r3, #16
 800123e:	0c1b      	lsrs	r3, r3, #16
 8001240:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001244:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8001248:	b29b      	uxth	r3, r3
 800124a:	f043 0304 	orr.w	r3, r3, #4
 800124e:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 8001252:	4620      	mov	r0, r4
 8001254:	f7ff ff65 	bl	8001122 <HAL_PCD_SuspendCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001258:	6820      	ldr	r0, [r4, #0]
 800125a:	f001 fb66 	bl	800292a <USB_ReadInterrupts>
 800125e:	0582      	lsls	r2, r0, #22
 8001260:	d50b      	bpl.n	800127a <HAL_PCD_IRQHandler+0x12a>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001262:	6822      	ldr	r2, [r4, #0]
 8001264:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001268:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800126c:	041b      	lsls	r3, r3, #16
 800126e:	0c1b      	lsrs	r3, r3, #16
 8001270:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8001274:	4620      	mov	r0, r4
 8001276:	f7ff ff52 	bl	800111e <HAL_PCD_SOFCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800127a:	6820      	ldr	r0, [r4, #0]
 800127c:	f001 fb55 	bl	800292a <USB_ReadInterrupts>
 8001280:	05c3      	lsls	r3, r0, #23
 8001282:	d508      	bpl.n	8001296 <HAL_PCD_IRQHandler+0x146>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001284:	6822      	ldr	r2, [r4, #0]
 8001286:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800128a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800128e:	041b      	lsls	r3, r3, #16
 8001290:	0c1b      	lsrs	r3, r3, #16
 8001292:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 8001296:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    wIstr = hpcd->Instance->ISTR;
 800129a:	f8b0 6044 	ldrh.w	r6, [r0, #68]	; 0x44
 800129e:	b2b1      	uxth	r1, r6
    if (epindex == 0U)
 80012a0:	f016 060f 	ands.w	r6, r6, #15
 80012a4:	f040 80b6 	bne.w	8001414 <HAL_PCD_IRQHandler+0x2c4>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80012a8:	f011 0110 	ands.w	r1, r1, #16
 80012ac:	d12c      	bne.n	8001308 <HAL_PCD_IRQHandler+0x1b8>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80012ae:	8803      	ldrh	r3, [r0, #0]
 80012b0:	b29b      	uxth	r3, r3
 80012b2:	ea03 030a 	and.w	r3, r3, sl
 80012b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012ba:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80012bc:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80012c0:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 80012c4:	f200 4002 	addw	r0, r0, #1026	; 0x402
 80012c8:	fa10 f383 	uxtah	r3, r0, r3
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80012cc:	4620      	mov	r0, r4
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80012ce:	f833 3032 	ldrh.w	r3, [r3, r2, lsl #3]
        ep->xfer_buff += ep->xfer_count;
 80012d2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80012d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80012d8:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 80012da:	4413      	add	r3, r2
 80012dc:	63e3      	str	r3, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80012de:	f7ff ff1c 	bl	800111a <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80012e2:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	f43f af3e 	beq.w	8001168 <HAL_PCD_IRQHandler+0x18>
 80012ec:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80012ee:	2a00      	cmp	r2, #0
 80012f0:	f47f af3a 	bne.w	8001168 <HAL_PCD_IRQHandler+0x18>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80012f4:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80012f8:	6821      	ldr	r1, [r4, #0]
 80012fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012fe:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001302:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 8001306:	e72f      	b.n	8001168 <HAL_PCD_IRQHandler+0x18>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001308:	8805      	ldrh	r5, [r0, #0]
 800130a:	b2ab      	uxth	r3, r5
        if ((wEPVal & USB_EP_SETUP) != 0U)
 800130c:	f415 6500 	ands.w	r5, r5, #2048	; 0x800
 8001310:	d020      	beq.n	8001354 <HAL_PCD_IRQHandler+0x204>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001312:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001316:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 800131a:	f200 4106 	addw	r1, r0, #1030	; 0x406
 800131e:	fa11 f383 	uxtah	r3, r1, r3
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001322:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
 8001326:	f833 3032 	ldrh.w	r3, [r3, r2, lsl #3]
 800132a:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 800132e:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001332:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001336:	f001 fdf5 	bl	8002f24 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800133a:	6822      	ldr	r2, [r4, #0]
 800133c:	8813      	ldrh	r3, [r2, #0]
 800133e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001342:	051b      	lsls	r3, r3, #20
 8001344:	0d1b      	lsrs	r3, r3, #20
 8001346:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800134a:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 800134c:	4620      	mov	r0, r4
 800134e:	f7ff fee5 	bl	800111c <HAL_PCD_SetupStageCallback>
 8001352:	e709      	b.n	8001168 <HAL_PCD_IRQHandler+0x18>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001354:	041f      	lsls	r7, r3, #16
 8001356:	f57f af07 	bpl.w	8001168 <HAL_PCD_IRQHandler+0x18>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800135a:	8803      	ldrh	r3, [r0, #0]
 800135c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001360:	051b      	lsls	r3, r3, #20
 8001362:	0d1b      	lsrs	r3, r3, #20
 8001364:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001368:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800136a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800136e:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 8001372:	f200 4106 	addw	r1, r0, #1030	; 0x406
 8001376:	fa11 f383 	uxtah	r3, r1, r3
 800137a:	f833 3032 	ldrh.w	r3, [r3, r2, lsl #3]
 800137e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001382:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001386:	b18b      	cbz	r3, 80013ac <HAL_PCD_IRQHandler+0x25c>
 8001388:	f8d4 117c 	ldr.w	r1, [r4, #380]	; 0x17c
 800138c:	b171      	cbz	r1, 80013ac <HAL_PCD_IRQHandler+0x25c>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800138e:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 8001392:	f001 fdc7 	bl	8002f24 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8001396:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800139a:	f8d4 2184 	ldr.w	r2, [r4, #388]	; 0x184
 800139e:	4413      	add	r3, r2
 80013a0:	f8c4 317c 	str.w	r3, [r4, #380]	; 0x17c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80013a4:	4629      	mov	r1, r5
 80013a6:	4620      	mov	r0, r4
 80013a8:	f7ff feb6 	bl	8001118 <HAL_PCD_DataOutStageCallback>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80013ac:	6821      	ldr	r1, [r4, #0]
 80013ae:	f8d4 5178 	ldr.w	r5, [r4, #376]	; 0x178
 80013b2:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 80013b6:	f201 4006 	addw	r0, r1, #1030	; 0x406
 80013ba:	b29b      	uxth	r3, r3
 80013bc:	b9cd      	cbnz	r5, 80013f2 <HAL_PCD_IRQHandler+0x2a2>
 80013be:	5ac2      	ldrh	r2, [r0, r3]
 80013c0:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80013c4:	0412      	lsls	r2, r2, #16
 80013c6:	0c12      	lsrs	r2, r2, #16
 80013c8:	52c2      	strh	r2, [r0, r3]
 80013ca:	5ac2      	ldrh	r2, [r0, r3]
 80013cc:	b292      	uxth	r2, r2
 80013ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80013d2:	52c2      	strh	r2, [r0, r3]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80013d4:	880b      	ldrh	r3, [r1, #0]
 80013d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80013da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80013de:	041b      	lsls	r3, r3, #16
 80013e0:	0c1b      	lsrs	r3, r3, #16
 80013e2:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80013e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013ee:	800b      	strh	r3, [r1, #0]
 80013f0:	e6ba      	b.n	8001168 <HAL_PCD_IRQHandler+0x18>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80013f2:	2d3e      	cmp	r5, #62	; 0x3e
 80013f4:	d806      	bhi.n	8001404 <HAL_PCD_IRQHandler+0x2b4>
 80013f6:	086a      	lsrs	r2, r5, #1
 80013f8:	07ee      	lsls	r6, r5, #31
 80013fa:	bf48      	it	mi
 80013fc:	3201      	addmi	r2, #1
 80013fe:	0292      	lsls	r2, r2, #10
 8001400:	b292      	uxth	r2, r2
 8001402:	e7e6      	b.n	80013d2 <HAL_PCD_IRQHandler+0x282>
 8001404:	096a      	lsrs	r2, r5, #5
 8001406:	06ed      	lsls	r5, r5, #27
 8001408:	bf08      	it	eq
 800140a:	f102 32ff 	addeq.w	r2, r2, #4294967295
 800140e:	ea49 2282 	orr.w	r2, r9, r2, lsl #10
 8001412:	e7f5      	b.n	8001400 <HAL_PCD_IRQHandler+0x2b0>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001414:	b237      	sxth	r7, r6
 8001416:	f830 3027 	ldrh.w	r3, [r0, r7, lsl #2]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800141a:	041a      	lsls	r2, r3, #16
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800141c:	fa1f f883 	uxth.w	r8, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001420:	f140 80f4 	bpl.w	800160c <HAL_PCD_IRQHandler+0x4bc>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001424:	f830 3027 	ldrh.w	r3, [r0, r7, lsl #2]
 8001428:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800142c:	051b      	lsls	r3, r3, #20
 800142e:	0d1b      	lsrs	r3, r3, #20
 8001430:	f043 0380 	orr.w	r3, r3, #128	; 0x80
        if (ep->doublebuffer == 0U)
 8001434:	2128      	movs	r1, #40	; 0x28
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001436:	f820 3027 	strh.w	r3, [r0, r7, lsl #2]
        if (ep->doublebuffer == 0U)
 800143a:	fb01 4106 	mla	r1, r1, r6, r4
 800143e:	f891 3174 	ldrb.w	r3, [r1, #372]	; 0x174
 8001442:	b9b3      	cbnz	r3, 8001472 <HAL_PCD_IRQHandler+0x322>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001444:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001448:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 800144c:	f200 4506 	addw	r5, r0, #1030	; 0x406
 8001450:	fa15 f383 	uxtah	r3, r5, r3
 8001454:	f833 5032 	ldrh.w	r5, [r3, r2, lsl #3]
 8001458:	f3c5 0509 	ubfx	r5, r5, #0, #10
          if (count != 0U)
 800145c:	2d00      	cmp	r5, #0
 800145e:	f000 80b9 	beq.w	80015d4 <HAL_PCD_IRQHandler+0x484>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001462:	f8b1 216e 	ldrh.w	r2, [r1, #366]	; 0x16e
 8001466:	462b      	mov	r3, r5
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001468:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 800146c:	f001 fd5a 	bl	8002f24 <USB_ReadPMA>
 8001470:	e0b0      	b.n	80015d4 <HAL_PCD_IRQHandler+0x484>
          if (ep->type == EP_TYPE_BULK)
 8001472:	f891 316b 	ldrb.w	r3, [r1, #363]	; 0x16b
 8001476:	f891 c168 	ldrb.w	ip, [r1, #360]	; 0x168
 800147a:	2b02      	cmp	r3, #2
 800147c:	f040 8089 	bne.w	8001592 <HAL_PCD_IRQHandler+0x442>

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001480:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001484:	f8d1 2180 	ldr.w	r2, [r1, #384]	; 0x180
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001488:	f418 4b80 	ands.w	fp, r8, #16384	; 0x4000
 800148c:	ea4f 05cc 	mov.w	r5, ip, lsl #3
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001490:	fa10 f383 	uxtah	r3, r0, r3
 8001494:	f008 0e40 	and.w	lr, r8, #64	; 0x40
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001498:	d03e      	beq.n	8001518 <HAL_PCD_IRQHandler+0x3c8>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800149a:	441d      	add	r5, r3
 800149c:	f8b5 5402 	ldrh.w	r5, [r5, #1026]	; 0x402
 80014a0:	f3c5 0509 	ubfx	r5, r5, #0, #10

    if (ep->xfer_len >= count)
 80014a4:	4295      	cmp	r5, r2
 80014a6:	d913      	bls.n	80014d0 <HAL_PCD_IRQHandler+0x380>
 80014a8:	2300      	movs	r3, #0
 80014aa:	f8c1 3180 	str.w	r3, [r1, #384]	; 0x180
    }

    if (ep->xfer_len == 0U)
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80014ae:	f830 302c 	ldrh.w	r3, [r0, ip, lsl #2]
 80014b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80014b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80014ba:	041b      	lsls	r3, r3, #16
 80014bc:	0c1b      	lsrs	r3, r3, #16
 80014be:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80014c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014ca:	f820 302c 	strh.w	r3, [r0, ip, lsl #2]
 80014ce:	e004      	b.n	80014da <HAL_PCD_IRQHandler+0x38a>
      ep->xfer_len -= count;
 80014d0:	1b52      	subs	r2, r2, r5
 80014d2:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    if (ep->xfer_len == 0U)
 80014d6:	2a00      	cmp	r2, #0
 80014d8:	d0e9      	beq.n	80014ae <HAL_PCD_IRQHandler+0x35e>
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80014da:	f1be 0f00 	cmp.w	lr, #0
 80014de:	d012      	beq.n	8001506 <HAL_PCD_IRQHandler+0x3b6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80014e0:	2328      	movs	r3, #40	; 0x28
 80014e2:	fb03 4306 	mla	r3, r3, r6, r4
 80014e6:	f893 2168 	ldrb.w	r2, [r3, #360]	; 0x168
 80014ea:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80014ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80014f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80014f6:	041b      	lsls	r3, r3, #16
 80014f8:	0c1b      	lsrs	r3, r3, #16
 80014fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014fe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001502:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }

    if (count != 0U)
 8001506:	2d00      	cmp	r5, #0
 8001508:	d064      	beq.n	80015d4 <HAL_PCD_IRQHandler+0x484>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800150a:	2128      	movs	r1, #40	; 0x28
 800150c:	fb01 4106 	mla	r1, r1, r6, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001510:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 8001514:	462b      	mov	r3, r5
 8001516:	e7a7      	b.n	8001468 <HAL_PCD_IRQHandler+0x318>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001518:	442b      	add	r3, r5
 800151a:	f8b3 5406 	ldrh.w	r5, [r3, #1030]	; 0x406
 800151e:	f3c5 0509 	ubfx	r5, r5, #0, #10

    if (ep->xfer_len >= count)
 8001522:	4295      	cmp	r5, r2
 8001524:	d912      	bls.n	800154c <HAL_PCD_IRQHandler+0x3fc>
 8001526:	f8c1 b180 	str.w	fp, [r1, #384]	; 0x180
    }

    if (ep->xfer_len == 0U)
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800152a:	f830 302c 	ldrh.w	r3, [r0, ip, lsl #2]
 800152e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001532:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001536:	041b      	lsls	r3, r3, #16
 8001538:	0c1b      	lsrs	r3, r3, #16
 800153a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800153e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001542:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001546:	f820 302c 	strh.w	r3, [r0, ip, lsl #2]
 800154a:	e004      	b.n	8001556 <HAL_PCD_IRQHandler+0x406>
      ep->xfer_len -= count;
 800154c:	1b52      	subs	r2, r2, r5
 800154e:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    if (ep->xfer_len == 0U)
 8001552:	2a00      	cmp	r2, #0
 8001554:	d0e9      	beq.n	800152a <HAL_PCD_IRQHandler+0x3da>
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001556:	f1be 0f00 	cmp.w	lr, #0
 800155a:	d112      	bne.n	8001582 <HAL_PCD_IRQHandler+0x432>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800155c:	2328      	movs	r3, #40	; 0x28
 800155e:	fb03 4306 	mla	r3, r3, r6, r4
 8001562:	f893 2168 	ldrb.w	r2, [r3, #360]	; 0x168
 8001566:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800156a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800156e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001572:	041b      	lsls	r3, r3, #16
 8001574:	0c1b      	lsrs	r3, r3, #16
 8001576:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800157a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800157e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }

    if (count != 0U)
 8001582:	b33d      	cbz	r5, 80015d4 <HAL_PCD_IRQHandler+0x484>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001584:	2128      	movs	r1, #40	; 0x28
 8001586:	fb01 4106 	mla	r1, r1, r6, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800158a:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 800158e:	462b      	mov	r3, r5
 8001590:	e76a      	b.n	8001468 <HAL_PCD_IRQHandler+0x318>
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001592:	f830 302c 	ldrh.w	r3, [r0, ip, lsl #2]
 8001596:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800159a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800159e:	041b      	lsls	r3, r3, #16
 80015a0:	0c1b      	lsrs	r3, r3, #16
 80015a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015a6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80015aa:	f820 302c 	strh.w	r3, [r0, ip, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80015ae:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 80015b2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80015b6:	f413 4f80 	tst.w	r3, #16384	; 0x4000
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80015ba:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80015be:	d059      	beq.n	8001674 <HAL_PCD_IRQHandler+0x524>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80015c0:	f200 4502 	addw	r5, r0, #1026	; 0x402
 80015c4:	fa15 f383 	uxtah	r3, r5, r3
 80015c8:	f833 5032 	ldrh.w	r5, [r3, r2, lsl #3]
 80015cc:	f3c5 0509 	ubfx	r5, r5, #0, #10
              if (count != 0U)
 80015d0:	2d00      	cmp	r5, #0
 80015d2:	d19d      	bne.n	8001510 <HAL_PCD_IRQHandler+0x3c0>
        ep->xfer_count += count;
 80015d4:	2128      	movs	r1, #40	; 0x28
 80015d6:	fb01 4306 	mla	r3, r1, r6, r4
 80015da:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 80015de:	442a      	add	r2, r5
 80015e0:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
        ep->xfer_buff += count;
 80015e4:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 80015e8:	442a      	add	r2, r5
 80015ea:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80015ee:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 80015f2:	b11a      	cbz	r2, 80015fc <HAL_PCD_IRQHandler+0x4ac>
 80015f4:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 80015f8:	429d      	cmp	r5, r3
 80015fa:	d246      	bcs.n	800168a <HAL_PCD_IRQHandler+0x53a>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80015fc:	2328      	movs	r3, #40	; 0x28
 80015fe:	fb03 4306 	mla	r3, r3, r6, r4
 8001602:	4620      	mov	r0, r4
 8001604:	f893 1168 	ldrb.w	r1, [r3, #360]	; 0x168
 8001608:	f7ff fd86 	bl	8001118 <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800160c:	f018 0f80 	tst.w	r8, #128	; 0x80
 8001610:	f43f adaa 	beq.w	8001168 <HAL_PCD_IRQHandler+0x18>
 8001614:	6820      	ldr	r0, [r4, #0]
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001616:	f830 3027 	ldrh.w	r3, [r0, r7, lsl #2]
 800161a:	b29b      	uxth	r3, r3
 800161c:	ea03 030a 	and.w	r3, r3, sl
 8001620:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001624:	f820 3027 	strh.w	r3, [r0, r7, lsl #2]
        if ((ep->type != EP_TYPE_BULK) ||
 8001628:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 800162c:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
 8001630:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001634:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8001638:	2b02      	cmp	r3, #2
 800163a:	d102      	bne.n	8001642 <HAL_PCD_IRQHandler+0x4f2>
 800163c:	f418 7f80 	tst.w	r8, #256	; 0x100
 8001640:	d13c      	bne.n	80016bc <HAL_PCD_IRQHandler+0x56c>
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001642:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8001646:	f200 4e02 	addw	lr, r0, #1026	; 0x402
          if (ep->xfer_len > TxByteNbre)
 800164a:	f04f 0c28 	mov.w	ip, #40	; 0x28
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800164e:	fa1e f282 	uxtah	r2, lr, r2
          if (ep->xfer_len > TxByteNbre)
 8001652:	fb0c 4306 	mla	r3, ip, r6, r4
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001656:	f832 2031 	ldrh.w	r2, [r2, r1, lsl #3]
          if (ep->xfer_len > TxByteNbre)
 800165a:	6c1d      	ldr	r5, [r3, #64]	; 0x40
 800165c:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001660:	4295      	cmp	r5, r2
 8001662:	d81a      	bhi.n	800169a <HAL_PCD_IRQHandler+0x54a>
 8001664:	2200      	movs	r2, #0
 8001666:	641a      	str	r2, [r3, #64]	; 0x40
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001668:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 800166c:	4620      	mov	r0, r4
 800166e:	f7ff fd54 	bl	800111a <HAL_PCD_DataInStageCallback>
 8001672:	e579      	b.n	8001168 <HAL_PCD_IRQHandler+0x18>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001674:	f200 4506 	addw	r5, r0, #1030	; 0x406
 8001678:	fa15 f383 	uxtah	r3, r5, r3
 800167c:	f833 5032 	ldrh.w	r5, [r3, r2, lsl #3]
 8001680:	f3c5 0509 	ubfx	r5, r5, #0, #10
              if (count != 0U)
 8001684:	2d00      	cmp	r5, #0
 8001686:	d0a5      	beq.n	80015d4 <HAL_PCD_IRQHandler+0x484>
 8001688:	e77f      	b.n	800158a <HAL_PCD_IRQHandler+0x43a>
        ep = &hpcd->OUT_ep[epindex];
 800168a:	fb01 4106 	mla	r1, r1, r6, r4
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800168e:	6820      	ldr	r0, [r4, #0]
 8001690:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 8001694:	f001 f95c 	bl	8002950 <USB_EPStartXfer>
 8001698:	e7b8      	b.n	800160c <HAL_PCD_IRQHandler+0x4bc>
            ep->xfer_len -= TxByteNbre;
 800169a:	1aad      	subs	r5, r5, r2
 800169c:	641d      	str	r5, [r3, #64]	; 0x40
          if (ep->xfer_len == 0U)
 800169e:	2d00      	cmp	r5, #0
 80016a0:	d0e2      	beq.n	8001668 <HAL_PCD_IRQHandler+0x518>
            ep->xfer_buff += TxByteNbre;
 80016a2:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 80016a4:	4415      	add	r5, r2
 80016a6:	63dd      	str	r5, [r3, #60]	; 0x3c
            ep->xfer_count += TxByteNbre;
 80016a8:	6c5d      	ldr	r5, [r3, #68]	; 0x44
        ep = &hpcd->IN_ep[epindex];
 80016aa:	fb06 cc0c 	mla	ip, r6, ip, ip
            ep->xfer_count += TxByteNbre;
 80016ae:	442a      	add	r2, r5
 80016b0:	645a      	str	r2, [r3, #68]	; 0x44
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80016b2:	eb04 010c 	add.w	r1, r4, ip
 80016b6:	f001 f94b 	bl	8002950 <USB_EPStartXfer>
 80016ba:	e555      	b.n	8001168 <HAL_PCD_IRQHandler+0x18>
 80016bc:	2328      	movs	r3, #40	; 0x28
 80016be:	fb03 4306 	mla	r3, r3, r6, r4
{
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80016c2:	f018 0b40 	ands.w	fp, r8, #64	; 0x40
 80016c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80016c8:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80016cc:	fa0f fe81 	sxth.w	lr, r1
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80016d0:	f408 4580 	and.w	r5, r8, #16384	; 0x4000
 80016d4:	f000 80a2 	beq.w	800181c <HAL_PCD_IRQHandler+0x6cc>
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80016d8:	f200 4c02 	addw	ip, r0, #1026	; 0x402
 80016dc:	fa1c f282 	uxtah	r2, ip, r2
 80016e0:	f04f 0828 	mov.w	r8, #40	; 0x28
 80016e4:	f832 203e 	ldrh.w	r2, [r2, lr, lsl #3]

    if (ep->xfer_len > TxByteNbre)
 80016e8:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80016ec:	429a      	cmp	r2, r3
    {
      ep->xfer_len -= TxByteNbre;
 80016ee:	fb08 4806 	mla	r8, r8, r6, r4
 80016f2:	bf34      	ite	cc
 80016f4:	1a9b      	subcc	r3, r3, r2
    }
    else
    {
      ep->xfer_len = 0U;
 80016f6:	2300      	movcs	r3, #0
 80016f8:	f8c8 3040 	str.w	r3, [r8, #64]	; 0x40
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80016fc:	b2ad      	uxth	r5, r5
 80016fe:	b9bb      	cbnz	r3, 8001730 <HAL_PCD_IRQHandler+0x5e0>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001700:	4620      	mov	r0, r4
 8001702:	f7ff fd0a 	bl	800111a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001706:	2d00      	cmp	r5, #0
 8001708:	f000 80a2 	beq.w	8001850 <HAL_PCD_IRQHandler+0x700>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800170c:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8001710:	6822      	ldr	r2, [r4, #0]
 8001712:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8001716:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800171a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800171e:	041b      	lsls	r3, r3, #16
 8001720:	0c1b      	lsrs	r3, r3, #16
 8001722:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001726:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800172a:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 800172e:	e08f      	b.n	8001850 <HAL_PCD_IRQHandler+0x700>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001730:	b16d      	cbz	r5, 800174e <HAL_PCD_IRQHandler+0x5fe>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001732:	f830 302e 	ldrh.w	r3, [r0, lr, lsl #2]
 8001736:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800173a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800173e:	041b      	lsls	r3, r3, #16
 8001740:	0c1b      	lsrs	r3, r3, #16
 8001742:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001746:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800174a:	f820 302e 	strh.w	r3, [r0, lr, lsl #2]
      if (ep->xfer_fill_db == 1U)
 800174e:	2528      	movs	r5, #40	; 0x28
 8001750:	fb05 4506 	mla	r5, r5, r6, r4
 8001754:	f895 304c 	ldrb.w	r3, [r5, #76]	; 0x4c
 8001758:	2b01      	cmp	r3, #1
 800175a:	d179      	bne.n	8001850 <HAL_PCD_IRQHandler+0x700>
        ep->xfer_count += TxByteNbre;
 800175c:	6c6b      	ldr	r3, [r5, #68]	; 0x44
        ep->xfer_buff += TxByteNbre;
 800175e:	6be9      	ldr	r1, [r5, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 8001760:	f8d5 e048 	ldr.w	lr, [r5, #72]	; 0x48
        ep->xfer_count += TxByteNbre;
 8001764:	4413      	add	r3, r2
 8001766:	646b      	str	r3, [r5, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 8001768:	6bab      	ldr	r3, [r5, #56]	; 0x38
        ep->xfer_buff += TxByteNbre;
 800176a:	4411      	add	r1, r2
        if (ep->xfer_len_db >= ep->maxpacket)
 800176c:	459e      	cmp	lr, r3
        ep->xfer_buff += TxByteNbre;
 800176e:	63e9      	str	r1, [r5, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 8001770:	d327      	bcc.n	80017c2 <HAL_PCD_IRQHandler+0x672>
          ep->xfer_len_db -= len;
 8001772:	ebae 0203 	sub.w	r2, lr, r3
 8001776:	64aa      	str	r2, [r5, #72]	; 0x48
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001778:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 800177c:	b29d      	uxth	r5, r3
 800177e:	2a00      	cmp	r2, #0
 8001780:	d13f      	bne.n	8001802 <HAL_PCD_IRQHandler+0x6b2>
 8001782:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8001786:	f897 e028 	ldrb.w	lr, [r7, #40]	; 0x28
 800178a:	fa1c fc82 	uxtah	ip, ip, r2
 800178e:	eb0c 0cce 	add.w	ip, ip, lr, lsl #3
 8001792:	bb1b      	cbnz	r3, 80017dc <HAL_PCD_IRQHandler+0x68c>
 8001794:	f8bc 3000 	ldrh.w	r3, [ip]
 8001798:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800179c:	041b      	lsls	r3, r3, #16
 800179e:	0c1b      	lsrs	r3, r3, #16
 80017a0:	f8ac 3000 	strh.w	r3, [ip]
 80017a4:	f8bc 3000 	ldrh.w	r3, [ip]
 80017a8:	b29b      	uxth	r3, r3
 80017aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017ae:	f8ac 3000 	strh.w	r3, [ip]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80017b2:	2328      	movs	r3, #40	; 0x28
 80017b4:	fb03 4606 	mla	r6, r3, r6, r4
 80017b8:	462b      	mov	r3, r5
 80017ba:	8e32      	ldrh	r2, [r6, #48]	; 0x30

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80017bc:	f001 f8b9 	bl	8002932 <USB_WritePMA>
 80017c0:	e046      	b.n	8001850 <HAL_PCD_IRQHandler+0x700>
        else if (ep->xfer_len_db == 0U)
 80017c2:	f1be 0f00 	cmp.w	lr, #0
 80017c6:	d103      	bne.n	80017d0 <HAL_PCD_IRQHandler+0x680>
          ep->xfer_fill_db = 0U;
 80017c8:	f885 e04c 	strb.w	lr, [r5, #76]	; 0x4c
    if (ep->xfer_len > TxByteNbre)
 80017cc:	4613      	mov	r3, r2
 80017ce:	e7d3      	b.n	8001778 <HAL_PCD_IRQHandler+0x628>
          ep->xfer_fill_db = 0U;
 80017d0:	2300      	movs	r3, #0
 80017d2:	f885 304c 	strb.w	r3, [r5, #76]	; 0x4c
          ep->xfer_len_db = 0U;
 80017d6:	64ab      	str	r3, [r5, #72]	; 0x48
 80017d8:	4673      	mov	r3, lr
 80017da:	e7cd      	b.n	8001778 <HAL_PCD_IRQHandler+0x628>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80017dc:	2b3e      	cmp	r3, #62	; 0x3e
 80017de:	d808      	bhi.n	80017f2 <HAL_PCD_IRQHandler+0x6a2>
 80017e0:	085a      	lsrs	r2, r3, #1
 80017e2:	07db      	lsls	r3, r3, #31
 80017e4:	bf48      	it	mi
 80017e6:	3201      	addmi	r2, #1
 80017e8:	0292      	lsls	r2, r2, #10
 80017ea:	b292      	uxth	r2, r2
 80017ec:	f8ac 2000 	strh.w	r2, [ip]
 80017f0:	e7df      	b.n	80017b2 <HAL_PCD_IRQHandler+0x662>
 80017f2:	095a      	lsrs	r2, r3, #5
 80017f4:	06db      	lsls	r3, r3, #27
 80017f6:	bf08      	it	eq
 80017f8:	f102 32ff 	addeq.w	r2, r2, #4294967295
 80017fc:	ea49 2282 	orr.w	r2, r9, r2, lsl #10
 8001800:	e7f3      	b.n	80017ea <HAL_PCD_IRQHandler+0x69a>
 8001802:	2a01      	cmp	r2, #1
 8001804:	d1d5      	bne.n	80017b2 <HAL_PCD_IRQHandler+0x662>
 8001806:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800180a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800180e:	fa1c fc83 	uxtah	ip, ip, r3
 8001812:	eb0c 0cc2 	add.w	ip, ip, r2, lsl #3
 8001816:	f8ac 5000 	strh.w	r5, [ip]
 800181a:	e7ca      	b.n	80017b2 <HAL_PCD_IRQHandler+0x662>
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800181c:	f200 4c06 	addw	ip, r0, #1030	; 0x406
 8001820:	fa1c f282 	uxtah	r2, ip, r2
 8001824:	f04f 0828 	mov.w	r8, #40	; 0x28
 8001828:	f832 203e 	ldrh.w	r2, [r2, lr, lsl #3]
    if (ep->xfer_len >= TxByteNbre)
 800182c:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001830:	429a      	cmp	r2, r3
      ep->xfer_len -= TxByteNbre;
 8001832:	fb08 4806 	mla	r8, r8, r6, r4
 8001836:	bf94      	ite	ls
 8001838:	1a9b      	subls	r3, r3, r2
      ep->xfer_len = 0U;
 800183a:	465b      	movhi	r3, fp
 800183c:	f8c8 3040 	str.w	r3, [r8, #64]	; 0x40
    if (ep->xfer_len == 0U)
 8001840:	b2ad      	uxth	r5, r5
 8001842:	b9c3      	cbnz	r3, 8001876 <HAL_PCD_IRQHandler+0x726>
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001844:	4620      	mov	r0, r4
 8001846:	f7ff fc68 	bl	800111a <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800184a:	2d00      	cmp	r5, #0
 800184c:	f43f af5e 	beq.w	800170c <HAL_PCD_IRQHandler+0x5bc>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8001850:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8001854:	6822      	ldr	r2, [r4, #0]
 8001856:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800185a:	b29b      	uxth	r3, r3
 800185c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001860:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001864:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8001868:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800186c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001870:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 8001874:	e478      	b.n	8001168 <HAL_PCD_IRQHandler+0x18>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8001876:	b96d      	cbnz	r5, 8001894 <HAL_PCD_IRQHandler+0x744>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001878:	f830 302e 	ldrh.w	r3, [r0, lr, lsl #2]
 800187c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001880:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001884:	041b      	lsls	r3, r3, #16
 8001886:	0c1b      	lsrs	r3, r3, #16
 8001888:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800188c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001890:	f820 302e 	strh.w	r3, [r0, lr, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8001894:	2328      	movs	r3, #40	; 0x28
 8001896:	fb03 4306 	mla	r3, r3, r6, r4
 800189a:	f893 104c 	ldrb.w	r1, [r3, #76]	; 0x4c
 800189e:	2901      	cmp	r1, #1
 80018a0:	d1d6      	bne.n	8001850 <HAL_PCD_IRQHandler+0x700>
        ep->xfer_count += TxByteNbre;
 80018a2:	6c5d      	ldr	r5, [r3, #68]	; 0x44
        ep->xfer_buff += TxByteNbre;
 80018a4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 80018a6:	f8d3 e048 	ldr.w	lr, [r3, #72]	; 0x48
        ep->xfer_count += TxByteNbre;
 80018aa:	4415      	add	r5, r2
 80018ac:	645d      	str	r5, [r3, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 80018ae:	6b9d      	ldr	r5, [r3, #56]	; 0x38
        ep->xfer_buff += TxByteNbre;
 80018b0:	4411      	add	r1, r2
        if (ep->xfer_len_db >= ep->maxpacket)
 80018b2:	45ae      	cmp	lr, r5
        ep->xfer_buff += TxByteNbre;
 80018b4:	63d9      	str	r1, [r3, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 80018b6:	d324      	bcc.n	8001902 <HAL_PCD_IRQHandler+0x7b2>
          ep->xfer_len_db -= len;
 80018b8:	ebae 0205 	sub.w	r2, lr, r5
 80018bc:	649a      	str	r2, [r3, #72]	; 0x48
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80018be:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 80018c2:	b2ab      	uxth	r3, r5
 80018c4:	2a00      	cmp	r2, #0
 80018c6:	d13a      	bne.n	800193e <HAL_PCD_IRQHandler+0x7ee>
 80018c8:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80018cc:	f897 e028 	ldrb.w	lr, [r7, #40]	; 0x28
 80018d0:	fa1c fc82 	uxtah	ip, ip, r2
 80018d4:	eb0c 0cce 	add.w	ip, ip, lr, lsl #3
 80018d8:	bb05      	cbnz	r5, 800191c <HAL_PCD_IRQHandler+0x7cc>
 80018da:	f8bc 2000 	ldrh.w	r2, [ip]
 80018de:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80018e2:	0412      	lsls	r2, r2, #16
 80018e4:	0c12      	lsrs	r2, r2, #16
 80018e6:	f8ac 2000 	strh.w	r2, [ip]
 80018ea:	f8bc 2000 	ldrh.w	r2, [ip]
 80018ee:	b292      	uxth	r2, r2
 80018f0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80018f4:	f8ac 2000 	strh.w	r2, [ip]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80018f8:	2228      	movs	r2, #40	; 0x28
 80018fa:	fb02 4606 	mla	r6, r2, r6, r4
 80018fe:	8e72      	ldrh	r2, [r6, #50]	; 0x32
 8001900:	e75c      	b.n	80017bc <HAL_PCD_IRQHandler+0x66c>
        else if (ep->xfer_len_db == 0U)
 8001902:	f1be 0f00 	cmp.w	lr, #0
 8001906:	d103      	bne.n	8001910 <HAL_PCD_IRQHandler+0x7c0>
          ep->xfer_fill_db = 0U;
 8001908:	f883 e04c 	strb.w	lr, [r3, #76]	; 0x4c
    if (ep->xfer_len >= TxByteNbre)
 800190c:	4615      	mov	r5, r2
 800190e:	e7d6      	b.n	80018be <HAL_PCD_IRQHandler+0x76e>
          ep->xfer_len_db = 0U;
 8001910:	2200      	movs	r2, #0
 8001912:	649a      	str	r2, [r3, #72]	; 0x48
          ep->xfer_fill_db = 0;
 8001914:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8001918:	4675      	mov	r5, lr
 800191a:	e7d0      	b.n	80018be <HAL_PCD_IRQHandler+0x76e>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800191c:	2d3e      	cmp	r5, #62	; 0x3e
 800191e:	d806      	bhi.n	800192e <HAL_PCD_IRQHandler+0x7de>
 8001920:	086a      	lsrs	r2, r5, #1
 8001922:	07ed      	lsls	r5, r5, #31
 8001924:	bf48      	it	mi
 8001926:	3201      	addmi	r2, #1
 8001928:	0292      	lsls	r2, r2, #10
 800192a:	b292      	uxth	r2, r2
 800192c:	e7e2      	b.n	80018f4 <HAL_PCD_IRQHandler+0x7a4>
 800192e:	096a      	lsrs	r2, r5, #5
 8001930:	06ed      	lsls	r5, r5, #27
 8001932:	bf08      	it	eq
 8001934:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8001938:	ea49 2282 	orr.w	r2, r9, r2, lsl #10
 800193c:	e7f5      	b.n	800192a <HAL_PCD_IRQHandler+0x7da>
 800193e:	2a01      	cmp	r2, #1
 8001940:	d1da      	bne.n	80018f8 <HAL_PCD_IRQHandler+0x7a8>
 8001942:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8001946:	f897 5028 	ldrb.w	r5, [r7, #40]	; 0x28
 800194a:	fa1c fc82 	uxtah	ip, ip, r2
 800194e:	eb0c 0cc5 	add.w	ip, ip, r5, lsl #3
 8001952:	f8ac 3000 	strh.w	r3, [ip]
 8001956:	e7cf      	b.n	80018f8 <HAL_PCD_IRQHandler+0x7a8>
 8001958:	ffff8f0f 	.word	0xffff8f0f
 800195c:	ffff8000 	.word	0xffff8000

08001960 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001960:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001964:	4605      	mov	r5, r0
 8001966:	2800      	cmp	r0, #0
 8001968:	d038      	beq.n	80019dc <HAL_RCC_OscConfig+0x7c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800196a:	6803      	ldr	r3, [r0, #0]
 800196c:	07df      	lsls	r7, r3, #31
 800196e:	d411      	bmi.n	8001994 <HAL_RCC_OscConfig+0x34>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001970:	682b      	ldr	r3, [r5, #0]
 8001972:	079e      	lsls	r6, r3, #30
 8001974:	f100 808b 	bmi.w	8001a8e <HAL_RCC_OscConfig+0x12e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001978:	682b      	ldr	r3, [r5, #0]
 800197a:	071c      	lsls	r4, r3, #28
 800197c:	f100 80fe 	bmi.w	8001b7c <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001980:	682b      	ldr	r3, [r5, #0]
 8001982:	0758      	lsls	r0, r3, #29
 8001984:	f100 8147 	bmi.w	8001c16 <HAL_RCC_OscConfig+0x2b6>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001988:	69a8      	ldr	r0, [r5, #24]
 800198a:	2800      	cmp	r0, #0
 800198c:	f040 81dd 	bne.w	8001d4a <HAL_RCC_OscConfig+0x3ea>
        }
      }
    }
  }

  return HAL_OK;
 8001990:	2000      	movs	r0, #0
 8001992:	e047      	b.n	8001a24 <HAL_RCC_OscConfig+0xc4>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001994:	4cbd      	ldr	r4, [pc, #756]	; (8001c8c <HAL_RCC_OscConfig+0x32c>)
 8001996:	6863      	ldr	r3, [r4, #4]
 8001998:	f003 030c 	and.w	r3, r3, #12
 800199c:	2b04      	cmp	r3, #4
 800199e:	d00a      	beq.n	80019b6 <HAL_RCC_OscConfig+0x56>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019a0:	6863      	ldr	r3, [r4, #4]
 80019a2:	f003 030c 	and.w	r3, r3, #12
 80019a6:	2b08      	cmp	r3, #8
 80019a8:	d11a      	bne.n	80019e0 <HAL_RCC_OscConfig+0x80>
 80019aa:	6863      	ldr	r3, [r4, #4]
 80019ac:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80019b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019b4:	d114      	bne.n	80019e0 <HAL_RCC_OscConfig+0x80>
 80019b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019ba:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019be:	6821      	ldr	r1, [r4, #0]
 80019c0:	fa93 f3a3 	rbit	r3, r3
 80019c4:	fab3 f383 	clz	r3, r3
 80019c8:	f003 031f 	and.w	r3, r3, #31
 80019cc:	2201      	movs	r2, #1
 80019ce:	fa02 f303 	lsl.w	r3, r2, r3
 80019d2:	420b      	tst	r3, r1
 80019d4:	d0cc      	beq.n	8001970 <HAL_RCC_OscConfig+0x10>
 80019d6:	686b      	ldr	r3, [r5, #4]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d1c9      	bne.n	8001970 <HAL_RCC_OscConfig+0x10>
          return HAL_ERROR;
 80019dc:	2001      	movs	r0, #1
 80019de:	e021      	b.n	8001a24 <HAL_RCC_OscConfig+0xc4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019e0:	686b      	ldr	r3, [r5, #4]
 80019e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019e6:	d120      	bne.n	8001a2a <HAL_RCC_OscConfig+0xca>
 80019e8:	6823      	ldr	r3, [r4, #0]
 80019ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019ee:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80019f0:	f7fe ff00 	bl	80007f4 <HAL_GetTick>
 80019f4:	f44f 3700 	mov.w	r7, #131072	; 0x20000
 80019f8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019fa:	f04f 0801 	mov.w	r8, #1
 80019fe:	fa97 f3a7 	rbit	r3, r7
 8001a02:	6822      	ldr	r2, [r4, #0]
 8001a04:	fa97 f3a7 	rbit	r3, r7
 8001a08:	fab3 f383 	clz	r3, r3
 8001a0c:	f003 031f 	and.w	r3, r3, #31
 8001a10:	fa08 f303 	lsl.w	r3, r8, r3
 8001a14:	4213      	tst	r3, r2
 8001a16:	d1ab      	bne.n	8001970 <HAL_RCC_OscConfig+0x10>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a18:	f7fe feec 	bl	80007f4 <HAL_GetTick>
 8001a1c:	1b83      	subs	r3, r0, r6
 8001a1e:	2b64      	cmp	r3, #100	; 0x64
 8001a20:	d9ed      	bls.n	80019fe <HAL_RCC_OscConfig+0x9e>
            return HAL_TIMEOUT;
 8001a22:	2003      	movs	r0, #3
}
 8001a24:	b002      	add	sp, #8
 8001a26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a2a:	bb0b      	cbnz	r3, 8001a70 <HAL_RCC_OscConfig+0x110>
 8001a2c:	6823      	ldr	r3, [r4, #0]
 8001a2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a32:	6023      	str	r3, [r4, #0]
 8001a34:	6823      	ldr	r3, [r4, #0]
 8001a36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a3a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001a3c:	f7fe feda 	bl	80007f4 <HAL_GetTick>
 8001a40:	f44f 3700 	mov.w	r7, #131072	; 0x20000
 8001a44:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a46:	f04f 0801 	mov.w	r8, #1
 8001a4a:	fa97 f3a7 	rbit	r3, r7
 8001a4e:	6822      	ldr	r2, [r4, #0]
 8001a50:	fa97 f3a7 	rbit	r3, r7
 8001a54:	fab3 f383 	clz	r3, r3
 8001a58:	f003 031f 	and.w	r3, r3, #31
 8001a5c:	fa08 f303 	lsl.w	r3, r8, r3
 8001a60:	4213      	tst	r3, r2
 8001a62:	d085      	beq.n	8001970 <HAL_RCC_OscConfig+0x10>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a64:	f7fe fec6 	bl	80007f4 <HAL_GetTick>
 8001a68:	1b83      	subs	r3, r0, r6
 8001a6a:	2b64      	cmp	r3, #100	; 0x64
 8001a6c:	d9ed      	bls.n	8001a4a <HAL_RCC_OscConfig+0xea>
 8001a6e:	e7d8      	b.n	8001a22 <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a74:	6823      	ldr	r3, [r4, #0]
 8001a76:	d103      	bne.n	8001a80 <HAL_RCC_OscConfig+0x120>
 8001a78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a7c:	6023      	str	r3, [r4, #0]
 8001a7e:	e7b3      	b.n	80019e8 <HAL_RCC_OscConfig+0x88>
 8001a80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a84:	6023      	str	r3, [r4, #0]
 8001a86:	6823      	ldr	r3, [r4, #0]
 8001a88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a8c:	e7af      	b.n	80019ee <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001a8e:	4c7f      	ldr	r4, [pc, #508]	; (8001c8c <HAL_RCC_OscConfig+0x32c>)
 8001a90:	6863      	ldr	r3, [r4, #4]
 8001a92:	f013 0f0c 	tst.w	r3, #12
 8001a96:	d00a      	beq.n	8001aae <HAL_RCC_OscConfig+0x14e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001a98:	6863      	ldr	r3, [r4, #4]
 8001a9a:	f003 030c 	and.w	r3, r3, #12
 8001a9e:	2b08      	cmp	r3, #8
 8001aa0:	d124      	bne.n	8001aec <HAL_RCC_OscConfig+0x18c>
 8001aa2:	6863      	ldr	r3, [r4, #4]
 8001aa4:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001aa8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001aac:	d11e      	bne.n	8001aec <HAL_RCC_OscConfig+0x18c>
 8001aae:	2302      	movs	r3, #2
 8001ab0:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ab4:	6821      	ldr	r1, [r4, #0]
 8001ab6:	fa93 f3a3 	rbit	r3, r3
 8001aba:	fab3 f383 	clz	r3, r3
 8001abe:	f003 031f 	and.w	r3, r3, #31
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac8:	420b      	tst	r3, r1
 8001aca:	d002      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x172>
 8001acc:	68eb      	ldr	r3, [r5, #12]
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d184      	bne.n	80019dc <HAL_RCC_OscConfig+0x7c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ad2:	6821      	ldr	r1, [r4, #0]
 8001ad4:	23f8      	movs	r3, #248	; 0xf8
 8001ad6:	fa93 f3a3 	rbit	r3, r3
 8001ada:	fab3 f283 	clz	r2, r3
 8001ade:	692b      	ldr	r3, [r5, #16]
 8001ae0:	4093      	lsls	r3, r2
 8001ae2:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	6023      	str	r3, [r4, #0]
 8001aea:	e745      	b.n	8001978 <HAL_RCC_OscConfig+0x18>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001aec:	68ea      	ldr	r2, [r5, #12]
 8001aee:	2601      	movs	r6, #1
 8001af0:	b30a      	cbz	r2, 8001b36 <HAL_RCC_OscConfig+0x1d6>
 8001af2:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_ENABLE();
 8001af6:	fab3 f383 	clz	r3, r3
 8001afa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001afe:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	f04f 0802 	mov.w	r8, #2
 8001b08:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8001b0a:	f7fe fe73 	bl	80007f4 <HAL_GetTick>
 8001b0e:	4607      	mov	r7, r0
 8001b10:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b14:	6822      	ldr	r2, [r4, #0]
 8001b16:	fa98 f3a8 	rbit	r3, r8
 8001b1a:	fab3 f383 	clz	r3, r3
 8001b1e:	f003 031f 	and.w	r3, r3, #31
 8001b22:	fa06 f303 	lsl.w	r3, r6, r3
 8001b26:	4213      	tst	r3, r2
 8001b28:	d1d3      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x172>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b2a:	f7fe fe63 	bl	80007f4 <HAL_GetTick>
 8001b2e:	1bc3      	subs	r3, r0, r7
 8001b30:	2b02      	cmp	r3, #2
 8001b32:	d9ed      	bls.n	8001b10 <HAL_RCC_OscConfig+0x1b0>
 8001b34:	e775      	b.n	8001a22 <HAL_RCC_OscConfig+0xc2>
 8001b36:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 8001b3a:	fab3 f383 	clz	r3, r3
 8001b3e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b42:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	f04f 0802 	mov.w	r8, #2
 8001b4c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001b4e:	f7fe fe51 	bl	80007f4 <HAL_GetTick>
 8001b52:	4607      	mov	r7, r0
 8001b54:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b58:	6822      	ldr	r2, [r4, #0]
 8001b5a:	fa98 f3a8 	rbit	r3, r8
 8001b5e:	fab3 f383 	clz	r3, r3
 8001b62:	f003 031f 	and.w	r3, r3, #31
 8001b66:	fa06 f303 	lsl.w	r3, r6, r3
 8001b6a:	4213      	tst	r3, r2
 8001b6c:	f43f af04 	beq.w	8001978 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b70:	f7fe fe40 	bl	80007f4 <HAL_GetTick>
 8001b74:	1bc3      	subs	r3, r0, r7
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d9ec      	bls.n	8001b54 <HAL_RCC_OscConfig+0x1f4>
 8001b7a:	e752      	b.n	8001a22 <HAL_RCC_OscConfig+0xc2>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b7c:	696a      	ldr	r2, [r5, #20]
 8001b7e:	4e43      	ldr	r6, [pc, #268]	; (8001c8c <HAL_RCC_OscConfig+0x32c>)
 8001b80:	4943      	ldr	r1, [pc, #268]	; (8001c90 <HAL_RCC_OscConfig+0x330>)
 8001b82:	2401      	movs	r4, #1
 8001b84:	b31a      	cbz	r2, 8001bce <HAL_RCC_OscConfig+0x26e>
 8001b86:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_ENABLE();
 8001b8a:	fab3 f383 	clz	r3, r3
 8001b8e:	440b      	add	r3, r1
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	2702      	movs	r7, #2
 8001b94:	601c      	str	r4, [r3, #0]
      tickstart = HAL_GetTick();
 8001b96:	f7fe fe2d 	bl	80007f4 <HAL_GetTick>
 8001b9a:	4680      	mov	r8, r0
 8001b9c:	fa97 f3a7 	rbit	r3, r7
 8001ba0:	fa97 f3a7 	rbit	r3, r7
 8001ba4:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ba8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8001baa:	fa97 f3a7 	rbit	r3, r7
 8001bae:	fab3 f383 	clz	r3, r3
 8001bb2:	f003 031f 	and.w	r3, r3, #31
 8001bb6:	fa04 f303 	lsl.w	r3, r4, r3
 8001bba:	4213      	tst	r3, r2
 8001bbc:	f47f aee0 	bne.w	8001980 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bc0:	f7fe fe18 	bl	80007f4 <HAL_GetTick>
 8001bc4:	eba0 0308 	sub.w	r3, r0, r8
 8001bc8:	2b02      	cmp	r3, #2
 8001bca:	d9e7      	bls.n	8001b9c <HAL_RCC_OscConfig+0x23c>
 8001bcc:	e729      	b.n	8001a22 <HAL_RCC_OscConfig+0xc2>
 8001bce:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_DISABLE();
 8001bd2:	fab3 f383 	clz	r3, r3
 8001bd6:	440b      	add	r3, r1
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	2702      	movs	r7, #2
 8001bdc:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001bde:	f7fe fe09 	bl	80007f4 <HAL_GetTick>
 8001be2:	4680      	mov	r8, r0
 8001be4:	fa97 f3a7 	rbit	r3, r7
 8001be8:	fa97 f3a7 	rbit	r3, r7
 8001bec:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bf0:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8001bf2:	fa97 f3a7 	rbit	r3, r7
 8001bf6:	fab3 f383 	clz	r3, r3
 8001bfa:	f003 031f 	and.w	r3, r3, #31
 8001bfe:	fa04 f303 	lsl.w	r3, r4, r3
 8001c02:	4213      	tst	r3, r2
 8001c04:	f43f aebc 	beq.w	8001980 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c08:	f7fe fdf4 	bl	80007f4 <HAL_GetTick>
 8001c0c:	eba0 0308 	sub.w	r3, r0, r8
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	d9e7      	bls.n	8001be4 <HAL_RCC_OscConfig+0x284>
 8001c14:	e705      	b.n	8001a22 <HAL_RCC_OscConfig+0xc2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c16:	4c1d      	ldr	r4, [pc, #116]	; (8001c8c <HAL_RCC_OscConfig+0x32c>)
 8001c18:	69e3      	ldr	r3, [r4, #28]
 8001c1a:	00d9      	lsls	r1, r3, #3
 8001c1c:	d434      	bmi.n	8001c88 <HAL_RCC_OscConfig+0x328>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c1e:	69e3      	ldr	r3, [r4, #28]
 8001c20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c24:	61e3      	str	r3, [r4, #28]
 8001c26:	69e3      	ldr	r3, [r4, #28]
 8001c28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c2c:	9301      	str	r3, [sp, #4]
 8001c2e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001c30:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c32:	4f18      	ldr	r7, [pc, #96]	; (8001c94 <HAL_RCC_OscConfig+0x334>)
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	05da      	lsls	r2, r3, #23
 8001c38:	d52e      	bpl.n	8001c98 <HAL_RCC_OscConfig+0x338>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c3a:	68ab      	ldr	r3, [r5, #8]
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d13c      	bne.n	8001cba <HAL_RCC_OscConfig+0x35a>
 8001c40:	6a23      	ldr	r3, [r4, #32]
 8001c42:	f043 0301 	orr.w	r3, r3, #1
 8001c46:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001c48:	f7fe fdd4 	bl	80007f4 <HAL_GetTick>
 8001c4c:	2702      	movs	r7, #2
 8001c4e:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c50:	46ba      	mov	sl, r7
 8001c52:	f04f 0901 	mov.w	r9, #1
 8001c56:	fa97 f3a7 	rbit	r3, r7
 8001c5a:	fa97 f3a7 	rbit	r3, r7
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d06b      	beq.n	8001d3a <HAL_RCC_OscConfig+0x3da>
 8001c62:	6a22      	ldr	r2, [r4, #32]
 8001c64:	fa9a f3aa 	rbit	r3, sl
 8001c68:	fab3 f383 	clz	r3, r3
 8001c6c:	f003 031f 	and.w	r3, r3, #31
 8001c70:	fa09 f303 	lsl.w	r3, r9, r3
 8001c74:	4213      	tst	r3, r2
 8001c76:	d057      	beq.n	8001d28 <HAL_RCC_OscConfig+0x3c8>
    if(pwrclkchanged == SET)
 8001c78:	2e00      	cmp	r6, #0
 8001c7a:	f43f ae85 	beq.w	8001988 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c7e:	69e3      	ldr	r3, [r4, #28]
 8001c80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c84:	61e3      	str	r3, [r4, #28]
 8001c86:	e67f      	b.n	8001988 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8001c88:	2600      	movs	r6, #0
 8001c8a:	e7d2      	b.n	8001c32 <HAL_RCC_OscConfig+0x2d2>
 8001c8c:	40021000 	.word	0x40021000
 8001c90:	10908120 	.word	0x10908120
 8001c94:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c9e:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8001ca0:	f7fe fda8 	bl	80007f4 <HAL_GetTick>
 8001ca4:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	05db      	lsls	r3, r3, #23
 8001caa:	d4c6      	bmi.n	8001c3a <HAL_RCC_OscConfig+0x2da>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cac:	f7fe fda2 	bl	80007f4 <HAL_GetTick>
 8001cb0:	eba0 0008 	sub.w	r0, r0, r8
 8001cb4:	2864      	cmp	r0, #100	; 0x64
 8001cb6:	d9f6      	bls.n	8001ca6 <HAL_RCC_OscConfig+0x346>
 8001cb8:	e6b3      	b.n	8001a22 <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cba:	bb3b      	cbnz	r3, 8001d0c <HAL_RCC_OscConfig+0x3ac>
 8001cbc:	6a23      	ldr	r3, [r4, #32]
 8001cbe:	f023 0301 	bic.w	r3, r3, #1
 8001cc2:	6223      	str	r3, [r4, #32]
 8001cc4:	6a23      	ldr	r3, [r4, #32]
 8001cc6:	f023 0304 	bic.w	r3, r3, #4
 8001cca:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001ccc:	f7fe fd92 	bl	80007f4 <HAL_GetTick>
 8001cd0:	2702      	movs	r7, #2
 8001cd2:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cd4:	46ba      	mov	sl, r7
 8001cd6:	f04f 0901 	mov.w	r9, #1
 8001cda:	fa97 f3a7 	rbit	r3, r7
 8001cde:	fa97 f3a7 	rbit	r3, r7
 8001ce2:	b373      	cbz	r3, 8001d42 <HAL_RCC_OscConfig+0x3e2>
 8001ce4:	6a22      	ldr	r2, [r4, #32]
 8001ce6:	fa9a f3aa 	rbit	r3, sl
 8001cea:	fab3 f383 	clz	r3, r3
 8001cee:	f003 031f 	and.w	r3, r3, #31
 8001cf2:	fa09 f303 	lsl.w	r3, r9, r3
 8001cf6:	4213      	tst	r3, r2
 8001cf8:	d0be      	beq.n	8001c78 <HAL_RCC_OscConfig+0x318>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cfa:	f7fe fd7b 	bl	80007f4 <HAL_GetTick>
 8001cfe:	f241 3388 	movw	r3, #5000	; 0x1388
 8001d02:	eba0 0008 	sub.w	r0, r0, r8
 8001d06:	4298      	cmp	r0, r3
 8001d08:	d9e7      	bls.n	8001cda <HAL_RCC_OscConfig+0x37a>
 8001d0a:	e68a      	b.n	8001a22 <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d0c:	2b05      	cmp	r3, #5
 8001d0e:	6a23      	ldr	r3, [r4, #32]
 8001d10:	d103      	bne.n	8001d1a <HAL_RCC_OscConfig+0x3ba>
 8001d12:	f043 0304 	orr.w	r3, r3, #4
 8001d16:	6223      	str	r3, [r4, #32]
 8001d18:	e792      	b.n	8001c40 <HAL_RCC_OscConfig+0x2e0>
 8001d1a:	f023 0301 	bic.w	r3, r3, #1
 8001d1e:	6223      	str	r3, [r4, #32]
 8001d20:	6a23      	ldr	r3, [r4, #32]
 8001d22:	f023 0304 	bic.w	r3, r3, #4
 8001d26:	e78e      	b.n	8001c46 <HAL_RCC_OscConfig+0x2e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d28:	f7fe fd64 	bl	80007f4 <HAL_GetTick>
 8001d2c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001d30:	eba0 0008 	sub.w	r0, r0, r8
 8001d34:	4298      	cmp	r0, r3
 8001d36:	d98e      	bls.n	8001c56 <HAL_RCC_OscConfig+0x2f6>
 8001d38:	e673      	b.n	8001a22 <HAL_RCC_OscConfig+0xc2>
 8001d3a:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d3e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001d40:	e790      	b.n	8001c64 <HAL_RCC_OscConfig+0x304>
 8001d42:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d46:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001d48:	e7cd      	b.n	8001ce6 <HAL_RCC_OscConfig+0x386>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d4a:	4a50      	ldr	r2, [pc, #320]	; (8001e8c <HAL_RCC_OscConfig+0x52c>)
 8001d4c:	6853      	ldr	r3, [r2, #4]
 8001d4e:	f003 030c 	and.w	r3, r3, #12
 8001d52:	2b08      	cmp	r3, #8
 8001d54:	4614      	mov	r4, r2
 8001d56:	f000 8081 	beq.w	8001e5c <HAL_RCC_OscConfig+0x4fc>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d5a:	2802      	cmp	r0, #2
 8001d5c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d60:	d157      	bne.n	8001e12 <HAL_RCC_OscConfig+0x4b2>
 8001d62:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8001d66:	fab3 f383 	clz	r3, r3
 8001d6a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d6e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	2200      	movs	r2, #0
 8001d76:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001d78:	f7fe fd3c 	bl	80007f4 <HAL_GetTick>
 8001d7c:	f04f 7800 	mov.w	r8, #33554432	; 0x2000000
 8001d80:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d82:	2601      	movs	r6, #1
 8001d84:	fa98 f3a8 	rbit	r3, r8
 8001d88:	6822      	ldr	r2, [r4, #0]
 8001d8a:	fa98 f3a8 	rbit	r3, r8
 8001d8e:	fab3 f383 	clz	r3, r3
 8001d92:	f003 031f 	and.w	r3, r3, #31
 8001d96:	fa06 f303 	lsl.w	r3, r6, r3
 8001d9a:	4213      	tst	r3, r2
 8001d9c:	d133      	bne.n	8001e06 <HAL_RCC_OscConfig+0x4a6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d9e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001da0:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8001da2:	f023 030f 	bic.w	r3, r3, #15
 8001da6:	4313      	orrs	r3, r2
 8001da8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001daa:	e9d5 1307 	ldrd	r1, r3, [r5, #28]
 8001dae:	6862      	ldr	r2, [r4, #4]
 8001db0:	430b      	orrs	r3, r1
 8001db2:	f422 1276 	bic.w	r2, r2, #4030464	; 0x3d8000
 8001db6:	4313      	orrs	r3, r2
 8001db8:	6063      	str	r3, [r4, #4]
 8001dba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001dbe:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8001dc2:	fab3 f383 	clz	r3, r3
 8001dc6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001dca:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001dce:	009b      	lsls	r3, r3, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001dd0:	2701      	movs	r7, #1
        __HAL_RCC_PLL_ENABLE();
 8001dd2:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8001dd4:	f7fe fd0e 	bl	80007f4 <HAL_GetTick>
 8001dd8:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 8001ddc:	4605      	mov	r5, r0
 8001dde:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001de2:	6822      	ldr	r2, [r4, #0]
 8001de4:	fa96 f3a6 	rbit	r3, r6
 8001de8:	fab3 f383 	clz	r3, r3
 8001dec:	f003 031f 	and.w	r3, r3, #31
 8001df0:	fa07 f303 	lsl.w	r3, r7, r3
 8001df4:	4213      	tst	r3, r2
 8001df6:	f47f adcb 	bne.w	8001990 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dfa:	f7fe fcfb 	bl	80007f4 <HAL_GetTick>
 8001dfe:	1b40      	subs	r0, r0, r5
 8001e00:	2802      	cmp	r0, #2
 8001e02:	d9ec      	bls.n	8001dde <HAL_RCC_OscConfig+0x47e>
 8001e04:	e60d      	b.n	8001a22 <HAL_RCC_OscConfig+0xc2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e06:	f7fe fcf5 	bl	80007f4 <HAL_GetTick>
 8001e0a:	1bc3      	subs	r3, r0, r7
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	d9b9      	bls.n	8001d84 <HAL_RCC_OscConfig+0x424>
 8001e10:	e607      	b.n	8001a22 <HAL_RCC_OscConfig+0xc2>
 8001e12:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8001e16:	fab3 f383 	clz	r3, r3
 8001e1a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e1e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	2200      	movs	r2, #0
 8001e26:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001e28:	f7fe fce4 	bl	80007f4 <HAL_GetTick>
 8001e2c:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 8001e30:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e32:	2701      	movs	r7, #1
 8001e34:	fa96 f3a6 	rbit	r3, r6
 8001e38:	6822      	ldr	r2, [r4, #0]
 8001e3a:	fa96 f3a6 	rbit	r3, r6
 8001e3e:	fab3 f383 	clz	r3, r3
 8001e42:	f003 031f 	and.w	r3, r3, #31
 8001e46:	fa07 f303 	lsl.w	r3, r7, r3
 8001e4a:	4213      	tst	r3, r2
 8001e4c:	f43f ada0 	beq.w	8001990 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e50:	f7fe fcd0 	bl	80007f4 <HAL_GetTick>
 8001e54:	1b40      	subs	r0, r0, r5
 8001e56:	2802      	cmp	r0, #2
 8001e58:	d9ec      	bls.n	8001e34 <HAL_RCC_OscConfig+0x4d4>
 8001e5a:	e5e2      	b.n	8001a22 <HAL_RCC_OscConfig+0xc2>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e5c:	2801      	cmp	r0, #1
 8001e5e:	f43f ade1 	beq.w	8001a24 <HAL_RCC_OscConfig+0xc4>
        pll_config = RCC->CFGR;
 8001e62:	6853      	ldr	r3, [r2, #4]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001e64:	69e9      	ldr	r1, [r5, #28]
        pll_config2 = RCC->CFGR2;
 8001e66:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001e68:	f403 30c0 	and.w	r0, r3, #98304	; 0x18000
 8001e6c:	4288      	cmp	r0, r1
 8001e6e:	f47f adb5 	bne.w	80019dc <HAL_RCC_OscConfig+0x7c>
 8001e72:	6a29      	ldr	r1, [r5, #32]
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001e74:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001e78:	428b      	cmp	r3, r1
 8001e7a:	f47f adaf 	bne.w	80019dc <HAL_RCC_OscConfig+0x7c>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8001e7e:	f002 030f 	and.w	r3, r2, #15
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001e82:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8001e84:	4293      	cmp	r3, r2
 8001e86:	f43f ad83 	beq.w	8001990 <HAL_RCC_OscConfig+0x30>
 8001e8a:	e5a7      	b.n	80019dc <HAL_RCC_OscConfig+0x7c>
 8001e8c:	40021000 	.word	0x40021000

08001e90 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8001e90:	4911      	ldr	r1, [pc, #68]	; (8001ed8 <HAL_RCC_GetSysClockFreq+0x48>)
 8001e92:	684b      	ldr	r3, [r1, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e94:	f003 020c 	and.w	r2, r3, #12
 8001e98:	2a08      	cmp	r2, #8
 8001e9a:	d11a      	bne.n	8001ed2 <HAL_RCC_GetSysClockFreq+0x42>
 8001e9c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001ea0:	fa92 f2a2 	rbit	r2, r2
 8001ea4:	200f      	movs	r0, #15
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001ea6:	fab2 f282 	clz	r2, r2
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001eaa:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8001eac:	fa90 f0a0 	rbit	r0, r0
 8001eb0:	fab0 f080 	clz	r0, r0
 8001eb4:	f001 010f 	and.w	r1, r1, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001eb8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001ebc:	40d3      	lsrs	r3, r2
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001ebe:	40c1      	lsrs	r1, r0
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001ec0:	4a06      	ldr	r2, [pc, #24]	; (8001edc <HAL_RCC_GetSysClockFreq+0x4c>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001ec2:	4807      	ldr	r0, [pc, #28]	; (8001ee0 <HAL_RCC_GetSysClockFreq+0x50>)
 8001ec4:	5c41      	ldrb	r1, [r0, r1]
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001ec6:	4807      	ldr	r0, [pc, #28]	; (8001ee4 <HAL_RCC_GetSysClockFreq+0x54>)
 8001ec8:	fbb0 f1f1 	udiv	r1, r0, r1
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001ecc:	5cd0      	ldrb	r0, [r2, r3]
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001ece:	4348      	muls	r0, r1
 8001ed0:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8001ed2:	4804      	ldr	r0, [pc, #16]	; (8001ee4 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop
 8001ed8:	40021000 	.word	0x40021000
 8001edc:	08003d1c 	.word	0x08003d1c
 8001ee0:	08003d2c 	.word	0x08003d2c
 8001ee4:	007a1200 	.word	0x007a1200

08001ee8 <HAL_RCC_ClockConfig>:
{
 8001ee8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001eec:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001eee:	4604      	mov	r4, r0
 8001ef0:	b910      	cbnz	r0, 8001ef8 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001ef2:	2001      	movs	r0, #1
}
 8001ef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ef8:	4a4c      	ldr	r2, [pc, #304]	; (800202c <HAL_RCC_ClockConfig+0x144>)
 8001efa:	6813      	ldr	r3, [r2, #0]
 8001efc:	f003 0307 	and.w	r3, r3, #7
 8001f00:	428b      	cmp	r3, r1
 8001f02:	d32e      	bcc.n	8001f62 <HAL_RCC_ClockConfig+0x7a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f04:	6822      	ldr	r2, [r4, #0]
 8001f06:	0791      	lsls	r1, r2, #30
 8001f08:	d436      	bmi.n	8001f78 <HAL_RCC_ClockConfig+0x90>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f0a:	07d2      	lsls	r2, r2, #31
 8001f0c:	d43c      	bmi.n	8001f88 <HAL_RCC_ClockConfig+0xa0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f0e:	4a47      	ldr	r2, [pc, #284]	; (800202c <HAL_RCC_ClockConfig+0x144>)
 8001f10:	6813      	ldr	r3, [r2, #0]
 8001f12:	f003 0307 	and.w	r3, r3, #7
 8001f16:	42ab      	cmp	r3, r5
 8001f18:	d874      	bhi.n	8002004 <HAL_RCC_ClockConfig+0x11c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f1a:	6822      	ldr	r2, [r4, #0]
 8001f1c:	4d44      	ldr	r5, [pc, #272]	; (8002030 <HAL_RCC_ClockConfig+0x148>)
 8001f1e:	f012 0f04 	tst.w	r2, #4
 8001f22:	d17b      	bne.n	800201c <HAL_RCC_ClockConfig+0x134>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f24:	0713      	lsls	r3, r2, #28
 8001f26:	d506      	bpl.n	8001f36 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f28:	686b      	ldr	r3, [r5, #4]
 8001f2a:	6922      	ldr	r2, [r4, #16]
 8001f2c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001f30:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001f34:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001f36:	f7ff ffab 	bl	8001e90 <HAL_RCC_GetSysClockFreq>
 8001f3a:	686b      	ldr	r3, [r5, #4]
 8001f3c:	22f0      	movs	r2, #240	; 0xf0
 8001f3e:	fa92 f2a2 	rbit	r2, r2
 8001f42:	fab2 f282 	clz	r2, r2
 8001f46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f4a:	40d3      	lsrs	r3, r2
 8001f4c:	4a39      	ldr	r2, [pc, #228]	; (8002034 <HAL_RCC_ClockConfig+0x14c>)
 8001f4e:	5cd3      	ldrb	r3, [r2, r3]
 8001f50:	40d8      	lsrs	r0, r3
 8001f52:	4b39      	ldr	r3, [pc, #228]	; (8002038 <HAL_RCC_ClockConfig+0x150>)
 8001f54:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8001f56:	4b39      	ldr	r3, [pc, #228]	; (800203c <HAL_RCC_ClockConfig+0x154>)
 8001f58:	6818      	ldr	r0, [r3, #0]
 8001f5a:	f7fe fc09 	bl	8000770 <HAL_InitTick>
  return HAL_OK;
 8001f5e:	2000      	movs	r0, #0
 8001f60:	e7c8      	b.n	8001ef4 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f62:	6813      	ldr	r3, [r2, #0]
 8001f64:	f023 0307 	bic.w	r3, r3, #7
 8001f68:	430b      	orrs	r3, r1
 8001f6a:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f6c:	6813      	ldr	r3, [r2, #0]
 8001f6e:	f003 0307 	and.w	r3, r3, #7
 8001f72:	428b      	cmp	r3, r1
 8001f74:	d1bd      	bne.n	8001ef2 <HAL_RCC_ClockConfig+0xa>
 8001f76:	e7c5      	b.n	8001f04 <HAL_RCC_ClockConfig+0x1c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f78:	492d      	ldr	r1, [pc, #180]	; (8002030 <HAL_RCC_ClockConfig+0x148>)
 8001f7a:	68a0      	ldr	r0, [r4, #8]
 8001f7c:	684b      	ldr	r3, [r1, #4]
 8001f7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f82:	4303      	orrs	r3, r0
 8001f84:	604b      	str	r3, [r1, #4]
 8001f86:	e7c0      	b.n	8001f0a <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f88:	6862      	ldr	r2, [r4, #4]
 8001f8a:	4e29      	ldr	r6, [pc, #164]	; (8002030 <HAL_RCC_ClockConfig+0x148>)
 8001f8c:	2a01      	cmp	r2, #1
 8001f8e:	d126      	bne.n	8001fde <HAL_RCC_ClockConfig+0xf6>
 8001f90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f94:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f98:	6831      	ldr	r1, [r6, #0]
 8001f9a:	fa93 f3a3 	rbit	r3, r3
 8001f9e:	fab3 f383 	clz	r3, r3
 8001fa2:	f003 031f 	and.w	r3, r3, #31
 8001fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001faa:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fac:	d0a1      	beq.n	8001ef2 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fae:	6873      	ldr	r3, [r6, #4]
 8001fb0:	f023 0303 	bic.w	r3, r3, #3
 8001fb4:	431a      	orrs	r2, r3
 8001fb6:	6072      	str	r2, [r6, #4]
    tickstart = HAL_GetTick();
 8001fb8:	f7fe fc1c 	bl	80007f4 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fbc:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001fc0:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fc2:	6873      	ldr	r3, [r6, #4]
 8001fc4:	6862      	ldr	r2, [r4, #4]
 8001fc6:	f003 030c 	and.w	r3, r3, #12
 8001fca:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001fce:	d09e      	beq.n	8001f0e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fd0:	f7fe fc10 	bl	80007f4 <HAL_GetTick>
 8001fd4:	1bc0      	subs	r0, r0, r7
 8001fd6:	4540      	cmp	r0, r8
 8001fd8:	d9f3      	bls.n	8001fc2 <HAL_RCC_ClockConfig+0xda>
        return HAL_TIMEOUT;
 8001fda:	2003      	movs	r0, #3
 8001fdc:	e78a      	b.n	8001ef4 <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fde:	2a02      	cmp	r2, #2
 8001fe0:	bf0c      	ite	eq
 8001fe2:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8001fe6:	2302      	movne	r3, #2
 8001fe8:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fec:	6830      	ldr	r0, [r6, #0]
 8001fee:	fa93 f3a3 	rbit	r3, r3
 8001ff2:	fab3 f383 	clz	r3, r3
 8001ff6:	f003 031f 	and.w	r3, r3, #31
 8001ffa:	2101      	movs	r1, #1
 8001ffc:	fa01 f303 	lsl.w	r3, r1, r3
 8002000:	4203      	tst	r3, r0
 8002002:	e7d3      	b.n	8001fac <HAL_RCC_ClockConfig+0xc4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002004:	6813      	ldr	r3, [r2, #0]
 8002006:	f023 0307 	bic.w	r3, r3, #7
 800200a:	432b      	orrs	r3, r5
 800200c:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800200e:	6813      	ldr	r3, [r2, #0]
 8002010:	f003 0307 	and.w	r3, r3, #7
 8002014:	42ab      	cmp	r3, r5
 8002016:	f47f af6c 	bne.w	8001ef2 <HAL_RCC_ClockConfig+0xa>
 800201a:	e77e      	b.n	8001f1a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800201c:	686b      	ldr	r3, [r5, #4]
 800201e:	68e1      	ldr	r1, [r4, #12]
 8002020:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002024:	430b      	orrs	r3, r1
 8002026:	606b      	str	r3, [r5, #4]
 8002028:	e77c      	b.n	8001f24 <HAL_RCC_ClockConfig+0x3c>
 800202a:	bf00      	nop
 800202c:	40022000 	.word	0x40022000
 8002030:	40021000 	.word	0x40021000
 8002034:	08003d04 	.word	0x08003d04
 8002038:	20000000 	.word	0x20000000
 800203c:	20000008 	.word	0x20000008

08002040 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002040:	4b08      	ldr	r3, [pc, #32]	; (8002064 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002042:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	fa92 f2a2 	rbit	r2, r2
 800204c:	fab2 f282 	clz	r2, r2
 8002050:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002054:	40d3      	lsrs	r3, r2
 8002056:	4a04      	ldr	r2, [pc, #16]	; (8002068 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002058:	5cd3      	ldrb	r3, [r2, r3]
 800205a:	4a04      	ldr	r2, [pc, #16]	; (800206c <HAL_RCC_GetPCLK1Freq+0x2c>)
 800205c:	6810      	ldr	r0, [r2, #0]
}    
 800205e:	40d8      	lsrs	r0, r3
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop
 8002064:	40021000 	.word	0x40021000
 8002068:	08003d14 	.word	0x08003d14
 800206c:	20000000 	.word	0x20000000

08002070 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002070:	4b08      	ldr	r3, [pc, #32]	; (8002094 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002072:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	fa92 f2a2 	rbit	r2, r2
 800207c:	fab2 f282 	clz	r2, r2
 8002080:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002084:	40d3      	lsrs	r3, r2
 8002086:	4a04      	ldr	r2, [pc, #16]	; (8002098 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002088:	5cd3      	ldrb	r3, [r2, r3]
 800208a:	4a04      	ldr	r2, [pc, #16]	; (800209c <HAL_RCC_GetPCLK2Freq+0x2c>)
 800208c:	6810      	ldr	r0, [r2, #0]
} 
 800208e:	40d8      	lsrs	r0, r3
 8002090:	4770      	bx	lr
 8002092:	bf00      	nop
 8002094:	40021000 	.word	0x40021000
 8002098:	08003d14 	.word	0x08003d14
 800209c:	20000000 	.word	0x20000000

080020a0 <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80020a0:	6803      	ldr	r3, [r0, #0]
{
 80020a2:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80020a6:	03d9      	lsls	r1, r3, #15
{
 80020a8:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80020aa:	d523      	bpl.n	80020f4 <HAL_RCCEx_PeriphCLKConfig+0x54>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020ac:	4d9c      	ldr	r5, [pc, #624]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80020ae:	69eb      	ldr	r3, [r5, #28]
 80020b0:	00da      	lsls	r2, r3, #3
 80020b2:	f100 80d9 	bmi.w	8002268 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020b6:	69eb      	ldr	r3, [r5, #28]
 80020b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020bc:	61eb      	str	r3, [r5, #28]
 80020be:	69eb      	ldr	r3, [r5, #28]
 80020c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020c4:	9301      	str	r3, [sp, #4]
 80020c6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80020c8:	2601      	movs	r6, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020ca:	4f96      	ldr	r7, [pc, #600]	; (8002324 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	05db      	lsls	r3, r3, #23
 80020d0:	f140 80cc 	bpl.w	800226c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80020d4:	6a2b      	ldr	r3, [r5, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80020d6:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80020da:	f040 80dc 	bne.w	8002296 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80020de:	6a2b      	ldr	r3, [r5, #32]
 80020e0:	6862      	ldr	r2, [r4, #4]
 80020e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020e6:	4313      	orrs	r3, r2
 80020e8:	622b      	str	r3, [r5, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80020ea:	b11e      	cbz	r6, 80020f4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020ec:	69eb      	ldr	r3, [r5, #28]
 80020ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020f2:	61eb      	str	r3, [r5, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80020f4:	6823      	ldr	r3, [r4, #0]
 80020f6:	07da      	lsls	r2, r3, #31
 80020f8:	d506      	bpl.n	8002108 <HAL_RCCEx_PeriphCLKConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80020fa:	4989      	ldr	r1, [pc, #548]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80020fc:	68a0      	ldr	r0, [r4, #8]
 80020fe:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8002100:	f022 0203 	bic.w	r2, r2, #3
 8002104:	4302      	orrs	r2, r0
 8002106:	630a      	str	r2, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002108:	079f      	lsls	r7, r3, #30
 800210a:	d506      	bpl.n	800211a <HAL_RCCEx_PeriphCLKConfig+0x7a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800210c:	4984      	ldr	r1, [pc, #528]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800210e:	68e0      	ldr	r0, [r4, #12]
 8002110:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8002112:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8002116:	4302      	orrs	r2, r0
 8002118:	630a      	str	r2, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800211a:	075e      	lsls	r6, r3, #29
 800211c:	d506      	bpl.n	800212c <HAL_RCCEx_PeriphCLKConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800211e:	4980      	ldr	r1, [pc, #512]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002120:	6920      	ldr	r0, [r4, #16]
 8002122:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8002124:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8002128:	4302      	orrs	r2, r0
 800212a:	630a      	str	r2, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800212c:	069d      	lsls	r5, r3, #26
 800212e:	d506      	bpl.n	800213e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002130:	497b      	ldr	r1, [pc, #492]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002132:	69e0      	ldr	r0, [r4, #28]
 8002134:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8002136:	f022 0210 	bic.w	r2, r2, #16
 800213a:	4302      	orrs	r2, r0
 800213c:	630a      	str	r2, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800213e:	0398      	lsls	r0, r3, #14
 8002140:	d506      	bpl.n	8002150 <HAL_RCCEx_PeriphCLKConfig+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002142:	4977      	ldr	r1, [pc, #476]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002144:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002146:	684a      	ldr	r2, [r1, #4]
 8002148:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 800214c:	4302      	orrs	r2, r0
 800214e:	604a      	str	r2, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002150:	0659      	lsls	r1, r3, #25
 8002152:	d506      	bpl.n	8002162 <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002154:	4972      	ldr	r1, [pc, #456]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002156:	6a20      	ldr	r0, [r4, #32]
 8002158:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800215a:	f022 0220 	bic.w	r2, r2, #32
 800215e:	4302      	orrs	r2, r0
 8002160:	630a      	str	r2, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002162:	035a      	lsls	r2, r3, #13
 8002164:	d506      	bpl.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002166:	496e      	ldr	r1, [pc, #440]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002168:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800216a:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800216c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002170:	4302      	orrs	r2, r0
 8002172:	630a      	str	r2, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002174:	071f      	lsls	r7, r3, #28
 8002176:	d506      	bpl.n	8002186 <HAL_RCCEx_PeriphCLKConfig+0xe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002178:	4969      	ldr	r1, [pc, #420]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800217a:	6960      	ldr	r0, [r4, #20]
 800217c:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800217e:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8002182:	4302      	orrs	r2, r0
 8002184:	630a      	str	r2, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002186:	06de      	lsls	r6, r3, #27
 8002188:	d506      	bpl.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0xf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800218a:	4965      	ldr	r1, [pc, #404]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800218c:	69a0      	ldr	r0, [r4, #24]
 800218e:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8002190:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8002194:	4302      	orrs	r2, r0
 8002196:	630a      	str	r2, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002198:	059d      	lsls	r5, r3, #22
 800219a:	d506      	bpl.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800219c:	4960      	ldr	r1, [pc, #384]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800219e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80021a0:	684a      	ldr	r2, [r1, #4]
 80021a2:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80021a6:	4302      	orrs	r2, r0
 80021a8:	604a      	str	r2, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80021aa:	0618      	lsls	r0, r3, #24
 80021ac:	d506      	bpl.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80021ae:	495c      	ldr	r1, [pc, #368]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80021b0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80021b2:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80021b4:	f422 72f8 	bic.w	r2, r2, #496	; 0x1f0
 80021b8:	4302      	orrs	r2, r0
 80021ba:	62ca      	str	r2, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80021bc:	05d9      	lsls	r1, r3, #23
 80021be:	d506      	bpl.n	80021ce <HAL_RCCEx_PeriphCLKConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80021c0:	4957      	ldr	r1, [pc, #348]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80021c2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80021c4:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80021c6:	f422 5278 	bic.w	r2, r2, #15872	; 0x3e00
 80021ca:	4302      	orrs	r2, r0
 80021cc:	62ca      	str	r2, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80021ce:	04da      	lsls	r2, r3, #19
 80021d0:	d506      	bpl.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80021d2:	4953      	ldr	r1, [pc, #332]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80021d4:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80021d6:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80021d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80021dc:	4302      	orrs	r2, r0
 80021de:	630a      	str	r2, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80021e0:	049f      	lsls	r7, r3, #18
 80021e2:	d506      	bpl.n	80021f2 <HAL_RCCEx_PeriphCLKConfig+0x152>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80021e4:	494e      	ldr	r1, [pc, #312]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80021e6:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80021e8:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80021ea:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80021ee:	4302      	orrs	r2, r0
 80021f0:	630a      	str	r2, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80021f2:	02de      	lsls	r6, r3, #11
 80021f4:	d506      	bpl.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x164>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80021f6:	494a      	ldr	r1, [pc, #296]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80021f8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80021fa:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80021fc:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8002200:	4302      	orrs	r2, r0
 8002202:	630a      	str	r2, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002204:	029d      	lsls	r5, r3, #10
 8002206:	d506      	bpl.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002208:	4945      	ldr	r1, [pc, #276]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800220a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800220c:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800220e:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8002212:	4302      	orrs	r2, r0
 8002214:	630a      	str	r2, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002216:	0258      	lsls	r0, r3, #9
 8002218:	d506      	bpl.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800221a:	4941      	ldr	r1, [pc, #260]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800221c:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800221e:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8002220:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002224:	4302      	orrs	r2, r0
 8002226:	630a      	str	r2, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002228:	0219      	lsls	r1, r3, #8
 800222a:	d506      	bpl.n	800223a <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800222c:	493c      	ldr	r1, [pc, #240]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800222e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8002230:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8002232:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002236:	4302      	orrs	r2, r0
 8002238:	630a      	str	r2, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800223a:	01da      	lsls	r2, r3, #7
 800223c:	d506      	bpl.n	800224c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800223e:	4938      	ldr	r1, [pc, #224]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002240:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8002242:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8002244:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002248:	4302      	orrs	r2, r0
 800224a:	630a      	str	r2, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800224c:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002250:	bf1f      	itttt	ne
 8002252:	4a33      	ldrne	r2, [pc, #204]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002254:	6d21      	ldrne	r1, [r4, #80]	; 0x50
 8002256:	6b13      	ldrne	r3, [r2, #48]	; 0x30
 8002258:	f423 4300 	bicne.w	r3, r3, #32768	; 0x8000
 800225c:	bf1d      	ittte	ne
 800225e:	430b      	orrne	r3, r1
 8002260:	6313      	strne	r3, [r2, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002262:	2000      	movne	r0, #0
 8002264:	4618      	moveq	r0, r3
 8002266:	e013      	b.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  FlagStatus       pwrclkchanged = RESET;
 8002268:	2600      	movs	r6, #0
 800226a:	e72e      	b.n	80020ca <HAL_RCCEx_PeriphCLKConfig+0x2a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002272:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8002274:	f7fe fabe 	bl	80007f4 <HAL_GetTick>
 8002278:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	05d8      	lsls	r0, r3, #23
 800227e:	f53f af29 	bmi.w	80020d4 <HAL_RCCEx_PeriphCLKConfig+0x34>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002282:	f7fe fab7 	bl	80007f4 <HAL_GetTick>
 8002286:	eba0 0008 	sub.w	r0, r0, r8
 800228a:	2864      	cmp	r0, #100	; 0x64
 800228c:	d9f5      	bls.n	800227a <HAL_RCCEx_PeriphCLKConfig+0x1da>
          return HAL_TIMEOUT;
 800228e:	2003      	movs	r0, #3
}
 8002290:	b002      	add	sp, #8
 8002292:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002296:	6862      	ldr	r2, [r4, #4]
 8002298:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800229c:	429a      	cmp	r2, r3
 800229e:	f43f af1e 	beq.w	80020de <HAL_RCCEx_PeriphCLKConfig+0x3e>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80022a2:	6a29      	ldr	r1, [r5, #32]
 80022a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022a8:	f421 7040 	bic.w	r0, r1, #768	; 0x300
 80022ac:	fa93 f2a3 	rbit	r2, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 80022b0:	f8df c074 	ldr.w	ip, [pc, #116]	; 8002328 <HAL_RCCEx_PeriphCLKConfig+0x288>
 80022b4:	fab2 f282 	clz	r2, r2
 80022b8:	4462      	add	r2, ip
 80022ba:	0092      	lsls	r2, r2, #2
 80022bc:	2701      	movs	r7, #1
 80022be:	6017      	str	r7, [r2, #0]
 80022c0:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 80022c4:	fab3 f383 	clz	r3, r3
 80022c8:	4463      	add	r3, ip
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	2200      	movs	r2, #0
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80022ce:	07c9      	lsls	r1, r1, #31
      __HAL_RCC_BACKUPRESET_RELEASE();
 80022d0:	601a      	str	r2, [r3, #0]
      RCC->BDCR = temp_reg;
 80022d2:	6228      	str	r0, [r5, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80022d4:	f57f af03 	bpl.w	80020de <HAL_RCCEx_PeriphCLKConfig+0x3e>
        tickstart = HAL_GetTick();
 80022d8:	f7fe fa8c 	bl	80007f4 <HAL_GetTick>
 80022dc:	f04f 0802 	mov.w	r8, #2
 80022e0:	4681      	mov	r9, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022e2:	46c2      	mov	sl, r8
 80022e4:	fa98 f3a8 	rbit	r3, r8
 80022e8:	fa98 f3a8 	rbit	r3, r8
 80022ec:	b1a3      	cbz	r3, 8002318 <HAL_RCCEx_PeriphCLKConfig+0x278>
 80022ee:	6a2a      	ldr	r2, [r5, #32]
 80022f0:	fa9a f3aa 	rbit	r3, sl
 80022f4:	fab3 f383 	clz	r3, r3
 80022f8:	f003 031f 	and.w	r3, r3, #31
 80022fc:	fa07 f303 	lsl.w	r3, r7, r3
 8002300:	4213      	tst	r3, r2
 8002302:	f47f aeec 	bne.w	80020de <HAL_RCCEx_PeriphCLKConfig+0x3e>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002306:	f7fe fa75 	bl	80007f4 <HAL_GetTick>
 800230a:	f241 3388 	movw	r3, #5000	; 0x1388
 800230e:	eba0 0009 	sub.w	r0, r0, r9
 8002312:	4298      	cmp	r0, r3
 8002314:	d9e6      	bls.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8002316:	e7ba      	b.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002318:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800231c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800231e:	e7e7      	b.n	80022f0 <HAL_RCCEx_PeriphCLKConfig+0x250>
 8002320:	40021000 	.word	0x40021000
 8002324:	40007000 	.word	0x40007000
 8002328:	10908100 	.word	0x10908100

0800232c <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
  uint32_t tickstart = 0U;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800232c:	6802      	ldr	r2, [r0, #0]
{
 800232e:	b538      	push	{r3, r4, r5, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002330:	68d3      	ldr	r3, [r2, #12]
 8002332:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002336:	60d3      	str	r3, [r2, #12]
{
 8002338:	4604      	mov	r4, r0

  tickstart = HAL_GetTick();
 800233a:	f7fe fa5b 	bl	80007f4 <HAL_GetTick>
 800233e:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002340:	6823      	ldr	r3, [r4, #0]
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	069b      	lsls	r3, r3, #26
 8002346:	d501      	bpl.n	800234c <HAL_RTC_WaitForSynchro+0x20>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8002348:	2000      	movs	r0, #0
}
 800234a:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800234c:	f7fe fa52 	bl	80007f4 <HAL_GetTick>
 8002350:	1b40      	subs	r0, r0, r5
 8002352:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002356:	d9f3      	bls.n	8002340 <HAL_RTC_WaitForSynchro+0x14>
      return HAL_TIMEOUT;
 8002358:	2003      	movs	r0, #3
 800235a:	e7f6      	b.n	800234a <HAL_RTC_WaitForSynchro+0x1e>

0800235c <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - HAL_OK : RTC is in Init mode
  *          - HAL_TIMEOUT : RTC is not in Init mode and in Timeout
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800235c:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800235e:	6803      	ldr	r3, [r0, #0]
 8002360:	68da      	ldr	r2, [r3, #12]
 8002362:	0652      	lsls	r2, r2, #25
{
 8002364:	4604      	mov	r4, r0
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002366:	d501      	bpl.n	800236c <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8002368:	2000      	movs	r0, #0
}
 800236a:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800236c:	f04f 32ff 	mov.w	r2, #4294967295
 8002370:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8002372:	f7fe fa3f 	bl	80007f4 <HAL_GetTick>
 8002376:	4605      	mov	r5, r0
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002378:	6823      	ldr	r3, [r4, #0]
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	065b      	lsls	r3, r3, #25
 800237e:	d4f3      	bmi.n	8002368 <RTC_EnterInitMode+0xc>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002380:	f7fe fa38 	bl	80007f4 <HAL_GetTick>
 8002384:	1b40      	subs	r0, r0, r5
 8002386:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800238a:	d9f5      	bls.n	8002378 <RTC_EnterInitMode+0x1c>
        return HAL_TIMEOUT;
 800238c:	2003      	movs	r0, #3
 800238e:	e7ec      	b.n	800236a <RTC_EnterInitMode+0xe>

08002390 <HAL_RTC_Init>:
{
 8002390:	b538      	push	{r3, r4, r5, lr}
  if (hrtc == NULL)
 8002392:	4604      	mov	r4, r0
 8002394:	b1b8      	cbz	r0, 80023c6 <HAL_RTC_Init+0x36>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002396:	7f43      	ldrb	r3, [r0, #29]
 8002398:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800239c:	b913      	cbnz	r3, 80023a4 <HAL_RTC_Init+0x14>
    hrtc->Lock = HAL_UNLOCKED;
 800239e:	7702      	strb	r2, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 80023a0:	f7fe f8ca 	bl	8000538 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 80023a4:	2302      	movs	r3, #2
 80023a6:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80023a8:	6823      	ldr	r3, [r4, #0]
 80023aa:	22ca      	movs	r2, #202	; 0xca
 80023ac:	625a      	str	r2, [r3, #36]	; 0x24
 80023ae:	2253      	movs	r2, #83	; 0x53
 80023b0:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80023b2:	4620      	mov	r0, r4
 80023b4:	f7ff ffd2 	bl	800235c <RTC_EnterInitMode>
 80023b8:	6823      	ldr	r3, [r4, #0]
 80023ba:	4605      	mov	r5, r0
 80023bc:	b128      	cbz	r0, 80023ca <HAL_RTC_Init+0x3a>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80023be:	22ff      	movs	r2, #255	; 0xff
 80023c0:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 80023c2:	2304      	movs	r3, #4
 80023c4:	7763      	strb	r3, [r4, #29]
    return HAL_ERROR;
 80023c6:	2501      	movs	r5, #1
 80023c8:	e02e      	b.n	8002428 <HAL_RTC_Init+0x98>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80023ca:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80023cc:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80023ce:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 80023d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023d6:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80023d8:	6862      	ldr	r2, [r4, #4]
 80023da:	6899      	ldr	r1, [r3, #8]
 80023dc:	4302      	orrs	r2, r0
 80023de:	6960      	ldr	r0, [r4, #20]
 80023e0:	4302      	orrs	r2, r0
 80023e2:	430a      	orrs	r2, r1
 80023e4:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80023e6:	68e2      	ldr	r2, [r4, #12]
 80023e8:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80023ea:	691a      	ldr	r2, [r3, #16]
 80023ec:	68a1      	ldr	r1, [r4, #8]
 80023ee:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80023f2:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80023f4:	68da      	ldr	r2, [r3, #12]
 80023f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023fa:	60da      	str	r2, [r3, #12]
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	069b      	lsls	r3, r3, #26
 8002400:	d405      	bmi.n	800240e <HAL_RTC_Init+0x7e>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002402:	4620      	mov	r0, r4
 8002404:	f7ff ff92 	bl	800232c <HAL_RTC_WaitForSynchro>
 8002408:	b108      	cbz	r0, 800240e <HAL_RTC_Init+0x7e>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800240a:	6823      	ldr	r3, [r4, #0]
 800240c:	e7d7      	b.n	80023be <HAL_RTC_Init+0x2e>
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800240e:	6823      	ldr	r3, [r4, #0]
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002410:	69a1      	ldr	r1, [r4, #24]
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8002412:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002414:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002418:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800241a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800241c:	430a      	orrs	r2, r1
 800241e:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002420:	22ff      	movs	r2, #255	; 0xff
 8002422:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8002424:	2301      	movs	r3, #1
 8002426:	7763      	strb	r3, [r4, #29]
}
 8002428:	4628      	mov	r0, r5
 800242a:	bd38      	pop	{r3, r4, r5, pc}

0800242c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800242c:	b538      	push	{r3, r4, r5, lr}
 800242e:	4604      	mov	r4, r0
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002430:	69c0      	ldr	r0, [r0, #28]
 8002432:	6921      	ldr	r1, [r4, #16]
 8002434:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002436:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002438:	430a      	orrs	r2, r1
 800243a:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800243c:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800243e:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002440:	4974      	ldr	r1, [pc, #464]	; (8002614 <UART_SetConfig+0x1e8>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002442:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002444:	4029      	ands	r1, r5
 8002446:	430a      	orrs	r2, r1
 8002448:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800244a:	685a      	ldr	r2, [r3, #4]
 800244c:	68e1      	ldr	r1, [r4, #12]
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  tmpreg |= huart->Init.OneBitSampling;
 800244e:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002450:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002454:	430a      	orrs	r2, r1
 8002456:	605a      	str	r2, [r3, #4]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002458:	6899      	ldr	r1, [r3, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800245a:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800245c:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
  tmpreg |= huart->Init.OneBitSampling;
 8002460:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002462:	430a      	orrs	r2, r1
 8002464:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002466:	4a6c      	ldr	r2, [pc, #432]	; (8002618 <UART_SetConfig+0x1ec>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d115      	bne.n	8002498 <UART_SetConfig+0x6c>
 800246c:	4b6b      	ldr	r3, [pc, #428]	; (800261c <UART_SetConfig+0x1f0>)
 800246e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002470:	f003 0303 	and.w	r3, r3, #3
 8002474:	3b01      	subs	r3, #1
 8002476:	2b02      	cmp	r3, #2
 8002478:	f200 80ad 	bhi.w	80025d6 <UART_SetConfig+0x1aa>
 800247c:	4a68      	ldr	r2, [pc, #416]	; (8002620 <UART_SetConfig+0x1f4>)

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800247e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002482:	5cd3      	ldrb	r3, [r2, r3]
 8002484:	d176      	bne.n	8002574 <UART_SetConfig+0x148>
  {
    switch (clocksource)
 8002486:	2b08      	cmp	r3, #8
 8002488:	d819      	bhi.n	80024be <UART_SetConfig+0x92>
 800248a:	e8df f003 	tbb	[pc, r3]
 800248e:	a7b9      	.short	0xa7b9
 8002490:	18b3185c 	.word	0x18b3185c
 8002494:	1818      	.short	0x1818
 8002496:	5d          	.byte	0x5d
 8002497:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002498:	4a62      	ldr	r2, [pc, #392]	; (8002624 <UART_SetConfig+0x1f8>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d119      	bne.n	80024d2 <UART_SetConfig+0xa6>
 800249e:	4b5f      	ldr	r3, [pc, #380]	; (800261c <UART_SetConfig+0x1f0>)
 80024a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80024aa:	f000 809a 	beq.w	80025e2 <UART_SetConfig+0x1b6>
 80024ae:	d808      	bhi.n	80024c2 <UART_SetConfig+0x96>
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	f000 80a2 	beq.w	80025fa <UART_SetConfig+0x1ce>
 80024b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024ba:	f000 8098 	beq.w	80025ee <UART_SetConfig+0x1c2>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80024be:	2001      	movs	r0, #1
 80024c0:	e0a3      	b.n	800260a <UART_SetConfig+0x1de>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80024c2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80024c6:	d1fa      	bne.n	80024be <UART_SetConfig+0x92>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80024c8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80024cc:	d03b      	beq.n	8002546 <UART_SetConfig+0x11a>
        break;
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
        break;
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80024ce:	4856      	ldr	r0, [pc, #344]	; (8002628 <UART_SetConfig+0x1fc>)
 80024d0:	e06b      	b.n	80025aa <UART_SetConfig+0x17e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80024d2:	4a56      	ldr	r2, [pc, #344]	; (800262c <UART_SetConfig+0x200>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d110      	bne.n	80024fa <UART_SetConfig+0xce>
 80024d8:	4b50      	ldr	r3, [pc, #320]	; (800261c <UART_SetConfig+0x1f0>)
 80024da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024dc:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80024e0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80024e4:	d07d      	beq.n	80025e2 <UART_SetConfig+0x1b6>
 80024e6:	d805      	bhi.n	80024f4 <UART_SetConfig+0xc8>
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	f000 8086 	beq.w	80025fa <UART_SetConfig+0x1ce>
 80024ee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80024f2:	e7e2      	b.n	80024ba <UART_SetConfig+0x8e>
 80024f4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80024f8:	e7e5      	b.n	80024c6 <UART_SetConfig+0x9a>
 80024fa:	4a4d      	ldr	r2, [pc, #308]	; (8002630 <UART_SetConfig+0x204>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d10f      	bne.n	8002520 <UART_SetConfig+0xf4>
 8002500:	4b46      	ldr	r3, [pc, #280]	; (800261c <UART_SetConfig+0x1f0>)
 8002502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002504:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002508:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800250c:	d069      	beq.n	80025e2 <UART_SetConfig+0x1b6>
 800250e:	d804      	bhi.n	800251a <UART_SetConfig+0xee>
 8002510:	2b00      	cmp	r3, #0
 8002512:	d072      	beq.n	80025fa <UART_SetConfig+0x1ce>
 8002514:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002518:	e7cf      	b.n	80024ba <UART_SetConfig+0x8e>
 800251a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800251e:	e7d2      	b.n	80024c6 <UART_SetConfig+0x9a>
 8002520:	4a44      	ldr	r2, [pc, #272]	; (8002634 <UART_SetConfig+0x208>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d1cb      	bne.n	80024be <UART_SetConfig+0x92>
 8002526:	4b3d      	ldr	r3, [pc, #244]	; (800261c <UART_SetConfig+0x1f0>)
 8002528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252a:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800252e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002532:	d056      	beq.n	80025e2 <UART_SetConfig+0x1b6>
 8002534:	d804      	bhi.n	8002540 <UART_SetConfig+0x114>
 8002536:	2b00      	cmp	r3, #0
 8002538:	d05f      	beq.n	80025fa <UART_SetConfig+0x1ce>
 800253a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800253e:	e7bc      	b.n	80024ba <UART_SetConfig+0x8e>
 8002540:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002544:	e7bf      	b.n	80024c6 <UART_SetConfig+0x9a>
        pclk = (uint32_t) HSI_VALUE;
 8002546:	4838      	ldr	r0, [pc, #224]	; (8002628 <UART_SetConfig+0x1fc>)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002548:	6862      	ldr	r2, [r4, #4]
 800254a:	0853      	lsrs	r3, r2, #1
 800254c:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8002550:	fbb0 f0f2 	udiv	r0, r0, r2
 8002554:	b283      	uxth	r3, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002556:	f1a3 0110 	sub.w	r1, r3, #16
 800255a:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800255e:	4291      	cmp	r1, r2
 8002560:	d8ad      	bhi.n	80024be <UART_SetConfig+0x92>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002562:	f020 000f 	bic.w	r0, r0, #15
        huart->Instance->BRR = brrtemp;
 8002566:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002568:	b280      	uxth	r0, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800256a:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 800256e:	4318      	orrs	r0, r3
 8002570:	60d0      	str	r0, [r2, #12]
 8002572:	e049      	b.n	8002608 <UART_SetConfig+0x1dc>
    switch (clocksource)
 8002574:	2b08      	cmp	r3, #8
 8002576:	d8a2      	bhi.n	80024be <UART_SetConfig+0x92>
 8002578:	a201      	add	r2, pc, #4	; (adr r2, 8002580 <UART_SetConfig+0x154>)
 800257a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800257e:	bf00      	nop
 8002580:	080025a5 	.word	0x080025a5
 8002584:	080025cb 	.word	0x080025cb
 8002588:	080024cf 	.word	0x080024cf
 800258c:	080024bf 	.word	0x080024bf
 8002590:	080025d1 	.word	0x080025d1
 8002594:	080024bf 	.word	0x080024bf
 8002598:	080024bf 	.word	0x080024bf
 800259c:	080024bf 	.word	0x080024bf
 80025a0:	080025e9 	.word	0x080025e9
        pclk = HAL_RCC_GetPCLK1Freq();
 80025a4:	f7ff fd4c 	bl	8002040 <HAL_RCC_GetPCLK1Freq>
        pclk = 0U;
        ret = HAL_ERROR;
        break;
    }

    if (pclk != 0U)
 80025a8:	b370      	cbz	r0, 8002608 <UART_SetConfig+0x1dc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80025aa:	6862      	ldr	r2, [r4, #4]
 80025ac:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 80025b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80025b4:	b29b      	uxth	r3, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80025b6:	f1a3 0110 	sub.w	r1, r3, #16
 80025ba:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80025be:	4291      	cmp	r1, r2
 80025c0:	f63f af7d 	bhi.w	80024be <UART_SetConfig+0x92>
      {
        huart->Instance->BRR = usartdiv;
 80025c4:	6822      	ldr	r2, [r4, #0]
 80025c6:	60d3      	str	r3, [r2, #12]
 80025c8:	e01e      	b.n	8002608 <UART_SetConfig+0x1dc>
        pclk = HAL_RCC_GetPCLK2Freq();
 80025ca:	f7ff fd51 	bl	8002070 <HAL_RCC_GetPCLK2Freq>
        break;
 80025ce:	e7eb      	b.n	80025a8 <UART_SetConfig+0x17c>
        pclk = HAL_RCC_GetSysClockFreq();
 80025d0:	f7ff fc5e 	bl	8001e90 <HAL_RCC_GetSysClockFreq>
        break;
 80025d4:	e7e8      	b.n	80025a8 <UART_SetConfig+0x17c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80025d6:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80025da:	d1f6      	bne.n	80025ca <UART_SetConfig+0x19e>
        pclk = HAL_RCC_GetPCLK2Freq();
 80025dc:	f7ff fd48 	bl	8002070 <HAL_RCC_GetPCLK2Freq>
        break;
 80025e0:	e010      	b.n	8002604 <UART_SetConfig+0x1d8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80025e2:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80025e6:	d0af      	beq.n	8002548 <UART_SetConfig+0x11c>
        pclk = (uint32_t) LSE_VALUE;
 80025e8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80025ec:	e7dd      	b.n	80025aa <UART_SetConfig+0x17e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80025ee:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80025f2:	d1ed      	bne.n	80025d0 <UART_SetConfig+0x1a4>
        pclk = HAL_RCC_GetSysClockFreq();
 80025f4:	f7ff fc4c 	bl	8001e90 <HAL_RCC_GetSysClockFreq>
        break;
 80025f8:	e004      	b.n	8002604 <UART_SetConfig+0x1d8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80025fa:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80025fe:	d1d1      	bne.n	80025a4 <UART_SetConfig+0x178>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002600:	f7ff fd1e 	bl	8002040 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8002604:	2800      	cmp	r0, #0
 8002606:	d19f      	bne.n	8002548 <UART_SetConfig+0x11c>
 8002608:	2000      	movs	r0, #0
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800260a:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 800260c:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64

  return ret;
}
 8002610:	bd38      	pop	{r3, r4, r5, pc}
 8002612:	bf00      	nop
 8002614:	efff69f3 	.word	0xefff69f3
 8002618:	40013800 	.word	0x40013800
 800261c:	40021000 	.word	0x40021000
 8002620:	08003d3c 	.word	0x08003d3c
 8002624:	40004400 	.word	0x40004400
 8002628:	007a1200 	.word	0x007a1200
 800262c:	40004800 	.word	0x40004800
 8002630:	40004c00 	.word	0x40004c00
 8002634:	40005000 	.word	0x40005000

08002638 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002638:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800263a:	07da      	lsls	r2, r3, #31
{
 800263c:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800263e:	d506      	bpl.n	800264e <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002640:	6801      	ldr	r1, [r0, #0]
 8002642:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8002644:	684a      	ldr	r2, [r1, #4]
 8002646:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800264a:	4322      	orrs	r2, r4
 800264c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800264e:	079c      	lsls	r4, r3, #30
 8002650:	d506      	bpl.n	8002660 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002652:	6801      	ldr	r1, [r0, #0]
 8002654:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8002656:	684a      	ldr	r2, [r1, #4]
 8002658:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800265c:	4322      	orrs	r2, r4
 800265e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002660:	0759      	lsls	r1, r3, #29
 8002662:	d506      	bpl.n	8002672 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002664:	6801      	ldr	r1, [r0, #0]
 8002666:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8002668:	684a      	ldr	r2, [r1, #4]
 800266a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800266e:	4322      	orrs	r2, r4
 8002670:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002672:	071a      	lsls	r2, r3, #28
 8002674:	d506      	bpl.n	8002684 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002676:	6801      	ldr	r1, [r0, #0]
 8002678:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800267a:	684a      	ldr	r2, [r1, #4]
 800267c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002680:	4322      	orrs	r2, r4
 8002682:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002684:	06dc      	lsls	r4, r3, #27
 8002686:	d506      	bpl.n	8002696 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002688:	6801      	ldr	r1, [r0, #0]
 800268a:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800268c:	688a      	ldr	r2, [r1, #8]
 800268e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002692:	4322      	orrs	r2, r4
 8002694:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002696:	0699      	lsls	r1, r3, #26
 8002698:	d506      	bpl.n	80026a8 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800269a:	6801      	ldr	r1, [r0, #0]
 800269c:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800269e:	688a      	ldr	r2, [r1, #8]
 80026a0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80026a4:	4322      	orrs	r2, r4
 80026a6:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80026a8:	065a      	lsls	r2, r3, #25
 80026aa:	d50f      	bpl.n	80026cc <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80026ac:	6801      	ldr	r1, [r0, #0]
 80026ae:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80026b0:	684a      	ldr	r2, [r1, #4]
 80026b2:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80026b6:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80026b8:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80026bc:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80026be:	d105      	bne.n	80026cc <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80026c0:	684a      	ldr	r2, [r1, #4]
 80026c2:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80026c4:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80026c8:	4322      	orrs	r2, r4
 80026ca:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80026cc:	061b      	lsls	r3, r3, #24
 80026ce:	d506      	bpl.n	80026de <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80026d0:	6802      	ldr	r2, [r0, #0]
 80026d2:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80026d4:	6853      	ldr	r3, [r2, #4]
 80026d6:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80026da:	430b      	orrs	r3, r1
 80026dc:	6053      	str	r3, [r2, #4]
  }
}
 80026de:	bd10      	pop	{r4, pc}

080026e0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80026e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80026e4:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80026e8:	4604      	mov	r4, r0
 80026ea:	460e      	mov	r6, r1
 80026ec:	4615      	mov	r5, r2
 80026ee:	461f      	mov	r7, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026f0:	6822      	ldr	r2, [r4, #0]
 80026f2:	69d3      	ldr	r3, [r2, #28]
 80026f4:	ea36 0303 	bics.w	r3, r6, r3
 80026f8:	bf0c      	ite	eq
 80026fa:	2301      	moveq	r3, #1
 80026fc:	2300      	movne	r3, #0
 80026fe:	42ab      	cmp	r3, r5
 8002700:	d001      	beq.n	8002706 <UART_WaitOnFlagUntilTimeout+0x26>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 8002702:	2000      	movs	r0, #0
 8002704:	e01a      	b.n	800273c <UART_WaitOnFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 8002706:	f1b8 3fff 	cmp.w	r8, #4294967295
 800270a:	d0f2      	beq.n	80026f2 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800270c:	f7fe f872 	bl	80007f4 <HAL_GetTick>
 8002710:	1bc0      	subs	r0, r0, r7
 8002712:	4540      	cmp	r0, r8
 8002714:	6820      	ldr	r0, [r4, #0]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002716:	6803      	ldr	r3, [r0, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002718:	d802      	bhi.n	8002720 <UART_WaitOnFlagUntilTimeout+0x40>
 800271a:	f1b8 0f00 	cmp.w	r8, #0
 800271e:	d10f      	bne.n	8002740 <UART_WaitOnFlagUntilTimeout+0x60>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002720:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002724:	6003      	str	r3, [r0, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002726:	6883      	ldr	r3, [r0, #8]
 8002728:	f023 0301 	bic.w	r3, r3, #1
 800272c:	6083      	str	r3, [r0, #8]
        huart->gState = HAL_UART_STATE_READY;
 800272e:	2320      	movs	r3, #32
 8002730:	67a3      	str	r3, [r4, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002732:	67e3      	str	r3, [r4, #124]	; 0x7c
          __HAL_UNLOCK(huart);
 8002734:	2300      	movs	r3, #0
 8002736:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
          return HAL_TIMEOUT;
 800273a:	2003      	movs	r0, #3
}
 800273c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002740:	075a      	lsls	r2, r3, #29
 8002742:	d5d5      	bpl.n	80026f0 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002744:	69c3      	ldr	r3, [r0, #28]
 8002746:	051b      	lsls	r3, r3, #20
 8002748:	d5d2      	bpl.n	80026f0 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800274a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800274e:	6203      	str	r3, [r0, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002750:	6803      	ldr	r3, [r0, #0]
 8002752:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002756:	6003      	str	r3, [r0, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002758:	6883      	ldr	r3, [r0, #8]
 800275a:	f023 0301 	bic.w	r3, r3, #1
 800275e:	6083      	str	r3, [r0, #8]
          huart->gState = HAL_UART_STATE_READY;
 8002760:	2320      	movs	r3, #32
 8002762:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002764:	67e3      	str	r3, [r4, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002766:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 800276a:	e7e3      	b.n	8002734 <UART_WaitOnFlagUntilTimeout+0x54>

0800276c <HAL_UART_Transmit>:
{
 800276c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8002770:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8002772:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8002774:	2b20      	cmp	r3, #32
{
 8002776:	4604      	mov	r4, r0
 8002778:	460e      	mov	r6, r1
 800277a:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 800277c:	d14e      	bne.n	800281c <HAL_UART_Transmit+0xb0>
    if ((pData == NULL) || (Size == 0U))
 800277e:	2900      	cmp	r1, #0
 8002780:	d04a      	beq.n	8002818 <HAL_UART_Transmit+0xac>
 8002782:	2a00      	cmp	r2, #0
 8002784:	d048      	beq.n	8002818 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 8002786:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 800278a:	2b01      	cmp	r3, #1
 800278c:	d046      	beq.n	800281c <HAL_UART_Transmit+0xb0>
 800278e:	2301      	movs	r3, #1
 8002790:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002794:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002796:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002798:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800279c:	6783      	str	r3, [r0, #120]	; 0x78
    tickstart = HAL_GetTick();
 800279e:	f7fe f829 	bl	80007f4 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027a2:	68a2      	ldr	r2, [r4, #8]
    huart->TxXferSize  = Size;
 80027a4:	f8a4 7050 	strh.w	r7, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027a8:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    tickstart = HAL_GetTick();
 80027ac:	4603      	mov	r3, r0
    huart->TxXferCount = Size;
 80027ae:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027b2:	d103      	bne.n	80027bc <HAL_UART_Transmit+0x50>
 80027b4:	6922      	ldr	r2, [r4, #16]
 80027b6:	b90a      	cbnz	r2, 80027bc <HAL_UART_Transmit+0x50>
 80027b8:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 80027ba:	4616      	mov	r6, r2
    __HAL_UNLOCK(huart);
 80027bc:	2200      	movs	r2, #0
 80027be:	f884 2074 	strb.w	r2, [r4, #116]	; 0x74
    while (huart->TxXferCount > 0U)
 80027c2:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80027c6:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 80027ca:	b292      	uxth	r2, r2
 80027cc:	b93a      	cbnz	r2, 80027de <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80027ce:	2140      	movs	r1, #64	; 0x40
 80027d0:	4620      	mov	r0, r4
 80027d2:	f7ff ff85 	bl	80026e0 <UART_WaitOnFlagUntilTimeout>
 80027d6:	b950      	cbnz	r0, 80027ee <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 80027d8:	2320      	movs	r3, #32
 80027da:	67a3      	str	r3, [r4, #120]	; 0x78
    return HAL_OK;
 80027dc:	e008      	b.n	80027f0 <HAL_UART_Transmit+0x84>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80027de:	2200      	movs	r2, #0
 80027e0:	2180      	movs	r1, #128	; 0x80
 80027e2:	4620      	mov	r0, r4
 80027e4:	9303      	str	r3, [sp, #12]
 80027e6:	f7ff ff7b 	bl	80026e0 <UART_WaitOnFlagUntilTimeout>
 80027ea:	9b03      	ldr	r3, [sp, #12]
 80027ec:	b118      	cbz	r0, 80027f6 <HAL_UART_Transmit+0x8a>
        return HAL_TIMEOUT;
 80027ee:	2003      	movs	r0, #3
}
 80027f0:	b004      	add	sp, #16
 80027f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (pdata8bits == NULL)
 80027f6:	6821      	ldr	r1, [r4, #0]
 80027f8:	b95e      	cbnz	r6, 8002812 <HAL_UART_Transmit+0xa6>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80027fa:	f835 2b02 	ldrh.w	r2, [r5], #2
 80027fe:	f3c2 0208 	ubfx	r2, r2, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002802:	850a      	strh	r2, [r1, #40]	; 0x28
      huart->TxXferCount--;
 8002804:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8002808:	3a01      	subs	r2, #1
 800280a:	b292      	uxth	r2, r2
 800280c:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 8002810:	e7d7      	b.n	80027c2 <HAL_UART_Transmit+0x56>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002812:	f816 2b01 	ldrb.w	r2, [r6], #1
 8002816:	e7f4      	b.n	8002802 <HAL_UART_Transmit+0x96>
      return  HAL_ERROR;
 8002818:	2001      	movs	r0, #1
 800281a:	e7e9      	b.n	80027f0 <HAL_UART_Transmit+0x84>
    return HAL_BUSY;
 800281c:	2002      	movs	r0, #2
 800281e:	e7e7      	b.n	80027f0 <HAL_UART_Transmit+0x84>

08002820 <UART_CheckIdleState>:
{
 8002820:	b530      	push	{r4, r5, lr}
 8002822:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002824:	2500      	movs	r5, #0
{
 8002826:	b085      	sub	sp, #20
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002828:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
  tickstart = HAL_GetTick();
 800282c:	f7fd ffe2 	bl	80007f4 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002830:	6822      	ldr	r2, [r4, #0]
 8002832:	6812      	ldr	r2, [r2, #0]
 8002834:	0711      	lsls	r1, r2, #28
  tickstart = HAL_GetTick();
 8002836:	4603      	mov	r3, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002838:	d415      	bmi.n	8002866 <UART_CheckIdleState+0x46>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800283a:	6822      	ldr	r2, [r4, #0]
 800283c:	6812      	ldr	r2, [r2, #0]
 800283e:	0752      	lsls	r2, r2, #29
 8002840:	d509      	bpl.n	8002856 <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002842:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8002846:	9200      	str	r2, [sp, #0]
 8002848:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800284c:	2200      	movs	r2, #0
 800284e:	4620      	mov	r0, r4
 8002850:	f7ff ff46 	bl	80026e0 <UART_WaitOnFlagUntilTimeout>
 8002854:	b9a0      	cbnz	r0, 8002880 <UART_CheckIdleState+0x60>
  huart->gState = HAL_UART_STATE_READY;
 8002856:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002858:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800285a:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 800285c:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8002860:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002862:	6620      	str	r0, [r4, #96]	; 0x60
  return HAL_OK;
 8002864:	e00d      	b.n	8002882 <UART_CheckIdleState+0x62>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002866:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 800286a:	9200      	str	r2, [sp, #0]
 800286c:	9003      	str	r0, [sp, #12]
 800286e:	462a      	mov	r2, r5
 8002870:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002874:	4620      	mov	r0, r4
 8002876:	f7ff ff33 	bl	80026e0 <UART_WaitOnFlagUntilTimeout>
 800287a:	9b03      	ldr	r3, [sp, #12]
 800287c:	2800      	cmp	r0, #0
 800287e:	d0dc      	beq.n	800283a <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 8002880:	2003      	movs	r0, #3
}
 8002882:	b005      	add	sp, #20
 8002884:	bd30      	pop	{r4, r5, pc}

08002886 <HAL_UART_Init>:
{
 8002886:	b510      	push	{r4, lr}
  if (huart == NULL)
 8002888:	4604      	mov	r4, r0
 800288a:	b340      	cbz	r0, 80028de <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 800288c:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800288e:	b91b      	cbnz	r3, 8002898 <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 8002890:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    HAL_UART_MspInit(huart);
 8002894:	f7fd fe64 	bl	8000560 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8002898:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800289a:	2324      	movs	r3, #36	; 0x24
 800289c:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 800289e:	6813      	ldr	r3, [r2, #0]
 80028a0:	f023 0301 	bic.w	r3, r3, #1
 80028a4:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80028a6:	4620      	mov	r0, r4
 80028a8:	f7ff fdc0 	bl	800242c <UART_SetConfig>
 80028ac:	2801      	cmp	r0, #1
 80028ae:	d016      	beq.n	80028de <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80028b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80028b2:	b113      	cbz	r3, 80028ba <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 80028b4:	4620      	mov	r0, r4
 80028b6:	f7ff febf 	bl	8002638 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028ba:	6823      	ldr	r3, [r4, #0]
 80028bc:	685a      	ldr	r2, [r3, #4]
 80028be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80028c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028c4:	689a      	ldr	r2, [r3, #8]
 80028c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80028ca:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 80028d2:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 80028d4:	601a      	str	r2, [r3, #0]
}
 80028d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 80028da:	f7ff bfa1 	b.w	8002820 <UART_CheckIdleState>
}
 80028de:	2001      	movs	r0, #1
 80028e0:	bd10      	pop	{r4, pc}

080028e2 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80028e2:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 80028e6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80028ea:	045b      	lsls	r3, r3, #17
 80028ec:	0c5b      	lsrs	r3, r3, #17
 80028ee:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 80028f2:	2000      	movs	r0, #0
 80028f4:	4770      	bx	lr

080028f6 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80028f6:	b084      	sub	sp, #16
 80028f8:	b510      	push	{r4, lr}
 80028fa:	ac03      	add	r4, sp, #12
 80028fc:	e884 000e 	stmia.w	r4, {r1, r2, r3}

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;

  return HAL_OK;
}
 8002900:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8002904:	2301      	movs	r3, #1
 8002906:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  USBx->CNTR = 0U;
 800290a:	2300      	movs	r3, #0
 800290c:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
}
 8002910:	b004      	add	sp, #16
  USBx->ISTR = 0U;
 8002912:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  USBx->BTABLE = BTABLE_ADDRESS;
 8002916:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
}
 800291a:	4618      	mov	r0, r3
 800291c:	4770      	bx	lr

0800291e <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 800291e:	b911      	cbnz	r1, 8002926 <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8002920:	2380      	movs	r3, #128	; 0x80
 8002922:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }

  return HAL_OK;
}
 8002926:	2000      	movs	r0, #0
 8002928:	4770      	bx	lr

0800292a <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800292a:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 800292e:	b280      	uxth	r0, r0
 8002930:	4770      	bx	lr

08002932 <USB_WritePMA>:
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8002932:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8002936:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8002938:	4410      	add	r0, r2
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800293a:	085b      	lsrs	r3, r3, #1
 800293c:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8002940:	1a40      	subs	r0, r0, r1

  for (i = n; i != 0U; i--)
 8002942:	4299      	cmp	r1, r3
 8002944:	d100      	bne.n	8002948 <USB_WritePMA+0x16>
    pdwVal++;
#endif

    pBuf++;
  }
}
 8002946:	4770      	bx	lr
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8002948:	880a      	ldrh	r2, [r1, #0]
    *pdwVal = (uint16_t)temp2;
 800294a:	5242      	strh	r2, [r0, r1]
    pBuf++;
 800294c:	3102      	adds	r1, #2
  for (i = n; i != 0U; i--)
 800294e:	e7f8      	b.n	8002942 <USB_WritePMA+0x10>

08002950 <USB_EPStartXfer>:
{
 8002950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (ep->is_in == 1U)
 8002952:	784a      	ldrb	r2, [r1, #1]
 8002954:	7b0f      	ldrb	r7, [r1, #12]
 8002956:	2a01      	cmp	r2, #1
{
 8002958:	4605      	mov	r5, r0
 800295a:	460c      	mov	r4, r1
  if (ep->is_in == 1U)
 800295c:	f040 81ab 	bne.w	8002cb6 <USB_EPStartXfer+0x366>
    if (ep->xfer_len > ep->maxpacket)
 8002960:	690a      	ldr	r2, [r1, #16]
 8002962:	698e      	ldr	r6, [r1, #24]
 8002964:	6949      	ldr	r1, [r1, #20]
 8002966:	4296      	cmp	r6, r2
 8002968:	bf28      	it	cs
 800296a:	4616      	movcs	r6, r2
    if (ep->doublebuffer == 0U)
 800296c:	bb0f      	cbnz	r7, 80029b2 <USB_EPStartXfer+0x62>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800296e:	b2b6      	uxth	r6, r6
 8002970:	88e2      	ldrh	r2, [r4, #6]
 8002972:	4633      	mov	r3, r6
 8002974:	f7ff ffdd 	bl	8002932 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8002978:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800297c:	7823      	ldrb	r3, [r4, #0]
 800297e:	f205 4102 	addw	r1, r5, #1026	; 0x402
 8002982:	fa11 f282 	uxtah	r2, r1, r2
 8002986:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800298a:	8016      	strh	r6, [r2, #0]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800298c:	7822      	ldrb	r2, [r4, #0]
 800298e:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8002992:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002996:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800299a:	041b      	lsls	r3, r3, #16
 800299c:	0c1b      	lsrs	r3, r3, #16
 800299e:	f083 0330 	eor.w	r3, r3, #48	; 0x30
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80029a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029aa:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
  return HAL_OK;
 80029ae:	2000      	movs	r0, #0
}
 80029b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (ep->type == EP_TYPE_BULK)
 80029b2:	78e3      	ldrb	r3, [r4, #3]
 80029b4:	7827      	ldrb	r7, [r4, #0]
 80029b6:	2b02      	cmp	r3, #2
 80029b8:	f040 813f 	bne.w	8002c3a <USB_EPStartXfer+0x2ea>
        if (ep->xfer_len_db > ep->maxpacket)
 80029bc:	6a23      	ldr	r3, [r4, #32]
 80029be:	429a      	cmp	r2, r3
          PCD_SET_EP_DBUF(USBx, ep->num);
 80029c0:	f830 2027 	ldrh.w	r2, [r0, r7, lsl #2]
        if (ep->xfer_len_db > ep->maxpacket)
 80029c4:	f080 8120 	bcs.w	8002c08 <USB_EPStartXfer+0x2b8>
          PCD_SET_EP_DBUF(USBx, ep->num);
 80029c8:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80029cc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80029d0:	0412      	lsls	r2, r2, #16
 80029d2:	0c12      	lsrs	r2, r2, #16
 80029d4:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 80029d8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80029dc:	f820 2027 	strh.w	r2, [r0, r7, lsl #2]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80029e0:	7820      	ldrb	r0, [r4, #0]
 80029e2:	f835 2020 	ldrh.w	r2, [r5, r0, lsl #2]
          ep->xfer_len_db -= len;
 80029e6:	1b9b      	subs	r3, r3, r6
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80029e8:	f012 0f40 	tst.w	r2, #64	; 0x40
          ep->xfer_len_db -= len;
 80029ec:	6223      	str	r3, [r4, #32]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80029ee:	7862      	ldrb	r2, [r4, #1]
 80029f0:	b2b3      	uxth	r3, r6
 80029f2:	f000 8086 	beq.w	8002b02 <USB_EPStartXfer+0x1b2>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80029f6:	2a00      	cmp	r2, #0
 80029f8:	d153      	bne.n	8002aa2 <USB_EPStartXfer+0x152>
 80029fa:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 80029fe:	f205 4706 	addw	r7, r5, #1030	; 0x406
 8002a02:	fa17 f282 	uxtah	r2, r7, r2
 8002a06:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8002a0a:	2e00      	cmp	r6, #0
 8002a0c:	d138      	bne.n	8002a80 <USB_EPStartXfer+0x130>
 8002a0e:	8810      	ldrh	r0, [r2, #0]
 8002a10:	f420 40f8 	bic.w	r0, r0, #31744	; 0x7c00
 8002a14:	0400      	lsls	r0, r0, #16
 8002a16:	0c00      	lsrs	r0, r0, #16
 8002a18:	8010      	strh	r0, [r2, #0]
 8002a1a:	8810      	ldrh	r0, [r2, #0]
 8002a1c:	ea6f 4040 	mvn.w	r0, r0, lsl #17
 8002a20:	ea6f 4050 	mvn.w	r0, r0, lsr #17
 8002a24:	b280      	uxth	r0, r0
 8002a26:	8010      	strh	r0, [r2, #0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002a28:	8962      	ldrh	r2, [r4, #10]
 8002a2a:	4628      	mov	r0, r5
 8002a2c:	f7ff ff81 	bl	8002932 <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 8002a30:	6a20      	ldr	r0, [r4, #32]
 8002a32:	6923      	ldr	r3, [r4, #16]
            ep->xfer_buff += len;
 8002a34:	6961      	ldr	r1, [r4, #20]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002a36:	7862      	ldrb	r2, [r4, #1]
            if (ep->xfer_len_db > ep->maxpacket)
 8002a38:	4298      	cmp	r0, r3
              ep->xfer_len_db -= len;
 8002a3a:	bf8c      	ite	hi
 8002a3c:	1b83      	subhi	r3, r0, r6
              ep->xfer_len_db = 0U;
 8002a3e:	2300      	movls	r3, #0
            ep->xfer_buff += len;
 8002a40:	4431      	add	r1, r6
 8002a42:	bf88      	it	hi
 8002a44:	4630      	movhi	r0, r6
 8002a46:	6223      	str	r3, [r4, #32]
 8002a48:	6161      	str	r1, [r4, #20]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002a4a:	b283      	uxth	r3, r0
 8002a4c:	2a00      	cmp	r2, #0
 8002a4e:	d14b      	bne.n	8002ae8 <USB_EPStartXfer+0x198>
 8002a50:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8002a54:	7826      	ldrb	r6, [r4, #0]
 8002a56:	f205 4702 	addw	r7, r5, #1026	; 0x402
 8002a5a:	fa17 f282 	uxtah	r2, r7, r2
 8002a5e:	eb02 02c6 	add.w	r2, r2, r6, lsl #3
 8002a62:	bb50      	cbnz	r0, 8002aba <USB_EPStartXfer+0x16a>
 8002a64:	8810      	ldrh	r0, [r2, #0]
 8002a66:	f420 40f8 	bic.w	r0, r0, #31744	; 0x7c00
 8002a6a:	0400      	lsls	r0, r0, #16
 8002a6c:	0c00      	lsrs	r0, r0, #16
 8002a6e:	8010      	strh	r0, [r2, #0]
 8002a70:	8810      	ldrh	r0, [r2, #0]
 8002a72:	ea6f 4040 	mvn.w	r0, r0, lsl #17
 8002a76:	ea6f 4050 	mvn.w	r0, r0, lsr #17
 8002a7a:	b280      	uxth	r0, r0
 8002a7c:	8010      	strh	r0, [r2, #0]
 8002a7e:	e025      	b.n	8002acc <USB_EPStartXfer+0x17c>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002a80:	2e3e      	cmp	r6, #62	; 0x3e
 8002a82:	d805      	bhi.n	8002a90 <USB_EPStartXfer+0x140>
 8002a84:	0870      	lsrs	r0, r6, #1
 8002a86:	07f7      	lsls	r7, r6, #31
 8002a88:	bf48      	it	mi
 8002a8a:	3001      	addmi	r0, #1
 8002a8c:	0280      	lsls	r0, r0, #10
 8002a8e:	e7c9      	b.n	8002a24 <USB_EPStartXfer+0xd4>
 8002a90:	0977      	lsrs	r7, r6, #5
 8002a92:	06f0      	lsls	r0, r6, #27
 8002a94:	48a7      	ldr	r0, [pc, #668]	; (8002d34 <USB_EPStartXfer+0x3e4>)
 8002a96:	bf08      	it	eq
 8002a98:	f107 37ff 	addeq.w	r7, r7, #4294967295
 8002a9c:	ea40 2087 	orr.w	r0, r0, r7, lsl #10
 8002aa0:	e7c0      	b.n	8002a24 <USB_EPStartXfer+0xd4>
 8002aa2:	2a01      	cmp	r2, #1
 8002aa4:	d1c0      	bne.n	8002a28 <USB_EPStartXfer+0xd8>
 8002aa6:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8002aaa:	f205 4706 	addw	r7, r5, #1030	; 0x406
 8002aae:	fa17 f282 	uxtah	r2, r7, r2
 8002ab2:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8002ab6:	8013      	strh	r3, [r2, #0]
 8002ab8:	e7b6      	b.n	8002a28 <USB_EPStartXfer+0xd8>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002aba:	283e      	cmp	r0, #62	; 0x3e
 8002abc:	d80b      	bhi.n	8002ad6 <USB_EPStartXfer+0x186>
 8002abe:	0846      	lsrs	r6, r0, #1
 8002ac0:	07c7      	lsls	r7, r0, #31
 8002ac2:	bf48      	it	mi
 8002ac4:	3601      	addmi	r6, #1
 8002ac6:	02b6      	lsls	r6, r6, #10
 8002ac8:	b2b6      	uxth	r6, r6
 8002aca:	8016      	strh	r6, [r2, #0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002acc:	8922      	ldrh	r2, [r4, #8]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002ace:	4628      	mov	r0, r5
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002ad0:	f7ff ff2f 	bl	8002932 <USB_WritePMA>
 8002ad4:	e75a      	b.n	800298c <USB_EPStartXfer+0x3c>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002ad6:	0946      	lsrs	r6, r0, #5
 8002ad8:	06c0      	lsls	r0, r0, #27
 8002ada:	4896      	ldr	r0, [pc, #600]	; (8002d34 <USB_EPStartXfer+0x3e4>)
 8002adc:	bf08      	it	eq
 8002ade:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8002ae2:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
 8002ae6:	e7c8      	b.n	8002a7a <USB_EPStartXfer+0x12a>
 8002ae8:	2a01      	cmp	r2, #1
 8002aea:	d1ef      	bne.n	8002acc <USB_EPStartXfer+0x17c>
 8002aec:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8002af0:	7820      	ldrb	r0, [r4, #0]
 8002af2:	f205 4602 	addw	r6, r5, #1026	; 0x402
 8002af6:	fa16 f282 	uxtah	r2, r6, r2
 8002afa:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8002afe:	8013      	strh	r3, [r2, #0]
 8002b00:	e7e4      	b.n	8002acc <USB_EPStartXfer+0x17c>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002b02:	2a00      	cmp	r2, #0
 8002b04:	d153      	bne.n	8002bae <USB_EPStartXfer+0x25e>
 8002b06:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8002b0a:	f205 4702 	addw	r7, r5, #1026	; 0x402
 8002b0e:	fa17 f282 	uxtah	r2, r7, r2
 8002b12:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8002b16:	2e00      	cmp	r6, #0
 8002b18:	d138      	bne.n	8002b8c <USB_EPStartXfer+0x23c>
 8002b1a:	8810      	ldrh	r0, [r2, #0]
 8002b1c:	f420 40f8 	bic.w	r0, r0, #31744	; 0x7c00
 8002b20:	0400      	lsls	r0, r0, #16
 8002b22:	0c00      	lsrs	r0, r0, #16
 8002b24:	8010      	strh	r0, [r2, #0]
 8002b26:	8810      	ldrh	r0, [r2, #0]
 8002b28:	ea6f 4040 	mvn.w	r0, r0, lsl #17
 8002b2c:	ea6f 4050 	mvn.w	r0, r0, lsr #17
 8002b30:	b280      	uxth	r0, r0
 8002b32:	8010      	strh	r0, [r2, #0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002b34:	8922      	ldrh	r2, [r4, #8]
 8002b36:	4628      	mov	r0, r5
 8002b38:	f7ff fefb 	bl	8002932 <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 8002b3c:	6a20      	ldr	r0, [r4, #32]
 8002b3e:	6923      	ldr	r3, [r4, #16]
            ep->xfer_buff += len;
 8002b40:	6961      	ldr	r1, [r4, #20]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002b42:	7862      	ldrb	r2, [r4, #1]
            if (ep->xfer_len_db > ep->maxpacket)
 8002b44:	4298      	cmp	r0, r3
              ep->xfer_len_db -= len;
 8002b46:	bf8c      	ite	hi
 8002b48:	1b83      	subhi	r3, r0, r6
              ep->xfer_len_db = 0U;
 8002b4a:	2300      	movls	r3, #0
            ep->xfer_buff += len;
 8002b4c:	4431      	add	r1, r6
 8002b4e:	bf88      	it	hi
 8002b50:	4630      	movhi	r0, r6
 8002b52:	6223      	str	r3, [r4, #32]
 8002b54:	6161      	str	r1, [r4, #20]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002b56:	b283      	uxth	r3, r0
 8002b58:	2a00      	cmp	r2, #0
 8002b5a:	d148      	bne.n	8002bee <USB_EPStartXfer+0x29e>
 8002b5c:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8002b60:	7826      	ldrb	r6, [r4, #0]
 8002b62:	f205 4706 	addw	r7, r5, #1030	; 0x406
 8002b66:	fa17 f282 	uxtah	r2, r7, r2
 8002b6a:	eb02 02c6 	add.w	r2, r2, r6, lsl #3
 8002b6e:	bb50      	cbnz	r0, 8002bc6 <USB_EPStartXfer+0x276>
 8002b70:	8810      	ldrh	r0, [r2, #0]
 8002b72:	f420 40f8 	bic.w	r0, r0, #31744	; 0x7c00
 8002b76:	0400      	lsls	r0, r0, #16
 8002b78:	0c00      	lsrs	r0, r0, #16
 8002b7a:	8010      	strh	r0, [r2, #0]
 8002b7c:	8810      	ldrh	r0, [r2, #0]
 8002b7e:	ea6f 4040 	mvn.w	r0, r0, lsl #17
 8002b82:	ea6f 4050 	mvn.w	r0, r0, lsr #17
 8002b86:	b280      	uxth	r0, r0
 8002b88:	8010      	strh	r0, [r2, #0]
 8002b8a:	e025      	b.n	8002bd8 <USB_EPStartXfer+0x288>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002b8c:	2e3e      	cmp	r6, #62	; 0x3e
 8002b8e:	d805      	bhi.n	8002b9c <USB_EPStartXfer+0x24c>
 8002b90:	0870      	lsrs	r0, r6, #1
 8002b92:	07f7      	lsls	r7, r6, #31
 8002b94:	bf48      	it	mi
 8002b96:	3001      	addmi	r0, #1
 8002b98:	0280      	lsls	r0, r0, #10
 8002b9a:	e7c9      	b.n	8002b30 <USB_EPStartXfer+0x1e0>
 8002b9c:	0977      	lsrs	r7, r6, #5
 8002b9e:	06f0      	lsls	r0, r6, #27
 8002ba0:	4864      	ldr	r0, [pc, #400]	; (8002d34 <USB_EPStartXfer+0x3e4>)
 8002ba2:	bf08      	it	eq
 8002ba4:	f107 37ff 	addeq.w	r7, r7, #4294967295
 8002ba8:	ea40 2087 	orr.w	r0, r0, r7, lsl #10
 8002bac:	e7c0      	b.n	8002b30 <USB_EPStartXfer+0x1e0>
 8002bae:	2a01      	cmp	r2, #1
 8002bb0:	d1c0      	bne.n	8002b34 <USB_EPStartXfer+0x1e4>
 8002bb2:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8002bb6:	f205 4702 	addw	r7, r5, #1026	; 0x402
 8002bba:	fa17 f282 	uxtah	r2, r7, r2
 8002bbe:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8002bc2:	8013      	strh	r3, [r2, #0]
 8002bc4:	e7b6      	b.n	8002b34 <USB_EPStartXfer+0x1e4>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002bc6:	283e      	cmp	r0, #62	; 0x3e
 8002bc8:	d808      	bhi.n	8002bdc <USB_EPStartXfer+0x28c>
 8002bca:	0846      	lsrs	r6, r0, #1
 8002bcc:	07c0      	lsls	r0, r0, #31
 8002bce:	bf48      	it	mi
 8002bd0:	3601      	addmi	r6, #1
 8002bd2:	02b6      	lsls	r6, r6, #10
 8002bd4:	b2b6      	uxth	r6, r6
 8002bd6:	8016      	strh	r6, [r2, #0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002bd8:	8962      	ldrh	r2, [r4, #10]
 8002bda:	e778      	b.n	8002ace <USB_EPStartXfer+0x17e>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002bdc:	0946      	lsrs	r6, r0, #5
 8002bde:	06c7      	lsls	r7, r0, #27
 8002be0:	4854      	ldr	r0, [pc, #336]	; (8002d34 <USB_EPStartXfer+0x3e4>)
 8002be2:	bf08      	it	eq
 8002be4:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8002be8:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
 8002bec:	e7cb      	b.n	8002b86 <USB_EPStartXfer+0x236>
 8002bee:	2a01      	cmp	r2, #1
 8002bf0:	d1f2      	bne.n	8002bd8 <USB_EPStartXfer+0x288>
 8002bf2:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8002bf6:	7820      	ldrb	r0, [r4, #0]
 8002bf8:	f205 4606 	addw	r6, r5, #1030	; 0x406
 8002bfc:	fa16 f282 	uxtah	r2, r6, r2
 8002c00:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8002c04:	8013      	strh	r3, [r2, #0]
 8002c06:	e7e7      	b.n	8002bd8 <USB_EPStartXfer+0x288>
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8002c08:	f422 42e2 	bic.w	r2, r2, #28928	; 0x7100
 8002c0c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002c10:	0412      	lsls	r2, r2, #16
 8002c12:	0c12      	lsrs	r2, r2, #16
 8002c14:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c18:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002c1c:	f820 2027 	strh.w	r2, [r0, r7, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8002c20:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002c24:	7826      	ldrb	r6, [r4, #0]
 8002c26:	f200 4702 	addw	r7, r0, #1026	; 0x402
 8002c2a:	fa17 f282 	uxtah	r2, r7, r2
 8002c2e:	eb02 02c6 	add.w	r2, r2, r6, lsl #3
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	8013      	strh	r3, [r2, #0]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002c36:	8922      	ldrh	r2, [r4, #8]
 8002c38:	e74a      	b.n	8002ad0 <USB_EPStartXfer+0x180>
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8002c3a:	f830 2027 	ldrh.w	r2, [r0, r7, lsl #2]
 8002c3e:	f012 0f40 	tst.w	r2, #64	; 0x40
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002c42:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002c46:	bf15      	itete	ne
 8002c48:	f200 4006 	addwne	r0, r0, #1030	; 0x406
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002c4c:	f205 4002 	addweq	r0, r5, #1026	; 0x402
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002c50:	fa10 f282 	uxtahne	r2, r0, r2
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002c54:	fa10 f282 	uxtaheq	r2, r0, r2
 8002c58:	b2b3      	uxth	r3, r6
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002c5a:	bf15      	itete	ne
 8002c5c:	f822 3037 	strhne.w	r3, [r2, r7, lsl #3]
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002c60:	f822 3037 	strheq.w	r3, [r2, r7, lsl #3]
          pmabuffer = ep->pmaaddr1;
 8002c64:	8962      	ldrhne	r2, [r4, #10]
          pmabuffer = ep->pmaaddr0;
 8002c66:	8922      	ldrheq	r2, [r4, #8]
        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002c68:	4628      	mov	r0, r5
 8002c6a:	f7ff fe62 	bl	8002932 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8002c6e:	7863      	ldrb	r3, [r4, #1]
 8002c70:	7822      	ldrb	r2, [r4, #0]
 8002c72:	b97b      	cbnz	r3, 8002c94 <USB_EPStartXfer+0x344>
 8002c74:	b212      	sxth	r2, r2
 8002c76:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8002c7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c82:	041b      	lsls	r3, r3, #16
 8002c84:	0c1b      	lsrs	r3, r3, #16
 8002c86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c8a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002c8e:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 8002c92:	e67b      	b.n	800298c <USB_EPStartXfer+0x3c>
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	f47f ae79 	bne.w	800298c <USB_EPStartXfer+0x3c>
 8002c9a:	b212      	sxth	r2, r2
 8002c9c:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8002ca0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ca4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ca8:	041b      	lsls	r3, r3, #16
 8002caa:	0c1b      	lsrs	r3, r3, #16
 8002cac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002cb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cb4:	e7eb      	b.n	8002c8e <USB_EPStartXfer+0x33e>
    if (ep->doublebuffer == 0U)
 8002cb6:	2f00      	cmp	r7, #0
 8002cb8:	d13e      	bne.n	8002d38 <USB_EPStartXfer+0x3e8>
      if (ep->xfer_len > ep->maxpacket)
 8002cba:	698a      	ldr	r2, [r1, #24]
 8002cbc:	690b      	ldr	r3, [r1, #16]
 8002cbe:	429a      	cmp	r2, r3
        ep->xfer_len -= len;
 8002cc0:	bf84      	itt	hi
 8002cc2:	1ad7      	subhi	r7, r2, r3
 8002cc4:	461a      	movhi	r2, r3
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8002cc6:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002cca:	618f      	str	r7, [r1, #24]
 8002ccc:	f200 4006 	addw	r0, r0, #1030	; 0x406
 8002cd0:	7809      	ldrb	r1, [r1, #0]
 8002cd2:	fa10 f383 	uxtah	r3, r0, r3
 8002cd6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8002cda:	b96a      	cbnz	r2, 8002cf8 <USB_EPStartXfer+0x3a8>
 8002cdc:	881a      	ldrh	r2, [r3, #0]
 8002cde:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8002ce2:	0412      	lsls	r2, r2, #16
 8002ce4:	0c12      	lsrs	r2, r2, #16
 8002ce6:	801a      	strh	r2, [r3, #0]
 8002ce8:	881a      	ldrh	r2, [r3, #0]
 8002cea:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8002cee:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002cf2:	b292      	uxth	r2, r2
 8002cf4:	801a      	strh	r2, [r3, #0]
 8002cf6:	e008      	b.n	8002d0a <USB_EPStartXfer+0x3ba>
 8002cf8:	2a3e      	cmp	r2, #62	; 0x3e
 8002cfa:	d812      	bhi.n	8002d22 <USB_EPStartXfer+0x3d2>
 8002cfc:	0851      	lsrs	r1, r2, #1
 8002cfe:	07d0      	lsls	r0, r2, #31
 8002d00:	bf48      	it	mi
 8002d02:	3101      	addmi	r1, #1
 8002d04:	0289      	lsls	r1, r1, #10
 8002d06:	b289      	uxth	r1, r1
 8002d08:	8019      	strh	r1, [r3, #0]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002d0a:	7822      	ldrb	r2, [r4, #0]
 8002d0c:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8002d10:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d18:	041b      	lsls	r3, r3, #16
 8002d1a:	0c1b      	lsrs	r3, r3, #16
 8002d1c:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002d20:	e63f      	b.n	80029a2 <USB_EPStartXfer+0x52>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8002d22:	0951      	lsrs	r1, r2, #5
 8002d24:	06d2      	lsls	r2, r2, #27
 8002d26:	4a03      	ldr	r2, [pc, #12]	; (8002d34 <USB_EPStartXfer+0x3e4>)
 8002d28:	bf08      	it	eq
 8002d2a:	f101 31ff 	addeq.w	r1, r1, #4294967295
 8002d2e:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8002d32:	e7de      	b.n	8002cf2 <USB_EPStartXfer+0x3a2>
 8002d34:	ffff8000 	.word	0xffff8000
      if (ep->type == EP_TYPE_BULK)
 8002d38:	78cb      	ldrb	r3, [r1, #3]
 8002d3a:	2b02      	cmp	r3, #2
 8002d3c:	f040 8081 	bne.w	8002e42 <USB_EPStartXfer+0x4f2>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8002d40:	b9c2      	cbnz	r2, 8002d74 <USB_EPStartXfer+0x424>
 8002d42:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002d46:	780a      	ldrb	r2, [r1, #0]
 8002d48:	f200 4102 	addw	r1, r0, #1026	; 0x402
 8002d4c:	fa11 f383 	uxtah	r3, r1, r3
 8002d50:	6921      	ldr	r1, [r4, #16]
 8002d52:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002d56:	2900      	cmp	r1, #0
 8002d58:	d145      	bne.n	8002de6 <USB_EPStartXfer+0x496>
 8002d5a:	881a      	ldrh	r2, [r3, #0]
 8002d5c:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8002d60:	0412      	lsls	r2, r2, #16
 8002d62:	0c12      	lsrs	r2, r2, #16
 8002d64:	801a      	strh	r2, [r3, #0]
 8002d66:	881a      	ldrh	r2, [r3, #0]
 8002d68:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8002d6c:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002d70:	b292      	uxth	r2, r2
 8002d72:	801a      	strh	r2, [r3, #0]
 8002d74:	7862      	ldrb	r2, [r4, #1]
 8002d76:	7823      	ldrb	r3, [r4, #0]
 8002d78:	2a00      	cmp	r2, #0
 8002d7a:	d156      	bne.n	8002e2a <USB_EPStartXfer+0x4da>
 8002d7c:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8002d80:	f205 4106 	addw	r1, r5, #1030	; 0x406
 8002d84:	fa11 f282 	uxtah	r2, r1, r2
 8002d88:	6921      	ldr	r1, [r4, #16]
 8002d8a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8002d8e:	2900      	cmp	r1, #0
 8002d90:	d13a      	bne.n	8002e08 <USB_EPStartXfer+0x4b8>
 8002d92:	881a      	ldrh	r2, [r3, #0]
 8002d94:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8002d98:	0412      	lsls	r2, r2, #16
 8002d9a:	0c12      	lsrs	r2, r2, #16
 8002d9c:	801a      	strh	r2, [r3, #0]
 8002d9e:	881a      	ldrh	r2, [r3, #0]
 8002da0:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8002da4:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002da8:	b292      	uxth	r2, r2
 8002daa:	801a      	strh	r2, [r3, #0]
        if (ep->xfer_count != 0U)
 8002dac:	69e3      	ldr	r3, [r4, #28]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d0ab      	beq.n	8002d0a <USB_EPStartXfer+0x3ba>
 8002db2:	7822      	ldrb	r2, [r4, #0]
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8002db4:	f835 1022 	ldrh.w	r1, [r5, r2, lsl #2]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8002db8:	f244 0340 	movw	r3, #16448	; 0x4040
 8002dbc:	ea03 0001 	and.w	r0, r3, r1
 8002dc0:	438b      	bics	r3, r1
 8002dc2:	d001      	beq.n	8002dc8 <USB_EPStartXfer+0x478>
 8002dc4:	2800      	cmp	r0, #0
 8002dc6:	d1a0      	bne.n	8002d0a <USB_EPStartXfer+0x3ba>
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8002dc8:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8002dcc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002dd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dd4:	041b      	lsls	r3, r3, #16
 8002dd6:	0c1b      	lsrs	r3, r3, #16
 8002dd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ddc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002de0:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 8002de4:	e791      	b.n	8002d0a <USB_EPStartXfer+0x3ba>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8002de6:	293e      	cmp	r1, #62	; 0x3e
 8002de8:	d805      	bhi.n	8002df6 <USB_EPStartXfer+0x4a6>
 8002dea:	084a      	lsrs	r2, r1, #1
 8002dec:	07cf      	lsls	r7, r1, #31
 8002dee:	bf48      	it	mi
 8002df0:	3201      	addmi	r2, #1
 8002df2:	0292      	lsls	r2, r2, #10
 8002df4:	e7bc      	b.n	8002d70 <USB_EPStartXfer+0x420>
 8002df6:	0948      	lsrs	r0, r1, #5
 8002df8:	4a49      	ldr	r2, [pc, #292]	; (8002f20 <USB_EPStartXfer+0x5d0>)
 8002dfa:	06ce      	lsls	r6, r1, #27
 8002dfc:	bf08      	it	eq
 8002dfe:	f100 30ff 	addeq.w	r0, r0, #4294967295
 8002e02:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 8002e06:	e7b3      	b.n	8002d70 <USB_EPStartXfer+0x420>
 8002e08:	293e      	cmp	r1, #62	; 0x3e
 8002e0a:	d805      	bhi.n	8002e18 <USB_EPStartXfer+0x4c8>
 8002e0c:	084a      	lsrs	r2, r1, #1
 8002e0e:	07c9      	lsls	r1, r1, #31
 8002e10:	bf48      	it	mi
 8002e12:	3201      	addmi	r2, #1
 8002e14:	0292      	lsls	r2, r2, #10
 8002e16:	e7c7      	b.n	8002da8 <USB_EPStartXfer+0x458>
 8002e18:	0948      	lsrs	r0, r1, #5
 8002e1a:	06ca      	lsls	r2, r1, #27
 8002e1c:	4a40      	ldr	r2, [pc, #256]	; (8002f20 <USB_EPStartXfer+0x5d0>)
 8002e1e:	bf08      	it	eq
 8002e20:	f100 30ff 	addeq.w	r0, r0, #4294967295
 8002e24:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 8002e28:	e7be      	b.n	8002da8 <USB_EPStartXfer+0x458>
 8002e2a:	2a01      	cmp	r2, #1
 8002e2c:	d1be      	bne.n	8002dac <USB_EPStartXfer+0x45c>
 8002e2e:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8002e32:	f205 4106 	addw	r1, r5, #1030	; 0x406
 8002e36:	fa11 f282 	uxtah	r2, r1, r2
 8002e3a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8002e3e:	8a22      	ldrh	r2, [r4, #16]
 8002e40:	e7b3      	b.n	8002daa <USB_EPStartXfer+0x45a>
      else if (ep->type == EP_TYPE_ISOC)
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d16a      	bne.n	8002f1c <USB_EPStartXfer+0x5cc>
        if (ep->xfer_len > ep->maxpacket)
 8002e46:	698b      	ldr	r3, [r1, #24]
 8002e48:	6909      	ldr	r1, [r1, #16]
 8002e4a:	428b      	cmp	r3, r1
          ep->xfer_len -= len;
 8002e4c:	bf8a      	itet	hi
 8002e4e:	1a58      	subhi	r0, r3, r1
          ep->xfer_len = 0U;
 8002e50:	2000      	movls	r0, #0
 8002e52:	460b      	movhi	r3, r1
 8002e54:	61a0      	str	r0, [r4, #24]
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8002e56:	b9b2      	cbnz	r2, 8002e86 <USB_EPStartXfer+0x536>
 8002e58:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8002e5c:	7821      	ldrb	r1, [r4, #0]
 8002e5e:	f205 4002 	addw	r0, r5, #1026	; 0x402
 8002e62:	fa10 f282 	uxtah	r2, r0, r2
 8002e66:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8002e6a:	bb3b      	cbnz	r3, 8002ebc <USB_EPStartXfer+0x56c>
 8002e6c:	8811      	ldrh	r1, [r2, #0]
 8002e6e:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 8002e72:	0409      	lsls	r1, r1, #16
 8002e74:	0c09      	lsrs	r1, r1, #16
 8002e76:	8011      	strh	r1, [r2, #0]
 8002e78:	8811      	ldrh	r1, [r2, #0]
 8002e7a:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8002e7e:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8002e82:	b289      	uxth	r1, r1
 8002e84:	8011      	strh	r1, [r2, #0]
 8002e86:	7861      	ldrb	r1, [r4, #1]
 8002e88:	7822      	ldrb	r2, [r4, #0]
 8002e8a:	2900      	cmp	r1, #0
 8002e8c:	d13a      	bne.n	8002f04 <USB_EPStartXfer+0x5b4>
 8002e8e:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 8002e92:	f205 4006 	addw	r0, r5, #1030	; 0x406
 8002e96:	fa10 f181 	uxtah	r1, r0, r1
 8002e9a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8002e9e:	b9f3      	cbnz	r3, 8002ede <USB_EPStartXfer+0x58e>
 8002ea0:	8813      	ldrh	r3, [r2, #0]
 8002ea2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002ea6:	041b      	lsls	r3, r3, #16
 8002ea8:	0c1b      	lsrs	r3, r3, #16
 8002eaa:	8013      	strh	r3, [r2, #0]
 8002eac:	8813      	ldrh	r3, [r2, #0]
 8002eae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002eb2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	8013      	strh	r3, [r2, #0]
 8002eba:	e726      	b.n	8002d0a <USB_EPStartXfer+0x3ba>
 8002ebc:	2b3e      	cmp	r3, #62	; 0x3e
 8002ebe:	d805      	bhi.n	8002ecc <USB_EPStartXfer+0x57c>
 8002ec0:	0859      	lsrs	r1, r3, #1
 8002ec2:	07df      	lsls	r7, r3, #31
 8002ec4:	bf48      	it	mi
 8002ec6:	3101      	addmi	r1, #1
 8002ec8:	0289      	lsls	r1, r1, #10
 8002eca:	e7da      	b.n	8002e82 <USB_EPStartXfer+0x532>
 8002ecc:	0958      	lsrs	r0, r3, #5
 8002ece:	4914      	ldr	r1, [pc, #80]	; (8002f20 <USB_EPStartXfer+0x5d0>)
 8002ed0:	06de      	lsls	r6, r3, #27
 8002ed2:	bf08      	it	eq
 8002ed4:	f100 30ff 	addeq.w	r0, r0, #4294967295
 8002ed8:	ea41 2180 	orr.w	r1, r1, r0, lsl #10
 8002edc:	e7d1      	b.n	8002e82 <USB_EPStartXfer+0x532>
 8002ede:	2b3e      	cmp	r3, #62	; 0x3e
 8002ee0:	d807      	bhi.n	8002ef2 <USB_EPStartXfer+0x5a2>
 8002ee2:	0859      	lsrs	r1, r3, #1
 8002ee4:	07d8      	lsls	r0, r3, #31
 8002ee6:	bf48      	it	mi
 8002ee8:	3101      	addmi	r1, #1
 8002eea:	0289      	lsls	r1, r1, #10
 8002eec:	b289      	uxth	r1, r1
 8002eee:	8011      	strh	r1, [r2, #0]
 8002ef0:	e70b      	b.n	8002d0a <USB_EPStartXfer+0x3ba>
 8002ef2:	0959      	lsrs	r1, r3, #5
 8002ef4:	06db      	lsls	r3, r3, #27
 8002ef6:	4b0a      	ldr	r3, [pc, #40]	; (8002f20 <USB_EPStartXfer+0x5d0>)
 8002ef8:	bf08      	it	eq
 8002efa:	f101 31ff 	addeq.w	r1, r1, #4294967295
 8002efe:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8002f02:	e7d8      	b.n	8002eb6 <USB_EPStartXfer+0x566>
 8002f04:	2901      	cmp	r1, #1
 8002f06:	f47f af00 	bne.w	8002d0a <USB_EPStartXfer+0x3ba>
 8002f0a:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 8002f0e:	f205 4006 	addw	r0, r5, #1030	; 0x406
 8002f12:	fa10 f181 	uxtah	r1, r0, r1
 8002f16:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8002f1a:	e7cc      	b.n	8002eb6 <USB_EPStartXfer+0x566>
        return HAL_ERROR;
 8002f1c:	2001      	movs	r0, #1
 8002f1e:	e547      	b.n	80029b0 <USB_EPStartXfer+0x60>
 8002f20:	ffff8000 	.word	0xffff8000

08002f24 <USB_ReadPMA>:
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8002f24:	f502 6280 	add.w	r2, r2, #1024	; 0x400
{
 8002f28:	b5f0      	push	{r4, r5, r6, r7, lr}
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8002f2a:	4410      	add	r0, r2
  uint32_t n = (uint32_t)wNBytes >> 1;
 8002f2c:	085e      	lsrs	r6, r3, #1

  for (i = n; i != 0U; i--)
 8002f2e:	460d      	mov	r5, r1
 8002f30:	4632      	mov	r2, r6
 8002f32:	1a47      	subs	r7, r0, r1
 8002f34:	197c      	adds	r4, r7, r5
 8002f36:	3502      	adds	r5, #2
 8002f38:	b932      	cbnz	r2, 8002f48 <USB_ReadPMA+0x24>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8002f3a:	07db      	lsls	r3, r3, #31
  {
    temp = *pdwVal;
 8002f3c:	bf44      	itt	mi
 8002f3e:	f830 3016 	ldrhmi.w	r3, [r0, r6, lsl #1]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8002f42:	f801 3016 	strbmi.w	r3, [r1, r6, lsl #1]
  }
}
 8002f46:	bdf0      	pop	{r4, r5, r6, r7, pc}
    temp = *(__IO uint16_t *)pdwVal;
 8002f48:	8824      	ldrh	r4, [r4, #0]
 8002f4a:	b2a4      	uxth	r4, r4
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8002f4c:	f805 4c02 	strb.w	r4, [r5, #-2]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8002f50:	0a24      	lsrs	r4, r4, #8
 8002f52:	f805 4c01 	strb.w	r4, [r5, #-1]
  for (i = n; i != 0U; i--)
 8002f56:	3a01      	subs	r2, #1
 8002f58:	e7ec      	b.n	8002f34 <USB_ReadPMA+0x10>
	...

08002f5c <registerWrite>:
	HAL_Delay(1000);
	return result;
};

uint8_t registerWrite(uint8_t address, uint8_t cmd)
{
 8002f5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t data[3];
	data[0] = address;
	data[1] = cmd;
	char result = 1;

	result = HAL_I2C_Master_Transmit(HandleI2C, GESTURE_ADDRESS_I2C << 1, data, 2, 10);
 8002f5e:	230a      	movs	r3, #10
	data[0] = address;
 8002f60:	f88d 000c 	strb.w	r0, [sp, #12]
	result = HAL_I2C_Master_Transmit(HandleI2C, GESTURE_ADDRESS_I2C << 1, data, 2, 10);
 8002f64:	4811      	ldr	r0, [pc, #68]	; (8002fac <registerWrite+0x50>)
 8002f66:	9300      	str	r3, [sp, #0]
	data[1] = cmd;
 8002f68:	f88d 100d 	strb.w	r1, [sp, #13]
	result = HAL_I2C_Master_Transmit(HandleI2C, GESTURE_ADDRESS_I2C << 1, data, 2, 10);
 8002f6c:	6800      	ldr	r0, [r0, #0]
 8002f6e:	2302      	movs	r3, #2
 8002f70:	aa03      	add	r2, sp, #12
 8002f72:	21e6      	movs	r1, #230	; 0xe6
 8002f74:	f7fd ff00 	bl	8000d78 <HAL_I2C_Master_Transmit>

	if (result != 0)
 8002f78:	4604      	mov	r4, r0
 8002f7a:	b130      	cbz	r0, 8002f8a <registerWrite+0x2e>
	{
		strcpy((char*)ref, "Transmission Error \n");
 8002f7c:	490c      	ldr	r1, [pc, #48]	; (8002fb0 <registerWrite+0x54>)
 8002f7e:	480d      	ldr	r0, [pc, #52]	; (8002fb4 <registerWrite+0x58>)
 8002f80:	f000 fa5c 	bl	800343c <strcpy>
		printf("Transmission Error \n");
 8002f84:	480c      	ldr	r0, [pc, #48]	; (8002fb8 <registerWrite+0x5c>)
 8002f86:	f000 fa51 	bl	800342c <puts>
	}
	HAL_UART_Transmit(&HandleUART, ref, strlen((char*)ref), HAL_MAX_DELAY);
 8002f8a:	480a      	ldr	r0, [pc, #40]	; (8002fb4 <registerWrite+0x58>)
 8002f8c:	f7fd f922 	bl	80001d4 <strlen>
 8002f90:	4908      	ldr	r1, [pc, #32]	; (8002fb4 <registerWrite+0x58>)
 8002f92:	b282      	uxth	r2, r0
 8002f94:	f04f 33ff 	mov.w	r3, #4294967295
 8002f98:	4808      	ldr	r0, [pc, #32]	; (8002fbc <registerWrite+0x60>)
 8002f9a:	f7ff fbe7 	bl	800276c <HAL_UART_Transmit>
	HAL_Delay(1000);
 8002f9e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002fa2:	f7fd fc2d 	bl	8000800 <HAL_Delay>
	return result;
};
 8002fa6:	4620      	mov	r0, r4
 8002fa8:	b004      	add	sp, #16
 8002faa:	bd10      	pop	{r4, pc}
 8002fac:	20000340 	.word	0x20000340
 8002fb0:	08003d3f 	.word	0x08003d3f
 8002fb4:	2000073c 	.word	0x2000073c
 8002fb8:	08003d54 	.word	0x08003d54
 8002fbc:	2000029c 	.word	0x2000029c

08002fc0 <registerRead>:

uint8_t registerRead(uint8_t address, uint8_t qty, uint8_t data[])
{
 8002fc0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t tmp[3];
	tmp[0] = address;
	char result = 1;

	result = HAL_I2C_Master_Transmit(HandleI2C, GESTURE_ADDRESS_I2C << 1, tmp, 1, 10);
 8002fc2:	230a      	movs	r3, #10
 8002fc4:	4c1a      	ldr	r4, [pc, #104]	; (8003030 <registerRead+0x70>)
 8002fc6:	9300      	str	r3, [sp, #0]
{
 8002fc8:	460e      	mov	r6, r1
 8002fca:	4615      	mov	r5, r2
	tmp[0] = address;
 8002fcc:	f88d 000c 	strb.w	r0, [sp, #12]
	result = HAL_I2C_Master_Transmit(HandleI2C, GESTURE_ADDRESS_I2C << 1, tmp, 1, 10);
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	6820      	ldr	r0, [r4, #0]
 8002fd4:	aa03      	add	r2, sp, #12
 8002fd6:	21e6      	movs	r1, #230	; 0xe6
 8002fd8:	f7fd fece 	bl	8000d78 <HAL_I2C_Master_Transmit>

	if (result != 0)
 8002fdc:	b130      	cbz	r0, 8002fec <registerRead+0x2c>
	{
		strcpy((char*)ref, "Error TX \n");
 8002fde:	4915      	ldr	r1, [pc, #84]	; (8003034 <registerRead+0x74>)
 8002fe0:	4815      	ldr	r0, [pc, #84]	; (8003038 <registerRead+0x78>)
 8002fe2:	f000 fa2b 	bl	800343c <strcpy>
		printf("Error TX \n");
 8002fe6:	4815      	ldr	r0, [pc, #84]	; (800303c <registerRead+0x7c>)
 8002fe8:	f000 fa20 	bl	800342c <puts>
	}

	result = 1;
	result = HAL_I2C_Master_Receive(HandleI2C, (GESTURE_ADDRESS_I2C << 1) + 1, data, qty, 10);
 8002fec:	230a      	movs	r3, #10
 8002fee:	9300      	str	r3, [sp, #0]
 8002ff0:	6820      	ldr	r0, [r4, #0]
 8002ff2:	4633      	mov	r3, r6
 8002ff4:	462a      	mov	r2, r5
 8002ff6:	21e7      	movs	r1, #231	; 0xe7
 8002ff8:	f7fd ff54 	bl	8000ea4 <HAL_I2C_Master_Receive>
	if (result != 0){
 8002ffc:	4604      	mov	r4, r0
 8002ffe:	b130      	cbz	r0, 800300e <registerRead+0x4e>
		strcpy((char*)ref, "Error RX \n");
 8003000:	490f      	ldr	r1, [pc, #60]	; (8003040 <registerRead+0x80>)
 8003002:	480d      	ldr	r0, [pc, #52]	; (8003038 <registerRead+0x78>)
 8003004:	f000 fa1a 	bl	800343c <strcpy>
		printf("Error RX \n");
 8003008:	480e      	ldr	r0, [pc, #56]	; (8003044 <registerRead+0x84>)
 800300a:	f000 fa0f 	bl	800342c <puts>
	}
	HAL_UART_Transmit(&HandleUART, ref, strlen((char*)ref), HAL_MAX_DELAY);
 800300e:	480a      	ldr	r0, [pc, #40]	; (8003038 <registerRead+0x78>)
 8003010:	f7fd f8e0 	bl	80001d4 <strlen>
 8003014:	4908      	ldr	r1, [pc, #32]	; (8003038 <registerRead+0x78>)
 8003016:	b282      	uxth	r2, r0
 8003018:	f04f 33ff 	mov.w	r3, #4294967295
 800301c:	480a      	ldr	r0, [pc, #40]	; (8003048 <registerRead+0x88>)
 800301e:	f7ff fba5 	bl	800276c <HAL_UART_Transmit>
	HAL_Delay(1000);
 8003022:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003026:	f7fd fbeb 	bl	8000800 <HAL_Delay>
	return result;
};
 800302a:	4620      	mov	r0, r4
 800302c:	b004      	add	sp, #16
 800302e:	bd70      	pop	{r4, r5, r6, pc}
 8003030:	20000340 	.word	0x20000340
 8003034:	08003d68 	.word	0x08003d68
 8003038:	2000073c 	.word	0x2000073c
 800303c:	08003d73 	.word	0x08003d73
 8003040:	08003d7d 	.word	0x08003d7d
 8003044:	08003d88 	.word	0x08003d88
 8003048:	2000029c 	.word	0x2000029c

0800304c <GESTURE_Actions>:
{
 800304c:	b507      	push	{r0, r1, r2, lr}
	uint8_t data0 = 0, error;
 800304e:	2300      	movs	r3, #0
	error = registerRead(0x43, 1, &data0); /* Read Bank 0 for gestures */
 8003050:	f10d 0207 	add.w	r2, sp, #7
 8003054:	2101      	movs	r1, #1
 8003056:	2043      	movs	r0, #67	; 0x43
	uint8_t data0 = 0, error;
 8003058:	f88d 3007 	strb.w	r3, [sp, #7]
	error = registerRead(0x43, 1, &data0); /* Read Bank 0 for gestures */
 800305c:	f7ff ffb0 	bl	8002fc0 <registerRead>
	if(!error){
 8003060:	b9c0      	cbnz	r0, 8003094 <GESTURE_Actions+0x48>
		switch(data0){ /* When will gestures be detected, the "data" will change */
 8003062:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003066:	2b10      	cmp	r3, #16
 8003068:	f000 8089 	beq.w	800317e <GESTURE_Actions+0x132>
 800306c:	d80b      	bhi.n	8003086 <GESTURE_Actions+0x3a>
 800306e:	3b01      	subs	r3, #1
 8003070:	b2da      	uxtb	r2, r3
 8003072:	2a07      	cmp	r2, #7
 8003074:	d80e      	bhi.n	8003094 <GESTURE_Actions+0x48>
 8003076:	2b07      	cmp	r3, #7
 8003078:	d80c      	bhi.n	8003094 <GESTURE_Actions+0x48>
 800307a:	e8df f003 	tbb	[pc, r3]
 800307e:	3e1c      	.short	0x3e1c
 8003080:	0b0b530b 	.word	0x0b0b530b
 8003084:	680b      	.short	0x680b
 8003086:	2b40      	cmp	r3, #64	; 0x40
 8003088:	d023      	beq.n	80030d2 <GESTURE_Actions+0x86>
 800308a:	2b80      	cmp	r3, #128	; 0x80
 800308c:	d028      	beq.n	80030e0 <GESTURE_Actions+0x94>
 800308e:	2b20      	cmp	r3, #32
 8003090:	f000 8081 	beq.w	8003196 <GESTURE_Actions+0x14a>
	HAL_UART_Transmit(&HandleUART, ref, strlen((char*)ref), HAL_MAX_DELAY);
 8003094:	4842      	ldr	r0, [pc, #264]	; (80031a0 <GESTURE_Actions+0x154>)
 8003096:	f7fd f89d 	bl	80001d4 <strlen>
 800309a:	4941      	ldr	r1, [pc, #260]	; (80031a0 <GESTURE_Actions+0x154>)
 800309c:	b282      	uxth	r2, r0
 800309e:	f04f 33ff 	mov.w	r3, #4294967295
 80030a2:	4840      	ldr	r0, [pc, #256]	; (80031a4 <GESTURE_Actions+0x158>)
 80030a4:	f7ff fb62 	bl	800276c <HAL_UART_Transmit>
	HAL_Delay(1000);
 80030a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80030ac:	f7fd fba8 	bl	8000800 <HAL_Delay>
};
 80030b0:	b003      	add	sp, #12
 80030b2:	f85d fb04 	ldr.w	pc, [sp], #4
			HAL_Delay(GEST_ENTR_T);
 80030b6:	f44f 7016 	mov.w	r0, #600	; 0x258
 80030ba:	f7fd fba1 	bl	8000800 <HAL_Delay>
			registerRead(0x43, 1, &data0);
 80030be:	f10d 0207 	add.w	r2, sp, #7
 80030c2:	2101      	movs	r1, #1
 80030c4:	2043      	movs	r0, #67	; 0x43
 80030c6:	f7ff ff7b 	bl	8002fc0 <registerRead>
			if(data0 == GestureForward){
 80030ca:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80030ce:	2b40      	cmp	r3, #64	; 0x40
 80030d0:	d104      	bne.n	80030dc <GESTURE_Actions+0x90>
			printf("Forward \n");
 80030d2:	4835      	ldr	r0, [pc, #212]	; (80031a8 <GESTURE_Actions+0x15c>)
 80030d4:	f000 f9aa 	bl	800342c <puts>
			strcpy((char*)ref, "Forward \n");
 80030d8:	4934      	ldr	r1, [pc, #208]	; (80031ac <GESTURE_Actions+0x160>)
 80030da:	e054      	b.n	8003186 <GESTURE_Actions+0x13a>
			}else if(data0 == GestureBackwards){
 80030dc:	2b80      	cmp	r3, #128	; 0x80
 80030de:	d104      	bne.n	80030ea <GESTURE_Actions+0x9e>
			printf("Backwards \n");
 80030e0:	4833      	ldr	r0, [pc, #204]	; (80031b0 <GESTURE_Actions+0x164>)
 80030e2:	f000 f9a3 	bl	800342c <puts>
			strcpy((char*)ref, "Backwards \n");
 80030e6:	4933      	ldr	r1, [pc, #204]	; (80031b4 <GESTURE_Actions+0x168>)
 80030e8:	e04d      	b.n	8003186 <GESTURE_Actions+0x13a>
				printf("Right \n");
 80030ea:	4833      	ldr	r0, [pc, #204]	; (80031b8 <GESTURE_Actions+0x16c>)
 80030ec:	f000 f99e 	bl	800342c <puts>
				strcpy((char*)ref, "Right \n");
 80030f0:	4932      	ldr	r1, [pc, #200]	; (80031bc <GESTURE_Actions+0x170>)
				strcpy((char*)ref, "Up \n");
 80030f2:	482b      	ldr	r0, [pc, #172]	; (80031a0 <GESTURE_Actions+0x154>)
 80030f4:	f000 f9a2 	bl	800343c <strcpy>
 80030f8:	e7cc      	b.n	8003094 <GESTURE_Actions+0x48>
			HAL_Delay(GEST_ENTR_T);
 80030fa:	f44f 7016 	mov.w	r0, #600	; 0x258
 80030fe:	f7fd fb7f 	bl	8000800 <HAL_Delay>
			registerRead(0x43, 1, &data0);
 8003102:	f10d 0207 	add.w	r2, sp, #7
 8003106:	2101      	movs	r1, #1
 8003108:	2043      	movs	r0, #67	; 0x43
 800310a:	f7ff ff59 	bl	8002fc0 <registerRead>
			if(data0 == GestureForward){
 800310e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003112:	2b40      	cmp	r3, #64	; 0x40
 8003114:	d0dd      	beq.n	80030d2 <GESTURE_Actions+0x86>
			}else if(data0 == GestureBackwards){
 8003116:	2b80      	cmp	r3, #128	; 0x80
 8003118:	d0e2      	beq.n	80030e0 <GESTURE_Actions+0x94>
				printf("Left \n");
 800311a:	4829      	ldr	r0, [pc, #164]	; (80031c0 <GESTURE_Actions+0x174>)
 800311c:	f000 f986 	bl	800342c <puts>
				strcpy((char*)ref, "Left \n");
 8003120:	4928      	ldr	r1, [pc, #160]	; (80031c4 <GESTURE_Actions+0x178>)
 8003122:	e7e6      	b.n	80030f2 <GESTURE_Actions+0xa6>
			HAL_Delay(GEST_ENTR_T);
 8003124:	f44f 7016 	mov.w	r0, #600	; 0x258
 8003128:	f7fd fb6a 	bl	8000800 <HAL_Delay>
			registerRead(0x43, 1, &data0);
 800312c:	f10d 0207 	add.w	r2, sp, #7
 8003130:	2101      	movs	r1, #1
 8003132:	2043      	movs	r0, #67	; 0x43
 8003134:	f7ff ff44 	bl	8002fc0 <registerRead>
			if(data0 == GestureForward){
 8003138:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800313c:	2b40      	cmp	r3, #64	; 0x40
 800313e:	d0c8      	beq.n	80030d2 <GESTURE_Actions+0x86>
			}else if(data0 == GestureBackwards){
 8003140:	2b80      	cmp	r3, #128	; 0x80
 8003142:	d0cd      	beq.n	80030e0 <GESTURE_Actions+0x94>
				printf("Up \n");
 8003144:	4820      	ldr	r0, [pc, #128]	; (80031c8 <GESTURE_Actions+0x17c>)
 8003146:	f000 f971 	bl	800342c <puts>
				strcpy((char*)ref, "Up \n");
 800314a:	4920      	ldr	r1, [pc, #128]	; (80031cc <GESTURE_Actions+0x180>)
 800314c:	e7d1      	b.n	80030f2 <GESTURE_Actions+0xa6>
			HAL_Delay(GEST_ENTR_T);
 800314e:	f44f 7016 	mov.w	r0, #600	; 0x258
 8003152:	f7fd fb55 	bl	8000800 <HAL_Delay>
			registerRead(0x43, 1, &data0);
 8003156:	f10d 0207 	add.w	r2, sp, #7
 800315a:	2101      	movs	r1, #1
 800315c:	2043      	movs	r0, #67	; 0x43
 800315e:	f7ff ff2f 	bl	8002fc0 <registerRead>
			if(data0 == GestureForward){
 8003162:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003166:	2b40      	cmp	r3, #64	; 0x40
 8003168:	d0b3      	beq.n	80030d2 <GESTURE_Actions+0x86>
			}else if(data0 == GestureBackwards){
 800316a:	2b80      	cmp	r3, #128	; 0x80
 800316c:	d0b8      	beq.n	80030e0 <GESTURE_Actions+0x94>
				strcpy((char*)ref, "Down \n");
 800316e:	4918      	ldr	r1, [pc, #96]	; (80031d0 <GESTURE_Actions+0x184>)
 8003170:	480b      	ldr	r0, [pc, #44]	; (80031a0 <GESTURE_Actions+0x154>)
 8003172:	f000 f963 	bl	800343c <strcpy>
				printf("Down \n");
 8003176:	4817      	ldr	r0, [pc, #92]	; (80031d4 <GESTURE_Actions+0x188>)
 8003178:	f000 f958 	bl	800342c <puts>
 800317c:	e78a      	b.n	8003094 <GESTURE_Actions+0x48>
			printf("Clockwise \n");
 800317e:	4816      	ldr	r0, [pc, #88]	; (80031d8 <GESTURE_Actions+0x18c>)
 8003180:	f000 f954 	bl	800342c <puts>
			strcpy((char*)ref, "Clockwise \n");
 8003184:	4915      	ldr	r1, [pc, #84]	; (80031dc <GESTURE_Actions+0x190>)
			strcpy((char*)ref, "Backwards \n");
 8003186:	4806      	ldr	r0, [pc, #24]	; (80031a0 <GESTURE_Actions+0x154>)
 8003188:	f000 f958 	bl	800343c <strcpy>
			HAL_Delay(GEST_QUIT_T);
 800318c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003190:	f7fd fb36 	bl	8000800 <HAL_Delay>
			break;
 8003194:	e77e      	b.n	8003094 <GESTURE_Actions+0x48>
			printf("Anti-Clockwise \n");
 8003196:	4812      	ldr	r0, [pc, #72]	; (80031e0 <GESTURE_Actions+0x194>)
 8003198:	f000 f948 	bl	800342c <puts>
			strcpy((char*)ref, "Anti-clockwise \n");
 800319c:	4911      	ldr	r1, [pc, #68]	; (80031e4 <GESTURE_Actions+0x198>)
 800319e:	e7f2      	b.n	8003186 <GESTURE_Actions+0x13a>
 80031a0:	2000073c 	.word	0x2000073c
 80031a4:	2000029c 	.word	0x2000029c
 80031a8:	08003d92 	.word	0x08003d92
 80031ac:	08003d9b 	.word	0x08003d9b
 80031b0:	08003da5 	.word	0x08003da5
 80031b4:	08003db0 	.word	0x08003db0
 80031b8:	08003dbc 	.word	0x08003dbc
 80031bc:	08003dc3 	.word	0x08003dc3
 80031c0:	08003dcb 	.word	0x08003dcb
 80031c4:	08003dd1 	.word	0x08003dd1
 80031c8:	08003e21 	.word	0x08003e21
 80031cc:	08003e17 	.word	0x08003e17
 80031d0:	08003dd8 	.word	0x08003dd8
 80031d4:	08003ddf 	.word	0x08003ddf
 80031d8:	08003df6 	.word	0x08003df6
 80031dc:	08003de5 	.word	0x08003de5
 80031e0:	08003df1 	.word	0x08003df1
 80031e4:	08003e01 	.word	0x08003e01

080031e8 <gestureInit>:
{
 80031e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	uint8_t data0 = 0;
 80031ea:	2500      	movs	r5, #0
	uint8_t data1 = 1;
 80031ec:	2401      	movs	r4, #1
	registerWrite(GESTURE_REG_BANK_SEL, GESTURE_BANK0);
 80031ee:	4629      	mov	r1, r5
 80031f0:	20ef      	movs	r0, #239	; 0xef
	uint8_t data0 = 0;
 80031f2:	f88d 5006 	strb.w	r5, [sp, #6]
	uint8_t data1 = 1;
 80031f6:	f88d 4007 	strb.w	r4, [sp, #7]
	registerWrite(GESTURE_REG_BANK_SEL, GESTURE_BANK0);
 80031fa:	f7ff feaf 	bl	8002f5c <registerWrite>
	registerWrite(GESTURE_REG_BANK_SEL, GESTURE_BANK0);
 80031fe:	4629      	mov	r1, r5
 8003200:	20ef      	movs	r0, #239	; 0xef
 8003202:	f7ff feab 	bl	8002f5c <registerWrite>
	registerRead(0,1, &data0);
 8003206:	f10d 0206 	add.w	r2, sp, #6
 800320a:	4621      	mov	r1, r4
 800320c:	4628      	mov	r0, r5
 800320e:	f7ff fed7 	bl	8002fc0 <registerRead>
	registerRead(1,1, &data1);
 8003212:	f10d 0207 	add.w	r2, sp, #7
 8003216:	4621      	mov	r1, r4
 8003218:	4620      	mov	r0, r4
 800321a:	f7ff fed1 	bl	8002fc0 <registerRead>
	if ((data0 != 0x20) || (data1 != 0x76)){
 800321e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8003222:	2b20      	cmp	r3, #32
 8003224:	d10b      	bne.n	800323e <gestureInit+0x56>
 8003226:	f89d 4007 	ldrb.w	r4, [sp, #7]
		strcpy((char*)ref, "Wake Up \n");
 800322a:	4914      	ldr	r1, [pc, #80]	; (800327c <gestureInit+0x94>)
 800322c:	4814      	ldr	r0, [pc, #80]	; (8003280 <gestureInit+0x98>)
	if ((data0 != 0x20) || (data1 != 0x76)){
 800322e:	3c76      	subs	r4, #118	; 0x76
 8003230:	bf18      	it	ne
 8003232:	2401      	movne	r4, #1
		strcpy((char*)ref, "Wake Up \n");
 8003234:	f000 f902 	bl	800343c <strcpy>
		printf("Wake Up \n");
 8003238:	4812      	ldr	r0, [pc, #72]	; (8003284 <gestureInit+0x9c>)
 800323a:	f000 f8f7 	bl	800342c <puts>
	for(int i = 1; i < InitialRegister; i++){
 800323e:	4e12      	ldr	r6, [pc, #72]	; (8003288 <gestureInit+0xa0>)
		result = 1;
 8003240:	2501      	movs	r5, #1
		registerWrite(RegisterArray[i][0], RegisterArray[i][1]);
 8003242:	78f1      	ldrb	r1, [r6, #3]
 8003244:	f816 0f02 	ldrb.w	r0, [r6, #2]!
	for(int i = 1; i < InitialRegister; i++){
 8003248:	3501      	adds	r5, #1
		registerWrite(RegisterArray[i][0], RegisterArray[i][1]);
 800324a:	f7ff fe87 	bl	8002f5c <registerWrite>
	for(int i = 1; i < InitialRegister; i++){
 800324e:	2ddb      	cmp	r5, #219	; 0xdb
 8003250:	d1f7      	bne.n	8003242 <gestureInit+0x5a>
	registerWrite(GESTURE_REG_BANK_SEL, GESTURE_BANK0);
 8003252:	2100      	movs	r1, #0
 8003254:	20ef      	movs	r0, #239	; 0xef
 8003256:	f7ff fe81 	bl	8002f5c <registerWrite>
	HAL_UART_Transmit(&HandleUART, ref, strlen((char*)ref), HAL_MAX_DELAY);
 800325a:	4809      	ldr	r0, [pc, #36]	; (8003280 <gestureInit+0x98>)
 800325c:	f7fc ffba 	bl	80001d4 <strlen>
 8003260:	4907      	ldr	r1, [pc, #28]	; (8003280 <gestureInit+0x98>)
 8003262:	b282      	uxth	r2, r0
 8003264:	f04f 33ff 	mov.w	r3, #4294967295
 8003268:	4808      	ldr	r0, [pc, #32]	; (800328c <gestureInit+0xa4>)
 800326a:	f7ff fa7f 	bl	800276c <HAL_UART_Transmit>
	HAL_Delay(1000);
 800326e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003272:	f7fd fac5 	bl	8000800 <HAL_Delay>
};
 8003276:	4620      	mov	r0, r4
 8003278:	b002      	add	sp, #8
 800327a:	bd70      	pop	{r4, r5, r6, pc}
 800327c:	08003e12 	.word	0x08003e12
 8003280:	2000073c 	.word	0x2000073c
 8003284:	08003e1c 	.word	0x08003e1c
 8003288:	2000000c 	.word	0x2000000c
 800328c:	2000029c 	.word	0x2000029c

08003290 <initializeRegisters>:
void initializeRegisters(void){
 8003290:	b508      	push	{r3, lr}
	error = gestureInit();
 8003292:	f7ff ffa9 	bl	80031e8 <gestureInit>
	if(error){
 8003296:	b1b0      	cbz	r0, 80032c6 <initializeRegisters+0x36>
		strcpy((char*)ref, "Initializing Error \n");
 8003298:	490e      	ldr	r1, [pc, #56]	; (80032d4 <initializeRegisters+0x44>)
 800329a:	480f      	ldr	r0, [pc, #60]	; (80032d8 <initializeRegisters+0x48>)
 800329c:	f000 f8ce 	bl	800343c <strcpy>
		printf("Initializing Error \n");
 80032a0:	480e      	ldr	r0, [pc, #56]	; (80032dc <initializeRegisters+0x4c>)
		printf("Initialized \n");
 80032a2:	f000 f8c3 	bl	800342c <puts>
	HAL_UART_Transmit(&HandleUART, ref, strlen((char*)ref), HAL_MAX_DELAY);
 80032a6:	480c      	ldr	r0, [pc, #48]	; (80032d8 <initializeRegisters+0x48>)
 80032a8:	f7fc ff94 	bl	80001d4 <strlen>
 80032ac:	f04f 33ff 	mov.w	r3, #4294967295
 80032b0:	b282      	uxth	r2, r0
 80032b2:	4909      	ldr	r1, [pc, #36]	; (80032d8 <initializeRegisters+0x48>)
 80032b4:	480a      	ldr	r0, [pc, #40]	; (80032e0 <initializeRegisters+0x50>)
 80032b6:	f7ff fa59 	bl	800276c <HAL_UART_Transmit>
};
 80032ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_Delay(1000);
 80032be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80032c2:	f7fd ba9d 	b.w	8000800 <HAL_Delay>
		strcpy((char*)ref, "Initialized \n");
 80032c6:	4907      	ldr	r1, [pc, #28]	; (80032e4 <initializeRegisters+0x54>)
 80032c8:	4803      	ldr	r0, [pc, #12]	; (80032d8 <initializeRegisters+0x48>)
 80032ca:	f000 f8b7 	bl	800343c <strcpy>
		printf("Initialized \n");
 80032ce:	4806      	ldr	r0, [pc, #24]	; (80032e8 <initializeRegisters+0x58>)
 80032d0:	e7e7      	b.n	80032a2 <initializeRegisters+0x12>
 80032d2:	bf00      	nop
 80032d4:	08003e25 	.word	0x08003e25
 80032d8:	2000073c 	.word	0x2000073c
 80032dc:	08003e3a 	.word	0x08003e3a
 80032e0:	2000029c 	.word	0x2000029c
 80032e4:	08003e4e 	.word	0x08003e4e
 80032e8:	08003e5c 	.word	0x08003e5c

080032ec <__errno>:
 80032ec:	4b01      	ldr	r3, [pc, #4]	; (80032f4 <__errno+0x8>)
 80032ee:	6818      	ldr	r0, [r3, #0]
 80032f0:	4770      	bx	lr
 80032f2:	bf00      	nop
 80032f4:	200001c4 	.word	0x200001c4

080032f8 <__libc_init_array>:
 80032f8:	b570      	push	{r4, r5, r6, lr}
 80032fa:	4d0d      	ldr	r5, [pc, #52]	; (8003330 <__libc_init_array+0x38>)
 80032fc:	4c0d      	ldr	r4, [pc, #52]	; (8003334 <__libc_init_array+0x3c>)
 80032fe:	1b64      	subs	r4, r4, r5
 8003300:	10a4      	asrs	r4, r4, #2
 8003302:	2600      	movs	r6, #0
 8003304:	42a6      	cmp	r6, r4
 8003306:	d109      	bne.n	800331c <__libc_init_array+0x24>
 8003308:	4d0b      	ldr	r5, [pc, #44]	; (8003338 <__libc_init_array+0x40>)
 800330a:	4c0c      	ldr	r4, [pc, #48]	; (800333c <__libc_init_array+0x44>)
 800330c:	f000 fcee 	bl	8003cec <_init>
 8003310:	1b64      	subs	r4, r4, r5
 8003312:	10a4      	asrs	r4, r4, #2
 8003314:	2600      	movs	r6, #0
 8003316:	42a6      	cmp	r6, r4
 8003318:	d105      	bne.n	8003326 <__libc_init_array+0x2e>
 800331a:	bd70      	pop	{r4, r5, r6, pc}
 800331c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003320:	4798      	blx	r3
 8003322:	3601      	adds	r6, #1
 8003324:	e7ee      	b.n	8003304 <__libc_init_array+0xc>
 8003326:	f855 3b04 	ldr.w	r3, [r5], #4
 800332a:	4798      	blx	r3
 800332c:	3601      	adds	r6, #1
 800332e:	e7f2      	b.n	8003316 <__libc_init_array+0x1e>
 8003330:	08003ed0 	.word	0x08003ed0
 8003334:	08003ed0 	.word	0x08003ed0
 8003338:	08003ed0 	.word	0x08003ed0
 800333c:	08003ed4 	.word	0x08003ed4

08003340 <memset>:
 8003340:	4402      	add	r2, r0
 8003342:	4603      	mov	r3, r0
 8003344:	4293      	cmp	r3, r2
 8003346:	d100      	bne.n	800334a <memset+0xa>
 8003348:	4770      	bx	lr
 800334a:	f803 1b01 	strb.w	r1, [r3], #1
 800334e:	e7f9      	b.n	8003344 <memset+0x4>

08003350 <_puts_r>:
 8003350:	b570      	push	{r4, r5, r6, lr}
 8003352:	460e      	mov	r6, r1
 8003354:	4605      	mov	r5, r0
 8003356:	b118      	cbz	r0, 8003360 <_puts_r+0x10>
 8003358:	6983      	ldr	r3, [r0, #24]
 800335a:	b90b      	cbnz	r3, 8003360 <_puts_r+0x10>
 800335c:	f000 fa50 	bl	8003800 <__sinit>
 8003360:	69ab      	ldr	r3, [r5, #24]
 8003362:	68ac      	ldr	r4, [r5, #8]
 8003364:	b913      	cbnz	r3, 800336c <_puts_r+0x1c>
 8003366:	4628      	mov	r0, r5
 8003368:	f000 fa4a 	bl	8003800 <__sinit>
 800336c:	4b2c      	ldr	r3, [pc, #176]	; (8003420 <_puts_r+0xd0>)
 800336e:	429c      	cmp	r4, r3
 8003370:	d120      	bne.n	80033b4 <_puts_r+0x64>
 8003372:	686c      	ldr	r4, [r5, #4]
 8003374:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003376:	07db      	lsls	r3, r3, #31
 8003378:	d405      	bmi.n	8003386 <_puts_r+0x36>
 800337a:	89a3      	ldrh	r3, [r4, #12]
 800337c:	0598      	lsls	r0, r3, #22
 800337e:	d402      	bmi.n	8003386 <_puts_r+0x36>
 8003380:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003382:	f000 fadb 	bl	800393c <__retarget_lock_acquire_recursive>
 8003386:	89a3      	ldrh	r3, [r4, #12]
 8003388:	0719      	lsls	r1, r3, #28
 800338a:	d51d      	bpl.n	80033c8 <_puts_r+0x78>
 800338c:	6923      	ldr	r3, [r4, #16]
 800338e:	b1db      	cbz	r3, 80033c8 <_puts_r+0x78>
 8003390:	3e01      	subs	r6, #1
 8003392:	68a3      	ldr	r3, [r4, #8]
 8003394:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003398:	3b01      	subs	r3, #1
 800339a:	60a3      	str	r3, [r4, #8]
 800339c:	bb39      	cbnz	r1, 80033ee <_puts_r+0x9e>
 800339e:	2b00      	cmp	r3, #0
 80033a0:	da38      	bge.n	8003414 <_puts_r+0xc4>
 80033a2:	4622      	mov	r2, r4
 80033a4:	210a      	movs	r1, #10
 80033a6:	4628      	mov	r0, r5
 80033a8:	f000 f850 	bl	800344c <__swbuf_r>
 80033ac:	3001      	adds	r0, #1
 80033ae:	d011      	beq.n	80033d4 <_puts_r+0x84>
 80033b0:	250a      	movs	r5, #10
 80033b2:	e011      	b.n	80033d8 <_puts_r+0x88>
 80033b4:	4b1b      	ldr	r3, [pc, #108]	; (8003424 <_puts_r+0xd4>)
 80033b6:	429c      	cmp	r4, r3
 80033b8:	d101      	bne.n	80033be <_puts_r+0x6e>
 80033ba:	68ac      	ldr	r4, [r5, #8]
 80033bc:	e7da      	b.n	8003374 <_puts_r+0x24>
 80033be:	4b1a      	ldr	r3, [pc, #104]	; (8003428 <_puts_r+0xd8>)
 80033c0:	429c      	cmp	r4, r3
 80033c2:	bf08      	it	eq
 80033c4:	68ec      	ldreq	r4, [r5, #12]
 80033c6:	e7d5      	b.n	8003374 <_puts_r+0x24>
 80033c8:	4621      	mov	r1, r4
 80033ca:	4628      	mov	r0, r5
 80033cc:	f000 f890 	bl	80034f0 <__swsetup_r>
 80033d0:	2800      	cmp	r0, #0
 80033d2:	d0dd      	beq.n	8003390 <_puts_r+0x40>
 80033d4:	f04f 35ff 	mov.w	r5, #4294967295
 80033d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80033da:	07da      	lsls	r2, r3, #31
 80033dc:	d405      	bmi.n	80033ea <_puts_r+0x9a>
 80033de:	89a3      	ldrh	r3, [r4, #12]
 80033e0:	059b      	lsls	r3, r3, #22
 80033e2:	d402      	bmi.n	80033ea <_puts_r+0x9a>
 80033e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80033e6:	f000 faaa 	bl	800393e <__retarget_lock_release_recursive>
 80033ea:	4628      	mov	r0, r5
 80033ec:	bd70      	pop	{r4, r5, r6, pc}
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	da04      	bge.n	80033fc <_puts_r+0xac>
 80033f2:	69a2      	ldr	r2, [r4, #24]
 80033f4:	429a      	cmp	r2, r3
 80033f6:	dc06      	bgt.n	8003406 <_puts_r+0xb6>
 80033f8:	290a      	cmp	r1, #10
 80033fa:	d004      	beq.n	8003406 <_puts_r+0xb6>
 80033fc:	6823      	ldr	r3, [r4, #0]
 80033fe:	1c5a      	adds	r2, r3, #1
 8003400:	6022      	str	r2, [r4, #0]
 8003402:	7019      	strb	r1, [r3, #0]
 8003404:	e7c5      	b.n	8003392 <_puts_r+0x42>
 8003406:	4622      	mov	r2, r4
 8003408:	4628      	mov	r0, r5
 800340a:	f000 f81f 	bl	800344c <__swbuf_r>
 800340e:	3001      	adds	r0, #1
 8003410:	d1bf      	bne.n	8003392 <_puts_r+0x42>
 8003412:	e7df      	b.n	80033d4 <_puts_r+0x84>
 8003414:	6823      	ldr	r3, [r4, #0]
 8003416:	250a      	movs	r5, #10
 8003418:	1c5a      	adds	r2, r3, #1
 800341a:	6022      	str	r2, [r4, #0]
 800341c:	701d      	strb	r5, [r3, #0]
 800341e:	e7db      	b.n	80033d8 <_puts_r+0x88>
 8003420:	08003e90 	.word	0x08003e90
 8003424:	08003eb0 	.word	0x08003eb0
 8003428:	08003e70 	.word	0x08003e70

0800342c <puts>:
 800342c:	4b02      	ldr	r3, [pc, #8]	; (8003438 <puts+0xc>)
 800342e:	4601      	mov	r1, r0
 8003430:	6818      	ldr	r0, [r3, #0]
 8003432:	f7ff bf8d 	b.w	8003350 <_puts_r>
 8003436:	bf00      	nop
 8003438:	200001c4 	.word	0x200001c4

0800343c <strcpy>:
 800343c:	4603      	mov	r3, r0
 800343e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003442:	f803 2b01 	strb.w	r2, [r3], #1
 8003446:	2a00      	cmp	r2, #0
 8003448:	d1f9      	bne.n	800343e <strcpy+0x2>
 800344a:	4770      	bx	lr

0800344c <__swbuf_r>:
 800344c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800344e:	460e      	mov	r6, r1
 8003450:	4614      	mov	r4, r2
 8003452:	4605      	mov	r5, r0
 8003454:	b118      	cbz	r0, 800345e <__swbuf_r+0x12>
 8003456:	6983      	ldr	r3, [r0, #24]
 8003458:	b90b      	cbnz	r3, 800345e <__swbuf_r+0x12>
 800345a:	f000 f9d1 	bl	8003800 <__sinit>
 800345e:	4b21      	ldr	r3, [pc, #132]	; (80034e4 <__swbuf_r+0x98>)
 8003460:	429c      	cmp	r4, r3
 8003462:	d12b      	bne.n	80034bc <__swbuf_r+0x70>
 8003464:	686c      	ldr	r4, [r5, #4]
 8003466:	69a3      	ldr	r3, [r4, #24]
 8003468:	60a3      	str	r3, [r4, #8]
 800346a:	89a3      	ldrh	r3, [r4, #12]
 800346c:	071a      	lsls	r2, r3, #28
 800346e:	d52f      	bpl.n	80034d0 <__swbuf_r+0x84>
 8003470:	6923      	ldr	r3, [r4, #16]
 8003472:	b36b      	cbz	r3, 80034d0 <__swbuf_r+0x84>
 8003474:	6923      	ldr	r3, [r4, #16]
 8003476:	6820      	ldr	r0, [r4, #0]
 8003478:	1ac0      	subs	r0, r0, r3
 800347a:	6963      	ldr	r3, [r4, #20]
 800347c:	b2f6      	uxtb	r6, r6
 800347e:	4283      	cmp	r3, r0
 8003480:	4637      	mov	r7, r6
 8003482:	dc04      	bgt.n	800348e <__swbuf_r+0x42>
 8003484:	4621      	mov	r1, r4
 8003486:	4628      	mov	r0, r5
 8003488:	f000 f926 	bl	80036d8 <_fflush_r>
 800348c:	bb30      	cbnz	r0, 80034dc <__swbuf_r+0x90>
 800348e:	68a3      	ldr	r3, [r4, #8]
 8003490:	3b01      	subs	r3, #1
 8003492:	60a3      	str	r3, [r4, #8]
 8003494:	6823      	ldr	r3, [r4, #0]
 8003496:	1c5a      	adds	r2, r3, #1
 8003498:	6022      	str	r2, [r4, #0]
 800349a:	701e      	strb	r6, [r3, #0]
 800349c:	6963      	ldr	r3, [r4, #20]
 800349e:	3001      	adds	r0, #1
 80034a0:	4283      	cmp	r3, r0
 80034a2:	d004      	beq.n	80034ae <__swbuf_r+0x62>
 80034a4:	89a3      	ldrh	r3, [r4, #12]
 80034a6:	07db      	lsls	r3, r3, #31
 80034a8:	d506      	bpl.n	80034b8 <__swbuf_r+0x6c>
 80034aa:	2e0a      	cmp	r6, #10
 80034ac:	d104      	bne.n	80034b8 <__swbuf_r+0x6c>
 80034ae:	4621      	mov	r1, r4
 80034b0:	4628      	mov	r0, r5
 80034b2:	f000 f911 	bl	80036d8 <_fflush_r>
 80034b6:	b988      	cbnz	r0, 80034dc <__swbuf_r+0x90>
 80034b8:	4638      	mov	r0, r7
 80034ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80034bc:	4b0a      	ldr	r3, [pc, #40]	; (80034e8 <__swbuf_r+0x9c>)
 80034be:	429c      	cmp	r4, r3
 80034c0:	d101      	bne.n	80034c6 <__swbuf_r+0x7a>
 80034c2:	68ac      	ldr	r4, [r5, #8]
 80034c4:	e7cf      	b.n	8003466 <__swbuf_r+0x1a>
 80034c6:	4b09      	ldr	r3, [pc, #36]	; (80034ec <__swbuf_r+0xa0>)
 80034c8:	429c      	cmp	r4, r3
 80034ca:	bf08      	it	eq
 80034cc:	68ec      	ldreq	r4, [r5, #12]
 80034ce:	e7ca      	b.n	8003466 <__swbuf_r+0x1a>
 80034d0:	4621      	mov	r1, r4
 80034d2:	4628      	mov	r0, r5
 80034d4:	f000 f80c 	bl	80034f0 <__swsetup_r>
 80034d8:	2800      	cmp	r0, #0
 80034da:	d0cb      	beq.n	8003474 <__swbuf_r+0x28>
 80034dc:	f04f 37ff 	mov.w	r7, #4294967295
 80034e0:	e7ea      	b.n	80034b8 <__swbuf_r+0x6c>
 80034e2:	bf00      	nop
 80034e4:	08003e90 	.word	0x08003e90
 80034e8:	08003eb0 	.word	0x08003eb0
 80034ec:	08003e70 	.word	0x08003e70

080034f0 <__swsetup_r>:
 80034f0:	4b32      	ldr	r3, [pc, #200]	; (80035bc <__swsetup_r+0xcc>)
 80034f2:	b570      	push	{r4, r5, r6, lr}
 80034f4:	681d      	ldr	r5, [r3, #0]
 80034f6:	4606      	mov	r6, r0
 80034f8:	460c      	mov	r4, r1
 80034fa:	b125      	cbz	r5, 8003506 <__swsetup_r+0x16>
 80034fc:	69ab      	ldr	r3, [r5, #24]
 80034fe:	b913      	cbnz	r3, 8003506 <__swsetup_r+0x16>
 8003500:	4628      	mov	r0, r5
 8003502:	f000 f97d 	bl	8003800 <__sinit>
 8003506:	4b2e      	ldr	r3, [pc, #184]	; (80035c0 <__swsetup_r+0xd0>)
 8003508:	429c      	cmp	r4, r3
 800350a:	d10f      	bne.n	800352c <__swsetup_r+0x3c>
 800350c:	686c      	ldr	r4, [r5, #4]
 800350e:	89a3      	ldrh	r3, [r4, #12]
 8003510:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003514:	0719      	lsls	r1, r3, #28
 8003516:	d42c      	bmi.n	8003572 <__swsetup_r+0x82>
 8003518:	06dd      	lsls	r5, r3, #27
 800351a:	d411      	bmi.n	8003540 <__swsetup_r+0x50>
 800351c:	2309      	movs	r3, #9
 800351e:	6033      	str	r3, [r6, #0]
 8003520:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003524:	81a3      	strh	r3, [r4, #12]
 8003526:	f04f 30ff 	mov.w	r0, #4294967295
 800352a:	e03e      	b.n	80035aa <__swsetup_r+0xba>
 800352c:	4b25      	ldr	r3, [pc, #148]	; (80035c4 <__swsetup_r+0xd4>)
 800352e:	429c      	cmp	r4, r3
 8003530:	d101      	bne.n	8003536 <__swsetup_r+0x46>
 8003532:	68ac      	ldr	r4, [r5, #8]
 8003534:	e7eb      	b.n	800350e <__swsetup_r+0x1e>
 8003536:	4b24      	ldr	r3, [pc, #144]	; (80035c8 <__swsetup_r+0xd8>)
 8003538:	429c      	cmp	r4, r3
 800353a:	bf08      	it	eq
 800353c:	68ec      	ldreq	r4, [r5, #12]
 800353e:	e7e6      	b.n	800350e <__swsetup_r+0x1e>
 8003540:	0758      	lsls	r0, r3, #29
 8003542:	d512      	bpl.n	800356a <__swsetup_r+0x7a>
 8003544:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003546:	b141      	cbz	r1, 800355a <__swsetup_r+0x6a>
 8003548:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800354c:	4299      	cmp	r1, r3
 800354e:	d002      	beq.n	8003556 <__swsetup_r+0x66>
 8003550:	4630      	mov	r0, r6
 8003552:	f000 fa59 	bl	8003a08 <_free_r>
 8003556:	2300      	movs	r3, #0
 8003558:	6363      	str	r3, [r4, #52]	; 0x34
 800355a:	89a3      	ldrh	r3, [r4, #12]
 800355c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003560:	81a3      	strh	r3, [r4, #12]
 8003562:	2300      	movs	r3, #0
 8003564:	6063      	str	r3, [r4, #4]
 8003566:	6923      	ldr	r3, [r4, #16]
 8003568:	6023      	str	r3, [r4, #0]
 800356a:	89a3      	ldrh	r3, [r4, #12]
 800356c:	f043 0308 	orr.w	r3, r3, #8
 8003570:	81a3      	strh	r3, [r4, #12]
 8003572:	6923      	ldr	r3, [r4, #16]
 8003574:	b94b      	cbnz	r3, 800358a <__swsetup_r+0x9a>
 8003576:	89a3      	ldrh	r3, [r4, #12]
 8003578:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800357c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003580:	d003      	beq.n	800358a <__swsetup_r+0x9a>
 8003582:	4621      	mov	r1, r4
 8003584:	4630      	mov	r0, r6
 8003586:	f000 f9ff 	bl	8003988 <__smakebuf_r>
 800358a:	89a0      	ldrh	r0, [r4, #12]
 800358c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003590:	f010 0301 	ands.w	r3, r0, #1
 8003594:	d00a      	beq.n	80035ac <__swsetup_r+0xbc>
 8003596:	2300      	movs	r3, #0
 8003598:	60a3      	str	r3, [r4, #8]
 800359a:	6963      	ldr	r3, [r4, #20]
 800359c:	425b      	negs	r3, r3
 800359e:	61a3      	str	r3, [r4, #24]
 80035a0:	6923      	ldr	r3, [r4, #16]
 80035a2:	b943      	cbnz	r3, 80035b6 <__swsetup_r+0xc6>
 80035a4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80035a8:	d1ba      	bne.n	8003520 <__swsetup_r+0x30>
 80035aa:	bd70      	pop	{r4, r5, r6, pc}
 80035ac:	0781      	lsls	r1, r0, #30
 80035ae:	bf58      	it	pl
 80035b0:	6963      	ldrpl	r3, [r4, #20]
 80035b2:	60a3      	str	r3, [r4, #8]
 80035b4:	e7f4      	b.n	80035a0 <__swsetup_r+0xb0>
 80035b6:	2000      	movs	r0, #0
 80035b8:	e7f7      	b.n	80035aa <__swsetup_r+0xba>
 80035ba:	bf00      	nop
 80035bc:	200001c4 	.word	0x200001c4
 80035c0:	08003e90 	.word	0x08003e90
 80035c4:	08003eb0 	.word	0x08003eb0
 80035c8:	08003e70 	.word	0x08003e70

080035cc <__sflush_r>:
 80035cc:	898a      	ldrh	r2, [r1, #12]
 80035ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80035d2:	4605      	mov	r5, r0
 80035d4:	0710      	lsls	r0, r2, #28
 80035d6:	460c      	mov	r4, r1
 80035d8:	d458      	bmi.n	800368c <__sflush_r+0xc0>
 80035da:	684b      	ldr	r3, [r1, #4]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	dc05      	bgt.n	80035ec <__sflush_r+0x20>
 80035e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	dc02      	bgt.n	80035ec <__sflush_r+0x20>
 80035e6:	2000      	movs	r0, #0
 80035e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80035ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80035ee:	2e00      	cmp	r6, #0
 80035f0:	d0f9      	beq.n	80035e6 <__sflush_r+0x1a>
 80035f2:	2300      	movs	r3, #0
 80035f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80035f8:	682f      	ldr	r7, [r5, #0]
 80035fa:	602b      	str	r3, [r5, #0]
 80035fc:	d032      	beq.n	8003664 <__sflush_r+0x98>
 80035fe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003600:	89a3      	ldrh	r3, [r4, #12]
 8003602:	075a      	lsls	r2, r3, #29
 8003604:	d505      	bpl.n	8003612 <__sflush_r+0x46>
 8003606:	6863      	ldr	r3, [r4, #4]
 8003608:	1ac0      	subs	r0, r0, r3
 800360a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800360c:	b10b      	cbz	r3, 8003612 <__sflush_r+0x46>
 800360e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003610:	1ac0      	subs	r0, r0, r3
 8003612:	2300      	movs	r3, #0
 8003614:	4602      	mov	r2, r0
 8003616:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003618:	6a21      	ldr	r1, [r4, #32]
 800361a:	4628      	mov	r0, r5
 800361c:	47b0      	blx	r6
 800361e:	1c43      	adds	r3, r0, #1
 8003620:	89a3      	ldrh	r3, [r4, #12]
 8003622:	d106      	bne.n	8003632 <__sflush_r+0x66>
 8003624:	6829      	ldr	r1, [r5, #0]
 8003626:	291d      	cmp	r1, #29
 8003628:	d82c      	bhi.n	8003684 <__sflush_r+0xb8>
 800362a:	4a2a      	ldr	r2, [pc, #168]	; (80036d4 <__sflush_r+0x108>)
 800362c:	40ca      	lsrs	r2, r1
 800362e:	07d6      	lsls	r6, r2, #31
 8003630:	d528      	bpl.n	8003684 <__sflush_r+0xb8>
 8003632:	2200      	movs	r2, #0
 8003634:	6062      	str	r2, [r4, #4]
 8003636:	04d9      	lsls	r1, r3, #19
 8003638:	6922      	ldr	r2, [r4, #16]
 800363a:	6022      	str	r2, [r4, #0]
 800363c:	d504      	bpl.n	8003648 <__sflush_r+0x7c>
 800363e:	1c42      	adds	r2, r0, #1
 8003640:	d101      	bne.n	8003646 <__sflush_r+0x7a>
 8003642:	682b      	ldr	r3, [r5, #0]
 8003644:	b903      	cbnz	r3, 8003648 <__sflush_r+0x7c>
 8003646:	6560      	str	r0, [r4, #84]	; 0x54
 8003648:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800364a:	602f      	str	r7, [r5, #0]
 800364c:	2900      	cmp	r1, #0
 800364e:	d0ca      	beq.n	80035e6 <__sflush_r+0x1a>
 8003650:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003654:	4299      	cmp	r1, r3
 8003656:	d002      	beq.n	800365e <__sflush_r+0x92>
 8003658:	4628      	mov	r0, r5
 800365a:	f000 f9d5 	bl	8003a08 <_free_r>
 800365e:	2000      	movs	r0, #0
 8003660:	6360      	str	r0, [r4, #52]	; 0x34
 8003662:	e7c1      	b.n	80035e8 <__sflush_r+0x1c>
 8003664:	6a21      	ldr	r1, [r4, #32]
 8003666:	2301      	movs	r3, #1
 8003668:	4628      	mov	r0, r5
 800366a:	47b0      	blx	r6
 800366c:	1c41      	adds	r1, r0, #1
 800366e:	d1c7      	bne.n	8003600 <__sflush_r+0x34>
 8003670:	682b      	ldr	r3, [r5, #0]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d0c4      	beq.n	8003600 <__sflush_r+0x34>
 8003676:	2b1d      	cmp	r3, #29
 8003678:	d001      	beq.n	800367e <__sflush_r+0xb2>
 800367a:	2b16      	cmp	r3, #22
 800367c:	d101      	bne.n	8003682 <__sflush_r+0xb6>
 800367e:	602f      	str	r7, [r5, #0]
 8003680:	e7b1      	b.n	80035e6 <__sflush_r+0x1a>
 8003682:	89a3      	ldrh	r3, [r4, #12]
 8003684:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003688:	81a3      	strh	r3, [r4, #12]
 800368a:	e7ad      	b.n	80035e8 <__sflush_r+0x1c>
 800368c:	690f      	ldr	r7, [r1, #16]
 800368e:	2f00      	cmp	r7, #0
 8003690:	d0a9      	beq.n	80035e6 <__sflush_r+0x1a>
 8003692:	0793      	lsls	r3, r2, #30
 8003694:	680e      	ldr	r6, [r1, #0]
 8003696:	bf08      	it	eq
 8003698:	694b      	ldreq	r3, [r1, #20]
 800369a:	600f      	str	r7, [r1, #0]
 800369c:	bf18      	it	ne
 800369e:	2300      	movne	r3, #0
 80036a0:	eba6 0807 	sub.w	r8, r6, r7
 80036a4:	608b      	str	r3, [r1, #8]
 80036a6:	f1b8 0f00 	cmp.w	r8, #0
 80036aa:	dd9c      	ble.n	80035e6 <__sflush_r+0x1a>
 80036ac:	6a21      	ldr	r1, [r4, #32]
 80036ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80036b0:	4643      	mov	r3, r8
 80036b2:	463a      	mov	r2, r7
 80036b4:	4628      	mov	r0, r5
 80036b6:	47b0      	blx	r6
 80036b8:	2800      	cmp	r0, #0
 80036ba:	dc06      	bgt.n	80036ca <__sflush_r+0xfe>
 80036bc:	89a3      	ldrh	r3, [r4, #12]
 80036be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036c2:	81a3      	strh	r3, [r4, #12]
 80036c4:	f04f 30ff 	mov.w	r0, #4294967295
 80036c8:	e78e      	b.n	80035e8 <__sflush_r+0x1c>
 80036ca:	4407      	add	r7, r0
 80036cc:	eba8 0800 	sub.w	r8, r8, r0
 80036d0:	e7e9      	b.n	80036a6 <__sflush_r+0xda>
 80036d2:	bf00      	nop
 80036d4:	20400001 	.word	0x20400001

080036d8 <_fflush_r>:
 80036d8:	b538      	push	{r3, r4, r5, lr}
 80036da:	690b      	ldr	r3, [r1, #16]
 80036dc:	4605      	mov	r5, r0
 80036de:	460c      	mov	r4, r1
 80036e0:	b913      	cbnz	r3, 80036e8 <_fflush_r+0x10>
 80036e2:	2500      	movs	r5, #0
 80036e4:	4628      	mov	r0, r5
 80036e6:	bd38      	pop	{r3, r4, r5, pc}
 80036e8:	b118      	cbz	r0, 80036f2 <_fflush_r+0x1a>
 80036ea:	6983      	ldr	r3, [r0, #24]
 80036ec:	b90b      	cbnz	r3, 80036f2 <_fflush_r+0x1a>
 80036ee:	f000 f887 	bl	8003800 <__sinit>
 80036f2:	4b14      	ldr	r3, [pc, #80]	; (8003744 <_fflush_r+0x6c>)
 80036f4:	429c      	cmp	r4, r3
 80036f6:	d11b      	bne.n	8003730 <_fflush_r+0x58>
 80036f8:	686c      	ldr	r4, [r5, #4]
 80036fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d0ef      	beq.n	80036e2 <_fflush_r+0xa>
 8003702:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003704:	07d0      	lsls	r0, r2, #31
 8003706:	d404      	bmi.n	8003712 <_fflush_r+0x3a>
 8003708:	0599      	lsls	r1, r3, #22
 800370a:	d402      	bmi.n	8003712 <_fflush_r+0x3a>
 800370c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800370e:	f000 f915 	bl	800393c <__retarget_lock_acquire_recursive>
 8003712:	4628      	mov	r0, r5
 8003714:	4621      	mov	r1, r4
 8003716:	f7ff ff59 	bl	80035cc <__sflush_r>
 800371a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800371c:	07da      	lsls	r2, r3, #31
 800371e:	4605      	mov	r5, r0
 8003720:	d4e0      	bmi.n	80036e4 <_fflush_r+0xc>
 8003722:	89a3      	ldrh	r3, [r4, #12]
 8003724:	059b      	lsls	r3, r3, #22
 8003726:	d4dd      	bmi.n	80036e4 <_fflush_r+0xc>
 8003728:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800372a:	f000 f908 	bl	800393e <__retarget_lock_release_recursive>
 800372e:	e7d9      	b.n	80036e4 <_fflush_r+0xc>
 8003730:	4b05      	ldr	r3, [pc, #20]	; (8003748 <_fflush_r+0x70>)
 8003732:	429c      	cmp	r4, r3
 8003734:	d101      	bne.n	800373a <_fflush_r+0x62>
 8003736:	68ac      	ldr	r4, [r5, #8]
 8003738:	e7df      	b.n	80036fa <_fflush_r+0x22>
 800373a:	4b04      	ldr	r3, [pc, #16]	; (800374c <_fflush_r+0x74>)
 800373c:	429c      	cmp	r4, r3
 800373e:	bf08      	it	eq
 8003740:	68ec      	ldreq	r4, [r5, #12]
 8003742:	e7da      	b.n	80036fa <_fflush_r+0x22>
 8003744:	08003e90 	.word	0x08003e90
 8003748:	08003eb0 	.word	0x08003eb0
 800374c:	08003e70 	.word	0x08003e70

08003750 <std>:
 8003750:	2300      	movs	r3, #0
 8003752:	b510      	push	{r4, lr}
 8003754:	4604      	mov	r4, r0
 8003756:	e9c0 3300 	strd	r3, r3, [r0]
 800375a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800375e:	6083      	str	r3, [r0, #8]
 8003760:	8181      	strh	r1, [r0, #12]
 8003762:	6643      	str	r3, [r0, #100]	; 0x64
 8003764:	81c2      	strh	r2, [r0, #14]
 8003766:	6183      	str	r3, [r0, #24]
 8003768:	4619      	mov	r1, r3
 800376a:	2208      	movs	r2, #8
 800376c:	305c      	adds	r0, #92	; 0x5c
 800376e:	f7ff fde7 	bl	8003340 <memset>
 8003772:	4b05      	ldr	r3, [pc, #20]	; (8003788 <std+0x38>)
 8003774:	6263      	str	r3, [r4, #36]	; 0x24
 8003776:	4b05      	ldr	r3, [pc, #20]	; (800378c <std+0x3c>)
 8003778:	62a3      	str	r3, [r4, #40]	; 0x28
 800377a:	4b05      	ldr	r3, [pc, #20]	; (8003790 <std+0x40>)
 800377c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800377e:	4b05      	ldr	r3, [pc, #20]	; (8003794 <std+0x44>)
 8003780:	6224      	str	r4, [r4, #32]
 8003782:	6323      	str	r3, [r4, #48]	; 0x30
 8003784:	bd10      	pop	{r4, pc}
 8003786:	bf00      	nop
 8003788:	08003b7d 	.word	0x08003b7d
 800378c:	08003b9f 	.word	0x08003b9f
 8003790:	08003bd7 	.word	0x08003bd7
 8003794:	08003bfb 	.word	0x08003bfb

08003798 <_cleanup_r>:
 8003798:	4901      	ldr	r1, [pc, #4]	; (80037a0 <_cleanup_r+0x8>)
 800379a:	f000 b8af 	b.w	80038fc <_fwalk_reent>
 800379e:	bf00      	nop
 80037a0:	080036d9 	.word	0x080036d9

080037a4 <__sfmoreglue>:
 80037a4:	b570      	push	{r4, r5, r6, lr}
 80037a6:	1e4a      	subs	r2, r1, #1
 80037a8:	2568      	movs	r5, #104	; 0x68
 80037aa:	4355      	muls	r5, r2
 80037ac:	460e      	mov	r6, r1
 80037ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80037b2:	f000 f979 	bl	8003aa8 <_malloc_r>
 80037b6:	4604      	mov	r4, r0
 80037b8:	b140      	cbz	r0, 80037cc <__sfmoreglue+0x28>
 80037ba:	2100      	movs	r1, #0
 80037bc:	e9c0 1600 	strd	r1, r6, [r0]
 80037c0:	300c      	adds	r0, #12
 80037c2:	60a0      	str	r0, [r4, #8]
 80037c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80037c8:	f7ff fdba 	bl	8003340 <memset>
 80037cc:	4620      	mov	r0, r4
 80037ce:	bd70      	pop	{r4, r5, r6, pc}

080037d0 <__sfp_lock_acquire>:
 80037d0:	4801      	ldr	r0, [pc, #4]	; (80037d8 <__sfp_lock_acquire+0x8>)
 80037d2:	f000 b8b3 	b.w	800393c <__retarget_lock_acquire_recursive>
 80037d6:	bf00      	nop
 80037d8:	2000075a 	.word	0x2000075a

080037dc <__sfp_lock_release>:
 80037dc:	4801      	ldr	r0, [pc, #4]	; (80037e4 <__sfp_lock_release+0x8>)
 80037de:	f000 b8ae 	b.w	800393e <__retarget_lock_release_recursive>
 80037e2:	bf00      	nop
 80037e4:	2000075a 	.word	0x2000075a

080037e8 <__sinit_lock_acquire>:
 80037e8:	4801      	ldr	r0, [pc, #4]	; (80037f0 <__sinit_lock_acquire+0x8>)
 80037ea:	f000 b8a7 	b.w	800393c <__retarget_lock_acquire_recursive>
 80037ee:	bf00      	nop
 80037f0:	20000755 	.word	0x20000755

080037f4 <__sinit_lock_release>:
 80037f4:	4801      	ldr	r0, [pc, #4]	; (80037fc <__sinit_lock_release+0x8>)
 80037f6:	f000 b8a2 	b.w	800393e <__retarget_lock_release_recursive>
 80037fa:	bf00      	nop
 80037fc:	20000755 	.word	0x20000755

08003800 <__sinit>:
 8003800:	b510      	push	{r4, lr}
 8003802:	4604      	mov	r4, r0
 8003804:	f7ff fff0 	bl	80037e8 <__sinit_lock_acquire>
 8003808:	69a3      	ldr	r3, [r4, #24]
 800380a:	b11b      	cbz	r3, 8003814 <__sinit+0x14>
 800380c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003810:	f7ff bff0 	b.w	80037f4 <__sinit_lock_release>
 8003814:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003818:	6523      	str	r3, [r4, #80]	; 0x50
 800381a:	4b13      	ldr	r3, [pc, #76]	; (8003868 <__sinit+0x68>)
 800381c:	4a13      	ldr	r2, [pc, #76]	; (800386c <__sinit+0x6c>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	62a2      	str	r2, [r4, #40]	; 0x28
 8003822:	42a3      	cmp	r3, r4
 8003824:	bf04      	itt	eq
 8003826:	2301      	moveq	r3, #1
 8003828:	61a3      	streq	r3, [r4, #24]
 800382a:	4620      	mov	r0, r4
 800382c:	f000 f820 	bl	8003870 <__sfp>
 8003830:	6060      	str	r0, [r4, #4]
 8003832:	4620      	mov	r0, r4
 8003834:	f000 f81c 	bl	8003870 <__sfp>
 8003838:	60a0      	str	r0, [r4, #8]
 800383a:	4620      	mov	r0, r4
 800383c:	f000 f818 	bl	8003870 <__sfp>
 8003840:	2200      	movs	r2, #0
 8003842:	60e0      	str	r0, [r4, #12]
 8003844:	2104      	movs	r1, #4
 8003846:	6860      	ldr	r0, [r4, #4]
 8003848:	f7ff ff82 	bl	8003750 <std>
 800384c:	68a0      	ldr	r0, [r4, #8]
 800384e:	2201      	movs	r2, #1
 8003850:	2109      	movs	r1, #9
 8003852:	f7ff ff7d 	bl	8003750 <std>
 8003856:	68e0      	ldr	r0, [r4, #12]
 8003858:	2202      	movs	r2, #2
 800385a:	2112      	movs	r1, #18
 800385c:	f7ff ff78 	bl	8003750 <std>
 8003860:	2301      	movs	r3, #1
 8003862:	61a3      	str	r3, [r4, #24]
 8003864:	e7d2      	b.n	800380c <__sinit+0xc>
 8003866:	bf00      	nop
 8003868:	08003e6c 	.word	0x08003e6c
 800386c:	08003799 	.word	0x08003799

08003870 <__sfp>:
 8003870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003872:	4607      	mov	r7, r0
 8003874:	f7ff ffac 	bl	80037d0 <__sfp_lock_acquire>
 8003878:	4b1e      	ldr	r3, [pc, #120]	; (80038f4 <__sfp+0x84>)
 800387a:	681e      	ldr	r6, [r3, #0]
 800387c:	69b3      	ldr	r3, [r6, #24]
 800387e:	b913      	cbnz	r3, 8003886 <__sfp+0x16>
 8003880:	4630      	mov	r0, r6
 8003882:	f7ff ffbd 	bl	8003800 <__sinit>
 8003886:	3648      	adds	r6, #72	; 0x48
 8003888:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800388c:	3b01      	subs	r3, #1
 800388e:	d503      	bpl.n	8003898 <__sfp+0x28>
 8003890:	6833      	ldr	r3, [r6, #0]
 8003892:	b30b      	cbz	r3, 80038d8 <__sfp+0x68>
 8003894:	6836      	ldr	r6, [r6, #0]
 8003896:	e7f7      	b.n	8003888 <__sfp+0x18>
 8003898:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800389c:	b9d5      	cbnz	r5, 80038d4 <__sfp+0x64>
 800389e:	4b16      	ldr	r3, [pc, #88]	; (80038f8 <__sfp+0x88>)
 80038a0:	60e3      	str	r3, [r4, #12]
 80038a2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80038a6:	6665      	str	r5, [r4, #100]	; 0x64
 80038a8:	f000 f847 	bl	800393a <__retarget_lock_init_recursive>
 80038ac:	f7ff ff96 	bl	80037dc <__sfp_lock_release>
 80038b0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80038b4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80038b8:	6025      	str	r5, [r4, #0]
 80038ba:	61a5      	str	r5, [r4, #24]
 80038bc:	2208      	movs	r2, #8
 80038be:	4629      	mov	r1, r5
 80038c0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80038c4:	f7ff fd3c 	bl	8003340 <memset>
 80038c8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80038cc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80038d0:	4620      	mov	r0, r4
 80038d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80038d4:	3468      	adds	r4, #104	; 0x68
 80038d6:	e7d9      	b.n	800388c <__sfp+0x1c>
 80038d8:	2104      	movs	r1, #4
 80038da:	4638      	mov	r0, r7
 80038dc:	f7ff ff62 	bl	80037a4 <__sfmoreglue>
 80038e0:	4604      	mov	r4, r0
 80038e2:	6030      	str	r0, [r6, #0]
 80038e4:	2800      	cmp	r0, #0
 80038e6:	d1d5      	bne.n	8003894 <__sfp+0x24>
 80038e8:	f7ff ff78 	bl	80037dc <__sfp_lock_release>
 80038ec:	230c      	movs	r3, #12
 80038ee:	603b      	str	r3, [r7, #0]
 80038f0:	e7ee      	b.n	80038d0 <__sfp+0x60>
 80038f2:	bf00      	nop
 80038f4:	08003e6c 	.word	0x08003e6c
 80038f8:	ffff0001 	.word	0xffff0001

080038fc <_fwalk_reent>:
 80038fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003900:	4606      	mov	r6, r0
 8003902:	4688      	mov	r8, r1
 8003904:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003908:	2700      	movs	r7, #0
 800390a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800390e:	f1b9 0901 	subs.w	r9, r9, #1
 8003912:	d505      	bpl.n	8003920 <_fwalk_reent+0x24>
 8003914:	6824      	ldr	r4, [r4, #0]
 8003916:	2c00      	cmp	r4, #0
 8003918:	d1f7      	bne.n	800390a <_fwalk_reent+0xe>
 800391a:	4638      	mov	r0, r7
 800391c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003920:	89ab      	ldrh	r3, [r5, #12]
 8003922:	2b01      	cmp	r3, #1
 8003924:	d907      	bls.n	8003936 <_fwalk_reent+0x3a>
 8003926:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800392a:	3301      	adds	r3, #1
 800392c:	d003      	beq.n	8003936 <_fwalk_reent+0x3a>
 800392e:	4629      	mov	r1, r5
 8003930:	4630      	mov	r0, r6
 8003932:	47c0      	blx	r8
 8003934:	4307      	orrs	r7, r0
 8003936:	3568      	adds	r5, #104	; 0x68
 8003938:	e7e9      	b.n	800390e <_fwalk_reent+0x12>

0800393a <__retarget_lock_init_recursive>:
 800393a:	4770      	bx	lr

0800393c <__retarget_lock_acquire_recursive>:
 800393c:	4770      	bx	lr

0800393e <__retarget_lock_release_recursive>:
 800393e:	4770      	bx	lr

08003940 <__swhatbuf_r>:
 8003940:	b570      	push	{r4, r5, r6, lr}
 8003942:	460e      	mov	r6, r1
 8003944:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003948:	2900      	cmp	r1, #0
 800394a:	b096      	sub	sp, #88	; 0x58
 800394c:	4614      	mov	r4, r2
 800394e:	461d      	mov	r5, r3
 8003950:	da07      	bge.n	8003962 <__swhatbuf_r+0x22>
 8003952:	2300      	movs	r3, #0
 8003954:	602b      	str	r3, [r5, #0]
 8003956:	89b3      	ldrh	r3, [r6, #12]
 8003958:	061a      	lsls	r2, r3, #24
 800395a:	d410      	bmi.n	800397e <__swhatbuf_r+0x3e>
 800395c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003960:	e00e      	b.n	8003980 <__swhatbuf_r+0x40>
 8003962:	466a      	mov	r2, sp
 8003964:	f000 f970 	bl	8003c48 <_fstat_r>
 8003968:	2800      	cmp	r0, #0
 800396a:	dbf2      	blt.n	8003952 <__swhatbuf_r+0x12>
 800396c:	9a01      	ldr	r2, [sp, #4]
 800396e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003972:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003976:	425a      	negs	r2, r3
 8003978:	415a      	adcs	r2, r3
 800397a:	602a      	str	r2, [r5, #0]
 800397c:	e7ee      	b.n	800395c <__swhatbuf_r+0x1c>
 800397e:	2340      	movs	r3, #64	; 0x40
 8003980:	2000      	movs	r0, #0
 8003982:	6023      	str	r3, [r4, #0]
 8003984:	b016      	add	sp, #88	; 0x58
 8003986:	bd70      	pop	{r4, r5, r6, pc}

08003988 <__smakebuf_r>:
 8003988:	898b      	ldrh	r3, [r1, #12]
 800398a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800398c:	079d      	lsls	r5, r3, #30
 800398e:	4606      	mov	r6, r0
 8003990:	460c      	mov	r4, r1
 8003992:	d507      	bpl.n	80039a4 <__smakebuf_r+0x1c>
 8003994:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003998:	6023      	str	r3, [r4, #0]
 800399a:	6123      	str	r3, [r4, #16]
 800399c:	2301      	movs	r3, #1
 800399e:	6163      	str	r3, [r4, #20]
 80039a0:	b002      	add	sp, #8
 80039a2:	bd70      	pop	{r4, r5, r6, pc}
 80039a4:	ab01      	add	r3, sp, #4
 80039a6:	466a      	mov	r2, sp
 80039a8:	f7ff ffca 	bl	8003940 <__swhatbuf_r>
 80039ac:	9900      	ldr	r1, [sp, #0]
 80039ae:	4605      	mov	r5, r0
 80039b0:	4630      	mov	r0, r6
 80039b2:	f000 f879 	bl	8003aa8 <_malloc_r>
 80039b6:	b948      	cbnz	r0, 80039cc <__smakebuf_r+0x44>
 80039b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80039bc:	059a      	lsls	r2, r3, #22
 80039be:	d4ef      	bmi.n	80039a0 <__smakebuf_r+0x18>
 80039c0:	f023 0303 	bic.w	r3, r3, #3
 80039c4:	f043 0302 	orr.w	r3, r3, #2
 80039c8:	81a3      	strh	r3, [r4, #12]
 80039ca:	e7e3      	b.n	8003994 <__smakebuf_r+0xc>
 80039cc:	4b0d      	ldr	r3, [pc, #52]	; (8003a04 <__smakebuf_r+0x7c>)
 80039ce:	62b3      	str	r3, [r6, #40]	; 0x28
 80039d0:	89a3      	ldrh	r3, [r4, #12]
 80039d2:	6020      	str	r0, [r4, #0]
 80039d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039d8:	81a3      	strh	r3, [r4, #12]
 80039da:	9b00      	ldr	r3, [sp, #0]
 80039dc:	6163      	str	r3, [r4, #20]
 80039de:	9b01      	ldr	r3, [sp, #4]
 80039e0:	6120      	str	r0, [r4, #16]
 80039e2:	b15b      	cbz	r3, 80039fc <__smakebuf_r+0x74>
 80039e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80039e8:	4630      	mov	r0, r6
 80039ea:	f000 f93f 	bl	8003c6c <_isatty_r>
 80039ee:	b128      	cbz	r0, 80039fc <__smakebuf_r+0x74>
 80039f0:	89a3      	ldrh	r3, [r4, #12]
 80039f2:	f023 0303 	bic.w	r3, r3, #3
 80039f6:	f043 0301 	orr.w	r3, r3, #1
 80039fa:	81a3      	strh	r3, [r4, #12]
 80039fc:	89a0      	ldrh	r0, [r4, #12]
 80039fe:	4305      	orrs	r5, r0
 8003a00:	81a5      	strh	r5, [r4, #12]
 8003a02:	e7cd      	b.n	80039a0 <__smakebuf_r+0x18>
 8003a04:	08003799 	.word	0x08003799

08003a08 <_free_r>:
 8003a08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003a0a:	2900      	cmp	r1, #0
 8003a0c:	d048      	beq.n	8003aa0 <_free_r+0x98>
 8003a0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a12:	9001      	str	r0, [sp, #4]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	f1a1 0404 	sub.w	r4, r1, #4
 8003a1a:	bfb8      	it	lt
 8003a1c:	18e4      	addlt	r4, r4, r3
 8003a1e:	f000 f947 	bl	8003cb0 <__malloc_lock>
 8003a22:	4a20      	ldr	r2, [pc, #128]	; (8003aa4 <_free_r+0x9c>)
 8003a24:	9801      	ldr	r0, [sp, #4]
 8003a26:	6813      	ldr	r3, [r2, #0]
 8003a28:	4615      	mov	r5, r2
 8003a2a:	b933      	cbnz	r3, 8003a3a <_free_r+0x32>
 8003a2c:	6063      	str	r3, [r4, #4]
 8003a2e:	6014      	str	r4, [r2, #0]
 8003a30:	b003      	add	sp, #12
 8003a32:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003a36:	f000 b941 	b.w	8003cbc <__malloc_unlock>
 8003a3a:	42a3      	cmp	r3, r4
 8003a3c:	d90b      	bls.n	8003a56 <_free_r+0x4e>
 8003a3e:	6821      	ldr	r1, [r4, #0]
 8003a40:	1862      	adds	r2, r4, r1
 8003a42:	4293      	cmp	r3, r2
 8003a44:	bf04      	itt	eq
 8003a46:	681a      	ldreq	r2, [r3, #0]
 8003a48:	685b      	ldreq	r3, [r3, #4]
 8003a4a:	6063      	str	r3, [r4, #4]
 8003a4c:	bf04      	itt	eq
 8003a4e:	1852      	addeq	r2, r2, r1
 8003a50:	6022      	streq	r2, [r4, #0]
 8003a52:	602c      	str	r4, [r5, #0]
 8003a54:	e7ec      	b.n	8003a30 <_free_r+0x28>
 8003a56:	461a      	mov	r2, r3
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	b10b      	cbz	r3, 8003a60 <_free_r+0x58>
 8003a5c:	42a3      	cmp	r3, r4
 8003a5e:	d9fa      	bls.n	8003a56 <_free_r+0x4e>
 8003a60:	6811      	ldr	r1, [r2, #0]
 8003a62:	1855      	adds	r5, r2, r1
 8003a64:	42a5      	cmp	r5, r4
 8003a66:	d10b      	bne.n	8003a80 <_free_r+0x78>
 8003a68:	6824      	ldr	r4, [r4, #0]
 8003a6a:	4421      	add	r1, r4
 8003a6c:	1854      	adds	r4, r2, r1
 8003a6e:	42a3      	cmp	r3, r4
 8003a70:	6011      	str	r1, [r2, #0]
 8003a72:	d1dd      	bne.n	8003a30 <_free_r+0x28>
 8003a74:	681c      	ldr	r4, [r3, #0]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	6053      	str	r3, [r2, #4]
 8003a7a:	4421      	add	r1, r4
 8003a7c:	6011      	str	r1, [r2, #0]
 8003a7e:	e7d7      	b.n	8003a30 <_free_r+0x28>
 8003a80:	d902      	bls.n	8003a88 <_free_r+0x80>
 8003a82:	230c      	movs	r3, #12
 8003a84:	6003      	str	r3, [r0, #0]
 8003a86:	e7d3      	b.n	8003a30 <_free_r+0x28>
 8003a88:	6825      	ldr	r5, [r4, #0]
 8003a8a:	1961      	adds	r1, r4, r5
 8003a8c:	428b      	cmp	r3, r1
 8003a8e:	bf04      	itt	eq
 8003a90:	6819      	ldreq	r1, [r3, #0]
 8003a92:	685b      	ldreq	r3, [r3, #4]
 8003a94:	6063      	str	r3, [r4, #4]
 8003a96:	bf04      	itt	eq
 8003a98:	1949      	addeq	r1, r1, r5
 8003a9a:	6021      	streq	r1, [r4, #0]
 8003a9c:	6054      	str	r4, [r2, #4]
 8003a9e:	e7c7      	b.n	8003a30 <_free_r+0x28>
 8003aa0:	b003      	add	sp, #12
 8003aa2:	bd30      	pop	{r4, r5, pc}
 8003aa4:	20000248 	.word	0x20000248

08003aa8 <_malloc_r>:
 8003aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aaa:	1ccd      	adds	r5, r1, #3
 8003aac:	f025 0503 	bic.w	r5, r5, #3
 8003ab0:	3508      	adds	r5, #8
 8003ab2:	2d0c      	cmp	r5, #12
 8003ab4:	bf38      	it	cc
 8003ab6:	250c      	movcc	r5, #12
 8003ab8:	2d00      	cmp	r5, #0
 8003aba:	4606      	mov	r6, r0
 8003abc:	db01      	blt.n	8003ac2 <_malloc_r+0x1a>
 8003abe:	42a9      	cmp	r1, r5
 8003ac0:	d903      	bls.n	8003aca <_malloc_r+0x22>
 8003ac2:	230c      	movs	r3, #12
 8003ac4:	6033      	str	r3, [r6, #0]
 8003ac6:	2000      	movs	r0, #0
 8003ac8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003aca:	f000 f8f1 	bl	8003cb0 <__malloc_lock>
 8003ace:	4921      	ldr	r1, [pc, #132]	; (8003b54 <_malloc_r+0xac>)
 8003ad0:	680a      	ldr	r2, [r1, #0]
 8003ad2:	4614      	mov	r4, r2
 8003ad4:	b99c      	cbnz	r4, 8003afe <_malloc_r+0x56>
 8003ad6:	4f20      	ldr	r7, [pc, #128]	; (8003b58 <_malloc_r+0xb0>)
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	b923      	cbnz	r3, 8003ae6 <_malloc_r+0x3e>
 8003adc:	4621      	mov	r1, r4
 8003ade:	4630      	mov	r0, r6
 8003ae0:	f000 f83c 	bl	8003b5c <_sbrk_r>
 8003ae4:	6038      	str	r0, [r7, #0]
 8003ae6:	4629      	mov	r1, r5
 8003ae8:	4630      	mov	r0, r6
 8003aea:	f000 f837 	bl	8003b5c <_sbrk_r>
 8003aee:	1c43      	adds	r3, r0, #1
 8003af0:	d123      	bne.n	8003b3a <_malloc_r+0x92>
 8003af2:	230c      	movs	r3, #12
 8003af4:	6033      	str	r3, [r6, #0]
 8003af6:	4630      	mov	r0, r6
 8003af8:	f000 f8e0 	bl	8003cbc <__malloc_unlock>
 8003afc:	e7e3      	b.n	8003ac6 <_malloc_r+0x1e>
 8003afe:	6823      	ldr	r3, [r4, #0]
 8003b00:	1b5b      	subs	r3, r3, r5
 8003b02:	d417      	bmi.n	8003b34 <_malloc_r+0x8c>
 8003b04:	2b0b      	cmp	r3, #11
 8003b06:	d903      	bls.n	8003b10 <_malloc_r+0x68>
 8003b08:	6023      	str	r3, [r4, #0]
 8003b0a:	441c      	add	r4, r3
 8003b0c:	6025      	str	r5, [r4, #0]
 8003b0e:	e004      	b.n	8003b1a <_malloc_r+0x72>
 8003b10:	6863      	ldr	r3, [r4, #4]
 8003b12:	42a2      	cmp	r2, r4
 8003b14:	bf0c      	ite	eq
 8003b16:	600b      	streq	r3, [r1, #0]
 8003b18:	6053      	strne	r3, [r2, #4]
 8003b1a:	4630      	mov	r0, r6
 8003b1c:	f000 f8ce 	bl	8003cbc <__malloc_unlock>
 8003b20:	f104 000b 	add.w	r0, r4, #11
 8003b24:	1d23      	adds	r3, r4, #4
 8003b26:	f020 0007 	bic.w	r0, r0, #7
 8003b2a:	1ac2      	subs	r2, r0, r3
 8003b2c:	d0cc      	beq.n	8003ac8 <_malloc_r+0x20>
 8003b2e:	1a1b      	subs	r3, r3, r0
 8003b30:	50a3      	str	r3, [r4, r2]
 8003b32:	e7c9      	b.n	8003ac8 <_malloc_r+0x20>
 8003b34:	4622      	mov	r2, r4
 8003b36:	6864      	ldr	r4, [r4, #4]
 8003b38:	e7cc      	b.n	8003ad4 <_malloc_r+0x2c>
 8003b3a:	1cc4      	adds	r4, r0, #3
 8003b3c:	f024 0403 	bic.w	r4, r4, #3
 8003b40:	42a0      	cmp	r0, r4
 8003b42:	d0e3      	beq.n	8003b0c <_malloc_r+0x64>
 8003b44:	1a21      	subs	r1, r4, r0
 8003b46:	4630      	mov	r0, r6
 8003b48:	f000 f808 	bl	8003b5c <_sbrk_r>
 8003b4c:	3001      	adds	r0, #1
 8003b4e:	d1dd      	bne.n	8003b0c <_malloc_r+0x64>
 8003b50:	e7cf      	b.n	8003af2 <_malloc_r+0x4a>
 8003b52:	bf00      	nop
 8003b54:	20000248 	.word	0x20000248
 8003b58:	2000024c 	.word	0x2000024c

08003b5c <_sbrk_r>:
 8003b5c:	b538      	push	{r3, r4, r5, lr}
 8003b5e:	4d06      	ldr	r5, [pc, #24]	; (8003b78 <_sbrk_r+0x1c>)
 8003b60:	2300      	movs	r3, #0
 8003b62:	4604      	mov	r4, r0
 8003b64:	4608      	mov	r0, r1
 8003b66:	602b      	str	r3, [r5, #0]
 8003b68:	f7fc fdae 	bl	80006c8 <_sbrk>
 8003b6c:	1c43      	adds	r3, r0, #1
 8003b6e:	d102      	bne.n	8003b76 <_sbrk_r+0x1a>
 8003b70:	682b      	ldr	r3, [r5, #0]
 8003b72:	b103      	cbz	r3, 8003b76 <_sbrk_r+0x1a>
 8003b74:	6023      	str	r3, [r4, #0]
 8003b76:	bd38      	pop	{r3, r4, r5, pc}
 8003b78:	2000075c 	.word	0x2000075c

08003b7c <__sread>:
 8003b7c:	b510      	push	{r4, lr}
 8003b7e:	460c      	mov	r4, r1
 8003b80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b84:	f000 f8a0 	bl	8003cc8 <_read_r>
 8003b88:	2800      	cmp	r0, #0
 8003b8a:	bfab      	itete	ge
 8003b8c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003b8e:	89a3      	ldrhlt	r3, [r4, #12]
 8003b90:	181b      	addge	r3, r3, r0
 8003b92:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003b96:	bfac      	ite	ge
 8003b98:	6563      	strge	r3, [r4, #84]	; 0x54
 8003b9a:	81a3      	strhlt	r3, [r4, #12]
 8003b9c:	bd10      	pop	{r4, pc}

08003b9e <__swrite>:
 8003b9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ba2:	461f      	mov	r7, r3
 8003ba4:	898b      	ldrh	r3, [r1, #12]
 8003ba6:	05db      	lsls	r3, r3, #23
 8003ba8:	4605      	mov	r5, r0
 8003baa:	460c      	mov	r4, r1
 8003bac:	4616      	mov	r6, r2
 8003bae:	d505      	bpl.n	8003bbc <__swrite+0x1e>
 8003bb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003bb4:	2302      	movs	r3, #2
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f000 f868 	bl	8003c8c <_lseek_r>
 8003bbc:	89a3      	ldrh	r3, [r4, #12]
 8003bbe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003bc2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003bc6:	81a3      	strh	r3, [r4, #12]
 8003bc8:	4632      	mov	r2, r6
 8003bca:	463b      	mov	r3, r7
 8003bcc:	4628      	mov	r0, r5
 8003bce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003bd2:	f000 b817 	b.w	8003c04 <_write_r>

08003bd6 <__sseek>:
 8003bd6:	b510      	push	{r4, lr}
 8003bd8:	460c      	mov	r4, r1
 8003bda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003bde:	f000 f855 	bl	8003c8c <_lseek_r>
 8003be2:	1c43      	adds	r3, r0, #1
 8003be4:	89a3      	ldrh	r3, [r4, #12]
 8003be6:	bf15      	itete	ne
 8003be8:	6560      	strne	r0, [r4, #84]	; 0x54
 8003bea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003bee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003bf2:	81a3      	strheq	r3, [r4, #12]
 8003bf4:	bf18      	it	ne
 8003bf6:	81a3      	strhne	r3, [r4, #12]
 8003bf8:	bd10      	pop	{r4, pc}

08003bfa <__sclose>:
 8003bfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003bfe:	f000 b813 	b.w	8003c28 <_close_r>
	...

08003c04 <_write_r>:
 8003c04:	b538      	push	{r3, r4, r5, lr}
 8003c06:	4d07      	ldr	r5, [pc, #28]	; (8003c24 <_write_r+0x20>)
 8003c08:	4604      	mov	r4, r0
 8003c0a:	4608      	mov	r0, r1
 8003c0c:	4611      	mov	r1, r2
 8003c0e:	2200      	movs	r2, #0
 8003c10:	602a      	str	r2, [r5, #0]
 8003c12:	461a      	mov	r2, r3
 8003c14:	f7fc fd3f 	bl	8000696 <_write>
 8003c18:	1c43      	adds	r3, r0, #1
 8003c1a:	d102      	bne.n	8003c22 <_write_r+0x1e>
 8003c1c:	682b      	ldr	r3, [r5, #0]
 8003c1e:	b103      	cbz	r3, 8003c22 <_write_r+0x1e>
 8003c20:	6023      	str	r3, [r4, #0]
 8003c22:	bd38      	pop	{r3, r4, r5, pc}
 8003c24:	2000075c 	.word	0x2000075c

08003c28 <_close_r>:
 8003c28:	b538      	push	{r3, r4, r5, lr}
 8003c2a:	4d06      	ldr	r5, [pc, #24]	; (8003c44 <_close_r+0x1c>)
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	4604      	mov	r4, r0
 8003c30:	4608      	mov	r0, r1
 8003c32:	602b      	str	r3, [r5, #0]
 8003c34:	f7fc fd3c 	bl	80006b0 <_close>
 8003c38:	1c43      	adds	r3, r0, #1
 8003c3a:	d102      	bne.n	8003c42 <_close_r+0x1a>
 8003c3c:	682b      	ldr	r3, [r5, #0]
 8003c3e:	b103      	cbz	r3, 8003c42 <_close_r+0x1a>
 8003c40:	6023      	str	r3, [r4, #0]
 8003c42:	bd38      	pop	{r3, r4, r5, pc}
 8003c44:	2000075c 	.word	0x2000075c

08003c48 <_fstat_r>:
 8003c48:	b538      	push	{r3, r4, r5, lr}
 8003c4a:	4d07      	ldr	r5, [pc, #28]	; (8003c68 <_fstat_r+0x20>)
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	4604      	mov	r4, r0
 8003c50:	4608      	mov	r0, r1
 8003c52:	4611      	mov	r1, r2
 8003c54:	602b      	str	r3, [r5, #0]
 8003c56:	f7fc fd2e 	bl	80006b6 <_fstat>
 8003c5a:	1c43      	adds	r3, r0, #1
 8003c5c:	d102      	bne.n	8003c64 <_fstat_r+0x1c>
 8003c5e:	682b      	ldr	r3, [r5, #0]
 8003c60:	b103      	cbz	r3, 8003c64 <_fstat_r+0x1c>
 8003c62:	6023      	str	r3, [r4, #0]
 8003c64:	bd38      	pop	{r3, r4, r5, pc}
 8003c66:	bf00      	nop
 8003c68:	2000075c 	.word	0x2000075c

08003c6c <_isatty_r>:
 8003c6c:	b538      	push	{r3, r4, r5, lr}
 8003c6e:	4d06      	ldr	r5, [pc, #24]	; (8003c88 <_isatty_r+0x1c>)
 8003c70:	2300      	movs	r3, #0
 8003c72:	4604      	mov	r4, r0
 8003c74:	4608      	mov	r0, r1
 8003c76:	602b      	str	r3, [r5, #0]
 8003c78:	f7fc fd22 	bl	80006c0 <_isatty>
 8003c7c:	1c43      	adds	r3, r0, #1
 8003c7e:	d102      	bne.n	8003c86 <_isatty_r+0x1a>
 8003c80:	682b      	ldr	r3, [r5, #0]
 8003c82:	b103      	cbz	r3, 8003c86 <_isatty_r+0x1a>
 8003c84:	6023      	str	r3, [r4, #0]
 8003c86:	bd38      	pop	{r3, r4, r5, pc}
 8003c88:	2000075c 	.word	0x2000075c

08003c8c <_lseek_r>:
 8003c8c:	b538      	push	{r3, r4, r5, lr}
 8003c8e:	4d07      	ldr	r5, [pc, #28]	; (8003cac <_lseek_r+0x20>)
 8003c90:	4604      	mov	r4, r0
 8003c92:	4608      	mov	r0, r1
 8003c94:	4611      	mov	r1, r2
 8003c96:	2200      	movs	r2, #0
 8003c98:	602a      	str	r2, [r5, #0]
 8003c9a:	461a      	mov	r2, r3
 8003c9c:	f7fc fd12 	bl	80006c4 <_lseek>
 8003ca0:	1c43      	adds	r3, r0, #1
 8003ca2:	d102      	bne.n	8003caa <_lseek_r+0x1e>
 8003ca4:	682b      	ldr	r3, [r5, #0]
 8003ca6:	b103      	cbz	r3, 8003caa <_lseek_r+0x1e>
 8003ca8:	6023      	str	r3, [r4, #0]
 8003caa:	bd38      	pop	{r3, r4, r5, pc}
 8003cac:	2000075c 	.word	0x2000075c

08003cb0 <__malloc_lock>:
 8003cb0:	4801      	ldr	r0, [pc, #4]	; (8003cb8 <__malloc_lock+0x8>)
 8003cb2:	f7ff be43 	b.w	800393c <__retarget_lock_acquire_recursive>
 8003cb6:	bf00      	nop
 8003cb8:	20000756 	.word	0x20000756

08003cbc <__malloc_unlock>:
 8003cbc:	4801      	ldr	r0, [pc, #4]	; (8003cc4 <__malloc_unlock+0x8>)
 8003cbe:	f7ff be3e 	b.w	800393e <__retarget_lock_release_recursive>
 8003cc2:	bf00      	nop
 8003cc4:	20000756 	.word	0x20000756

08003cc8 <_read_r>:
 8003cc8:	b538      	push	{r3, r4, r5, lr}
 8003cca:	4d07      	ldr	r5, [pc, #28]	; (8003ce8 <_read_r+0x20>)
 8003ccc:	4604      	mov	r4, r0
 8003cce:	4608      	mov	r0, r1
 8003cd0:	4611      	mov	r1, r2
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	602a      	str	r2, [r5, #0]
 8003cd6:	461a      	mov	r2, r3
 8003cd8:	f7fc fcd0 	bl	800067c <_read>
 8003cdc:	1c43      	adds	r3, r0, #1
 8003cde:	d102      	bne.n	8003ce6 <_read_r+0x1e>
 8003ce0:	682b      	ldr	r3, [r5, #0]
 8003ce2:	b103      	cbz	r3, 8003ce6 <_read_r+0x1e>
 8003ce4:	6023      	str	r3, [r4, #0]
 8003ce6:	bd38      	pop	{r3, r4, r5, pc}
 8003ce8:	2000075c 	.word	0x2000075c

08003cec <_init>:
 8003cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cee:	bf00      	nop
 8003cf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cf2:	bc08      	pop	{r3}
 8003cf4:	469e      	mov	lr, r3
 8003cf6:	4770      	bx	lr

08003cf8 <_fini>:
 8003cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cfa:	bf00      	nop
 8003cfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cfe:	bc08      	pop	{r3}
 8003d00:	469e      	mov	lr, r3
 8003d02:	4770      	bx	lr
