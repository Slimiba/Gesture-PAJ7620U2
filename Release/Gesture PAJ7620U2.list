
Gesture PAJ7620U2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004574  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002ec  08004714  08004714  00014714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a00  08004a00  00020228  2**0
                  CONTENTS
  4 .ARM          00000000  08004a00  08004a00  00020228  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004a00  08004a00  00020228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a00  08004a00  00014a00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a04  08004a04  00014a04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000228  20000000  08004a08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000498  20000228  08004c30  00020228  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006c0  08004c30  000206c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017289  00000000  00000000  00020258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032ad  00000000  00000000  000374e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b48  00000000  00000000  0003a78e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014e0  00000000  00000000  0003b2d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00010c99  00000000  00000000  0003c7b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000044f6  00000000  00000000  0004d44f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  00051945  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00002adc  00000000  00000000  00051998  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loc    0000b849  00000000  00000000  00054474  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000228 	.word	0x20000228
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080046fc 	.word	0x080046fc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000022c 	.word	0x2000022c
 80001dc:	080046fc 	.word	0x080046fc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000290:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000292:	2400      	movs	r4, #0
{
 8000294:	b0a7      	sub	sp, #156	; 0x9c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000296:	2214      	movs	r2, #20
 8000298:	4621      	mov	r1, r4
 800029a:	a801      	add	r0, sp, #4
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800029c:	9408      	str	r4, [sp, #32]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800029e:	f003 f87f 	bl	80033a0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002a2:	2258      	movs	r2, #88	; 0x58
 80002a4:	4621      	mov	r1, r4
 80002a6:	a810      	add	r0, sp, #64	; 0x40
 80002a8:	f003 f87a 	bl	80033a0 <memset>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80002ac:	220b      	movs	r2, #11
 80002ae:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80002b2:	e9cd 2306 	strd	r2, r3, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002b6:	2301      	movs	r3, #1
 80002b8:	2210      	movs	r2, #16
 80002ba:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80002be:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002c0:	2502      	movs	r5, #2
 80002c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002c6:	e9cd 530c 	strd	r5, r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ca:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002cc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80002d0:	e9cd 340e 	strd	r3, r4, [sp, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002d4:	f001 fb4c 	bl	8001970 <HAL_RCC_OscConfig>
 80002d8:	b108      	cbz	r0, 80002de <SystemClock_Config+0x4e>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002da:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80002dc:	e7fe      	b.n	80002dc <SystemClock_Config+0x4c>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002de:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002e0:	e9cd 3501 	strd	r3, r5, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002e8:	e9cd 3004 	strd	r3, r0, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ec:	9003      	str	r0, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002ee:	4629      	mov	r1, r5
 80002f0:	a801      	add	r0, sp, #4
 80002f2:	f001 fe01 	bl	8001ef8 <HAL_RCC_ClockConfig>
 80002f6:	b108      	cbz	r0, 80002fc <SystemClock_Config+0x6c>
 80002f8:	b672      	cpsid	i
  while (1)
 80002fa:	e7fe      	b.n	80002fa <SystemClock_Config+0x6a>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART3
 80002fc:	4b07      	ldr	r3, [pc, #28]	; (800031c <SystemClock_Config+0x8c>)
 80002fe:	9310      	str	r3, [sp, #64]	; 0x40
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000300:	9014      	str	r0, [sp, #80]	; 0x50
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000302:	9017      	str	r0, [sp, #92]	; 0x5c
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000304:	f44f 7300 	mov.w	r3, #512	; 0x200
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000308:	9025      	str	r0, [sp, #148]	; 0x94
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800030a:	a810      	add	r0, sp, #64	; 0x40
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800030c:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800030e:	f001 fecf 	bl	80020b0 <HAL_RCCEx_PeriphCLKConfig>
 8000312:	b108      	cbz	r0, 8000318 <SystemClock_Config+0x88>
 8000314:	b672      	cpsid	i
  while (1)
 8000316:	e7fe      	b.n	8000316 <SystemClock_Config+0x86>
}
 8000318:	b027      	add	sp, #156	; 0x9c
 800031a:	bd30      	pop	{r4, r5, pc}
 800031c:	00030024 	.word	0x00030024

08000320 <main>:
{
 8000320:	b500      	push	{lr}
 8000322:	b08d      	sub	sp, #52	; 0x34
  HAL_Init();
 8000324:	f000 fa50 	bl	80007c8 <HAL_Init>
  SystemClock_Config();
 8000328:	f7ff ffb2 	bl	8000290 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800032c:	2214      	movs	r2, #20
 800032e:	2100      	movs	r1, #0
 8000330:	a807      	add	r0, sp, #28
 8000332:	f003 f835 	bl	80033a0 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000336:	4b63      	ldr	r3, [pc, #396]	; (80004c4 <main+0x1a4>)
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000338:	4863      	ldr	r0, [pc, #396]	; (80004c8 <main+0x1a8>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800033a:	695a      	ldr	r2, [r3, #20]
 800033c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000340:	615a      	str	r2, [r3, #20]
 8000342:	695a      	ldr	r2, [r3, #20]
 8000344:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8000348:	9201      	str	r2, [sp, #4]
 800034a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800034c:	695a      	ldr	r2, [r3, #20]
 800034e:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8000352:	615a      	str	r2, [r3, #20]
 8000354:	695a      	ldr	r2, [r3, #20]
 8000356:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 800035a:	9202      	str	r2, [sp, #8]
 800035c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800035e:	695a      	ldr	r2, [r3, #20]
 8000360:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000364:	615a      	str	r2, [r3, #20]
 8000366:	695a      	ldr	r2, [r3, #20]
 8000368:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 800036c:	9203      	str	r2, [sp, #12]
 800036e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000370:	695a      	ldr	r2, [r3, #20]
 8000372:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000376:	615a      	str	r2, [r3, #20]
 8000378:	695a      	ldr	r2, [r3, #20]
 800037a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800037e:	9204      	str	r2, [sp, #16]
 8000380:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000382:	695a      	ldr	r2, [r3, #20]
 8000384:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000388:	615a      	str	r2, [r3, #20]
 800038a:	695a      	ldr	r2, [r3, #20]
 800038c:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 8000390:	9205      	str	r2, [sp, #20]
 8000392:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000394:	695a      	ldr	r2, [r3, #20]
 8000396:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800039a:	615a      	str	r2, [r3, #20]
 800039c:	695b      	ldr	r3, [r3, #20]
 800039e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003a2:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80003a4:	2200      	movs	r2, #0
 80003a6:	f244 0181 	movw	r1, #16513	; 0x4081
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003aa:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80003ac:	f000 fb80 	bl	8000ab0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80003b0:	4846      	ldr	r0, [pc, #280]	; (80004cc <main+0x1ac>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	2140      	movs	r1, #64	; 0x40
 80003b6:	f000 fb7b 	bl	8000ab0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80003ba:	4b45      	ldr	r3, [pc, #276]	; (80004d0 <main+0x1b0>)
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80003bc:	4845      	ldr	r0, [pc, #276]	; (80004d4 <main+0x1b4>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003be:	2400      	movs	r4, #0
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80003c0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80003c4:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80003c6:	e9cd 2307 	strd	r2, r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003ca:	2501      	movs	r5, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003cc:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80003ce:	f000 fa9b 	bl	8000908 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003d2:	f244 0381 	movw	r3, #16513	; 0x4081
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003d6:	483c      	ldr	r0, [pc, #240]	; (80004c8 <main+0x1a8>)
 80003d8:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003da:	e9cd 3507 	strd	r3, r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003de:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003e2:	f000 fa91 	bl	8000908 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80003e6:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80003e8:	4838      	ldr	r0, [pc, #224]	; (80004cc <main+0x1ac>)
 80003ea:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003ec:	e9cd 3507 	strd	r3, r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003f0:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80003f4:	f000 fa88 	bl	8000908 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80003f8:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80003fa:	4834      	ldr	r0, [pc, #208]	; (80004cc <main+0x1ac>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003fc:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80003fe:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000400:	e9cd 3407 	strd	r3, r4, [sp, #28]
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000404:	f000 fa80 	bl	8000908 <HAL_GPIO_Init>
  hrtc.Instance = RTC;
 8000408:	4833      	ldr	r0, [pc, #204]	; (80004d8 <main+0x1b8>)
 800040a:	4b34      	ldr	r3, [pc, #208]	; (80004dc <main+0x1bc>)
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800040c:	6184      	str	r4, [r0, #24]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800040e:	e9c0 3400 	strd	r3, r4, [r0]
  hrtc.Init.SynchPrediv = 255;
 8000412:	217f      	movs	r1, #127	; 0x7f
 8000414:	23ff      	movs	r3, #255	; 0xff
 8000416:	e9c0 1302 	strd	r1, r3, [r0, #8]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800041a:	e9c0 4404 	strd	r4, r4, [r0, #16]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800041e:	f001 ffbf 	bl	80023a0 <HAL_RTC_Init>
 8000422:	4603      	mov	r3, r0
 8000424:	b108      	cbz	r0, 800042a <main+0x10a>
 8000426:	b672      	cpsid	i
  while (1)
 8000428:	e7fe      	b.n	8000428 <main+0x108>
  hpcd_USB_FS.Instance = USB;
 800042a:	482d      	ldr	r0, [pc, #180]	; (80004e0 <main+0x1c0>)
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800042c:	f8df e0c4 	ldr.w	lr, [pc, #196]	; 80004f4 <main+0x1d4>
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000430:	6203      	str	r3, [r0, #32]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000432:	2208      	movs	r2, #8
 8000434:	e9c0 e200 	strd	lr, r2, [r0]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000438:	2202      	movs	r2, #2
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800043a:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800043e:	6082      	str	r2, [r0, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000440:	6102      	str	r2, [r0, #16]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000442:	f000 fe1a 	bl	800107a <HAL_PCD_Init>
 8000446:	b108      	cbz	r0, 800044c <main+0x12c>
 8000448:	b672      	cpsid	i
  while (1)
 800044a:	e7fe      	b.n	800044a <main+0x12a>
  hi2c1.Instance = I2C1;
 800044c:	4c25      	ldr	r4, [pc, #148]	; (80004e4 <main+0x1c4>)
  hi2c1.Init.Timing = 0x2000090E;
 800044e:	f8df c0a8 	ldr.w	ip, [pc, #168]	; 80004f8 <main+0x1d8>
 8000452:	4b25      	ldr	r3, [pc, #148]	; (80004e8 <main+0x1c8>)
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000454:	6220      	str	r0, [r4, #32]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000456:	e9c4 0502 	strd	r0, r5, [r4, #8]
  hi2c1.Init.OwnAddress2 = 0;
 800045a:	e9c4 0004 	strd	r0, r0, [r4, #16]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800045e:	e9c4 0006 	strd	r0, r0, [r4, #24]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000462:	4620      	mov	r0, r4
  hi2c1.Init.Timing = 0x2000090E;
 8000464:	e9c4 c300 	strd	ip, r3, [r4]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000468:	f000 fc3c 	bl	8000ce4 <HAL_I2C_Init>
 800046c:	4601      	mov	r1, r0
 800046e:	b108      	cbz	r0, 8000474 <main+0x154>
 8000470:	b672      	cpsid	i
  while (1)
 8000472:	e7fe      	b.n	8000472 <main+0x152>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000474:	4620      	mov	r0, r4
 8000476:	f000 fdb5 	bl	8000fe4 <HAL_I2CEx_ConfigAnalogFilter>
 800047a:	4601      	mov	r1, r0
 800047c:	b108      	cbz	r0, 8000482 <main+0x162>
 800047e:	b672      	cpsid	i
  while (1)
 8000480:	e7fe      	b.n	8000480 <main+0x160>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000482:	4620      	mov	r0, r4
 8000484:	f000 fdd4 	bl	8001030 <HAL_I2CEx_ConfigDigitalFilter>
 8000488:	4603      	mov	r3, r0
 800048a:	b108      	cbz	r0, 8000490 <main+0x170>
 800048c:	b672      	cpsid	i
  while (1)
 800048e:	e7fe      	b.n	800048e <main+0x16e>
  huart3.Instance = USART3;
 8000490:	4816      	ldr	r0, [pc, #88]	; (80004ec <main+0x1cc>)
  huart3.Init.BaudRate = 115200;
 8000492:	4917      	ldr	r1, [pc, #92]	; (80004f0 <main+0x1d0>)
  huart3.Init.Parity = UART_PARITY_NONE;
 8000494:	6103      	str	r3, [r0, #16]
  huart3.Init.BaudRate = 115200;
 8000496:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800049a:	e9c0 1200 	strd	r1, r2, [r0]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800049e:	220c      	movs	r2, #12
  huart3.Init.StopBits = UART_STOPBITS_1;
 80004a0:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004a4:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004a8:	e9c0 3307 	strd	r3, r3, [r0, #28]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004ac:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80004ae:	f002 f9f2 	bl	8002896 <HAL_UART_Init>
 80004b2:	b108      	cbz	r0, 80004b8 <main+0x198>
 80004b4:	b672      	cpsid	i
  while (1)
 80004b6:	e7fe      	b.n	80004b6 <main+0x196>
	  initializeRegisters();
 80004b8:	f002 ff18 	bl	80032ec <initializeRegisters>
	  GESTURE_Actions();
 80004bc:	f002 fde6 	bl	800308c <GESTURE_Actions>
  while (1)
 80004c0:	e7fa      	b.n	80004b8 <main+0x198>
 80004c2:	bf00      	nop
 80004c4:	40021000 	.word	0x40021000
 80004c8:	48000400 	.word	0x48000400
 80004cc:	48001800 	.word	0x48001800
 80004d0:	10110000 	.word	0x10110000
 80004d4:	48000800 	.word	0x48000800
 80004d8:	20000324 	.word	0x20000324
 80004dc:	40002800 	.word	0x40002800
 80004e0:	20000390 	.word	0x20000390
 80004e4:	200002d8 	.word	0x200002d8
 80004e8:	2000090e 	.word	0x2000090e
 80004ec:	20000250 	.word	0x20000250
 80004f0:	40004800 	.word	0x40004800
 80004f4:	40005c00 	.word	0x40005c00
 80004f8:	40005400 	.word	0x40005400

080004fc <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004fc:	4b0a      	ldr	r3, [pc, #40]	; (8000528 <HAL_MspInit+0x2c>)
 80004fe:	699a      	ldr	r2, [r3, #24]
 8000500:	f042 0201 	orr.w	r2, r2, #1
 8000504:	619a      	str	r2, [r3, #24]
 8000506:	699a      	ldr	r2, [r3, #24]
{
 8000508:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800050a:	f002 0201 	and.w	r2, r2, #1
 800050e:	9200      	str	r2, [sp, #0]
 8000510:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000512:	69da      	ldr	r2, [r3, #28]
 8000514:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000518:	61da      	str	r2, [r3, #28]
 800051a:	69db      	ldr	r3, [r3, #28]
 800051c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000520:	9301      	str	r3, [sp, #4]
 8000522:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000524:	b002      	add	sp, #8
 8000526:	4770      	bx	lr
 8000528:	40021000 	.word	0x40021000

0800052c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800052c:	b510      	push	{r4, lr}
 800052e:	4604      	mov	r4, r0
 8000530:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000532:	2214      	movs	r2, #20
 8000534:	2100      	movs	r1, #0
 8000536:	a803      	add	r0, sp, #12
 8000538:	f002 ff32 	bl	80033a0 <memset>
  if(hi2c->Instance==I2C1)
 800053c:	6822      	ldr	r2, [r4, #0]
 800053e:	4b13      	ldr	r3, [pc, #76]	; (800058c <HAL_I2C_MspInit+0x60>)
 8000540:	429a      	cmp	r2, r3
 8000542:	d121      	bne.n	8000588 <HAL_I2C_MspInit+0x5c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000544:	4c12      	ldr	r4, [pc, #72]	; (8000590 <HAL_I2C_MspInit+0x64>)
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000546:	4813      	ldr	r0, [pc, #76]	; (8000594 <HAL_I2C_MspInit+0x68>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000548:	6963      	ldr	r3, [r4, #20]
 800054a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800054e:	6163      	str	r3, [r4, #20]
 8000550:	6963      	ldr	r3, [r4, #20]
 8000552:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000556:	9301      	str	r3, [sp, #4]
 8000558:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800055a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800055e:	2312      	movs	r3, #18
 8000560:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000564:	2101      	movs	r1, #1
 8000566:	2303      	movs	r3, #3
 8000568:	e9cd 1305 	strd	r1, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800056c:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800056e:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000570:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000572:	f000 f9c9 	bl	8000908 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000576:	69e3      	ldr	r3, [r4, #28]
 8000578:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800057c:	61e3      	str	r3, [r4, #28]
 800057e:	69e3      	ldr	r3, [r4, #28]
 8000580:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000584:	9302      	str	r3, [sp, #8]
 8000586:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000588:	b008      	add	sp, #32
 800058a:	bd10      	pop	{r4, pc}
 800058c:	40005400 	.word	0x40005400
 8000590:	40021000 	.word	0x40021000
 8000594:	48000400 	.word	0x48000400

08000598 <HAL_RTC_MspInit>:
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  if(hrtc->Instance==RTC)
 8000598:	6802      	ldr	r2, [r0, #0]
 800059a:	4b07      	ldr	r3, [pc, #28]	; (80005b8 <HAL_RTC_MspInit+0x20>)
 800059c:	429a      	cmp	r2, r3
 800059e:	d10a      	bne.n	80005b6 <HAL_RTC_MspInit+0x1e>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80005a0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80005a4:	fa92 f2a2 	rbit	r2, r2
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80005a8:	4b04      	ldr	r3, [pc, #16]	; (80005bc <HAL_RTC_MspInit+0x24>)
 80005aa:	fab2 f282 	clz	r2, r2
 80005ae:	4413      	add	r3, r2
 80005b0:	009b      	lsls	r3, r3, #2
 80005b2:	2201      	movs	r2, #1
 80005b4:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80005b6:	4770      	bx	lr
 80005b8:	40002800 	.word	0x40002800
 80005bc:	10908100 	.word	0x10908100

080005c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005c0:	b510      	push	{r4, lr}
 80005c2:	4604      	mov	r4, r0
 80005c4:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c6:	2214      	movs	r2, #20
 80005c8:	2100      	movs	r1, #0
 80005ca:	a803      	add	r0, sp, #12
 80005cc:	f002 fee8 	bl	80033a0 <memset>
  if(huart->Instance==USART3)
 80005d0:	6822      	ldr	r2, [r4, #0]
 80005d2:	4b14      	ldr	r3, [pc, #80]	; (8000624 <HAL_UART_MspInit+0x64>)
 80005d4:	429a      	cmp	r2, r3
 80005d6:	d122      	bne.n	800061e <HAL_UART_MspInit+0x5e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80005d8:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005dc:	2100      	movs	r1, #0
    __HAL_RCC_USART3_CLK_ENABLE();
 80005de:	69da      	ldr	r2, [r3, #28]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80005e0:	4811      	ldr	r0, [pc, #68]	; (8000628 <HAL_UART_MspInit+0x68>)
    __HAL_RCC_USART3_CLK_ENABLE();
 80005e2:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80005e6:	61da      	str	r2, [r3, #28]
 80005e8:	69da      	ldr	r2, [r3, #28]
 80005ea:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 80005ee:	9201      	str	r2, [sp, #4]
 80005f0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80005f2:	695a      	ldr	r2, [r3, #20]
 80005f4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80005f8:	615a      	str	r2, [r3, #20]
 80005fa:	695b      	ldr	r3, [r3, #20]
 80005fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000600:	9302      	str	r3, [sp, #8]
 8000602:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000604:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000608:	2302      	movs	r3, #2
 800060a:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800060e:	2303      	movs	r3, #3
 8000610:	e9cd 1305 	strd	r1, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000614:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000616:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000618:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800061a:	f000 f975 	bl	8000908 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800061e:	b008      	add	sp, #32
 8000620:	bd10      	pop	{r4, pc}
 8000622:	bf00      	nop
 8000624:	40004800 	.word	0x40004800
 8000628:	48000c00 	.word	0x48000c00

0800062c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800062c:	b507      	push	{r0, r1, r2, lr}
  if(hpcd->Instance==USB)
 800062e:	4b0e      	ldr	r3, [pc, #56]	; (8000668 <HAL_PCD_MspInit+0x3c>)
 8000630:	6802      	ldr	r2, [r0, #0]
 8000632:	429a      	cmp	r2, r3
 8000634:	d115      	bne.n	8000662 <HAL_PCD_MspInit+0x36>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000636:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
    /* USB interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 800063a:	2014      	movs	r0, #20
    __HAL_RCC_USB_CLK_ENABLE();
 800063c:	69da      	ldr	r2, [r3, #28]
 800063e:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000642:	61da      	str	r2, [r3, #28]
 8000644:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 8000646:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 8000648:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800064c:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 800064e:	4611      	mov	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 8000650:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 8000652:	f000 f903 	bl	800085c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 8000656:	2014      	movs	r0, #20
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000658:	b003      	add	sp, #12
 800065a:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 800065e:	f000 b92f 	b.w	80008c0 <HAL_NVIC_EnableIRQ>
}
 8000662:	b003      	add	sp, #12
 8000664:	f85d fb04 	ldr.w	pc, [sp], #4
 8000668:	40005c00 	.word	0x40005c00

0800066c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800066c:	e7fe      	b.n	800066c <NMI_Handler>

0800066e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800066e:	e7fe      	b.n	800066e <HardFault_Handler>

08000670 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000670:	e7fe      	b.n	8000670 <MemManage_Handler>

08000672 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000672:	e7fe      	b.n	8000672 <BusFault_Handler>

08000674 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000674:	e7fe      	b.n	8000674 <UsageFault_Handler>

08000676 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000676:	4770      	bx	lr

08000678 <DebugMon_Handler>:
 8000678:	4770      	bx	lr

0800067a <PendSV_Handler>:
 800067a:	4770      	bx	lr

0800067c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800067c:	f000 b8b6 	b.w	80007ec <HAL_IncTick>

08000680 <USB_LP_CAN_RX0_IRQHandler>:
void USB_LP_CAN_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000680:	4801      	ldr	r0, [pc, #4]	; (8000688 <USB_LP_CAN_RX0_IRQHandler+0x8>)
 8000682:	f000 bd6d 	b.w	8001160 <HAL_PCD_IRQHandler>
 8000686:	bf00      	nop
 8000688:	20000390 	.word	0x20000390

0800068c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800068c:	b570      	push	{r4, r5, r6, lr}
 800068e:	460e      	mov	r6, r1
 8000690:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000692:	2500      	movs	r5, #0
 8000694:	42a5      	cmp	r5, r4
 8000696:	db01      	blt.n	800069c <_read+0x10>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8000698:	4620      	mov	r0, r4
 800069a:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 800069c:	f3af 8000 	nop.w
 80006a0:	5570      	strb	r0, [r6, r5]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006a2:	3501      	adds	r5, #1
 80006a4:	e7f6      	b.n	8000694 <_read+0x8>

080006a6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80006a6:	b570      	push	{r4, r5, r6, lr}
 80006a8:	460e      	mov	r6, r1
 80006aa:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006ac:	2500      	movs	r5, #0
 80006ae:	42a5      	cmp	r5, r4
 80006b0:	db01      	blt.n	80006b6 <_write+0x10>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 80006b2:	4620      	mov	r0, r4
 80006b4:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 80006b6:	5d70      	ldrb	r0, [r6, r5]
 80006b8:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006bc:	3501      	adds	r5, #1
 80006be:	e7f6      	b.n	80006ae <_write+0x8>

080006c0 <_close>:

int _close(int file)
{
	return -1;
}
 80006c0:	f04f 30ff 	mov.w	r0, #4294967295
 80006c4:	4770      	bx	lr

080006c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80006c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006ca:	604b      	str	r3, [r1, #4]
	return 0;
}
 80006cc:	2000      	movs	r0, #0
 80006ce:	4770      	bx	lr

080006d0 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80006d0:	2001      	movs	r0, #1
 80006d2:	4770      	bx	lr

080006d4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80006d4:	2000      	movs	r0, #0
 80006d6:	4770      	bx	lr

080006d8 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006d8:	4b0b      	ldr	r3, [pc, #44]	; (8000708 <_sbrk+0x30>)
 80006da:	6819      	ldr	r1, [r3, #0]
{
 80006dc:	b510      	push	{r4, lr}
 80006de:	4602      	mov	r2, r0
  if (NULL == __sbrk_heap_end)
 80006e0:	b909      	cbnz	r1, 80006e6 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 80006e2:	490a      	ldr	r1, [pc, #40]	; (800070c <_sbrk+0x34>)
 80006e4:	6019      	str	r1, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006e6:	6818      	ldr	r0, [r3, #0]
 80006e8:	4909      	ldr	r1, [pc, #36]	; (8000710 <_sbrk+0x38>)
 80006ea:	4c0a      	ldr	r4, [pc, #40]	; (8000714 <_sbrk+0x3c>)
 80006ec:	4402      	add	r2, r0
 80006ee:	1b09      	subs	r1, r1, r4
 80006f0:	428a      	cmp	r2, r1
 80006f2:	d906      	bls.n	8000702 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 80006f4:	f002 fe2a 	bl	800334c <__errno>
 80006f8:	230c      	movs	r3, #12
 80006fa:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80006fc:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8000700:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8000702:	601a      	str	r2, [r3, #0]
  return (void *)prev_heap_end;
 8000704:	e7fc      	b.n	8000700 <_sbrk+0x28>
 8000706:	bf00      	nop
 8000708:	20000244 	.word	0x20000244
 800070c:	200006c0 	.word	0x200006c0
 8000710:	20010000 	.word	0x20010000
 8000714:	00000400 	.word	0x00000400

08000718 <SystemInit>:
  */
void SystemInit(void)
{
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000718:	4a03      	ldr	r2, [pc, #12]	; (8000728 <SystemInit+0x10>)
 800071a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800071e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000722:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000726:	4770      	bx	lr
 8000728:	e000ed00 	.word	0xe000ed00

0800072c <Reset_Handler>:
 800072c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000764 <LoopForever+0x2>
 8000730:	480d      	ldr	r0, [pc, #52]	; (8000768 <LoopForever+0x6>)
 8000732:	490e      	ldr	r1, [pc, #56]	; (800076c <LoopForever+0xa>)
 8000734:	4a0e      	ldr	r2, [pc, #56]	; (8000770 <LoopForever+0xe>)
 8000736:	2300      	movs	r3, #0
 8000738:	e002      	b.n	8000740 <LoopCopyDataInit>

0800073a <CopyDataInit>:
 800073a:	58d4      	ldr	r4, [r2, r3]
 800073c:	50c4      	str	r4, [r0, r3]
 800073e:	3304      	adds	r3, #4

08000740 <LoopCopyDataInit>:
 8000740:	18c4      	adds	r4, r0, r3
 8000742:	428c      	cmp	r4, r1
 8000744:	d3f9      	bcc.n	800073a <CopyDataInit>
 8000746:	4a0b      	ldr	r2, [pc, #44]	; (8000774 <LoopForever+0x12>)
 8000748:	4c0b      	ldr	r4, [pc, #44]	; (8000778 <LoopForever+0x16>)
 800074a:	2300      	movs	r3, #0
 800074c:	e001      	b.n	8000752 <LoopFillZerobss>

0800074e <FillZerobss>:
 800074e:	6013      	str	r3, [r2, #0]
 8000750:	3204      	adds	r2, #4

08000752 <LoopFillZerobss>:
 8000752:	42a2      	cmp	r2, r4
 8000754:	d3fb      	bcc.n	800074e <FillZerobss>
 8000756:	f7ff ffdf 	bl	8000718 <SystemInit>
 800075a:	f002 fdfd 	bl	8003358 <__libc_init_array>
 800075e:	f7ff fddf 	bl	8000320 <main>

08000762 <LoopForever>:
 8000762:	e7fe      	b.n	8000762 <LoopForever>
 8000764:	20010000 	.word	0x20010000
 8000768:	20000000 	.word	0x20000000
 800076c:	20000228 	.word	0x20000228
 8000770:	08004a08 	.word	0x08004a08
 8000774:	20000228 	.word	0x20000228
 8000778:	200006c0 	.word	0x200006c0

0800077c <ADC1_2_IRQHandler>:
 800077c:	e7fe      	b.n	800077c <ADC1_2_IRQHandler>
	...

08000780 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000780:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000782:	4a0e      	ldr	r2, [pc, #56]	; (80007bc <HAL_InitTick+0x3c>)
 8000784:	4b0e      	ldr	r3, [pc, #56]	; (80007c0 <HAL_InitTick+0x40>)
{
 8000786:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000788:	7818      	ldrb	r0, [r3, #0]
 800078a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800078e:	fbb3 f3f0 	udiv	r3, r3, r0
 8000792:	6810      	ldr	r0, [r2, #0]
 8000794:	fbb0 f0f3 	udiv	r0, r0, r3
 8000798:	f000 f8a0 	bl	80008dc <HAL_SYSTICK_Config>
 800079c:	4604      	mov	r4, r0
 800079e:	b958      	cbnz	r0, 80007b8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007a0:	2d0f      	cmp	r5, #15
 80007a2:	d809      	bhi.n	80007b8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007a4:	4602      	mov	r2, r0
 80007a6:	4629      	mov	r1, r5
 80007a8:	f04f 30ff 	mov.w	r0, #4294967295
 80007ac:	f000 f856 	bl	800085c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007b0:	4b04      	ldr	r3, [pc, #16]	; (80007c4 <HAL_InitTick+0x44>)
 80007b2:	4620      	mov	r0, r4
 80007b4:	601d      	str	r5, [r3, #0]
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
}
 80007b6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80007b8:	2001      	movs	r0, #1
 80007ba:	e7fc      	b.n	80007b6 <HAL_InitTick+0x36>
 80007bc:	20000000 	.word	0x20000000
 80007c0:	20000004 	.word	0x20000004
 80007c4:	20000008 	.word	0x20000008

080007c8 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007c8:	4a07      	ldr	r2, [pc, #28]	; (80007e8 <HAL_Init+0x20>)
{
 80007ca:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007cc:	6813      	ldr	r3, [r2, #0]
 80007ce:	f043 0310 	orr.w	r3, r3, #16
 80007d2:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007d4:	2003      	movs	r0, #3
 80007d6:	f000 f82f 	bl	8000838 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80007da:	2000      	movs	r0, #0
 80007dc:	f7ff ffd0 	bl	8000780 <HAL_InitTick>
  HAL_MspInit();
 80007e0:	f7ff fe8c 	bl	80004fc <HAL_MspInit>
}
 80007e4:	2000      	movs	r0, #0
 80007e6:	bd08      	pop	{r3, pc}
 80007e8:	40022000 	.word	0x40022000

080007ec <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80007ec:	4a03      	ldr	r2, [pc, #12]	; (80007fc <HAL_IncTick+0x10>)
 80007ee:	4b04      	ldr	r3, [pc, #16]	; (8000800 <HAL_IncTick+0x14>)
 80007f0:	6811      	ldr	r1, [r2, #0]
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	440b      	add	r3, r1
 80007f6:	6013      	str	r3, [r2, #0]
}
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	2000067c 	.word	0x2000067c
 8000800:	20000004 	.word	0x20000004

08000804 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8000804:	4b01      	ldr	r3, [pc, #4]	; (800080c <HAL_GetTick+0x8>)
 8000806:	6818      	ldr	r0, [r3, #0]
}
 8000808:	4770      	bx	lr
 800080a:	bf00      	nop
 800080c:	2000067c 	.word	0x2000067c

08000810 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000810:	b538      	push	{r3, r4, r5, lr}
 8000812:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000814:	f7ff fff6 	bl	8000804 <HAL_GetTick>
  uint32_t wait = Delay;
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000818:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800081a:	bf1c      	itt	ne
 800081c:	4b05      	ldrne	r3, [pc, #20]	; (8000834 <HAL_Delay+0x24>)
 800081e:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000820:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000822:	bf18      	it	ne
 8000824:	18e4      	addne	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000826:	f7ff ffed 	bl	8000804 <HAL_GetTick>
 800082a:	1b43      	subs	r3, r0, r5
 800082c:	42a3      	cmp	r3, r4
 800082e:	d3fa      	bcc.n	8000826 <HAL_Delay+0x16>
  {
  }
}
 8000830:	bd38      	pop	{r3, r4, r5, pc}
 8000832:	bf00      	nop
 8000834:	20000004 	.word	0x20000004

08000838 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000838:	4907      	ldr	r1, [pc, #28]	; (8000858 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800083a:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800083c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000840:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000842:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000844:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000848:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800084a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800084c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000850:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000854:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000856:	4770      	bx	lr
 8000858:	e000ed00 	.word	0xe000ed00

0800085c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800085c:	4b16      	ldr	r3, [pc, #88]	; (80008b8 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800085e:	b530      	push	{r4, r5, lr}
 8000860:	68dc      	ldr	r4, [r3, #12]
 8000862:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000866:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800086a:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800086c:	2d04      	cmp	r5, #4
 800086e:	bf28      	it	cs
 8000870:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000872:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000874:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000878:	bf8c      	ite	hi
 800087a:	3c03      	subhi	r4, #3
 800087c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800087e:	fa03 f505 	lsl.w	r5, r3, r5
 8000882:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000886:	40a3      	lsls	r3, r4
 8000888:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800088c:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 800088e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000890:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000894:	bfac      	ite	ge
 8000896:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800089a:	4a08      	ldrlt	r2, [pc, #32]	; (80008bc <HAL_NVIC_SetPriority+0x60>)
 800089c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80008a0:	bfb8      	it	lt
 80008a2:	f000 000f 	andlt.w	r0, r0, #15
 80008a6:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008a8:	bfaa      	itet	ge
 80008aa:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008ae:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008b0:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80008b4:	bd30      	pop	{r4, r5, pc}
 80008b6:	bf00      	nop
 80008b8:	e000ed00 	.word	0xe000ed00
 80008bc:	e000ed14 	.word	0xe000ed14

080008c0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80008c0:	2800      	cmp	r0, #0
 80008c2:	db08      	blt.n	80008d6 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008c4:	0942      	lsrs	r2, r0, #5
 80008c6:	2301      	movs	r3, #1
 80008c8:	f000 001f 	and.w	r0, r0, #31
 80008cc:	fa03 f000 	lsl.w	r0, r3, r0
 80008d0:	4b01      	ldr	r3, [pc, #4]	; (80008d8 <HAL_NVIC_EnableIRQ+0x18>)
 80008d2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80008d6:	4770      	bx	lr
 80008d8:	e000e100 	.word	0xe000e100

080008dc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008dc:	3801      	subs	r0, #1
 80008de:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80008e2:	d20a      	bcs.n	80008fa <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008e4:	4b06      	ldr	r3, [pc, #24]	; (8000900 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008e6:	4a07      	ldr	r2, [pc, #28]	; (8000904 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008e8:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008ea:	21f0      	movs	r1, #240	; 0xf0
 80008ec:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008f0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008f2:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008f4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008f8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80008fa:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop
 8000900:	e000e010 	.word	0xe000e010
 8000904:	e000ed00 	.word	0xe000ed00

08000908 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000908:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800090c:	f8df 8198 	ldr.w	r8, [pc, #408]	; 8000aa8 <HAL_GPIO_Init+0x1a0>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000910:	4c63      	ldr	r4, [pc, #396]	; (8000aa0 <HAL_GPIO_Init+0x198>)
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000912:	f8df 9198 	ldr.w	r9, [pc, #408]	; 8000aac <HAL_GPIO_Init+0x1a4>
  uint32_t position = 0x00u;
 8000916:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000918:	680a      	ldr	r2, [r1, #0]
 800091a:	fa32 f503 	lsrs.w	r5, r2, r3
 800091e:	d102      	bne.n	8000926 <HAL_GPIO_Init+0x1e>
      }
    }

    position++;
  }
}
 8000920:	b003      	add	sp, #12
 8000922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000926:	f04f 0c01 	mov.w	ip, #1
 800092a:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00u)
 800092e:	ea1c 0202 	ands.w	r2, ip, r2
 8000932:	f000 80a6 	beq.w	8000a82 <HAL_GPIO_Init+0x17a>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000936:	684d      	ldr	r5, [r1, #4]
 8000938:	f025 0a10 	bic.w	sl, r5, #16
 800093c:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000940:	2603      	movs	r6, #3
 8000942:	f10a 37ff 	add.w	r7, sl, #4294967295
 8000946:	fa06 f60e 	lsl.w	r6, r6, lr
 800094a:	2f01      	cmp	r7, #1
 800094c:	ea6f 0606 	mvn.w	r6, r6
 8000950:	d811      	bhi.n	8000976 <HAL_GPIO_Init+0x6e>
        temp = GPIOx->OSPEEDR;
 8000952:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000954:	ea07 0b06 	and.w	fp, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000958:	68cf      	ldr	r7, [r1, #12]
 800095a:	fa07 f70e 	lsl.w	r7, r7, lr
 800095e:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->OSPEEDR = temp;
 8000962:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000964:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000966:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800096a:	f3c5 1700 	ubfx	r7, r5, #4, #1
 800096e:	409f      	lsls	r7, r3
 8000970:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->OTYPER = temp;
 8000974:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000976:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000978:	ea07 0c06 	and.w	ip, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800097c:	688f      	ldr	r7, [r1, #8]
 800097e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000982:	ea47 070c 	orr.w	r7, r7, ip
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000986:	f1ba 0f02 	cmp.w	sl, #2
      GPIOx->PUPDR = temp;
 800098a:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800098c:	d116      	bne.n	80009bc <HAL_GPIO_Init+0xb4>
        temp = GPIOx->AFR[position >> 3u];
 800098e:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000992:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000996:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 800099a:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800099e:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80009a2:	f04f 0c0f 	mov.w	ip, #15
 80009a6:	fa0c fc0b 	lsl.w	ip, ip, fp
 80009aa:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80009ae:	690f      	ldr	r7, [r1, #16]
 80009b0:	fa07 f70b 	lsl.w	r7, r7, fp
 80009b4:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3u] = temp;
 80009b8:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 80009bc:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80009be:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80009c0:	f005 0703 	and.w	r7, r5, #3
 80009c4:	fa07 fe0e 	lsl.w	lr, r7, lr
 80009c8:	ea4e 0606 	orr.w	r6, lr, r6
      GPIOx->MODER = temp;
 80009cc:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009ce:	00ee      	lsls	r6, r5, #3
 80009d0:	d557      	bpl.n	8000a82 <HAL_GPIO_Init+0x17a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009d2:	f8d8 6018 	ldr.w	r6, [r8, #24]
 80009d6:	f046 0601 	orr.w	r6, r6, #1
 80009da:	f8c8 6018 	str.w	r6, [r8, #24]
 80009de:	f8d8 6018 	ldr.w	r6, [r8, #24]
 80009e2:	f023 0703 	bic.w	r7, r3, #3
 80009e6:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80009ea:	f006 0601 	and.w	r6, r6, #1
 80009ee:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 80009f2:	9601      	str	r6, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80009f4:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009f8:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 80009fa:	68be      	ldr	r6, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80009fc:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000a00:	f04f 0c0f 	mov.w	ip, #15
 8000a04:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a08:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a0c:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a10:	d039      	beq.n	8000a86 <HAL_GPIO_Init+0x17e>
 8000a12:	4e24      	ldr	r6, [pc, #144]	; (8000aa4 <HAL_GPIO_Init+0x19c>)
 8000a14:	42b0      	cmp	r0, r6
 8000a16:	d038      	beq.n	8000a8a <HAL_GPIO_Init+0x182>
 8000a18:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000a1c:	42b0      	cmp	r0, r6
 8000a1e:	d036      	beq.n	8000a8e <HAL_GPIO_Init+0x186>
 8000a20:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000a24:	42b0      	cmp	r0, r6
 8000a26:	d034      	beq.n	8000a92 <HAL_GPIO_Init+0x18a>
 8000a28:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000a2c:	42b0      	cmp	r0, r6
 8000a2e:	d032      	beq.n	8000a96 <HAL_GPIO_Init+0x18e>
 8000a30:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000a34:	42b0      	cmp	r0, r6
 8000a36:	d030      	beq.n	8000a9a <HAL_GPIO_Init+0x192>
 8000a38:	4548      	cmp	r0, r9
 8000a3a:	bf0c      	ite	eq
 8000a3c:	2606      	moveq	r6, #6
 8000a3e:	2607      	movne	r6, #7
 8000a40:	fa06 f60e 	lsl.w	r6, r6, lr
 8000a44:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000a48:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 8000a4a:	6826      	ldr	r6, [r4, #0]
        temp &= ~(iocurrent);
 8000a4c:	43d7      	mvns	r7, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a4e:	f415 3f80 	tst.w	r5, #65536	; 0x10000
        temp &= ~(iocurrent);
 8000a52:	bf0c      	ite	eq
 8000a54:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000a56:	4316      	orrne	r6, r2
        EXTI->IMR = temp;
 8000a58:	6026      	str	r6, [r4, #0]
        temp = EXTI->EMR;
 8000a5a:	6866      	ldr	r6, [r4, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a5c:	f415 3f00 	tst.w	r5, #131072	; 0x20000
        temp &= ~(iocurrent);
 8000a60:	bf0c      	ite	eq
 8000a62:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000a64:	4316      	orrne	r6, r2
        EXTI->EMR = temp;
 8000a66:	6066      	str	r6, [r4, #4]
        temp = EXTI->RTSR;
 8000a68:	68a6      	ldr	r6, [r4, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a6a:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
        temp &= ~(iocurrent);
 8000a6e:	bf0c      	ite	eq
 8000a70:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000a72:	4316      	orrne	r6, r2
        EXTI->RTSR = temp;
 8000a74:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR;
 8000a76:	68e6      	ldr	r6, [r4, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a78:	02ad      	lsls	r5, r5, #10
        temp &= ~(iocurrent);
 8000a7a:	bf54      	ite	pl
 8000a7c:	403e      	andpl	r6, r7
          temp |= iocurrent;
 8000a7e:	4316      	orrmi	r6, r2
        EXTI->FTSR = temp;
 8000a80:	60e6      	str	r6, [r4, #12]
    position++;
 8000a82:	3301      	adds	r3, #1
 8000a84:	e748      	b.n	8000918 <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a86:	2600      	movs	r6, #0
 8000a88:	e7da      	b.n	8000a40 <HAL_GPIO_Init+0x138>
 8000a8a:	2601      	movs	r6, #1
 8000a8c:	e7d8      	b.n	8000a40 <HAL_GPIO_Init+0x138>
 8000a8e:	2602      	movs	r6, #2
 8000a90:	e7d6      	b.n	8000a40 <HAL_GPIO_Init+0x138>
 8000a92:	2603      	movs	r6, #3
 8000a94:	e7d4      	b.n	8000a40 <HAL_GPIO_Init+0x138>
 8000a96:	2604      	movs	r6, #4
 8000a98:	e7d2      	b.n	8000a40 <HAL_GPIO_Init+0x138>
 8000a9a:	2605      	movs	r6, #5
 8000a9c:	e7d0      	b.n	8000a40 <HAL_GPIO_Init+0x138>
 8000a9e:	bf00      	nop
 8000aa0:	40010400 	.word	0x40010400
 8000aa4:	48000400 	.word	0x48000400
 8000aa8:	40021000 	.word	0x40021000
 8000aac:	48001800 	.word	0x48001800

08000ab0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ab0:	b10a      	cbz	r2, 8000ab6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ab2:	6181      	str	r1, [r0, #24]
 8000ab4:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000ab6:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8000ab8:	4770      	bx	lr

08000aba <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8000aba:	6803      	ldr	r3, [r0, #0]
 8000abc:	699a      	ldr	r2, [r3, #24]
 8000abe:	0791      	lsls	r1, r2, #30
  {
    hi2c->Instance->TXDR = 0x00U;
 8000ac0:	bf44      	itt	mi
 8000ac2:	2200      	movmi	r2, #0
 8000ac4:	629a      	strmi	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000ac6:	699a      	ldr	r2, [r3, #24]
 8000ac8:	07d2      	lsls	r2, r2, #31
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8000aca:	bf5e      	ittt	pl
 8000acc:	699a      	ldrpl	r2, [r3, #24]
 8000ace:	f042 0201 	orrpl.w	r2, r2, #1
 8000ad2:	619a      	strpl	r2, [r3, #24]
  }
}
 8000ad4:	4770      	bx	lr
	...

08000ad8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8000ad8:	b530      	push	{r4, r5, lr}
 8000ada:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8000adc:	6804      	ldr	r4, [r0, #0]
 8000ade:	ea45 4202 	orr.w	r2, r5, r2, lsl #16
 8000ae2:	431a      	orrs	r2, r3
 8000ae4:	4b05      	ldr	r3, [pc, #20]	; (8000afc <I2C_TransferConfig+0x24>)
 8000ae6:	6860      	ldr	r0, [r4, #4]
 8000ae8:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8000aec:	ea43 5355 	orr.w	r3, r3, r5, lsr #21
 8000af0:	430a      	orrs	r2, r1
 8000af2:	ea20 0003 	bic.w	r0, r0, r3
 8000af6:	4302      	orrs	r2, r0
 8000af8:	6062      	str	r2, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8000afa:	bd30      	pop	{r4, r5, pc}
 8000afc:	03ff63ff 	.word	0x03ff63ff

08000b00 <I2C_IsAcknowledgeFailed>:
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000b00:	6803      	ldr	r3, [r0, #0]
{
 8000b02:	b570      	push	{r4, r5, r6, lr}
 8000b04:	4604      	mov	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000b06:	6998      	ldr	r0, [r3, #24]
 8000b08:	f010 0010 	ands.w	r0, r0, #16
{
 8000b0c:	460d      	mov	r5, r1
 8000b0e:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000b10:	d116      	bne.n	8000b40 <I2C_IsAcknowledgeFailed+0x40>
}
 8000b12:	bd70      	pop	{r4, r5, r6, pc}
      if (Timeout != HAL_MAX_DELAY)
 8000b14:	1c69      	adds	r1, r5, #1
 8000b16:	d014      	beq.n	8000b42 <I2C_IsAcknowledgeFailed+0x42>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000b18:	f7ff fe74 	bl	8000804 <HAL_GetTick>
 8000b1c:	1b80      	subs	r0, r0, r6
 8000b1e:	42a8      	cmp	r0, r5
 8000b20:	d800      	bhi.n	8000b24 <I2C_IsAcknowledgeFailed+0x24>
 8000b22:	b96d      	cbnz	r5, 8000b40 <I2C_IsAcknowledgeFailed+0x40>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000b24:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000b26:	f043 0320 	orr.w	r3, r3, #32
 8000b2a:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8000b2c:	2320      	movs	r3, #32
 8000b2e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000b32:	2300      	movs	r3, #0
 8000b34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8000b38:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 8000b3c:	2001      	movs	r0, #1
 8000b3e:	e7e8      	b.n	8000b12 <I2C_IsAcknowledgeFailed+0x12>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000b40:	6823      	ldr	r3, [r4, #0]
 8000b42:	699a      	ldr	r2, [r3, #24]
 8000b44:	0692      	lsls	r2, r2, #26
 8000b46:	d5e5      	bpl.n	8000b14 <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000b48:	2210      	movs	r2, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000b4a:	2520      	movs	r5, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000b4c:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8000b4e:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000b50:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8000b52:	f7ff ffb2 	bl	8000aba <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8000b56:	6822      	ldr	r2, [r4, #0]
 8000b58:	6853      	ldr	r3, [r2, #4]
 8000b5a:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8000b5e:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8000b62:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8000b66:	f023 0301 	bic.w	r3, r3, #1
 8000b6a:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8000b6c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000b6e:	f043 0304 	orr.w	r3, r3, #4
 8000b72:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8000b74:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
 8000b78:	e7db      	b.n	8000b32 <I2C_IsAcknowledgeFailed+0x32>

08000b7a <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8000b7a:	b570      	push	{r4, r5, r6, lr}
 8000b7c:	4604      	mov	r4, r0
 8000b7e:	460d      	mov	r5, r1
 8000b80:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8000b82:	6823      	ldr	r3, [r4, #0]
 8000b84:	699b      	ldr	r3, [r3, #24]
 8000b86:	075b      	lsls	r3, r3, #29
 8000b88:	d40e      	bmi.n	8000ba8 <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8000b8a:	4632      	mov	r2, r6
 8000b8c:	4629      	mov	r1, r5
 8000b8e:	4620      	mov	r0, r4
 8000b90:	f7ff ffb6 	bl	8000b00 <I2C_IsAcknowledgeFailed>
 8000b94:	b9f0      	cbnz	r0, 8000bd4 <I2C_WaitOnRXNEFlagUntilTimeout+0x5a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8000b96:	6823      	ldr	r3, [r4, #0]
 8000b98:	699a      	ldr	r2, [r3, #24]
 8000b9a:	0691      	lsls	r1, r2, #26
 8000b9c:	d51c      	bpl.n	8000bd8 <I2C_WaitOnRXNEFlagUntilTimeout+0x5e>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8000b9e:	699a      	ldr	r2, [r3, #24]
 8000ba0:	0752      	lsls	r2, r2, #29
 8000ba2:	d503      	bpl.n	8000bac <I2C_WaitOnRXNEFlagUntilTimeout+0x32>
 8000ba4:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8000ba6:	b10a      	cbz	r2, 8000bac <I2C_WaitOnRXNEFlagUntilTimeout+0x32>
        return HAL_OK;
 8000ba8:	2000      	movs	r0, #0
}
 8000baa:	bd70      	pop	{r4, r5, r6, pc}
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000bac:	2120      	movs	r1, #32
 8000bae:	61d9      	str	r1, [r3, #28]
        I2C_RESET_CR2(hi2c);
 8000bb0:	685a      	ldr	r2, [r3, #4]
 8000bb2:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8000bb6:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8000bba:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8000bbe:	f022 0201 	bic.w	r2, r2, #1
 8000bc2:	605a      	str	r2, [r3, #4]
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8000bc8:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000bcc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8000bd0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8000bd4:	2001      	movs	r0, #1
 8000bd6:	e7e8      	b.n	8000baa <I2C_WaitOnRXNEFlagUntilTimeout+0x30>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000bd8:	f7ff fe14 	bl	8000804 <HAL_GetTick>
 8000bdc:	1b80      	subs	r0, r0, r6
 8000bde:	42a8      	cmp	r0, r5
 8000be0:	d801      	bhi.n	8000be6 <I2C_WaitOnRXNEFlagUntilTimeout+0x6c>
 8000be2:	2d00      	cmp	r5, #0
 8000be4:	d1cd      	bne.n	8000b82 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000be6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000be8:	f043 0320 	orr.w	r3, r3, #32
 8000bec:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8000bee:	2320      	movs	r3, #32
 8000bf0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      __HAL_UNLOCK(hi2c);
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	e7eb      	b.n	8000bd0 <I2C_WaitOnRXNEFlagUntilTimeout+0x56>

08000bf8 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8000bf8:	b570      	push	{r4, r5, r6, lr}
 8000bfa:	4604      	mov	r4, r0
 8000bfc:	460d      	mov	r5, r1
 8000bfe:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000c00:	6823      	ldr	r3, [r4, #0]
 8000c02:	699b      	ldr	r3, [r3, #24]
 8000c04:	069b      	lsls	r3, r3, #26
 8000c06:	d501      	bpl.n	8000c0c <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8000c08:	2000      	movs	r0, #0
}
 8000c0a:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8000c0c:	4632      	mov	r2, r6
 8000c0e:	4629      	mov	r1, r5
 8000c10:	4620      	mov	r0, r4
 8000c12:	f7ff ff75 	bl	8000b00 <I2C_IsAcknowledgeFailed>
 8000c16:	b990      	cbnz	r0, 8000c3e <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000c18:	f7ff fdf4 	bl	8000804 <HAL_GetTick>
 8000c1c:	1b80      	subs	r0, r0, r6
 8000c1e:	42a8      	cmp	r0, r5
 8000c20:	d801      	bhi.n	8000c26 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 8000c22:	2d00      	cmp	r5, #0
 8000c24:	d1ec      	bne.n	8000c00 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000c26:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000c28:	f043 0320 	orr.w	r3, r3, #32
 8000c2c:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8000c2e:	2320      	movs	r3, #32
 8000c30:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8000c34:	2300      	movs	r3, #0
 8000c36:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 8000c3a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8000c3e:	2001      	movs	r0, #1
 8000c40:	e7e3      	b.n	8000c0a <I2C_WaitOnSTOPFlagUntilTimeout+0x12>

08000c42 <I2C_WaitOnFlagUntilTimeout>:
{
 8000c42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c46:	9f06      	ldr	r7, [sp, #24]
 8000c48:	4604      	mov	r4, r0
 8000c4a:	4688      	mov	r8, r1
 8000c4c:	4616      	mov	r6, r2
 8000c4e:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000c50:	6822      	ldr	r2, [r4, #0]
 8000c52:	6993      	ldr	r3, [r2, #24]
 8000c54:	ea38 0303 	bics.w	r3, r8, r3
 8000c58:	bf0c      	ite	eq
 8000c5a:	2301      	moveq	r3, #1
 8000c5c:	2300      	movne	r3, #0
 8000c5e:	42b3      	cmp	r3, r6
 8000c60:	d001      	beq.n	8000c66 <I2C_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 8000c62:	2000      	movs	r0, #0
 8000c64:	e015      	b.n	8000c92 <I2C_WaitOnFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8000c66:	1c6b      	adds	r3, r5, #1
 8000c68:	d0f3      	beq.n	8000c52 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000c6a:	f7ff fdcb 	bl	8000804 <HAL_GetTick>
 8000c6e:	1bc0      	subs	r0, r0, r7
 8000c70:	42a8      	cmp	r0, r5
 8000c72:	d801      	bhi.n	8000c78 <I2C_WaitOnFlagUntilTimeout+0x36>
 8000c74:	2d00      	cmp	r5, #0
 8000c76:	d1eb      	bne.n	8000c50 <I2C_WaitOnFlagUntilTimeout+0xe>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000c78:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000c7a:	f043 0320 	orr.w	r3, r3, #32
 8000c7e:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8000c80:	2320      	movs	r3, #32
 8000c82:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8000c86:	2300      	movs	r3, #0
 8000c88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 8000c8c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8000c90:	2001      	movs	r0, #1
}
 8000c92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000c96 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8000c96:	b570      	push	{r4, r5, r6, lr}
 8000c98:	4604      	mov	r4, r0
 8000c9a:	460d      	mov	r5, r1
 8000c9c:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8000c9e:	6823      	ldr	r3, [r4, #0]
 8000ca0:	699b      	ldr	r3, [r3, #24]
 8000ca2:	079b      	lsls	r3, r3, #30
 8000ca4:	d501      	bpl.n	8000caa <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 8000ca6:	2000      	movs	r0, #0
}
 8000ca8:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8000caa:	4632      	mov	r2, r6
 8000cac:	4629      	mov	r1, r5
 8000cae:	4620      	mov	r0, r4
 8000cb0:	f7ff ff26 	bl	8000b00 <I2C_IsAcknowledgeFailed>
 8000cb4:	b9a0      	cbnz	r0, 8000ce0 <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 8000cb6:	1c6a      	adds	r2, r5, #1
 8000cb8:	d0f1      	beq.n	8000c9e <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000cba:	f7ff fda3 	bl	8000804 <HAL_GetTick>
 8000cbe:	1b80      	subs	r0, r0, r6
 8000cc0:	42a8      	cmp	r0, r5
 8000cc2:	d801      	bhi.n	8000cc8 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8000cc4:	2d00      	cmp	r5, #0
 8000cc6:	d1ea      	bne.n	8000c9e <I2C_WaitOnTXISFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000cc8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000cca:	f043 0320 	orr.w	r3, r3, #32
 8000cce:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8000cd0:	2320      	movs	r3, #32
 8000cd2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 8000cdc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8000ce0:	2001      	movs	r0, #1
 8000ce2:	e7e1      	b.n	8000ca8 <I2C_WaitOnTXISFlagUntilTimeout+0x12>

08000ce4 <HAL_I2C_Init>:
{
 8000ce4:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8000ce6:	4604      	mov	r4, r0
 8000ce8:	2800      	cmp	r0, #0
 8000cea:	d04a      	beq.n	8000d82 <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000cec:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8000cf0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000cf4:	b91b      	cbnz	r3, 8000cfe <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8000cf6:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8000cfa:	f7ff fc17 	bl	800052c <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000cfe:	2324      	movs	r3, #36	; 0x24
 8000d00:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8000d04:	6823      	ldr	r3, [r4, #0]
 8000d06:	681a      	ldr	r2, [r3, #0]
 8000d08:	f022 0201 	bic.w	r2, r2, #1
 8000d0c:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000d0e:	6862      	ldr	r2, [r4, #4]
 8000d10:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000d14:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000d16:	689a      	ldr	r2, [r3, #8]
 8000d18:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000d1c:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000d1e:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8000d22:	2901      	cmp	r1, #1
 8000d24:	d124      	bne.n	8000d70 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000d26:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000d2a:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000d2c:	685a      	ldr	r2, [r3, #4]
 8000d2e:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8000d32:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000d36:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000d38:	68da      	ldr	r2, [r3, #12]
 8000d3a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000d3e:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000d40:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 8000d44:	430a      	orrs	r2, r1
 8000d46:	69a1      	ldr	r1, [r4, #24]
 8000d48:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000d4c:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000d4e:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 8000d52:	430a      	orrs	r2, r1
 8000d54:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8000d56:	681a      	ldr	r2, [r3, #0]
 8000d58:	f042 0201 	orr.w	r2, r2, #1
 8000d5c:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000d5e:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8000d60:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000d62:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000d64:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000d68:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000d6a:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8000d6e:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000d70:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000d74:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000d76:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000d78:	bf04      	itt	eq
 8000d7a:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 8000d7e:	605a      	streq	r2, [r3, #4]
 8000d80:	e7d4      	b.n	8000d2c <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8000d82:	2001      	movs	r0, #1
 8000d84:	e7f3      	b.n	8000d6e <HAL_I2C_Init+0x8a>
	...

08000d88 <HAL_I2C_Master_Transmit>:
{
 8000d88:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8000d8c:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000d8e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8000d92:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000d94:	2b20      	cmp	r3, #32
{
 8000d96:	4604      	mov	r4, r0
 8000d98:	460e      	mov	r6, r1
 8000d9a:	4691      	mov	r9, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000d9c:	f040 8086 	bne.w	8000eac <HAL_I2C_Master_Transmit+0x124>
    __HAL_LOCK(hi2c);
 8000da0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000da4:	2b01      	cmp	r3, #1
 8000da6:	f000 8081 	beq.w	8000eac <HAL_I2C_Master_Transmit+0x124>
 8000daa:	f04f 0a01 	mov.w	sl, #1
 8000dae:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8000db2:	f7ff fd27 	bl	8000804 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000db6:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 8000db8:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000dba:	9000      	str	r0, [sp, #0]
 8000dbc:	4652      	mov	r2, sl
 8000dbe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000dc2:	4620      	mov	r0, r4
 8000dc4:	f7ff ff3d 	bl	8000c42 <I2C_WaitOnFlagUntilTimeout>
 8000dc8:	b118      	cbz	r0, 8000dd2 <HAL_I2C_Master_Transmit+0x4a>
      return HAL_ERROR;
 8000dca:	2001      	movs	r0, #1
}
 8000dcc:	b002      	add	sp, #8
 8000dce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000dd2:	2321      	movs	r3, #33	; 0x21
 8000dd4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8000dd8:	2310      	movs	r3, #16
 8000dda:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000dde:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 8000de0:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000de4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr  = pData;
 8000de6:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000dea:	b29b      	uxth	r3, r3
 8000dec:	2bff      	cmp	r3, #255	; 0xff
    hi2c->XferISR   = NULL;
 8000dee:	6360      	str	r0, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000df0:	4b2f      	ldr	r3, [pc, #188]	; (8000eb0 <HAL_I2C_Master_Transmit+0x128>)
 8000df2:	d926      	bls.n	8000e42 <HAL_I2C_Master_Transmit+0xba>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000df4:	22ff      	movs	r2, #255	; 0xff
 8000df6:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8000df8:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000dfa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000dfe:	4631      	mov	r1, r6
 8000e00:	4620      	mov	r0, r4
 8000e02:	f7ff fe69 	bl	8000ad8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8000e06:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000e08:	b29b      	uxth	r3, r3
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000e0a:	462a      	mov	r2, r5
 8000e0c:	4639      	mov	r1, r7
 8000e0e:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 8000e10:	b9fb      	cbnz	r3, 8000e52 <HAL_I2C_Master_Transmit+0xca>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000e12:	f7ff fef1 	bl	8000bf8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8000e16:	2800      	cmp	r0, #0
 8000e18:	d1d7      	bne.n	8000dca <HAL_I2C_Master_Transmit+0x42>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000e1a:	6823      	ldr	r3, [r4, #0]
 8000e1c:	2120      	movs	r1, #32
 8000e1e:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8000e20:	685a      	ldr	r2, [r3, #4]
 8000e22:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8000e26:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8000e2a:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8000e2e:	f022 0201 	bic.w	r2, r2, #1
 8000e32:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8000e34:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8000e38:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8000e3c:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8000e40:	e7c4      	b.n	8000dcc <HAL_I2C_Master_Transmit+0x44>
      hi2c->XferSize = hi2c->XferCount;
 8000e42:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8000e44:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8000e46:	b292      	uxth	r2, r2
 8000e48:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000e4a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000e4e:	b2d2      	uxtb	r2, r2
 8000e50:	e7d5      	b.n	8000dfe <HAL_I2C_Master_Transmit+0x76>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000e52:	f7ff ff20 	bl	8000c96 <I2C_WaitOnTXISFlagUntilTimeout>
 8000e56:	2800      	cmp	r0, #0
 8000e58:	d1b7      	bne.n	8000dca <HAL_I2C_Master_Transmit+0x42>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8000e5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000e5c:	6822      	ldr	r2, [r4, #0]
 8000e5e:	f813 1b01 	ldrb.w	r1, [r3], #1
 8000e62:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8000e64:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8000e66:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8000e68:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8000e6a:	3b01      	subs	r3, #1
 8000e6c:	b29b      	uxth	r3, r3
 8000e6e:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000e70:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8000e72:	3a01      	subs	r2, #1
 8000e74:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000e76:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8000e78:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d0c3      	beq.n	8000e06 <HAL_I2C_Master_Transmit+0x7e>
 8000e7e:	2a00      	cmp	r2, #0
 8000e80:	d1c1      	bne.n	8000e06 <HAL_I2C_Master_Transmit+0x7e>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000e82:	9500      	str	r5, [sp, #0]
 8000e84:	463b      	mov	r3, r7
 8000e86:	2180      	movs	r1, #128	; 0x80
 8000e88:	4620      	mov	r0, r4
 8000e8a:	f7ff feda 	bl	8000c42 <I2C_WaitOnFlagUntilTimeout>
 8000e8e:	2800      	cmp	r0, #0
 8000e90:	d19b      	bne.n	8000dca <HAL_I2C_Master_Transmit+0x42>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000e92:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000e94:	b29b      	uxth	r3, r3
 8000e96:	2bff      	cmp	r3, #255	; 0xff
 8000e98:	d903      	bls.n	8000ea2 <HAL_I2C_Master_Transmit+0x11a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000e9a:	22ff      	movs	r2, #255	; 0xff
 8000e9c:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000e9e:	9000      	str	r0, [sp, #0]
 8000ea0:	e7ab      	b.n	8000dfa <HAL_I2C_Master_Transmit+0x72>
          hi2c->XferSize = hi2c->XferCount;
 8000ea2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000ea4:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8000ea6:	b292      	uxth	r2, r2
 8000ea8:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000eaa:	e7ce      	b.n	8000e4a <HAL_I2C_Master_Transmit+0xc2>
    return HAL_BUSY;
 8000eac:	2002      	movs	r0, #2
 8000eae:	e78d      	b.n	8000dcc <HAL_I2C_Master_Transmit+0x44>
 8000eb0:	80002000 	.word	0x80002000

08000eb4 <HAL_I2C_Master_Receive>:
{
 8000eb4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8000eb8:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000eba:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8000ebe:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000ec0:	2b20      	cmp	r3, #32
{
 8000ec2:	4604      	mov	r4, r0
 8000ec4:	460e      	mov	r6, r1
 8000ec6:	4691      	mov	r9, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000ec8:	f040 8087 	bne.w	8000fda <HAL_I2C_Master_Receive+0x126>
    __HAL_LOCK(hi2c);
 8000ecc:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000ed0:	2b01      	cmp	r3, #1
 8000ed2:	f000 8082 	beq.w	8000fda <HAL_I2C_Master_Receive+0x126>
 8000ed6:	f04f 0a01 	mov.w	sl, #1
 8000eda:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8000ede:	f7ff fc91 	bl	8000804 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000ee2:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 8000ee4:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000ee6:	9000      	str	r0, [sp, #0]
 8000ee8:	4652      	mov	r2, sl
 8000eea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000eee:	4620      	mov	r0, r4
 8000ef0:	f7ff fea7 	bl	8000c42 <I2C_WaitOnFlagUntilTimeout>
 8000ef4:	b118      	cbz	r0, 8000efe <HAL_I2C_Master_Receive+0x4a>
      return HAL_ERROR;
 8000ef6:	2001      	movs	r0, #1
}
 8000ef8:	b002      	add	sp, #8
 8000efa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8000efe:	2322      	movs	r3, #34	; 0x22
 8000f00:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8000f04:	2310      	movs	r3, #16
 8000f06:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f0a:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 8000f0c:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000f10:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr  = pData;
 8000f12:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000f16:	b29b      	uxth	r3, r3
 8000f18:	2bff      	cmp	r3, #255	; 0xff
    hi2c->XferISR   = NULL;
 8000f1a:	6360      	str	r0, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000f1c:	4b30      	ldr	r3, [pc, #192]	; (8000fe0 <HAL_I2C_Master_Receive+0x12c>)
 8000f1e:	d926      	bls.n	8000f6e <HAL_I2C_Master_Receive+0xba>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000f20:	22ff      	movs	r2, #255	; 0xff
 8000f22:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8000f24:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000f26:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000f2a:	4631      	mov	r1, r6
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	f7ff fdd3 	bl	8000ad8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8000f32:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000f34:	b29b      	uxth	r3, r3
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000f36:	462a      	mov	r2, r5
 8000f38:	4639      	mov	r1, r7
 8000f3a:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 8000f3c:	b9fb      	cbnz	r3, 8000f7e <HAL_I2C_Master_Receive+0xca>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000f3e:	f7ff fe5b 	bl	8000bf8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8000f42:	2800      	cmp	r0, #0
 8000f44:	d1d7      	bne.n	8000ef6 <HAL_I2C_Master_Receive+0x42>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000f46:	6823      	ldr	r3, [r4, #0]
 8000f48:	2120      	movs	r1, #32
 8000f4a:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8000f4c:	685a      	ldr	r2, [r3, #4]
 8000f4e:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8000f52:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8000f56:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8000f5a:	f022 0201 	bic.w	r2, r2, #1
 8000f5e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8000f60:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8000f64:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8000f68:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8000f6c:	e7c4      	b.n	8000ef8 <HAL_I2C_Master_Receive+0x44>
      hi2c->XferSize = hi2c->XferCount;
 8000f6e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8000f70:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8000f72:	b292      	uxth	r2, r2
 8000f74:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000f76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000f7a:	b2d2      	uxtb	r2, r2
 8000f7c:	e7d5      	b.n	8000f2a <HAL_I2C_Master_Receive+0x76>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000f7e:	f7ff fdfc 	bl	8000b7a <I2C_WaitOnRXNEFlagUntilTimeout>
 8000f82:	2800      	cmp	r0, #0
 8000f84:	d1b7      	bne.n	8000ef6 <HAL_I2C_Master_Receive+0x42>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8000f86:	6823      	ldr	r3, [r4, #0]
 8000f88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000f8c:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8000f8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8000f90:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8000f92:	3301      	adds	r3, #1
 8000f94:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8000f96:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000f98:	3b01      	subs	r3, #1
 8000f9a:	b29b      	uxth	r3, r3
 8000f9c:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000f9e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8000fa0:	3a01      	subs	r2, #1
 8000fa2:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000fa4:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8000fa6:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d0c2      	beq.n	8000f32 <HAL_I2C_Master_Receive+0x7e>
 8000fac:	2a00      	cmp	r2, #0
 8000fae:	d1c0      	bne.n	8000f32 <HAL_I2C_Master_Receive+0x7e>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000fb0:	9500      	str	r5, [sp, #0]
 8000fb2:	463b      	mov	r3, r7
 8000fb4:	2180      	movs	r1, #128	; 0x80
 8000fb6:	4620      	mov	r0, r4
 8000fb8:	f7ff fe43 	bl	8000c42 <I2C_WaitOnFlagUntilTimeout>
 8000fbc:	2800      	cmp	r0, #0
 8000fbe:	d19a      	bne.n	8000ef6 <HAL_I2C_Master_Receive+0x42>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000fc0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000fc2:	b29b      	uxth	r3, r3
 8000fc4:	2bff      	cmp	r3, #255	; 0xff
 8000fc6:	d903      	bls.n	8000fd0 <HAL_I2C_Master_Receive+0x11c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000fc8:	22ff      	movs	r2, #255	; 0xff
 8000fca:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000fcc:	9000      	str	r0, [sp, #0]
 8000fce:	e7aa      	b.n	8000f26 <HAL_I2C_Master_Receive+0x72>
          hi2c->XferSize = hi2c->XferCount;
 8000fd0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000fd2:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8000fd4:	b292      	uxth	r2, r2
 8000fd6:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000fd8:	e7cd      	b.n	8000f76 <HAL_I2C_Master_Receive+0xc2>
    return HAL_BUSY;
 8000fda:	2002      	movs	r0, #2
 8000fdc:	e78c      	b.n	8000ef8 <HAL_I2C_Master_Receive+0x44>
 8000fde:	bf00      	nop
 8000fe0:	80002400 	.word	0x80002400

08000fe4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8000fe4:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000fe6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8000fea:	2b20      	cmp	r3, #32
 8000fec:	b2dc      	uxtb	r4, r3
 8000fee:	d11d      	bne.n	800102c <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000ff0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d019      	beq.n	800102c <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000ff8:	2324      	movs	r3, #36	; 0x24
 8000ffa:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000ffe:	6803      	ldr	r3, [r0, #0]
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	f022 0201 	bic.w	r2, r2, #1
 8001006:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800100e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	4311      	orrs	r1, r2
 8001014:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	f042 0201 	orr.w	r2, r2, #1
 800101c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800101e:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8001020:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001024:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8001028:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 800102a:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 800102c:	2002      	movs	r0, #2
 800102e:	e7fc      	b.n	800102a <HAL_I2CEx_ConfigAnalogFilter+0x46>

08001030 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001030:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001032:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001036:	2b20      	cmp	r3, #32
 8001038:	b2dc      	uxtb	r4, r3
 800103a:	d11c      	bne.n	8001076 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800103c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001040:	2b01      	cmp	r3, #1
 8001042:	d018      	beq.n	8001076 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001044:	2324      	movs	r3, #36	; 0x24
 8001046:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800104a:	6803      	ldr	r3, [r0, #0]
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	f022 0201 	bic.w	r2, r2, #1
 8001052:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001054:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001056:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800105a:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800105e:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	f042 0201 	orr.w	r2, r2, #1
 8001066:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001068:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800106a:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800106e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8001072:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8001074:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8001076:	2002      	movs	r0, #2
 8001078:	e7fc      	b.n	8001074 <HAL_I2CEx_ConfigDigitalFilter+0x44>

0800107a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800107a:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800107c:	4604      	mov	r4, r0
{
 800107e:	b087      	sub	sp, #28
  if (hpcd == NULL)
 8001080:	2800      	cmp	r0, #0
 8001082:	d04f      	beq.n	8001124 <HAL_PCD_Init+0xaa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001084:	f890 32a9 	ldrb.w	r3, [r0, #681]	; 0x2a9
 8001088:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800108c:	b91b      	cbnz	r3, 8001096 <HAL_PCD_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800108e:	f880 22a8 	strb.w	r2, [r0, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001092:	f7ff facb 	bl	800062c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001096:	2303      	movs	r3, #3
 8001098:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800109c:	6820      	ldr	r0, [r4, #0]
 800109e:	f001 fc28 	bl	80028f2 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010a2:	2300      	movs	r3, #0
 80010a4:	6865      	ldr	r5, [r4, #4]
 80010a6:	2628      	movs	r6, #40	; 0x28
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80010a8:	2701      	movs	r7, #1
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80010aa:	4618      	mov	r0, r3
 80010ac:	b2d9      	uxtb	r1, r3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010ae:	428d      	cmp	r5, r1
 80010b0:	f103 0201 	add.w	r2, r3, #1
 80010b4:	d81b      	bhi.n	80010ee <HAL_PCD_Init+0x74>
 80010b6:	2300      	movs	r3, #0
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80010b8:	2628      	movs	r6, #40	; 0x28
 80010ba:	4619      	mov	r1, r3
 80010bc:	b2d8      	uxtb	r0, r3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010be:	4285      	cmp	r5, r0
 80010c0:	f103 0301 	add.w	r3, r3, #1
 80010c4:	d821      	bhi.n	800110a <HAL_PCD_Init+0x90>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80010c6:	f104 0610 	add.w	r6, r4, #16
 80010ca:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80010cc:	466d      	mov	r5, sp
 80010ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010d0:	6833      	ldr	r3, [r6, #0]
 80010d2:	602b      	str	r3, [r5, #0]
 80010d4:	1d23      	adds	r3, r4, #4
 80010d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010d8:	6820      	ldr	r0, [r4, #0]
 80010da:	f001 fc14 	bl	8002906 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80010de:	2000      	movs	r0, #0
  hpcd->State = HAL_PCD_STATE_READY;
 80010e0:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 80010e2:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80010e6:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  return HAL_OK;
}
 80010ea:	b007      	add	sp, #28
 80010ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->IN_ep[i].is_in = 1U;
 80010ee:	fb06 4301 	mla	r3, r6, r1, r4
    hpcd->IN_ep[i].xfer_buff = 0U;
 80010f2:	e9c3 000e 	strd	r0, r0, [r3, #56]	; 0x38
    hpcd->IN_ep[i].is_in = 1U;
 80010f6:	f883 7029 	strb.w	r7, [r3, #41]	; 0x29
    hpcd->IN_ep[i].num = i;
 80010fa:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
    hpcd->IN_ep[i].tx_fifo_num = i;
 80010fe:	86d9      	strh	r1, [r3, #54]	; 0x36
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001100:	f883 002b 	strb.w	r0, [r3, #43]	; 0x2b
    hpcd->IN_ep[i].xfer_len = 0U;
 8001104:	6418      	str	r0, [r3, #64]	; 0x40
 8001106:	4613      	mov	r3, r2
 8001108:	e7d0      	b.n	80010ac <HAL_PCD_Init+0x32>
    hpcd->OUT_ep[i].is_in = 0U;
 800110a:	fb06 4200 	mla	r2, r6, r0, r4
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800110e:	e9c2 115e 	strd	r1, r1, [r2, #376]	; 0x178
    hpcd->OUT_ep[i].is_in = 0U;
 8001112:	f882 1169 	strb.w	r1, [r2, #361]	; 0x169
    hpcd->OUT_ep[i].num = i;
 8001116:	f882 0168 	strb.w	r0, [r2, #360]	; 0x168
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800111a:	f882 116b 	strb.w	r1, [r2, #363]	; 0x16b
    hpcd->OUT_ep[i].xfer_len = 0U;
 800111e:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001122:	e7cb      	b.n	80010bc <HAL_PCD_Init+0x42>
    return HAL_ERROR;
 8001124:	2001      	movs	r0, #1
 8001126:	e7e0      	b.n	80010ea <HAL_PCD_Init+0x70>

08001128 <HAL_PCD_DataOutStageCallback>:
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataOutStageCallback could be implemented in the user file
   */
}
 8001128:	4770      	bx	lr

0800112a <HAL_PCD_DataInStageCallback>:
 800112a:	4770      	bx	lr

0800112c <HAL_PCD_SetupStageCallback>:
 800112c:	4770      	bx	lr

0800112e <HAL_PCD_SOFCallback>:
 800112e:	4770      	bx	lr

08001130 <HAL_PCD_ResetCallback>:
 8001130:	4770      	bx	lr

08001132 <HAL_PCD_SuspendCallback>:
 8001132:	4770      	bx	lr

08001134 <HAL_PCD_ResumeCallback>:
 8001134:	4770      	bx	lr

08001136 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001136:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8001138:	f890 22a8 	ldrb.w	r2, [r0, #680]	; 0x2a8
 800113c:	2a01      	cmp	r2, #1
{
 800113e:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8001140:	d00b      	beq.n	800115a <HAL_PCD_SetAddress+0x24>
 8001142:	2201      	movs	r2, #1
 8001144:	f880 22a8 	strb.w	r2, [r0, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001148:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800114c:	6800      	ldr	r0, [r0, #0]
 800114e:	f001 fbee 	bl	800292e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001152:	2000      	movs	r0, #0
 8001154:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8

  return HAL_OK;
}
 8001158:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800115a:	2002      	movs	r0, #2
 800115c:	e7fc      	b.n	8001158 <HAL_PCD_SetAddress+0x22>
	...

08001160 <HAL_PCD_IRQHandler>:
{
 8001160:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001164:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001166:	6800      	ldr	r0, [r0, #0]
 8001168:	f001 fbe7 	bl	800293a <USB_ReadInterrupts>
 800116c:	0402      	lsls	r2, r0, #16
 800116e:	d509      	bpl.n	8001184 <HAL_PCD_IRQHandler+0x24>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
      {
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001170:	f8df a7f4 	ldr.w	sl, [pc, #2036]	; 8001968 <HAL_PCD_IRQHandler+0x808>
 8001174:	f8df 97f4 	ldr.w	r9, [pc, #2036]	; 800196c <HAL_PCD_IRQHandler+0x80c>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001178:	6820      	ldr	r0, [r4, #0]
 800117a:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 800117e:	041f      	lsls	r7, r3, #16
 8001180:	f100 8093 	bmi.w	80012aa <HAL_PCD_IRQHandler+0x14a>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001184:	6820      	ldr	r0, [r4, #0]
 8001186:	f001 fbd8 	bl	800293a <USB_ReadInterrupts>
 800118a:	0543      	lsls	r3, r0, #21
 800118c:	d50f      	bpl.n	80011ae <HAL_PCD_IRQHandler+0x4e>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800118e:	6822      	ldr	r2, [r4, #0]
 8001190:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001194:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001198:	041b      	lsls	r3, r3, #16
 800119a:	0c1b      	lsrs	r3, r3, #16
    HAL_PCD_ResetCallback(hpcd);
 800119c:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800119e:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 80011a2:	f7ff ffc5 	bl	8001130 <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80011a6:	2100      	movs	r1, #0
 80011a8:	4620      	mov	r0, r4
 80011aa:	f7ff ffc4 	bl	8001136 <HAL_PCD_SetAddress>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80011ae:	6820      	ldr	r0, [r4, #0]
 80011b0:	f001 fbc3 	bl	800293a <USB_ReadInterrupts>
 80011b4:	0446      	lsls	r6, r0, #17
 80011b6:	d508      	bpl.n	80011ca <HAL_PCD_IRQHandler+0x6a>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80011b8:	6822      	ldr	r2, [r4, #0]
 80011ba:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80011be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80011c2:	041b      	lsls	r3, r3, #16
 80011c4:	0c1b      	lsrs	r3, r3, #16
 80011c6:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80011ca:	6820      	ldr	r0, [r4, #0]
 80011cc:	f001 fbb5 	bl	800293a <USB_ReadInterrupts>
 80011d0:	0485      	lsls	r5, r0, #18
 80011d2:	d508      	bpl.n	80011e6 <HAL_PCD_IRQHandler+0x86>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80011d4:	6822      	ldr	r2, [r4, #0]
 80011d6:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80011da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80011de:	041b      	lsls	r3, r3, #16
 80011e0:	0c1b      	lsrs	r3, r3, #16
 80011e2:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80011e6:	6820      	ldr	r0, [r4, #0]
 80011e8:	f001 fba7 	bl	800293a <USB_ReadInterrupts>
 80011ec:	04c0      	lsls	r0, r0, #19
 80011ee:	d51c      	bpl.n	800122a <HAL_PCD_IRQHandler+0xca>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80011f0:	6822      	ldr	r2, [r4, #0]
 80011f2:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80011f6:	f023 0304 	bic.w	r3, r3, #4
 80011fa:	041b      	lsls	r3, r3, #16
 80011fc:	0c1b      	lsrs	r3, r3, #16
 80011fe:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001202:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8001206:	f023 0308 	bic.w	r3, r3, #8
 800120a:	041b      	lsls	r3, r3, #16
 800120c:	0c1b      	lsrs	r3, r3, #16
 800120e:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 8001212:	4620      	mov	r0, r4
 8001214:	f7ff ff8e 	bl	8001134 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001218:	6822      	ldr	r2, [r4, #0]
 800121a:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800121e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001222:	041b      	lsls	r3, r3, #16
 8001224:	0c1b      	lsrs	r3, r3, #16
 8001226:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800122a:	6820      	ldr	r0, [r4, #0]
 800122c:	f001 fb85 	bl	800293a <USB_ReadInterrupts>
 8001230:	0501      	lsls	r1, r0, #20
 8001232:	d519      	bpl.n	8001268 <HAL_PCD_IRQHandler+0x108>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001234:	6822      	ldr	r2, [r4, #0]
 8001236:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 800123a:	b29b      	uxth	r3, r3
 800123c:	f043 0308 	orr.w	r3, r3, #8
 8001240:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001244:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001248:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800124c:	041b      	lsls	r3, r3, #16
 800124e:	0c1b      	lsrs	r3, r3, #16
 8001250:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001254:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8001258:	b29b      	uxth	r3, r3
 800125a:	f043 0304 	orr.w	r3, r3, #4
 800125e:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 8001262:	4620      	mov	r0, r4
 8001264:	f7ff ff65 	bl	8001132 <HAL_PCD_SuspendCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001268:	6820      	ldr	r0, [r4, #0]
 800126a:	f001 fb66 	bl	800293a <USB_ReadInterrupts>
 800126e:	0582      	lsls	r2, r0, #22
 8001270:	d50b      	bpl.n	800128a <HAL_PCD_IRQHandler+0x12a>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001272:	6822      	ldr	r2, [r4, #0]
 8001274:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001278:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800127c:	041b      	lsls	r3, r3, #16
 800127e:	0c1b      	lsrs	r3, r3, #16
 8001280:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8001284:	4620      	mov	r0, r4
 8001286:	f7ff ff52 	bl	800112e <HAL_PCD_SOFCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800128a:	6820      	ldr	r0, [r4, #0]
 800128c:	f001 fb55 	bl	800293a <USB_ReadInterrupts>
 8001290:	05c3      	lsls	r3, r0, #23
 8001292:	d508      	bpl.n	80012a6 <HAL_PCD_IRQHandler+0x146>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001294:	6822      	ldr	r2, [r4, #0]
 8001296:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800129a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800129e:	041b      	lsls	r3, r3, #16
 80012a0:	0c1b      	lsrs	r3, r3, #16
 80012a2:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 80012a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    wIstr = hpcd->Instance->ISTR;
 80012aa:	f8b0 6044 	ldrh.w	r6, [r0, #68]	; 0x44
 80012ae:	b2b1      	uxth	r1, r6
    if (epindex == 0U)
 80012b0:	f016 060f 	ands.w	r6, r6, #15
 80012b4:	f040 80b6 	bne.w	8001424 <HAL_PCD_IRQHandler+0x2c4>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80012b8:	f011 0110 	ands.w	r1, r1, #16
 80012bc:	d12c      	bne.n	8001318 <HAL_PCD_IRQHandler+0x1b8>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80012be:	8803      	ldrh	r3, [r0, #0]
 80012c0:	b29b      	uxth	r3, r3
 80012c2:	ea03 030a 	and.w	r3, r3, sl
 80012c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012ca:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80012cc:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80012d0:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 80012d4:	f200 4002 	addw	r0, r0, #1026	; 0x402
 80012d8:	fa10 f383 	uxtah	r3, r0, r3
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80012dc:	4620      	mov	r0, r4
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80012de:	f833 3032 	ldrh.w	r3, [r3, r2, lsl #3]
        ep->xfer_buff += ep->xfer_count;
 80012e2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80012e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80012e8:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 80012ea:	4413      	add	r3, r2
 80012ec:	63e3      	str	r3, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80012ee:	f7ff ff1c 	bl	800112a <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80012f2:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	f43f af3e 	beq.w	8001178 <HAL_PCD_IRQHandler+0x18>
 80012fc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80012fe:	2a00      	cmp	r2, #0
 8001300:	f47f af3a 	bne.w	8001178 <HAL_PCD_IRQHandler+0x18>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001304:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8001308:	6821      	ldr	r1, [r4, #0]
 800130a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800130e:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001312:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 8001316:	e72f      	b.n	8001178 <HAL_PCD_IRQHandler+0x18>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001318:	8805      	ldrh	r5, [r0, #0]
 800131a:	b2ab      	uxth	r3, r5
        if ((wEPVal & USB_EP_SETUP) != 0U)
 800131c:	f415 6500 	ands.w	r5, r5, #2048	; 0x800
 8001320:	d020      	beq.n	8001364 <HAL_PCD_IRQHandler+0x204>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001322:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001326:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 800132a:	f200 4106 	addw	r1, r0, #1030	; 0x406
 800132e:	fa11 f383 	uxtah	r3, r1, r3
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001332:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
 8001336:	f833 3032 	ldrh.w	r3, [r3, r2, lsl #3]
 800133a:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 800133e:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001342:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001346:	f001 fdf5 	bl	8002f34 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800134a:	6822      	ldr	r2, [r4, #0]
 800134c:	8813      	ldrh	r3, [r2, #0]
 800134e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001352:	051b      	lsls	r3, r3, #20
 8001354:	0d1b      	lsrs	r3, r3, #20
 8001356:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800135a:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 800135c:	4620      	mov	r0, r4
 800135e:	f7ff fee5 	bl	800112c <HAL_PCD_SetupStageCallback>
 8001362:	e709      	b.n	8001178 <HAL_PCD_IRQHandler+0x18>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001364:	041f      	lsls	r7, r3, #16
 8001366:	f57f af07 	bpl.w	8001178 <HAL_PCD_IRQHandler+0x18>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800136a:	8803      	ldrh	r3, [r0, #0]
 800136c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001370:	051b      	lsls	r3, r3, #20
 8001372:	0d1b      	lsrs	r3, r3, #20
 8001374:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001378:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800137a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800137e:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 8001382:	f200 4106 	addw	r1, r0, #1030	; 0x406
 8001386:	fa11 f383 	uxtah	r3, r1, r3
 800138a:	f833 3032 	ldrh.w	r3, [r3, r2, lsl #3]
 800138e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001392:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001396:	b18b      	cbz	r3, 80013bc <HAL_PCD_IRQHandler+0x25c>
 8001398:	f8d4 117c 	ldr.w	r1, [r4, #380]	; 0x17c
 800139c:	b171      	cbz	r1, 80013bc <HAL_PCD_IRQHandler+0x25c>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800139e:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 80013a2:	f001 fdc7 	bl	8002f34 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 80013a6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80013aa:	f8d4 2184 	ldr.w	r2, [r4, #388]	; 0x184
 80013ae:	4413      	add	r3, r2
 80013b0:	f8c4 317c 	str.w	r3, [r4, #380]	; 0x17c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80013b4:	4629      	mov	r1, r5
 80013b6:	4620      	mov	r0, r4
 80013b8:	f7ff feb6 	bl	8001128 <HAL_PCD_DataOutStageCallback>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80013bc:	6821      	ldr	r1, [r4, #0]
 80013be:	f8d4 5178 	ldr.w	r5, [r4, #376]	; 0x178
 80013c2:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 80013c6:	f201 4006 	addw	r0, r1, #1030	; 0x406
 80013ca:	b29b      	uxth	r3, r3
 80013cc:	b9cd      	cbnz	r5, 8001402 <HAL_PCD_IRQHandler+0x2a2>
 80013ce:	5ac2      	ldrh	r2, [r0, r3]
 80013d0:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80013d4:	0412      	lsls	r2, r2, #16
 80013d6:	0c12      	lsrs	r2, r2, #16
 80013d8:	52c2      	strh	r2, [r0, r3]
 80013da:	5ac2      	ldrh	r2, [r0, r3]
 80013dc:	b292      	uxth	r2, r2
 80013de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80013e2:	52c2      	strh	r2, [r0, r3]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80013e4:	880b      	ldrh	r3, [r1, #0]
 80013e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80013ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80013ee:	041b      	lsls	r3, r3, #16
 80013f0:	0c1b      	lsrs	r3, r3, #16
 80013f2:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80013f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013fe:	800b      	strh	r3, [r1, #0]
 8001400:	e6ba      	b.n	8001178 <HAL_PCD_IRQHandler+0x18>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001402:	2d3e      	cmp	r5, #62	; 0x3e
 8001404:	d806      	bhi.n	8001414 <HAL_PCD_IRQHandler+0x2b4>
 8001406:	086a      	lsrs	r2, r5, #1
 8001408:	07ee      	lsls	r6, r5, #31
 800140a:	bf48      	it	mi
 800140c:	3201      	addmi	r2, #1
 800140e:	0292      	lsls	r2, r2, #10
 8001410:	b292      	uxth	r2, r2
 8001412:	e7e6      	b.n	80013e2 <HAL_PCD_IRQHandler+0x282>
 8001414:	096a      	lsrs	r2, r5, #5
 8001416:	06ed      	lsls	r5, r5, #27
 8001418:	bf08      	it	eq
 800141a:	f102 32ff 	addeq.w	r2, r2, #4294967295
 800141e:	ea49 2282 	orr.w	r2, r9, r2, lsl #10
 8001422:	e7f5      	b.n	8001410 <HAL_PCD_IRQHandler+0x2b0>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001424:	b237      	sxth	r7, r6
 8001426:	f830 3027 	ldrh.w	r3, [r0, r7, lsl #2]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800142a:	041a      	lsls	r2, r3, #16
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800142c:	fa1f f883 	uxth.w	r8, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001430:	f140 80f4 	bpl.w	800161c <HAL_PCD_IRQHandler+0x4bc>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001434:	f830 3027 	ldrh.w	r3, [r0, r7, lsl #2]
 8001438:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800143c:	051b      	lsls	r3, r3, #20
 800143e:	0d1b      	lsrs	r3, r3, #20
 8001440:	f043 0380 	orr.w	r3, r3, #128	; 0x80
        if (ep->doublebuffer == 0U)
 8001444:	2128      	movs	r1, #40	; 0x28
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001446:	f820 3027 	strh.w	r3, [r0, r7, lsl #2]
        if (ep->doublebuffer == 0U)
 800144a:	fb01 4106 	mla	r1, r1, r6, r4
 800144e:	f891 3174 	ldrb.w	r3, [r1, #372]	; 0x174
 8001452:	b9b3      	cbnz	r3, 8001482 <HAL_PCD_IRQHandler+0x322>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001454:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001458:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 800145c:	f200 4506 	addw	r5, r0, #1030	; 0x406
 8001460:	fa15 f383 	uxtah	r3, r5, r3
 8001464:	f833 5032 	ldrh.w	r5, [r3, r2, lsl #3]
 8001468:	f3c5 0509 	ubfx	r5, r5, #0, #10
          if (count != 0U)
 800146c:	2d00      	cmp	r5, #0
 800146e:	f000 80b9 	beq.w	80015e4 <HAL_PCD_IRQHandler+0x484>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001472:	f8b1 216e 	ldrh.w	r2, [r1, #366]	; 0x16e
 8001476:	462b      	mov	r3, r5
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001478:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 800147c:	f001 fd5a 	bl	8002f34 <USB_ReadPMA>
 8001480:	e0b0      	b.n	80015e4 <HAL_PCD_IRQHandler+0x484>
          if (ep->type == EP_TYPE_BULK)
 8001482:	f891 316b 	ldrb.w	r3, [r1, #363]	; 0x16b
 8001486:	f891 c168 	ldrb.w	ip, [r1, #360]	; 0x168
 800148a:	2b02      	cmp	r3, #2
 800148c:	f040 8089 	bne.w	80015a2 <HAL_PCD_IRQHandler+0x442>

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001490:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001494:	f8d1 2180 	ldr.w	r2, [r1, #384]	; 0x180
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001498:	f418 4b80 	ands.w	fp, r8, #16384	; 0x4000
 800149c:	ea4f 05cc 	mov.w	r5, ip, lsl #3
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80014a0:	fa10 f383 	uxtah	r3, r0, r3
 80014a4:	f008 0e40 	and.w	lr, r8, #64	; 0x40
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80014a8:	d03e      	beq.n	8001528 <HAL_PCD_IRQHandler+0x3c8>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80014aa:	441d      	add	r5, r3
 80014ac:	f8b5 5402 	ldrh.w	r5, [r5, #1026]	; 0x402
 80014b0:	f3c5 0509 	ubfx	r5, r5, #0, #10

    if (ep->xfer_len >= count)
 80014b4:	4295      	cmp	r5, r2
 80014b6:	d913      	bls.n	80014e0 <HAL_PCD_IRQHandler+0x380>
 80014b8:	2300      	movs	r3, #0
 80014ba:	f8c1 3180 	str.w	r3, [r1, #384]	; 0x180
    }

    if (ep->xfer_len == 0U)
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80014be:	f830 302c 	ldrh.w	r3, [r0, ip, lsl #2]
 80014c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80014c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80014ca:	041b      	lsls	r3, r3, #16
 80014cc:	0c1b      	lsrs	r3, r3, #16
 80014ce:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80014d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014da:	f820 302c 	strh.w	r3, [r0, ip, lsl #2]
 80014de:	e004      	b.n	80014ea <HAL_PCD_IRQHandler+0x38a>
      ep->xfer_len -= count;
 80014e0:	1b52      	subs	r2, r2, r5
 80014e2:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    if (ep->xfer_len == 0U)
 80014e6:	2a00      	cmp	r2, #0
 80014e8:	d0e9      	beq.n	80014be <HAL_PCD_IRQHandler+0x35e>
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80014ea:	f1be 0f00 	cmp.w	lr, #0
 80014ee:	d012      	beq.n	8001516 <HAL_PCD_IRQHandler+0x3b6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80014f0:	2328      	movs	r3, #40	; 0x28
 80014f2:	fb03 4306 	mla	r3, r3, r6, r4
 80014f6:	f893 2168 	ldrb.w	r2, [r3, #360]	; 0x168
 80014fa:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80014fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001502:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001506:	041b      	lsls	r3, r3, #16
 8001508:	0c1b      	lsrs	r3, r3, #16
 800150a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800150e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001512:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }

    if (count != 0U)
 8001516:	2d00      	cmp	r5, #0
 8001518:	d064      	beq.n	80015e4 <HAL_PCD_IRQHandler+0x484>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800151a:	2128      	movs	r1, #40	; 0x28
 800151c:	fb01 4106 	mla	r1, r1, r6, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001520:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 8001524:	462b      	mov	r3, r5
 8001526:	e7a7      	b.n	8001478 <HAL_PCD_IRQHandler+0x318>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001528:	442b      	add	r3, r5
 800152a:	f8b3 5406 	ldrh.w	r5, [r3, #1030]	; 0x406
 800152e:	f3c5 0509 	ubfx	r5, r5, #0, #10

    if (ep->xfer_len >= count)
 8001532:	4295      	cmp	r5, r2
 8001534:	d912      	bls.n	800155c <HAL_PCD_IRQHandler+0x3fc>
 8001536:	f8c1 b180 	str.w	fp, [r1, #384]	; 0x180
    }

    if (ep->xfer_len == 0U)
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800153a:	f830 302c 	ldrh.w	r3, [r0, ip, lsl #2]
 800153e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001542:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001546:	041b      	lsls	r3, r3, #16
 8001548:	0c1b      	lsrs	r3, r3, #16
 800154a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800154e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001552:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001556:	f820 302c 	strh.w	r3, [r0, ip, lsl #2]
 800155a:	e004      	b.n	8001566 <HAL_PCD_IRQHandler+0x406>
      ep->xfer_len -= count;
 800155c:	1b52      	subs	r2, r2, r5
 800155e:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    if (ep->xfer_len == 0U)
 8001562:	2a00      	cmp	r2, #0
 8001564:	d0e9      	beq.n	800153a <HAL_PCD_IRQHandler+0x3da>
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001566:	f1be 0f00 	cmp.w	lr, #0
 800156a:	d112      	bne.n	8001592 <HAL_PCD_IRQHandler+0x432>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800156c:	2328      	movs	r3, #40	; 0x28
 800156e:	fb03 4306 	mla	r3, r3, r6, r4
 8001572:	f893 2168 	ldrb.w	r2, [r3, #360]	; 0x168
 8001576:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800157a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800157e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001582:	041b      	lsls	r3, r3, #16
 8001584:	0c1b      	lsrs	r3, r3, #16
 8001586:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800158a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800158e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }

    if (count != 0U)
 8001592:	b33d      	cbz	r5, 80015e4 <HAL_PCD_IRQHandler+0x484>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001594:	2128      	movs	r1, #40	; 0x28
 8001596:	fb01 4106 	mla	r1, r1, r6, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800159a:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 800159e:	462b      	mov	r3, r5
 80015a0:	e76a      	b.n	8001478 <HAL_PCD_IRQHandler+0x318>
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80015a2:	f830 302c 	ldrh.w	r3, [r0, ip, lsl #2]
 80015a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80015aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80015ae:	041b      	lsls	r3, r3, #16
 80015b0:	0c1b      	lsrs	r3, r3, #16
 80015b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015b6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80015ba:	f820 302c 	strh.w	r3, [r0, ip, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80015be:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 80015c2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80015c6:	f413 4f80 	tst.w	r3, #16384	; 0x4000
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80015ca:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80015ce:	d059      	beq.n	8001684 <HAL_PCD_IRQHandler+0x524>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80015d0:	f200 4502 	addw	r5, r0, #1026	; 0x402
 80015d4:	fa15 f383 	uxtah	r3, r5, r3
 80015d8:	f833 5032 	ldrh.w	r5, [r3, r2, lsl #3]
 80015dc:	f3c5 0509 	ubfx	r5, r5, #0, #10
              if (count != 0U)
 80015e0:	2d00      	cmp	r5, #0
 80015e2:	d19d      	bne.n	8001520 <HAL_PCD_IRQHandler+0x3c0>
        ep->xfer_count += count;
 80015e4:	2128      	movs	r1, #40	; 0x28
 80015e6:	fb01 4306 	mla	r3, r1, r6, r4
 80015ea:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 80015ee:	442a      	add	r2, r5
 80015f0:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
        ep->xfer_buff += count;
 80015f4:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 80015f8:	442a      	add	r2, r5
 80015fa:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80015fe:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 8001602:	b11a      	cbz	r2, 800160c <HAL_PCD_IRQHandler+0x4ac>
 8001604:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8001608:	429d      	cmp	r5, r3
 800160a:	d246      	bcs.n	800169a <HAL_PCD_IRQHandler+0x53a>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800160c:	2328      	movs	r3, #40	; 0x28
 800160e:	fb03 4306 	mla	r3, r3, r6, r4
 8001612:	4620      	mov	r0, r4
 8001614:	f893 1168 	ldrb.w	r1, [r3, #360]	; 0x168
 8001618:	f7ff fd86 	bl	8001128 <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800161c:	f018 0f80 	tst.w	r8, #128	; 0x80
 8001620:	f43f adaa 	beq.w	8001178 <HAL_PCD_IRQHandler+0x18>
 8001624:	6820      	ldr	r0, [r4, #0]
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001626:	f830 3027 	ldrh.w	r3, [r0, r7, lsl #2]
 800162a:	b29b      	uxth	r3, r3
 800162c:	ea03 030a 	and.w	r3, r3, sl
 8001630:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001634:	f820 3027 	strh.w	r3, [r0, r7, lsl #2]
        if ((ep->type != EP_TYPE_BULK) ||
 8001638:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 800163c:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
 8001640:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001644:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8001648:	2b02      	cmp	r3, #2
 800164a:	d102      	bne.n	8001652 <HAL_PCD_IRQHandler+0x4f2>
 800164c:	f418 7f80 	tst.w	r8, #256	; 0x100
 8001650:	d13c      	bne.n	80016cc <HAL_PCD_IRQHandler+0x56c>
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001652:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8001656:	f200 4e02 	addw	lr, r0, #1026	; 0x402
          if (ep->xfer_len > TxByteNbre)
 800165a:	f04f 0c28 	mov.w	ip, #40	; 0x28
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800165e:	fa1e f282 	uxtah	r2, lr, r2
          if (ep->xfer_len > TxByteNbre)
 8001662:	fb0c 4306 	mla	r3, ip, r6, r4
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001666:	f832 2031 	ldrh.w	r2, [r2, r1, lsl #3]
          if (ep->xfer_len > TxByteNbre)
 800166a:	6c1d      	ldr	r5, [r3, #64]	; 0x40
 800166c:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001670:	4295      	cmp	r5, r2
 8001672:	d81a      	bhi.n	80016aa <HAL_PCD_IRQHandler+0x54a>
 8001674:	2200      	movs	r2, #0
 8001676:	641a      	str	r2, [r3, #64]	; 0x40
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001678:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 800167c:	4620      	mov	r0, r4
 800167e:	f7ff fd54 	bl	800112a <HAL_PCD_DataInStageCallback>
 8001682:	e579      	b.n	8001178 <HAL_PCD_IRQHandler+0x18>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001684:	f200 4506 	addw	r5, r0, #1030	; 0x406
 8001688:	fa15 f383 	uxtah	r3, r5, r3
 800168c:	f833 5032 	ldrh.w	r5, [r3, r2, lsl #3]
 8001690:	f3c5 0509 	ubfx	r5, r5, #0, #10
              if (count != 0U)
 8001694:	2d00      	cmp	r5, #0
 8001696:	d0a5      	beq.n	80015e4 <HAL_PCD_IRQHandler+0x484>
 8001698:	e77f      	b.n	800159a <HAL_PCD_IRQHandler+0x43a>
        ep = &hpcd->OUT_ep[epindex];
 800169a:	fb01 4106 	mla	r1, r1, r6, r4
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800169e:	6820      	ldr	r0, [r4, #0]
 80016a0:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 80016a4:	f001 f95c 	bl	8002960 <USB_EPStartXfer>
 80016a8:	e7b8      	b.n	800161c <HAL_PCD_IRQHandler+0x4bc>
            ep->xfer_len -= TxByteNbre;
 80016aa:	1aad      	subs	r5, r5, r2
 80016ac:	641d      	str	r5, [r3, #64]	; 0x40
          if (ep->xfer_len == 0U)
 80016ae:	2d00      	cmp	r5, #0
 80016b0:	d0e2      	beq.n	8001678 <HAL_PCD_IRQHandler+0x518>
            ep->xfer_buff += TxByteNbre;
 80016b2:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 80016b4:	4415      	add	r5, r2
 80016b6:	63dd      	str	r5, [r3, #60]	; 0x3c
            ep->xfer_count += TxByteNbre;
 80016b8:	6c5d      	ldr	r5, [r3, #68]	; 0x44
        ep = &hpcd->IN_ep[epindex];
 80016ba:	fb06 cc0c 	mla	ip, r6, ip, ip
            ep->xfer_count += TxByteNbre;
 80016be:	442a      	add	r2, r5
 80016c0:	645a      	str	r2, [r3, #68]	; 0x44
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80016c2:	eb04 010c 	add.w	r1, r4, ip
 80016c6:	f001 f94b 	bl	8002960 <USB_EPStartXfer>
 80016ca:	e555      	b.n	8001178 <HAL_PCD_IRQHandler+0x18>
 80016cc:	2328      	movs	r3, #40	; 0x28
 80016ce:	fb03 4306 	mla	r3, r3, r6, r4
{
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80016d2:	f018 0b40 	ands.w	fp, r8, #64	; 0x40
 80016d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80016d8:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80016dc:	fa0f fe81 	sxth.w	lr, r1
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80016e0:	f408 4580 	and.w	r5, r8, #16384	; 0x4000
 80016e4:	f000 80a2 	beq.w	800182c <HAL_PCD_IRQHandler+0x6cc>
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80016e8:	f200 4c02 	addw	ip, r0, #1026	; 0x402
 80016ec:	fa1c f282 	uxtah	r2, ip, r2
 80016f0:	f04f 0828 	mov.w	r8, #40	; 0x28
 80016f4:	f832 203e 	ldrh.w	r2, [r2, lr, lsl #3]

    if (ep->xfer_len > TxByteNbre)
 80016f8:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80016fc:	429a      	cmp	r2, r3
    {
      ep->xfer_len -= TxByteNbre;
 80016fe:	fb08 4806 	mla	r8, r8, r6, r4
 8001702:	bf34      	ite	cc
 8001704:	1a9b      	subcc	r3, r3, r2
    }
    else
    {
      ep->xfer_len = 0U;
 8001706:	2300      	movcs	r3, #0
 8001708:	f8c8 3040 	str.w	r3, [r8, #64]	; 0x40
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800170c:	b2ad      	uxth	r5, r5
 800170e:	b9bb      	cbnz	r3, 8001740 <HAL_PCD_IRQHandler+0x5e0>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001710:	4620      	mov	r0, r4
 8001712:	f7ff fd0a 	bl	800112a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001716:	2d00      	cmp	r5, #0
 8001718:	f000 80a2 	beq.w	8001860 <HAL_PCD_IRQHandler+0x700>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800171c:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8001720:	6822      	ldr	r2, [r4, #0]
 8001722:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8001726:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800172a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800172e:	041b      	lsls	r3, r3, #16
 8001730:	0c1b      	lsrs	r3, r3, #16
 8001732:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001736:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800173a:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 800173e:	e08f      	b.n	8001860 <HAL_PCD_IRQHandler+0x700>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001740:	b16d      	cbz	r5, 800175e <HAL_PCD_IRQHandler+0x5fe>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001742:	f830 302e 	ldrh.w	r3, [r0, lr, lsl #2]
 8001746:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800174a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800174e:	041b      	lsls	r3, r3, #16
 8001750:	0c1b      	lsrs	r3, r3, #16
 8001752:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001756:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800175a:	f820 302e 	strh.w	r3, [r0, lr, lsl #2]
      if (ep->xfer_fill_db == 1U)
 800175e:	2528      	movs	r5, #40	; 0x28
 8001760:	fb05 4506 	mla	r5, r5, r6, r4
 8001764:	f895 304c 	ldrb.w	r3, [r5, #76]	; 0x4c
 8001768:	2b01      	cmp	r3, #1
 800176a:	d179      	bne.n	8001860 <HAL_PCD_IRQHandler+0x700>
        ep->xfer_count += TxByteNbre;
 800176c:	6c6b      	ldr	r3, [r5, #68]	; 0x44
        ep->xfer_buff += TxByteNbre;
 800176e:	6be9      	ldr	r1, [r5, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 8001770:	f8d5 e048 	ldr.w	lr, [r5, #72]	; 0x48
        ep->xfer_count += TxByteNbre;
 8001774:	4413      	add	r3, r2
 8001776:	646b      	str	r3, [r5, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 8001778:	6bab      	ldr	r3, [r5, #56]	; 0x38
        ep->xfer_buff += TxByteNbre;
 800177a:	4411      	add	r1, r2
        if (ep->xfer_len_db >= ep->maxpacket)
 800177c:	459e      	cmp	lr, r3
        ep->xfer_buff += TxByteNbre;
 800177e:	63e9      	str	r1, [r5, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 8001780:	d327      	bcc.n	80017d2 <HAL_PCD_IRQHandler+0x672>
          ep->xfer_len_db -= len;
 8001782:	ebae 0203 	sub.w	r2, lr, r3
 8001786:	64aa      	str	r2, [r5, #72]	; 0x48
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001788:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 800178c:	b29d      	uxth	r5, r3
 800178e:	2a00      	cmp	r2, #0
 8001790:	d13f      	bne.n	8001812 <HAL_PCD_IRQHandler+0x6b2>
 8001792:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8001796:	f897 e028 	ldrb.w	lr, [r7, #40]	; 0x28
 800179a:	fa1c fc82 	uxtah	ip, ip, r2
 800179e:	eb0c 0cce 	add.w	ip, ip, lr, lsl #3
 80017a2:	bb1b      	cbnz	r3, 80017ec <HAL_PCD_IRQHandler+0x68c>
 80017a4:	f8bc 3000 	ldrh.w	r3, [ip]
 80017a8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80017ac:	041b      	lsls	r3, r3, #16
 80017ae:	0c1b      	lsrs	r3, r3, #16
 80017b0:	f8ac 3000 	strh.w	r3, [ip]
 80017b4:	f8bc 3000 	ldrh.w	r3, [ip]
 80017b8:	b29b      	uxth	r3, r3
 80017ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017be:	f8ac 3000 	strh.w	r3, [ip]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80017c2:	2328      	movs	r3, #40	; 0x28
 80017c4:	fb03 4606 	mla	r6, r3, r6, r4
 80017c8:	462b      	mov	r3, r5
 80017ca:	8e32      	ldrh	r2, [r6, #48]	; 0x30

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80017cc:	f001 f8b9 	bl	8002942 <USB_WritePMA>
 80017d0:	e046      	b.n	8001860 <HAL_PCD_IRQHandler+0x700>
        else if (ep->xfer_len_db == 0U)
 80017d2:	f1be 0f00 	cmp.w	lr, #0
 80017d6:	d103      	bne.n	80017e0 <HAL_PCD_IRQHandler+0x680>
          ep->xfer_fill_db = 0U;
 80017d8:	f885 e04c 	strb.w	lr, [r5, #76]	; 0x4c
    if (ep->xfer_len > TxByteNbre)
 80017dc:	4613      	mov	r3, r2
 80017de:	e7d3      	b.n	8001788 <HAL_PCD_IRQHandler+0x628>
          ep->xfer_fill_db = 0U;
 80017e0:	2300      	movs	r3, #0
 80017e2:	f885 304c 	strb.w	r3, [r5, #76]	; 0x4c
          ep->xfer_len_db = 0U;
 80017e6:	64ab      	str	r3, [r5, #72]	; 0x48
 80017e8:	4673      	mov	r3, lr
 80017ea:	e7cd      	b.n	8001788 <HAL_PCD_IRQHandler+0x628>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80017ec:	2b3e      	cmp	r3, #62	; 0x3e
 80017ee:	d808      	bhi.n	8001802 <HAL_PCD_IRQHandler+0x6a2>
 80017f0:	085a      	lsrs	r2, r3, #1
 80017f2:	07db      	lsls	r3, r3, #31
 80017f4:	bf48      	it	mi
 80017f6:	3201      	addmi	r2, #1
 80017f8:	0292      	lsls	r2, r2, #10
 80017fa:	b292      	uxth	r2, r2
 80017fc:	f8ac 2000 	strh.w	r2, [ip]
 8001800:	e7df      	b.n	80017c2 <HAL_PCD_IRQHandler+0x662>
 8001802:	095a      	lsrs	r2, r3, #5
 8001804:	06db      	lsls	r3, r3, #27
 8001806:	bf08      	it	eq
 8001808:	f102 32ff 	addeq.w	r2, r2, #4294967295
 800180c:	ea49 2282 	orr.w	r2, r9, r2, lsl #10
 8001810:	e7f3      	b.n	80017fa <HAL_PCD_IRQHandler+0x69a>
 8001812:	2a01      	cmp	r2, #1
 8001814:	d1d5      	bne.n	80017c2 <HAL_PCD_IRQHandler+0x662>
 8001816:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800181a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800181e:	fa1c fc83 	uxtah	ip, ip, r3
 8001822:	eb0c 0cc2 	add.w	ip, ip, r2, lsl #3
 8001826:	f8ac 5000 	strh.w	r5, [ip]
 800182a:	e7ca      	b.n	80017c2 <HAL_PCD_IRQHandler+0x662>
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800182c:	f200 4c06 	addw	ip, r0, #1030	; 0x406
 8001830:	fa1c f282 	uxtah	r2, ip, r2
 8001834:	f04f 0828 	mov.w	r8, #40	; 0x28
 8001838:	f832 203e 	ldrh.w	r2, [r2, lr, lsl #3]
    if (ep->xfer_len >= TxByteNbre)
 800183c:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001840:	429a      	cmp	r2, r3
      ep->xfer_len -= TxByteNbre;
 8001842:	fb08 4806 	mla	r8, r8, r6, r4
 8001846:	bf94      	ite	ls
 8001848:	1a9b      	subls	r3, r3, r2
      ep->xfer_len = 0U;
 800184a:	465b      	movhi	r3, fp
 800184c:	f8c8 3040 	str.w	r3, [r8, #64]	; 0x40
    if (ep->xfer_len == 0U)
 8001850:	b2ad      	uxth	r5, r5
 8001852:	b9c3      	cbnz	r3, 8001886 <HAL_PCD_IRQHandler+0x726>
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001854:	4620      	mov	r0, r4
 8001856:	f7ff fc68 	bl	800112a <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800185a:	2d00      	cmp	r5, #0
 800185c:	f43f af5e 	beq.w	800171c <HAL_PCD_IRQHandler+0x5bc>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8001860:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8001864:	6822      	ldr	r2, [r4, #0]
 8001866:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800186a:	b29b      	uxth	r3, r3
 800186c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001870:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001874:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8001878:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800187c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001880:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 8001884:	e478      	b.n	8001178 <HAL_PCD_IRQHandler+0x18>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8001886:	b96d      	cbnz	r5, 80018a4 <HAL_PCD_IRQHandler+0x744>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001888:	f830 302e 	ldrh.w	r3, [r0, lr, lsl #2]
 800188c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001890:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001894:	041b      	lsls	r3, r3, #16
 8001896:	0c1b      	lsrs	r3, r3, #16
 8001898:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800189c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018a0:	f820 302e 	strh.w	r3, [r0, lr, lsl #2]
      if (ep->xfer_fill_db == 1U)
 80018a4:	2328      	movs	r3, #40	; 0x28
 80018a6:	fb03 4306 	mla	r3, r3, r6, r4
 80018aa:	f893 104c 	ldrb.w	r1, [r3, #76]	; 0x4c
 80018ae:	2901      	cmp	r1, #1
 80018b0:	d1d6      	bne.n	8001860 <HAL_PCD_IRQHandler+0x700>
        ep->xfer_count += TxByteNbre;
 80018b2:	6c5d      	ldr	r5, [r3, #68]	; 0x44
        ep->xfer_buff += TxByteNbre;
 80018b4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 80018b6:	f8d3 e048 	ldr.w	lr, [r3, #72]	; 0x48
        ep->xfer_count += TxByteNbre;
 80018ba:	4415      	add	r5, r2
 80018bc:	645d      	str	r5, [r3, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 80018be:	6b9d      	ldr	r5, [r3, #56]	; 0x38
        ep->xfer_buff += TxByteNbre;
 80018c0:	4411      	add	r1, r2
        if (ep->xfer_len_db >= ep->maxpacket)
 80018c2:	45ae      	cmp	lr, r5
        ep->xfer_buff += TxByteNbre;
 80018c4:	63d9      	str	r1, [r3, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 80018c6:	d324      	bcc.n	8001912 <HAL_PCD_IRQHandler+0x7b2>
          ep->xfer_len_db -= len;
 80018c8:	ebae 0205 	sub.w	r2, lr, r5
 80018cc:	649a      	str	r2, [r3, #72]	; 0x48
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80018ce:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 80018d2:	b2ab      	uxth	r3, r5
 80018d4:	2a00      	cmp	r2, #0
 80018d6:	d13a      	bne.n	800194e <HAL_PCD_IRQHandler+0x7ee>
 80018d8:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80018dc:	f897 e028 	ldrb.w	lr, [r7, #40]	; 0x28
 80018e0:	fa1c fc82 	uxtah	ip, ip, r2
 80018e4:	eb0c 0cce 	add.w	ip, ip, lr, lsl #3
 80018e8:	bb05      	cbnz	r5, 800192c <HAL_PCD_IRQHandler+0x7cc>
 80018ea:	f8bc 2000 	ldrh.w	r2, [ip]
 80018ee:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80018f2:	0412      	lsls	r2, r2, #16
 80018f4:	0c12      	lsrs	r2, r2, #16
 80018f6:	f8ac 2000 	strh.w	r2, [ip]
 80018fa:	f8bc 2000 	ldrh.w	r2, [ip]
 80018fe:	b292      	uxth	r2, r2
 8001900:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001904:	f8ac 2000 	strh.w	r2, [ip]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8001908:	2228      	movs	r2, #40	; 0x28
 800190a:	fb02 4606 	mla	r6, r2, r6, r4
 800190e:	8e72      	ldrh	r2, [r6, #50]	; 0x32
 8001910:	e75c      	b.n	80017cc <HAL_PCD_IRQHandler+0x66c>
        else if (ep->xfer_len_db == 0U)
 8001912:	f1be 0f00 	cmp.w	lr, #0
 8001916:	d103      	bne.n	8001920 <HAL_PCD_IRQHandler+0x7c0>
          ep->xfer_fill_db = 0U;
 8001918:	f883 e04c 	strb.w	lr, [r3, #76]	; 0x4c
    if (ep->xfer_len >= TxByteNbre)
 800191c:	4615      	mov	r5, r2
 800191e:	e7d6      	b.n	80018ce <HAL_PCD_IRQHandler+0x76e>
          ep->xfer_len_db = 0U;
 8001920:	2200      	movs	r2, #0
 8001922:	649a      	str	r2, [r3, #72]	; 0x48
          ep->xfer_fill_db = 0;
 8001924:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8001928:	4675      	mov	r5, lr
 800192a:	e7d0      	b.n	80018ce <HAL_PCD_IRQHandler+0x76e>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800192c:	2d3e      	cmp	r5, #62	; 0x3e
 800192e:	d806      	bhi.n	800193e <HAL_PCD_IRQHandler+0x7de>
 8001930:	086a      	lsrs	r2, r5, #1
 8001932:	07ed      	lsls	r5, r5, #31
 8001934:	bf48      	it	mi
 8001936:	3201      	addmi	r2, #1
 8001938:	0292      	lsls	r2, r2, #10
 800193a:	b292      	uxth	r2, r2
 800193c:	e7e2      	b.n	8001904 <HAL_PCD_IRQHandler+0x7a4>
 800193e:	096a      	lsrs	r2, r5, #5
 8001940:	06ed      	lsls	r5, r5, #27
 8001942:	bf08      	it	eq
 8001944:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8001948:	ea49 2282 	orr.w	r2, r9, r2, lsl #10
 800194c:	e7f5      	b.n	800193a <HAL_PCD_IRQHandler+0x7da>
 800194e:	2a01      	cmp	r2, #1
 8001950:	d1da      	bne.n	8001908 <HAL_PCD_IRQHandler+0x7a8>
 8001952:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8001956:	f897 5028 	ldrb.w	r5, [r7, #40]	; 0x28
 800195a:	fa1c fc82 	uxtah	ip, ip, r2
 800195e:	eb0c 0cc5 	add.w	ip, ip, r5, lsl #3
 8001962:	f8ac 3000 	strh.w	r3, [ip]
 8001966:	e7cf      	b.n	8001908 <HAL_PCD_IRQHandler+0x7a8>
 8001968:	ffff8f0f 	.word	0xffff8f0f
 800196c:	ffff8000 	.word	0xffff8000

08001970 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001970:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001974:	4605      	mov	r5, r0
 8001976:	2800      	cmp	r0, #0
 8001978:	d038      	beq.n	80019ec <HAL_RCC_OscConfig+0x7c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800197a:	6803      	ldr	r3, [r0, #0]
 800197c:	07df      	lsls	r7, r3, #31
 800197e:	d411      	bmi.n	80019a4 <HAL_RCC_OscConfig+0x34>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001980:	682b      	ldr	r3, [r5, #0]
 8001982:	079e      	lsls	r6, r3, #30
 8001984:	f100 808b 	bmi.w	8001a9e <HAL_RCC_OscConfig+0x12e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001988:	682b      	ldr	r3, [r5, #0]
 800198a:	071c      	lsls	r4, r3, #28
 800198c:	f100 80fe 	bmi.w	8001b8c <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001990:	682b      	ldr	r3, [r5, #0]
 8001992:	0758      	lsls	r0, r3, #29
 8001994:	f100 8147 	bmi.w	8001c26 <HAL_RCC_OscConfig+0x2b6>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001998:	69a8      	ldr	r0, [r5, #24]
 800199a:	2800      	cmp	r0, #0
 800199c:	f040 81dd 	bne.w	8001d5a <HAL_RCC_OscConfig+0x3ea>
        }
      }
    }
  }

  return HAL_OK;
 80019a0:	2000      	movs	r0, #0
 80019a2:	e047      	b.n	8001a34 <HAL_RCC_OscConfig+0xc4>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80019a4:	4cbd      	ldr	r4, [pc, #756]	; (8001c9c <HAL_RCC_OscConfig+0x32c>)
 80019a6:	6863      	ldr	r3, [r4, #4]
 80019a8:	f003 030c 	and.w	r3, r3, #12
 80019ac:	2b04      	cmp	r3, #4
 80019ae:	d00a      	beq.n	80019c6 <HAL_RCC_OscConfig+0x56>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019b0:	6863      	ldr	r3, [r4, #4]
 80019b2:	f003 030c 	and.w	r3, r3, #12
 80019b6:	2b08      	cmp	r3, #8
 80019b8:	d11a      	bne.n	80019f0 <HAL_RCC_OscConfig+0x80>
 80019ba:	6863      	ldr	r3, [r4, #4]
 80019bc:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80019c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019c4:	d114      	bne.n	80019f0 <HAL_RCC_OscConfig+0x80>
 80019c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019ca:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019ce:	6821      	ldr	r1, [r4, #0]
 80019d0:	fa93 f3a3 	rbit	r3, r3
 80019d4:	fab3 f383 	clz	r3, r3
 80019d8:	f003 031f 	and.w	r3, r3, #31
 80019dc:	2201      	movs	r2, #1
 80019de:	fa02 f303 	lsl.w	r3, r2, r3
 80019e2:	420b      	tst	r3, r1
 80019e4:	d0cc      	beq.n	8001980 <HAL_RCC_OscConfig+0x10>
 80019e6:	686b      	ldr	r3, [r5, #4]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d1c9      	bne.n	8001980 <HAL_RCC_OscConfig+0x10>
          return HAL_ERROR;
 80019ec:	2001      	movs	r0, #1
 80019ee:	e021      	b.n	8001a34 <HAL_RCC_OscConfig+0xc4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019f0:	686b      	ldr	r3, [r5, #4]
 80019f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019f6:	d120      	bne.n	8001a3a <HAL_RCC_OscConfig+0xca>
 80019f8:	6823      	ldr	r3, [r4, #0]
 80019fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019fe:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001a00:	f7fe ff00 	bl	8000804 <HAL_GetTick>
 8001a04:	f44f 3700 	mov.w	r7, #131072	; 0x20000
 8001a08:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a0a:	f04f 0801 	mov.w	r8, #1
 8001a0e:	fa97 f3a7 	rbit	r3, r7
 8001a12:	6822      	ldr	r2, [r4, #0]
 8001a14:	fa97 f3a7 	rbit	r3, r7
 8001a18:	fab3 f383 	clz	r3, r3
 8001a1c:	f003 031f 	and.w	r3, r3, #31
 8001a20:	fa08 f303 	lsl.w	r3, r8, r3
 8001a24:	4213      	tst	r3, r2
 8001a26:	d1ab      	bne.n	8001980 <HAL_RCC_OscConfig+0x10>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a28:	f7fe feec 	bl	8000804 <HAL_GetTick>
 8001a2c:	1b83      	subs	r3, r0, r6
 8001a2e:	2b64      	cmp	r3, #100	; 0x64
 8001a30:	d9ed      	bls.n	8001a0e <HAL_RCC_OscConfig+0x9e>
            return HAL_TIMEOUT;
 8001a32:	2003      	movs	r0, #3
}
 8001a34:	b002      	add	sp, #8
 8001a36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a3a:	bb0b      	cbnz	r3, 8001a80 <HAL_RCC_OscConfig+0x110>
 8001a3c:	6823      	ldr	r3, [r4, #0]
 8001a3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a42:	6023      	str	r3, [r4, #0]
 8001a44:	6823      	ldr	r3, [r4, #0]
 8001a46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a4a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001a4c:	f7fe feda 	bl	8000804 <HAL_GetTick>
 8001a50:	f44f 3700 	mov.w	r7, #131072	; 0x20000
 8001a54:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a56:	f04f 0801 	mov.w	r8, #1
 8001a5a:	fa97 f3a7 	rbit	r3, r7
 8001a5e:	6822      	ldr	r2, [r4, #0]
 8001a60:	fa97 f3a7 	rbit	r3, r7
 8001a64:	fab3 f383 	clz	r3, r3
 8001a68:	f003 031f 	and.w	r3, r3, #31
 8001a6c:	fa08 f303 	lsl.w	r3, r8, r3
 8001a70:	4213      	tst	r3, r2
 8001a72:	d085      	beq.n	8001980 <HAL_RCC_OscConfig+0x10>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a74:	f7fe fec6 	bl	8000804 <HAL_GetTick>
 8001a78:	1b83      	subs	r3, r0, r6
 8001a7a:	2b64      	cmp	r3, #100	; 0x64
 8001a7c:	d9ed      	bls.n	8001a5a <HAL_RCC_OscConfig+0xea>
 8001a7e:	e7d8      	b.n	8001a32 <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a84:	6823      	ldr	r3, [r4, #0]
 8001a86:	d103      	bne.n	8001a90 <HAL_RCC_OscConfig+0x120>
 8001a88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a8c:	6023      	str	r3, [r4, #0]
 8001a8e:	e7b3      	b.n	80019f8 <HAL_RCC_OscConfig+0x88>
 8001a90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a94:	6023      	str	r3, [r4, #0]
 8001a96:	6823      	ldr	r3, [r4, #0]
 8001a98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a9c:	e7af      	b.n	80019fe <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001a9e:	4c7f      	ldr	r4, [pc, #508]	; (8001c9c <HAL_RCC_OscConfig+0x32c>)
 8001aa0:	6863      	ldr	r3, [r4, #4]
 8001aa2:	f013 0f0c 	tst.w	r3, #12
 8001aa6:	d00a      	beq.n	8001abe <HAL_RCC_OscConfig+0x14e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001aa8:	6863      	ldr	r3, [r4, #4]
 8001aaa:	f003 030c 	and.w	r3, r3, #12
 8001aae:	2b08      	cmp	r3, #8
 8001ab0:	d124      	bne.n	8001afc <HAL_RCC_OscConfig+0x18c>
 8001ab2:	6863      	ldr	r3, [r4, #4]
 8001ab4:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001ab8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001abc:	d11e      	bne.n	8001afc <HAL_RCC_OscConfig+0x18c>
 8001abe:	2302      	movs	r3, #2
 8001ac0:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ac4:	6821      	ldr	r1, [r4, #0]
 8001ac6:	fa93 f3a3 	rbit	r3, r3
 8001aca:	fab3 f383 	clz	r3, r3
 8001ace:	f003 031f 	and.w	r3, r3, #31
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad8:	420b      	tst	r3, r1
 8001ada:	d002      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x172>
 8001adc:	68eb      	ldr	r3, [r5, #12]
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d184      	bne.n	80019ec <HAL_RCC_OscConfig+0x7c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ae2:	6821      	ldr	r1, [r4, #0]
 8001ae4:	23f8      	movs	r3, #248	; 0xf8
 8001ae6:	fa93 f3a3 	rbit	r3, r3
 8001aea:	fab3 f283 	clz	r2, r3
 8001aee:	692b      	ldr	r3, [r5, #16]
 8001af0:	4093      	lsls	r3, r2
 8001af2:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 8001af6:	4313      	orrs	r3, r2
 8001af8:	6023      	str	r3, [r4, #0]
 8001afa:	e745      	b.n	8001988 <HAL_RCC_OscConfig+0x18>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001afc:	68ea      	ldr	r2, [r5, #12]
 8001afe:	2601      	movs	r6, #1
 8001b00:	b30a      	cbz	r2, 8001b46 <HAL_RCC_OscConfig+0x1d6>
 8001b02:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_ENABLE();
 8001b06:	fab3 f383 	clz	r3, r3
 8001b0a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b0e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	f04f 0802 	mov.w	r8, #2
 8001b18:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8001b1a:	f7fe fe73 	bl	8000804 <HAL_GetTick>
 8001b1e:	4607      	mov	r7, r0
 8001b20:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b24:	6822      	ldr	r2, [r4, #0]
 8001b26:	fa98 f3a8 	rbit	r3, r8
 8001b2a:	fab3 f383 	clz	r3, r3
 8001b2e:	f003 031f 	and.w	r3, r3, #31
 8001b32:	fa06 f303 	lsl.w	r3, r6, r3
 8001b36:	4213      	tst	r3, r2
 8001b38:	d1d3      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x172>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b3a:	f7fe fe63 	bl	8000804 <HAL_GetTick>
 8001b3e:	1bc3      	subs	r3, r0, r7
 8001b40:	2b02      	cmp	r3, #2
 8001b42:	d9ed      	bls.n	8001b20 <HAL_RCC_OscConfig+0x1b0>
 8001b44:	e775      	b.n	8001a32 <HAL_RCC_OscConfig+0xc2>
 8001b46:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 8001b4a:	fab3 f383 	clz	r3, r3
 8001b4e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b52:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	f04f 0802 	mov.w	r8, #2
 8001b5c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001b5e:	f7fe fe51 	bl	8000804 <HAL_GetTick>
 8001b62:	4607      	mov	r7, r0
 8001b64:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b68:	6822      	ldr	r2, [r4, #0]
 8001b6a:	fa98 f3a8 	rbit	r3, r8
 8001b6e:	fab3 f383 	clz	r3, r3
 8001b72:	f003 031f 	and.w	r3, r3, #31
 8001b76:	fa06 f303 	lsl.w	r3, r6, r3
 8001b7a:	4213      	tst	r3, r2
 8001b7c:	f43f af04 	beq.w	8001988 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b80:	f7fe fe40 	bl	8000804 <HAL_GetTick>
 8001b84:	1bc3      	subs	r3, r0, r7
 8001b86:	2b02      	cmp	r3, #2
 8001b88:	d9ec      	bls.n	8001b64 <HAL_RCC_OscConfig+0x1f4>
 8001b8a:	e752      	b.n	8001a32 <HAL_RCC_OscConfig+0xc2>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b8c:	696a      	ldr	r2, [r5, #20]
 8001b8e:	4e43      	ldr	r6, [pc, #268]	; (8001c9c <HAL_RCC_OscConfig+0x32c>)
 8001b90:	4943      	ldr	r1, [pc, #268]	; (8001ca0 <HAL_RCC_OscConfig+0x330>)
 8001b92:	2401      	movs	r4, #1
 8001b94:	b31a      	cbz	r2, 8001bde <HAL_RCC_OscConfig+0x26e>
 8001b96:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_ENABLE();
 8001b9a:	fab3 f383 	clz	r3, r3
 8001b9e:	440b      	add	r3, r1
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	2702      	movs	r7, #2
 8001ba4:	601c      	str	r4, [r3, #0]
      tickstart = HAL_GetTick();
 8001ba6:	f7fe fe2d 	bl	8000804 <HAL_GetTick>
 8001baa:	4680      	mov	r8, r0
 8001bac:	fa97 f3a7 	rbit	r3, r7
 8001bb0:	fa97 f3a7 	rbit	r3, r7
 8001bb4:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bb8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8001bba:	fa97 f3a7 	rbit	r3, r7
 8001bbe:	fab3 f383 	clz	r3, r3
 8001bc2:	f003 031f 	and.w	r3, r3, #31
 8001bc6:	fa04 f303 	lsl.w	r3, r4, r3
 8001bca:	4213      	tst	r3, r2
 8001bcc:	f47f aee0 	bne.w	8001990 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bd0:	f7fe fe18 	bl	8000804 <HAL_GetTick>
 8001bd4:	eba0 0308 	sub.w	r3, r0, r8
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	d9e7      	bls.n	8001bac <HAL_RCC_OscConfig+0x23c>
 8001bdc:	e729      	b.n	8001a32 <HAL_RCC_OscConfig+0xc2>
 8001bde:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_DISABLE();
 8001be2:	fab3 f383 	clz	r3, r3
 8001be6:	440b      	add	r3, r1
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	2702      	movs	r7, #2
 8001bec:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001bee:	f7fe fe09 	bl	8000804 <HAL_GetTick>
 8001bf2:	4680      	mov	r8, r0
 8001bf4:	fa97 f3a7 	rbit	r3, r7
 8001bf8:	fa97 f3a7 	rbit	r3, r7
 8001bfc:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c00:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8001c02:	fa97 f3a7 	rbit	r3, r7
 8001c06:	fab3 f383 	clz	r3, r3
 8001c0a:	f003 031f 	and.w	r3, r3, #31
 8001c0e:	fa04 f303 	lsl.w	r3, r4, r3
 8001c12:	4213      	tst	r3, r2
 8001c14:	f43f aebc 	beq.w	8001990 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c18:	f7fe fdf4 	bl	8000804 <HAL_GetTick>
 8001c1c:	eba0 0308 	sub.w	r3, r0, r8
 8001c20:	2b02      	cmp	r3, #2
 8001c22:	d9e7      	bls.n	8001bf4 <HAL_RCC_OscConfig+0x284>
 8001c24:	e705      	b.n	8001a32 <HAL_RCC_OscConfig+0xc2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c26:	4c1d      	ldr	r4, [pc, #116]	; (8001c9c <HAL_RCC_OscConfig+0x32c>)
 8001c28:	69e3      	ldr	r3, [r4, #28]
 8001c2a:	00d9      	lsls	r1, r3, #3
 8001c2c:	d434      	bmi.n	8001c98 <HAL_RCC_OscConfig+0x328>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c2e:	69e3      	ldr	r3, [r4, #28]
 8001c30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c34:	61e3      	str	r3, [r4, #28]
 8001c36:	69e3      	ldr	r3, [r4, #28]
 8001c38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c3c:	9301      	str	r3, [sp, #4]
 8001c3e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001c40:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c42:	4f18      	ldr	r7, [pc, #96]	; (8001ca4 <HAL_RCC_OscConfig+0x334>)
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	05da      	lsls	r2, r3, #23
 8001c48:	d52e      	bpl.n	8001ca8 <HAL_RCC_OscConfig+0x338>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c4a:	68ab      	ldr	r3, [r5, #8]
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d13c      	bne.n	8001cca <HAL_RCC_OscConfig+0x35a>
 8001c50:	6a23      	ldr	r3, [r4, #32]
 8001c52:	f043 0301 	orr.w	r3, r3, #1
 8001c56:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001c58:	f7fe fdd4 	bl	8000804 <HAL_GetTick>
 8001c5c:	2702      	movs	r7, #2
 8001c5e:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c60:	46ba      	mov	sl, r7
 8001c62:	f04f 0901 	mov.w	r9, #1
 8001c66:	fa97 f3a7 	rbit	r3, r7
 8001c6a:	fa97 f3a7 	rbit	r3, r7
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d06b      	beq.n	8001d4a <HAL_RCC_OscConfig+0x3da>
 8001c72:	6a22      	ldr	r2, [r4, #32]
 8001c74:	fa9a f3aa 	rbit	r3, sl
 8001c78:	fab3 f383 	clz	r3, r3
 8001c7c:	f003 031f 	and.w	r3, r3, #31
 8001c80:	fa09 f303 	lsl.w	r3, r9, r3
 8001c84:	4213      	tst	r3, r2
 8001c86:	d057      	beq.n	8001d38 <HAL_RCC_OscConfig+0x3c8>
    if(pwrclkchanged == SET)
 8001c88:	2e00      	cmp	r6, #0
 8001c8a:	f43f ae85 	beq.w	8001998 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c8e:	69e3      	ldr	r3, [r4, #28]
 8001c90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c94:	61e3      	str	r3, [r4, #28]
 8001c96:	e67f      	b.n	8001998 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8001c98:	2600      	movs	r6, #0
 8001c9a:	e7d2      	b.n	8001c42 <HAL_RCC_OscConfig+0x2d2>
 8001c9c:	40021000 	.word	0x40021000
 8001ca0:	10908120 	.word	0x10908120
 8001ca4:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cae:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8001cb0:	f7fe fda8 	bl	8000804 <HAL_GetTick>
 8001cb4:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	05db      	lsls	r3, r3, #23
 8001cba:	d4c6      	bmi.n	8001c4a <HAL_RCC_OscConfig+0x2da>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cbc:	f7fe fda2 	bl	8000804 <HAL_GetTick>
 8001cc0:	eba0 0008 	sub.w	r0, r0, r8
 8001cc4:	2864      	cmp	r0, #100	; 0x64
 8001cc6:	d9f6      	bls.n	8001cb6 <HAL_RCC_OscConfig+0x346>
 8001cc8:	e6b3      	b.n	8001a32 <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cca:	bb3b      	cbnz	r3, 8001d1c <HAL_RCC_OscConfig+0x3ac>
 8001ccc:	6a23      	ldr	r3, [r4, #32]
 8001cce:	f023 0301 	bic.w	r3, r3, #1
 8001cd2:	6223      	str	r3, [r4, #32]
 8001cd4:	6a23      	ldr	r3, [r4, #32]
 8001cd6:	f023 0304 	bic.w	r3, r3, #4
 8001cda:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001cdc:	f7fe fd92 	bl	8000804 <HAL_GetTick>
 8001ce0:	2702      	movs	r7, #2
 8001ce2:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ce4:	46ba      	mov	sl, r7
 8001ce6:	f04f 0901 	mov.w	r9, #1
 8001cea:	fa97 f3a7 	rbit	r3, r7
 8001cee:	fa97 f3a7 	rbit	r3, r7
 8001cf2:	b373      	cbz	r3, 8001d52 <HAL_RCC_OscConfig+0x3e2>
 8001cf4:	6a22      	ldr	r2, [r4, #32]
 8001cf6:	fa9a f3aa 	rbit	r3, sl
 8001cfa:	fab3 f383 	clz	r3, r3
 8001cfe:	f003 031f 	and.w	r3, r3, #31
 8001d02:	fa09 f303 	lsl.w	r3, r9, r3
 8001d06:	4213      	tst	r3, r2
 8001d08:	d0be      	beq.n	8001c88 <HAL_RCC_OscConfig+0x318>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d0a:	f7fe fd7b 	bl	8000804 <HAL_GetTick>
 8001d0e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001d12:	eba0 0008 	sub.w	r0, r0, r8
 8001d16:	4298      	cmp	r0, r3
 8001d18:	d9e7      	bls.n	8001cea <HAL_RCC_OscConfig+0x37a>
 8001d1a:	e68a      	b.n	8001a32 <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d1c:	2b05      	cmp	r3, #5
 8001d1e:	6a23      	ldr	r3, [r4, #32]
 8001d20:	d103      	bne.n	8001d2a <HAL_RCC_OscConfig+0x3ba>
 8001d22:	f043 0304 	orr.w	r3, r3, #4
 8001d26:	6223      	str	r3, [r4, #32]
 8001d28:	e792      	b.n	8001c50 <HAL_RCC_OscConfig+0x2e0>
 8001d2a:	f023 0301 	bic.w	r3, r3, #1
 8001d2e:	6223      	str	r3, [r4, #32]
 8001d30:	6a23      	ldr	r3, [r4, #32]
 8001d32:	f023 0304 	bic.w	r3, r3, #4
 8001d36:	e78e      	b.n	8001c56 <HAL_RCC_OscConfig+0x2e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d38:	f7fe fd64 	bl	8000804 <HAL_GetTick>
 8001d3c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001d40:	eba0 0008 	sub.w	r0, r0, r8
 8001d44:	4298      	cmp	r0, r3
 8001d46:	d98e      	bls.n	8001c66 <HAL_RCC_OscConfig+0x2f6>
 8001d48:	e673      	b.n	8001a32 <HAL_RCC_OscConfig+0xc2>
 8001d4a:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d4e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001d50:	e790      	b.n	8001c74 <HAL_RCC_OscConfig+0x304>
 8001d52:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d56:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001d58:	e7cd      	b.n	8001cf6 <HAL_RCC_OscConfig+0x386>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d5a:	4a50      	ldr	r2, [pc, #320]	; (8001e9c <HAL_RCC_OscConfig+0x52c>)
 8001d5c:	6853      	ldr	r3, [r2, #4]
 8001d5e:	f003 030c 	and.w	r3, r3, #12
 8001d62:	2b08      	cmp	r3, #8
 8001d64:	4614      	mov	r4, r2
 8001d66:	f000 8081 	beq.w	8001e6c <HAL_RCC_OscConfig+0x4fc>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d6a:	2802      	cmp	r0, #2
 8001d6c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d70:	d157      	bne.n	8001e22 <HAL_RCC_OscConfig+0x4b2>
 8001d72:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8001d76:	fab3 f383 	clz	r3, r3
 8001d7a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d7e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	2200      	movs	r2, #0
 8001d86:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001d88:	f7fe fd3c 	bl	8000804 <HAL_GetTick>
 8001d8c:	f04f 7800 	mov.w	r8, #33554432	; 0x2000000
 8001d90:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d92:	2601      	movs	r6, #1
 8001d94:	fa98 f3a8 	rbit	r3, r8
 8001d98:	6822      	ldr	r2, [r4, #0]
 8001d9a:	fa98 f3a8 	rbit	r3, r8
 8001d9e:	fab3 f383 	clz	r3, r3
 8001da2:	f003 031f 	and.w	r3, r3, #31
 8001da6:	fa06 f303 	lsl.w	r3, r6, r3
 8001daa:	4213      	tst	r3, r2
 8001dac:	d133      	bne.n	8001e16 <HAL_RCC_OscConfig+0x4a6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dae:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001db0:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8001db2:	f023 030f 	bic.w	r3, r3, #15
 8001db6:	4313      	orrs	r3, r2
 8001db8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001dba:	e9d5 1307 	ldrd	r1, r3, [r5, #28]
 8001dbe:	6862      	ldr	r2, [r4, #4]
 8001dc0:	430b      	orrs	r3, r1
 8001dc2:	f422 1276 	bic.w	r2, r2, #4030464	; 0x3d8000
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	6063      	str	r3, [r4, #4]
 8001dca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001dce:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8001dd2:	fab3 f383 	clz	r3, r3
 8001dd6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001dda:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001dde:	009b      	lsls	r3, r3, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001de0:	2701      	movs	r7, #1
        __HAL_RCC_PLL_ENABLE();
 8001de2:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8001de4:	f7fe fd0e 	bl	8000804 <HAL_GetTick>
 8001de8:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 8001dec:	4605      	mov	r5, r0
 8001dee:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001df2:	6822      	ldr	r2, [r4, #0]
 8001df4:	fa96 f3a6 	rbit	r3, r6
 8001df8:	fab3 f383 	clz	r3, r3
 8001dfc:	f003 031f 	and.w	r3, r3, #31
 8001e00:	fa07 f303 	lsl.w	r3, r7, r3
 8001e04:	4213      	tst	r3, r2
 8001e06:	f47f adcb 	bne.w	80019a0 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e0a:	f7fe fcfb 	bl	8000804 <HAL_GetTick>
 8001e0e:	1b40      	subs	r0, r0, r5
 8001e10:	2802      	cmp	r0, #2
 8001e12:	d9ec      	bls.n	8001dee <HAL_RCC_OscConfig+0x47e>
 8001e14:	e60d      	b.n	8001a32 <HAL_RCC_OscConfig+0xc2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e16:	f7fe fcf5 	bl	8000804 <HAL_GetTick>
 8001e1a:	1bc3      	subs	r3, r0, r7
 8001e1c:	2b02      	cmp	r3, #2
 8001e1e:	d9b9      	bls.n	8001d94 <HAL_RCC_OscConfig+0x424>
 8001e20:	e607      	b.n	8001a32 <HAL_RCC_OscConfig+0xc2>
 8001e22:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8001e26:	fab3 f383 	clz	r3, r3
 8001e2a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e2e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	2200      	movs	r2, #0
 8001e36:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001e38:	f7fe fce4 	bl	8000804 <HAL_GetTick>
 8001e3c:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 8001e40:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e42:	2701      	movs	r7, #1
 8001e44:	fa96 f3a6 	rbit	r3, r6
 8001e48:	6822      	ldr	r2, [r4, #0]
 8001e4a:	fa96 f3a6 	rbit	r3, r6
 8001e4e:	fab3 f383 	clz	r3, r3
 8001e52:	f003 031f 	and.w	r3, r3, #31
 8001e56:	fa07 f303 	lsl.w	r3, r7, r3
 8001e5a:	4213      	tst	r3, r2
 8001e5c:	f43f ada0 	beq.w	80019a0 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e60:	f7fe fcd0 	bl	8000804 <HAL_GetTick>
 8001e64:	1b40      	subs	r0, r0, r5
 8001e66:	2802      	cmp	r0, #2
 8001e68:	d9ec      	bls.n	8001e44 <HAL_RCC_OscConfig+0x4d4>
 8001e6a:	e5e2      	b.n	8001a32 <HAL_RCC_OscConfig+0xc2>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e6c:	2801      	cmp	r0, #1
 8001e6e:	f43f ade1 	beq.w	8001a34 <HAL_RCC_OscConfig+0xc4>
        pll_config = RCC->CFGR;
 8001e72:	6853      	ldr	r3, [r2, #4]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001e74:	69e9      	ldr	r1, [r5, #28]
        pll_config2 = RCC->CFGR2;
 8001e76:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001e78:	f403 30c0 	and.w	r0, r3, #98304	; 0x18000
 8001e7c:	4288      	cmp	r0, r1
 8001e7e:	f47f adb5 	bne.w	80019ec <HAL_RCC_OscConfig+0x7c>
 8001e82:	6a29      	ldr	r1, [r5, #32]
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001e84:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001e88:	428b      	cmp	r3, r1
 8001e8a:	f47f adaf 	bne.w	80019ec <HAL_RCC_OscConfig+0x7c>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8001e8e:	f002 030f 	and.w	r3, r2, #15
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001e92:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8001e94:	4293      	cmp	r3, r2
 8001e96:	f43f ad83 	beq.w	80019a0 <HAL_RCC_OscConfig+0x30>
 8001e9a:	e5a7      	b.n	80019ec <HAL_RCC_OscConfig+0x7c>
 8001e9c:	40021000 	.word	0x40021000

08001ea0 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8001ea0:	4911      	ldr	r1, [pc, #68]	; (8001ee8 <HAL_RCC_GetSysClockFreq+0x48>)
 8001ea2:	684b      	ldr	r3, [r1, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ea4:	f003 020c 	and.w	r2, r3, #12
 8001ea8:	2a08      	cmp	r2, #8
 8001eaa:	d11a      	bne.n	8001ee2 <HAL_RCC_GetSysClockFreq+0x42>
 8001eac:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001eb0:	fa92 f2a2 	rbit	r2, r2
 8001eb4:	200f      	movs	r0, #15
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001eb6:	fab2 f282 	clz	r2, r2
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001eba:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8001ebc:	fa90 f0a0 	rbit	r0, r0
 8001ec0:	fab0 f080 	clz	r0, r0
 8001ec4:	f001 010f 	and.w	r1, r1, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001ec8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001ecc:	40d3      	lsrs	r3, r2
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001ece:	40c1      	lsrs	r1, r0
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001ed0:	4a06      	ldr	r2, [pc, #24]	; (8001eec <HAL_RCC_GetSysClockFreq+0x4c>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001ed2:	4807      	ldr	r0, [pc, #28]	; (8001ef0 <HAL_RCC_GetSysClockFreq+0x50>)
 8001ed4:	5c41      	ldrb	r1, [r0, r1]
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001ed6:	4807      	ldr	r0, [pc, #28]	; (8001ef4 <HAL_RCC_GetSysClockFreq+0x54>)
 8001ed8:	fbb0 f1f1 	udiv	r1, r0, r1
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001edc:	5cd0      	ldrb	r0, [r2, r3]
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001ede:	4348      	muls	r0, r1
 8001ee0:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8001ee2:	4804      	ldr	r0, [pc, #16]	; (8001ef4 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	40021000 	.word	0x40021000
 8001eec:	0800472c 	.word	0x0800472c
 8001ef0:	0800473c 	.word	0x0800473c
 8001ef4:	007a1200 	.word	0x007a1200

08001ef8 <HAL_RCC_ClockConfig>:
{
 8001ef8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001efc:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001efe:	4604      	mov	r4, r0
 8001f00:	b910      	cbnz	r0, 8001f08 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001f02:	2001      	movs	r0, #1
}
 8001f04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f08:	4a4c      	ldr	r2, [pc, #304]	; (800203c <HAL_RCC_ClockConfig+0x144>)
 8001f0a:	6813      	ldr	r3, [r2, #0]
 8001f0c:	f003 0307 	and.w	r3, r3, #7
 8001f10:	428b      	cmp	r3, r1
 8001f12:	d32e      	bcc.n	8001f72 <HAL_RCC_ClockConfig+0x7a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f14:	6822      	ldr	r2, [r4, #0]
 8001f16:	0791      	lsls	r1, r2, #30
 8001f18:	d436      	bmi.n	8001f88 <HAL_RCC_ClockConfig+0x90>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f1a:	07d2      	lsls	r2, r2, #31
 8001f1c:	d43c      	bmi.n	8001f98 <HAL_RCC_ClockConfig+0xa0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f1e:	4a47      	ldr	r2, [pc, #284]	; (800203c <HAL_RCC_ClockConfig+0x144>)
 8001f20:	6813      	ldr	r3, [r2, #0]
 8001f22:	f003 0307 	and.w	r3, r3, #7
 8001f26:	42ab      	cmp	r3, r5
 8001f28:	d874      	bhi.n	8002014 <HAL_RCC_ClockConfig+0x11c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f2a:	6822      	ldr	r2, [r4, #0]
 8001f2c:	4d44      	ldr	r5, [pc, #272]	; (8002040 <HAL_RCC_ClockConfig+0x148>)
 8001f2e:	f012 0f04 	tst.w	r2, #4
 8001f32:	d17b      	bne.n	800202c <HAL_RCC_ClockConfig+0x134>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f34:	0713      	lsls	r3, r2, #28
 8001f36:	d506      	bpl.n	8001f46 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f38:	686b      	ldr	r3, [r5, #4]
 8001f3a:	6922      	ldr	r2, [r4, #16]
 8001f3c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001f40:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001f44:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001f46:	f7ff ffab 	bl	8001ea0 <HAL_RCC_GetSysClockFreq>
 8001f4a:	686b      	ldr	r3, [r5, #4]
 8001f4c:	22f0      	movs	r2, #240	; 0xf0
 8001f4e:	fa92 f2a2 	rbit	r2, r2
 8001f52:	fab2 f282 	clz	r2, r2
 8001f56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f5a:	40d3      	lsrs	r3, r2
 8001f5c:	4a39      	ldr	r2, [pc, #228]	; (8002044 <HAL_RCC_ClockConfig+0x14c>)
 8001f5e:	5cd3      	ldrb	r3, [r2, r3]
 8001f60:	40d8      	lsrs	r0, r3
 8001f62:	4b39      	ldr	r3, [pc, #228]	; (8002048 <HAL_RCC_ClockConfig+0x150>)
 8001f64:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8001f66:	4b39      	ldr	r3, [pc, #228]	; (800204c <HAL_RCC_ClockConfig+0x154>)
 8001f68:	6818      	ldr	r0, [r3, #0]
 8001f6a:	f7fe fc09 	bl	8000780 <HAL_InitTick>
  return HAL_OK;
 8001f6e:	2000      	movs	r0, #0
 8001f70:	e7c8      	b.n	8001f04 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f72:	6813      	ldr	r3, [r2, #0]
 8001f74:	f023 0307 	bic.w	r3, r3, #7
 8001f78:	430b      	orrs	r3, r1
 8001f7a:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f7c:	6813      	ldr	r3, [r2, #0]
 8001f7e:	f003 0307 	and.w	r3, r3, #7
 8001f82:	428b      	cmp	r3, r1
 8001f84:	d1bd      	bne.n	8001f02 <HAL_RCC_ClockConfig+0xa>
 8001f86:	e7c5      	b.n	8001f14 <HAL_RCC_ClockConfig+0x1c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f88:	492d      	ldr	r1, [pc, #180]	; (8002040 <HAL_RCC_ClockConfig+0x148>)
 8001f8a:	68a0      	ldr	r0, [r4, #8]
 8001f8c:	684b      	ldr	r3, [r1, #4]
 8001f8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f92:	4303      	orrs	r3, r0
 8001f94:	604b      	str	r3, [r1, #4]
 8001f96:	e7c0      	b.n	8001f1a <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f98:	6862      	ldr	r2, [r4, #4]
 8001f9a:	4e29      	ldr	r6, [pc, #164]	; (8002040 <HAL_RCC_ClockConfig+0x148>)
 8001f9c:	2a01      	cmp	r2, #1
 8001f9e:	d126      	bne.n	8001fee <HAL_RCC_ClockConfig+0xf6>
 8001fa0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fa4:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fa8:	6831      	ldr	r1, [r6, #0]
 8001faa:	fa93 f3a3 	rbit	r3, r3
 8001fae:	fab3 f383 	clz	r3, r3
 8001fb2:	f003 031f 	and.w	r3, r3, #31
 8001fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fba:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fbc:	d0a1      	beq.n	8001f02 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fbe:	6873      	ldr	r3, [r6, #4]
 8001fc0:	f023 0303 	bic.w	r3, r3, #3
 8001fc4:	431a      	orrs	r2, r3
 8001fc6:	6072      	str	r2, [r6, #4]
    tickstart = HAL_GetTick();
 8001fc8:	f7fe fc1c 	bl	8000804 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fcc:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001fd0:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fd2:	6873      	ldr	r3, [r6, #4]
 8001fd4:	6862      	ldr	r2, [r4, #4]
 8001fd6:	f003 030c 	and.w	r3, r3, #12
 8001fda:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001fde:	d09e      	beq.n	8001f1e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fe0:	f7fe fc10 	bl	8000804 <HAL_GetTick>
 8001fe4:	1bc0      	subs	r0, r0, r7
 8001fe6:	4540      	cmp	r0, r8
 8001fe8:	d9f3      	bls.n	8001fd2 <HAL_RCC_ClockConfig+0xda>
        return HAL_TIMEOUT;
 8001fea:	2003      	movs	r0, #3
 8001fec:	e78a      	b.n	8001f04 <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fee:	2a02      	cmp	r2, #2
 8001ff0:	bf0c      	ite	eq
 8001ff2:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8001ff6:	2302      	movne	r3, #2
 8001ff8:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ffc:	6830      	ldr	r0, [r6, #0]
 8001ffe:	fa93 f3a3 	rbit	r3, r3
 8002002:	fab3 f383 	clz	r3, r3
 8002006:	f003 031f 	and.w	r3, r3, #31
 800200a:	2101      	movs	r1, #1
 800200c:	fa01 f303 	lsl.w	r3, r1, r3
 8002010:	4203      	tst	r3, r0
 8002012:	e7d3      	b.n	8001fbc <HAL_RCC_ClockConfig+0xc4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002014:	6813      	ldr	r3, [r2, #0]
 8002016:	f023 0307 	bic.w	r3, r3, #7
 800201a:	432b      	orrs	r3, r5
 800201c:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800201e:	6813      	ldr	r3, [r2, #0]
 8002020:	f003 0307 	and.w	r3, r3, #7
 8002024:	42ab      	cmp	r3, r5
 8002026:	f47f af6c 	bne.w	8001f02 <HAL_RCC_ClockConfig+0xa>
 800202a:	e77e      	b.n	8001f2a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800202c:	686b      	ldr	r3, [r5, #4]
 800202e:	68e1      	ldr	r1, [r4, #12]
 8002030:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002034:	430b      	orrs	r3, r1
 8002036:	606b      	str	r3, [r5, #4]
 8002038:	e77c      	b.n	8001f34 <HAL_RCC_ClockConfig+0x3c>
 800203a:	bf00      	nop
 800203c:	40022000 	.word	0x40022000
 8002040:	40021000 	.word	0x40021000
 8002044:	08004714 	.word	0x08004714
 8002048:	20000000 	.word	0x20000000
 800204c:	20000008 	.word	0x20000008

08002050 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002050:	4b08      	ldr	r3, [pc, #32]	; (8002074 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002052:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	fa92 f2a2 	rbit	r2, r2
 800205c:	fab2 f282 	clz	r2, r2
 8002060:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002064:	40d3      	lsrs	r3, r2
 8002066:	4a04      	ldr	r2, [pc, #16]	; (8002078 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002068:	5cd3      	ldrb	r3, [r2, r3]
 800206a:	4a04      	ldr	r2, [pc, #16]	; (800207c <HAL_RCC_GetPCLK1Freq+0x2c>)
 800206c:	6810      	ldr	r0, [r2, #0]
}    
 800206e:	40d8      	lsrs	r0, r3
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	40021000 	.word	0x40021000
 8002078:	08004724 	.word	0x08004724
 800207c:	20000000 	.word	0x20000000

08002080 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002080:	4b08      	ldr	r3, [pc, #32]	; (80020a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002082:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	fa92 f2a2 	rbit	r2, r2
 800208c:	fab2 f282 	clz	r2, r2
 8002090:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002094:	40d3      	lsrs	r3, r2
 8002096:	4a04      	ldr	r2, [pc, #16]	; (80020a8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002098:	5cd3      	ldrb	r3, [r2, r3]
 800209a:	4a04      	ldr	r2, [pc, #16]	; (80020ac <HAL_RCC_GetPCLK2Freq+0x2c>)
 800209c:	6810      	ldr	r0, [r2, #0]
} 
 800209e:	40d8      	lsrs	r0, r3
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	40021000 	.word	0x40021000
 80020a8:	08004724 	.word	0x08004724
 80020ac:	20000000 	.word	0x20000000

080020b0 <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80020b0:	6803      	ldr	r3, [r0, #0]
{
 80020b2:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80020b6:	03d9      	lsls	r1, r3, #15
{
 80020b8:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80020ba:	d523      	bpl.n	8002104 <HAL_RCCEx_PeriphCLKConfig+0x54>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020bc:	4d9c      	ldr	r5, [pc, #624]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80020be:	69eb      	ldr	r3, [r5, #28]
 80020c0:	00da      	lsls	r2, r3, #3
 80020c2:	f100 80d9 	bmi.w	8002278 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020c6:	69eb      	ldr	r3, [r5, #28]
 80020c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020cc:	61eb      	str	r3, [r5, #28]
 80020ce:	69eb      	ldr	r3, [r5, #28]
 80020d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020d4:	9301      	str	r3, [sp, #4]
 80020d6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80020d8:	2601      	movs	r6, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020da:	4f96      	ldr	r7, [pc, #600]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	05db      	lsls	r3, r3, #23
 80020e0:	f140 80cc 	bpl.w	800227c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80020e4:	6a2b      	ldr	r3, [r5, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80020e6:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80020ea:	f040 80dc 	bne.w	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80020ee:	6a2b      	ldr	r3, [r5, #32]
 80020f0:	6862      	ldr	r2, [r4, #4]
 80020f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020f6:	4313      	orrs	r3, r2
 80020f8:	622b      	str	r3, [r5, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80020fa:	b11e      	cbz	r6, 8002104 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020fc:	69eb      	ldr	r3, [r5, #28]
 80020fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002102:	61eb      	str	r3, [r5, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002104:	6823      	ldr	r3, [r4, #0]
 8002106:	07da      	lsls	r2, r3, #31
 8002108:	d506      	bpl.n	8002118 <HAL_RCCEx_PeriphCLKConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800210a:	4989      	ldr	r1, [pc, #548]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800210c:	68a0      	ldr	r0, [r4, #8]
 800210e:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8002110:	f022 0203 	bic.w	r2, r2, #3
 8002114:	4302      	orrs	r2, r0
 8002116:	630a      	str	r2, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002118:	079f      	lsls	r7, r3, #30
 800211a:	d506      	bpl.n	800212a <HAL_RCCEx_PeriphCLKConfig+0x7a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800211c:	4984      	ldr	r1, [pc, #528]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800211e:	68e0      	ldr	r0, [r4, #12]
 8002120:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8002122:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8002126:	4302      	orrs	r2, r0
 8002128:	630a      	str	r2, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800212a:	075e      	lsls	r6, r3, #29
 800212c:	d506      	bpl.n	800213c <HAL_RCCEx_PeriphCLKConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800212e:	4980      	ldr	r1, [pc, #512]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002130:	6920      	ldr	r0, [r4, #16]
 8002132:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8002134:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8002138:	4302      	orrs	r2, r0
 800213a:	630a      	str	r2, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800213c:	069d      	lsls	r5, r3, #26
 800213e:	d506      	bpl.n	800214e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002140:	497b      	ldr	r1, [pc, #492]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002142:	69e0      	ldr	r0, [r4, #28]
 8002144:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8002146:	f022 0210 	bic.w	r2, r2, #16
 800214a:	4302      	orrs	r2, r0
 800214c:	630a      	str	r2, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800214e:	0398      	lsls	r0, r3, #14
 8002150:	d506      	bpl.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002152:	4977      	ldr	r1, [pc, #476]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002154:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002156:	684a      	ldr	r2, [r1, #4]
 8002158:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 800215c:	4302      	orrs	r2, r0
 800215e:	604a      	str	r2, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002160:	0659      	lsls	r1, r3, #25
 8002162:	d506      	bpl.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002164:	4972      	ldr	r1, [pc, #456]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002166:	6a20      	ldr	r0, [r4, #32]
 8002168:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800216a:	f022 0220 	bic.w	r2, r2, #32
 800216e:	4302      	orrs	r2, r0
 8002170:	630a      	str	r2, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002172:	035a      	lsls	r2, r3, #13
 8002174:	d506      	bpl.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002176:	496e      	ldr	r1, [pc, #440]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002178:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800217a:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800217c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002180:	4302      	orrs	r2, r0
 8002182:	630a      	str	r2, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002184:	071f      	lsls	r7, r3, #28
 8002186:	d506      	bpl.n	8002196 <HAL_RCCEx_PeriphCLKConfig+0xe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002188:	4969      	ldr	r1, [pc, #420]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800218a:	6960      	ldr	r0, [r4, #20]
 800218c:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800218e:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8002192:	4302      	orrs	r2, r0
 8002194:	630a      	str	r2, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002196:	06de      	lsls	r6, r3, #27
 8002198:	d506      	bpl.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800219a:	4965      	ldr	r1, [pc, #404]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800219c:	69a0      	ldr	r0, [r4, #24]
 800219e:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80021a0:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 80021a4:	4302      	orrs	r2, r0
 80021a6:	630a      	str	r2, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80021a8:	059d      	lsls	r5, r3, #22
 80021aa:	d506      	bpl.n	80021ba <HAL_RCCEx_PeriphCLKConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80021ac:	4960      	ldr	r1, [pc, #384]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80021ae:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80021b0:	684a      	ldr	r2, [r1, #4]
 80021b2:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80021b6:	4302      	orrs	r2, r0
 80021b8:	604a      	str	r2, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80021ba:	0618      	lsls	r0, r3, #24
 80021bc:	d506      	bpl.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80021be:	495c      	ldr	r1, [pc, #368]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80021c0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80021c2:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80021c4:	f422 72f8 	bic.w	r2, r2, #496	; 0x1f0
 80021c8:	4302      	orrs	r2, r0
 80021ca:	62ca      	str	r2, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80021cc:	05d9      	lsls	r1, r3, #23
 80021ce:	d506      	bpl.n	80021de <HAL_RCCEx_PeriphCLKConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80021d0:	4957      	ldr	r1, [pc, #348]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80021d2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80021d4:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80021d6:	f422 5278 	bic.w	r2, r2, #15872	; 0x3e00
 80021da:	4302      	orrs	r2, r0
 80021dc:	62ca      	str	r2, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80021de:	04da      	lsls	r2, r3, #19
 80021e0:	d506      	bpl.n	80021f0 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80021e2:	4953      	ldr	r1, [pc, #332]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80021e4:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80021e6:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80021e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80021ec:	4302      	orrs	r2, r0
 80021ee:	630a      	str	r2, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80021f0:	049f      	lsls	r7, r3, #18
 80021f2:	d506      	bpl.n	8002202 <HAL_RCCEx_PeriphCLKConfig+0x152>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80021f4:	494e      	ldr	r1, [pc, #312]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80021f6:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80021f8:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80021fa:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80021fe:	4302      	orrs	r2, r0
 8002200:	630a      	str	r2, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002202:	02de      	lsls	r6, r3, #11
 8002204:	d506      	bpl.n	8002214 <HAL_RCCEx_PeriphCLKConfig+0x164>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002206:	494a      	ldr	r1, [pc, #296]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002208:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800220a:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800220c:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8002210:	4302      	orrs	r2, r0
 8002212:	630a      	str	r2, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002214:	029d      	lsls	r5, r3, #10
 8002216:	d506      	bpl.n	8002226 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002218:	4945      	ldr	r1, [pc, #276]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800221a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800221c:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800221e:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8002222:	4302      	orrs	r2, r0
 8002224:	630a      	str	r2, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002226:	0258      	lsls	r0, r3, #9
 8002228:	d506      	bpl.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800222a:	4941      	ldr	r1, [pc, #260]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800222c:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800222e:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8002230:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002234:	4302      	orrs	r2, r0
 8002236:	630a      	str	r2, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002238:	0219      	lsls	r1, r3, #8
 800223a:	d506      	bpl.n	800224a <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800223c:	493c      	ldr	r1, [pc, #240]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800223e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8002240:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8002242:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002246:	4302      	orrs	r2, r0
 8002248:	630a      	str	r2, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800224a:	01da      	lsls	r2, r3, #7
 800224c:	d506      	bpl.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800224e:	4938      	ldr	r1, [pc, #224]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002250:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8002252:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8002254:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002258:	4302      	orrs	r2, r0
 800225a:	630a      	str	r2, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800225c:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002260:	bf1f      	itttt	ne
 8002262:	4a33      	ldrne	r2, [pc, #204]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002264:	6d21      	ldrne	r1, [r4, #80]	; 0x50
 8002266:	6b13      	ldrne	r3, [r2, #48]	; 0x30
 8002268:	f423 4300 	bicne.w	r3, r3, #32768	; 0x8000
 800226c:	bf1d      	ittte	ne
 800226e:	430b      	orrne	r3, r1
 8002270:	6313      	strne	r3, [r2, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002272:	2000      	movne	r0, #0
 8002274:	4618      	moveq	r0, r3
 8002276:	e013      	b.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  FlagStatus       pwrclkchanged = RESET;
 8002278:	2600      	movs	r6, #0
 800227a:	e72e      	b.n	80020da <HAL_RCCEx_PeriphCLKConfig+0x2a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002282:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8002284:	f7fe fabe 	bl	8000804 <HAL_GetTick>
 8002288:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	05d8      	lsls	r0, r3, #23
 800228e:	f53f af29 	bmi.w	80020e4 <HAL_RCCEx_PeriphCLKConfig+0x34>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002292:	f7fe fab7 	bl	8000804 <HAL_GetTick>
 8002296:	eba0 0008 	sub.w	r0, r0, r8
 800229a:	2864      	cmp	r0, #100	; 0x64
 800229c:	d9f5      	bls.n	800228a <HAL_RCCEx_PeriphCLKConfig+0x1da>
          return HAL_TIMEOUT;
 800229e:	2003      	movs	r0, #3
}
 80022a0:	b002      	add	sp, #8
 80022a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80022a6:	6862      	ldr	r2, [r4, #4]
 80022a8:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80022ac:	429a      	cmp	r2, r3
 80022ae:	f43f af1e 	beq.w	80020ee <HAL_RCCEx_PeriphCLKConfig+0x3e>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80022b2:	6a29      	ldr	r1, [r5, #32]
 80022b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022b8:	f421 7040 	bic.w	r0, r1, #768	; 0x300
 80022bc:	fa93 f2a3 	rbit	r2, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 80022c0:	f8df c074 	ldr.w	ip, [pc, #116]	; 8002338 <HAL_RCCEx_PeriphCLKConfig+0x288>
 80022c4:	fab2 f282 	clz	r2, r2
 80022c8:	4462      	add	r2, ip
 80022ca:	0092      	lsls	r2, r2, #2
 80022cc:	2701      	movs	r7, #1
 80022ce:	6017      	str	r7, [r2, #0]
 80022d0:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 80022d4:	fab3 f383 	clz	r3, r3
 80022d8:	4463      	add	r3, ip
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	2200      	movs	r2, #0
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80022de:	07c9      	lsls	r1, r1, #31
      __HAL_RCC_BACKUPRESET_RELEASE();
 80022e0:	601a      	str	r2, [r3, #0]
      RCC->BDCR = temp_reg;
 80022e2:	6228      	str	r0, [r5, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80022e4:	f57f af03 	bpl.w	80020ee <HAL_RCCEx_PeriphCLKConfig+0x3e>
        tickstart = HAL_GetTick();
 80022e8:	f7fe fa8c 	bl	8000804 <HAL_GetTick>
 80022ec:	f04f 0802 	mov.w	r8, #2
 80022f0:	4681      	mov	r9, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022f2:	46c2      	mov	sl, r8
 80022f4:	fa98 f3a8 	rbit	r3, r8
 80022f8:	fa98 f3a8 	rbit	r3, r8
 80022fc:	b1a3      	cbz	r3, 8002328 <HAL_RCCEx_PeriphCLKConfig+0x278>
 80022fe:	6a2a      	ldr	r2, [r5, #32]
 8002300:	fa9a f3aa 	rbit	r3, sl
 8002304:	fab3 f383 	clz	r3, r3
 8002308:	f003 031f 	and.w	r3, r3, #31
 800230c:	fa07 f303 	lsl.w	r3, r7, r3
 8002310:	4213      	tst	r3, r2
 8002312:	f47f aeec 	bne.w	80020ee <HAL_RCCEx_PeriphCLKConfig+0x3e>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002316:	f7fe fa75 	bl	8000804 <HAL_GetTick>
 800231a:	f241 3388 	movw	r3, #5000	; 0x1388
 800231e:	eba0 0009 	sub.w	r0, r0, r9
 8002322:	4298      	cmp	r0, r3
 8002324:	d9e6      	bls.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8002326:	e7ba      	b.n	800229e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002328:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800232c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800232e:	e7e7      	b.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x250>
 8002330:	40021000 	.word	0x40021000
 8002334:	40007000 	.word	0x40007000
 8002338:	10908100 	.word	0x10908100

0800233c <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
  uint32_t tickstart = 0U;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800233c:	6802      	ldr	r2, [r0, #0]
{
 800233e:	b538      	push	{r3, r4, r5, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002340:	68d3      	ldr	r3, [r2, #12]
 8002342:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002346:	60d3      	str	r3, [r2, #12]
{
 8002348:	4604      	mov	r4, r0

  tickstart = HAL_GetTick();
 800234a:	f7fe fa5b 	bl	8000804 <HAL_GetTick>
 800234e:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002350:	6823      	ldr	r3, [r4, #0]
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	069b      	lsls	r3, r3, #26
 8002356:	d501      	bpl.n	800235c <HAL_RTC_WaitForSynchro+0x20>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8002358:	2000      	movs	r0, #0
}
 800235a:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800235c:	f7fe fa52 	bl	8000804 <HAL_GetTick>
 8002360:	1b40      	subs	r0, r0, r5
 8002362:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002366:	d9f3      	bls.n	8002350 <HAL_RTC_WaitForSynchro+0x14>
      return HAL_TIMEOUT;
 8002368:	2003      	movs	r0, #3
 800236a:	e7f6      	b.n	800235a <HAL_RTC_WaitForSynchro+0x1e>

0800236c <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - HAL_OK : RTC is in Init mode
  *          - HAL_TIMEOUT : RTC is not in Init mode and in Timeout
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800236c:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800236e:	6803      	ldr	r3, [r0, #0]
 8002370:	68da      	ldr	r2, [r3, #12]
 8002372:	0652      	lsls	r2, r2, #25
{
 8002374:	4604      	mov	r4, r0
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002376:	d501      	bpl.n	800237c <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8002378:	2000      	movs	r0, #0
}
 800237a:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800237c:	f04f 32ff 	mov.w	r2, #4294967295
 8002380:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8002382:	f7fe fa3f 	bl	8000804 <HAL_GetTick>
 8002386:	4605      	mov	r5, r0
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002388:	6823      	ldr	r3, [r4, #0]
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	065b      	lsls	r3, r3, #25
 800238e:	d4f3      	bmi.n	8002378 <RTC_EnterInitMode+0xc>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002390:	f7fe fa38 	bl	8000804 <HAL_GetTick>
 8002394:	1b40      	subs	r0, r0, r5
 8002396:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800239a:	d9f5      	bls.n	8002388 <RTC_EnterInitMode+0x1c>
        return HAL_TIMEOUT;
 800239c:	2003      	movs	r0, #3
 800239e:	e7ec      	b.n	800237a <RTC_EnterInitMode+0xe>

080023a0 <HAL_RTC_Init>:
{
 80023a0:	b538      	push	{r3, r4, r5, lr}
  if (hrtc == NULL)
 80023a2:	4604      	mov	r4, r0
 80023a4:	b1b8      	cbz	r0, 80023d6 <HAL_RTC_Init+0x36>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80023a6:	7f43      	ldrb	r3, [r0, #29]
 80023a8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80023ac:	b913      	cbnz	r3, 80023b4 <HAL_RTC_Init+0x14>
    hrtc->Lock = HAL_UNLOCKED;
 80023ae:	7702      	strb	r2, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 80023b0:	f7fe f8f2 	bl	8000598 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 80023b4:	2302      	movs	r3, #2
 80023b6:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80023b8:	6823      	ldr	r3, [r4, #0]
 80023ba:	22ca      	movs	r2, #202	; 0xca
 80023bc:	625a      	str	r2, [r3, #36]	; 0x24
 80023be:	2253      	movs	r2, #83	; 0x53
 80023c0:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80023c2:	4620      	mov	r0, r4
 80023c4:	f7ff ffd2 	bl	800236c <RTC_EnterInitMode>
 80023c8:	6823      	ldr	r3, [r4, #0]
 80023ca:	4605      	mov	r5, r0
 80023cc:	b128      	cbz	r0, 80023da <HAL_RTC_Init+0x3a>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80023ce:	22ff      	movs	r2, #255	; 0xff
 80023d0:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 80023d2:	2304      	movs	r3, #4
 80023d4:	7763      	strb	r3, [r4, #29]
    return HAL_ERROR;
 80023d6:	2501      	movs	r5, #1
 80023d8:	e02e      	b.n	8002438 <HAL_RTC_Init+0x98>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80023da:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80023dc:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80023de:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 80023e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023e6:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80023e8:	6862      	ldr	r2, [r4, #4]
 80023ea:	6899      	ldr	r1, [r3, #8]
 80023ec:	4302      	orrs	r2, r0
 80023ee:	6960      	ldr	r0, [r4, #20]
 80023f0:	4302      	orrs	r2, r0
 80023f2:	430a      	orrs	r2, r1
 80023f4:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80023f6:	68e2      	ldr	r2, [r4, #12]
 80023f8:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80023fa:	691a      	ldr	r2, [r3, #16]
 80023fc:	68a1      	ldr	r1, [r4, #8]
 80023fe:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002402:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002404:	68da      	ldr	r2, [r3, #12]
 8002406:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800240a:	60da      	str	r2, [r3, #12]
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	069b      	lsls	r3, r3, #26
 8002410:	d405      	bmi.n	800241e <HAL_RTC_Init+0x7e>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002412:	4620      	mov	r0, r4
 8002414:	f7ff ff92 	bl	800233c <HAL_RTC_WaitForSynchro>
 8002418:	b108      	cbz	r0, 800241e <HAL_RTC_Init+0x7e>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800241a:	6823      	ldr	r3, [r4, #0]
 800241c:	e7d7      	b.n	80023ce <HAL_RTC_Init+0x2e>
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800241e:	6823      	ldr	r3, [r4, #0]
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002420:	69a1      	ldr	r1, [r4, #24]
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8002422:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002424:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002428:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800242a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800242c:	430a      	orrs	r2, r1
 800242e:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002430:	22ff      	movs	r2, #255	; 0xff
 8002432:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8002434:	2301      	movs	r3, #1
 8002436:	7763      	strb	r3, [r4, #29]
}
 8002438:	4628      	mov	r0, r5
 800243a:	bd38      	pop	{r3, r4, r5, pc}

0800243c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800243c:	b538      	push	{r3, r4, r5, lr}
 800243e:	4604      	mov	r4, r0
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002440:	69c0      	ldr	r0, [r0, #28]
 8002442:	6921      	ldr	r1, [r4, #16]
 8002444:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002446:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002448:	430a      	orrs	r2, r1
 800244a:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800244c:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800244e:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002450:	4974      	ldr	r1, [pc, #464]	; (8002624 <UART_SetConfig+0x1e8>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002452:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002454:	4029      	ands	r1, r5
 8002456:	430a      	orrs	r2, r1
 8002458:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800245a:	685a      	ldr	r2, [r3, #4]
 800245c:	68e1      	ldr	r1, [r4, #12]
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  tmpreg |= huart->Init.OneBitSampling;
 800245e:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002460:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002464:	430a      	orrs	r2, r1
 8002466:	605a      	str	r2, [r3, #4]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002468:	6899      	ldr	r1, [r3, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800246a:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800246c:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
  tmpreg |= huart->Init.OneBitSampling;
 8002470:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002472:	430a      	orrs	r2, r1
 8002474:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002476:	4a6c      	ldr	r2, [pc, #432]	; (8002628 <UART_SetConfig+0x1ec>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d115      	bne.n	80024a8 <UART_SetConfig+0x6c>
 800247c:	4b6b      	ldr	r3, [pc, #428]	; (800262c <UART_SetConfig+0x1f0>)
 800247e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002480:	f003 0303 	and.w	r3, r3, #3
 8002484:	3b01      	subs	r3, #1
 8002486:	2b02      	cmp	r3, #2
 8002488:	f200 80ad 	bhi.w	80025e6 <UART_SetConfig+0x1aa>
 800248c:	4a68      	ldr	r2, [pc, #416]	; (8002630 <UART_SetConfig+0x1f4>)

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800248e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002492:	5cd3      	ldrb	r3, [r2, r3]
 8002494:	d176      	bne.n	8002584 <UART_SetConfig+0x148>
  {
    switch (clocksource)
 8002496:	2b08      	cmp	r3, #8
 8002498:	d819      	bhi.n	80024ce <UART_SetConfig+0x92>
 800249a:	e8df f003 	tbb	[pc, r3]
 800249e:	a7b9      	.short	0xa7b9
 80024a0:	18b3185c 	.word	0x18b3185c
 80024a4:	1818      	.short	0x1818
 80024a6:	5d          	.byte	0x5d
 80024a7:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 80024a8:	4a62      	ldr	r2, [pc, #392]	; (8002634 <UART_SetConfig+0x1f8>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d119      	bne.n	80024e2 <UART_SetConfig+0xa6>
 80024ae:	4b5f      	ldr	r3, [pc, #380]	; (800262c <UART_SetConfig+0x1f0>)
 80024b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80024ba:	f000 809a 	beq.w	80025f2 <UART_SetConfig+0x1b6>
 80024be:	d808      	bhi.n	80024d2 <UART_SetConfig+0x96>
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	f000 80a2 	beq.w	800260a <UART_SetConfig+0x1ce>
 80024c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024ca:	f000 8098 	beq.w	80025fe <UART_SetConfig+0x1c2>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80024ce:	2001      	movs	r0, #1
 80024d0:	e0a3      	b.n	800261a <UART_SetConfig+0x1de>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80024d2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80024d6:	d1fa      	bne.n	80024ce <UART_SetConfig+0x92>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80024d8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80024dc:	d03b      	beq.n	8002556 <UART_SetConfig+0x11a>
        break;
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
        break;
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80024de:	4856      	ldr	r0, [pc, #344]	; (8002638 <UART_SetConfig+0x1fc>)
 80024e0:	e06b      	b.n	80025ba <UART_SetConfig+0x17e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80024e2:	4a56      	ldr	r2, [pc, #344]	; (800263c <UART_SetConfig+0x200>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d110      	bne.n	800250a <UART_SetConfig+0xce>
 80024e8:	4b50      	ldr	r3, [pc, #320]	; (800262c <UART_SetConfig+0x1f0>)
 80024ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ec:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80024f0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80024f4:	d07d      	beq.n	80025f2 <UART_SetConfig+0x1b6>
 80024f6:	d805      	bhi.n	8002504 <UART_SetConfig+0xc8>
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	f000 8086 	beq.w	800260a <UART_SetConfig+0x1ce>
 80024fe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002502:	e7e2      	b.n	80024ca <UART_SetConfig+0x8e>
 8002504:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002508:	e7e5      	b.n	80024d6 <UART_SetConfig+0x9a>
 800250a:	4a4d      	ldr	r2, [pc, #308]	; (8002640 <UART_SetConfig+0x204>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d10f      	bne.n	8002530 <UART_SetConfig+0xf4>
 8002510:	4b46      	ldr	r3, [pc, #280]	; (800262c <UART_SetConfig+0x1f0>)
 8002512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002514:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002518:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800251c:	d069      	beq.n	80025f2 <UART_SetConfig+0x1b6>
 800251e:	d804      	bhi.n	800252a <UART_SetConfig+0xee>
 8002520:	2b00      	cmp	r3, #0
 8002522:	d072      	beq.n	800260a <UART_SetConfig+0x1ce>
 8002524:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002528:	e7cf      	b.n	80024ca <UART_SetConfig+0x8e>
 800252a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800252e:	e7d2      	b.n	80024d6 <UART_SetConfig+0x9a>
 8002530:	4a44      	ldr	r2, [pc, #272]	; (8002644 <UART_SetConfig+0x208>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d1cb      	bne.n	80024ce <UART_SetConfig+0x92>
 8002536:	4b3d      	ldr	r3, [pc, #244]	; (800262c <UART_SetConfig+0x1f0>)
 8002538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253a:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800253e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002542:	d056      	beq.n	80025f2 <UART_SetConfig+0x1b6>
 8002544:	d804      	bhi.n	8002550 <UART_SetConfig+0x114>
 8002546:	2b00      	cmp	r3, #0
 8002548:	d05f      	beq.n	800260a <UART_SetConfig+0x1ce>
 800254a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800254e:	e7bc      	b.n	80024ca <UART_SetConfig+0x8e>
 8002550:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002554:	e7bf      	b.n	80024d6 <UART_SetConfig+0x9a>
        pclk = (uint32_t) HSI_VALUE;
 8002556:	4838      	ldr	r0, [pc, #224]	; (8002638 <UART_SetConfig+0x1fc>)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002558:	6862      	ldr	r2, [r4, #4]
 800255a:	0853      	lsrs	r3, r2, #1
 800255c:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8002560:	fbb0 f0f2 	udiv	r0, r0, r2
 8002564:	b283      	uxth	r3, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002566:	f1a3 0110 	sub.w	r1, r3, #16
 800256a:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800256e:	4291      	cmp	r1, r2
 8002570:	d8ad      	bhi.n	80024ce <UART_SetConfig+0x92>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002572:	f020 000f 	bic.w	r0, r0, #15
        huart->Instance->BRR = brrtemp;
 8002576:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002578:	b280      	uxth	r0, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800257a:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 800257e:	4318      	orrs	r0, r3
 8002580:	60d0      	str	r0, [r2, #12]
 8002582:	e049      	b.n	8002618 <UART_SetConfig+0x1dc>
    switch (clocksource)
 8002584:	2b08      	cmp	r3, #8
 8002586:	d8a2      	bhi.n	80024ce <UART_SetConfig+0x92>
 8002588:	a201      	add	r2, pc, #4	; (adr r2, 8002590 <UART_SetConfig+0x154>)
 800258a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800258e:	bf00      	nop
 8002590:	080025b5 	.word	0x080025b5
 8002594:	080025db 	.word	0x080025db
 8002598:	080024df 	.word	0x080024df
 800259c:	080024cf 	.word	0x080024cf
 80025a0:	080025e1 	.word	0x080025e1
 80025a4:	080024cf 	.word	0x080024cf
 80025a8:	080024cf 	.word	0x080024cf
 80025ac:	080024cf 	.word	0x080024cf
 80025b0:	080025f9 	.word	0x080025f9
        pclk = HAL_RCC_GetPCLK1Freq();
 80025b4:	f7ff fd4c 	bl	8002050 <HAL_RCC_GetPCLK1Freq>
        pclk = 0U;
        ret = HAL_ERROR;
        break;
    }

    if (pclk != 0U)
 80025b8:	b370      	cbz	r0, 8002618 <UART_SetConfig+0x1dc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80025ba:	6862      	ldr	r2, [r4, #4]
 80025bc:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 80025c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80025c4:	b29b      	uxth	r3, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80025c6:	f1a3 0110 	sub.w	r1, r3, #16
 80025ca:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80025ce:	4291      	cmp	r1, r2
 80025d0:	f63f af7d 	bhi.w	80024ce <UART_SetConfig+0x92>
      {
        huart->Instance->BRR = usartdiv;
 80025d4:	6822      	ldr	r2, [r4, #0]
 80025d6:	60d3      	str	r3, [r2, #12]
 80025d8:	e01e      	b.n	8002618 <UART_SetConfig+0x1dc>
        pclk = HAL_RCC_GetPCLK2Freq();
 80025da:	f7ff fd51 	bl	8002080 <HAL_RCC_GetPCLK2Freq>
        break;
 80025de:	e7eb      	b.n	80025b8 <UART_SetConfig+0x17c>
        pclk = HAL_RCC_GetSysClockFreq();
 80025e0:	f7ff fc5e 	bl	8001ea0 <HAL_RCC_GetSysClockFreq>
        break;
 80025e4:	e7e8      	b.n	80025b8 <UART_SetConfig+0x17c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80025e6:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80025ea:	d1f6      	bne.n	80025da <UART_SetConfig+0x19e>
        pclk = HAL_RCC_GetPCLK2Freq();
 80025ec:	f7ff fd48 	bl	8002080 <HAL_RCC_GetPCLK2Freq>
        break;
 80025f0:	e010      	b.n	8002614 <UART_SetConfig+0x1d8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80025f2:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80025f6:	d0af      	beq.n	8002558 <UART_SetConfig+0x11c>
        pclk = (uint32_t) LSE_VALUE;
 80025f8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80025fc:	e7dd      	b.n	80025ba <UART_SetConfig+0x17e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80025fe:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002602:	d1ed      	bne.n	80025e0 <UART_SetConfig+0x1a4>
        pclk = HAL_RCC_GetSysClockFreq();
 8002604:	f7ff fc4c 	bl	8001ea0 <HAL_RCC_GetSysClockFreq>
        break;
 8002608:	e004      	b.n	8002614 <UART_SetConfig+0x1d8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800260a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800260e:	d1d1      	bne.n	80025b4 <UART_SetConfig+0x178>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002610:	f7ff fd1e 	bl	8002050 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8002614:	2800      	cmp	r0, #0
 8002616:	d19f      	bne.n	8002558 <UART_SetConfig+0x11c>
 8002618:	2000      	movs	r0, #0
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800261a:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 800261c:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64

  return ret;
}
 8002620:	bd38      	pop	{r3, r4, r5, pc}
 8002622:	bf00      	nop
 8002624:	efff69f3 	.word	0xefff69f3
 8002628:	40013800 	.word	0x40013800
 800262c:	40021000 	.word	0x40021000
 8002630:	0800474c 	.word	0x0800474c
 8002634:	40004400 	.word	0x40004400
 8002638:	007a1200 	.word	0x007a1200
 800263c:	40004800 	.word	0x40004800
 8002640:	40004c00 	.word	0x40004c00
 8002644:	40005000 	.word	0x40005000

08002648 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002648:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800264a:	07da      	lsls	r2, r3, #31
{
 800264c:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800264e:	d506      	bpl.n	800265e <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002650:	6801      	ldr	r1, [r0, #0]
 8002652:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8002654:	684a      	ldr	r2, [r1, #4]
 8002656:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800265a:	4322      	orrs	r2, r4
 800265c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800265e:	079c      	lsls	r4, r3, #30
 8002660:	d506      	bpl.n	8002670 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002662:	6801      	ldr	r1, [r0, #0]
 8002664:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8002666:	684a      	ldr	r2, [r1, #4]
 8002668:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800266c:	4322      	orrs	r2, r4
 800266e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002670:	0759      	lsls	r1, r3, #29
 8002672:	d506      	bpl.n	8002682 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002674:	6801      	ldr	r1, [r0, #0]
 8002676:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8002678:	684a      	ldr	r2, [r1, #4]
 800267a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800267e:	4322      	orrs	r2, r4
 8002680:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002682:	071a      	lsls	r2, r3, #28
 8002684:	d506      	bpl.n	8002694 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002686:	6801      	ldr	r1, [r0, #0]
 8002688:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800268a:	684a      	ldr	r2, [r1, #4]
 800268c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002690:	4322      	orrs	r2, r4
 8002692:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002694:	06dc      	lsls	r4, r3, #27
 8002696:	d506      	bpl.n	80026a6 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002698:	6801      	ldr	r1, [r0, #0]
 800269a:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800269c:	688a      	ldr	r2, [r1, #8]
 800269e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80026a2:	4322      	orrs	r2, r4
 80026a4:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80026a6:	0699      	lsls	r1, r3, #26
 80026a8:	d506      	bpl.n	80026b8 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80026aa:	6801      	ldr	r1, [r0, #0]
 80026ac:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80026ae:	688a      	ldr	r2, [r1, #8]
 80026b0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80026b4:	4322      	orrs	r2, r4
 80026b6:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80026b8:	065a      	lsls	r2, r3, #25
 80026ba:	d50f      	bpl.n	80026dc <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80026bc:	6801      	ldr	r1, [r0, #0]
 80026be:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80026c0:	684a      	ldr	r2, [r1, #4]
 80026c2:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80026c6:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80026c8:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80026cc:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80026ce:	d105      	bne.n	80026dc <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80026d0:	684a      	ldr	r2, [r1, #4]
 80026d2:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80026d4:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80026d8:	4322      	orrs	r2, r4
 80026da:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80026dc:	061b      	lsls	r3, r3, #24
 80026de:	d506      	bpl.n	80026ee <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80026e0:	6802      	ldr	r2, [r0, #0]
 80026e2:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80026e4:	6853      	ldr	r3, [r2, #4]
 80026e6:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80026ea:	430b      	orrs	r3, r1
 80026ec:	6053      	str	r3, [r2, #4]
  }
}
 80026ee:	bd10      	pop	{r4, pc}

080026f0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80026f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80026f4:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80026f8:	4604      	mov	r4, r0
 80026fa:	460e      	mov	r6, r1
 80026fc:	4615      	mov	r5, r2
 80026fe:	461f      	mov	r7, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002700:	6822      	ldr	r2, [r4, #0]
 8002702:	69d3      	ldr	r3, [r2, #28]
 8002704:	ea36 0303 	bics.w	r3, r6, r3
 8002708:	bf0c      	ite	eq
 800270a:	2301      	moveq	r3, #1
 800270c:	2300      	movne	r3, #0
 800270e:	42ab      	cmp	r3, r5
 8002710:	d001      	beq.n	8002716 <UART_WaitOnFlagUntilTimeout+0x26>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 8002712:	2000      	movs	r0, #0
 8002714:	e01a      	b.n	800274c <UART_WaitOnFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 8002716:	f1b8 3fff 	cmp.w	r8, #4294967295
 800271a:	d0f2      	beq.n	8002702 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800271c:	f7fe f872 	bl	8000804 <HAL_GetTick>
 8002720:	1bc0      	subs	r0, r0, r7
 8002722:	4540      	cmp	r0, r8
 8002724:	6820      	ldr	r0, [r4, #0]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002726:	6803      	ldr	r3, [r0, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002728:	d802      	bhi.n	8002730 <UART_WaitOnFlagUntilTimeout+0x40>
 800272a:	f1b8 0f00 	cmp.w	r8, #0
 800272e:	d10f      	bne.n	8002750 <UART_WaitOnFlagUntilTimeout+0x60>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002730:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002734:	6003      	str	r3, [r0, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002736:	6883      	ldr	r3, [r0, #8]
 8002738:	f023 0301 	bic.w	r3, r3, #1
 800273c:	6083      	str	r3, [r0, #8]
        huart->gState = HAL_UART_STATE_READY;
 800273e:	2320      	movs	r3, #32
 8002740:	67a3      	str	r3, [r4, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002742:	67e3      	str	r3, [r4, #124]	; 0x7c
          __HAL_UNLOCK(huart);
 8002744:	2300      	movs	r3, #0
 8002746:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
          return HAL_TIMEOUT;
 800274a:	2003      	movs	r0, #3
}
 800274c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002750:	075a      	lsls	r2, r3, #29
 8002752:	d5d5      	bpl.n	8002700 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002754:	69c3      	ldr	r3, [r0, #28]
 8002756:	051b      	lsls	r3, r3, #20
 8002758:	d5d2      	bpl.n	8002700 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800275a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800275e:	6203      	str	r3, [r0, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002760:	6803      	ldr	r3, [r0, #0]
 8002762:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002766:	6003      	str	r3, [r0, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002768:	6883      	ldr	r3, [r0, #8]
 800276a:	f023 0301 	bic.w	r3, r3, #1
 800276e:	6083      	str	r3, [r0, #8]
          huart->gState = HAL_UART_STATE_READY;
 8002770:	2320      	movs	r3, #32
 8002772:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002774:	67e3      	str	r3, [r4, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002776:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 800277a:	e7e3      	b.n	8002744 <UART_WaitOnFlagUntilTimeout+0x54>

0800277c <HAL_UART_Transmit>:
{
 800277c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8002780:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8002782:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8002784:	2b20      	cmp	r3, #32
{
 8002786:	4604      	mov	r4, r0
 8002788:	460e      	mov	r6, r1
 800278a:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 800278c:	d14e      	bne.n	800282c <HAL_UART_Transmit+0xb0>
    if ((pData == NULL) || (Size == 0U))
 800278e:	2900      	cmp	r1, #0
 8002790:	d04a      	beq.n	8002828 <HAL_UART_Transmit+0xac>
 8002792:	2a00      	cmp	r2, #0
 8002794:	d048      	beq.n	8002828 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 8002796:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 800279a:	2b01      	cmp	r3, #1
 800279c:	d046      	beq.n	800282c <HAL_UART_Transmit+0xb0>
 800279e:	2301      	movs	r3, #1
 80027a0:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027a4:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80027a6:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027a8:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80027ac:	6783      	str	r3, [r0, #120]	; 0x78
    tickstart = HAL_GetTick();
 80027ae:	f7fe f829 	bl	8000804 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027b2:	68a2      	ldr	r2, [r4, #8]
    huart->TxXferSize  = Size;
 80027b4:	f8a4 7050 	strh.w	r7, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027b8:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    tickstart = HAL_GetTick();
 80027bc:	4603      	mov	r3, r0
    huart->TxXferCount = Size;
 80027be:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027c2:	d103      	bne.n	80027cc <HAL_UART_Transmit+0x50>
 80027c4:	6922      	ldr	r2, [r4, #16]
 80027c6:	b90a      	cbnz	r2, 80027cc <HAL_UART_Transmit+0x50>
 80027c8:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 80027ca:	4616      	mov	r6, r2
    __HAL_UNLOCK(huart);
 80027cc:	2200      	movs	r2, #0
 80027ce:	f884 2074 	strb.w	r2, [r4, #116]	; 0x74
    while (huart->TxXferCount > 0U)
 80027d2:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80027d6:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 80027da:	b292      	uxth	r2, r2
 80027dc:	b93a      	cbnz	r2, 80027ee <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80027de:	2140      	movs	r1, #64	; 0x40
 80027e0:	4620      	mov	r0, r4
 80027e2:	f7ff ff85 	bl	80026f0 <UART_WaitOnFlagUntilTimeout>
 80027e6:	b950      	cbnz	r0, 80027fe <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 80027e8:	2320      	movs	r3, #32
 80027ea:	67a3      	str	r3, [r4, #120]	; 0x78
    return HAL_OK;
 80027ec:	e008      	b.n	8002800 <HAL_UART_Transmit+0x84>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80027ee:	2200      	movs	r2, #0
 80027f0:	2180      	movs	r1, #128	; 0x80
 80027f2:	4620      	mov	r0, r4
 80027f4:	9303      	str	r3, [sp, #12]
 80027f6:	f7ff ff7b 	bl	80026f0 <UART_WaitOnFlagUntilTimeout>
 80027fa:	9b03      	ldr	r3, [sp, #12]
 80027fc:	b118      	cbz	r0, 8002806 <HAL_UART_Transmit+0x8a>
        return HAL_TIMEOUT;
 80027fe:	2003      	movs	r0, #3
}
 8002800:	b004      	add	sp, #16
 8002802:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (pdata8bits == NULL)
 8002806:	6821      	ldr	r1, [r4, #0]
 8002808:	b95e      	cbnz	r6, 8002822 <HAL_UART_Transmit+0xa6>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800280a:	f835 2b02 	ldrh.w	r2, [r5], #2
 800280e:	f3c2 0208 	ubfx	r2, r2, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002812:	850a      	strh	r2, [r1, #40]	; 0x28
      huart->TxXferCount--;
 8002814:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8002818:	3a01      	subs	r2, #1
 800281a:	b292      	uxth	r2, r2
 800281c:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 8002820:	e7d7      	b.n	80027d2 <HAL_UART_Transmit+0x56>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002822:	f816 2b01 	ldrb.w	r2, [r6], #1
 8002826:	e7f4      	b.n	8002812 <HAL_UART_Transmit+0x96>
      return  HAL_ERROR;
 8002828:	2001      	movs	r0, #1
 800282a:	e7e9      	b.n	8002800 <HAL_UART_Transmit+0x84>
    return HAL_BUSY;
 800282c:	2002      	movs	r0, #2
 800282e:	e7e7      	b.n	8002800 <HAL_UART_Transmit+0x84>

08002830 <UART_CheckIdleState>:
{
 8002830:	b530      	push	{r4, r5, lr}
 8002832:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002834:	2500      	movs	r5, #0
{
 8002836:	b085      	sub	sp, #20
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002838:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
  tickstart = HAL_GetTick();
 800283c:	f7fd ffe2 	bl	8000804 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002840:	6822      	ldr	r2, [r4, #0]
 8002842:	6812      	ldr	r2, [r2, #0]
 8002844:	0711      	lsls	r1, r2, #28
  tickstart = HAL_GetTick();
 8002846:	4603      	mov	r3, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002848:	d415      	bmi.n	8002876 <UART_CheckIdleState+0x46>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800284a:	6822      	ldr	r2, [r4, #0]
 800284c:	6812      	ldr	r2, [r2, #0]
 800284e:	0752      	lsls	r2, r2, #29
 8002850:	d509      	bpl.n	8002866 <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002852:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8002856:	9200      	str	r2, [sp, #0]
 8002858:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800285c:	2200      	movs	r2, #0
 800285e:	4620      	mov	r0, r4
 8002860:	f7ff ff46 	bl	80026f0 <UART_WaitOnFlagUntilTimeout>
 8002864:	b9a0      	cbnz	r0, 8002890 <UART_CheckIdleState+0x60>
  huart->gState = HAL_UART_STATE_READY;
 8002866:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002868:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800286a:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 800286c:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8002870:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002872:	6620      	str	r0, [r4, #96]	; 0x60
  return HAL_OK;
 8002874:	e00d      	b.n	8002892 <UART_CheckIdleState+0x62>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002876:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 800287a:	9200      	str	r2, [sp, #0]
 800287c:	9003      	str	r0, [sp, #12]
 800287e:	462a      	mov	r2, r5
 8002880:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002884:	4620      	mov	r0, r4
 8002886:	f7ff ff33 	bl	80026f0 <UART_WaitOnFlagUntilTimeout>
 800288a:	9b03      	ldr	r3, [sp, #12]
 800288c:	2800      	cmp	r0, #0
 800288e:	d0dc      	beq.n	800284a <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 8002890:	2003      	movs	r0, #3
}
 8002892:	b005      	add	sp, #20
 8002894:	bd30      	pop	{r4, r5, pc}

08002896 <HAL_UART_Init>:
{
 8002896:	b510      	push	{r4, lr}
  if (huart == NULL)
 8002898:	4604      	mov	r4, r0
 800289a:	b340      	cbz	r0, 80028ee <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 800289c:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800289e:	b91b      	cbnz	r3, 80028a8 <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 80028a0:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    HAL_UART_MspInit(huart);
 80028a4:	f7fd fe8c 	bl	80005c0 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80028a8:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80028aa:	2324      	movs	r3, #36	; 0x24
 80028ac:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 80028ae:	6813      	ldr	r3, [r2, #0]
 80028b0:	f023 0301 	bic.w	r3, r3, #1
 80028b4:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80028b6:	4620      	mov	r0, r4
 80028b8:	f7ff fdc0 	bl	800243c <UART_SetConfig>
 80028bc:	2801      	cmp	r0, #1
 80028be:	d016      	beq.n	80028ee <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80028c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80028c2:	b113      	cbz	r3, 80028ca <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 80028c4:	4620      	mov	r0, r4
 80028c6:	f7ff febf 	bl	8002648 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028ca:	6823      	ldr	r3, [r4, #0]
 80028cc:	685a      	ldr	r2, [r3, #4]
 80028ce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80028d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028d4:	689a      	ldr	r2, [r3, #8]
 80028d6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80028da:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 80028e2:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 80028e4:	601a      	str	r2, [r3, #0]
}
 80028e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 80028ea:	f7ff bfa1 	b.w	8002830 <UART_CheckIdleState>
}
 80028ee:	2001      	movs	r0, #1
 80028f0:	bd10      	pop	{r4, pc}

080028f2 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80028f2:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 80028f6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80028fa:	045b      	lsls	r3, r3, #17
 80028fc:	0c5b      	lsrs	r3, r3, #17
 80028fe:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 8002902:	2000      	movs	r0, #0
 8002904:	4770      	bx	lr

08002906 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002906:	b084      	sub	sp, #16
 8002908:	b510      	push	{r4, lr}
 800290a:	ac03      	add	r4, sp, #12
 800290c:	e884 000e 	stmia.w	r4, {r1, r2, r3}

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;

  return HAL_OK;
}
 8002910:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8002914:	2301      	movs	r3, #1
 8002916:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  USBx->CNTR = 0U;
 800291a:	2300      	movs	r3, #0
 800291c:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
}
 8002920:	b004      	add	sp, #16
  USBx->ISTR = 0U;
 8002922:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  USBx->BTABLE = BTABLE_ADDRESS;
 8002926:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
}
 800292a:	4618      	mov	r0, r3
 800292c:	4770      	bx	lr

0800292e <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 800292e:	b911      	cbnz	r1, 8002936 <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8002930:	2380      	movs	r3, #128	; 0x80
 8002932:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }

  return HAL_OK;
}
 8002936:	2000      	movs	r0, #0
 8002938:	4770      	bx	lr

0800293a <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800293a:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 800293e:	b280      	uxth	r0, r0
 8002940:	4770      	bx	lr

08002942 <USB_WritePMA>:
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8002942:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8002946:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8002948:	4410      	add	r0, r2
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800294a:	085b      	lsrs	r3, r3, #1
 800294c:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8002950:	1a40      	subs	r0, r0, r1

  for (i = n; i != 0U; i--)
 8002952:	4299      	cmp	r1, r3
 8002954:	d100      	bne.n	8002958 <USB_WritePMA+0x16>
    pdwVal++;
#endif

    pBuf++;
  }
}
 8002956:	4770      	bx	lr
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8002958:	880a      	ldrh	r2, [r1, #0]
    *pdwVal = (uint16_t)temp2;
 800295a:	5242      	strh	r2, [r0, r1]
    pBuf++;
 800295c:	3102      	adds	r1, #2
  for (i = n; i != 0U; i--)
 800295e:	e7f8      	b.n	8002952 <USB_WritePMA+0x10>

08002960 <USB_EPStartXfer>:
{
 8002960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (ep->is_in == 1U)
 8002962:	784a      	ldrb	r2, [r1, #1]
 8002964:	7b0f      	ldrb	r7, [r1, #12]
 8002966:	2a01      	cmp	r2, #1
{
 8002968:	4605      	mov	r5, r0
 800296a:	460c      	mov	r4, r1
  if (ep->is_in == 1U)
 800296c:	f040 81ab 	bne.w	8002cc6 <USB_EPStartXfer+0x366>
    if (ep->xfer_len > ep->maxpacket)
 8002970:	690a      	ldr	r2, [r1, #16]
 8002972:	698e      	ldr	r6, [r1, #24]
 8002974:	6949      	ldr	r1, [r1, #20]
 8002976:	4296      	cmp	r6, r2
 8002978:	bf28      	it	cs
 800297a:	4616      	movcs	r6, r2
    if (ep->doublebuffer == 0U)
 800297c:	bb0f      	cbnz	r7, 80029c2 <USB_EPStartXfer+0x62>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800297e:	b2b6      	uxth	r6, r6
 8002980:	88e2      	ldrh	r2, [r4, #6]
 8002982:	4633      	mov	r3, r6
 8002984:	f7ff ffdd 	bl	8002942 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8002988:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800298c:	7823      	ldrb	r3, [r4, #0]
 800298e:	f205 4102 	addw	r1, r5, #1026	; 0x402
 8002992:	fa11 f282 	uxtah	r2, r1, r2
 8002996:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800299a:	8016      	strh	r6, [r2, #0]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800299c:	7822      	ldrb	r2, [r4, #0]
 800299e:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 80029a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029aa:	041b      	lsls	r3, r3, #16
 80029ac:	0c1b      	lsrs	r3, r3, #16
 80029ae:	f083 0330 	eor.w	r3, r3, #48	; 0x30
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80029b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029ba:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
  return HAL_OK;
 80029be:	2000      	movs	r0, #0
}
 80029c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (ep->type == EP_TYPE_BULK)
 80029c2:	78e3      	ldrb	r3, [r4, #3]
 80029c4:	7827      	ldrb	r7, [r4, #0]
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	f040 813f 	bne.w	8002c4a <USB_EPStartXfer+0x2ea>
        if (ep->xfer_len_db > ep->maxpacket)
 80029cc:	6a23      	ldr	r3, [r4, #32]
 80029ce:	429a      	cmp	r2, r3
          PCD_SET_EP_DBUF(USBx, ep->num);
 80029d0:	f830 2027 	ldrh.w	r2, [r0, r7, lsl #2]
        if (ep->xfer_len_db > ep->maxpacket)
 80029d4:	f080 8120 	bcs.w	8002c18 <USB_EPStartXfer+0x2b8>
          PCD_SET_EP_DBUF(USBx, ep->num);
 80029d8:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80029dc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80029e0:	0412      	lsls	r2, r2, #16
 80029e2:	0c12      	lsrs	r2, r2, #16
 80029e4:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 80029e8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80029ec:	f820 2027 	strh.w	r2, [r0, r7, lsl #2]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80029f0:	7820      	ldrb	r0, [r4, #0]
 80029f2:	f835 2020 	ldrh.w	r2, [r5, r0, lsl #2]
          ep->xfer_len_db -= len;
 80029f6:	1b9b      	subs	r3, r3, r6
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80029f8:	f012 0f40 	tst.w	r2, #64	; 0x40
          ep->xfer_len_db -= len;
 80029fc:	6223      	str	r3, [r4, #32]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80029fe:	7862      	ldrb	r2, [r4, #1]
 8002a00:	b2b3      	uxth	r3, r6
 8002a02:	f000 8086 	beq.w	8002b12 <USB_EPStartXfer+0x1b2>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002a06:	2a00      	cmp	r2, #0
 8002a08:	d153      	bne.n	8002ab2 <USB_EPStartXfer+0x152>
 8002a0a:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8002a0e:	f205 4706 	addw	r7, r5, #1030	; 0x406
 8002a12:	fa17 f282 	uxtah	r2, r7, r2
 8002a16:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8002a1a:	2e00      	cmp	r6, #0
 8002a1c:	d138      	bne.n	8002a90 <USB_EPStartXfer+0x130>
 8002a1e:	8810      	ldrh	r0, [r2, #0]
 8002a20:	f420 40f8 	bic.w	r0, r0, #31744	; 0x7c00
 8002a24:	0400      	lsls	r0, r0, #16
 8002a26:	0c00      	lsrs	r0, r0, #16
 8002a28:	8010      	strh	r0, [r2, #0]
 8002a2a:	8810      	ldrh	r0, [r2, #0]
 8002a2c:	ea6f 4040 	mvn.w	r0, r0, lsl #17
 8002a30:	ea6f 4050 	mvn.w	r0, r0, lsr #17
 8002a34:	b280      	uxth	r0, r0
 8002a36:	8010      	strh	r0, [r2, #0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002a38:	8962      	ldrh	r2, [r4, #10]
 8002a3a:	4628      	mov	r0, r5
 8002a3c:	f7ff ff81 	bl	8002942 <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 8002a40:	6a20      	ldr	r0, [r4, #32]
 8002a42:	6923      	ldr	r3, [r4, #16]
            ep->xfer_buff += len;
 8002a44:	6961      	ldr	r1, [r4, #20]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002a46:	7862      	ldrb	r2, [r4, #1]
            if (ep->xfer_len_db > ep->maxpacket)
 8002a48:	4298      	cmp	r0, r3
              ep->xfer_len_db -= len;
 8002a4a:	bf8c      	ite	hi
 8002a4c:	1b83      	subhi	r3, r0, r6
              ep->xfer_len_db = 0U;
 8002a4e:	2300      	movls	r3, #0
            ep->xfer_buff += len;
 8002a50:	4431      	add	r1, r6
 8002a52:	bf88      	it	hi
 8002a54:	4630      	movhi	r0, r6
 8002a56:	6223      	str	r3, [r4, #32]
 8002a58:	6161      	str	r1, [r4, #20]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002a5a:	b283      	uxth	r3, r0
 8002a5c:	2a00      	cmp	r2, #0
 8002a5e:	d14b      	bne.n	8002af8 <USB_EPStartXfer+0x198>
 8002a60:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8002a64:	7826      	ldrb	r6, [r4, #0]
 8002a66:	f205 4702 	addw	r7, r5, #1026	; 0x402
 8002a6a:	fa17 f282 	uxtah	r2, r7, r2
 8002a6e:	eb02 02c6 	add.w	r2, r2, r6, lsl #3
 8002a72:	bb50      	cbnz	r0, 8002aca <USB_EPStartXfer+0x16a>
 8002a74:	8810      	ldrh	r0, [r2, #0]
 8002a76:	f420 40f8 	bic.w	r0, r0, #31744	; 0x7c00
 8002a7a:	0400      	lsls	r0, r0, #16
 8002a7c:	0c00      	lsrs	r0, r0, #16
 8002a7e:	8010      	strh	r0, [r2, #0]
 8002a80:	8810      	ldrh	r0, [r2, #0]
 8002a82:	ea6f 4040 	mvn.w	r0, r0, lsl #17
 8002a86:	ea6f 4050 	mvn.w	r0, r0, lsr #17
 8002a8a:	b280      	uxth	r0, r0
 8002a8c:	8010      	strh	r0, [r2, #0]
 8002a8e:	e025      	b.n	8002adc <USB_EPStartXfer+0x17c>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002a90:	2e3e      	cmp	r6, #62	; 0x3e
 8002a92:	d805      	bhi.n	8002aa0 <USB_EPStartXfer+0x140>
 8002a94:	0870      	lsrs	r0, r6, #1
 8002a96:	07f7      	lsls	r7, r6, #31
 8002a98:	bf48      	it	mi
 8002a9a:	3001      	addmi	r0, #1
 8002a9c:	0280      	lsls	r0, r0, #10
 8002a9e:	e7c9      	b.n	8002a34 <USB_EPStartXfer+0xd4>
 8002aa0:	0977      	lsrs	r7, r6, #5
 8002aa2:	06f0      	lsls	r0, r6, #27
 8002aa4:	48a7      	ldr	r0, [pc, #668]	; (8002d44 <USB_EPStartXfer+0x3e4>)
 8002aa6:	bf08      	it	eq
 8002aa8:	f107 37ff 	addeq.w	r7, r7, #4294967295
 8002aac:	ea40 2087 	orr.w	r0, r0, r7, lsl #10
 8002ab0:	e7c0      	b.n	8002a34 <USB_EPStartXfer+0xd4>
 8002ab2:	2a01      	cmp	r2, #1
 8002ab4:	d1c0      	bne.n	8002a38 <USB_EPStartXfer+0xd8>
 8002ab6:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8002aba:	f205 4706 	addw	r7, r5, #1030	; 0x406
 8002abe:	fa17 f282 	uxtah	r2, r7, r2
 8002ac2:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8002ac6:	8013      	strh	r3, [r2, #0]
 8002ac8:	e7b6      	b.n	8002a38 <USB_EPStartXfer+0xd8>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002aca:	283e      	cmp	r0, #62	; 0x3e
 8002acc:	d80b      	bhi.n	8002ae6 <USB_EPStartXfer+0x186>
 8002ace:	0846      	lsrs	r6, r0, #1
 8002ad0:	07c7      	lsls	r7, r0, #31
 8002ad2:	bf48      	it	mi
 8002ad4:	3601      	addmi	r6, #1
 8002ad6:	02b6      	lsls	r6, r6, #10
 8002ad8:	b2b6      	uxth	r6, r6
 8002ada:	8016      	strh	r6, [r2, #0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002adc:	8922      	ldrh	r2, [r4, #8]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002ade:	4628      	mov	r0, r5
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002ae0:	f7ff ff2f 	bl	8002942 <USB_WritePMA>
 8002ae4:	e75a      	b.n	800299c <USB_EPStartXfer+0x3c>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002ae6:	0946      	lsrs	r6, r0, #5
 8002ae8:	06c0      	lsls	r0, r0, #27
 8002aea:	4896      	ldr	r0, [pc, #600]	; (8002d44 <USB_EPStartXfer+0x3e4>)
 8002aec:	bf08      	it	eq
 8002aee:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8002af2:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
 8002af6:	e7c8      	b.n	8002a8a <USB_EPStartXfer+0x12a>
 8002af8:	2a01      	cmp	r2, #1
 8002afa:	d1ef      	bne.n	8002adc <USB_EPStartXfer+0x17c>
 8002afc:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8002b00:	7820      	ldrb	r0, [r4, #0]
 8002b02:	f205 4602 	addw	r6, r5, #1026	; 0x402
 8002b06:	fa16 f282 	uxtah	r2, r6, r2
 8002b0a:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8002b0e:	8013      	strh	r3, [r2, #0]
 8002b10:	e7e4      	b.n	8002adc <USB_EPStartXfer+0x17c>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002b12:	2a00      	cmp	r2, #0
 8002b14:	d153      	bne.n	8002bbe <USB_EPStartXfer+0x25e>
 8002b16:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8002b1a:	f205 4702 	addw	r7, r5, #1026	; 0x402
 8002b1e:	fa17 f282 	uxtah	r2, r7, r2
 8002b22:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8002b26:	2e00      	cmp	r6, #0
 8002b28:	d138      	bne.n	8002b9c <USB_EPStartXfer+0x23c>
 8002b2a:	8810      	ldrh	r0, [r2, #0]
 8002b2c:	f420 40f8 	bic.w	r0, r0, #31744	; 0x7c00
 8002b30:	0400      	lsls	r0, r0, #16
 8002b32:	0c00      	lsrs	r0, r0, #16
 8002b34:	8010      	strh	r0, [r2, #0]
 8002b36:	8810      	ldrh	r0, [r2, #0]
 8002b38:	ea6f 4040 	mvn.w	r0, r0, lsl #17
 8002b3c:	ea6f 4050 	mvn.w	r0, r0, lsr #17
 8002b40:	b280      	uxth	r0, r0
 8002b42:	8010      	strh	r0, [r2, #0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002b44:	8922      	ldrh	r2, [r4, #8]
 8002b46:	4628      	mov	r0, r5
 8002b48:	f7ff fefb 	bl	8002942 <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 8002b4c:	6a20      	ldr	r0, [r4, #32]
 8002b4e:	6923      	ldr	r3, [r4, #16]
            ep->xfer_buff += len;
 8002b50:	6961      	ldr	r1, [r4, #20]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002b52:	7862      	ldrb	r2, [r4, #1]
            if (ep->xfer_len_db > ep->maxpacket)
 8002b54:	4298      	cmp	r0, r3
              ep->xfer_len_db -= len;
 8002b56:	bf8c      	ite	hi
 8002b58:	1b83      	subhi	r3, r0, r6
              ep->xfer_len_db = 0U;
 8002b5a:	2300      	movls	r3, #0
            ep->xfer_buff += len;
 8002b5c:	4431      	add	r1, r6
 8002b5e:	bf88      	it	hi
 8002b60:	4630      	movhi	r0, r6
 8002b62:	6223      	str	r3, [r4, #32]
 8002b64:	6161      	str	r1, [r4, #20]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002b66:	b283      	uxth	r3, r0
 8002b68:	2a00      	cmp	r2, #0
 8002b6a:	d148      	bne.n	8002bfe <USB_EPStartXfer+0x29e>
 8002b6c:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8002b70:	7826      	ldrb	r6, [r4, #0]
 8002b72:	f205 4706 	addw	r7, r5, #1030	; 0x406
 8002b76:	fa17 f282 	uxtah	r2, r7, r2
 8002b7a:	eb02 02c6 	add.w	r2, r2, r6, lsl #3
 8002b7e:	bb50      	cbnz	r0, 8002bd6 <USB_EPStartXfer+0x276>
 8002b80:	8810      	ldrh	r0, [r2, #0]
 8002b82:	f420 40f8 	bic.w	r0, r0, #31744	; 0x7c00
 8002b86:	0400      	lsls	r0, r0, #16
 8002b88:	0c00      	lsrs	r0, r0, #16
 8002b8a:	8010      	strh	r0, [r2, #0]
 8002b8c:	8810      	ldrh	r0, [r2, #0]
 8002b8e:	ea6f 4040 	mvn.w	r0, r0, lsl #17
 8002b92:	ea6f 4050 	mvn.w	r0, r0, lsr #17
 8002b96:	b280      	uxth	r0, r0
 8002b98:	8010      	strh	r0, [r2, #0]
 8002b9a:	e025      	b.n	8002be8 <USB_EPStartXfer+0x288>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002b9c:	2e3e      	cmp	r6, #62	; 0x3e
 8002b9e:	d805      	bhi.n	8002bac <USB_EPStartXfer+0x24c>
 8002ba0:	0870      	lsrs	r0, r6, #1
 8002ba2:	07f7      	lsls	r7, r6, #31
 8002ba4:	bf48      	it	mi
 8002ba6:	3001      	addmi	r0, #1
 8002ba8:	0280      	lsls	r0, r0, #10
 8002baa:	e7c9      	b.n	8002b40 <USB_EPStartXfer+0x1e0>
 8002bac:	0977      	lsrs	r7, r6, #5
 8002bae:	06f0      	lsls	r0, r6, #27
 8002bb0:	4864      	ldr	r0, [pc, #400]	; (8002d44 <USB_EPStartXfer+0x3e4>)
 8002bb2:	bf08      	it	eq
 8002bb4:	f107 37ff 	addeq.w	r7, r7, #4294967295
 8002bb8:	ea40 2087 	orr.w	r0, r0, r7, lsl #10
 8002bbc:	e7c0      	b.n	8002b40 <USB_EPStartXfer+0x1e0>
 8002bbe:	2a01      	cmp	r2, #1
 8002bc0:	d1c0      	bne.n	8002b44 <USB_EPStartXfer+0x1e4>
 8002bc2:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8002bc6:	f205 4702 	addw	r7, r5, #1026	; 0x402
 8002bca:	fa17 f282 	uxtah	r2, r7, r2
 8002bce:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8002bd2:	8013      	strh	r3, [r2, #0]
 8002bd4:	e7b6      	b.n	8002b44 <USB_EPStartXfer+0x1e4>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002bd6:	283e      	cmp	r0, #62	; 0x3e
 8002bd8:	d808      	bhi.n	8002bec <USB_EPStartXfer+0x28c>
 8002bda:	0846      	lsrs	r6, r0, #1
 8002bdc:	07c0      	lsls	r0, r0, #31
 8002bde:	bf48      	it	mi
 8002be0:	3601      	addmi	r6, #1
 8002be2:	02b6      	lsls	r6, r6, #10
 8002be4:	b2b6      	uxth	r6, r6
 8002be6:	8016      	strh	r6, [r2, #0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002be8:	8962      	ldrh	r2, [r4, #10]
 8002bea:	e778      	b.n	8002ade <USB_EPStartXfer+0x17e>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002bec:	0946      	lsrs	r6, r0, #5
 8002bee:	06c7      	lsls	r7, r0, #27
 8002bf0:	4854      	ldr	r0, [pc, #336]	; (8002d44 <USB_EPStartXfer+0x3e4>)
 8002bf2:	bf08      	it	eq
 8002bf4:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8002bf8:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
 8002bfc:	e7cb      	b.n	8002b96 <USB_EPStartXfer+0x236>
 8002bfe:	2a01      	cmp	r2, #1
 8002c00:	d1f2      	bne.n	8002be8 <USB_EPStartXfer+0x288>
 8002c02:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8002c06:	7820      	ldrb	r0, [r4, #0]
 8002c08:	f205 4606 	addw	r6, r5, #1030	; 0x406
 8002c0c:	fa16 f282 	uxtah	r2, r6, r2
 8002c10:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8002c14:	8013      	strh	r3, [r2, #0]
 8002c16:	e7e7      	b.n	8002be8 <USB_EPStartXfer+0x288>
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8002c18:	f422 42e2 	bic.w	r2, r2, #28928	; 0x7100
 8002c1c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002c20:	0412      	lsls	r2, r2, #16
 8002c22:	0c12      	lsrs	r2, r2, #16
 8002c24:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c28:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002c2c:	f820 2027 	strh.w	r2, [r0, r7, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8002c30:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002c34:	7826      	ldrb	r6, [r4, #0]
 8002c36:	f200 4702 	addw	r7, r0, #1026	; 0x402
 8002c3a:	fa17 f282 	uxtah	r2, r7, r2
 8002c3e:	eb02 02c6 	add.w	r2, r2, r6, lsl #3
 8002c42:	b29b      	uxth	r3, r3
 8002c44:	8013      	strh	r3, [r2, #0]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002c46:	8922      	ldrh	r2, [r4, #8]
 8002c48:	e74a      	b.n	8002ae0 <USB_EPStartXfer+0x180>
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8002c4a:	f830 2027 	ldrh.w	r2, [r0, r7, lsl #2]
 8002c4e:	f012 0f40 	tst.w	r2, #64	; 0x40
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002c52:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002c56:	bf15      	itete	ne
 8002c58:	f200 4006 	addwne	r0, r0, #1030	; 0x406
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002c5c:	f205 4002 	addweq	r0, r5, #1026	; 0x402
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002c60:	fa10 f282 	uxtahne	r2, r0, r2
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002c64:	fa10 f282 	uxtaheq	r2, r0, r2
 8002c68:	b2b3      	uxth	r3, r6
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002c6a:	bf15      	itete	ne
 8002c6c:	f822 3037 	strhne.w	r3, [r2, r7, lsl #3]
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002c70:	f822 3037 	strheq.w	r3, [r2, r7, lsl #3]
          pmabuffer = ep->pmaaddr1;
 8002c74:	8962      	ldrhne	r2, [r4, #10]
          pmabuffer = ep->pmaaddr0;
 8002c76:	8922      	ldrheq	r2, [r4, #8]
        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002c78:	4628      	mov	r0, r5
 8002c7a:	f7ff fe62 	bl	8002942 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8002c7e:	7863      	ldrb	r3, [r4, #1]
 8002c80:	7822      	ldrb	r2, [r4, #0]
 8002c82:	b97b      	cbnz	r3, 8002ca4 <USB_EPStartXfer+0x344>
 8002c84:	b212      	sxth	r2, r2
 8002c86:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8002c8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c92:	041b      	lsls	r3, r3, #16
 8002c94:	0c1b      	lsrs	r3, r3, #16
 8002c96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c9a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002c9e:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 8002ca2:	e67b      	b.n	800299c <USB_EPStartXfer+0x3c>
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	f47f ae79 	bne.w	800299c <USB_EPStartXfer+0x3c>
 8002caa:	b212      	sxth	r2, r2
 8002cac:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8002cb0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cb8:	041b      	lsls	r3, r3, #16
 8002cba:	0c1b      	lsrs	r3, r3, #16
 8002cbc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002cc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cc4:	e7eb      	b.n	8002c9e <USB_EPStartXfer+0x33e>
    if (ep->doublebuffer == 0U)
 8002cc6:	2f00      	cmp	r7, #0
 8002cc8:	d13e      	bne.n	8002d48 <USB_EPStartXfer+0x3e8>
      if (ep->xfer_len > ep->maxpacket)
 8002cca:	698a      	ldr	r2, [r1, #24]
 8002ccc:	690b      	ldr	r3, [r1, #16]
 8002cce:	429a      	cmp	r2, r3
        ep->xfer_len -= len;
 8002cd0:	bf84      	itt	hi
 8002cd2:	1ad7      	subhi	r7, r2, r3
 8002cd4:	461a      	movhi	r2, r3
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8002cd6:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002cda:	618f      	str	r7, [r1, #24]
 8002cdc:	f200 4006 	addw	r0, r0, #1030	; 0x406
 8002ce0:	7809      	ldrb	r1, [r1, #0]
 8002ce2:	fa10 f383 	uxtah	r3, r0, r3
 8002ce6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8002cea:	b96a      	cbnz	r2, 8002d08 <USB_EPStartXfer+0x3a8>
 8002cec:	881a      	ldrh	r2, [r3, #0]
 8002cee:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8002cf2:	0412      	lsls	r2, r2, #16
 8002cf4:	0c12      	lsrs	r2, r2, #16
 8002cf6:	801a      	strh	r2, [r3, #0]
 8002cf8:	881a      	ldrh	r2, [r3, #0]
 8002cfa:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8002cfe:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002d02:	b292      	uxth	r2, r2
 8002d04:	801a      	strh	r2, [r3, #0]
 8002d06:	e008      	b.n	8002d1a <USB_EPStartXfer+0x3ba>
 8002d08:	2a3e      	cmp	r2, #62	; 0x3e
 8002d0a:	d812      	bhi.n	8002d32 <USB_EPStartXfer+0x3d2>
 8002d0c:	0851      	lsrs	r1, r2, #1
 8002d0e:	07d0      	lsls	r0, r2, #31
 8002d10:	bf48      	it	mi
 8002d12:	3101      	addmi	r1, #1
 8002d14:	0289      	lsls	r1, r1, #10
 8002d16:	b289      	uxth	r1, r1
 8002d18:	8019      	strh	r1, [r3, #0]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002d1a:	7822      	ldrb	r2, [r4, #0]
 8002d1c:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8002d20:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d28:	041b      	lsls	r3, r3, #16
 8002d2a:	0c1b      	lsrs	r3, r3, #16
 8002d2c:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002d30:	e63f      	b.n	80029b2 <USB_EPStartXfer+0x52>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8002d32:	0951      	lsrs	r1, r2, #5
 8002d34:	06d2      	lsls	r2, r2, #27
 8002d36:	4a03      	ldr	r2, [pc, #12]	; (8002d44 <USB_EPStartXfer+0x3e4>)
 8002d38:	bf08      	it	eq
 8002d3a:	f101 31ff 	addeq.w	r1, r1, #4294967295
 8002d3e:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8002d42:	e7de      	b.n	8002d02 <USB_EPStartXfer+0x3a2>
 8002d44:	ffff8000 	.word	0xffff8000
      if (ep->type == EP_TYPE_BULK)
 8002d48:	78cb      	ldrb	r3, [r1, #3]
 8002d4a:	2b02      	cmp	r3, #2
 8002d4c:	f040 8081 	bne.w	8002e52 <USB_EPStartXfer+0x4f2>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8002d50:	b9c2      	cbnz	r2, 8002d84 <USB_EPStartXfer+0x424>
 8002d52:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002d56:	780a      	ldrb	r2, [r1, #0]
 8002d58:	f200 4102 	addw	r1, r0, #1026	; 0x402
 8002d5c:	fa11 f383 	uxtah	r3, r1, r3
 8002d60:	6921      	ldr	r1, [r4, #16]
 8002d62:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002d66:	2900      	cmp	r1, #0
 8002d68:	d145      	bne.n	8002df6 <USB_EPStartXfer+0x496>
 8002d6a:	881a      	ldrh	r2, [r3, #0]
 8002d6c:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8002d70:	0412      	lsls	r2, r2, #16
 8002d72:	0c12      	lsrs	r2, r2, #16
 8002d74:	801a      	strh	r2, [r3, #0]
 8002d76:	881a      	ldrh	r2, [r3, #0]
 8002d78:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8002d7c:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002d80:	b292      	uxth	r2, r2
 8002d82:	801a      	strh	r2, [r3, #0]
 8002d84:	7862      	ldrb	r2, [r4, #1]
 8002d86:	7823      	ldrb	r3, [r4, #0]
 8002d88:	2a00      	cmp	r2, #0
 8002d8a:	d156      	bne.n	8002e3a <USB_EPStartXfer+0x4da>
 8002d8c:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8002d90:	f205 4106 	addw	r1, r5, #1030	; 0x406
 8002d94:	fa11 f282 	uxtah	r2, r1, r2
 8002d98:	6921      	ldr	r1, [r4, #16]
 8002d9a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8002d9e:	2900      	cmp	r1, #0
 8002da0:	d13a      	bne.n	8002e18 <USB_EPStartXfer+0x4b8>
 8002da2:	881a      	ldrh	r2, [r3, #0]
 8002da4:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8002da8:	0412      	lsls	r2, r2, #16
 8002daa:	0c12      	lsrs	r2, r2, #16
 8002dac:	801a      	strh	r2, [r3, #0]
 8002dae:	881a      	ldrh	r2, [r3, #0]
 8002db0:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8002db4:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002db8:	b292      	uxth	r2, r2
 8002dba:	801a      	strh	r2, [r3, #0]
        if (ep->xfer_count != 0U)
 8002dbc:	69e3      	ldr	r3, [r4, #28]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d0ab      	beq.n	8002d1a <USB_EPStartXfer+0x3ba>
 8002dc2:	7822      	ldrb	r2, [r4, #0]
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8002dc4:	f835 1022 	ldrh.w	r1, [r5, r2, lsl #2]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8002dc8:	f244 0340 	movw	r3, #16448	; 0x4040
 8002dcc:	ea03 0001 	and.w	r0, r3, r1
 8002dd0:	438b      	bics	r3, r1
 8002dd2:	d001      	beq.n	8002dd8 <USB_EPStartXfer+0x478>
 8002dd4:	2800      	cmp	r0, #0
 8002dd6:	d1a0      	bne.n	8002d1a <USB_EPStartXfer+0x3ba>
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8002dd8:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8002ddc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002de0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002de4:	041b      	lsls	r3, r3, #16
 8002de6:	0c1b      	lsrs	r3, r3, #16
 8002de8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002df0:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 8002df4:	e791      	b.n	8002d1a <USB_EPStartXfer+0x3ba>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8002df6:	293e      	cmp	r1, #62	; 0x3e
 8002df8:	d805      	bhi.n	8002e06 <USB_EPStartXfer+0x4a6>
 8002dfa:	084a      	lsrs	r2, r1, #1
 8002dfc:	07cf      	lsls	r7, r1, #31
 8002dfe:	bf48      	it	mi
 8002e00:	3201      	addmi	r2, #1
 8002e02:	0292      	lsls	r2, r2, #10
 8002e04:	e7bc      	b.n	8002d80 <USB_EPStartXfer+0x420>
 8002e06:	0948      	lsrs	r0, r1, #5
 8002e08:	4a49      	ldr	r2, [pc, #292]	; (8002f30 <USB_EPStartXfer+0x5d0>)
 8002e0a:	06ce      	lsls	r6, r1, #27
 8002e0c:	bf08      	it	eq
 8002e0e:	f100 30ff 	addeq.w	r0, r0, #4294967295
 8002e12:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 8002e16:	e7b3      	b.n	8002d80 <USB_EPStartXfer+0x420>
 8002e18:	293e      	cmp	r1, #62	; 0x3e
 8002e1a:	d805      	bhi.n	8002e28 <USB_EPStartXfer+0x4c8>
 8002e1c:	084a      	lsrs	r2, r1, #1
 8002e1e:	07c9      	lsls	r1, r1, #31
 8002e20:	bf48      	it	mi
 8002e22:	3201      	addmi	r2, #1
 8002e24:	0292      	lsls	r2, r2, #10
 8002e26:	e7c7      	b.n	8002db8 <USB_EPStartXfer+0x458>
 8002e28:	0948      	lsrs	r0, r1, #5
 8002e2a:	06ca      	lsls	r2, r1, #27
 8002e2c:	4a40      	ldr	r2, [pc, #256]	; (8002f30 <USB_EPStartXfer+0x5d0>)
 8002e2e:	bf08      	it	eq
 8002e30:	f100 30ff 	addeq.w	r0, r0, #4294967295
 8002e34:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 8002e38:	e7be      	b.n	8002db8 <USB_EPStartXfer+0x458>
 8002e3a:	2a01      	cmp	r2, #1
 8002e3c:	d1be      	bne.n	8002dbc <USB_EPStartXfer+0x45c>
 8002e3e:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8002e42:	f205 4106 	addw	r1, r5, #1030	; 0x406
 8002e46:	fa11 f282 	uxtah	r2, r1, r2
 8002e4a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8002e4e:	8a22      	ldrh	r2, [r4, #16]
 8002e50:	e7b3      	b.n	8002dba <USB_EPStartXfer+0x45a>
      else if (ep->type == EP_TYPE_ISOC)
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d16a      	bne.n	8002f2c <USB_EPStartXfer+0x5cc>
        if (ep->xfer_len > ep->maxpacket)
 8002e56:	698b      	ldr	r3, [r1, #24]
 8002e58:	6909      	ldr	r1, [r1, #16]
 8002e5a:	428b      	cmp	r3, r1
          ep->xfer_len -= len;
 8002e5c:	bf8a      	itet	hi
 8002e5e:	1a58      	subhi	r0, r3, r1
          ep->xfer_len = 0U;
 8002e60:	2000      	movls	r0, #0
 8002e62:	460b      	movhi	r3, r1
 8002e64:	61a0      	str	r0, [r4, #24]
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8002e66:	b9b2      	cbnz	r2, 8002e96 <USB_EPStartXfer+0x536>
 8002e68:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8002e6c:	7821      	ldrb	r1, [r4, #0]
 8002e6e:	f205 4002 	addw	r0, r5, #1026	; 0x402
 8002e72:	fa10 f282 	uxtah	r2, r0, r2
 8002e76:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8002e7a:	bb3b      	cbnz	r3, 8002ecc <USB_EPStartXfer+0x56c>
 8002e7c:	8811      	ldrh	r1, [r2, #0]
 8002e7e:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 8002e82:	0409      	lsls	r1, r1, #16
 8002e84:	0c09      	lsrs	r1, r1, #16
 8002e86:	8011      	strh	r1, [r2, #0]
 8002e88:	8811      	ldrh	r1, [r2, #0]
 8002e8a:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8002e8e:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8002e92:	b289      	uxth	r1, r1
 8002e94:	8011      	strh	r1, [r2, #0]
 8002e96:	7861      	ldrb	r1, [r4, #1]
 8002e98:	7822      	ldrb	r2, [r4, #0]
 8002e9a:	2900      	cmp	r1, #0
 8002e9c:	d13a      	bne.n	8002f14 <USB_EPStartXfer+0x5b4>
 8002e9e:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 8002ea2:	f205 4006 	addw	r0, r5, #1030	; 0x406
 8002ea6:	fa10 f181 	uxtah	r1, r0, r1
 8002eaa:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8002eae:	b9f3      	cbnz	r3, 8002eee <USB_EPStartXfer+0x58e>
 8002eb0:	8813      	ldrh	r3, [r2, #0]
 8002eb2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002eb6:	041b      	lsls	r3, r3, #16
 8002eb8:	0c1b      	lsrs	r3, r3, #16
 8002eba:	8013      	strh	r3, [r2, #0]
 8002ebc:	8813      	ldrh	r3, [r2, #0]
 8002ebe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ec2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ec6:	b29b      	uxth	r3, r3
 8002ec8:	8013      	strh	r3, [r2, #0]
 8002eca:	e726      	b.n	8002d1a <USB_EPStartXfer+0x3ba>
 8002ecc:	2b3e      	cmp	r3, #62	; 0x3e
 8002ece:	d805      	bhi.n	8002edc <USB_EPStartXfer+0x57c>
 8002ed0:	0859      	lsrs	r1, r3, #1
 8002ed2:	07df      	lsls	r7, r3, #31
 8002ed4:	bf48      	it	mi
 8002ed6:	3101      	addmi	r1, #1
 8002ed8:	0289      	lsls	r1, r1, #10
 8002eda:	e7da      	b.n	8002e92 <USB_EPStartXfer+0x532>
 8002edc:	0958      	lsrs	r0, r3, #5
 8002ede:	4914      	ldr	r1, [pc, #80]	; (8002f30 <USB_EPStartXfer+0x5d0>)
 8002ee0:	06de      	lsls	r6, r3, #27
 8002ee2:	bf08      	it	eq
 8002ee4:	f100 30ff 	addeq.w	r0, r0, #4294967295
 8002ee8:	ea41 2180 	orr.w	r1, r1, r0, lsl #10
 8002eec:	e7d1      	b.n	8002e92 <USB_EPStartXfer+0x532>
 8002eee:	2b3e      	cmp	r3, #62	; 0x3e
 8002ef0:	d807      	bhi.n	8002f02 <USB_EPStartXfer+0x5a2>
 8002ef2:	0859      	lsrs	r1, r3, #1
 8002ef4:	07d8      	lsls	r0, r3, #31
 8002ef6:	bf48      	it	mi
 8002ef8:	3101      	addmi	r1, #1
 8002efa:	0289      	lsls	r1, r1, #10
 8002efc:	b289      	uxth	r1, r1
 8002efe:	8011      	strh	r1, [r2, #0]
 8002f00:	e70b      	b.n	8002d1a <USB_EPStartXfer+0x3ba>
 8002f02:	0959      	lsrs	r1, r3, #5
 8002f04:	06db      	lsls	r3, r3, #27
 8002f06:	4b0a      	ldr	r3, [pc, #40]	; (8002f30 <USB_EPStartXfer+0x5d0>)
 8002f08:	bf08      	it	eq
 8002f0a:	f101 31ff 	addeq.w	r1, r1, #4294967295
 8002f0e:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8002f12:	e7d8      	b.n	8002ec6 <USB_EPStartXfer+0x566>
 8002f14:	2901      	cmp	r1, #1
 8002f16:	f47f af00 	bne.w	8002d1a <USB_EPStartXfer+0x3ba>
 8002f1a:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 8002f1e:	f205 4006 	addw	r0, r5, #1030	; 0x406
 8002f22:	fa10 f181 	uxtah	r1, r0, r1
 8002f26:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8002f2a:	e7cc      	b.n	8002ec6 <USB_EPStartXfer+0x566>
        return HAL_ERROR;
 8002f2c:	2001      	movs	r0, #1
 8002f2e:	e547      	b.n	80029c0 <USB_EPStartXfer+0x60>
 8002f30:	ffff8000 	.word	0xffff8000

08002f34 <USB_ReadPMA>:
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8002f34:	f502 6280 	add.w	r2, r2, #1024	; 0x400
{
 8002f38:	b5f0      	push	{r4, r5, r6, r7, lr}
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8002f3a:	4410      	add	r0, r2
  uint32_t n = (uint32_t)wNBytes >> 1;
 8002f3c:	085e      	lsrs	r6, r3, #1

  for (i = n; i != 0U; i--)
 8002f3e:	460d      	mov	r5, r1
 8002f40:	4632      	mov	r2, r6
 8002f42:	1a47      	subs	r7, r0, r1
 8002f44:	197c      	adds	r4, r7, r5
 8002f46:	3502      	adds	r5, #2
 8002f48:	b932      	cbnz	r2, 8002f58 <USB_ReadPMA+0x24>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8002f4a:	07db      	lsls	r3, r3, #31
  {
    temp = *pdwVal;
 8002f4c:	bf44      	itt	mi
 8002f4e:	f830 3016 	ldrhmi.w	r3, [r0, r6, lsl #1]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8002f52:	f801 3016 	strbmi.w	r3, [r1, r6, lsl #1]
  }
}
 8002f56:	bdf0      	pop	{r4, r5, r6, r7, pc}
    temp = *(__IO uint16_t *)pdwVal;
 8002f58:	8824      	ldrh	r4, [r4, #0]
 8002f5a:	b2a4      	uxth	r4, r4
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8002f5c:	f805 4c02 	strb.w	r4, [r5, #-2]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8002f60:	0a24      	lsrs	r4, r4, #8
 8002f62:	f805 4c01 	strb.w	r4, [r5, #-1]
  for (i = n; i != 0U; i--)
 8002f66:	3a01      	subs	r2, #1
 8002f68:	e7ec      	b.n	8002f44 <USB_ReadPMA+0x10>
	...

08002f6c <registerWrite>:
	HAL_Delay(1000);
	return 0;
};

static uint8_t registerWrite(uint8_t address, uint8_t cmd)
{
 8002f6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t tmp[3];
	tmp[0] = address;
	tmp[1] = cmd;
	char result = 1;

	result = HAL_I2C_Master_Transmit(&HandleI2C, GESTURE_ADDRESS_I2C, tmp, 2, 100);
 8002f6e:	2364      	movs	r3, #100	; 0x64
	tmp[0] = address;
 8002f70:	f88d 000c 	strb.w	r0, [sp, #12]
	tmp[1] = cmd;
 8002f74:	f88d 100d 	strb.w	r1, [sp, #13]
	result = HAL_I2C_Master_Transmit(&HandleI2C, GESTURE_ADDRESS_I2C, tmp, 2, 100);
 8002f78:	9300      	str	r3, [sp, #0]
 8002f7a:	aa03      	add	r2, sp, #12
 8002f7c:	4812      	ldr	r0, [pc, #72]	; (8002fc8 <registerWrite+0x5c>)
 8002f7e:	2302      	movs	r3, #2
 8002f80:	2173      	movs	r1, #115	; 0x73
 8002f82:	f7fd ff01 	bl	8000d88 <HAL_I2C_Master_Transmit>

	if (result != HAL_OK)
 8002f86:	4602      	mov	r2, r0
 8002f88:	b1c0      	cbz	r0, 8002fbc <registerWrite+0x50>
	{
		sprintf((char*)ref, "\r\n Transmission Error %d", result);
 8002f8a:	4910      	ldr	r1, [pc, #64]	; (8002fcc <registerWrite+0x60>)
 8002f8c:	4810      	ldr	r0, [pc, #64]	; (8002fd0 <registerWrite+0x64>)
 8002f8e:	f000 fa9d 	bl	80034cc <siprintf>
		printf("Transmission Error \n");
 8002f92:	4810      	ldr	r0, [pc, #64]	; (8002fd4 <registerWrite+0x68>)
 8002f94:	f000 fa92 	bl	80034bc <puts>
	}else{
		sprintf((char*)ref, "\r\n Transmission Successful %d", result);
	}
	HAL_UART_Transmit(&huart3, ref, strlen((char*)ref), HAL_MAX_DELAY);
 8002f98:	480d      	ldr	r0, [pc, #52]	; (8002fd0 <registerWrite+0x64>)
 8002f9a:	f7fd f921 	bl	80001e0 <strlen>
 8002f9e:	490c      	ldr	r1, [pc, #48]	; (8002fd0 <registerWrite+0x64>)
 8002fa0:	b282      	uxth	r2, r0
 8002fa2:	f04f 33ff 	mov.w	r3, #4294967295
 8002fa6:	480c      	ldr	r0, [pc, #48]	; (8002fd8 <registerWrite+0x6c>)
 8002fa8:	f7ff fbe8 	bl	800277c <HAL_UART_Transmit>
	HAL_Delay(1000);
 8002fac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002fb0:	f7fd fc2e 	bl	8000810 <HAL_Delay>
	return 0;
};
 8002fb4:	2000      	movs	r0, #0
 8002fb6:	b005      	add	sp, #20
 8002fb8:	f85d fb04 	ldr.w	pc, [sp], #4
		sprintf((char*)ref, "\r\n Transmission Successful %d", result);
 8002fbc:	4907      	ldr	r1, [pc, #28]	; (8002fdc <registerWrite+0x70>)
 8002fbe:	4804      	ldr	r0, [pc, #16]	; (8002fd0 <registerWrite+0x64>)
 8002fc0:	f000 fa84 	bl	80034cc <siprintf>
 8002fc4:	e7e8      	b.n	8002f98 <registerWrite+0x2c>
 8002fc6:	bf00      	nop
 8002fc8:	20000344 	.word	0x20000344
 8002fcc:	0800474f 	.word	0x0800474f
 8002fd0:	20000680 	.word	0x20000680
 8002fd4:	08004768 	.word	0x08004768
 8002fd8:	20000250 	.word	0x20000250
 8002fdc:	0800477c 	.word	0x0800477c

08002fe0 <registerRead.constprop.0>:
static uint8_t registerRead(uint8_t address, uint8_t qty, uint8_t data[])
 8002fe0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	result = HAL_I2C_Master_Transmit(&HandleI2C, GESTURE_ADDRESS_I2C, tmp, 1, 100);
 8002fe2:	2264      	movs	r2, #100	; 0x64
	tmp[0] = address;
 8002fe4:	f88d 000c 	strb.w	r0, [sp, #12]
	tmp[1] = qty;
 8002fe8:	2301      	movs	r3, #1
	result = HAL_I2C_Master_Transmit(&HandleI2C, GESTURE_ADDRESS_I2C, tmp, 1, 100);
 8002fea:	9200      	str	r2, [sp, #0]
 8002fec:	481e      	ldr	r0, [pc, #120]	; (8003068 <registerRead.constprop.0+0x88>)
	tmp[1] = qty;
 8002fee:	f88d 300d 	strb.w	r3, [sp, #13]
	result = HAL_I2C_Master_Transmit(&HandleI2C, GESTURE_ADDRESS_I2C, tmp, 1, 100);
 8002ff2:	aa03      	add	r2, sp, #12
static uint8_t registerRead(uint8_t address, uint8_t qty, uint8_t data[])
 8002ff4:	460c      	mov	r4, r1
	result = HAL_I2C_Master_Transmit(&HandleI2C, GESTURE_ADDRESS_I2C, tmp, 1, 100);
 8002ff6:	2173      	movs	r1, #115	; 0x73
 8002ff8:	f7fd fec6 	bl	8000d88 <HAL_I2C_Master_Transmit>
	if (result != HAL_OK)
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	b340      	cbz	r0, 8003052 <registerRead.constprop.0+0x72>
		sprintf((char*)ref, "\r\n Error TX %d", result);
 8003000:	491a      	ldr	r1, [pc, #104]	; (800306c <registerRead.constprop.0+0x8c>)
 8003002:	481b      	ldr	r0, [pc, #108]	; (8003070 <registerRead.constprop.0+0x90>)
 8003004:	f000 fa62 	bl	80034cc <siprintf>
		printf("Error TX \n");
 8003008:	481a      	ldr	r0, [pc, #104]	; (8003074 <registerRead.constprop.0+0x94>)
 800300a:	f000 fa57 	bl	80034bc <puts>
	result = HAL_I2C_Master_Receive(&HandleI2C, GESTURE_ADDRESS_I2C, data, qty, 100);
 800300e:	2364      	movs	r3, #100	; 0x64
 8003010:	9300      	str	r3, [sp, #0]
 8003012:	4622      	mov	r2, r4
 8003014:	4814      	ldr	r0, [pc, #80]	; (8003068 <registerRead.constprop.0+0x88>)
 8003016:	2301      	movs	r3, #1
 8003018:	2173      	movs	r1, #115	; 0x73
 800301a:	f7fd ff4b 	bl	8000eb4 <HAL_I2C_Master_Receive>
	if (result != HAL_OK){
 800301e:	4602      	mov	r2, r0
 8003020:	b1e0      	cbz	r0, 800305c <registerRead.constprop.0+0x7c>
		sprintf((char*)ref, "\r\n Error RX %d", result);
 8003022:	4915      	ldr	r1, [pc, #84]	; (8003078 <registerRead.constprop.0+0x98>)
 8003024:	4812      	ldr	r0, [pc, #72]	; (8003070 <registerRead.constprop.0+0x90>)
 8003026:	f000 fa51 	bl	80034cc <siprintf>
		printf("Error RX \n");
 800302a:	4814      	ldr	r0, [pc, #80]	; (800307c <registerRead.constprop.0+0x9c>)
 800302c:	f000 fa46 	bl	80034bc <puts>
	HAL_UART_Transmit(&huart3, ref, strlen((char*)ref), HAL_MAX_DELAY);
 8003030:	480f      	ldr	r0, [pc, #60]	; (8003070 <registerRead.constprop.0+0x90>)
 8003032:	f7fd f8d5 	bl	80001e0 <strlen>
 8003036:	490e      	ldr	r1, [pc, #56]	; (8003070 <registerRead.constprop.0+0x90>)
 8003038:	b282      	uxth	r2, r0
 800303a:	f04f 33ff 	mov.w	r3, #4294967295
 800303e:	4810      	ldr	r0, [pc, #64]	; (8003080 <registerRead.constprop.0+0xa0>)
 8003040:	f7ff fb9c 	bl	800277c <HAL_UART_Transmit>
	HAL_Delay(1000);
 8003044:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003048:	f7fd fbe2 	bl	8000810 <HAL_Delay>
};
 800304c:	2000      	movs	r0, #0
 800304e:	b004      	add	sp, #16
 8003050:	bd10      	pop	{r4, pc}
		sprintf((char*)ref, "\r\n Transmitted %d", result);
 8003052:	490c      	ldr	r1, [pc, #48]	; (8003084 <registerRead.constprop.0+0xa4>)
 8003054:	4806      	ldr	r0, [pc, #24]	; (8003070 <registerRead.constprop.0+0x90>)
 8003056:	f000 fa39 	bl	80034cc <siprintf>
 800305a:	e7d8      	b.n	800300e <registerRead.constprop.0+0x2e>
		sprintf((char*)ref, "\r\n Received %d", result);
 800305c:	490a      	ldr	r1, [pc, #40]	; (8003088 <registerRead.constprop.0+0xa8>)
 800305e:	4804      	ldr	r0, [pc, #16]	; (8003070 <registerRead.constprop.0+0x90>)
 8003060:	f000 fa34 	bl	80034cc <siprintf>
 8003064:	e7e4      	b.n	8003030 <registerRead.constprop.0+0x50>
 8003066:	bf00      	nop
 8003068:	20000344 	.word	0x20000344
 800306c:	0800479a 	.word	0x0800479a
 8003070:	20000680 	.word	0x20000680
 8003074:	080047a9 	.word	0x080047a9
 8003078:	080047c5 	.word	0x080047c5
 800307c:	080047d4 	.word	0x080047d4
 8003080:	20000250 	.word	0x20000250
 8003084:	080047b3 	.word	0x080047b3
 8003088:	080047de 	.word	0x080047de

0800308c <GESTURE_Actions>:
{
 800308c:	b507      	push	{r0, r1, r2, lr}
	uint8_t data0 = 0, error;
 800308e:	2300      	movs	r3, #0
	error = registerRead(0x43, 1, &data0); /* Read Bank 0 for gestures */
 8003090:	f10d 0107 	add.w	r1, sp, #7
 8003094:	2043      	movs	r0, #67	; 0x43
	uint8_t data0 = 0, error;
 8003096:	f88d 3007 	strb.w	r3, [sp, #7]
	error = registerRead(0x43, 1, &data0); /* Read Bank 0 for gestures */
 800309a:	f7ff ffa1 	bl	8002fe0 <registerRead.constprop.0>
	if(!error){
 800309e:	b9c8      	cbnz	r0, 80030d4 <GESTURE_Actions+0x48>
		switch(data0){ /* When will gestures be detected, the "data" will change */
 80030a0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80030a4:	2b10      	cmp	r3, #16
 80030a6:	f000 8099 	beq.w	80031dc <GESTURE_Actions+0x150>
 80030aa:	d80b      	bhi.n	80030c4 <GESTURE_Actions+0x38>
 80030ac:	3b01      	subs	r3, #1
 80030ae:	b2da      	uxtb	r2, r3
 80030b0:	2a07      	cmp	r2, #7
 80030b2:	d80f      	bhi.n	80030d4 <GESTURE_Actions+0x48>
 80030b4:	2b07      	cmp	r3, #7
 80030b6:	d80d      	bhi.n	80030d4 <GESTURE_Actions+0x48>
 80030b8:	e8df f003 	tbb	[pc, r3]
 80030bc:	540c3e1d 	.word	0x540c3e1d
 80030c0:	740c0c0c 	.word	0x740c0c0c
 80030c4:	2b40      	cmp	r3, #64	; 0x40
 80030c6:	d044      	beq.n	8003152 <GESTURE_Actions+0xc6>
 80030c8:	2b80      	cmp	r3, #128	; 0x80
 80030ca:	f000 8091 	beq.w	80031f0 <GESTURE_Actions+0x164>
 80030ce:	2b20      	cmp	r3, #32
 80030d0:	f000 8089 	beq.w	80031e6 <GESTURE_Actions+0x15a>
	HAL_UART_Transmit(&huart3, ref, strlen((char*)ref), HAL_MAX_DELAY);
 80030d4:	4847      	ldr	r0, [pc, #284]	; (80031f4 <GESTURE_Actions+0x168>)
 80030d6:	f7fd f883 	bl	80001e0 <strlen>
 80030da:	4946      	ldr	r1, [pc, #280]	; (80031f4 <GESTURE_Actions+0x168>)
 80030dc:	b282      	uxth	r2, r0
 80030de:	f04f 33ff 	mov.w	r3, #4294967295
 80030e2:	4845      	ldr	r0, [pc, #276]	; (80031f8 <GESTURE_Actions+0x16c>)
 80030e4:	f7ff fb4a 	bl	800277c <HAL_UART_Transmit>
	HAL_Delay(500);
 80030e8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80030ec:	f7fd fb90 	bl	8000810 <HAL_Delay>
};
 80030f0:	b003      	add	sp, #12
 80030f2:	f85d fb04 	ldr.w	pc, [sp], #4
			HAL_Delay(GEST_ENTR_T);
 80030f6:	f44f 7016 	mov.w	r0, #600	; 0x258
 80030fa:	f7fd fb89 	bl	8000810 <HAL_Delay>
			registerRead(0x43, 1, &data0);
 80030fe:	f10d 0107 	add.w	r1, sp, #7
 8003102:	2043      	movs	r0, #67	; 0x43
 8003104:	f7ff ff6c 	bl	8002fe0 <registerRead.constprop.0>
			if(data0 == GestureForward){
 8003108:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800310c:	2b40      	cmp	r3, #64	; 0x40
 800310e:	d104      	bne.n	800311a <GESTURE_Actions+0x8e>
				printf("Forward Gesture \n");
 8003110:	483a      	ldr	r0, [pc, #232]	; (80031fc <GESTURE_Actions+0x170>)
			printf("Forward \n");
 8003112:	f000 f9d3 	bl	80034bc <puts>
			strcpy((char*)ref, "\r\n Forward Gesture");
 8003116:	493a      	ldr	r1, [pc, #232]	; (8003200 <GESTURE_Actions+0x174>)
 8003118:	e035      	b.n	8003186 <GESTURE_Actions+0xfa>
			}else if(data0 == GestureBackwards){
 800311a:	2b80      	cmp	r3, #128	; 0x80
 800311c:	d104      	bne.n	8003128 <GESTURE_Actions+0x9c>
				printf("Backwards \n");
 800311e:	4839      	ldr	r0, [pc, #228]	; (8003204 <GESTURE_Actions+0x178>)
			printf("Backwards Gesture \n");
 8003120:	f000 f9cc 	bl	80034bc <puts>
			strcpy((char*)ref, "\r\n Backwards Gesture");
 8003124:	4938      	ldr	r1, [pc, #224]	; (8003208 <GESTURE_Actions+0x17c>)
 8003126:	e02e      	b.n	8003186 <GESTURE_Actions+0xfa>
				printf("Right \n");
 8003128:	4838      	ldr	r0, [pc, #224]	; (800320c <GESTURE_Actions+0x180>)
 800312a:	f000 f9c7 	bl	80034bc <puts>
				strcpy((char*)ref, "\r\n Gesture Right");
 800312e:	4938      	ldr	r1, [pc, #224]	; (8003210 <GESTURE_Actions+0x184>)
				strcpy((char*)ref, "\r\n Upwards Gesture");
 8003130:	4830      	ldr	r0, [pc, #192]	; (80031f4 <GESTURE_Actions+0x168>)
 8003132:	f000 f9eb 	bl	800350c <strcpy>
 8003136:	e7cd      	b.n	80030d4 <GESTURE_Actions+0x48>
			HAL_Delay(GEST_ENTR_T);
 8003138:	f44f 7016 	mov.w	r0, #600	; 0x258
 800313c:	f7fd fb68 	bl	8000810 <HAL_Delay>
			registerRead(0x43, 1, &data0);
 8003140:	f10d 0107 	add.w	r1, sp, #7
 8003144:	2043      	movs	r0, #67	; 0x43
 8003146:	f7ff ff4b 	bl	8002fe0 <registerRead.constprop.0>
			if(data0 == GestureForward){
 800314a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800314e:	2b40      	cmp	r3, #64	; 0x40
 8003150:	d101      	bne.n	8003156 <GESTURE_Actions+0xca>
			printf("Forward \n");
 8003152:	4830      	ldr	r0, [pc, #192]	; (8003214 <GESTURE_Actions+0x188>)
 8003154:	e7dd      	b.n	8003112 <GESTURE_Actions+0x86>
			}else if(data0 == GestureBackwards){
 8003156:	2b80      	cmp	r3, #128	; 0x80
 8003158:	d0e1      	beq.n	800311e <GESTURE_Actions+0x92>
				printf("Left \n");
 800315a:	482f      	ldr	r0, [pc, #188]	; (8003218 <GESTURE_Actions+0x18c>)
 800315c:	f000 f9ae 	bl	80034bc <puts>
				strcpy((char*)ref, "\r\n Gesture Left");
 8003160:	492e      	ldr	r1, [pc, #184]	; (800321c <GESTURE_Actions+0x190>)
 8003162:	e7e5      	b.n	8003130 <GESTURE_Actions+0xa4>
			HAL_Delay(GEST_ENTR_T);
 8003164:	f44f 7016 	mov.w	r0, #600	; 0x258
 8003168:	f7fd fb52 	bl	8000810 <HAL_Delay>
			registerRead(0x43, 1, &data0);
 800316c:	f10d 0107 	add.w	r1, sp, #7
 8003170:	2043      	movs	r0, #67	; 0x43
 8003172:	f7ff ff35 	bl	8002fe0 <registerRead.constprop.0>
			if(data0 == GestureForward){
 8003176:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800317a:	2b40      	cmp	r3, #64	; 0x40
 800317c:	d10b      	bne.n	8003196 <GESTURE_Actions+0x10a>
				printf("Forward \n");
 800317e:	4825      	ldr	r0, [pc, #148]	; (8003214 <GESTURE_Actions+0x188>)
 8003180:	f000 f99c 	bl	80034bc <puts>
				strcpy((char*)ref, "\n\r Forward Gesture");
 8003184:	4926      	ldr	r1, [pc, #152]	; (8003220 <GESTURE_Actions+0x194>)
			strcpy((char*)ref, "\r\n Backwards Gesture");
 8003186:	481b      	ldr	r0, [pc, #108]	; (80031f4 <GESTURE_Actions+0x168>)
 8003188:	f000 f9c0 	bl	800350c <strcpy>
			HAL_Delay(GEST_QUIT_T);
 800318c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003190:	f7fd fb3e 	bl	8000810 <HAL_Delay>
			break;
 8003194:	e79e      	b.n	80030d4 <GESTURE_Actions+0x48>
			}else if(data0 == GestureBackwards){
 8003196:	2b80      	cmp	r3, #128	; 0x80
 8003198:	d0c1      	beq.n	800311e <GESTURE_Actions+0x92>
				printf("Up \n");
 800319a:	4822      	ldr	r0, [pc, #136]	; (8003224 <GESTURE_Actions+0x198>)
 800319c:	f000 f98e 	bl	80034bc <puts>
				strcpy((char*)ref, "\r\n Upwards Gesture");
 80031a0:	4921      	ldr	r1, [pc, #132]	; (8003228 <GESTURE_Actions+0x19c>)
 80031a2:	e7c5      	b.n	8003130 <GESTURE_Actions+0xa4>
			HAL_Delay(GEST_ENTR_T);
 80031a4:	f44f 7016 	mov.w	r0, #600	; 0x258
 80031a8:	f7fd fb32 	bl	8000810 <HAL_Delay>
			registerRead(0x43, 1, &data0);
 80031ac:	f10d 0107 	add.w	r1, sp, #7
 80031b0:	2043      	movs	r0, #67	; 0x43
 80031b2:	f7ff ff15 	bl	8002fe0 <registerRead.constprop.0>
			if(data0 == GestureForward){
 80031b6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80031ba:	2b40      	cmp	r3, #64	; 0x40
 80031bc:	d0c9      	beq.n	8003152 <GESTURE_Actions+0xc6>
			}else if(data0 == GestureBackwards){
 80031be:	2b80      	cmp	r3, #128	; 0x80
 80031c0:	d104      	bne.n	80031cc <GESTURE_Actions+0x140>
				printf("Backwards \n");
 80031c2:	4810      	ldr	r0, [pc, #64]	; (8003204 <GESTURE_Actions+0x178>)
 80031c4:	f000 f97a 	bl	80034bc <puts>
				strcpy((char*)ref, "\n\r Backwards Gesture");
 80031c8:	4918      	ldr	r1, [pc, #96]	; (800322c <GESTURE_Actions+0x1a0>)
 80031ca:	e7dc      	b.n	8003186 <GESTURE_Actions+0xfa>
				strcpy((char*)ref, "\r\n Downwards Gesture");
 80031cc:	4918      	ldr	r1, [pc, #96]	; (8003230 <GESTURE_Actions+0x1a4>)
 80031ce:	4809      	ldr	r0, [pc, #36]	; (80031f4 <GESTURE_Actions+0x168>)
 80031d0:	f000 f99c 	bl	800350c <strcpy>
				printf("Downwards Gesture \n");
 80031d4:	4817      	ldr	r0, [pc, #92]	; (8003234 <GESTURE_Actions+0x1a8>)
 80031d6:	f000 f971 	bl	80034bc <puts>
 80031da:	e77b      	b.n	80030d4 <GESTURE_Actions+0x48>
			printf("Clockwise Gesture \n");
 80031dc:	4816      	ldr	r0, [pc, #88]	; (8003238 <GESTURE_Actions+0x1ac>)
 80031de:	f000 f96d 	bl	80034bc <puts>
			strcpy((char*)ref, "\r\n Clockwise Gesture");
 80031e2:	4916      	ldr	r1, [pc, #88]	; (800323c <GESTURE_Actions+0x1b0>)
 80031e4:	e7cf      	b.n	8003186 <GESTURE_Actions+0xfa>
			printf("Anti-Clockwise Gesture \n");
 80031e6:	4816      	ldr	r0, [pc, #88]	; (8003240 <GESTURE_Actions+0x1b4>)
 80031e8:	f000 f968 	bl	80034bc <puts>
			strcpy((char*)ref, "\r\n Anti-clockwise Gesture");
 80031ec:	4915      	ldr	r1, [pc, #84]	; (8003244 <GESTURE_Actions+0x1b8>)
 80031ee:	e7ca      	b.n	8003186 <GESTURE_Actions+0xfa>
			printf("Backwards Gesture \n");
 80031f0:	4815      	ldr	r0, [pc, #84]	; (8003248 <GESTURE_Actions+0x1bc>)
 80031f2:	e795      	b.n	8003120 <GESTURE_Actions+0x94>
 80031f4:	20000680 	.word	0x20000680
 80031f8:	20000250 	.word	0x20000250
 80031fc:	080047ed 	.word	0x080047ed
 8003200:	080047fe 	.word	0x080047fe
 8003204:	08004811 	.word	0x08004811
 8003208:	0800481c 	.word	0x0800481c
 800320c:	08004831 	.word	0x08004831
 8003210:	08004838 	.word	0x08004838
 8003214:	08004849 	.word	0x08004849
 8003218:	08004852 	.word	0x08004852
 800321c:	08004858 	.word	0x08004858
 8003220:	08004868 	.word	0x08004868
 8003224:	0800487b 	.word	0x0800487b
 8003228:	0800487f 	.word	0x0800487f
 800322c:	08004892 	.word	0x08004892
 8003230:	080048a7 	.word	0x080048a7
 8003234:	080048bc 	.word	0x080048bc
 8003238:	080048e9 	.word	0x080048e9
 800323c:	080048cf 	.word	0x080048cf
 8003240:	080048e4 	.word	0x080048e4
 8003244:	080048fc 	.word	0x080048fc
 8003248:	08004916 	.word	0x08004916

0800324c <gestureInit>:



uint8_t gestureInit(void)
{
 800324c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	uint8_t data0 = 0;
 800324e:	2500      	movs	r5, #0
	uint8_t data1 = 1;
 8003250:	2401      	movs	r4, #1
	int result = 0;

	registerWrite(GESTURE_REG_BANK_SEL, GESTURE_BANK0);
 8003252:	4629      	mov	r1, r5
 8003254:	20ef      	movs	r0, #239	; 0xef
	uint8_t data0 = 0;
 8003256:	f88d 5006 	strb.w	r5, [sp, #6]
	uint8_t data1 = 1;
 800325a:	f88d 4007 	strb.w	r4, [sp, #7]
	registerWrite(GESTURE_REG_BANK_SEL, GESTURE_BANK0);
 800325e:	f7ff fe85 	bl	8002f6c <registerWrite>
	registerWrite(GESTURE_REG_BANK_SEL, GESTURE_BANK0);
 8003262:	4629      	mov	r1, r5
 8003264:	20ef      	movs	r0, #239	; 0xef
 8003266:	f7ff fe81 	bl	8002f6c <registerWrite>

	registerRead(0,1, &data0);
 800326a:	f10d 0106 	add.w	r1, sp, #6
 800326e:	4628      	mov	r0, r5
 8003270:	f7ff feb6 	bl	8002fe0 <registerRead.constprop.0>
	registerRead(1,1, &data1);
 8003274:	f10d 0107 	add.w	r1, sp, #7
 8003278:	4620      	mov	r0, r4
 800327a:	f7ff feb1 	bl	8002fe0 <registerRead.constprop.0>

	if ((data0 != 0x20) || (data1 != 0x76)){
 800327e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8003282:	2b20      	cmp	r3, #32
 8003284:	d10b      	bne.n	800329e <gestureInit+0x52>
 8003286:	f89d 4007 	ldrb.w	r4, [sp, #7]
		result = 1;
	}

	if(data0 == 0x20){
		strcpy((char*)ref, "\n\r Wake Up");
 800328a:	4914      	ldr	r1, [pc, #80]	; (80032dc <gestureInit+0x90>)
 800328c:	4814      	ldr	r0, [pc, #80]	; (80032e0 <gestureInit+0x94>)
	if ((data0 != 0x20) || (data1 != 0x76)){
 800328e:	3c76      	subs	r4, #118	; 0x76
 8003290:	bf18      	it	ne
 8003292:	2401      	movne	r4, #1
		strcpy((char*)ref, "\n\r Wake Up");
 8003294:	f000 f93a 	bl	800350c <strcpy>
		printf("\n\r Wake Up");
 8003298:	4810      	ldr	r0, [pc, #64]	; (80032dc <gestureInit+0x90>)
 800329a:	f000 f889 	bl	80033b0 <iprintf>
	}

	for(int i = 0; i < InitialRegister; i++){
 800329e:	4e11      	ldr	r6, [pc, #68]	; (80032e4 <gestureInit+0x98>)
		result = 1;
 80032a0:	2500      	movs	r5, #0
		registerWrite(RegisterArray[i][0], RegisterArray[i][1]);
 80032a2:	7871      	ldrb	r1, [r6, #1]
 80032a4:	f816 0b02 	ldrb.w	r0, [r6], #2
	for(int i = 0; i < InitialRegister; i++){
 80032a8:	3501      	adds	r5, #1
		registerWrite(RegisterArray[i][0], RegisterArray[i][1]);
 80032aa:	f7ff fe5f 	bl	8002f6c <registerWrite>
	for(int i = 0; i < InitialRegister; i++){
 80032ae:	2ddb      	cmp	r5, #219	; 0xdb
 80032b0:	d1f7      	bne.n	80032a2 <gestureInit+0x56>
	}

	registerWrite(GESTURE_REG_BANK_SEL, GESTURE_BANK0);
 80032b2:	2100      	movs	r1, #0
 80032b4:	20ef      	movs	r0, #239	; 0xef
 80032b6:	f7ff fe59 	bl	8002f6c <registerWrite>
	HAL_UART_Transmit(&huart3, ref, strlen((char*)ref), HAL_MAX_DELAY);
 80032ba:	4809      	ldr	r0, [pc, #36]	; (80032e0 <gestureInit+0x94>)
 80032bc:	f7fc ff90 	bl	80001e0 <strlen>
 80032c0:	4907      	ldr	r1, [pc, #28]	; (80032e0 <gestureInit+0x94>)
 80032c2:	b282      	uxth	r2, r0
 80032c4:	f04f 33ff 	mov.w	r3, #4294967295
 80032c8:	4807      	ldr	r0, [pc, #28]	; (80032e8 <gestureInit+0x9c>)
 80032ca:	f7ff fa57 	bl	800277c <HAL_UART_Transmit>
	HAL_Delay(1000);
 80032ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80032d2:	f7fd fa9d 	bl	8000810 <HAL_Delay>
	return result;
};
 80032d6:	4620      	mov	r0, r4
 80032d8:	b002      	add	sp, #8
 80032da:	bd70      	pop	{r4, r5, r6, pc}
 80032dc:	08004929 	.word	0x08004929
 80032e0:	20000680 	.word	0x20000680
 80032e4:	2000000c 	.word	0x2000000c
 80032e8:	20000250 	.word	0x20000250

080032ec <initializeRegisters>:
void initializeRegisters(void){
 80032ec:	b508      	push	{r3, lr}
	error = gestureInit();
 80032ee:	f7ff ffad 	bl	800324c <gestureInit>
	if(error){
 80032f2:	b1b0      	cbz	r0, 8003322 <initializeRegisters+0x36>
		strcpy((char*)ref, "\r\nInitializing Error");
 80032f4:	490f      	ldr	r1, [pc, #60]	; (8003334 <initializeRegisters+0x48>)
 80032f6:	4810      	ldr	r0, [pc, #64]	; (8003338 <initializeRegisters+0x4c>)
 80032f8:	f000 f908 	bl	800350c <strcpy>
		printf("Initializing Error");
 80032fc:	480f      	ldr	r0, [pc, #60]	; (800333c <initializeRegisters+0x50>)
 80032fe:	f000 f857 	bl	80033b0 <iprintf>
	HAL_UART_Transmit(&huart3, ref, strlen((char*)ref), HAL_MAX_DELAY);
 8003302:	480d      	ldr	r0, [pc, #52]	; (8003338 <initializeRegisters+0x4c>)
 8003304:	f7fc ff6c 	bl	80001e0 <strlen>
 8003308:	f04f 33ff 	mov.w	r3, #4294967295
 800330c:	b282      	uxth	r2, r0
 800330e:	490a      	ldr	r1, [pc, #40]	; (8003338 <initializeRegisters+0x4c>)
 8003310:	480b      	ldr	r0, [pc, #44]	; (8003340 <initializeRegisters+0x54>)
 8003312:	f7ff fa33 	bl	800277c <HAL_UART_Transmit>
};
 8003316:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_Delay(1000);
 800331a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800331e:	f7fd ba77 	b.w	8000810 <HAL_Delay>
		strcpy((char*)ref, "\n\r Initialized");
 8003322:	4908      	ldr	r1, [pc, #32]	; (8003344 <initializeRegisters+0x58>)
 8003324:	4804      	ldr	r0, [pc, #16]	; (8003338 <initializeRegisters+0x4c>)
 8003326:	f000 f8f1 	bl	800350c <strcpy>
		printf("Initialized \n");
 800332a:	4807      	ldr	r0, [pc, #28]	; (8003348 <initializeRegisters+0x5c>)
 800332c:	f000 f8c6 	bl	80034bc <puts>
 8003330:	e7e7      	b.n	8003302 <initializeRegisters+0x16>
 8003332:	bf00      	nop
 8003334:	08004934 	.word	0x08004934
 8003338:	20000680 	.word	0x20000680
 800333c:	08004936 	.word	0x08004936
 8003340:	20000250 	.word	0x20000250
 8003344:	08004949 	.word	0x08004949
 8003348:	08004958 	.word	0x08004958

0800334c <__errno>:
 800334c:	4b01      	ldr	r3, [pc, #4]	; (8003354 <__errno+0x8>)
 800334e:	6818      	ldr	r0, [r3, #0]
 8003350:	4770      	bx	lr
 8003352:	bf00      	nop
 8003354:	200001c4 	.word	0x200001c4

08003358 <__libc_init_array>:
 8003358:	b570      	push	{r4, r5, r6, lr}
 800335a:	4d0d      	ldr	r5, [pc, #52]	; (8003390 <__libc_init_array+0x38>)
 800335c:	4c0d      	ldr	r4, [pc, #52]	; (8003394 <__libc_init_array+0x3c>)
 800335e:	1b64      	subs	r4, r4, r5
 8003360:	10a4      	asrs	r4, r4, #2
 8003362:	2600      	movs	r6, #0
 8003364:	42a6      	cmp	r6, r4
 8003366:	d109      	bne.n	800337c <__libc_init_array+0x24>
 8003368:	4d0b      	ldr	r5, [pc, #44]	; (8003398 <__libc_init_array+0x40>)
 800336a:	4c0c      	ldr	r4, [pc, #48]	; (800339c <__libc_init_array+0x44>)
 800336c:	f001 f9c6 	bl	80046fc <_init>
 8003370:	1b64      	subs	r4, r4, r5
 8003372:	10a4      	asrs	r4, r4, #2
 8003374:	2600      	movs	r6, #0
 8003376:	42a6      	cmp	r6, r4
 8003378:	d105      	bne.n	8003386 <__libc_init_array+0x2e>
 800337a:	bd70      	pop	{r4, r5, r6, pc}
 800337c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003380:	4798      	blx	r3
 8003382:	3601      	adds	r6, #1
 8003384:	e7ee      	b.n	8003364 <__libc_init_array+0xc>
 8003386:	f855 3b04 	ldr.w	r3, [r5], #4
 800338a:	4798      	blx	r3
 800338c:	3601      	adds	r6, #1
 800338e:	e7f2      	b.n	8003376 <__libc_init_array+0x1e>
 8003390:	08004a00 	.word	0x08004a00
 8003394:	08004a00 	.word	0x08004a00
 8003398:	08004a00 	.word	0x08004a00
 800339c:	08004a04 	.word	0x08004a04

080033a0 <memset>:
 80033a0:	4402      	add	r2, r0
 80033a2:	4603      	mov	r3, r0
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d100      	bne.n	80033aa <memset+0xa>
 80033a8:	4770      	bx	lr
 80033aa:	f803 1b01 	strb.w	r1, [r3], #1
 80033ae:	e7f9      	b.n	80033a4 <memset+0x4>

080033b0 <iprintf>:
 80033b0:	b40f      	push	{r0, r1, r2, r3}
 80033b2:	4b0a      	ldr	r3, [pc, #40]	; (80033dc <iprintf+0x2c>)
 80033b4:	b513      	push	{r0, r1, r4, lr}
 80033b6:	681c      	ldr	r4, [r3, #0]
 80033b8:	b124      	cbz	r4, 80033c4 <iprintf+0x14>
 80033ba:	69a3      	ldr	r3, [r4, #24]
 80033bc:	b913      	cbnz	r3, 80033c4 <iprintf+0x14>
 80033be:	4620      	mov	r0, r4
 80033c0:	f000 fa86 	bl	80038d0 <__sinit>
 80033c4:	ab05      	add	r3, sp, #20
 80033c6:	9a04      	ldr	r2, [sp, #16]
 80033c8:	68a1      	ldr	r1, [r4, #8]
 80033ca:	9301      	str	r3, [sp, #4]
 80033cc:	4620      	mov	r0, r4
 80033ce:	f000 fdb3 	bl	8003f38 <_vfiprintf_r>
 80033d2:	b002      	add	sp, #8
 80033d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80033d8:	b004      	add	sp, #16
 80033da:	4770      	bx	lr
 80033dc:	200001c4 	.word	0x200001c4

080033e0 <_puts_r>:
 80033e0:	b570      	push	{r4, r5, r6, lr}
 80033e2:	460e      	mov	r6, r1
 80033e4:	4605      	mov	r5, r0
 80033e6:	b118      	cbz	r0, 80033f0 <_puts_r+0x10>
 80033e8:	6983      	ldr	r3, [r0, #24]
 80033ea:	b90b      	cbnz	r3, 80033f0 <_puts_r+0x10>
 80033ec:	f000 fa70 	bl	80038d0 <__sinit>
 80033f0:	69ab      	ldr	r3, [r5, #24]
 80033f2:	68ac      	ldr	r4, [r5, #8]
 80033f4:	b913      	cbnz	r3, 80033fc <_puts_r+0x1c>
 80033f6:	4628      	mov	r0, r5
 80033f8:	f000 fa6a 	bl	80038d0 <__sinit>
 80033fc:	4b2c      	ldr	r3, [pc, #176]	; (80034b0 <_puts_r+0xd0>)
 80033fe:	429c      	cmp	r4, r3
 8003400:	d120      	bne.n	8003444 <_puts_r+0x64>
 8003402:	686c      	ldr	r4, [r5, #4]
 8003404:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003406:	07db      	lsls	r3, r3, #31
 8003408:	d405      	bmi.n	8003416 <_puts_r+0x36>
 800340a:	89a3      	ldrh	r3, [r4, #12]
 800340c:	0598      	lsls	r0, r3, #22
 800340e:	d402      	bmi.n	8003416 <_puts_r+0x36>
 8003410:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003412:	f000 fafb 	bl	8003a0c <__retarget_lock_acquire_recursive>
 8003416:	89a3      	ldrh	r3, [r4, #12]
 8003418:	0719      	lsls	r1, r3, #28
 800341a:	d51d      	bpl.n	8003458 <_puts_r+0x78>
 800341c:	6923      	ldr	r3, [r4, #16]
 800341e:	b1db      	cbz	r3, 8003458 <_puts_r+0x78>
 8003420:	3e01      	subs	r6, #1
 8003422:	68a3      	ldr	r3, [r4, #8]
 8003424:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003428:	3b01      	subs	r3, #1
 800342a:	60a3      	str	r3, [r4, #8]
 800342c:	bb39      	cbnz	r1, 800347e <_puts_r+0x9e>
 800342e:	2b00      	cmp	r3, #0
 8003430:	da38      	bge.n	80034a4 <_puts_r+0xc4>
 8003432:	4622      	mov	r2, r4
 8003434:	210a      	movs	r1, #10
 8003436:	4628      	mov	r0, r5
 8003438:	f000 f870 	bl	800351c <__swbuf_r>
 800343c:	3001      	adds	r0, #1
 800343e:	d011      	beq.n	8003464 <_puts_r+0x84>
 8003440:	250a      	movs	r5, #10
 8003442:	e011      	b.n	8003468 <_puts_r+0x88>
 8003444:	4b1b      	ldr	r3, [pc, #108]	; (80034b4 <_puts_r+0xd4>)
 8003446:	429c      	cmp	r4, r3
 8003448:	d101      	bne.n	800344e <_puts_r+0x6e>
 800344a:	68ac      	ldr	r4, [r5, #8]
 800344c:	e7da      	b.n	8003404 <_puts_r+0x24>
 800344e:	4b1a      	ldr	r3, [pc, #104]	; (80034b8 <_puts_r+0xd8>)
 8003450:	429c      	cmp	r4, r3
 8003452:	bf08      	it	eq
 8003454:	68ec      	ldreq	r4, [r5, #12]
 8003456:	e7d5      	b.n	8003404 <_puts_r+0x24>
 8003458:	4621      	mov	r1, r4
 800345a:	4628      	mov	r0, r5
 800345c:	f000 f8b0 	bl	80035c0 <__swsetup_r>
 8003460:	2800      	cmp	r0, #0
 8003462:	d0dd      	beq.n	8003420 <_puts_r+0x40>
 8003464:	f04f 35ff 	mov.w	r5, #4294967295
 8003468:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800346a:	07da      	lsls	r2, r3, #31
 800346c:	d405      	bmi.n	800347a <_puts_r+0x9a>
 800346e:	89a3      	ldrh	r3, [r4, #12]
 8003470:	059b      	lsls	r3, r3, #22
 8003472:	d402      	bmi.n	800347a <_puts_r+0x9a>
 8003474:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003476:	f000 faca 	bl	8003a0e <__retarget_lock_release_recursive>
 800347a:	4628      	mov	r0, r5
 800347c:	bd70      	pop	{r4, r5, r6, pc}
 800347e:	2b00      	cmp	r3, #0
 8003480:	da04      	bge.n	800348c <_puts_r+0xac>
 8003482:	69a2      	ldr	r2, [r4, #24]
 8003484:	429a      	cmp	r2, r3
 8003486:	dc06      	bgt.n	8003496 <_puts_r+0xb6>
 8003488:	290a      	cmp	r1, #10
 800348a:	d004      	beq.n	8003496 <_puts_r+0xb6>
 800348c:	6823      	ldr	r3, [r4, #0]
 800348e:	1c5a      	adds	r2, r3, #1
 8003490:	6022      	str	r2, [r4, #0]
 8003492:	7019      	strb	r1, [r3, #0]
 8003494:	e7c5      	b.n	8003422 <_puts_r+0x42>
 8003496:	4622      	mov	r2, r4
 8003498:	4628      	mov	r0, r5
 800349a:	f000 f83f 	bl	800351c <__swbuf_r>
 800349e:	3001      	adds	r0, #1
 80034a0:	d1bf      	bne.n	8003422 <_puts_r+0x42>
 80034a2:	e7df      	b.n	8003464 <_puts_r+0x84>
 80034a4:	6823      	ldr	r3, [r4, #0]
 80034a6:	250a      	movs	r5, #10
 80034a8:	1c5a      	adds	r2, r3, #1
 80034aa:	6022      	str	r2, [r4, #0]
 80034ac:	701d      	strb	r5, [r3, #0]
 80034ae:	e7db      	b.n	8003468 <_puts_r+0x88>
 80034b0:	0800498c 	.word	0x0800498c
 80034b4:	080049ac 	.word	0x080049ac
 80034b8:	0800496c 	.word	0x0800496c

080034bc <puts>:
 80034bc:	4b02      	ldr	r3, [pc, #8]	; (80034c8 <puts+0xc>)
 80034be:	4601      	mov	r1, r0
 80034c0:	6818      	ldr	r0, [r3, #0]
 80034c2:	f7ff bf8d 	b.w	80033e0 <_puts_r>
 80034c6:	bf00      	nop
 80034c8:	200001c4 	.word	0x200001c4

080034cc <siprintf>:
 80034cc:	b40e      	push	{r1, r2, r3}
 80034ce:	b500      	push	{lr}
 80034d0:	b09c      	sub	sp, #112	; 0x70
 80034d2:	ab1d      	add	r3, sp, #116	; 0x74
 80034d4:	9002      	str	r0, [sp, #8]
 80034d6:	9006      	str	r0, [sp, #24]
 80034d8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80034dc:	4809      	ldr	r0, [pc, #36]	; (8003504 <siprintf+0x38>)
 80034de:	9107      	str	r1, [sp, #28]
 80034e0:	9104      	str	r1, [sp, #16]
 80034e2:	4909      	ldr	r1, [pc, #36]	; (8003508 <siprintf+0x3c>)
 80034e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80034e8:	9105      	str	r1, [sp, #20]
 80034ea:	6800      	ldr	r0, [r0, #0]
 80034ec:	9301      	str	r3, [sp, #4]
 80034ee:	a902      	add	r1, sp, #8
 80034f0:	f000 fbf8 	bl	8003ce4 <_svfiprintf_r>
 80034f4:	9b02      	ldr	r3, [sp, #8]
 80034f6:	2200      	movs	r2, #0
 80034f8:	701a      	strb	r2, [r3, #0]
 80034fa:	b01c      	add	sp, #112	; 0x70
 80034fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8003500:	b003      	add	sp, #12
 8003502:	4770      	bx	lr
 8003504:	200001c4 	.word	0x200001c4
 8003508:	ffff0208 	.word	0xffff0208

0800350c <strcpy>:
 800350c:	4603      	mov	r3, r0
 800350e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003512:	f803 2b01 	strb.w	r2, [r3], #1
 8003516:	2a00      	cmp	r2, #0
 8003518:	d1f9      	bne.n	800350e <strcpy+0x2>
 800351a:	4770      	bx	lr

0800351c <__swbuf_r>:
 800351c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800351e:	460e      	mov	r6, r1
 8003520:	4614      	mov	r4, r2
 8003522:	4605      	mov	r5, r0
 8003524:	b118      	cbz	r0, 800352e <__swbuf_r+0x12>
 8003526:	6983      	ldr	r3, [r0, #24]
 8003528:	b90b      	cbnz	r3, 800352e <__swbuf_r+0x12>
 800352a:	f000 f9d1 	bl	80038d0 <__sinit>
 800352e:	4b21      	ldr	r3, [pc, #132]	; (80035b4 <__swbuf_r+0x98>)
 8003530:	429c      	cmp	r4, r3
 8003532:	d12b      	bne.n	800358c <__swbuf_r+0x70>
 8003534:	686c      	ldr	r4, [r5, #4]
 8003536:	69a3      	ldr	r3, [r4, #24]
 8003538:	60a3      	str	r3, [r4, #8]
 800353a:	89a3      	ldrh	r3, [r4, #12]
 800353c:	071a      	lsls	r2, r3, #28
 800353e:	d52f      	bpl.n	80035a0 <__swbuf_r+0x84>
 8003540:	6923      	ldr	r3, [r4, #16]
 8003542:	b36b      	cbz	r3, 80035a0 <__swbuf_r+0x84>
 8003544:	6923      	ldr	r3, [r4, #16]
 8003546:	6820      	ldr	r0, [r4, #0]
 8003548:	1ac0      	subs	r0, r0, r3
 800354a:	6963      	ldr	r3, [r4, #20]
 800354c:	b2f6      	uxtb	r6, r6
 800354e:	4283      	cmp	r3, r0
 8003550:	4637      	mov	r7, r6
 8003552:	dc04      	bgt.n	800355e <__swbuf_r+0x42>
 8003554:	4621      	mov	r1, r4
 8003556:	4628      	mov	r0, r5
 8003558:	f000 f926 	bl	80037a8 <_fflush_r>
 800355c:	bb30      	cbnz	r0, 80035ac <__swbuf_r+0x90>
 800355e:	68a3      	ldr	r3, [r4, #8]
 8003560:	3b01      	subs	r3, #1
 8003562:	60a3      	str	r3, [r4, #8]
 8003564:	6823      	ldr	r3, [r4, #0]
 8003566:	1c5a      	adds	r2, r3, #1
 8003568:	6022      	str	r2, [r4, #0]
 800356a:	701e      	strb	r6, [r3, #0]
 800356c:	6963      	ldr	r3, [r4, #20]
 800356e:	3001      	adds	r0, #1
 8003570:	4283      	cmp	r3, r0
 8003572:	d004      	beq.n	800357e <__swbuf_r+0x62>
 8003574:	89a3      	ldrh	r3, [r4, #12]
 8003576:	07db      	lsls	r3, r3, #31
 8003578:	d506      	bpl.n	8003588 <__swbuf_r+0x6c>
 800357a:	2e0a      	cmp	r6, #10
 800357c:	d104      	bne.n	8003588 <__swbuf_r+0x6c>
 800357e:	4621      	mov	r1, r4
 8003580:	4628      	mov	r0, r5
 8003582:	f000 f911 	bl	80037a8 <_fflush_r>
 8003586:	b988      	cbnz	r0, 80035ac <__swbuf_r+0x90>
 8003588:	4638      	mov	r0, r7
 800358a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800358c:	4b0a      	ldr	r3, [pc, #40]	; (80035b8 <__swbuf_r+0x9c>)
 800358e:	429c      	cmp	r4, r3
 8003590:	d101      	bne.n	8003596 <__swbuf_r+0x7a>
 8003592:	68ac      	ldr	r4, [r5, #8]
 8003594:	e7cf      	b.n	8003536 <__swbuf_r+0x1a>
 8003596:	4b09      	ldr	r3, [pc, #36]	; (80035bc <__swbuf_r+0xa0>)
 8003598:	429c      	cmp	r4, r3
 800359a:	bf08      	it	eq
 800359c:	68ec      	ldreq	r4, [r5, #12]
 800359e:	e7ca      	b.n	8003536 <__swbuf_r+0x1a>
 80035a0:	4621      	mov	r1, r4
 80035a2:	4628      	mov	r0, r5
 80035a4:	f000 f80c 	bl	80035c0 <__swsetup_r>
 80035a8:	2800      	cmp	r0, #0
 80035aa:	d0cb      	beq.n	8003544 <__swbuf_r+0x28>
 80035ac:	f04f 37ff 	mov.w	r7, #4294967295
 80035b0:	e7ea      	b.n	8003588 <__swbuf_r+0x6c>
 80035b2:	bf00      	nop
 80035b4:	0800498c 	.word	0x0800498c
 80035b8:	080049ac 	.word	0x080049ac
 80035bc:	0800496c 	.word	0x0800496c

080035c0 <__swsetup_r>:
 80035c0:	4b32      	ldr	r3, [pc, #200]	; (800368c <__swsetup_r+0xcc>)
 80035c2:	b570      	push	{r4, r5, r6, lr}
 80035c4:	681d      	ldr	r5, [r3, #0]
 80035c6:	4606      	mov	r6, r0
 80035c8:	460c      	mov	r4, r1
 80035ca:	b125      	cbz	r5, 80035d6 <__swsetup_r+0x16>
 80035cc:	69ab      	ldr	r3, [r5, #24]
 80035ce:	b913      	cbnz	r3, 80035d6 <__swsetup_r+0x16>
 80035d0:	4628      	mov	r0, r5
 80035d2:	f000 f97d 	bl	80038d0 <__sinit>
 80035d6:	4b2e      	ldr	r3, [pc, #184]	; (8003690 <__swsetup_r+0xd0>)
 80035d8:	429c      	cmp	r4, r3
 80035da:	d10f      	bne.n	80035fc <__swsetup_r+0x3c>
 80035dc:	686c      	ldr	r4, [r5, #4]
 80035de:	89a3      	ldrh	r3, [r4, #12]
 80035e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80035e4:	0719      	lsls	r1, r3, #28
 80035e6:	d42c      	bmi.n	8003642 <__swsetup_r+0x82>
 80035e8:	06dd      	lsls	r5, r3, #27
 80035ea:	d411      	bmi.n	8003610 <__swsetup_r+0x50>
 80035ec:	2309      	movs	r3, #9
 80035ee:	6033      	str	r3, [r6, #0]
 80035f0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80035f4:	81a3      	strh	r3, [r4, #12]
 80035f6:	f04f 30ff 	mov.w	r0, #4294967295
 80035fa:	e03e      	b.n	800367a <__swsetup_r+0xba>
 80035fc:	4b25      	ldr	r3, [pc, #148]	; (8003694 <__swsetup_r+0xd4>)
 80035fe:	429c      	cmp	r4, r3
 8003600:	d101      	bne.n	8003606 <__swsetup_r+0x46>
 8003602:	68ac      	ldr	r4, [r5, #8]
 8003604:	e7eb      	b.n	80035de <__swsetup_r+0x1e>
 8003606:	4b24      	ldr	r3, [pc, #144]	; (8003698 <__swsetup_r+0xd8>)
 8003608:	429c      	cmp	r4, r3
 800360a:	bf08      	it	eq
 800360c:	68ec      	ldreq	r4, [r5, #12]
 800360e:	e7e6      	b.n	80035de <__swsetup_r+0x1e>
 8003610:	0758      	lsls	r0, r3, #29
 8003612:	d512      	bpl.n	800363a <__swsetup_r+0x7a>
 8003614:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003616:	b141      	cbz	r1, 800362a <__swsetup_r+0x6a>
 8003618:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800361c:	4299      	cmp	r1, r3
 800361e:	d002      	beq.n	8003626 <__swsetup_r+0x66>
 8003620:	4630      	mov	r0, r6
 8003622:	f000 fa59 	bl	8003ad8 <_free_r>
 8003626:	2300      	movs	r3, #0
 8003628:	6363      	str	r3, [r4, #52]	; 0x34
 800362a:	89a3      	ldrh	r3, [r4, #12]
 800362c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003630:	81a3      	strh	r3, [r4, #12]
 8003632:	2300      	movs	r3, #0
 8003634:	6063      	str	r3, [r4, #4]
 8003636:	6923      	ldr	r3, [r4, #16]
 8003638:	6023      	str	r3, [r4, #0]
 800363a:	89a3      	ldrh	r3, [r4, #12]
 800363c:	f043 0308 	orr.w	r3, r3, #8
 8003640:	81a3      	strh	r3, [r4, #12]
 8003642:	6923      	ldr	r3, [r4, #16]
 8003644:	b94b      	cbnz	r3, 800365a <__swsetup_r+0x9a>
 8003646:	89a3      	ldrh	r3, [r4, #12]
 8003648:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800364c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003650:	d003      	beq.n	800365a <__swsetup_r+0x9a>
 8003652:	4621      	mov	r1, r4
 8003654:	4630      	mov	r0, r6
 8003656:	f000 f9ff 	bl	8003a58 <__smakebuf_r>
 800365a:	89a0      	ldrh	r0, [r4, #12]
 800365c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003660:	f010 0301 	ands.w	r3, r0, #1
 8003664:	d00a      	beq.n	800367c <__swsetup_r+0xbc>
 8003666:	2300      	movs	r3, #0
 8003668:	60a3      	str	r3, [r4, #8]
 800366a:	6963      	ldr	r3, [r4, #20]
 800366c:	425b      	negs	r3, r3
 800366e:	61a3      	str	r3, [r4, #24]
 8003670:	6923      	ldr	r3, [r4, #16]
 8003672:	b943      	cbnz	r3, 8003686 <__swsetup_r+0xc6>
 8003674:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003678:	d1ba      	bne.n	80035f0 <__swsetup_r+0x30>
 800367a:	bd70      	pop	{r4, r5, r6, pc}
 800367c:	0781      	lsls	r1, r0, #30
 800367e:	bf58      	it	pl
 8003680:	6963      	ldrpl	r3, [r4, #20]
 8003682:	60a3      	str	r3, [r4, #8]
 8003684:	e7f4      	b.n	8003670 <__swsetup_r+0xb0>
 8003686:	2000      	movs	r0, #0
 8003688:	e7f7      	b.n	800367a <__swsetup_r+0xba>
 800368a:	bf00      	nop
 800368c:	200001c4 	.word	0x200001c4
 8003690:	0800498c 	.word	0x0800498c
 8003694:	080049ac 	.word	0x080049ac
 8003698:	0800496c 	.word	0x0800496c

0800369c <__sflush_r>:
 800369c:	898a      	ldrh	r2, [r1, #12]
 800369e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80036a2:	4605      	mov	r5, r0
 80036a4:	0710      	lsls	r0, r2, #28
 80036a6:	460c      	mov	r4, r1
 80036a8:	d458      	bmi.n	800375c <__sflush_r+0xc0>
 80036aa:	684b      	ldr	r3, [r1, #4]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	dc05      	bgt.n	80036bc <__sflush_r+0x20>
 80036b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	dc02      	bgt.n	80036bc <__sflush_r+0x20>
 80036b6:	2000      	movs	r0, #0
 80036b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80036bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80036be:	2e00      	cmp	r6, #0
 80036c0:	d0f9      	beq.n	80036b6 <__sflush_r+0x1a>
 80036c2:	2300      	movs	r3, #0
 80036c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80036c8:	682f      	ldr	r7, [r5, #0]
 80036ca:	602b      	str	r3, [r5, #0]
 80036cc:	d032      	beq.n	8003734 <__sflush_r+0x98>
 80036ce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80036d0:	89a3      	ldrh	r3, [r4, #12]
 80036d2:	075a      	lsls	r2, r3, #29
 80036d4:	d505      	bpl.n	80036e2 <__sflush_r+0x46>
 80036d6:	6863      	ldr	r3, [r4, #4]
 80036d8:	1ac0      	subs	r0, r0, r3
 80036da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80036dc:	b10b      	cbz	r3, 80036e2 <__sflush_r+0x46>
 80036de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80036e0:	1ac0      	subs	r0, r0, r3
 80036e2:	2300      	movs	r3, #0
 80036e4:	4602      	mov	r2, r0
 80036e6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80036e8:	6a21      	ldr	r1, [r4, #32]
 80036ea:	4628      	mov	r0, r5
 80036ec:	47b0      	blx	r6
 80036ee:	1c43      	adds	r3, r0, #1
 80036f0:	89a3      	ldrh	r3, [r4, #12]
 80036f2:	d106      	bne.n	8003702 <__sflush_r+0x66>
 80036f4:	6829      	ldr	r1, [r5, #0]
 80036f6:	291d      	cmp	r1, #29
 80036f8:	d82c      	bhi.n	8003754 <__sflush_r+0xb8>
 80036fa:	4a2a      	ldr	r2, [pc, #168]	; (80037a4 <__sflush_r+0x108>)
 80036fc:	40ca      	lsrs	r2, r1
 80036fe:	07d6      	lsls	r6, r2, #31
 8003700:	d528      	bpl.n	8003754 <__sflush_r+0xb8>
 8003702:	2200      	movs	r2, #0
 8003704:	6062      	str	r2, [r4, #4]
 8003706:	04d9      	lsls	r1, r3, #19
 8003708:	6922      	ldr	r2, [r4, #16]
 800370a:	6022      	str	r2, [r4, #0]
 800370c:	d504      	bpl.n	8003718 <__sflush_r+0x7c>
 800370e:	1c42      	adds	r2, r0, #1
 8003710:	d101      	bne.n	8003716 <__sflush_r+0x7a>
 8003712:	682b      	ldr	r3, [r5, #0]
 8003714:	b903      	cbnz	r3, 8003718 <__sflush_r+0x7c>
 8003716:	6560      	str	r0, [r4, #84]	; 0x54
 8003718:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800371a:	602f      	str	r7, [r5, #0]
 800371c:	2900      	cmp	r1, #0
 800371e:	d0ca      	beq.n	80036b6 <__sflush_r+0x1a>
 8003720:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003724:	4299      	cmp	r1, r3
 8003726:	d002      	beq.n	800372e <__sflush_r+0x92>
 8003728:	4628      	mov	r0, r5
 800372a:	f000 f9d5 	bl	8003ad8 <_free_r>
 800372e:	2000      	movs	r0, #0
 8003730:	6360      	str	r0, [r4, #52]	; 0x34
 8003732:	e7c1      	b.n	80036b8 <__sflush_r+0x1c>
 8003734:	6a21      	ldr	r1, [r4, #32]
 8003736:	2301      	movs	r3, #1
 8003738:	4628      	mov	r0, r5
 800373a:	47b0      	blx	r6
 800373c:	1c41      	adds	r1, r0, #1
 800373e:	d1c7      	bne.n	80036d0 <__sflush_r+0x34>
 8003740:	682b      	ldr	r3, [r5, #0]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d0c4      	beq.n	80036d0 <__sflush_r+0x34>
 8003746:	2b1d      	cmp	r3, #29
 8003748:	d001      	beq.n	800374e <__sflush_r+0xb2>
 800374a:	2b16      	cmp	r3, #22
 800374c:	d101      	bne.n	8003752 <__sflush_r+0xb6>
 800374e:	602f      	str	r7, [r5, #0]
 8003750:	e7b1      	b.n	80036b6 <__sflush_r+0x1a>
 8003752:	89a3      	ldrh	r3, [r4, #12]
 8003754:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003758:	81a3      	strh	r3, [r4, #12]
 800375a:	e7ad      	b.n	80036b8 <__sflush_r+0x1c>
 800375c:	690f      	ldr	r7, [r1, #16]
 800375e:	2f00      	cmp	r7, #0
 8003760:	d0a9      	beq.n	80036b6 <__sflush_r+0x1a>
 8003762:	0793      	lsls	r3, r2, #30
 8003764:	680e      	ldr	r6, [r1, #0]
 8003766:	bf08      	it	eq
 8003768:	694b      	ldreq	r3, [r1, #20]
 800376a:	600f      	str	r7, [r1, #0]
 800376c:	bf18      	it	ne
 800376e:	2300      	movne	r3, #0
 8003770:	eba6 0807 	sub.w	r8, r6, r7
 8003774:	608b      	str	r3, [r1, #8]
 8003776:	f1b8 0f00 	cmp.w	r8, #0
 800377a:	dd9c      	ble.n	80036b6 <__sflush_r+0x1a>
 800377c:	6a21      	ldr	r1, [r4, #32]
 800377e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003780:	4643      	mov	r3, r8
 8003782:	463a      	mov	r2, r7
 8003784:	4628      	mov	r0, r5
 8003786:	47b0      	blx	r6
 8003788:	2800      	cmp	r0, #0
 800378a:	dc06      	bgt.n	800379a <__sflush_r+0xfe>
 800378c:	89a3      	ldrh	r3, [r4, #12]
 800378e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003792:	81a3      	strh	r3, [r4, #12]
 8003794:	f04f 30ff 	mov.w	r0, #4294967295
 8003798:	e78e      	b.n	80036b8 <__sflush_r+0x1c>
 800379a:	4407      	add	r7, r0
 800379c:	eba8 0800 	sub.w	r8, r8, r0
 80037a0:	e7e9      	b.n	8003776 <__sflush_r+0xda>
 80037a2:	bf00      	nop
 80037a4:	20400001 	.word	0x20400001

080037a8 <_fflush_r>:
 80037a8:	b538      	push	{r3, r4, r5, lr}
 80037aa:	690b      	ldr	r3, [r1, #16]
 80037ac:	4605      	mov	r5, r0
 80037ae:	460c      	mov	r4, r1
 80037b0:	b913      	cbnz	r3, 80037b8 <_fflush_r+0x10>
 80037b2:	2500      	movs	r5, #0
 80037b4:	4628      	mov	r0, r5
 80037b6:	bd38      	pop	{r3, r4, r5, pc}
 80037b8:	b118      	cbz	r0, 80037c2 <_fflush_r+0x1a>
 80037ba:	6983      	ldr	r3, [r0, #24]
 80037bc:	b90b      	cbnz	r3, 80037c2 <_fflush_r+0x1a>
 80037be:	f000 f887 	bl	80038d0 <__sinit>
 80037c2:	4b14      	ldr	r3, [pc, #80]	; (8003814 <_fflush_r+0x6c>)
 80037c4:	429c      	cmp	r4, r3
 80037c6:	d11b      	bne.n	8003800 <_fflush_r+0x58>
 80037c8:	686c      	ldr	r4, [r5, #4]
 80037ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d0ef      	beq.n	80037b2 <_fflush_r+0xa>
 80037d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80037d4:	07d0      	lsls	r0, r2, #31
 80037d6:	d404      	bmi.n	80037e2 <_fflush_r+0x3a>
 80037d8:	0599      	lsls	r1, r3, #22
 80037da:	d402      	bmi.n	80037e2 <_fflush_r+0x3a>
 80037dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80037de:	f000 f915 	bl	8003a0c <__retarget_lock_acquire_recursive>
 80037e2:	4628      	mov	r0, r5
 80037e4:	4621      	mov	r1, r4
 80037e6:	f7ff ff59 	bl	800369c <__sflush_r>
 80037ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80037ec:	07da      	lsls	r2, r3, #31
 80037ee:	4605      	mov	r5, r0
 80037f0:	d4e0      	bmi.n	80037b4 <_fflush_r+0xc>
 80037f2:	89a3      	ldrh	r3, [r4, #12]
 80037f4:	059b      	lsls	r3, r3, #22
 80037f6:	d4dd      	bmi.n	80037b4 <_fflush_r+0xc>
 80037f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80037fa:	f000 f908 	bl	8003a0e <__retarget_lock_release_recursive>
 80037fe:	e7d9      	b.n	80037b4 <_fflush_r+0xc>
 8003800:	4b05      	ldr	r3, [pc, #20]	; (8003818 <_fflush_r+0x70>)
 8003802:	429c      	cmp	r4, r3
 8003804:	d101      	bne.n	800380a <_fflush_r+0x62>
 8003806:	68ac      	ldr	r4, [r5, #8]
 8003808:	e7df      	b.n	80037ca <_fflush_r+0x22>
 800380a:	4b04      	ldr	r3, [pc, #16]	; (800381c <_fflush_r+0x74>)
 800380c:	429c      	cmp	r4, r3
 800380e:	bf08      	it	eq
 8003810:	68ec      	ldreq	r4, [r5, #12]
 8003812:	e7da      	b.n	80037ca <_fflush_r+0x22>
 8003814:	0800498c 	.word	0x0800498c
 8003818:	080049ac 	.word	0x080049ac
 800381c:	0800496c 	.word	0x0800496c

08003820 <std>:
 8003820:	2300      	movs	r3, #0
 8003822:	b510      	push	{r4, lr}
 8003824:	4604      	mov	r4, r0
 8003826:	e9c0 3300 	strd	r3, r3, [r0]
 800382a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800382e:	6083      	str	r3, [r0, #8]
 8003830:	8181      	strh	r1, [r0, #12]
 8003832:	6643      	str	r3, [r0, #100]	; 0x64
 8003834:	81c2      	strh	r2, [r0, #14]
 8003836:	6183      	str	r3, [r0, #24]
 8003838:	4619      	mov	r1, r3
 800383a:	2208      	movs	r2, #8
 800383c:	305c      	adds	r0, #92	; 0x5c
 800383e:	f7ff fdaf 	bl	80033a0 <memset>
 8003842:	4b05      	ldr	r3, [pc, #20]	; (8003858 <std+0x38>)
 8003844:	6263      	str	r3, [r4, #36]	; 0x24
 8003846:	4b05      	ldr	r3, [pc, #20]	; (800385c <std+0x3c>)
 8003848:	62a3      	str	r3, [r4, #40]	; 0x28
 800384a:	4b05      	ldr	r3, [pc, #20]	; (8003860 <std+0x40>)
 800384c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800384e:	4b05      	ldr	r3, [pc, #20]	; (8003864 <std+0x44>)
 8003850:	6224      	str	r4, [r4, #32]
 8003852:	6323      	str	r3, [r4, #48]	; 0x30
 8003854:	bd10      	pop	{r4, pc}
 8003856:	bf00      	nop
 8003858:	080044e1 	.word	0x080044e1
 800385c:	08004503 	.word	0x08004503
 8003860:	0800453b 	.word	0x0800453b
 8003864:	0800455f 	.word	0x0800455f

08003868 <_cleanup_r>:
 8003868:	4901      	ldr	r1, [pc, #4]	; (8003870 <_cleanup_r+0x8>)
 800386a:	f000 b8af 	b.w	80039cc <_fwalk_reent>
 800386e:	bf00      	nop
 8003870:	080037a9 	.word	0x080037a9

08003874 <__sfmoreglue>:
 8003874:	b570      	push	{r4, r5, r6, lr}
 8003876:	1e4a      	subs	r2, r1, #1
 8003878:	2568      	movs	r5, #104	; 0x68
 800387a:	4355      	muls	r5, r2
 800387c:	460e      	mov	r6, r1
 800387e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003882:	f000 f979 	bl	8003b78 <_malloc_r>
 8003886:	4604      	mov	r4, r0
 8003888:	b140      	cbz	r0, 800389c <__sfmoreglue+0x28>
 800388a:	2100      	movs	r1, #0
 800388c:	e9c0 1600 	strd	r1, r6, [r0]
 8003890:	300c      	adds	r0, #12
 8003892:	60a0      	str	r0, [r4, #8]
 8003894:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003898:	f7ff fd82 	bl	80033a0 <memset>
 800389c:	4620      	mov	r0, r4
 800389e:	bd70      	pop	{r4, r5, r6, pc}

080038a0 <__sfp_lock_acquire>:
 80038a0:	4801      	ldr	r0, [pc, #4]	; (80038a8 <__sfp_lock_acquire+0x8>)
 80038a2:	f000 b8b3 	b.w	8003a0c <__retarget_lock_acquire_recursive>
 80038a6:	bf00      	nop
 80038a8:	200006ba 	.word	0x200006ba

080038ac <__sfp_lock_release>:
 80038ac:	4801      	ldr	r0, [pc, #4]	; (80038b4 <__sfp_lock_release+0x8>)
 80038ae:	f000 b8ae 	b.w	8003a0e <__retarget_lock_release_recursive>
 80038b2:	bf00      	nop
 80038b4:	200006ba 	.word	0x200006ba

080038b8 <__sinit_lock_acquire>:
 80038b8:	4801      	ldr	r0, [pc, #4]	; (80038c0 <__sinit_lock_acquire+0x8>)
 80038ba:	f000 b8a7 	b.w	8003a0c <__retarget_lock_acquire_recursive>
 80038be:	bf00      	nop
 80038c0:	200006b5 	.word	0x200006b5

080038c4 <__sinit_lock_release>:
 80038c4:	4801      	ldr	r0, [pc, #4]	; (80038cc <__sinit_lock_release+0x8>)
 80038c6:	f000 b8a2 	b.w	8003a0e <__retarget_lock_release_recursive>
 80038ca:	bf00      	nop
 80038cc:	200006b5 	.word	0x200006b5

080038d0 <__sinit>:
 80038d0:	b510      	push	{r4, lr}
 80038d2:	4604      	mov	r4, r0
 80038d4:	f7ff fff0 	bl	80038b8 <__sinit_lock_acquire>
 80038d8:	69a3      	ldr	r3, [r4, #24]
 80038da:	b11b      	cbz	r3, 80038e4 <__sinit+0x14>
 80038dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80038e0:	f7ff bff0 	b.w	80038c4 <__sinit_lock_release>
 80038e4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80038e8:	6523      	str	r3, [r4, #80]	; 0x50
 80038ea:	4b13      	ldr	r3, [pc, #76]	; (8003938 <__sinit+0x68>)
 80038ec:	4a13      	ldr	r2, [pc, #76]	; (800393c <__sinit+0x6c>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	62a2      	str	r2, [r4, #40]	; 0x28
 80038f2:	42a3      	cmp	r3, r4
 80038f4:	bf04      	itt	eq
 80038f6:	2301      	moveq	r3, #1
 80038f8:	61a3      	streq	r3, [r4, #24]
 80038fa:	4620      	mov	r0, r4
 80038fc:	f000 f820 	bl	8003940 <__sfp>
 8003900:	6060      	str	r0, [r4, #4]
 8003902:	4620      	mov	r0, r4
 8003904:	f000 f81c 	bl	8003940 <__sfp>
 8003908:	60a0      	str	r0, [r4, #8]
 800390a:	4620      	mov	r0, r4
 800390c:	f000 f818 	bl	8003940 <__sfp>
 8003910:	2200      	movs	r2, #0
 8003912:	60e0      	str	r0, [r4, #12]
 8003914:	2104      	movs	r1, #4
 8003916:	6860      	ldr	r0, [r4, #4]
 8003918:	f7ff ff82 	bl	8003820 <std>
 800391c:	68a0      	ldr	r0, [r4, #8]
 800391e:	2201      	movs	r2, #1
 8003920:	2109      	movs	r1, #9
 8003922:	f7ff ff7d 	bl	8003820 <std>
 8003926:	68e0      	ldr	r0, [r4, #12]
 8003928:	2202      	movs	r2, #2
 800392a:	2112      	movs	r1, #18
 800392c:	f7ff ff78 	bl	8003820 <std>
 8003930:	2301      	movs	r3, #1
 8003932:	61a3      	str	r3, [r4, #24]
 8003934:	e7d2      	b.n	80038dc <__sinit+0xc>
 8003936:	bf00      	nop
 8003938:	08004968 	.word	0x08004968
 800393c:	08003869 	.word	0x08003869

08003940 <__sfp>:
 8003940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003942:	4607      	mov	r7, r0
 8003944:	f7ff ffac 	bl	80038a0 <__sfp_lock_acquire>
 8003948:	4b1e      	ldr	r3, [pc, #120]	; (80039c4 <__sfp+0x84>)
 800394a:	681e      	ldr	r6, [r3, #0]
 800394c:	69b3      	ldr	r3, [r6, #24]
 800394e:	b913      	cbnz	r3, 8003956 <__sfp+0x16>
 8003950:	4630      	mov	r0, r6
 8003952:	f7ff ffbd 	bl	80038d0 <__sinit>
 8003956:	3648      	adds	r6, #72	; 0x48
 8003958:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800395c:	3b01      	subs	r3, #1
 800395e:	d503      	bpl.n	8003968 <__sfp+0x28>
 8003960:	6833      	ldr	r3, [r6, #0]
 8003962:	b30b      	cbz	r3, 80039a8 <__sfp+0x68>
 8003964:	6836      	ldr	r6, [r6, #0]
 8003966:	e7f7      	b.n	8003958 <__sfp+0x18>
 8003968:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800396c:	b9d5      	cbnz	r5, 80039a4 <__sfp+0x64>
 800396e:	4b16      	ldr	r3, [pc, #88]	; (80039c8 <__sfp+0x88>)
 8003970:	60e3      	str	r3, [r4, #12]
 8003972:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003976:	6665      	str	r5, [r4, #100]	; 0x64
 8003978:	f000 f847 	bl	8003a0a <__retarget_lock_init_recursive>
 800397c:	f7ff ff96 	bl	80038ac <__sfp_lock_release>
 8003980:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003984:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003988:	6025      	str	r5, [r4, #0]
 800398a:	61a5      	str	r5, [r4, #24]
 800398c:	2208      	movs	r2, #8
 800398e:	4629      	mov	r1, r5
 8003990:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003994:	f7ff fd04 	bl	80033a0 <memset>
 8003998:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800399c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80039a0:	4620      	mov	r0, r4
 80039a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80039a4:	3468      	adds	r4, #104	; 0x68
 80039a6:	e7d9      	b.n	800395c <__sfp+0x1c>
 80039a8:	2104      	movs	r1, #4
 80039aa:	4638      	mov	r0, r7
 80039ac:	f7ff ff62 	bl	8003874 <__sfmoreglue>
 80039b0:	4604      	mov	r4, r0
 80039b2:	6030      	str	r0, [r6, #0]
 80039b4:	2800      	cmp	r0, #0
 80039b6:	d1d5      	bne.n	8003964 <__sfp+0x24>
 80039b8:	f7ff ff78 	bl	80038ac <__sfp_lock_release>
 80039bc:	230c      	movs	r3, #12
 80039be:	603b      	str	r3, [r7, #0]
 80039c0:	e7ee      	b.n	80039a0 <__sfp+0x60>
 80039c2:	bf00      	nop
 80039c4:	08004968 	.word	0x08004968
 80039c8:	ffff0001 	.word	0xffff0001

080039cc <_fwalk_reent>:
 80039cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80039d0:	4606      	mov	r6, r0
 80039d2:	4688      	mov	r8, r1
 80039d4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80039d8:	2700      	movs	r7, #0
 80039da:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80039de:	f1b9 0901 	subs.w	r9, r9, #1
 80039e2:	d505      	bpl.n	80039f0 <_fwalk_reent+0x24>
 80039e4:	6824      	ldr	r4, [r4, #0]
 80039e6:	2c00      	cmp	r4, #0
 80039e8:	d1f7      	bne.n	80039da <_fwalk_reent+0xe>
 80039ea:	4638      	mov	r0, r7
 80039ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80039f0:	89ab      	ldrh	r3, [r5, #12]
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d907      	bls.n	8003a06 <_fwalk_reent+0x3a>
 80039f6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80039fa:	3301      	adds	r3, #1
 80039fc:	d003      	beq.n	8003a06 <_fwalk_reent+0x3a>
 80039fe:	4629      	mov	r1, r5
 8003a00:	4630      	mov	r0, r6
 8003a02:	47c0      	blx	r8
 8003a04:	4307      	orrs	r7, r0
 8003a06:	3568      	adds	r5, #104	; 0x68
 8003a08:	e7e9      	b.n	80039de <_fwalk_reent+0x12>

08003a0a <__retarget_lock_init_recursive>:
 8003a0a:	4770      	bx	lr

08003a0c <__retarget_lock_acquire_recursive>:
 8003a0c:	4770      	bx	lr

08003a0e <__retarget_lock_release_recursive>:
 8003a0e:	4770      	bx	lr

08003a10 <__swhatbuf_r>:
 8003a10:	b570      	push	{r4, r5, r6, lr}
 8003a12:	460e      	mov	r6, r1
 8003a14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a18:	2900      	cmp	r1, #0
 8003a1a:	b096      	sub	sp, #88	; 0x58
 8003a1c:	4614      	mov	r4, r2
 8003a1e:	461d      	mov	r5, r3
 8003a20:	da07      	bge.n	8003a32 <__swhatbuf_r+0x22>
 8003a22:	2300      	movs	r3, #0
 8003a24:	602b      	str	r3, [r5, #0]
 8003a26:	89b3      	ldrh	r3, [r6, #12]
 8003a28:	061a      	lsls	r2, r3, #24
 8003a2a:	d410      	bmi.n	8003a4e <__swhatbuf_r+0x3e>
 8003a2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a30:	e00e      	b.n	8003a50 <__swhatbuf_r+0x40>
 8003a32:	466a      	mov	r2, sp
 8003a34:	f000 fdba 	bl	80045ac <_fstat_r>
 8003a38:	2800      	cmp	r0, #0
 8003a3a:	dbf2      	blt.n	8003a22 <__swhatbuf_r+0x12>
 8003a3c:	9a01      	ldr	r2, [sp, #4]
 8003a3e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003a42:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003a46:	425a      	negs	r2, r3
 8003a48:	415a      	adcs	r2, r3
 8003a4a:	602a      	str	r2, [r5, #0]
 8003a4c:	e7ee      	b.n	8003a2c <__swhatbuf_r+0x1c>
 8003a4e:	2340      	movs	r3, #64	; 0x40
 8003a50:	2000      	movs	r0, #0
 8003a52:	6023      	str	r3, [r4, #0]
 8003a54:	b016      	add	sp, #88	; 0x58
 8003a56:	bd70      	pop	{r4, r5, r6, pc}

08003a58 <__smakebuf_r>:
 8003a58:	898b      	ldrh	r3, [r1, #12]
 8003a5a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003a5c:	079d      	lsls	r5, r3, #30
 8003a5e:	4606      	mov	r6, r0
 8003a60:	460c      	mov	r4, r1
 8003a62:	d507      	bpl.n	8003a74 <__smakebuf_r+0x1c>
 8003a64:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003a68:	6023      	str	r3, [r4, #0]
 8003a6a:	6123      	str	r3, [r4, #16]
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	6163      	str	r3, [r4, #20]
 8003a70:	b002      	add	sp, #8
 8003a72:	bd70      	pop	{r4, r5, r6, pc}
 8003a74:	ab01      	add	r3, sp, #4
 8003a76:	466a      	mov	r2, sp
 8003a78:	f7ff ffca 	bl	8003a10 <__swhatbuf_r>
 8003a7c:	9900      	ldr	r1, [sp, #0]
 8003a7e:	4605      	mov	r5, r0
 8003a80:	4630      	mov	r0, r6
 8003a82:	f000 f879 	bl	8003b78 <_malloc_r>
 8003a86:	b948      	cbnz	r0, 8003a9c <__smakebuf_r+0x44>
 8003a88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a8c:	059a      	lsls	r2, r3, #22
 8003a8e:	d4ef      	bmi.n	8003a70 <__smakebuf_r+0x18>
 8003a90:	f023 0303 	bic.w	r3, r3, #3
 8003a94:	f043 0302 	orr.w	r3, r3, #2
 8003a98:	81a3      	strh	r3, [r4, #12]
 8003a9a:	e7e3      	b.n	8003a64 <__smakebuf_r+0xc>
 8003a9c:	4b0d      	ldr	r3, [pc, #52]	; (8003ad4 <__smakebuf_r+0x7c>)
 8003a9e:	62b3      	str	r3, [r6, #40]	; 0x28
 8003aa0:	89a3      	ldrh	r3, [r4, #12]
 8003aa2:	6020      	str	r0, [r4, #0]
 8003aa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003aa8:	81a3      	strh	r3, [r4, #12]
 8003aaa:	9b00      	ldr	r3, [sp, #0]
 8003aac:	6163      	str	r3, [r4, #20]
 8003aae:	9b01      	ldr	r3, [sp, #4]
 8003ab0:	6120      	str	r0, [r4, #16]
 8003ab2:	b15b      	cbz	r3, 8003acc <__smakebuf_r+0x74>
 8003ab4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003ab8:	4630      	mov	r0, r6
 8003aba:	f000 fd89 	bl	80045d0 <_isatty_r>
 8003abe:	b128      	cbz	r0, 8003acc <__smakebuf_r+0x74>
 8003ac0:	89a3      	ldrh	r3, [r4, #12]
 8003ac2:	f023 0303 	bic.w	r3, r3, #3
 8003ac6:	f043 0301 	orr.w	r3, r3, #1
 8003aca:	81a3      	strh	r3, [r4, #12]
 8003acc:	89a0      	ldrh	r0, [r4, #12]
 8003ace:	4305      	orrs	r5, r0
 8003ad0:	81a5      	strh	r5, [r4, #12]
 8003ad2:	e7cd      	b.n	8003a70 <__smakebuf_r+0x18>
 8003ad4:	08003869 	.word	0x08003869

08003ad8 <_free_r>:
 8003ad8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003ada:	2900      	cmp	r1, #0
 8003adc:	d048      	beq.n	8003b70 <_free_r+0x98>
 8003ade:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ae2:	9001      	str	r0, [sp, #4]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	f1a1 0404 	sub.w	r4, r1, #4
 8003aea:	bfb8      	it	lt
 8003aec:	18e4      	addlt	r4, r4, r3
 8003aee:	f000 fdb9 	bl	8004664 <__malloc_lock>
 8003af2:	4a20      	ldr	r2, [pc, #128]	; (8003b74 <_free_r+0x9c>)
 8003af4:	9801      	ldr	r0, [sp, #4]
 8003af6:	6813      	ldr	r3, [r2, #0]
 8003af8:	4615      	mov	r5, r2
 8003afa:	b933      	cbnz	r3, 8003b0a <_free_r+0x32>
 8003afc:	6063      	str	r3, [r4, #4]
 8003afe:	6014      	str	r4, [r2, #0]
 8003b00:	b003      	add	sp, #12
 8003b02:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003b06:	f000 bdb3 	b.w	8004670 <__malloc_unlock>
 8003b0a:	42a3      	cmp	r3, r4
 8003b0c:	d90b      	bls.n	8003b26 <_free_r+0x4e>
 8003b0e:	6821      	ldr	r1, [r4, #0]
 8003b10:	1862      	adds	r2, r4, r1
 8003b12:	4293      	cmp	r3, r2
 8003b14:	bf04      	itt	eq
 8003b16:	681a      	ldreq	r2, [r3, #0]
 8003b18:	685b      	ldreq	r3, [r3, #4]
 8003b1a:	6063      	str	r3, [r4, #4]
 8003b1c:	bf04      	itt	eq
 8003b1e:	1852      	addeq	r2, r2, r1
 8003b20:	6022      	streq	r2, [r4, #0]
 8003b22:	602c      	str	r4, [r5, #0]
 8003b24:	e7ec      	b.n	8003b00 <_free_r+0x28>
 8003b26:	461a      	mov	r2, r3
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	b10b      	cbz	r3, 8003b30 <_free_r+0x58>
 8003b2c:	42a3      	cmp	r3, r4
 8003b2e:	d9fa      	bls.n	8003b26 <_free_r+0x4e>
 8003b30:	6811      	ldr	r1, [r2, #0]
 8003b32:	1855      	adds	r5, r2, r1
 8003b34:	42a5      	cmp	r5, r4
 8003b36:	d10b      	bne.n	8003b50 <_free_r+0x78>
 8003b38:	6824      	ldr	r4, [r4, #0]
 8003b3a:	4421      	add	r1, r4
 8003b3c:	1854      	adds	r4, r2, r1
 8003b3e:	42a3      	cmp	r3, r4
 8003b40:	6011      	str	r1, [r2, #0]
 8003b42:	d1dd      	bne.n	8003b00 <_free_r+0x28>
 8003b44:	681c      	ldr	r4, [r3, #0]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	6053      	str	r3, [r2, #4]
 8003b4a:	4421      	add	r1, r4
 8003b4c:	6011      	str	r1, [r2, #0]
 8003b4e:	e7d7      	b.n	8003b00 <_free_r+0x28>
 8003b50:	d902      	bls.n	8003b58 <_free_r+0x80>
 8003b52:	230c      	movs	r3, #12
 8003b54:	6003      	str	r3, [r0, #0]
 8003b56:	e7d3      	b.n	8003b00 <_free_r+0x28>
 8003b58:	6825      	ldr	r5, [r4, #0]
 8003b5a:	1961      	adds	r1, r4, r5
 8003b5c:	428b      	cmp	r3, r1
 8003b5e:	bf04      	itt	eq
 8003b60:	6819      	ldreq	r1, [r3, #0]
 8003b62:	685b      	ldreq	r3, [r3, #4]
 8003b64:	6063      	str	r3, [r4, #4]
 8003b66:	bf04      	itt	eq
 8003b68:	1949      	addeq	r1, r1, r5
 8003b6a:	6021      	streq	r1, [r4, #0]
 8003b6c:	6054      	str	r4, [r2, #4]
 8003b6e:	e7c7      	b.n	8003b00 <_free_r+0x28>
 8003b70:	b003      	add	sp, #12
 8003b72:	bd30      	pop	{r4, r5, pc}
 8003b74:	20000248 	.word	0x20000248

08003b78 <_malloc_r>:
 8003b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b7a:	1ccd      	adds	r5, r1, #3
 8003b7c:	f025 0503 	bic.w	r5, r5, #3
 8003b80:	3508      	adds	r5, #8
 8003b82:	2d0c      	cmp	r5, #12
 8003b84:	bf38      	it	cc
 8003b86:	250c      	movcc	r5, #12
 8003b88:	2d00      	cmp	r5, #0
 8003b8a:	4606      	mov	r6, r0
 8003b8c:	db01      	blt.n	8003b92 <_malloc_r+0x1a>
 8003b8e:	42a9      	cmp	r1, r5
 8003b90:	d903      	bls.n	8003b9a <_malloc_r+0x22>
 8003b92:	230c      	movs	r3, #12
 8003b94:	6033      	str	r3, [r6, #0]
 8003b96:	2000      	movs	r0, #0
 8003b98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b9a:	f000 fd63 	bl	8004664 <__malloc_lock>
 8003b9e:	4921      	ldr	r1, [pc, #132]	; (8003c24 <_malloc_r+0xac>)
 8003ba0:	680a      	ldr	r2, [r1, #0]
 8003ba2:	4614      	mov	r4, r2
 8003ba4:	b99c      	cbnz	r4, 8003bce <_malloc_r+0x56>
 8003ba6:	4f20      	ldr	r7, [pc, #128]	; (8003c28 <_malloc_r+0xb0>)
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	b923      	cbnz	r3, 8003bb6 <_malloc_r+0x3e>
 8003bac:	4621      	mov	r1, r4
 8003bae:	4630      	mov	r0, r6
 8003bb0:	f000 fc86 	bl	80044c0 <_sbrk_r>
 8003bb4:	6038      	str	r0, [r7, #0]
 8003bb6:	4629      	mov	r1, r5
 8003bb8:	4630      	mov	r0, r6
 8003bba:	f000 fc81 	bl	80044c0 <_sbrk_r>
 8003bbe:	1c43      	adds	r3, r0, #1
 8003bc0:	d123      	bne.n	8003c0a <_malloc_r+0x92>
 8003bc2:	230c      	movs	r3, #12
 8003bc4:	6033      	str	r3, [r6, #0]
 8003bc6:	4630      	mov	r0, r6
 8003bc8:	f000 fd52 	bl	8004670 <__malloc_unlock>
 8003bcc:	e7e3      	b.n	8003b96 <_malloc_r+0x1e>
 8003bce:	6823      	ldr	r3, [r4, #0]
 8003bd0:	1b5b      	subs	r3, r3, r5
 8003bd2:	d417      	bmi.n	8003c04 <_malloc_r+0x8c>
 8003bd4:	2b0b      	cmp	r3, #11
 8003bd6:	d903      	bls.n	8003be0 <_malloc_r+0x68>
 8003bd8:	6023      	str	r3, [r4, #0]
 8003bda:	441c      	add	r4, r3
 8003bdc:	6025      	str	r5, [r4, #0]
 8003bde:	e004      	b.n	8003bea <_malloc_r+0x72>
 8003be0:	6863      	ldr	r3, [r4, #4]
 8003be2:	42a2      	cmp	r2, r4
 8003be4:	bf0c      	ite	eq
 8003be6:	600b      	streq	r3, [r1, #0]
 8003be8:	6053      	strne	r3, [r2, #4]
 8003bea:	4630      	mov	r0, r6
 8003bec:	f000 fd40 	bl	8004670 <__malloc_unlock>
 8003bf0:	f104 000b 	add.w	r0, r4, #11
 8003bf4:	1d23      	adds	r3, r4, #4
 8003bf6:	f020 0007 	bic.w	r0, r0, #7
 8003bfa:	1ac2      	subs	r2, r0, r3
 8003bfc:	d0cc      	beq.n	8003b98 <_malloc_r+0x20>
 8003bfe:	1a1b      	subs	r3, r3, r0
 8003c00:	50a3      	str	r3, [r4, r2]
 8003c02:	e7c9      	b.n	8003b98 <_malloc_r+0x20>
 8003c04:	4622      	mov	r2, r4
 8003c06:	6864      	ldr	r4, [r4, #4]
 8003c08:	e7cc      	b.n	8003ba4 <_malloc_r+0x2c>
 8003c0a:	1cc4      	adds	r4, r0, #3
 8003c0c:	f024 0403 	bic.w	r4, r4, #3
 8003c10:	42a0      	cmp	r0, r4
 8003c12:	d0e3      	beq.n	8003bdc <_malloc_r+0x64>
 8003c14:	1a21      	subs	r1, r4, r0
 8003c16:	4630      	mov	r0, r6
 8003c18:	f000 fc52 	bl	80044c0 <_sbrk_r>
 8003c1c:	3001      	adds	r0, #1
 8003c1e:	d1dd      	bne.n	8003bdc <_malloc_r+0x64>
 8003c20:	e7cf      	b.n	8003bc2 <_malloc_r+0x4a>
 8003c22:	bf00      	nop
 8003c24:	20000248 	.word	0x20000248
 8003c28:	2000024c 	.word	0x2000024c

08003c2c <__ssputs_r>:
 8003c2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c30:	688e      	ldr	r6, [r1, #8]
 8003c32:	429e      	cmp	r6, r3
 8003c34:	4682      	mov	sl, r0
 8003c36:	460c      	mov	r4, r1
 8003c38:	4690      	mov	r8, r2
 8003c3a:	461f      	mov	r7, r3
 8003c3c:	d838      	bhi.n	8003cb0 <__ssputs_r+0x84>
 8003c3e:	898a      	ldrh	r2, [r1, #12]
 8003c40:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003c44:	d032      	beq.n	8003cac <__ssputs_r+0x80>
 8003c46:	6825      	ldr	r5, [r4, #0]
 8003c48:	6909      	ldr	r1, [r1, #16]
 8003c4a:	eba5 0901 	sub.w	r9, r5, r1
 8003c4e:	6965      	ldr	r5, [r4, #20]
 8003c50:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003c54:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003c58:	3301      	adds	r3, #1
 8003c5a:	444b      	add	r3, r9
 8003c5c:	106d      	asrs	r5, r5, #1
 8003c5e:	429d      	cmp	r5, r3
 8003c60:	bf38      	it	cc
 8003c62:	461d      	movcc	r5, r3
 8003c64:	0553      	lsls	r3, r2, #21
 8003c66:	d531      	bpl.n	8003ccc <__ssputs_r+0xa0>
 8003c68:	4629      	mov	r1, r5
 8003c6a:	f7ff ff85 	bl	8003b78 <_malloc_r>
 8003c6e:	4606      	mov	r6, r0
 8003c70:	b950      	cbnz	r0, 8003c88 <__ssputs_r+0x5c>
 8003c72:	230c      	movs	r3, #12
 8003c74:	f8ca 3000 	str.w	r3, [sl]
 8003c78:	89a3      	ldrh	r3, [r4, #12]
 8003c7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c7e:	81a3      	strh	r3, [r4, #12]
 8003c80:	f04f 30ff 	mov.w	r0, #4294967295
 8003c84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c88:	6921      	ldr	r1, [r4, #16]
 8003c8a:	464a      	mov	r2, r9
 8003c8c:	f000 fcc2 	bl	8004614 <memcpy>
 8003c90:	89a3      	ldrh	r3, [r4, #12]
 8003c92:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003c96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c9a:	81a3      	strh	r3, [r4, #12]
 8003c9c:	6126      	str	r6, [r4, #16]
 8003c9e:	6165      	str	r5, [r4, #20]
 8003ca0:	444e      	add	r6, r9
 8003ca2:	eba5 0509 	sub.w	r5, r5, r9
 8003ca6:	6026      	str	r6, [r4, #0]
 8003ca8:	60a5      	str	r5, [r4, #8]
 8003caa:	463e      	mov	r6, r7
 8003cac:	42be      	cmp	r6, r7
 8003cae:	d900      	bls.n	8003cb2 <__ssputs_r+0x86>
 8003cb0:	463e      	mov	r6, r7
 8003cb2:	4632      	mov	r2, r6
 8003cb4:	6820      	ldr	r0, [r4, #0]
 8003cb6:	4641      	mov	r1, r8
 8003cb8:	f000 fcba 	bl	8004630 <memmove>
 8003cbc:	68a3      	ldr	r3, [r4, #8]
 8003cbe:	6822      	ldr	r2, [r4, #0]
 8003cc0:	1b9b      	subs	r3, r3, r6
 8003cc2:	4432      	add	r2, r6
 8003cc4:	60a3      	str	r3, [r4, #8]
 8003cc6:	6022      	str	r2, [r4, #0]
 8003cc8:	2000      	movs	r0, #0
 8003cca:	e7db      	b.n	8003c84 <__ssputs_r+0x58>
 8003ccc:	462a      	mov	r2, r5
 8003cce:	f000 fcd5 	bl	800467c <_realloc_r>
 8003cd2:	4606      	mov	r6, r0
 8003cd4:	2800      	cmp	r0, #0
 8003cd6:	d1e1      	bne.n	8003c9c <__ssputs_r+0x70>
 8003cd8:	6921      	ldr	r1, [r4, #16]
 8003cda:	4650      	mov	r0, sl
 8003cdc:	f7ff fefc 	bl	8003ad8 <_free_r>
 8003ce0:	e7c7      	b.n	8003c72 <__ssputs_r+0x46>
	...

08003ce4 <_svfiprintf_r>:
 8003ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ce8:	4698      	mov	r8, r3
 8003cea:	898b      	ldrh	r3, [r1, #12]
 8003cec:	061b      	lsls	r3, r3, #24
 8003cee:	b09d      	sub	sp, #116	; 0x74
 8003cf0:	4607      	mov	r7, r0
 8003cf2:	460d      	mov	r5, r1
 8003cf4:	4614      	mov	r4, r2
 8003cf6:	d50e      	bpl.n	8003d16 <_svfiprintf_r+0x32>
 8003cf8:	690b      	ldr	r3, [r1, #16]
 8003cfa:	b963      	cbnz	r3, 8003d16 <_svfiprintf_r+0x32>
 8003cfc:	2140      	movs	r1, #64	; 0x40
 8003cfe:	f7ff ff3b 	bl	8003b78 <_malloc_r>
 8003d02:	6028      	str	r0, [r5, #0]
 8003d04:	6128      	str	r0, [r5, #16]
 8003d06:	b920      	cbnz	r0, 8003d12 <_svfiprintf_r+0x2e>
 8003d08:	230c      	movs	r3, #12
 8003d0a:	603b      	str	r3, [r7, #0]
 8003d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8003d10:	e0d1      	b.n	8003eb6 <_svfiprintf_r+0x1d2>
 8003d12:	2340      	movs	r3, #64	; 0x40
 8003d14:	616b      	str	r3, [r5, #20]
 8003d16:	2300      	movs	r3, #0
 8003d18:	9309      	str	r3, [sp, #36]	; 0x24
 8003d1a:	2320      	movs	r3, #32
 8003d1c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003d20:	f8cd 800c 	str.w	r8, [sp, #12]
 8003d24:	2330      	movs	r3, #48	; 0x30
 8003d26:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003ed0 <_svfiprintf_r+0x1ec>
 8003d2a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003d2e:	f04f 0901 	mov.w	r9, #1
 8003d32:	4623      	mov	r3, r4
 8003d34:	469a      	mov	sl, r3
 8003d36:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003d3a:	b10a      	cbz	r2, 8003d40 <_svfiprintf_r+0x5c>
 8003d3c:	2a25      	cmp	r2, #37	; 0x25
 8003d3e:	d1f9      	bne.n	8003d34 <_svfiprintf_r+0x50>
 8003d40:	ebba 0b04 	subs.w	fp, sl, r4
 8003d44:	d00b      	beq.n	8003d5e <_svfiprintf_r+0x7a>
 8003d46:	465b      	mov	r3, fp
 8003d48:	4622      	mov	r2, r4
 8003d4a:	4629      	mov	r1, r5
 8003d4c:	4638      	mov	r0, r7
 8003d4e:	f7ff ff6d 	bl	8003c2c <__ssputs_r>
 8003d52:	3001      	adds	r0, #1
 8003d54:	f000 80aa 	beq.w	8003eac <_svfiprintf_r+0x1c8>
 8003d58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003d5a:	445a      	add	r2, fp
 8003d5c:	9209      	str	r2, [sp, #36]	; 0x24
 8003d5e:	f89a 3000 	ldrb.w	r3, [sl]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	f000 80a2 	beq.w	8003eac <_svfiprintf_r+0x1c8>
 8003d68:	2300      	movs	r3, #0
 8003d6a:	f04f 32ff 	mov.w	r2, #4294967295
 8003d6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003d72:	f10a 0a01 	add.w	sl, sl, #1
 8003d76:	9304      	str	r3, [sp, #16]
 8003d78:	9307      	str	r3, [sp, #28]
 8003d7a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003d7e:	931a      	str	r3, [sp, #104]	; 0x68
 8003d80:	4654      	mov	r4, sl
 8003d82:	2205      	movs	r2, #5
 8003d84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d88:	4851      	ldr	r0, [pc, #324]	; (8003ed0 <_svfiprintf_r+0x1ec>)
 8003d8a:	f7fc fa31 	bl	80001f0 <memchr>
 8003d8e:	9a04      	ldr	r2, [sp, #16]
 8003d90:	b9d8      	cbnz	r0, 8003dca <_svfiprintf_r+0xe6>
 8003d92:	06d0      	lsls	r0, r2, #27
 8003d94:	bf44      	itt	mi
 8003d96:	2320      	movmi	r3, #32
 8003d98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003d9c:	0711      	lsls	r1, r2, #28
 8003d9e:	bf44      	itt	mi
 8003da0:	232b      	movmi	r3, #43	; 0x2b
 8003da2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003da6:	f89a 3000 	ldrb.w	r3, [sl]
 8003daa:	2b2a      	cmp	r3, #42	; 0x2a
 8003dac:	d015      	beq.n	8003dda <_svfiprintf_r+0xf6>
 8003dae:	9a07      	ldr	r2, [sp, #28]
 8003db0:	4654      	mov	r4, sl
 8003db2:	2000      	movs	r0, #0
 8003db4:	f04f 0c0a 	mov.w	ip, #10
 8003db8:	4621      	mov	r1, r4
 8003dba:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003dbe:	3b30      	subs	r3, #48	; 0x30
 8003dc0:	2b09      	cmp	r3, #9
 8003dc2:	d94e      	bls.n	8003e62 <_svfiprintf_r+0x17e>
 8003dc4:	b1b0      	cbz	r0, 8003df4 <_svfiprintf_r+0x110>
 8003dc6:	9207      	str	r2, [sp, #28]
 8003dc8:	e014      	b.n	8003df4 <_svfiprintf_r+0x110>
 8003dca:	eba0 0308 	sub.w	r3, r0, r8
 8003dce:	fa09 f303 	lsl.w	r3, r9, r3
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	9304      	str	r3, [sp, #16]
 8003dd6:	46a2      	mov	sl, r4
 8003dd8:	e7d2      	b.n	8003d80 <_svfiprintf_r+0x9c>
 8003dda:	9b03      	ldr	r3, [sp, #12]
 8003ddc:	1d19      	adds	r1, r3, #4
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	9103      	str	r1, [sp, #12]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	bfbb      	ittet	lt
 8003de6:	425b      	neglt	r3, r3
 8003de8:	f042 0202 	orrlt.w	r2, r2, #2
 8003dec:	9307      	strge	r3, [sp, #28]
 8003dee:	9307      	strlt	r3, [sp, #28]
 8003df0:	bfb8      	it	lt
 8003df2:	9204      	strlt	r2, [sp, #16]
 8003df4:	7823      	ldrb	r3, [r4, #0]
 8003df6:	2b2e      	cmp	r3, #46	; 0x2e
 8003df8:	d10c      	bne.n	8003e14 <_svfiprintf_r+0x130>
 8003dfa:	7863      	ldrb	r3, [r4, #1]
 8003dfc:	2b2a      	cmp	r3, #42	; 0x2a
 8003dfe:	d135      	bne.n	8003e6c <_svfiprintf_r+0x188>
 8003e00:	9b03      	ldr	r3, [sp, #12]
 8003e02:	1d1a      	adds	r2, r3, #4
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	9203      	str	r2, [sp, #12]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	bfb8      	it	lt
 8003e0c:	f04f 33ff 	movlt.w	r3, #4294967295
 8003e10:	3402      	adds	r4, #2
 8003e12:	9305      	str	r3, [sp, #20]
 8003e14:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003ee0 <_svfiprintf_r+0x1fc>
 8003e18:	7821      	ldrb	r1, [r4, #0]
 8003e1a:	2203      	movs	r2, #3
 8003e1c:	4650      	mov	r0, sl
 8003e1e:	f7fc f9e7 	bl	80001f0 <memchr>
 8003e22:	b140      	cbz	r0, 8003e36 <_svfiprintf_r+0x152>
 8003e24:	2340      	movs	r3, #64	; 0x40
 8003e26:	eba0 000a 	sub.w	r0, r0, sl
 8003e2a:	fa03 f000 	lsl.w	r0, r3, r0
 8003e2e:	9b04      	ldr	r3, [sp, #16]
 8003e30:	4303      	orrs	r3, r0
 8003e32:	3401      	adds	r4, #1
 8003e34:	9304      	str	r3, [sp, #16]
 8003e36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e3a:	4826      	ldr	r0, [pc, #152]	; (8003ed4 <_svfiprintf_r+0x1f0>)
 8003e3c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003e40:	2206      	movs	r2, #6
 8003e42:	f7fc f9d5 	bl	80001f0 <memchr>
 8003e46:	2800      	cmp	r0, #0
 8003e48:	d038      	beq.n	8003ebc <_svfiprintf_r+0x1d8>
 8003e4a:	4b23      	ldr	r3, [pc, #140]	; (8003ed8 <_svfiprintf_r+0x1f4>)
 8003e4c:	bb1b      	cbnz	r3, 8003e96 <_svfiprintf_r+0x1b2>
 8003e4e:	9b03      	ldr	r3, [sp, #12]
 8003e50:	3307      	adds	r3, #7
 8003e52:	f023 0307 	bic.w	r3, r3, #7
 8003e56:	3308      	adds	r3, #8
 8003e58:	9303      	str	r3, [sp, #12]
 8003e5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e5c:	4433      	add	r3, r6
 8003e5e:	9309      	str	r3, [sp, #36]	; 0x24
 8003e60:	e767      	b.n	8003d32 <_svfiprintf_r+0x4e>
 8003e62:	fb0c 3202 	mla	r2, ip, r2, r3
 8003e66:	460c      	mov	r4, r1
 8003e68:	2001      	movs	r0, #1
 8003e6a:	e7a5      	b.n	8003db8 <_svfiprintf_r+0xd4>
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	3401      	adds	r4, #1
 8003e70:	9305      	str	r3, [sp, #20]
 8003e72:	4619      	mov	r1, r3
 8003e74:	f04f 0c0a 	mov.w	ip, #10
 8003e78:	4620      	mov	r0, r4
 8003e7a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003e7e:	3a30      	subs	r2, #48	; 0x30
 8003e80:	2a09      	cmp	r2, #9
 8003e82:	d903      	bls.n	8003e8c <_svfiprintf_r+0x1a8>
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d0c5      	beq.n	8003e14 <_svfiprintf_r+0x130>
 8003e88:	9105      	str	r1, [sp, #20]
 8003e8a:	e7c3      	b.n	8003e14 <_svfiprintf_r+0x130>
 8003e8c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003e90:	4604      	mov	r4, r0
 8003e92:	2301      	movs	r3, #1
 8003e94:	e7f0      	b.n	8003e78 <_svfiprintf_r+0x194>
 8003e96:	ab03      	add	r3, sp, #12
 8003e98:	9300      	str	r3, [sp, #0]
 8003e9a:	462a      	mov	r2, r5
 8003e9c:	4b0f      	ldr	r3, [pc, #60]	; (8003edc <_svfiprintf_r+0x1f8>)
 8003e9e:	a904      	add	r1, sp, #16
 8003ea0:	4638      	mov	r0, r7
 8003ea2:	f3af 8000 	nop.w
 8003ea6:	1c42      	adds	r2, r0, #1
 8003ea8:	4606      	mov	r6, r0
 8003eaa:	d1d6      	bne.n	8003e5a <_svfiprintf_r+0x176>
 8003eac:	89ab      	ldrh	r3, [r5, #12]
 8003eae:	065b      	lsls	r3, r3, #25
 8003eb0:	f53f af2c 	bmi.w	8003d0c <_svfiprintf_r+0x28>
 8003eb4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003eb6:	b01d      	add	sp, #116	; 0x74
 8003eb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ebc:	ab03      	add	r3, sp, #12
 8003ebe:	9300      	str	r3, [sp, #0]
 8003ec0:	462a      	mov	r2, r5
 8003ec2:	4b06      	ldr	r3, [pc, #24]	; (8003edc <_svfiprintf_r+0x1f8>)
 8003ec4:	a904      	add	r1, sp, #16
 8003ec6:	4638      	mov	r0, r7
 8003ec8:	f000 f9d4 	bl	8004274 <_printf_i>
 8003ecc:	e7eb      	b.n	8003ea6 <_svfiprintf_r+0x1c2>
 8003ece:	bf00      	nop
 8003ed0:	080049cc 	.word	0x080049cc
 8003ed4:	080049d6 	.word	0x080049d6
 8003ed8:	00000000 	.word	0x00000000
 8003edc:	08003c2d 	.word	0x08003c2d
 8003ee0:	080049d2 	.word	0x080049d2

08003ee4 <__sfputc_r>:
 8003ee4:	6893      	ldr	r3, [r2, #8]
 8003ee6:	3b01      	subs	r3, #1
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	b410      	push	{r4}
 8003eec:	6093      	str	r3, [r2, #8]
 8003eee:	da08      	bge.n	8003f02 <__sfputc_r+0x1e>
 8003ef0:	6994      	ldr	r4, [r2, #24]
 8003ef2:	42a3      	cmp	r3, r4
 8003ef4:	db01      	blt.n	8003efa <__sfputc_r+0x16>
 8003ef6:	290a      	cmp	r1, #10
 8003ef8:	d103      	bne.n	8003f02 <__sfputc_r+0x1e>
 8003efa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003efe:	f7ff bb0d 	b.w	800351c <__swbuf_r>
 8003f02:	6813      	ldr	r3, [r2, #0]
 8003f04:	1c58      	adds	r0, r3, #1
 8003f06:	6010      	str	r0, [r2, #0]
 8003f08:	7019      	strb	r1, [r3, #0]
 8003f0a:	4608      	mov	r0, r1
 8003f0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003f10:	4770      	bx	lr

08003f12 <__sfputs_r>:
 8003f12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f14:	4606      	mov	r6, r0
 8003f16:	460f      	mov	r7, r1
 8003f18:	4614      	mov	r4, r2
 8003f1a:	18d5      	adds	r5, r2, r3
 8003f1c:	42ac      	cmp	r4, r5
 8003f1e:	d101      	bne.n	8003f24 <__sfputs_r+0x12>
 8003f20:	2000      	movs	r0, #0
 8003f22:	e007      	b.n	8003f34 <__sfputs_r+0x22>
 8003f24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f28:	463a      	mov	r2, r7
 8003f2a:	4630      	mov	r0, r6
 8003f2c:	f7ff ffda 	bl	8003ee4 <__sfputc_r>
 8003f30:	1c43      	adds	r3, r0, #1
 8003f32:	d1f3      	bne.n	8003f1c <__sfputs_r+0xa>
 8003f34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003f38 <_vfiprintf_r>:
 8003f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f3c:	460d      	mov	r5, r1
 8003f3e:	b09d      	sub	sp, #116	; 0x74
 8003f40:	4614      	mov	r4, r2
 8003f42:	4698      	mov	r8, r3
 8003f44:	4606      	mov	r6, r0
 8003f46:	b118      	cbz	r0, 8003f50 <_vfiprintf_r+0x18>
 8003f48:	6983      	ldr	r3, [r0, #24]
 8003f4a:	b90b      	cbnz	r3, 8003f50 <_vfiprintf_r+0x18>
 8003f4c:	f7ff fcc0 	bl	80038d0 <__sinit>
 8003f50:	4b89      	ldr	r3, [pc, #548]	; (8004178 <_vfiprintf_r+0x240>)
 8003f52:	429d      	cmp	r5, r3
 8003f54:	d11b      	bne.n	8003f8e <_vfiprintf_r+0x56>
 8003f56:	6875      	ldr	r5, [r6, #4]
 8003f58:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003f5a:	07d9      	lsls	r1, r3, #31
 8003f5c:	d405      	bmi.n	8003f6a <_vfiprintf_r+0x32>
 8003f5e:	89ab      	ldrh	r3, [r5, #12]
 8003f60:	059a      	lsls	r2, r3, #22
 8003f62:	d402      	bmi.n	8003f6a <_vfiprintf_r+0x32>
 8003f64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003f66:	f7ff fd51 	bl	8003a0c <__retarget_lock_acquire_recursive>
 8003f6a:	89ab      	ldrh	r3, [r5, #12]
 8003f6c:	071b      	lsls	r3, r3, #28
 8003f6e:	d501      	bpl.n	8003f74 <_vfiprintf_r+0x3c>
 8003f70:	692b      	ldr	r3, [r5, #16]
 8003f72:	b9eb      	cbnz	r3, 8003fb0 <_vfiprintf_r+0x78>
 8003f74:	4629      	mov	r1, r5
 8003f76:	4630      	mov	r0, r6
 8003f78:	f7ff fb22 	bl	80035c0 <__swsetup_r>
 8003f7c:	b1c0      	cbz	r0, 8003fb0 <_vfiprintf_r+0x78>
 8003f7e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003f80:	07dc      	lsls	r4, r3, #31
 8003f82:	d50e      	bpl.n	8003fa2 <_vfiprintf_r+0x6a>
 8003f84:	f04f 30ff 	mov.w	r0, #4294967295
 8003f88:	b01d      	add	sp, #116	; 0x74
 8003f8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f8e:	4b7b      	ldr	r3, [pc, #492]	; (800417c <_vfiprintf_r+0x244>)
 8003f90:	429d      	cmp	r5, r3
 8003f92:	d101      	bne.n	8003f98 <_vfiprintf_r+0x60>
 8003f94:	68b5      	ldr	r5, [r6, #8]
 8003f96:	e7df      	b.n	8003f58 <_vfiprintf_r+0x20>
 8003f98:	4b79      	ldr	r3, [pc, #484]	; (8004180 <_vfiprintf_r+0x248>)
 8003f9a:	429d      	cmp	r5, r3
 8003f9c:	bf08      	it	eq
 8003f9e:	68f5      	ldreq	r5, [r6, #12]
 8003fa0:	e7da      	b.n	8003f58 <_vfiprintf_r+0x20>
 8003fa2:	89ab      	ldrh	r3, [r5, #12]
 8003fa4:	0598      	lsls	r0, r3, #22
 8003fa6:	d4ed      	bmi.n	8003f84 <_vfiprintf_r+0x4c>
 8003fa8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003faa:	f7ff fd30 	bl	8003a0e <__retarget_lock_release_recursive>
 8003fae:	e7e9      	b.n	8003f84 <_vfiprintf_r+0x4c>
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	9309      	str	r3, [sp, #36]	; 0x24
 8003fb4:	2320      	movs	r3, #32
 8003fb6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003fba:	f8cd 800c 	str.w	r8, [sp, #12]
 8003fbe:	2330      	movs	r3, #48	; 0x30
 8003fc0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004184 <_vfiprintf_r+0x24c>
 8003fc4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003fc8:	f04f 0901 	mov.w	r9, #1
 8003fcc:	4623      	mov	r3, r4
 8003fce:	469a      	mov	sl, r3
 8003fd0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003fd4:	b10a      	cbz	r2, 8003fda <_vfiprintf_r+0xa2>
 8003fd6:	2a25      	cmp	r2, #37	; 0x25
 8003fd8:	d1f9      	bne.n	8003fce <_vfiprintf_r+0x96>
 8003fda:	ebba 0b04 	subs.w	fp, sl, r4
 8003fde:	d00b      	beq.n	8003ff8 <_vfiprintf_r+0xc0>
 8003fe0:	465b      	mov	r3, fp
 8003fe2:	4622      	mov	r2, r4
 8003fe4:	4629      	mov	r1, r5
 8003fe6:	4630      	mov	r0, r6
 8003fe8:	f7ff ff93 	bl	8003f12 <__sfputs_r>
 8003fec:	3001      	adds	r0, #1
 8003fee:	f000 80aa 	beq.w	8004146 <_vfiprintf_r+0x20e>
 8003ff2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003ff4:	445a      	add	r2, fp
 8003ff6:	9209      	str	r2, [sp, #36]	; 0x24
 8003ff8:	f89a 3000 	ldrb.w	r3, [sl]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	f000 80a2 	beq.w	8004146 <_vfiprintf_r+0x20e>
 8004002:	2300      	movs	r3, #0
 8004004:	f04f 32ff 	mov.w	r2, #4294967295
 8004008:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800400c:	f10a 0a01 	add.w	sl, sl, #1
 8004010:	9304      	str	r3, [sp, #16]
 8004012:	9307      	str	r3, [sp, #28]
 8004014:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004018:	931a      	str	r3, [sp, #104]	; 0x68
 800401a:	4654      	mov	r4, sl
 800401c:	2205      	movs	r2, #5
 800401e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004022:	4858      	ldr	r0, [pc, #352]	; (8004184 <_vfiprintf_r+0x24c>)
 8004024:	f7fc f8e4 	bl	80001f0 <memchr>
 8004028:	9a04      	ldr	r2, [sp, #16]
 800402a:	b9d8      	cbnz	r0, 8004064 <_vfiprintf_r+0x12c>
 800402c:	06d1      	lsls	r1, r2, #27
 800402e:	bf44      	itt	mi
 8004030:	2320      	movmi	r3, #32
 8004032:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004036:	0713      	lsls	r3, r2, #28
 8004038:	bf44      	itt	mi
 800403a:	232b      	movmi	r3, #43	; 0x2b
 800403c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004040:	f89a 3000 	ldrb.w	r3, [sl]
 8004044:	2b2a      	cmp	r3, #42	; 0x2a
 8004046:	d015      	beq.n	8004074 <_vfiprintf_r+0x13c>
 8004048:	9a07      	ldr	r2, [sp, #28]
 800404a:	4654      	mov	r4, sl
 800404c:	2000      	movs	r0, #0
 800404e:	f04f 0c0a 	mov.w	ip, #10
 8004052:	4621      	mov	r1, r4
 8004054:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004058:	3b30      	subs	r3, #48	; 0x30
 800405a:	2b09      	cmp	r3, #9
 800405c:	d94e      	bls.n	80040fc <_vfiprintf_r+0x1c4>
 800405e:	b1b0      	cbz	r0, 800408e <_vfiprintf_r+0x156>
 8004060:	9207      	str	r2, [sp, #28]
 8004062:	e014      	b.n	800408e <_vfiprintf_r+0x156>
 8004064:	eba0 0308 	sub.w	r3, r0, r8
 8004068:	fa09 f303 	lsl.w	r3, r9, r3
 800406c:	4313      	orrs	r3, r2
 800406e:	9304      	str	r3, [sp, #16]
 8004070:	46a2      	mov	sl, r4
 8004072:	e7d2      	b.n	800401a <_vfiprintf_r+0xe2>
 8004074:	9b03      	ldr	r3, [sp, #12]
 8004076:	1d19      	adds	r1, r3, #4
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	9103      	str	r1, [sp, #12]
 800407c:	2b00      	cmp	r3, #0
 800407e:	bfbb      	ittet	lt
 8004080:	425b      	neglt	r3, r3
 8004082:	f042 0202 	orrlt.w	r2, r2, #2
 8004086:	9307      	strge	r3, [sp, #28]
 8004088:	9307      	strlt	r3, [sp, #28]
 800408a:	bfb8      	it	lt
 800408c:	9204      	strlt	r2, [sp, #16]
 800408e:	7823      	ldrb	r3, [r4, #0]
 8004090:	2b2e      	cmp	r3, #46	; 0x2e
 8004092:	d10c      	bne.n	80040ae <_vfiprintf_r+0x176>
 8004094:	7863      	ldrb	r3, [r4, #1]
 8004096:	2b2a      	cmp	r3, #42	; 0x2a
 8004098:	d135      	bne.n	8004106 <_vfiprintf_r+0x1ce>
 800409a:	9b03      	ldr	r3, [sp, #12]
 800409c:	1d1a      	adds	r2, r3, #4
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	9203      	str	r2, [sp, #12]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	bfb8      	it	lt
 80040a6:	f04f 33ff 	movlt.w	r3, #4294967295
 80040aa:	3402      	adds	r4, #2
 80040ac:	9305      	str	r3, [sp, #20]
 80040ae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004194 <_vfiprintf_r+0x25c>
 80040b2:	7821      	ldrb	r1, [r4, #0]
 80040b4:	2203      	movs	r2, #3
 80040b6:	4650      	mov	r0, sl
 80040b8:	f7fc f89a 	bl	80001f0 <memchr>
 80040bc:	b140      	cbz	r0, 80040d0 <_vfiprintf_r+0x198>
 80040be:	2340      	movs	r3, #64	; 0x40
 80040c0:	eba0 000a 	sub.w	r0, r0, sl
 80040c4:	fa03 f000 	lsl.w	r0, r3, r0
 80040c8:	9b04      	ldr	r3, [sp, #16]
 80040ca:	4303      	orrs	r3, r0
 80040cc:	3401      	adds	r4, #1
 80040ce:	9304      	str	r3, [sp, #16]
 80040d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040d4:	482c      	ldr	r0, [pc, #176]	; (8004188 <_vfiprintf_r+0x250>)
 80040d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80040da:	2206      	movs	r2, #6
 80040dc:	f7fc f888 	bl	80001f0 <memchr>
 80040e0:	2800      	cmp	r0, #0
 80040e2:	d03f      	beq.n	8004164 <_vfiprintf_r+0x22c>
 80040e4:	4b29      	ldr	r3, [pc, #164]	; (800418c <_vfiprintf_r+0x254>)
 80040e6:	bb1b      	cbnz	r3, 8004130 <_vfiprintf_r+0x1f8>
 80040e8:	9b03      	ldr	r3, [sp, #12]
 80040ea:	3307      	adds	r3, #7
 80040ec:	f023 0307 	bic.w	r3, r3, #7
 80040f0:	3308      	adds	r3, #8
 80040f2:	9303      	str	r3, [sp, #12]
 80040f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80040f6:	443b      	add	r3, r7
 80040f8:	9309      	str	r3, [sp, #36]	; 0x24
 80040fa:	e767      	b.n	8003fcc <_vfiprintf_r+0x94>
 80040fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8004100:	460c      	mov	r4, r1
 8004102:	2001      	movs	r0, #1
 8004104:	e7a5      	b.n	8004052 <_vfiprintf_r+0x11a>
 8004106:	2300      	movs	r3, #0
 8004108:	3401      	adds	r4, #1
 800410a:	9305      	str	r3, [sp, #20]
 800410c:	4619      	mov	r1, r3
 800410e:	f04f 0c0a 	mov.w	ip, #10
 8004112:	4620      	mov	r0, r4
 8004114:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004118:	3a30      	subs	r2, #48	; 0x30
 800411a:	2a09      	cmp	r2, #9
 800411c:	d903      	bls.n	8004126 <_vfiprintf_r+0x1ee>
 800411e:	2b00      	cmp	r3, #0
 8004120:	d0c5      	beq.n	80040ae <_vfiprintf_r+0x176>
 8004122:	9105      	str	r1, [sp, #20]
 8004124:	e7c3      	b.n	80040ae <_vfiprintf_r+0x176>
 8004126:	fb0c 2101 	mla	r1, ip, r1, r2
 800412a:	4604      	mov	r4, r0
 800412c:	2301      	movs	r3, #1
 800412e:	e7f0      	b.n	8004112 <_vfiprintf_r+0x1da>
 8004130:	ab03      	add	r3, sp, #12
 8004132:	9300      	str	r3, [sp, #0]
 8004134:	462a      	mov	r2, r5
 8004136:	4b16      	ldr	r3, [pc, #88]	; (8004190 <_vfiprintf_r+0x258>)
 8004138:	a904      	add	r1, sp, #16
 800413a:	4630      	mov	r0, r6
 800413c:	f3af 8000 	nop.w
 8004140:	4607      	mov	r7, r0
 8004142:	1c78      	adds	r0, r7, #1
 8004144:	d1d6      	bne.n	80040f4 <_vfiprintf_r+0x1bc>
 8004146:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004148:	07d9      	lsls	r1, r3, #31
 800414a:	d405      	bmi.n	8004158 <_vfiprintf_r+0x220>
 800414c:	89ab      	ldrh	r3, [r5, #12]
 800414e:	059a      	lsls	r2, r3, #22
 8004150:	d402      	bmi.n	8004158 <_vfiprintf_r+0x220>
 8004152:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004154:	f7ff fc5b 	bl	8003a0e <__retarget_lock_release_recursive>
 8004158:	89ab      	ldrh	r3, [r5, #12]
 800415a:	065b      	lsls	r3, r3, #25
 800415c:	f53f af12 	bmi.w	8003f84 <_vfiprintf_r+0x4c>
 8004160:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004162:	e711      	b.n	8003f88 <_vfiprintf_r+0x50>
 8004164:	ab03      	add	r3, sp, #12
 8004166:	9300      	str	r3, [sp, #0]
 8004168:	462a      	mov	r2, r5
 800416a:	4b09      	ldr	r3, [pc, #36]	; (8004190 <_vfiprintf_r+0x258>)
 800416c:	a904      	add	r1, sp, #16
 800416e:	4630      	mov	r0, r6
 8004170:	f000 f880 	bl	8004274 <_printf_i>
 8004174:	e7e4      	b.n	8004140 <_vfiprintf_r+0x208>
 8004176:	bf00      	nop
 8004178:	0800498c 	.word	0x0800498c
 800417c:	080049ac 	.word	0x080049ac
 8004180:	0800496c 	.word	0x0800496c
 8004184:	080049cc 	.word	0x080049cc
 8004188:	080049d6 	.word	0x080049d6
 800418c:	00000000 	.word	0x00000000
 8004190:	08003f13 	.word	0x08003f13
 8004194:	080049d2 	.word	0x080049d2

08004198 <_printf_common>:
 8004198:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800419c:	4616      	mov	r6, r2
 800419e:	4699      	mov	r9, r3
 80041a0:	688a      	ldr	r2, [r1, #8]
 80041a2:	690b      	ldr	r3, [r1, #16]
 80041a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80041a8:	4293      	cmp	r3, r2
 80041aa:	bfb8      	it	lt
 80041ac:	4613      	movlt	r3, r2
 80041ae:	6033      	str	r3, [r6, #0]
 80041b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80041b4:	4607      	mov	r7, r0
 80041b6:	460c      	mov	r4, r1
 80041b8:	b10a      	cbz	r2, 80041be <_printf_common+0x26>
 80041ba:	3301      	adds	r3, #1
 80041bc:	6033      	str	r3, [r6, #0]
 80041be:	6823      	ldr	r3, [r4, #0]
 80041c0:	0699      	lsls	r1, r3, #26
 80041c2:	bf42      	ittt	mi
 80041c4:	6833      	ldrmi	r3, [r6, #0]
 80041c6:	3302      	addmi	r3, #2
 80041c8:	6033      	strmi	r3, [r6, #0]
 80041ca:	6825      	ldr	r5, [r4, #0]
 80041cc:	f015 0506 	ands.w	r5, r5, #6
 80041d0:	d106      	bne.n	80041e0 <_printf_common+0x48>
 80041d2:	f104 0a19 	add.w	sl, r4, #25
 80041d6:	68e3      	ldr	r3, [r4, #12]
 80041d8:	6832      	ldr	r2, [r6, #0]
 80041da:	1a9b      	subs	r3, r3, r2
 80041dc:	42ab      	cmp	r3, r5
 80041de:	dc26      	bgt.n	800422e <_printf_common+0x96>
 80041e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80041e4:	1e13      	subs	r3, r2, #0
 80041e6:	6822      	ldr	r2, [r4, #0]
 80041e8:	bf18      	it	ne
 80041ea:	2301      	movne	r3, #1
 80041ec:	0692      	lsls	r2, r2, #26
 80041ee:	d42b      	bmi.n	8004248 <_printf_common+0xb0>
 80041f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80041f4:	4649      	mov	r1, r9
 80041f6:	4638      	mov	r0, r7
 80041f8:	47c0      	blx	r8
 80041fa:	3001      	adds	r0, #1
 80041fc:	d01e      	beq.n	800423c <_printf_common+0xa4>
 80041fe:	6823      	ldr	r3, [r4, #0]
 8004200:	68e5      	ldr	r5, [r4, #12]
 8004202:	6832      	ldr	r2, [r6, #0]
 8004204:	f003 0306 	and.w	r3, r3, #6
 8004208:	2b04      	cmp	r3, #4
 800420a:	bf08      	it	eq
 800420c:	1aad      	subeq	r5, r5, r2
 800420e:	68a3      	ldr	r3, [r4, #8]
 8004210:	6922      	ldr	r2, [r4, #16]
 8004212:	bf0c      	ite	eq
 8004214:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004218:	2500      	movne	r5, #0
 800421a:	4293      	cmp	r3, r2
 800421c:	bfc4      	itt	gt
 800421e:	1a9b      	subgt	r3, r3, r2
 8004220:	18ed      	addgt	r5, r5, r3
 8004222:	2600      	movs	r6, #0
 8004224:	341a      	adds	r4, #26
 8004226:	42b5      	cmp	r5, r6
 8004228:	d11a      	bne.n	8004260 <_printf_common+0xc8>
 800422a:	2000      	movs	r0, #0
 800422c:	e008      	b.n	8004240 <_printf_common+0xa8>
 800422e:	2301      	movs	r3, #1
 8004230:	4652      	mov	r2, sl
 8004232:	4649      	mov	r1, r9
 8004234:	4638      	mov	r0, r7
 8004236:	47c0      	blx	r8
 8004238:	3001      	adds	r0, #1
 800423a:	d103      	bne.n	8004244 <_printf_common+0xac>
 800423c:	f04f 30ff 	mov.w	r0, #4294967295
 8004240:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004244:	3501      	adds	r5, #1
 8004246:	e7c6      	b.n	80041d6 <_printf_common+0x3e>
 8004248:	18e1      	adds	r1, r4, r3
 800424a:	1c5a      	adds	r2, r3, #1
 800424c:	2030      	movs	r0, #48	; 0x30
 800424e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004252:	4422      	add	r2, r4
 8004254:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004258:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800425c:	3302      	adds	r3, #2
 800425e:	e7c7      	b.n	80041f0 <_printf_common+0x58>
 8004260:	2301      	movs	r3, #1
 8004262:	4622      	mov	r2, r4
 8004264:	4649      	mov	r1, r9
 8004266:	4638      	mov	r0, r7
 8004268:	47c0      	blx	r8
 800426a:	3001      	adds	r0, #1
 800426c:	d0e6      	beq.n	800423c <_printf_common+0xa4>
 800426e:	3601      	adds	r6, #1
 8004270:	e7d9      	b.n	8004226 <_printf_common+0x8e>
	...

08004274 <_printf_i>:
 8004274:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004278:	460c      	mov	r4, r1
 800427a:	4691      	mov	r9, r2
 800427c:	7e27      	ldrb	r7, [r4, #24]
 800427e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004280:	2f78      	cmp	r7, #120	; 0x78
 8004282:	4680      	mov	r8, r0
 8004284:	469a      	mov	sl, r3
 8004286:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800428a:	d807      	bhi.n	800429c <_printf_i+0x28>
 800428c:	2f62      	cmp	r7, #98	; 0x62
 800428e:	d80a      	bhi.n	80042a6 <_printf_i+0x32>
 8004290:	2f00      	cmp	r7, #0
 8004292:	f000 80d8 	beq.w	8004446 <_printf_i+0x1d2>
 8004296:	2f58      	cmp	r7, #88	; 0x58
 8004298:	f000 80a3 	beq.w	80043e2 <_printf_i+0x16e>
 800429c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80042a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80042a4:	e03a      	b.n	800431c <_printf_i+0xa8>
 80042a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80042aa:	2b15      	cmp	r3, #21
 80042ac:	d8f6      	bhi.n	800429c <_printf_i+0x28>
 80042ae:	a001      	add	r0, pc, #4	; (adr r0, 80042b4 <_printf_i+0x40>)
 80042b0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80042b4:	0800430d 	.word	0x0800430d
 80042b8:	08004321 	.word	0x08004321
 80042bc:	0800429d 	.word	0x0800429d
 80042c0:	0800429d 	.word	0x0800429d
 80042c4:	0800429d 	.word	0x0800429d
 80042c8:	0800429d 	.word	0x0800429d
 80042cc:	08004321 	.word	0x08004321
 80042d0:	0800429d 	.word	0x0800429d
 80042d4:	0800429d 	.word	0x0800429d
 80042d8:	0800429d 	.word	0x0800429d
 80042dc:	0800429d 	.word	0x0800429d
 80042e0:	0800442d 	.word	0x0800442d
 80042e4:	08004351 	.word	0x08004351
 80042e8:	0800440f 	.word	0x0800440f
 80042ec:	0800429d 	.word	0x0800429d
 80042f0:	0800429d 	.word	0x0800429d
 80042f4:	0800444f 	.word	0x0800444f
 80042f8:	0800429d 	.word	0x0800429d
 80042fc:	08004351 	.word	0x08004351
 8004300:	0800429d 	.word	0x0800429d
 8004304:	0800429d 	.word	0x0800429d
 8004308:	08004417 	.word	0x08004417
 800430c:	680b      	ldr	r3, [r1, #0]
 800430e:	1d1a      	adds	r2, r3, #4
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	600a      	str	r2, [r1, #0]
 8004314:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004318:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800431c:	2301      	movs	r3, #1
 800431e:	e0a3      	b.n	8004468 <_printf_i+0x1f4>
 8004320:	6825      	ldr	r5, [r4, #0]
 8004322:	6808      	ldr	r0, [r1, #0]
 8004324:	062e      	lsls	r6, r5, #24
 8004326:	f100 0304 	add.w	r3, r0, #4
 800432a:	d50a      	bpl.n	8004342 <_printf_i+0xce>
 800432c:	6805      	ldr	r5, [r0, #0]
 800432e:	600b      	str	r3, [r1, #0]
 8004330:	2d00      	cmp	r5, #0
 8004332:	da03      	bge.n	800433c <_printf_i+0xc8>
 8004334:	232d      	movs	r3, #45	; 0x2d
 8004336:	426d      	negs	r5, r5
 8004338:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800433c:	485e      	ldr	r0, [pc, #376]	; (80044b8 <_printf_i+0x244>)
 800433e:	230a      	movs	r3, #10
 8004340:	e019      	b.n	8004376 <_printf_i+0x102>
 8004342:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004346:	6805      	ldr	r5, [r0, #0]
 8004348:	600b      	str	r3, [r1, #0]
 800434a:	bf18      	it	ne
 800434c:	b22d      	sxthne	r5, r5
 800434e:	e7ef      	b.n	8004330 <_printf_i+0xbc>
 8004350:	680b      	ldr	r3, [r1, #0]
 8004352:	6825      	ldr	r5, [r4, #0]
 8004354:	1d18      	adds	r0, r3, #4
 8004356:	6008      	str	r0, [r1, #0]
 8004358:	0628      	lsls	r0, r5, #24
 800435a:	d501      	bpl.n	8004360 <_printf_i+0xec>
 800435c:	681d      	ldr	r5, [r3, #0]
 800435e:	e002      	b.n	8004366 <_printf_i+0xf2>
 8004360:	0669      	lsls	r1, r5, #25
 8004362:	d5fb      	bpl.n	800435c <_printf_i+0xe8>
 8004364:	881d      	ldrh	r5, [r3, #0]
 8004366:	4854      	ldr	r0, [pc, #336]	; (80044b8 <_printf_i+0x244>)
 8004368:	2f6f      	cmp	r7, #111	; 0x6f
 800436a:	bf0c      	ite	eq
 800436c:	2308      	moveq	r3, #8
 800436e:	230a      	movne	r3, #10
 8004370:	2100      	movs	r1, #0
 8004372:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004376:	6866      	ldr	r6, [r4, #4]
 8004378:	60a6      	str	r6, [r4, #8]
 800437a:	2e00      	cmp	r6, #0
 800437c:	bfa2      	ittt	ge
 800437e:	6821      	ldrge	r1, [r4, #0]
 8004380:	f021 0104 	bicge.w	r1, r1, #4
 8004384:	6021      	strge	r1, [r4, #0]
 8004386:	b90d      	cbnz	r5, 800438c <_printf_i+0x118>
 8004388:	2e00      	cmp	r6, #0
 800438a:	d04d      	beq.n	8004428 <_printf_i+0x1b4>
 800438c:	4616      	mov	r6, r2
 800438e:	fbb5 f1f3 	udiv	r1, r5, r3
 8004392:	fb03 5711 	mls	r7, r3, r1, r5
 8004396:	5dc7      	ldrb	r7, [r0, r7]
 8004398:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800439c:	462f      	mov	r7, r5
 800439e:	42bb      	cmp	r3, r7
 80043a0:	460d      	mov	r5, r1
 80043a2:	d9f4      	bls.n	800438e <_printf_i+0x11a>
 80043a4:	2b08      	cmp	r3, #8
 80043a6:	d10b      	bne.n	80043c0 <_printf_i+0x14c>
 80043a8:	6823      	ldr	r3, [r4, #0]
 80043aa:	07df      	lsls	r7, r3, #31
 80043ac:	d508      	bpl.n	80043c0 <_printf_i+0x14c>
 80043ae:	6923      	ldr	r3, [r4, #16]
 80043b0:	6861      	ldr	r1, [r4, #4]
 80043b2:	4299      	cmp	r1, r3
 80043b4:	bfde      	ittt	le
 80043b6:	2330      	movle	r3, #48	; 0x30
 80043b8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80043bc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80043c0:	1b92      	subs	r2, r2, r6
 80043c2:	6122      	str	r2, [r4, #16]
 80043c4:	f8cd a000 	str.w	sl, [sp]
 80043c8:	464b      	mov	r3, r9
 80043ca:	aa03      	add	r2, sp, #12
 80043cc:	4621      	mov	r1, r4
 80043ce:	4640      	mov	r0, r8
 80043d0:	f7ff fee2 	bl	8004198 <_printf_common>
 80043d4:	3001      	adds	r0, #1
 80043d6:	d14c      	bne.n	8004472 <_printf_i+0x1fe>
 80043d8:	f04f 30ff 	mov.w	r0, #4294967295
 80043dc:	b004      	add	sp, #16
 80043de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043e2:	4835      	ldr	r0, [pc, #212]	; (80044b8 <_printf_i+0x244>)
 80043e4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80043e8:	6823      	ldr	r3, [r4, #0]
 80043ea:	680e      	ldr	r6, [r1, #0]
 80043ec:	061f      	lsls	r7, r3, #24
 80043ee:	f856 5b04 	ldr.w	r5, [r6], #4
 80043f2:	600e      	str	r6, [r1, #0]
 80043f4:	d514      	bpl.n	8004420 <_printf_i+0x1ac>
 80043f6:	07d9      	lsls	r1, r3, #31
 80043f8:	bf44      	itt	mi
 80043fa:	f043 0320 	orrmi.w	r3, r3, #32
 80043fe:	6023      	strmi	r3, [r4, #0]
 8004400:	b91d      	cbnz	r5, 800440a <_printf_i+0x196>
 8004402:	6823      	ldr	r3, [r4, #0]
 8004404:	f023 0320 	bic.w	r3, r3, #32
 8004408:	6023      	str	r3, [r4, #0]
 800440a:	2310      	movs	r3, #16
 800440c:	e7b0      	b.n	8004370 <_printf_i+0xfc>
 800440e:	6823      	ldr	r3, [r4, #0]
 8004410:	f043 0320 	orr.w	r3, r3, #32
 8004414:	6023      	str	r3, [r4, #0]
 8004416:	2378      	movs	r3, #120	; 0x78
 8004418:	4828      	ldr	r0, [pc, #160]	; (80044bc <_printf_i+0x248>)
 800441a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800441e:	e7e3      	b.n	80043e8 <_printf_i+0x174>
 8004420:	065e      	lsls	r6, r3, #25
 8004422:	bf48      	it	mi
 8004424:	b2ad      	uxthmi	r5, r5
 8004426:	e7e6      	b.n	80043f6 <_printf_i+0x182>
 8004428:	4616      	mov	r6, r2
 800442a:	e7bb      	b.n	80043a4 <_printf_i+0x130>
 800442c:	680b      	ldr	r3, [r1, #0]
 800442e:	6826      	ldr	r6, [r4, #0]
 8004430:	6960      	ldr	r0, [r4, #20]
 8004432:	1d1d      	adds	r5, r3, #4
 8004434:	600d      	str	r5, [r1, #0]
 8004436:	0635      	lsls	r5, r6, #24
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	d501      	bpl.n	8004440 <_printf_i+0x1cc>
 800443c:	6018      	str	r0, [r3, #0]
 800443e:	e002      	b.n	8004446 <_printf_i+0x1d2>
 8004440:	0671      	lsls	r1, r6, #25
 8004442:	d5fb      	bpl.n	800443c <_printf_i+0x1c8>
 8004444:	8018      	strh	r0, [r3, #0]
 8004446:	2300      	movs	r3, #0
 8004448:	6123      	str	r3, [r4, #16]
 800444a:	4616      	mov	r6, r2
 800444c:	e7ba      	b.n	80043c4 <_printf_i+0x150>
 800444e:	680b      	ldr	r3, [r1, #0]
 8004450:	1d1a      	adds	r2, r3, #4
 8004452:	600a      	str	r2, [r1, #0]
 8004454:	681e      	ldr	r6, [r3, #0]
 8004456:	6862      	ldr	r2, [r4, #4]
 8004458:	2100      	movs	r1, #0
 800445a:	4630      	mov	r0, r6
 800445c:	f7fb fec8 	bl	80001f0 <memchr>
 8004460:	b108      	cbz	r0, 8004466 <_printf_i+0x1f2>
 8004462:	1b80      	subs	r0, r0, r6
 8004464:	6060      	str	r0, [r4, #4]
 8004466:	6863      	ldr	r3, [r4, #4]
 8004468:	6123      	str	r3, [r4, #16]
 800446a:	2300      	movs	r3, #0
 800446c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004470:	e7a8      	b.n	80043c4 <_printf_i+0x150>
 8004472:	6923      	ldr	r3, [r4, #16]
 8004474:	4632      	mov	r2, r6
 8004476:	4649      	mov	r1, r9
 8004478:	4640      	mov	r0, r8
 800447a:	47d0      	blx	sl
 800447c:	3001      	adds	r0, #1
 800447e:	d0ab      	beq.n	80043d8 <_printf_i+0x164>
 8004480:	6823      	ldr	r3, [r4, #0]
 8004482:	079b      	lsls	r3, r3, #30
 8004484:	d413      	bmi.n	80044ae <_printf_i+0x23a>
 8004486:	68e0      	ldr	r0, [r4, #12]
 8004488:	9b03      	ldr	r3, [sp, #12]
 800448a:	4298      	cmp	r0, r3
 800448c:	bfb8      	it	lt
 800448e:	4618      	movlt	r0, r3
 8004490:	e7a4      	b.n	80043dc <_printf_i+0x168>
 8004492:	2301      	movs	r3, #1
 8004494:	4632      	mov	r2, r6
 8004496:	4649      	mov	r1, r9
 8004498:	4640      	mov	r0, r8
 800449a:	47d0      	blx	sl
 800449c:	3001      	adds	r0, #1
 800449e:	d09b      	beq.n	80043d8 <_printf_i+0x164>
 80044a0:	3501      	adds	r5, #1
 80044a2:	68e3      	ldr	r3, [r4, #12]
 80044a4:	9903      	ldr	r1, [sp, #12]
 80044a6:	1a5b      	subs	r3, r3, r1
 80044a8:	42ab      	cmp	r3, r5
 80044aa:	dcf2      	bgt.n	8004492 <_printf_i+0x21e>
 80044ac:	e7eb      	b.n	8004486 <_printf_i+0x212>
 80044ae:	2500      	movs	r5, #0
 80044b0:	f104 0619 	add.w	r6, r4, #25
 80044b4:	e7f5      	b.n	80044a2 <_printf_i+0x22e>
 80044b6:	bf00      	nop
 80044b8:	080049dd 	.word	0x080049dd
 80044bc:	080049ee 	.word	0x080049ee

080044c0 <_sbrk_r>:
 80044c0:	b538      	push	{r3, r4, r5, lr}
 80044c2:	4d06      	ldr	r5, [pc, #24]	; (80044dc <_sbrk_r+0x1c>)
 80044c4:	2300      	movs	r3, #0
 80044c6:	4604      	mov	r4, r0
 80044c8:	4608      	mov	r0, r1
 80044ca:	602b      	str	r3, [r5, #0]
 80044cc:	f7fc f904 	bl	80006d8 <_sbrk>
 80044d0:	1c43      	adds	r3, r0, #1
 80044d2:	d102      	bne.n	80044da <_sbrk_r+0x1a>
 80044d4:	682b      	ldr	r3, [r5, #0]
 80044d6:	b103      	cbz	r3, 80044da <_sbrk_r+0x1a>
 80044d8:	6023      	str	r3, [r4, #0]
 80044da:	bd38      	pop	{r3, r4, r5, pc}
 80044dc:	200006bc 	.word	0x200006bc

080044e0 <__sread>:
 80044e0:	b510      	push	{r4, lr}
 80044e2:	460c      	mov	r4, r1
 80044e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044e8:	f000 f8ee 	bl	80046c8 <_read_r>
 80044ec:	2800      	cmp	r0, #0
 80044ee:	bfab      	itete	ge
 80044f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80044f2:	89a3      	ldrhlt	r3, [r4, #12]
 80044f4:	181b      	addge	r3, r3, r0
 80044f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80044fa:	bfac      	ite	ge
 80044fc:	6563      	strge	r3, [r4, #84]	; 0x54
 80044fe:	81a3      	strhlt	r3, [r4, #12]
 8004500:	bd10      	pop	{r4, pc}

08004502 <__swrite>:
 8004502:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004506:	461f      	mov	r7, r3
 8004508:	898b      	ldrh	r3, [r1, #12]
 800450a:	05db      	lsls	r3, r3, #23
 800450c:	4605      	mov	r5, r0
 800450e:	460c      	mov	r4, r1
 8004510:	4616      	mov	r6, r2
 8004512:	d505      	bpl.n	8004520 <__swrite+0x1e>
 8004514:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004518:	2302      	movs	r3, #2
 800451a:	2200      	movs	r2, #0
 800451c:	f000 f868 	bl	80045f0 <_lseek_r>
 8004520:	89a3      	ldrh	r3, [r4, #12]
 8004522:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004526:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800452a:	81a3      	strh	r3, [r4, #12]
 800452c:	4632      	mov	r2, r6
 800452e:	463b      	mov	r3, r7
 8004530:	4628      	mov	r0, r5
 8004532:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004536:	f000 b817 	b.w	8004568 <_write_r>

0800453a <__sseek>:
 800453a:	b510      	push	{r4, lr}
 800453c:	460c      	mov	r4, r1
 800453e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004542:	f000 f855 	bl	80045f0 <_lseek_r>
 8004546:	1c43      	adds	r3, r0, #1
 8004548:	89a3      	ldrh	r3, [r4, #12]
 800454a:	bf15      	itete	ne
 800454c:	6560      	strne	r0, [r4, #84]	; 0x54
 800454e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004552:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004556:	81a3      	strheq	r3, [r4, #12]
 8004558:	bf18      	it	ne
 800455a:	81a3      	strhne	r3, [r4, #12]
 800455c:	bd10      	pop	{r4, pc}

0800455e <__sclose>:
 800455e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004562:	f000 b813 	b.w	800458c <_close_r>
	...

08004568 <_write_r>:
 8004568:	b538      	push	{r3, r4, r5, lr}
 800456a:	4d07      	ldr	r5, [pc, #28]	; (8004588 <_write_r+0x20>)
 800456c:	4604      	mov	r4, r0
 800456e:	4608      	mov	r0, r1
 8004570:	4611      	mov	r1, r2
 8004572:	2200      	movs	r2, #0
 8004574:	602a      	str	r2, [r5, #0]
 8004576:	461a      	mov	r2, r3
 8004578:	f7fc f895 	bl	80006a6 <_write>
 800457c:	1c43      	adds	r3, r0, #1
 800457e:	d102      	bne.n	8004586 <_write_r+0x1e>
 8004580:	682b      	ldr	r3, [r5, #0]
 8004582:	b103      	cbz	r3, 8004586 <_write_r+0x1e>
 8004584:	6023      	str	r3, [r4, #0]
 8004586:	bd38      	pop	{r3, r4, r5, pc}
 8004588:	200006bc 	.word	0x200006bc

0800458c <_close_r>:
 800458c:	b538      	push	{r3, r4, r5, lr}
 800458e:	4d06      	ldr	r5, [pc, #24]	; (80045a8 <_close_r+0x1c>)
 8004590:	2300      	movs	r3, #0
 8004592:	4604      	mov	r4, r0
 8004594:	4608      	mov	r0, r1
 8004596:	602b      	str	r3, [r5, #0]
 8004598:	f7fc f892 	bl	80006c0 <_close>
 800459c:	1c43      	adds	r3, r0, #1
 800459e:	d102      	bne.n	80045a6 <_close_r+0x1a>
 80045a0:	682b      	ldr	r3, [r5, #0]
 80045a2:	b103      	cbz	r3, 80045a6 <_close_r+0x1a>
 80045a4:	6023      	str	r3, [r4, #0]
 80045a6:	bd38      	pop	{r3, r4, r5, pc}
 80045a8:	200006bc 	.word	0x200006bc

080045ac <_fstat_r>:
 80045ac:	b538      	push	{r3, r4, r5, lr}
 80045ae:	4d07      	ldr	r5, [pc, #28]	; (80045cc <_fstat_r+0x20>)
 80045b0:	2300      	movs	r3, #0
 80045b2:	4604      	mov	r4, r0
 80045b4:	4608      	mov	r0, r1
 80045b6:	4611      	mov	r1, r2
 80045b8:	602b      	str	r3, [r5, #0]
 80045ba:	f7fc f884 	bl	80006c6 <_fstat>
 80045be:	1c43      	adds	r3, r0, #1
 80045c0:	d102      	bne.n	80045c8 <_fstat_r+0x1c>
 80045c2:	682b      	ldr	r3, [r5, #0]
 80045c4:	b103      	cbz	r3, 80045c8 <_fstat_r+0x1c>
 80045c6:	6023      	str	r3, [r4, #0]
 80045c8:	bd38      	pop	{r3, r4, r5, pc}
 80045ca:	bf00      	nop
 80045cc:	200006bc 	.word	0x200006bc

080045d0 <_isatty_r>:
 80045d0:	b538      	push	{r3, r4, r5, lr}
 80045d2:	4d06      	ldr	r5, [pc, #24]	; (80045ec <_isatty_r+0x1c>)
 80045d4:	2300      	movs	r3, #0
 80045d6:	4604      	mov	r4, r0
 80045d8:	4608      	mov	r0, r1
 80045da:	602b      	str	r3, [r5, #0]
 80045dc:	f7fc f878 	bl	80006d0 <_isatty>
 80045e0:	1c43      	adds	r3, r0, #1
 80045e2:	d102      	bne.n	80045ea <_isatty_r+0x1a>
 80045e4:	682b      	ldr	r3, [r5, #0]
 80045e6:	b103      	cbz	r3, 80045ea <_isatty_r+0x1a>
 80045e8:	6023      	str	r3, [r4, #0]
 80045ea:	bd38      	pop	{r3, r4, r5, pc}
 80045ec:	200006bc 	.word	0x200006bc

080045f0 <_lseek_r>:
 80045f0:	b538      	push	{r3, r4, r5, lr}
 80045f2:	4d07      	ldr	r5, [pc, #28]	; (8004610 <_lseek_r+0x20>)
 80045f4:	4604      	mov	r4, r0
 80045f6:	4608      	mov	r0, r1
 80045f8:	4611      	mov	r1, r2
 80045fa:	2200      	movs	r2, #0
 80045fc:	602a      	str	r2, [r5, #0]
 80045fe:	461a      	mov	r2, r3
 8004600:	f7fc f868 	bl	80006d4 <_lseek>
 8004604:	1c43      	adds	r3, r0, #1
 8004606:	d102      	bne.n	800460e <_lseek_r+0x1e>
 8004608:	682b      	ldr	r3, [r5, #0]
 800460a:	b103      	cbz	r3, 800460e <_lseek_r+0x1e>
 800460c:	6023      	str	r3, [r4, #0]
 800460e:	bd38      	pop	{r3, r4, r5, pc}
 8004610:	200006bc 	.word	0x200006bc

08004614 <memcpy>:
 8004614:	440a      	add	r2, r1
 8004616:	4291      	cmp	r1, r2
 8004618:	f100 33ff 	add.w	r3, r0, #4294967295
 800461c:	d100      	bne.n	8004620 <memcpy+0xc>
 800461e:	4770      	bx	lr
 8004620:	b510      	push	{r4, lr}
 8004622:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004626:	f803 4f01 	strb.w	r4, [r3, #1]!
 800462a:	4291      	cmp	r1, r2
 800462c:	d1f9      	bne.n	8004622 <memcpy+0xe>
 800462e:	bd10      	pop	{r4, pc}

08004630 <memmove>:
 8004630:	4288      	cmp	r0, r1
 8004632:	b510      	push	{r4, lr}
 8004634:	eb01 0402 	add.w	r4, r1, r2
 8004638:	d902      	bls.n	8004640 <memmove+0x10>
 800463a:	4284      	cmp	r4, r0
 800463c:	4623      	mov	r3, r4
 800463e:	d807      	bhi.n	8004650 <memmove+0x20>
 8004640:	1e43      	subs	r3, r0, #1
 8004642:	42a1      	cmp	r1, r4
 8004644:	d008      	beq.n	8004658 <memmove+0x28>
 8004646:	f811 2b01 	ldrb.w	r2, [r1], #1
 800464a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800464e:	e7f8      	b.n	8004642 <memmove+0x12>
 8004650:	4402      	add	r2, r0
 8004652:	4601      	mov	r1, r0
 8004654:	428a      	cmp	r2, r1
 8004656:	d100      	bne.n	800465a <memmove+0x2a>
 8004658:	bd10      	pop	{r4, pc}
 800465a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800465e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004662:	e7f7      	b.n	8004654 <memmove+0x24>

08004664 <__malloc_lock>:
 8004664:	4801      	ldr	r0, [pc, #4]	; (800466c <__malloc_lock+0x8>)
 8004666:	f7ff b9d1 	b.w	8003a0c <__retarget_lock_acquire_recursive>
 800466a:	bf00      	nop
 800466c:	200006b6 	.word	0x200006b6

08004670 <__malloc_unlock>:
 8004670:	4801      	ldr	r0, [pc, #4]	; (8004678 <__malloc_unlock+0x8>)
 8004672:	f7ff b9cc 	b.w	8003a0e <__retarget_lock_release_recursive>
 8004676:	bf00      	nop
 8004678:	200006b6 	.word	0x200006b6

0800467c <_realloc_r>:
 800467c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800467e:	4607      	mov	r7, r0
 8004680:	4614      	mov	r4, r2
 8004682:	460e      	mov	r6, r1
 8004684:	b921      	cbnz	r1, 8004690 <_realloc_r+0x14>
 8004686:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800468a:	4611      	mov	r1, r2
 800468c:	f7ff ba74 	b.w	8003b78 <_malloc_r>
 8004690:	b922      	cbnz	r2, 800469c <_realloc_r+0x20>
 8004692:	f7ff fa21 	bl	8003ad8 <_free_r>
 8004696:	4625      	mov	r5, r4
 8004698:	4628      	mov	r0, r5
 800469a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800469c:	f000 f826 	bl	80046ec <_malloc_usable_size_r>
 80046a0:	42a0      	cmp	r0, r4
 80046a2:	d20f      	bcs.n	80046c4 <_realloc_r+0x48>
 80046a4:	4621      	mov	r1, r4
 80046a6:	4638      	mov	r0, r7
 80046a8:	f7ff fa66 	bl	8003b78 <_malloc_r>
 80046ac:	4605      	mov	r5, r0
 80046ae:	2800      	cmp	r0, #0
 80046b0:	d0f2      	beq.n	8004698 <_realloc_r+0x1c>
 80046b2:	4631      	mov	r1, r6
 80046b4:	4622      	mov	r2, r4
 80046b6:	f7ff ffad 	bl	8004614 <memcpy>
 80046ba:	4631      	mov	r1, r6
 80046bc:	4638      	mov	r0, r7
 80046be:	f7ff fa0b 	bl	8003ad8 <_free_r>
 80046c2:	e7e9      	b.n	8004698 <_realloc_r+0x1c>
 80046c4:	4635      	mov	r5, r6
 80046c6:	e7e7      	b.n	8004698 <_realloc_r+0x1c>

080046c8 <_read_r>:
 80046c8:	b538      	push	{r3, r4, r5, lr}
 80046ca:	4d07      	ldr	r5, [pc, #28]	; (80046e8 <_read_r+0x20>)
 80046cc:	4604      	mov	r4, r0
 80046ce:	4608      	mov	r0, r1
 80046d0:	4611      	mov	r1, r2
 80046d2:	2200      	movs	r2, #0
 80046d4:	602a      	str	r2, [r5, #0]
 80046d6:	461a      	mov	r2, r3
 80046d8:	f7fb ffd8 	bl	800068c <_read>
 80046dc:	1c43      	adds	r3, r0, #1
 80046de:	d102      	bne.n	80046e6 <_read_r+0x1e>
 80046e0:	682b      	ldr	r3, [r5, #0]
 80046e2:	b103      	cbz	r3, 80046e6 <_read_r+0x1e>
 80046e4:	6023      	str	r3, [r4, #0]
 80046e6:	bd38      	pop	{r3, r4, r5, pc}
 80046e8:	200006bc 	.word	0x200006bc

080046ec <_malloc_usable_size_r>:
 80046ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80046f0:	1f18      	subs	r0, r3, #4
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	bfbc      	itt	lt
 80046f6:	580b      	ldrlt	r3, [r1, r0]
 80046f8:	18c0      	addlt	r0, r0, r3
 80046fa:	4770      	bx	lr

080046fc <_init>:
 80046fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046fe:	bf00      	nop
 8004700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004702:	bc08      	pop	{r3}
 8004704:	469e      	mov	lr, r3
 8004706:	4770      	bx	lr

08004708 <_fini>:
 8004708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800470a:	bf00      	nop
 800470c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800470e:	bc08      	pop	{r3}
 8004710:	469e      	mov	lr, r3
 8004712:	4770      	bx	lr
