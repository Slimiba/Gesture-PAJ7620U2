
Gesture PAJ7620U2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042b4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002ac  08004454  08004454  00014454  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004700  08004700  00020228  2**0
                  CONTENTS
  4 .ARM          00000000  08004700  08004700  00020228  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004700  08004700  00020228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004700  08004700  00014700  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004704  08004704  00014704  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000228  20000000  08004708  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000620  20000228  08004930  00020228  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000848  08004930  00020848  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017373  00000000  00000000  00020258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000321d  00000000  00000000  000375cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b48  00000000  00000000  0003a7e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001568  00000000  00000000  0003b330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00010dca  00000000  00000000  0003c898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00004527  00000000  00000000  0004d662  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  00051b89  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00002934  00000000  00000000  00051bdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loc    0000b8d7  00000000  00000000  00054510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000228 	.word	0x20000228
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800443c 	.word	0x0800443c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000022c 	.word	0x2000022c
 80001dc:	0800443c 	.word	0x0800443c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000290:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000292:	2400      	movs	r4, #0
{
 8000294:	b0a7      	sub	sp, #156	; 0x9c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000296:	2214      	movs	r2, #20
 8000298:	4621      	mov	r1, r4
 800029a:	a801      	add	r0, sp, #4
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800029c:	9408      	str	r4, [sp, #32]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800029e:	f003 f8f1 	bl	8003484 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002a2:	2258      	movs	r2, #88	; 0x58
 80002a4:	4621      	mov	r1, r4
 80002a6:	a810      	add	r0, sp, #64	; 0x40
 80002a8:	f003 f8ec 	bl	8003484 <memset>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80002ac:	220b      	movs	r2, #11
 80002ae:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80002b2:	e9cd 2306 	strd	r2, r3, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002b6:	2301      	movs	r3, #1
 80002b8:	2210      	movs	r2, #16
 80002ba:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80002be:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002c0:	2502      	movs	r5, #2
 80002c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002c6:	e9cd 530c 	strd	r5, r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ca:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002cc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80002d0:	e9cd 340e 	strd	r3, r4, [sp, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002d4:	f001 fbcc 	bl	8001a70 <HAL_RCC_OscConfig>
 80002d8:	b108      	cbz	r0, 80002de <SystemClock_Config+0x4e>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002da:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80002dc:	e7fe      	b.n	80002dc <SystemClock_Config+0x4c>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002de:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002e0:	e9cd 3501 	strd	r3, r5, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002e8:	e9cd 3004 	strd	r3, r0, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ec:	9003      	str	r0, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002ee:	4629      	mov	r1, r5
 80002f0:	a801      	add	r0, sp, #4
 80002f2:	f001 fe81 	bl	8001ff8 <HAL_RCC_ClockConfig>
 80002f6:	b108      	cbz	r0, 80002fc <SystemClock_Config+0x6c>
 80002f8:	b672      	cpsid	i
  while (1)
 80002fa:	e7fe      	b.n	80002fa <SystemClock_Config+0x6a>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART2
 80002fc:	4b08      	ldr	r3, [pc, #32]	; (8000320 <SystemClock_Config+0x90>)
 80002fe:	9310      	str	r3, [sp, #64]	; 0x40
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000300:	e9cd 0013 	strd	r0, r0, [sp, #76]	; 0x4c
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000304:	9015      	str	r0, [sp, #84]	; 0x54
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000306:	9017      	str	r0, [sp, #92]	; 0x5c
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000308:	f44f 7300 	mov.w	r3, #512	; 0x200
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800030c:	9025      	str	r0, [sp, #148]	; 0x94
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800030e:	a810      	add	r0, sp, #64	; 0x40
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000310:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000312:	f001 ff4d 	bl	80021b0 <HAL_RCCEx_PeriphCLKConfig>
 8000316:	b108      	cbz	r0, 800031c <SystemClock_Config+0x8c>
 8000318:	b672      	cpsid	i
  while (1)
 800031a:	e7fe      	b.n	800031a <SystemClock_Config+0x8a>
}
 800031c:	b027      	add	sp, #156	; 0x9c
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	0003002e 	.word	0x0003002e

08000324 <main>:
{
 8000324:	b500      	push	{lr}
 8000326:	b08d      	sub	sp, #52	; 0x34
  HAL_Init();
 8000328:	f000 face 	bl	80008c8 <HAL_Init>
  SystemClock_Config();
 800032c:	f7ff ffb0 	bl	8000290 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000330:	2214      	movs	r2, #20
 8000332:	2100      	movs	r1, #0
 8000334:	a807      	add	r0, sp, #28
 8000336:	f003 f8a5 	bl	8003484 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800033a:	4b76      	ldr	r3, [pc, #472]	; (8000514 <main+0x1f0>)
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800033c:	4876      	ldr	r0, [pc, #472]	; (8000518 <main+0x1f4>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800033e:	695a      	ldr	r2, [r3, #20]
 8000340:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000344:	615a      	str	r2, [r3, #20]
 8000346:	695a      	ldr	r2, [r3, #20]
 8000348:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 800034c:	9201      	str	r2, [sp, #4]
 800034e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000350:	695a      	ldr	r2, [r3, #20]
 8000352:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8000356:	615a      	str	r2, [r3, #20]
 8000358:	695a      	ldr	r2, [r3, #20]
 800035a:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 800035e:	9202      	str	r2, [sp, #8]
 8000360:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000362:	695a      	ldr	r2, [r3, #20]
 8000364:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000368:	615a      	str	r2, [r3, #20]
 800036a:	695a      	ldr	r2, [r3, #20]
 800036c:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8000370:	9203      	str	r2, [sp, #12]
 8000372:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000374:	695a      	ldr	r2, [r3, #20]
 8000376:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800037a:	615a      	str	r2, [r3, #20]
 800037c:	695a      	ldr	r2, [r3, #20]
 800037e:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8000382:	9204      	str	r2, [sp, #16]
 8000384:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000386:	695a      	ldr	r2, [r3, #20]
 8000388:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800038c:	615a      	str	r2, [r3, #20]
 800038e:	695a      	ldr	r2, [r3, #20]
 8000390:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8000394:	9205      	str	r2, [sp, #20]
 8000396:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000398:	695a      	ldr	r2, [r3, #20]
 800039a:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800039e:	615a      	str	r2, [r3, #20]
 80003a0:	695b      	ldr	r3, [r3, #20]
 80003a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80003a6:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80003a8:	2200      	movs	r2, #0
 80003aa:	f244 0181 	movw	r1, #16513	; 0x4081
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80003ae:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80003b0:	f000 fbfe 	bl	8000bb0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80003b4:	4859      	ldr	r0, [pc, #356]	; (800051c <main+0x1f8>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	2140      	movs	r1, #64	; 0x40
 80003ba:	f000 fbf9 	bl	8000bb0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80003be:	4b58      	ldr	r3, [pc, #352]	; (8000520 <main+0x1fc>)
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80003c0:	4858      	ldr	r0, [pc, #352]	; (8000524 <main+0x200>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003c2:	2400      	movs	r4, #0
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80003c4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80003c8:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80003ca:	e9cd 2307 	strd	r2, r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003ce:	2501      	movs	r5, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003d0:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80003d2:	f000 fb19 	bl	8000a08 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003d6:	f244 0381 	movw	r3, #16513	; 0x4081
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003da:	484f      	ldr	r0, [pc, #316]	; (8000518 <main+0x1f4>)
 80003dc:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003de:	e9cd 3507 	strd	r3, r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003e2:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003e6:	f000 fb0f 	bl	8000a08 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80003ea:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80003ec:	484b      	ldr	r0, [pc, #300]	; (800051c <main+0x1f8>)
 80003ee:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003f0:	e9cd 3507 	strd	r3, r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003f4:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80003f8:	f000 fb06 	bl	8000a08 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80003fc:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80003fe:	4847      	ldr	r0, [pc, #284]	; (800051c <main+0x1f8>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000400:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000402:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000404:	e9cd 3407 	strd	r3, r4, [sp, #28]
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000408:	f000 fafe 	bl	8000a08 <HAL_GPIO_Init>
  hrtc.Instance = RTC;
 800040c:	4846      	ldr	r0, [pc, #280]	; (8000528 <main+0x204>)
 800040e:	4b47      	ldr	r3, [pc, #284]	; (800052c <main+0x208>)
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000410:	6184      	str	r4, [r0, #24]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000412:	e9c0 3400 	strd	r3, r4, [r0]
  hrtc.Init.SynchPrediv = 255;
 8000416:	217f      	movs	r1, #127	; 0x7f
 8000418:	23ff      	movs	r3, #255	; 0xff
 800041a:	e9c0 1302 	strd	r1, r3, [r0, #8]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800041e:	e9c0 4404 	strd	r4, r4, [r0, #16]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000422:	f002 f83d 	bl	80024a0 <HAL_RTC_Init>
 8000426:	4603      	mov	r3, r0
 8000428:	b108      	cbz	r0, 800042e <main+0x10a>
 800042a:	b672      	cpsid	i
  while (1)
 800042c:	e7fe      	b.n	800042c <main+0x108>
  hpcd_USB_FS.Instance = USB;
 800042e:	4840      	ldr	r0, [pc, #256]	; (8000530 <main+0x20c>)
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000430:	f8df e120 	ldr.w	lr, [pc, #288]	; 8000554 <main+0x230>
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000434:	6203      	str	r3, [r0, #32]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000436:	2208      	movs	r2, #8
 8000438:	e9c0 e200 	strd	lr, r2, [r0]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800043c:	2202      	movs	r2, #2
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800043e:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000442:	6082      	str	r2, [r0, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000444:	6102      	str	r2, [r0, #16]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000446:	f000 fe98 	bl	800117a <HAL_PCD_Init>
 800044a:	b108      	cbz	r0, 8000450 <main+0x12c>
 800044c:	b672      	cpsid	i
  while (1)
 800044e:	e7fe      	b.n	800044e <main+0x12a>
  hi2c1.Instance = I2C1;
 8000450:	4c38      	ldr	r4, [pc, #224]	; (8000534 <main+0x210>)
  hi2c1.Init.Timing = 0x2000090E;
 8000452:	f8df c104 	ldr.w	ip, [pc, #260]	; 8000558 <main+0x234>
 8000456:	4b38      	ldr	r3, [pc, #224]	; (8000538 <main+0x214>)
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000458:	6220      	str	r0, [r4, #32]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800045a:	e9c4 0502 	strd	r0, r5, [r4, #8]
  hi2c1.Init.OwnAddress2 = 0;
 800045e:	e9c4 0004 	strd	r0, r0, [r4, #16]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000462:	e9c4 0006 	strd	r0, r0, [r4, #24]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000466:	4620      	mov	r0, r4
  hi2c1.Init.Timing = 0x2000090E;
 8000468:	e9c4 c300 	strd	ip, r3, [r4]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800046c:	f000 fcba 	bl	8000de4 <HAL_I2C_Init>
 8000470:	4601      	mov	r1, r0
 8000472:	b108      	cbz	r0, 8000478 <main+0x154>
 8000474:	b672      	cpsid	i
  while (1)
 8000476:	e7fe      	b.n	8000476 <main+0x152>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000478:	4620      	mov	r0, r4
 800047a:	f000 fe33 	bl	80010e4 <HAL_I2CEx_ConfigAnalogFilter>
 800047e:	4601      	mov	r1, r0
 8000480:	b108      	cbz	r0, 8000486 <main+0x162>
 8000482:	b672      	cpsid	i
  while (1)
 8000484:	e7fe      	b.n	8000484 <main+0x160>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000486:	4620      	mov	r0, r4
 8000488:	f000 fe52 	bl	8001130 <HAL_I2CEx_ConfigDigitalFilter>
 800048c:	4603      	mov	r3, r0
 800048e:	b108      	cbz	r0, 8000494 <main+0x170>
 8000490:	b672      	cpsid	i
  while (1)
 8000492:	e7fe      	b.n	8000492 <main+0x16e>
  huart4.Instance = UART4;
 8000494:	4829      	ldr	r0, [pc, #164]	; (800053c <main+0x218>)
  huart4.Init.BaudRate = 115200;
 8000496:	4a2a      	ldr	r2, [pc, #168]	; (8000540 <main+0x21c>)
  huart4.Init.Parity = UART_PARITY_NONE;
 8000498:	6103      	str	r3, [r0, #16]
  huart4.Init.BaudRate = 115200;
 800049a:	f44f 34e1 	mov.w	r4, #115200	; 0x1c200
  huart4.Init.Mode = UART_MODE_TX_RX;
 800049e:	250c      	movs	r5, #12
  huart4.Init.StopBits = UART_STOPBITS_1;
 80004a0:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004a4:	e9c0 5305 	strd	r5, r3, [r0, #20]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004a8:	e9c0 3307 	strd	r3, r3, [r0, #28]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004ac:	6243      	str	r3, [r0, #36]	; 0x24
  huart4.Init.BaudRate = 115200;
 80004ae:	e9c0 2400 	strd	r2, r4, [r0]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80004b2:	f002 fa70 	bl	8002996 <HAL_UART_Init>
 80004b6:	4603      	mov	r3, r0
 80004b8:	b108      	cbz	r0, 80004be <main+0x19a>
 80004ba:	b672      	cpsid	i
  while (1)
 80004bc:	e7fe      	b.n	80004bc <main+0x198>
  huart2.Instance = USART2;
 80004be:	4821      	ldr	r0, [pc, #132]	; (8000544 <main+0x220>)
  huart2.Init.BaudRate = 38400;
 80004c0:	4921      	ldr	r1, [pc, #132]	; (8000548 <main+0x224>)
 80004c2:	f44f 4216 	mov.w	r2, #38400	; 0x9600
  huart2.Init.StopBits = UART_STOPBITS_1;
 80004c6:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80004ca:	e9c0 3504 	strd	r3, r5, [r0, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80004ce:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004d2:	e9c0 3308 	strd	r3, r3, [r0, #32]
  huart2.Init.BaudRate = 38400;
 80004d6:	e9c0 1200 	strd	r1, r2, [r0]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80004da:	f002 fa5c 	bl	8002996 <HAL_UART_Init>
 80004de:	4603      	mov	r3, r0
 80004e0:	b108      	cbz	r0, 80004e6 <main+0x1c2>
 80004e2:	b672      	cpsid	i
  while (1)
 80004e4:	e7fe      	b.n	80004e4 <main+0x1c0>
  huart3.Instance = USART3;
 80004e6:	4819      	ldr	r0, [pc, #100]	; (800054c <main+0x228>)
 80004e8:	4a19      	ldr	r2, [pc, #100]	; (8000550 <main+0x22c>)
  huart3.Init.StopBits = UART_STOPBITS_1;
 80004ea:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart3.Init.BaudRate = 115200;
 80004ee:	e9c0 2400 	strd	r2, r4, [r0]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80004f2:	e9c0 3504 	strd	r3, r5, [r0, #16]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80004f6:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004fa:	e9c0 3308 	strd	r3, r3, [r0, #32]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80004fe:	f002 fa4a 	bl	8002996 <HAL_UART_Init>
 8000502:	b108      	cbz	r0, 8000508 <main+0x1e4>
 8000504:	b672      	cpsid	i
  while (1)
 8000506:	e7fe      	b.n	8000506 <main+0x1e2>
	  initializeRegisters();
 8000508:	f002 ff62 	bl	80033d0 <initializeRegisters>
	  GESTURE_Actions();
 800050c:	f002 fe26 	bl	800315c <GESTURE_Actions>
  while (1)
 8000510:	e7fa      	b.n	8000508 <main+0x1e4>
 8000512:	bf00      	nop
 8000514:	40021000 	.word	0x40021000
 8000518:	48000400 	.word	0x48000400
 800051c:	48001800 	.word	0x48001800
 8000520:	10110000 	.word	0x10110000
 8000524:	48000800 	.word	0x48000800
 8000528:	200003a4 	.word	0x200003a4
 800052c:	40002800 	.word	0x40002800
 8000530:	20000518 	.word	0x20000518
 8000534:	200002d4 	.word	0x200002d4
 8000538:	2000090e 	.word	0x2000090e
 800053c:	20000410 	.word	0x20000410
 8000540:	40004c00 	.word	0x40004c00
 8000544:	20000494 	.word	0x20000494
 8000548:	40004400 	.word	0x40004400
 800054c:	20000250 	.word	0x20000250
 8000550:	40004800 	.word	0x40004800
 8000554:	40005c00 	.word	0x40005c00
 8000558:	40005400 	.word	0x40005400

0800055c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800055c:	4b0a      	ldr	r3, [pc, #40]	; (8000588 <HAL_MspInit+0x2c>)
 800055e:	699a      	ldr	r2, [r3, #24]
 8000560:	f042 0201 	orr.w	r2, r2, #1
 8000564:	619a      	str	r2, [r3, #24]
 8000566:	699a      	ldr	r2, [r3, #24]
{
 8000568:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800056a:	f002 0201 	and.w	r2, r2, #1
 800056e:	9200      	str	r2, [sp, #0]
 8000570:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000572:	69da      	ldr	r2, [r3, #28]
 8000574:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000578:	61da      	str	r2, [r3, #28]
 800057a:	69db      	ldr	r3, [r3, #28]
 800057c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000580:	9301      	str	r3, [sp, #4]
 8000582:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000584:	b002      	add	sp, #8
 8000586:	4770      	bx	lr
 8000588:	40021000 	.word	0x40021000

0800058c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800058c:	b510      	push	{r4, lr}
 800058e:	4604      	mov	r4, r0
 8000590:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000592:	2214      	movs	r2, #20
 8000594:	2100      	movs	r1, #0
 8000596:	a803      	add	r0, sp, #12
 8000598:	f002 ff74 	bl	8003484 <memset>
  if(hi2c->Instance==I2C1)
 800059c:	6822      	ldr	r2, [r4, #0]
 800059e:	4b13      	ldr	r3, [pc, #76]	; (80005ec <HAL_I2C_MspInit+0x60>)
 80005a0:	429a      	cmp	r2, r3
 80005a2:	d121      	bne.n	80005e8 <HAL_I2C_MspInit+0x5c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005a4:	4c12      	ldr	r4, [pc, #72]	; (80005f0 <HAL_I2C_MspInit+0x64>)
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005a6:	4813      	ldr	r0, [pc, #76]	; (80005f4 <HAL_I2C_MspInit+0x68>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005a8:	6963      	ldr	r3, [r4, #20]
 80005aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005ae:	6163      	str	r3, [r4, #20]
 80005b0:	6963      	ldr	r3, [r4, #20]
 80005b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80005b6:	9301      	str	r3, [sp, #4]
 80005b8:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80005ba:	f44f 7240 	mov.w	r2, #768	; 0x300
 80005be:	2312      	movs	r3, #18
 80005c0:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005c4:	2101      	movs	r1, #1
 80005c6:	2303      	movs	r3, #3
 80005c8:	e9cd 1305 	strd	r1, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80005cc:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005ce:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80005d0:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005d2:	f000 fa19 	bl	8000a08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80005d6:	69e3      	ldr	r3, [r4, #28]
 80005d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80005dc:	61e3      	str	r3, [r4, #28]
 80005de:	69e3      	ldr	r3, [r4, #28]
 80005e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80005e4:	9302      	str	r3, [sp, #8]
 80005e6:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80005e8:	b008      	add	sp, #32
 80005ea:	bd10      	pop	{r4, pc}
 80005ec:	40005400 	.word	0x40005400
 80005f0:	40021000 	.word	0x40021000
 80005f4:	48000400 	.word	0x48000400

080005f8 <HAL_RTC_MspInit>:
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  if(hrtc->Instance==RTC)
 80005f8:	6802      	ldr	r2, [r0, #0]
 80005fa:	4b07      	ldr	r3, [pc, #28]	; (8000618 <HAL_RTC_MspInit+0x20>)
 80005fc:	429a      	cmp	r2, r3
 80005fe:	d10a      	bne.n	8000616 <HAL_RTC_MspInit+0x1e>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000600:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000604:	fa92 f2a2 	rbit	r2, r2
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000608:	4b04      	ldr	r3, [pc, #16]	; (800061c <HAL_RTC_MspInit+0x24>)
 800060a:	fab2 f282 	clz	r2, r2
 800060e:	4413      	add	r3, r2
 8000610:	009b      	lsls	r3, r3, #2
 8000612:	2201      	movs	r2, #1
 8000614:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000616:	4770      	bx	lr
 8000618:	40002800 	.word	0x40002800
 800061c:	10908100 	.word	0x10908100

08000620 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000620:	b510      	push	{r4, lr}
 8000622:	4604      	mov	r4, r0
 8000624:	b08c      	sub	sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000626:	2214      	movs	r2, #20
 8000628:	2100      	movs	r1, #0
 800062a:	a807      	add	r0, sp, #28
 800062c:	f002 ff2a 	bl	8003484 <memset>
  if(huart->Instance==UART4)
 8000630:	6823      	ldr	r3, [r4, #0]
 8000632:	4a38      	ldr	r2, [pc, #224]	; (8000714 <HAL_UART_MspInit+0xf4>)
 8000634:	4293      	cmp	r3, r2
 8000636:	d124      	bne.n	8000682 <HAL_UART_MspInit+0x62>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000638:	4b37      	ldr	r3, [pc, #220]	; (8000718 <HAL_UART_MspInit+0xf8>)
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800063a:	4838      	ldr	r0, [pc, #224]	; (800071c <HAL_UART_MspInit+0xfc>)
    __HAL_RCC_UART4_CLK_ENABLE();
 800063c:	69da      	ldr	r2, [r3, #28]
 800063e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000642:	61da      	str	r2, [r3, #28]
 8000644:	69da      	ldr	r2, [r3, #28]
 8000646:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 800064a:	9201      	str	r2, [sp, #4]
 800064c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800064e:	695a      	ldr	r2, [r3, #20]
 8000650:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000654:	615a      	str	r2, [r3, #20]
 8000656:	695b      	ldr	r3, [r3, #20]
 8000658:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800065c:	9302      	str	r3, [sp, #8]
 800065e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000660:	f44f 6c40 	mov.w	ip, #3072	; 0xc00
 8000664:	2302      	movs	r3, #2
 8000666:	e9cd c307 	strd	ip, r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800066a:	f04f 0e00 	mov.w	lr, #0
 800066e:	2303      	movs	r3, #3
 8000670:	e9cd e309 	strd	lr, r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8000674:	2305      	movs	r3, #5
 8000676:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000678:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800067a:	f000 f9c5 	bl	8000a08 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800067e:	b00c      	add	sp, #48	; 0x30
 8000680:	bd10      	pop	{r4, pc}
  else if(huart->Instance==USART2)
 8000682:	4a27      	ldr	r2, [pc, #156]	; (8000720 <HAL_UART_MspInit+0x100>)
 8000684:	4293      	cmp	r3, r2
 8000686:	d120      	bne.n	80006ca <HAL_UART_MspInit+0xaa>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000688:	4b23      	ldr	r3, [pc, #140]	; (8000718 <HAL_UART_MspInit+0xf8>)
 800068a:	69da      	ldr	r2, [r3, #28]
 800068c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000690:	61da      	str	r2, [r3, #28]
 8000692:	69da      	ldr	r2, [r3, #28]
 8000694:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8000698:	9203      	str	r2, [sp, #12]
 800069a:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800069c:	695a      	ldr	r2, [r3, #20]
 800069e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80006a2:	615a      	str	r2, [r3, #20]
 80006a4:	695b      	ldr	r3, [r3, #20]
 80006a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006aa:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ac:	200c      	movs	r0, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ae:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006b0:	2302      	movs	r3, #2
 80006b2:	e9cd 0307 	strd	r0, r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006b6:	2400      	movs	r4, #0
 80006b8:	2303      	movs	r3, #3
 80006ba:	e9cd 4309 	strd	r4, r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80006be:	2307      	movs	r3, #7
 80006c0:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c2:	a907      	add	r1, sp, #28
 80006c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006c8:	e7d7      	b.n	800067a <HAL_UART_MspInit+0x5a>
  else if(huart->Instance==USART3)
 80006ca:	4a16      	ldr	r2, [pc, #88]	; (8000724 <HAL_UART_MspInit+0x104>)
 80006cc:	4293      	cmp	r3, r2
 80006ce:	d1d6      	bne.n	800067e <HAL_UART_MspInit+0x5e>
    __HAL_RCC_USART3_CLK_ENABLE();
 80006d0:	4b11      	ldr	r3, [pc, #68]	; (8000718 <HAL_UART_MspInit+0xf8>)
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006d2:	4815      	ldr	r0, [pc, #84]	; (8000728 <HAL_UART_MspInit+0x108>)
    __HAL_RCC_USART3_CLK_ENABLE();
 80006d4:	69da      	ldr	r2, [r3, #28]
 80006d6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80006da:	61da      	str	r2, [r3, #28]
 80006dc:	69da      	ldr	r2, [r3, #28]
 80006de:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 80006e2:	9205      	str	r2, [sp, #20]
 80006e4:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80006e6:	695a      	ldr	r2, [r3, #20]
 80006e8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80006ec:	615a      	str	r2, [r3, #20]
 80006ee:	695b      	ldr	r3, [r3, #20]
 80006f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80006f4:	9306      	str	r3, [sp, #24]
 80006f6:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006f8:	f44f 7240 	mov.w	r2, #768	; 0x300
 80006fc:	2302      	movs	r3, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006fe:	2100      	movs	r1, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000700:	e9cd 2307 	strd	r2, r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000704:	2303      	movs	r3, #3
 8000706:	e9cd 1309 	strd	r1, r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800070a:	2307      	movs	r3, #7
 800070c:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800070e:	a907      	add	r1, sp, #28
 8000710:	e7b3      	b.n	800067a <HAL_UART_MspInit+0x5a>
 8000712:	bf00      	nop
 8000714:	40004c00 	.word	0x40004c00
 8000718:	40021000 	.word	0x40021000
 800071c:	48000800 	.word	0x48000800
 8000720:	40004400 	.word	0x40004400
 8000724:	40004800 	.word	0x40004800
 8000728:	48000c00 	.word	0x48000c00

0800072c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800072c:	b507      	push	{r0, r1, r2, lr}
  if(hpcd->Instance==USB)
 800072e:	4b0e      	ldr	r3, [pc, #56]	; (8000768 <HAL_PCD_MspInit+0x3c>)
 8000730:	6802      	ldr	r2, [r0, #0]
 8000732:	429a      	cmp	r2, r3
 8000734:	d115      	bne.n	8000762 <HAL_PCD_MspInit+0x36>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000736:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
    /* USB interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 800073a:	2014      	movs	r0, #20
    __HAL_RCC_USB_CLK_ENABLE();
 800073c:	69da      	ldr	r2, [r3, #28]
 800073e:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000742:	61da      	str	r2, [r3, #28]
 8000744:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 8000746:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 8000748:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800074c:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 800074e:	4611      	mov	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 8000750:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 8000752:	f000 f903 	bl	800095c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 8000756:	2014      	movs	r0, #20
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000758:	b003      	add	sp, #12
 800075a:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 800075e:	f000 b92f 	b.w	80009c0 <HAL_NVIC_EnableIRQ>
}
 8000762:	b003      	add	sp, #12
 8000764:	f85d fb04 	ldr.w	pc, [sp], #4
 8000768:	40005c00 	.word	0x40005c00

0800076c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800076c:	e7fe      	b.n	800076c <NMI_Handler>

0800076e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800076e:	e7fe      	b.n	800076e <HardFault_Handler>

08000770 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000770:	e7fe      	b.n	8000770 <MemManage_Handler>

08000772 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000772:	e7fe      	b.n	8000772 <BusFault_Handler>

08000774 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000774:	e7fe      	b.n	8000774 <UsageFault_Handler>

08000776 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000776:	4770      	bx	lr

08000778 <DebugMon_Handler>:
 8000778:	4770      	bx	lr

0800077a <PendSV_Handler>:
 800077a:	4770      	bx	lr

0800077c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800077c:	f000 b8b6 	b.w	80008ec <HAL_IncTick>

08000780 <USB_LP_CAN_RX0_IRQHandler>:
void USB_LP_CAN_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000780:	4801      	ldr	r0, [pc, #4]	; (8000788 <USB_LP_CAN_RX0_IRQHandler+0x8>)
 8000782:	f000 bd6d 	b.w	8001260 <HAL_PCD_IRQHandler>
 8000786:	bf00      	nop
 8000788:	20000518 	.word	0x20000518

0800078c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800078c:	b570      	push	{r4, r5, r6, lr}
 800078e:	460e      	mov	r6, r1
 8000790:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000792:	2500      	movs	r5, #0
 8000794:	42a5      	cmp	r5, r4
 8000796:	db01      	blt.n	800079c <_read+0x10>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8000798:	4620      	mov	r0, r4
 800079a:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 800079c:	f3af 8000 	nop.w
 80007a0:	5570      	strb	r0, [r6, r5]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007a2:	3501      	adds	r5, #1
 80007a4:	e7f6      	b.n	8000794 <_read+0x8>

080007a6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80007a6:	b570      	push	{r4, r5, r6, lr}
 80007a8:	460e      	mov	r6, r1
 80007aa:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007ac:	2500      	movs	r5, #0
 80007ae:	42a5      	cmp	r5, r4
 80007b0:	db01      	blt.n	80007b6 <_write+0x10>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 80007b2:	4620      	mov	r0, r4
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 80007b6:	5d70      	ldrb	r0, [r6, r5]
 80007b8:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007bc:	3501      	adds	r5, #1
 80007be:	e7f6      	b.n	80007ae <_write+0x8>

080007c0 <_close>:

int _close(int file)
{
	return -1;
}
 80007c0:	f04f 30ff 	mov.w	r0, #4294967295
 80007c4:	4770      	bx	lr

080007c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80007c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007ca:	604b      	str	r3, [r1, #4]
	return 0;
}
 80007cc:	2000      	movs	r0, #0
 80007ce:	4770      	bx	lr

080007d0 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80007d0:	2001      	movs	r0, #1
 80007d2:	4770      	bx	lr

080007d4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80007d4:	2000      	movs	r0, #0
 80007d6:	4770      	bx	lr

080007d8 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007d8:	4b0b      	ldr	r3, [pc, #44]	; (8000808 <_sbrk+0x30>)
 80007da:	6819      	ldr	r1, [r3, #0]
{
 80007dc:	b510      	push	{r4, lr}
 80007de:	4602      	mov	r2, r0
  if (NULL == __sbrk_heap_end)
 80007e0:	b909      	cbnz	r1, 80007e6 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 80007e2:	490a      	ldr	r1, [pc, #40]	; (800080c <_sbrk+0x34>)
 80007e4:	6019      	str	r1, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007e6:	6818      	ldr	r0, [r3, #0]
 80007e8:	4909      	ldr	r1, [pc, #36]	; (8000810 <_sbrk+0x38>)
 80007ea:	4c0a      	ldr	r4, [pc, #40]	; (8000814 <_sbrk+0x3c>)
 80007ec:	4402      	add	r2, r0
 80007ee:	1b09      	subs	r1, r1, r4
 80007f0:	428a      	cmp	r2, r1
 80007f2:	d906      	bls.n	8000802 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 80007f4:	f002 fe1c 	bl	8003430 <__errno>
 80007f8:	230c      	movs	r3, #12
 80007fa:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80007fc:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8000800:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8000802:	601a      	str	r2, [r3, #0]
  return (void *)prev_heap_end;
 8000804:	e7fc      	b.n	8000800 <_sbrk+0x28>
 8000806:	bf00      	nop
 8000808:	20000244 	.word	0x20000244
 800080c:	20000848 	.word	0x20000848
 8000810:	20010000 	.word	0x20010000
 8000814:	00000400 	.word	0x00000400

08000818 <SystemInit>:
  */
void SystemInit(void)
{
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000818:	4a03      	ldr	r2, [pc, #12]	; (8000828 <SystemInit+0x10>)
 800081a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800081e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000822:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000826:	4770      	bx	lr
 8000828:	e000ed00 	.word	0xe000ed00

0800082c <Reset_Handler>:
 800082c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000864 <LoopForever+0x2>
 8000830:	480d      	ldr	r0, [pc, #52]	; (8000868 <LoopForever+0x6>)
 8000832:	490e      	ldr	r1, [pc, #56]	; (800086c <LoopForever+0xa>)
 8000834:	4a0e      	ldr	r2, [pc, #56]	; (8000870 <LoopForever+0xe>)
 8000836:	2300      	movs	r3, #0
 8000838:	e002      	b.n	8000840 <LoopCopyDataInit>

0800083a <CopyDataInit>:
 800083a:	58d4      	ldr	r4, [r2, r3]
 800083c:	50c4      	str	r4, [r0, r3]
 800083e:	3304      	adds	r3, #4

08000840 <LoopCopyDataInit>:
 8000840:	18c4      	adds	r4, r0, r3
 8000842:	428c      	cmp	r4, r1
 8000844:	d3f9      	bcc.n	800083a <CopyDataInit>
 8000846:	4a0b      	ldr	r2, [pc, #44]	; (8000874 <LoopForever+0x12>)
 8000848:	4c0b      	ldr	r4, [pc, #44]	; (8000878 <LoopForever+0x16>)
 800084a:	2300      	movs	r3, #0
 800084c:	e001      	b.n	8000852 <LoopFillZerobss>

0800084e <FillZerobss>:
 800084e:	6013      	str	r3, [r2, #0]
 8000850:	3204      	adds	r2, #4

08000852 <LoopFillZerobss>:
 8000852:	42a2      	cmp	r2, r4
 8000854:	d3fb      	bcc.n	800084e <FillZerobss>
 8000856:	f7ff ffdf 	bl	8000818 <SystemInit>
 800085a:	f002 fdef 	bl	800343c <__libc_init_array>
 800085e:	f7ff fd61 	bl	8000324 <main>

08000862 <LoopForever>:
 8000862:	e7fe      	b.n	8000862 <LoopForever>
 8000864:	20010000 	.word	0x20010000
 8000868:	20000000 	.word	0x20000000
 800086c:	20000228 	.word	0x20000228
 8000870:	08004708 	.word	0x08004708
 8000874:	20000228 	.word	0x20000228
 8000878:	20000848 	.word	0x20000848

0800087c <ADC1_2_IRQHandler>:
 800087c:	e7fe      	b.n	800087c <ADC1_2_IRQHandler>
	...

08000880 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000880:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000882:	4a0e      	ldr	r2, [pc, #56]	; (80008bc <HAL_InitTick+0x3c>)
 8000884:	4b0e      	ldr	r3, [pc, #56]	; (80008c0 <HAL_InitTick+0x40>)
{
 8000886:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000888:	7818      	ldrb	r0, [r3, #0]
 800088a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800088e:	fbb3 f3f0 	udiv	r3, r3, r0
 8000892:	6810      	ldr	r0, [r2, #0]
 8000894:	fbb0 f0f3 	udiv	r0, r0, r3
 8000898:	f000 f8a0 	bl	80009dc <HAL_SYSTICK_Config>
 800089c:	4604      	mov	r4, r0
 800089e:	b958      	cbnz	r0, 80008b8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008a0:	2d0f      	cmp	r5, #15
 80008a2:	d809      	bhi.n	80008b8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008a4:	4602      	mov	r2, r0
 80008a6:	4629      	mov	r1, r5
 80008a8:	f04f 30ff 	mov.w	r0, #4294967295
 80008ac:	f000 f856 	bl	800095c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008b0:	4b04      	ldr	r3, [pc, #16]	; (80008c4 <HAL_InitTick+0x44>)
 80008b2:	4620      	mov	r0, r4
 80008b4:	601d      	str	r5, [r3, #0]
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
}
 80008b6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80008b8:	2001      	movs	r0, #1
 80008ba:	e7fc      	b.n	80008b6 <HAL_InitTick+0x36>
 80008bc:	20000000 	.word	0x20000000
 80008c0:	20000004 	.word	0x20000004
 80008c4:	20000008 	.word	0x20000008

080008c8 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008c8:	4a07      	ldr	r2, [pc, #28]	; (80008e8 <HAL_Init+0x20>)
{
 80008ca:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008cc:	6813      	ldr	r3, [r2, #0]
 80008ce:	f043 0310 	orr.w	r3, r3, #16
 80008d2:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008d4:	2003      	movs	r0, #3
 80008d6:	f000 f82f 	bl	8000938 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80008da:	2000      	movs	r0, #0
 80008dc:	f7ff ffd0 	bl	8000880 <HAL_InitTick>
  HAL_MspInit();
 80008e0:	f7ff fe3c 	bl	800055c <HAL_MspInit>
}
 80008e4:	2000      	movs	r0, #0
 80008e6:	bd08      	pop	{r3, pc}
 80008e8:	40022000 	.word	0x40022000

080008ec <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80008ec:	4a03      	ldr	r2, [pc, #12]	; (80008fc <HAL_IncTick+0x10>)
 80008ee:	4b04      	ldr	r3, [pc, #16]	; (8000900 <HAL_IncTick+0x14>)
 80008f0:	6811      	ldr	r1, [r2, #0]
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	440b      	add	r3, r1
 80008f6:	6013      	str	r3, [r2, #0]
}
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop
 80008fc:	20000804 	.word	0x20000804
 8000900:	20000004 	.word	0x20000004

08000904 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8000904:	4b01      	ldr	r3, [pc, #4]	; (800090c <HAL_GetTick+0x8>)
 8000906:	6818      	ldr	r0, [r3, #0]
}
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop
 800090c:	20000804 	.word	0x20000804

08000910 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000910:	b538      	push	{r3, r4, r5, lr}
 8000912:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000914:	f7ff fff6 	bl	8000904 <HAL_GetTick>
  uint32_t wait = Delay;
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000918:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800091a:	bf1c      	itt	ne
 800091c:	4b05      	ldrne	r3, [pc, #20]	; (8000934 <HAL_Delay+0x24>)
 800091e:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000920:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000922:	bf18      	it	ne
 8000924:	18e4      	addne	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000926:	f7ff ffed 	bl	8000904 <HAL_GetTick>
 800092a:	1b43      	subs	r3, r0, r5
 800092c:	42a3      	cmp	r3, r4
 800092e:	d3fa      	bcc.n	8000926 <HAL_Delay+0x16>
  {
  }
}
 8000930:	bd38      	pop	{r3, r4, r5, pc}
 8000932:	bf00      	nop
 8000934:	20000004 	.word	0x20000004

08000938 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000938:	4907      	ldr	r1, [pc, #28]	; (8000958 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800093a:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800093c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000940:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000942:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000944:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000948:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800094a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800094c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000950:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000954:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000956:	4770      	bx	lr
 8000958:	e000ed00 	.word	0xe000ed00

0800095c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800095c:	4b16      	ldr	r3, [pc, #88]	; (80009b8 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800095e:	b530      	push	{r4, r5, lr}
 8000960:	68dc      	ldr	r4, [r3, #12]
 8000962:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000966:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800096a:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800096c:	2d04      	cmp	r5, #4
 800096e:	bf28      	it	cs
 8000970:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000972:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000974:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000978:	bf8c      	ite	hi
 800097a:	3c03      	subhi	r4, #3
 800097c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800097e:	fa03 f505 	lsl.w	r5, r3, r5
 8000982:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000986:	40a3      	lsls	r3, r4
 8000988:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800098c:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 800098e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000990:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000994:	bfac      	ite	ge
 8000996:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800099a:	4a08      	ldrlt	r2, [pc, #32]	; (80009bc <HAL_NVIC_SetPriority+0x60>)
 800099c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80009a0:	bfb8      	it	lt
 80009a2:	f000 000f 	andlt.w	r0, r0, #15
 80009a6:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009a8:	bfaa      	itet	ge
 80009aa:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009ae:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009b0:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80009b4:	bd30      	pop	{r4, r5, pc}
 80009b6:	bf00      	nop
 80009b8:	e000ed00 	.word	0xe000ed00
 80009bc:	e000ed14 	.word	0xe000ed14

080009c0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80009c0:	2800      	cmp	r0, #0
 80009c2:	db08      	blt.n	80009d6 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009c4:	0942      	lsrs	r2, r0, #5
 80009c6:	2301      	movs	r3, #1
 80009c8:	f000 001f 	and.w	r0, r0, #31
 80009cc:	fa03 f000 	lsl.w	r0, r3, r0
 80009d0:	4b01      	ldr	r3, [pc, #4]	; (80009d8 <HAL_NVIC_EnableIRQ+0x18>)
 80009d2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80009d6:	4770      	bx	lr
 80009d8:	e000e100 	.word	0xe000e100

080009dc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009dc:	3801      	subs	r0, #1
 80009de:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80009e2:	d20a      	bcs.n	80009fa <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009e4:	4b06      	ldr	r3, [pc, #24]	; (8000a00 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009e6:	4a07      	ldr	r2, [pc, #28]	; (8000a04 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009e8:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009ea:	21f0      	movs	r1, #240	; 0xf0
 80009ec:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009f0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009f2:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009f4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009f8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80009fa:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	e000e010 	.word	0xe000e010
 8000a04:	e000ed00 	.word	0xe000ed00

08000a08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a0c:	f8df 8198 	ldr.w	r8, [pc, #408]	; 8000ba8 <HAL_GPIO_Init+0x1a0>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a10:	4c63      	ldr	r4, [pc, #396]	; (8000ba0 <HAL_GPIO_Init+0x198>)
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a12:	f8df 9198 	ldr.w	r9, [pc, #408]	; 8000bac <HAL_GPIO_Init+0x1a4>
  uint32_t position = 0x00u;
 8000a16:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a18:	680a      	ldr	r2, [r1, #0]
 8000a1a:	fa32 f503 	lsrs.w	r5, r2, r3
 8000a1e:	d102      	bne.n	8000a26 <HAL_GPIO_Init+0x1e>
      }
    }

    position++;
  }
}
 8000a20:	b003      	add	sp, #12
 8000a22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a26:	f04f 0c01 	mov.w	ip, #1
 8000a2a:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00u)
 8000a2e:	ea1c 0202 	ands.w	r2, ip, r2
 8000a32:	f000 80a6 	beq.w	8000b82 <HAL_GPIO_Init+0x17a>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a36:	684d      	ldr	r5, [r1, #4]
 8000a38:	f025 0a10 	bic.w	sl, r5, #16
 8000a3c:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000a40:	2603      	movs	r6, #3
 8000a42:	f10a 37ff 	add.w	r7, sl, #4294967295
 8000a46:	fa06 f60e 	lsl.w	r6, r6, lr
 8000a4a:	2f01      	cmp	r7, #1
 8000a4c:	ea6f 0606 	mvn.w	r6, r6
 8000a50:	d811      	bhi.n	8000a76 <HAL_GPIO_Init+0x6e>
        temp = GPIOx->OSPEEDR;
 8000a52:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000a54:	ea07 0b06 	and.w	fp, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a58:	68cf      	ldr	r7, [r1, #12]
 8000a5a:	fa07 f70e 	lsl.w	r7, r7, lr
 8000a5e:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->OSPEEDR = temp;
 8000a62:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000a64:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a66:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000a6a:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8000a6e:	409f      	lsls	r7, r3
 8000a70:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->OTYPER = temp;
 8000a74:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000a76:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000a78:	ea07 0c06 	and.w	ip, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a7c:	688f      	ldr	r7, [r1, #8]
 8000a7e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000a82:	ea47 070c 	orr.w	r7, r7, ip
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a86:	f1ba 0f02 	cmp.w	sl, #2
      GPIOx->PUPDR = temp;
 8000a8a:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a8c:	d116      	bne.n	8000abc <HAL_GPIO_Init+0xb4>
        temp = GPIOx->AFR[position >> 3u];
 8000a8e:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000a92:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a96:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8000a9a:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a9e:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000aa2:	f04f 0c0f 	mov.w	ip, #15
 8000aa6:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000aaa:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000aae:	690f      	ldr	r7, [r1, #16]
 8000ab0:	fa07 f70b 	lsl.w	r7, r7, fp
 8000ab4:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3u] = temp;
 8000ab8:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 8000abc:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000abe:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ac0:	f005 0703 	and.w	r7, r5, #3
 8000ac4:	fa07 fe0e 	lsl.w	lr, r7, lr
 8000ac8:	ea4e 0606 	orr.w	r6, lr, r6
      GPIOx->MODER = temp;
 8000acc:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ace:	00ee      	lsls	r6, r5, #3
 8000ad0:	d557      	bpl.n	8000b82 <HAL_GPIO_Init+0x17a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ad2:	f8d8 6018 	ldr.w	r6, [r8, #24]
 8000ad6:	f046 0601 	orr.w	r6, r6, #1
 8000ada:	f8c8 6018 	str.w	r6, [r8, #24]
 8000ade:	f8d8 6018 	ldr.w	r6, [r8, #24]
 8000ae2:	f023 0703 	bic.w	r7, r3, #3
 8000ae6:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000aea:	f006 0601 	and.w	r6, r6, #1
 8000aee:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8000af2:	9601      	str	r6, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000af4:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000af8:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8000afa:	68be      	ldr	r6, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000afc:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000b00:	f04f 0c0f 	mov.w	ip, #15
 8000b04:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b08:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b0c:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b10:	d039      	beq.n	8000b86 <HAL_GPIO_Init+0x17e>
 8000b12:	4e24      	ldr	r6, [pc, #144]	; (8000ba4 <HAL_GPIO_Init+0x19c>)
 8000b14:	42b0      	cmp	r0, r6
 8000b16:	d038      	beq.n	8000b8a <HAL_GPIO_Init+0x182>
 8000b18:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000b1c:	42b0      	cmp	r0, r6
 8000b1e:	d036      	beq.n	8000b8e <HAL_GPIO_Init+0x186>
 8000b20:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000b24:	42b0      	cmp	r0, r6
 8000b26:	d034      	beq.n	8000b92 <HAL_GPIO_Init+0x18a>
 8000b28:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000b2c:	42b0      	cmp	r0, r6
 8000b2e:	d032      	beq.n	8000b96 <HAL_GPIO_Init+0x18e>
 8000b30:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000b34:	42b0      	cmp	r0, r6
 8000b36:	d030      	beq.n	8000b9a <HAL_GPIO_Init+0x192>
 8000b38:	4548      	cmp	r0, r9
 8000b3a:	bf0c      	ite	eq
 8000b3c:	2606      	moveq	r6, #6
 8000b3e:	2607      	movne	r6, #7
 8000b40:	fa06 f60e 	lsl.w	r6, r6, lr
 8000b44:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b48:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 8000b4a:	6826      	ldr	r6, [r4, #0]
        temp &= ~(iocurrent);
 8000b4c:	43d7      	mvns	r7, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b4e:	f415 3f80 	tst.w	r5, #65536	; 0x10000
        temp &= ~(iocurrent);
 8000b52:	bf0c      	ite	eq
 8000b54:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000b56:	4316      	orrne	r6, r2
        EXTI->IMR = temp;
 8000b58:	6026      	str	r6, [r4, #0]
        temp = EXTI->EMR;
 8000b5a:	6866      	ldr	r6, [r4, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b5c:	f415 3f00 	tst.w	r5, #131072	; 0x20000
        temp &= ~(iocurrent);
 8000b60:	bf0c      	ite	eq
 8000b62:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000b64:	4316      	orrne	r6, r2
        EXTI->EMR = temp;
 8000b66:	6066      	str	r6, [r4, #4]
        temp = EXTI->RTSR;
 8000b68:	68a6      	ldr	r6, [r4, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b6a:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
        temp &= ~(iocurrent);
 8000b6e:	bf0c      	ite	eq
 8000b70:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000b72:	4316      	orrne	r6, r2
        EXTI->RTSR = temp;
 8000b74:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR;
 8000b76:	68e6      	ldr	r6, [r4, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b78:	02ad      	lsls	r5, r5, #10
        temp &= ~(iocurrent);
 8000b7a:	bf54      	ite	pl
 8000b7c:	403e      	andpl	r6, r7
          temp |= iocurrent;
 8000b7e:	4316      	orrmi	r6, r2
        EXTI->FTSR = temp;
 8000b80:	60e6      	str	r6, [r4, #12]
    position++;
 8000b82:	3301      	adds	r3, #1
 8000b84:	e748      	b.n	8000a18 <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b86:	2600      	movs	r6, #0
 8000b88:	e7da      	b.n	8000b40 <HAL_GPIO_Init+0x138>
 8000b8a:	2601      	movs	r6, #1
 8000b8c:	e7d8      	b.n	8000b40 <HAL_GPIO_Init+0x138>
 8000b8e:	2602      	movs	r6, #2
 8000b90:	e7d6      	b.n	8000b40 <HAL_GPIO_Init+0x138>
 8000b92:	2603      	movs	r6, #3
 8000b94:	e7d4      	b.n	8000b40 <HAL_GPIO_Init+0x138>
 8000b96:	2604      	movs	r6, #4
 8000b98:	e7d2      	b.n	8000b40 <HAL_GPIO_Init+0x138>
 8000b9a:	2605      	movs	r6, #5
 8000b9c:	e7d0      	b.n	8000b40 <HAL_GPIO_Init+0x138>
 8000b9e:	bf00      	nop
 8000ba0:	40010400 	.word	0x40010400
 8000ba4:	48000400 	.word	0x48000400
 8000ba8:	40021000 	.word	0x40021000
 8000bac:	48001800 	.word	0x48001800

08000bb0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000bb0:	b10a      	cbz	r2, 8000bb6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000bb2:	6181      	str	r1, [r0, #24]
 8000bb4:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000bb6:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8000bb8:	4770      	bx	lr

08000bba <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8000bba:	6803      	ldr	r3, [r0, #0]
 8000bbc:	699a      	ldr	r2, [r3, #24]
 8000bbe:	0791      	lsls	r1, r2, #30
  {
    hi2c->Instance->TXDR = 0x00U;
 8000bc0:	bf44      	itt	mi
 8000bc2:	2200      	movmi	r2, #0
 8000bc4:	629a      	strmi	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000bc6:	699a      	ldr	r2, [r3, #24]
 8000bc8:	07d2      	lsls	r2, r2, #31
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8000bca:	bf5e      	ittt	pl
 8000bcc:	699a      	ldrpl	r2, [r3, #24]
 8000bce:	f042 0201 	orrpl.w	r2, r2, #1
 8000bd2:	619a      	strpl	r2, [r3, #24]
  }
}
 8000bd4:	4770      	bx	lr
	...

08000bd8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8000bd8:	b530      	push	{r4, r5, lr}
 8000bda:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8000bdc:	6804      	ldr	r4, [r0, #0]
 8000bde:	ea45 4202 	orr.w	r2, r5, r2, lsl #16
 8000be2:	431a      	orrs	r2, r3
 8000be4:	4b05      	ldr	r3, [pc, #20]	; (8000bfc <I2C_TransferConfig+0x24>)
 8000be6:	6860      	ldr	r0, [r4, #4]
 8000be8:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8000bec:	ea43 5355 	orr.w	r3, r3, r5, lsr #21
 8000bf0:	430a      	orrs	r2, r1
 8000bf2:	ea20 0003 	bic.w	r0, r0, r3
 8000bf6:	4302      	orrs	r2, r0
 8000bf8:	6062      	str	r2, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8000bfa:	bd30      	pop	{r4, r5, pc}
 8000bfc:	03ff63ff 	.word	0x03ff63ff

08000c00 <I2C_IsAcknowledgeFailed>:
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000c00:	6803      	ldr	r3, [r0, #0]
{
 8000c02:	b570      	push	{r4, r5, r6, lr}
 8000c04:	4604      	mov	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000c06:	6998      	ldr	r0, [r3, #24]
 8000c08:	f010 0010 	ands.w	r0, r0, #16
{
 8000c0c:	460d      	mov	r5, r1
 8000c0e:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000c10:	d116      	bne.n	8000c40 <I2C_IsAcknowledgeFailed+0x40>
}
 8000c12:	bd70      	pop	{r4, r5, r6, pc}
      if (Timeout != HAL_MAX_DELAY)
 8000c14:	1c69      	adds	r1, r5, #1
 8000c16:	d014      	beq.n	8000c42 <I2C_IsAcknowledgeFailed+0x42>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000c18:	f7ff fe74 	bl	8000904 <HAL_GetTick>
 8000c1c:	1b80      	subs	r0, r0, r6
 8000c1e:	42a8      	cmp	r0, r5
 8000c20:	d800      	bhi.n	8000c24 <I2C_IsAcknowledgeFailed+0x24>
 8000c22:	b96d      	cbnz	r5, 8000c40 <I2C_IsAcknowledgeFailed+0x40>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000c24:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000c26:	f043 0320 	orr.w	r3, r3, #32
 8000c2a:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8000c2c:	2320      	movs	r3, #32
 8000c2e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000c32:	2300      	movs	r3, #0
 8000c34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8000c38:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 8000c3c:	2001      	movs	r0, #1
 8000c3e:	e7e8      	b.n	8000c12 <I2C_IsAcknowledgeFailed+0x12>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000c40:	6823      	ldr	r3, [r4, #0]
 8000c42:	699a      	ldr	r2, [r3, #24]
 8000c44:	0692      	lsls	r2, r2, #26
 8000c46:	d5e5      	bpl.n	8000c14 <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000c48:	2210      	movs	r2, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000c4a:	2520      	movs	r5, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000c4c:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8000c4e:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000c50:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8000c52:	f7ff ffb2 	bl	8000bba <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8000c56:	6822      	ldr	r2, [r4, #0]
 8000c58:	6853      	ldr	r3, [r2, #4]
 8000c5a:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8000c5e:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8000c62:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8000c66:	f023 0301 	bic.w	r3, r3, #1
 8000c6a:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8000c6c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000c6e:	f043 0304 	orr.w	r3, r3, #4
 8000c72:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8000c74:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
 8000c78:	e7db      	b.n	8000c32 <I2C_IsAcknowledgeFailed+0x32>

08000c7a <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8000c7a:	b570      	push	{r4, r5, r6, lr}
 8000c7c:	4604      	mov	r4, r0
 8000c7e:	460d      	mov	r5, r1
 8000c80:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8000c82:	6823      	ldr	r3, [r4, #0]
 8000c84:	699b      	ldr	r3, [r3, #24]
 8000c86:	075b      	lsls	r3, r3, #29
 8000c88:	d40e      	bmi.n	8000ca8 <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8000c8a:	4632      	mov	r2, r6
 8000c8c:	4629      	mov	r1, r5
 8000c8e:	4620      	mov	r0, r4
 8000c90:	f7ff ffb6 	bl	8000c00 <I2C_IsAcknowledgeFailed>
 8000c94:	b9f0      	cbnz	r0, 8000cd4 <I2C_WaitOnRXNEFlagUntilTimeout+0x5a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8000c96:	6823      	ldr	r3, [r4, #0]
 8000c98:	699a      	ldr	r2, [r3, #24]
 8000c9a:	0691      	lsls	r1, r2, #26
 8000c9c:	d51c      	bpl.n	8000cd8 <I2C_WaitOnRXNEFlagUntilTimeout+0x5e>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8000c9e:	699a      	ldr	r2, [r3, #24]
 8000ca0:	0752      	lsls	r2, r2, #29
 8000ca2:	d503      	bpl.n	8000cac <I2C_WaitOnRXNEFlagUntilTimeout+0x32>
 8000ca4:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8000ca6:	b10a      	cbz	r2, 8000cac <I2C_WaitOnRXNEFlagUntilTimeout+0x32>
        return HAL_OK;
 8000ca8:	2000      	movs	r0, #0
}
 8000caa:	bd70      	pop	{r4, r5, r6, pc}
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000cac:	2120      	movs	r1, #32
 8000cae:	61d9      	str	r1, [r3, #28]
        I2C_RESET_CR2(hi2c);
 8000cb0:	685a      	ldr	r2, [r3, #4]
 8000cb2:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8000cb6:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8000cba:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8000cbe:	f022 0201 	bic.w	r2, r2, #1
 8000cc2:	605a      	str	r2, [r3, #4]
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8000cc8:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000ccc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8000cd0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8000cd4:	2001      	movs	r0, #1
 8000cd6:	e7e8      	b.n	8000caa <I2C_WaitOnRXNEFlagUntilTimeout+0x30>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000cd8:	f7ff fe14 	bl	8000904 <HAL_GetTick>
 8000cdc:	1b80      	subs	r0, r0, r6
 8000cde:	42a8      	cmp	r0, r5
 8000ce0:	d801      	bhi.n	8000ce6 <I2C_WaitOnRXNEFlagUntilTimeout+0x6c>
 8000ce2:	2d00      	cmp	r5, #0
 8000ce4:	d1cd      	bne.n	8000c82 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000ce6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000ce8:	f043 0320 	orr.w	r3, r3, #32
 8000cec:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8000cee:	2320      	movs	r3, #32
 8000cf0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      __HAL_UNLOCK(hi2c);
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	e7eb      	b.n	8000cd0 <I2C_WaitOnRXNEFlagUntilTimeout+0x56>

08000cf8 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8000cf8:	b570      	push	{r4, r5, r6, lr}
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	460d      	mov	r5, r1
 8000cfe:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000d00:	6823      	ldr	r3, [r4, #0]
 8000d02:	699b      	ldr	r3, [r3, #24]
 8000d04:	069b      	lsls	r3, r3, #26
 8000d06:	d501      	bpl.n	8000d0c <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8000d08:	2000      	movs	r0, #0
}
 8000d0a:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8000d0c:	4632      	mov	r2, r6
 8000d0e:	4629      	mov	r1, r5
 8000d10:	4620      	mov	r0, r4
 8000d12:	f7ff ff75 	bl	8000c00 <I2C_IsAcknowledgeFailed>
 8000d16:	b990      	cbnz	r0, 8000d3e <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000d18:	f7ff fdf4 	bl	8000904 <HAL_GetTick>
 8000d1c:	1b80      	subs	r0, r0, r6
 8000d1e:	42a8      	cmp	r0, r5
 8000d20:	d801      	bhi.n	8000d26 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	d1ec      	bne.n	8000d00 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000d26:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000d28:	f043 0320 	orr.w	r3, r3, #32
 8000d2c:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8000d2e:	2320      	movs	r3, #32
 8000d30:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8000d34:	2300      	movs	r3, #0
 8000d36:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 8000d3a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8000d3e:	2001      	movs	r0, #1
 8000d40:	e7e3      	b.n	8000d0a <I2C_WaitOnSTOPFlagUntilTimeout+0x12>

08000d42 <I2C_WaitOnFlagUntilTimeout>:
{
 8000d42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d46:	9f06      	ldr	r7, [sp, #24]
 8000d48:	4604      	mov	r4, r0
 8000d4a:	4688      	mov	r8, r1
 8000d4c:	4616      	mov	r6, r2
 8000d4e:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000d50:	6822      	ldr	r2, [r4, #0]
 8000d52:	6993      	ldr	r3, [r2, #24]
 8000d54:	ea38 0303 	bics.w	r3, r8, r3
 8000d58:	bf0c      	ite	eq
 8000d5a:	2301      	moveq	r3, #1
 8000d5c:	2300      	movne	r3, #0
 8000d5e:	42b3      	cmp	r3, r6
 8000d60:	d001      	beq.n	8000d66 <I2C_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 8000d62:	2000      	movs	r0, #0
 8000d64:	e015      	b.n	8000d92 <I2C_WaitOnFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8000d66:	1c6b      	adds	r3, r5, #1
 8000d68:	d0f3      	beq.n	8000d52 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000d6a:	f7ff fdcb 	bl	8000904 <HAL_GetTick>
 8000d6e:	1bc0      	subs	r0, r0, r7
 8000d70:	42a8      	cmp	r0, r5
 8000d72:	d801      	bhi.n	8000d78 <I2C_WaitOnFlagUntilTimeout+0x36>
 8000d74:	2d00      	cmp	r5, #0
 8000d76:	d1eb      	bne.n	8000d50 <I2C_WaitOnFlagUntilTimeout+0xe>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000d78:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000d7a:	f043 0320 	orr.w	r3, r3, #32
 8000d7e:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8000d80:	2320      	movs	r3, #32
 8000d82:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8000d86:	2300      	movs	r3, #0
 8000d88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 8000d8c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8000d90:	2001      	movs	r0, #1
}
 8000d92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000d96 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8000d96:	b570      	push	{r4, r5, r6, lr}
 8000d98:	4604      	mov	r4, r0
 8000d9a:	460d      	mov	r5, r1
 8000d9c:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8000d9e:	6823      	ldr	r3, [r4, #0]
 8000da0:	699b      	ldr	r3, [r3, #24]
 8000da2:	079b      	lsls	r3, r3, #30
 8000da4:	d501      	bpl.n	8000daa <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 8000da6:	2000      	movs	r0, #0
}
 8000da8:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8000daa:	4632      	mov	r2, r6
 8000dac:	4629      	mov	r1, r5
 8000dae:	4620      	mov	r0, r4
 8000db0:	f7ff ff26 	bl	8000c00 <I2C_IsAcknowledgeFailed>
 8000db4:	b9a0      	cbnz	r0, 8000de0 <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 8000db6:	1c6a      	adds	r2, r5, #1
 8000db8:	d0f1      	beq.n	8000d9e <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000dba:	f7ff fda3 	bl	8000904 <HAL_GetTick>
 8000dbe:	1b80      	subs	r0, r0, r6
 8000dc0:	42a8      	cmp	r0, r5
 8000dc2:	d801      	bhi.n	8000dc8 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8000dc4:	2d00      	cmp	r5, #0
 8000dc6:	d1ea      	bne.n	8000d9e <I2C_WaitOnTXISFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000dc8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000dca:	f043 0320 	orr.w	r3, r3, #32
 8000dce:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8000dd0:	2320      	movs	r3, #32
 8000dd2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 8000ddc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8000de0:	2001      	movs	r0, #1
 8000de2:	e7e1      	b.n	8000da8 <I2C_WaitOnTXISFlagUntilTimeout+0x12>

08000de4 <HAL_I2C_Init>:
{
 8000de4:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8000de6:	4604      	mov	r4, r0
 8000de8:	2800      	cmp	r0, #0
 8000dea:	d04a      	beq.n	8000e82 <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000dec:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8000df0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000df4:	b91b      	cbnz	r3, 8000dfe <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8000df6:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8000dfa:	f7ff fbc7 	bl	800058c <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000dfe:	2324      	movs	r3, #36	; 0x24
 8000e00:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8000e04:	6823      	ldr	r3, [r4, #0]
 8000e06:	681a      	ldr	r2, [r3, #0]
 8000e08:	f022 0201 	bic.w	r2, r2, #1
 8000e0c:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000e0e:	6862      	ldr	r2, [r4, #4]
 8000e10:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000e14:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000e16:	689a      	ldr	r2, [r3, #8]
 8000e18:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000e1c:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000e1e:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8000e22:	2901      	cmp	r1, #1
 8000e24:	d124      	bne.n	8000e70 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000e26:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000e2a:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000e2c:	685a      	ldr	r2, [r3, #4]
 8000e2e:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8000e32:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000e36:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000e38:	68da      	ldr	r2, [r3, #12]
 8000e3a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000e3e:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000e40:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 8000e44:	430a      	orrs	r2, r1
 8000e46:	69a1      	ldr	r1, [r4, #24]
 8000e48:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000e4c:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000e4e:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 8000e52:	430a      	orrs	r2, r1
 8000e54:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8000e56:	681a      	ldr	r2, [r3, #0]
 8000e58:	f042 0201 	orr.w	r2, r2, #1
 8000e5c:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000e5e:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8000e60:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000e62:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000e64:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000e68:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e6a:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8000e6e:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000e70:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000e74:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000e76:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000e78:	bf04      	itt	eq
 8000e7a:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 8000e7e:	605a      	streq	r2, [r3, #4]
 8000e80:	e7d4      	b.n	8000e2c <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8000e82:	2001      	movs	r0, #1
 8000e84:	e7f3      	b.n	8000e6e <HAL_I2C_Init+0x8a>
	...

08000e88 <HAL_I2C_Master_Transmit>:
{
 8000e88:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8000e8c:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000e8e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8000e92:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000e94:	2b20      	cmp	r3, #32
{
 8000e96:	4604      	mov	r4, r0
 8000e98:	460e      	mov	r6, r1
 8000e9a:	4691      	mov	r9, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000e9c:	f040 8086 	bne.w	8000fac <HAL_I2C_Master_Transmit+0x124>
    __HAL_LOCK(hi2c);
 8000ea0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000ea4:	2b01      	cmp	r3, #1
 8000ea6:	f000 8081 	beq.w	8000fac <HAL_I2C_Master_Transmit+0x124>
 8000eaa:	f04f 0a01 	mov.w	sl, #1
 8000eae:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8000eb2:	f7ff fd27 	bl	8000904 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000eb6:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 8000eb8:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000eba:	9000      	str	r0, [sp, #0]
 8000ebc:	4652      	mov	r2, sl
 8000ebe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ec2:	4620      	mov	r0, r4
 8000ec4:	f7ff ff3d 	bl	8000d42 <I2C_WaitOnFlagUntilTimeout>
 8000ec8:	b118      	cbz	r0, 8000ed2 <HAL_I2C_Master_Transmit+0x4a>
      return HAL_ERROR;
 8000eca:	2001      	movs	r0, #1
}
 8000ecc:	b002      	add	sp, #8
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000ed2:	2321      	movs	r3, #33	; 0x21
 8000ed4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8000ed8:	2310      	movs	r3, #16
 8000eda:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000ede:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 8000ee0:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000ee4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr  = pData;
 8000ee6:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000eea:	b29b      	uxth	r3, r3
 8000eec:	2bff      	cmp	r3, #255	; 0xff
    hi2c->XferISR   = NULL;
 8000eee:	6360      	str	r0, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000ef0:	4b2f      	ldr	r3, [pc, #188]	; (8000fb0 <HAL_I2C_Master_Transmit+0x128>)
 8000ef2:	d926      	bls.n	8000f42 <HAL_I2C_Master_Transmit+0xba>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000ef4:	22ff      	movs	r2, #255	; 0xff
 8000ef6:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8000ef8:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000efa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000efe:	4631      	mov	r1, r6
 8000f00:	4620      	mov	r0, r4
 8000f02:	f7ff fe69 	bl	8000bd8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8000f06:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000f08:	b29b      	uxth	r3, r3
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000f0a:	462a      	mov	r2, r5
 8000f0c:	4639      	mov	r1, r7
 8000f0e:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 8000f10:	b9fb      	cbnz	r3, 8000f52 <HAL_I2C_Master_Transmit+0xca>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000f12:	f7ff fef1 	bl	8000cf8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8000f16:	2800      	cmp	r0, #0
 8000f18:	d1d7      	bne.n	8000eca <HAL_I2C_Master_Transmit+0x42>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000f1a:	6823      	ldr	r3, [r4, #0]
 8000f1c:	2120      	movs	r1, #32
 8000f1e:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8000f20:	685a      	ldr	r2, [r3, #4]
 8000f22:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8000f26:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8000f2a:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8000f2e:	f022 0201 	bic.w	r2, r2, #1
 8000f32:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8000f34:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8000f38:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8000f3c:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8000f40:	e7c4      	b.n	8000ecc <HAL_I2C_Master_Transmit+0x44>
      hi2c->XferSize = hi2c->XferCount;
 8000f42:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8000f44:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8000f46:	b292      	uxth	r2, r2
 8000f48:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000f4a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000f4e:	b2d2      	uxtb	r2, r2
 8000f50:	e7d5      	b.n	8000efe <HAL_I2C_Master_Transmit+0x76>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000f52:	f7ff ff20 	bl	8000d96 <I2C_WaitOnTXISFlagUntilTimeout>
 8000f56:	2800      	cmp	r0, #0
 8000f58:	d1b7      	bne.n	8000eca <HAL_I2C_Master_Transmit+0x42>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8000f5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000f5c:	6822      	ldr	r2, [r4, #0]
 8000f5e:	f813 1b01 	ldrb.w	r1, [r3], #1
 8000f62:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8000f64:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8000f66:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8000f68:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8000f6a:	3b01      	subs	r3, #1
 8000f6c:	b29b      	uxth	r3, r3
 8000f6e:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000f70:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8000f72:	3a01      	subs	r2, #1
 8000f74:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000f76:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8000f78:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d0c3      	beq.n	8000f06 <HAL_I2C_Master_Transmit+0x7e>
 8000f7e:	2a00      	cmp	r2, #0
 8000f80:	d1c1      	bne.n	8000f06 <HAL_I2C_Master_Transmit+0x7e>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000f82:	9500      	str	r5, [sp, #0]
 8000f84:	463b      	mov	r3, r7
 8000f86:	2180      	movs	r1, #128	; 0x80
 8000f88:	4620      	mov	r0, r4
 8000f8a:	f7ff feda 	bl	8000d42 <I2C_WaitOnFlagUntilTimeout>
 8000f8e:	2800      	cmp	r0, #0
 8000f90:	d19b      	bne.n	8000eca <HAL_I2C_Master_Transmit+0x42>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000f92:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000f94:	b29b      	uxth	r3, r3
 8000f96:	2bff      	cmp	r3, #255	; 0xff
 8000f98:	d903      	bls.n	8000fa2 <HAL_I2C_Master_Transmit+0x11a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000f9a:	22ff      	movs	r2, #255	; 0xff
 8000f9c:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000f9e:	9000      	str	r0, [sp, #0]
 8000fa0:	e7ab      	b.n	8000efa <HAL_I2C_Master_Transmit+0x72>
          hi2c->XferSize = hi2c->XferCount;
 8000fa2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000fa4:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8000fa6:	b292      	uxth	r2, r2
 8000fa8:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000faa:	e7ce      	b.n	8000f4a <HAL_I2C_Master_Transmit+0xc2>
    return HAL_BUSY;
 8000fac:	2002      	movs	r0, #2
 8000fae:	e78d      	b.n	8000ecc <HAL_I2C_Master_Transmit+0x44>
 8000fb0:	80002000 	.word	0x80002000

08000fb4 <HAL_I2C_Master_Receive>:
{
 8000fb4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8000fb8:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000fba:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8000fbe:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000fc0:	2b20      	cmp	r3, #32
{
 8000fc2:	4604      	mov	r4, r0
 8000fc4:	460e      	mov	r6, r1
 8000fc6:	4691      	mov	r9, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000fc8:	f040 8087 	bne.w	80010da <HAL_I2C_Master_Receive+0x126>
    __HAL_LOCK(hi2c);
 8000fcc:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000fd0:	2b01      	cmp	r3, #1
 8000fd2:	f000 8082 	beq.w	80010da <HAL_I2C_Master_Receive+0x126>
 8000fd6:	f04f 0a01 	mov.w	sl, #1
 8000fda:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8000fde:	f7ff fc91 	bl	8000904 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000fe2:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 8000fe4:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000fe6:	9000      	str	r0, [sp, #0]
 8000fe8:	4652      	mov	r2, sl
 8000fea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fee:	4620      	mov	r0, r4
 8000ff0:	f7ff fea7 	bl	8000d42 <I2C_WaitOnFlagUntilTimeout>
 8000ff4:	b118      	cbz	r0, 8000ffe <HAL_I2C_Master_Receive+0x4a>
      return HAL_ERROR;
 8000ff6:	2001      	movs	r0, #1
}
 8000ff8:	b002      	add	sp, #8
 8000ffa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8000ffe:	2322      	movs	r3, #34	; 0x22
 8001000:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001004:	2310      	movs	r3, #16
 8001006:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800100a:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 800100c:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001010:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr  = pData;
 8001012:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001016:	b29b      	uxth	r3, r3
 8001018:	2bff      	cmp	r3, #255	; 0xff
    hi2c->XferISR   = NULL;
 800101a:	6360      	str	r0, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800101c:	4b30      	ldr	r3, [pc, #192]	; (80010e0 <HAL_I2C_Master_Receive+0x12c>)
 800101e:	d926      	bls.n	800106e <HAL_I2C_Master_Receive+0xba>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001020:	22ff      	movs	r2, #255	; 0xff
 8001022:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001024:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001026:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800102a:	4631      	mov	r1, r6
 800102c:	4620      	mov	r0, r4
 800102e:	f7ff fdd3 	bl	8000bd8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001032:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001034:	b29b      	uxth	r3, r3
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001036:	462a      	mov	r2, r5
 8001038:	4639      	mov	r1, r7
 800103a:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 800103c:	b9fb      	cbnz	r3, 800107e <HAL_I2C_Master_Receive+0xca>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800103e:	f7ff fe5b 	bl	8000cf8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001042:	2800      	cmp	r0, #0
 8001044:	d1d7      	bne.n	8000ff6 <HAL_I2C_Master_Receive+0x42>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001046:	6823      	ldr	r3, [r4, #0]
 8001048:	2120      	movs	r1, #32
 800104a:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800104c:	685a      	ldr	r2, [r3, #4]
 800104e:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8001052:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8001056:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 800105a:	f022 0201 	bic.w	r2, r2, #1
 800105e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001060:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001064:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001068:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 800106c:	e7c4      	b.n	8000ff8 <HAL_I2C_Master_Receive+0x44>
      hi2c->XferSize = hi2c->XferCount;
 800106e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001070:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8001072:	b292      	uxth	r2, r2
 8001074:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001076:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800107a:	b2d2      	uxtb	r2, r2
 800107c:	e7d5      	b.n	800102a <HAL_I2C_Master_Receive+0x76>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800107e:	f7ff fdfc 	bl	8000c7a <I2C_WaitOnRXNEFlagUntilTimeout>
 8001082:	2800      	cmp	r0, #0
 8001084:	d1b7      	bne.n	8000ff6 <HAL_I2C_Master_Receive+0x42>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001086:	6823      	ldr	r3, [r4, #0]
 8001088:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800108a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800108c:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800108e:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8001090:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8001092:	3301      	adds	r3, #1
 8001094:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8001096:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001098:	3b01      	subs	r3, #1
 800109a:	b29b      	uxth	r3, r3
 800109c:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800109e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80010a0:	3a01      	subs	r2, #1
 80010a2:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80010a4:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 80010a6:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d0c2      	beq.n	8001032 <HAL_I2C_Master_Receive+0x7e>
 80010ac:	2a00      	cmp	r2, #0
 80010ae:	d1c0      	bne.n	8001032 <HAL_I2C_Master_Receive+0x7e>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80010b0:	9500      	str	r5, [sp, #0]
 80010b2:	463b      	mov	r3, r7
 80010b4:	2180      	movs	r1, #128	; 0x80
 80010b6:	4620      	mov	r0, r4
 80010b8:	f7ff fe43 	bl	8000d42 <I2C_WaitOnFlagUntilTimeout>
 80010bc:	2800      	cmp	r0, #0
 80010be:	d19a      	bne.n	8000ff6 <HAL_I2C_Master_Receive+0x42>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80010c0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80010c2:	b29b      	uxth	r3, r3
 80010c4:	2bff      	cmp	r3, #255	; 0xff
 80010c6:	d903      	bls.n	80010d0 <HAL_I2C_Master_Receive+0x11c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80010c8:	22ff      	movs	r2, #255	; 0xff
 80010ca:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80010cc:	9000      	str	r0, [sp, #0]
 80010ce:	e7aa      	b.n	8001026 <HAL_I2C_Master_Receive+0x72>
          hi2c->XferSize = hi2c->XferCount;
 80010d0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80010d2:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 80010d4:	b292      	uxth	r2, r2
 80010d6:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80010d8:	e7cd      	b.n	8001076 <HAL_I2C_Master_Receive+0xc2>
    return HAL_BUSY;
 80010da:	2002      	movs	r0, #2
 80010dc:	e78c      	b.n	8000ff8 <HAL_I2C_Master_Receive+0x44>
 80010de:	bf00      	nop
 80010e0:	80002400 	.word	0x80002400

080010e4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80010e4:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80010e6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80010ea:	2b20      	cmp	r3, #32
 80010ec:	b2dc      	uxtb	r4, r3
 80010ee:	d11d      	bne.n	800112c <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80010f0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d019      	beq.n	800112c <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 80010f8:	2324      	movs	r3, #36	; 0x24
 80010fa:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80010fe:	6803      	ldr	r3, [r0, #0]
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	f022 0201 	bic.w	r2, r2, #1
 8001106:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800110e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	4311      	orrs	r1, r2
 8001114:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	f042 0201 	orr.w	r2, r2, #1
 800111c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800111e:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8001120:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001124:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8001128:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 800112a:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 800112c:	2002      	movs	r0, #2
 800112e:	e7fc      	b.n	800112a <HAL_I2CEx_ConfigAnalogFilter+0x46>

08001130 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001130:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001132:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001136:	2b20      	cmp	r3, #32
 8001138:	b2dc      	uxtb	r4, r3
 800113a:	d11c      	bne.n	8001176 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800113c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001140:	2b01      	cmp	r3, #1
 8001142:	d018      	beq.n	8001176 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001144:	2324      	movs	r3, #36	; 0x24
 8001146:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800114a:	6803      	ldr	r3, [r0, #0]
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	f022 0201 	bic.w	r2, r2, #1
 8001152:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001154:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001156:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800115a:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800115e:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	f042 0201 	orr.w	r2, r2, #1
 8001166:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001168:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800116a:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800116e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8001172:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8001174:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8001176:	2002      	movs	r0, #2
 8001178:	e7fc      	b.n	8001174 <HAL_I2CEx_ConfigDigitalFilter+0x44>

0800117a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800117a:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800117c:	4604      	mov	r4, r0
{
 800117e:	b087      	sub	sp, #28
  if (hpcd == NULL)
 8001180:	2800      	cmp	r0, #0
 8001182:	d04f      	beq.n	8001224 <HAL_PCD_Init+0xaa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001184:	f890 32a9 	ldrb.w	r3, [r0, #681]	; 0x2a9
 8001188:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800118c:	b91b      	cbnz	r3, 8001196 <HAL_PCD_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800118e:	f880 22a8 	strb.w	r2, [r0, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001192:	f7ff facb 	bl	800072c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001196:	2303      	movs	r3, #3
 8001198:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800119c:	6820      	ldr	r0, [r4, #0]
 800119e:	f001 fc28 	bl	80029f2 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011a2:	2300      	movs	r3, #0
 80011a4:	6865      	ldr	r5, [r4, #4]
 80011a6:	2628      	movs	r6, #40	; 0x28
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80011a8:	2701      	movs	r7, #1
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80011aa:	4618      	mov	r0, r3
 80011ac:	b2d9      	uxtb	r1, r3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011ae:	428d      	cmp	r5, r1
 80011b0:	f103 0201 	add.w	r2, r3, #1
 80011b4:	d81b      	bhi.n	80011ee <HAL_PCD_Init+0x74>
 80011b6:	2300      	movs	r3, #0
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80011b8:	2628      	movs	r6, #40	; 0x28
 80011ba:	4619      	mov	r1, r3
 80011bc:	b2d8      	uxtb	r0, r3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011be:	4285      	cmp	r5, r0
 80011c0:	f103 0301 	add.w	r3, r3, #1
 80011c4:	d821      	bhi.n	800120a <HAL_PCD_Init+0x90>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80011c6:	f104 0610 	add.w	r6, r4, #16
 80011ca:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80011cc:	466d      	mov	r5, sp
 80011ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011d0:	6833      	ldr	r3, [r6, #0]
 80011d2:	602b      	str	r3, [r5, #0]
 80011d4:	1d23      	adds	r3, r4, #4
 80011d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011d8:	6820      	ldr	r0, [r4, #0]
 80011da:	f001 fc14 	bl	8002a06 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80011de:	2000      	movs	r0, #0
  hpcd->State = HAL_PCD_STATE_READY;
 80011e0:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 80011e2:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80011e6:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  return HAL_OK;
}
 80011ea:	b007      	add	sp, #28
 80011ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->IN_ep[i].is_in = 1U;
 80011ee:	fb06 4301 	mla	r3, r6, r1, r4
    hpcd->IN_ep[i].xfer_buff = 0U;
 80011f2:	e9c3 000e 	strd	r0, r0, [r3, #56]	; 0x38
    hpcd->IN_ep[i].is_in = 1U;
 80011f6:	f883 7029 	strb.w	r7, [r3, #41]	; 0x29
    hpcd->IN_ep[i].num = i;
 80011fa:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
    hpcd->IN_ep[i].tx_fifo_num = i;
 80011fe:	86d9      	strh	r1, [r3, #54]	; 0x36
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001200:	f883 002b 	strb.w	r0, [r3, #43]	; 0x2b
    hpcd->IN_ep[i].xfer_len = 0U;
 8001204:	6418      	str	r0, [r3, #64]	; 0x40
 8001206:	4613      	mov	r3, r2
 8001208:	e7d0      	b.n	80011ac <HAL_PCD_Init+0x32>
    hpcd->OUT_ep[i].is_in = 0U;
 800120a:	fb06 4200 	mla	r2, r6, r0, r4
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800120e:	e9c2 115e 	strd	r1, r1, [r2, #376]	; 0x178
    hpcd->OUT_ep[i].is_in = 0U;
 8001212:	f882 1169 	strb.w	r1, [r2, #361]	; 0x169
    hpcd->OUT_ep[i].num = i;
 8001216:	f882 0168 	strb.w	r0, [r2, #360]	; 0x168
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800121a:	f882 116b 	strb.w	r1, [r2, #363]	; 0x16b
    hpcd->OUT_ep[i].xfer_len = 0U;
 800121e:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001222:	e7cb      	b.n	80011bc <HAL_PCD_Init+0x42>
    return HAL_ERROR;
 8001224:	2001      	movs	r0, #1
 8001226:	e7e0      	b.n	80011ea <HAL_PCD_Init+0x70>

08001228 <HAL_PCD_DataOutStageCallback>:
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataOutStageCallback could be implemented in the user file
   */
}
 8001228:	4770      	bx	lr

0800122a <HAL_PCD_DataInStageCallback>:
 800122a:	4770      	bx	lr

0800122c <HAL_PCD_SetupStageCallback>:
 800122c:	4770      	bx	lr

0800122e <HAL_PCD_SOFCallback>:
 800122e:	4770      	bx	lr

08001230 <HAL_PCD_ResetCallback>:
 8001230:	4770      	bx	lr

08001232 <HAL_PCD_SuspendCallback>:
 8001232:	4770      	bx	lr

08001234 <HAL_PCD_ResumeCallback>:
 8001234:	4770      	bx	lr

08001236 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001236:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8001238:	f890 22a8 	ldrb.w	r2, [r0, #680]	; 0x2a8
 800123c:	2a01      	cmp	r2, #1
{
 800123e:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8001240:	d00b      	beq.n	800125a <HAL_PCD_SetAddress+0x24>
 8001242:	2201      	movs	r2, #1
 8001244:	f880 22a8 	strb.w	r2, [r0, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001248:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800124c:	6800      	ldr	r0, [r0, #0]
 800124e:	f001 fbee 	bl	8002a2e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001252:	2000      	movs	r0, #0
 8001254:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8

  return HAL_OK;
}
 8001258:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800125a:	2002      	movs	r0, #2
 800125c:	e7fc      	b.n	8001258 <HAL_PCD_SetAddress+0x22>
	...

08001260 <HAL_PCD_IRQHandler>:
{
 8001260:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001264:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001266:	6800      	ldr	r0, [r0, #0]
 8001268:	f001 fbe7 	bl	8002a3a <USB_ReadInterrupts>
 800126c:	0402      	lsls	r2, r0, #16
 800126e:	d509      	bpl.n	8001284 <HAL_PCD_IRQHandler+0x24>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
      {
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001270:	f8df a7f4 	ldr.w	sl, [pc, #2036]	; 8001a68 <HAL_PCD_IRQHandler+0x808>
 8001274:	f8df 97f4 	ldr.w	r9, [pc, #2036]	; 8001a6c <HAL_PCD_IRQHandler+0x80c>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001278:	6820      	ldr	r0, [r4, #0]
 800127a:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 800127e:	041f      	lsls	r7, r3, #16
 8001280:	f100 8093 	bmi.w	80013aa <HAL_PCD_IRQHandler+0x14a>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001284:	6820      	ldr	r0, [r4, #0]
 8001286:	f001 fbd8 	bl	8002a3a <USB_ReadInterrupts>
 800128a:	0543      	lsls	r3, r0, #21
 800128c:	d50f      	bpl.n	80012ae <HAL_PCD_IRQHandler+0x4e>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800128e:	6822      	ldr	r2, [r4, #0]
 8001290:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001294:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001298:	041b      	lsls	r3, r3, #16
 800129a:	0c1b      	lsrs	r3, r3, #16
    HAL_PCD_ResetCallback(hpcd);
 800129c:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800129e:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 80012a2:	f7ff ffc5 	bl	8001230 <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80012a6:	2100      	movs	r1, #0
 80012a8:	4620      	mov	r0, r4
 80012aa:	f7ff ffc4 	bl	8001236 <HAL_PCD_SetAddress>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80012ae:	6820      	ldr	r0, [r4, #0]
 80012b0:	f001 fbc3 	bl	8002a3a <USB_ReadInterrupts>
 80012b4:	0446      	lsls	r6, r0, #17
 80012b6:	d508      	bpl.n	80012ca <HAL_PCD_IRQHandler+0x6a>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80012b8:	6822      	ldr	r2, [r4, #0]
 80012ba:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80012be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80012c2:	041b      	lsls	r3, r3, #16
 80012c4:	0c1b      	lsrs	r3, r3, #16
 80012c6:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80012ca:	6820      	ldr	r0, [r4, #0]
 80012cc:	f001 fbb5 	bl	8002a3a <USB_ReadInterrupts>
 80012d0:	0485      	lsls	r5, r0, #18
 80012d2:	d508      	bpl.n	80012e6 <HAL_PCD_IRQHandler+0x86>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80012d4:	6822      	ldr	r2, [r4, #0]
 80012d6:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80012da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80012de:	041b      	lsls	r3, r3, #16
 80012e0:	0c1b      	lsrs	r3, r3, #16
 80012e2:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80012e6:	6820      	ldr	r0, [r4, #0]
 80012e8:	f001 fba7 	bl	8002a3a <USB_ReadInterrupts>
 80012ec:	04c0      	lsls	r0, r0, #19
 80012ee:	d51c      	bpl.n	800132a <HAL_PCD_IRQHandler+0xca>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80012f0:	6822      	ldr	r2, [r4, #0]
 80012f2:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80012f6:	f023 0304 	bic.w	r3, r3, #4
 80012fa:	041b      	lsls	r3, r3, #16
 80012fc:	0c1b      	lsrs	r3, r3, #16
 80012fe:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001302:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8001306:	f023 0308 	bic.w	r3, r3, #8
 800130a:	041b      	lsls	r3, r3, #16
 800130c:	0c1b      	lsrs	r3, r3, #16
 800130e:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 8001312:	4620      	mov	r0, r4
 8001314:	f7ff ff8e 	bl	8001234 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001318:	6822      	ldr	r2, [r4, #0]
 800131a:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800131e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001322:	041b      	lsls	r3, r3, #16
 8001324:	0c1b      	lsrs	r3, r3, #16
 8001326:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800132a:	6820      	ldr	r0, [r4, #0]
 800132c:	f001 fb85 	bl	8002a3a <USB_ReadInterrupts>
 8001330:	0501      	lsls	r1, r0, #20
 8001332:	d519      	bpl.n	8001368 <HAL_PCD_IRQHandler+0x108>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001334:	6822      	ldr	r2, [r4, #0]
 8001336:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 800133a:	b29b      	uxth	r3, r3
 800133c:	f043 0308 	orr.w	r3, r3, #8
 8001340:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001344:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001348:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800134c:	041b      	lsls	r3, r3, #16
 800134e:	0c1b      	lsrs	r3, r3, #16
 8001350:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001354:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8001358:	b29b      	uxth	r3, r3
 800135a:	f043 0304 	orr.w	r3, r3, #4
 800135e:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 8001362:	4620      	mov	r0, r4
 8001364:	f7ff ff65 	bl	8001232 <HAL_PCD_SuspendCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001368:	6820      	ldr	r0, [r4, #0]
 800136a:	f001 fb66 	bl	8002a3a <USB_ReadInterrupts>
 800136e:	0582      	lsls	r2, r0, #22
 8001370:	d50b      	bpl.n	800138a <HAL_PCD_IRQHandler+0x12a>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001372:	6822      	ldr	r2, [r4, #0]
 8001374:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001378:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800137c:	041b      	lsls	r3, r3, #16
 800137e:	0c1b      	lsrs	r3, r3, #16
 8001380:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8001384:	4620      	mov	r0, r4
 8001386:	f7ff ff52 	bl	800122e <HAL_PCD_SOFCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800138a:	6820      	ldr	r0, [r4, #0]
 800138c:	f001 fb55 	bl	8002a3a <USB_ReadInterrupts>
 8001390:	05c3      	lsls	r3, r0, #23
 8001392:	d508      	bpl.n	80013a6 <HAL_PCD_IRQHandler+0x146>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001394:	6822      	ldr	r2, [r4, #0]
 8001396:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800139a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800139e:	041b      	lsls	r3, r3, #16
 80013a0:	0c1b      	lsrs	r3, r3, #16
 80013a2:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 80013a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    wIstr = hpcd->Instance->ISTR;
 80013aa:	f8b0 6044 	ldrh.w	r6, [r0, #68]	; 0x44
 80013ae:	b2b1      	uxth	r1, r6
    if (epindex == 0U)
 80013b0:	f016 060f 	ands.w	r6, r6, #15
 80013b4:	f040 80b6 	bne.w	8001524 <HAL_PCD_IRQHandler+0x2c4>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80013b8:	f011 0110 	ands.w	r1, r1, #16
 80013bc:	d12c      	bne.n	8001418 <HAL_PCD_IRQHandler+0x1b8>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80013be:	8803      	ldrh	r3, [r0, #0]
 80013c0:	b29b      	uxth	r3, r3
 80013c2:	ea03 030a 	and.w	r3, r3, sl
 80013c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013ca:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80013cc:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80013d0:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 80013d4:	f200 4002 	addw	r0, r0, #1026	; 0x402
 80013d8:	fa10 f383 	uxtah	r3, r0, r3
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80013dc:	4620      	mov	r0, r4
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80013de:	f833 3032 	ldrh.w	r3, [r3, r2, lsl #3]
        ep->xfer_buff += ep->xfer_count;
 80013e2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80013e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80013e8:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 80013ea:	4413      	add	r3, r2
 80013ec:	63e3      	str	r3, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80013ee:	f7ff ff1c 	bl	800122a <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80013f2:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	f43f af3e 	beq.w	8001278 <HAL_PCD_IRQHandler+0x18>
 80013fc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80013fe:	2a00      	cmp	r2, #0
 8001400:	f47f af3a 	bne.w	8001278 <HAL_PCD_IRQHandler+0x18>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001404:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8001408:	6821      	ldr	r1, [r4, #0]
 800140a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800140e:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001412:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 8001416:	e72f      	b.n	8001278 <HAL_PCD_IRQHandler+0x18>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001418:	8805      	ldrh	r5, [r0, #0]
 800141a:	b2ab      	uxth	r3, r5
        if ((wEPVal & USB_EP_SETUP) != 0U)
 800141c:	f415 6500 	ands.w	r5, r5, #2048	; 0x800
 8001420:	d020      	beq.n	8001464 <HAL_PCD_IRQHandler+0x204>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001422:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001426:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 800142a:	f200 4106 	addw	r1, r0, #1030	; 0x406
 800142e:	fa11 f383 	uxtah	r3, r1, r3
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001432:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
 8001436:	f833 3032 	ldrh.w	r3, [r3, r2, lsl #3]
 800143a:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 800143e:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001442:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001446:	f001 fdf5 	bl	8003034 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800144a:	6822      	ldr	r2, [r4, #0]
 800144c:	8813      	ldrh	r3, [r2, #0]
 800144e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001452:	051b      	lsls	r3, r3, #20
 8001454:	0d1b      	lsrs	r3, r3, #20
 8001456:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800145a:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 800145c:	4620      	mov	r0, r4
 800145e:	f7ff fee5 	bl	800122c <HAL_PCD_SetupStageCallback>
 8001462:	e709      	b.n	8001278 <HAL_PCD_IRQHandler+0x18>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001464:	041f      	lsls	r7, r3, #16
 8001466:	f57f af07 	bpl.w	8001278 <HAL_PCD_IRQHandler+0x18>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800146a:	8803      	ldrh	r3, [r0, #0]
 800146c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001470:	051b      	lsls	r3, r3, #20
 8001472:	0d1b      	lsrs	r3, r3, #20
 8001474:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001478:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800147a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800147e:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 8001482:	f200 4106 	addw	r1, r0, #1030	; 0x406
 8001486:	fa11 f383 	uxtah	r3, r1, r3
 800148a:	f833 3032 	ldrh.w	r3, [r3, r2, lsl #3]
 800148e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001492:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001496:	b18b      	cbz	r3, 80014bc <HAL_PCD_IRQHandler+0x25c>
 8001498:	f8d4 117c 	ldr.w	r1, [r4, #380]	; 0x17c
 800149c:	b171      	cbz	r1, 80014bc <HAL_PCD_IRQHandler+0x25c>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800149e:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 80014a2:	f001 fdc7 	bl	8003034 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 80014a6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80014aa:	f8d4 2184 	ldr.w	r2, [r4, #388]	; 0x184
 80014ae:	4413      	add	r3, r2
 80014b0:	f8c4 317c 	str.w	r3, [r4, #380]	; 0x17c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80014b4:	4629      	mov	r1, r5
 80014b6:	4620      	mov	r0, r4
 80014b8:	f7ff feb6 	bl	8001228 <HAL_PCD_DataOutStageCallback>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80014bc:	6821      	ldr	r1, [r4, #0]
 80014be:	f8d4 5178 	ldr.w	r5, [r4, #376]	; 0x178
 80014c2:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 80014c6:	f201 4006 	addw	r0, r1, #1030	; 0x406
 80014ca:	b29b      	uxth	r3, r3
 80014cc:	b9cd      	cbnz	r5, 8001502 <HAL_PCD_IRQHandler+0x2a2>
 80014ce:	5ac2      	ldrh	r2, [r0, r3]
 80014d0:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80014d4:	0412      	lsls	r2, r2, #16
 80014d6:	0c12      	lsrs	r2, r2, #16
 80014d8:	52c2      	strh	r2, [r0, r3]
 80014da:	5ac2      	ldrh	r2, [r0, r3]
 80014dc:	b292      	uxth	r2, r2
 80014de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80014e2:	52c2      	strh	r2, [r0, r3]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80014e4:	880b      	ldrh	r3, [r1, #0]
 80014e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80014ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80014ee:	041b      	lsls	r3, r3, #16
 80014f0:	0c1b      	lsrs	r3, r3, #16
 80014f2:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80014f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014fe:	800b      	strh	r3, [r1, #0]
 8001500:	e6ba      	b.n	8001278 <HAL_PCD_IRQHandler+0x18>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001502:	2d3e      	cmp	r5, #62	; 0x3e
 8001504:	d806      	bhi.n	8001514 <HAL_PCD_IRQHandler+0x2b4>
 8001506:	086a      	lsrs	r2, r5, #1
 8001508:	07ee      	lsls	r6, r5, #31
 800150a:	bf48      	it	mi
 800150c:	3201      	addmi	r2, #1
 800150e:	0292      	lsls	r2, r2, #10
 8001510:	b292      	uxth	r2, r2
 8001512:	e7e6      	b.n	80014e2 <HAL_PCD_IRQHandler+0x282>
 8001514:	096a      	lsrs	r2, r5, #5
 8001516:	06ed      	lsls	r5, r5, #27
 8001518:	bf08      	it	eq
 800151a:	f102 32ff 	addeq.w	r2, r2, #4294967295
 800151e:	ea49 2282 	orr.w	r2, r9, r2, lsl #10
 8001522:	e7f5      	b.n	8001510 <HAL_PCD_IRQHandler+0x2b0>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001524:	b237      	sxth	r7, r6
 8001526:	f830 3027 	ldrh.w	r3, [r0, r7, lsl #2]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800152a:	041a      	lsls	r2, r3, #16
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800152c:	fa1f f883 	uxth.w	r8, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001530:	f140 80f4 	bpl.w	800171c <HAL_PCD_IRQHandler+0x4bc>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001534:	f830 3027 	ldrh.w	r3, [r0, r7, lsl #2]
 8001538:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800153c:	051b      	lsls	r3, r3, #20
 800153e:	0d1b      	lsrs	r3, r3, #20
 8001540:	f043 0380 	orr.w	r3, r3, #128	; 0x80
        if (ep->doublebuffer == 0U)
 8001544:	2128      	movs	r1, #40	; 0x28
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001546:	f820 3027 	strh.w	r3, [r0, r7, lsl #2]
        if (ep->doublebuffer == 0U)
 800154a:	fb01 4106 	mla	r1, r1, r6, r4
 800154e:	f891 3174 	ldrb.w	r3, [r1, #372]	; 0x174
 8001552:	b9b3      	cbnz	r3, 8001582 <HAL_PCD_IRQHandler+0x322>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001554:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001558:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 800155c:	f200 4506 	addw	r5, r0, #1030	; 0x406
 8001560:	fa15 f383 	uxtah	r3, r5, r3
 8001564:	f833 5032 	ldrh.w	r5, [r3, r2, lsl #3]
 8001568:	f3c5 0509 	ubfx	r5, r5, #0, #10
          if (count != 0U)
 800156c:	2d00      	cmp	r5, #0
 800156e:	f000 80b9 	beq.w	80016e4 <HAL_PCD_IRQHandler+0x484>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001572:	f8b1 216e 	ldrh.w	r2, [r1, #366]	; 0x16e
 8001576:	462b      	mov	r3, r5
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001578:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 800157c:	f001 fd5a 	bl	8003034 <USB_ReadPMA>
 8001580:	e0b0      	b.n	80016e4 <HAL_PCD_IRQHandler+0x484>
          if (ep->type == EP_TYPE_BULK)
 8001582:	f891 316b 	ldrb.w	r3, [r1, #363]	; 0x16b
 8001586:	f891 c168 	ldrb.w	ip, [r1, #360]	; 0x168
 800158a:	2b02      	cmp	r3, #2
 800158c:	f040 8089 	bne.w	80016a2 <HAL_PCD_IRQHandler+0x442>

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001590:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001594:	f8d1 2180 	ldr.w	r2, [r1, #384]	; 0x180
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001598:	f418 4b80 	ands.w	fp, r8, #16384	; 0x4000
 800159c:	ea4f 05cc 	mov.w	r5, ip, lsl #3
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80015a0:	fa10 f383 	uxtah	r3, r0, r3
 80015a4:	f008 0e40 	and.w	lr, r8, #64	; 0x40
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80015a8:	d03e      	beq.n	8001628 <HAL_PCD_IRQHandler+0x3c8>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80015aa:	441d      	add	r5, r3
 80015ac:	f8b5 5402 	ldrh.w	r5, [r5, #1026]	; 0x402
 80015b0:	f3c5 0509 	ubfx	r5, r5, #0, #10

    if (ep->xfer_len >= count)
 80015b4:	4295      	cmp	r5, r2
 80015b6:	d913      	bls.n	80015e0 <HAL_PCD_IRQHandler+0x380>
 80015b8:	2300      	movs	r3, #0
 80015ba:	f8c1 3180 	str.w	r3, [r1, #384]	; 0x180
    }

    if (ep->xfer_len == 0U)
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80015be:	f830 302c 	ldrh.w	r3, [r0, ip, lsl #2]
 80015c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80015c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80015ca:	041b      	lsls	r3, r3, #16
 80015cc:	0c1b      	lsrs	r3, r3, #16
 80015ce:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80015d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015da:	f820 302c 	strh.w	r3, [r0, ip, lsl #2]
 80015de:	e004      	b.n	80015ea <HAL_PCD_IRQHandler+0x38a>
      ep->xfer_len -= count;
 80015e0:	1b52      	subs	r2, r2, r5
 80015e2:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    if (ep->xfer_len == 0U)
 80015e6:	2a00      	cmp	r2, #0
 80015e8:	d0e9      	beq.n	80015be <HAL_PCD_IRQHandler+0x35e>
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80015ea:	f1be 0f00 	cmp.w	lr, #0
 80015ee:	d012      	beq.n	8001616 <HAL_PCD_IRQHandler+0x3b6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80015f0:	2328      	movs	r3, #40	; 0x28
 80015f2:	fb03 4306 	mla	r3, r3, r6, r4
 80015f6:	f893 2168 	ldrb.w	r2, [r3, #360]	; 0x168
 80015fa:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80015fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001602:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001606:	041b      	lsls	r3, r3, #16
 8001608:	0c1b      	lsrs	r3, r3, #16
 800160a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800160e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001612:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }

    if (count != 0U)
 8001616:	2d00      	cmp	r5, #0
 8001618:	d064      	beq.n	80016e4 <HAL_PCD_IRQHandler+0x484>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800161a:	2128      	movs	r1, #40	; 0x28
 800161c:	fb01 4106 	mla	r1, r1, r6, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001620:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 8001624:	462b      	mov	r3, r5
 8001626:	e7a7      	b.n	8001578 <HAL_PCD_IRQHandler+0x318>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001628:	442b      	add	r3, r5
 800162a:	f8b3 5406 	ldrh.w	r5, [r3, #1030]	; 0x406
 800162e:	f3c5 0509 	ubfx	r5, r5, #0, #10

    if (ep->xfer_len >= count)
 8001632:	4295      	cmp	r5, r2
 8001634:	d912      	bls.n	800165c <HAL_PCD_IRQHandler+0x3fc>
 8001636:	f8c1 b180 	str.w	fp, [r1, #384]	; 0x180
    }

    if (ep->xfer_len == 0U)
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800163a:	f830 302c 	ldrh.w	r3, [r0, ip, lsl #2]
 800163e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001642:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001646:	041b      	lsls	r3, r3, #16
 8001648:	0c1b      	lsrs	r3, r3, #16
 800164a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800164e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001652:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001656:	f820 302c 	strh.w	r3, [r0, ip, lsl #2]
 800165a:	e004      	b.n	8001666 <HAL_PCD_IRQHandler+0x406>
      ep->xfer_len -= count;
 800165c:	1b52      	subs	r2, r2, r5
 800165e:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    if (ep->xfer_len == 0U)
 8001662:	2a00      	cmp	r2, #0
 8001664:	d0e9      	beq.n	800163a <HAL_PCD_IRQHandler+0x3da>
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001666:	f1be 0f00 	cmp.w	lr, #0
 800166a:	d112      	bne.n	8001692 <HAL_PCD_IRQHandler+0x432>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800166c:	2328      	movs	r3, #40	; 0x28
 800166e:	fb03 4306 	mla	r3, r3, r6, r4
 8001672:	f893 2168 	ldrb.w	r2, [r3, #360]	; 0x168
 8001676:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800167a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800167e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001682:	041b      	lsls	r3, r3, #16
 8001684:	0c1b      	lsrs	r3, r3, #16
 8001686:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800168a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800168e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }

    if (count != 0U)
 8001692:	b33d      	cbz	r5, 80016e4 <HAL_PCD_IRQHandler+0x484>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001694:	2128      	movs	r1, #40	; 0x28
 8001696:	fb01 4106 	mla	r1, r1, r6, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800169a:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 800169e:	462b      	mov	r3, r5
 80016a0:	e76a      	b.n	8001578 <HAL_PCD_IRQHandler+0x318>
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80016a2:	f830 302c 	ldrh.w	r3, [r0, ip, lsl #2]
 80016a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80016aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80016ae:	041b      	lsls	r3, r3, #16
 80016b0:	0c1b      	lsrs	r3, r3, #16
 80016b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016b6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80016ba:	f820 302c 	strh.w	r3, [r0, ip, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80016be:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 80016c2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80016c6:	f413 4f80 	tst.w	r3, #16384	; 0x4000
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80016ca:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80016ce:	d059      	beq.n	8001784 <HAL_PCD_IRQHandler+0x524>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80016d0:	f200 4502 	addw	r5, r0, #1026	; 0x402
 80016d4:	fa15 f383 	uxtah	r3, r5, r3
 80016d8:	f833 5032 	ldrh.w	r5, [r3, r2, lsl #3]
 80016dc:	f3c5 0509 	ubfx	r5, r5, #0, #10
              if (count != 0U)
 80016e0:	2d00      	cmp	r5, #0
 80016e2:	d19d      	bne.n	8001620 <HAL_PCD_IRQHandler+0x3c0>
        ep->xfer_count += count;
 80016e4:	2128      	movs	r1, #40	; 0x28
 80016e6:	fb01 4306 	mla	r3, r1, r6, r4
 80016ea:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 80016ee:	442a      	add	r2, r5
 80016f0:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
        ep->xfer_buff += count;
 80016f4:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 80016f8:	442a      	add	r2, r5
 80016fa:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80016fe:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 8001702:	b11a      	cbz	r2, 800170c <HAL_PCD_IRQHandler+0x4ac>
 8001704:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8001708:	429d      	cmp	r5, r3
 800170a:	d246      	bcs.n	800179a <HAL_PCD_IRQHandler+0x53a>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800170c:	2328      	movs	r3, #40	; 0x28
 800170e:	fb03 4306 	mla	r3, r3, r6, r4
 8001712:	4620      	mov	r0, r4
 8001714:	f893 1168 	ldrb.w	r1, [r3, #360]	; 0x168
 8001718:	f7ff fd86 	bl	8001228 <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800171c:	f018 0f80 	tst.w	r8, #128	; 0x80
 8001720:	f43f adaa 	beq.w	8001278 <HAL_PCD_IRQHandler+0x18>
 8001724:	6820      	ldr	r0, [r4, #0]
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001726:	f830 3027 	ldrh.w	r3, [r0, r7, lsl #2]
 800172a:	b29b      	uxth	r3, r3
 800172c:	ea03 030a 	and.w	r3, r3, sl
 8001730:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001734:	f820 3027 	strh.w	r3, [r0, r7, lsl #2]
        if ((ep->type != EP_TYPE_BULK) ||
 8001738:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 800173c:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
 8001740:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001744:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8001748:	2b02      	cmp	r3, #2
 800174a:	d102      	bne.n	8001752 <HAL_PCD_IRQHandler+0x4f2>
 800174c:	f418 7f80 	tst.w	r8, #256	; 0x100
 8001750:	d13c      	bne.n	80017cc <HAL_PCD_IRQHandler+0x56c>
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001752:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8001756:	f200 4e02 	addw	lr, r0, #1026	; 0x402
          if (ep->xfer_len > TxByteNbre)
 800175a:	f04f 0c28 	mov.w	ip, #40	; 0x28
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800175e:	fa1e f282 	uxtah	r2, lr, r2
          if (ep->xfer_len > TxByteNbre)
 8001762:	fb0c 4306 	mla	r3, ip, r6, r4
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001766:	f832 2031 	ldrh.w	r2, [r2, r1, lsl #3]
          if (ep->xfer_len > TxByteNbre)
 800176a:	6c1d      	ldr	r5, [r3, #64]	; 0x40
 800176c:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001770:	4295      	cmp	r5, r2
 8001772:	d81a      	bhi.n	80017aa <HAL_PCD_IRQHandler+0x54a>
 8001774:	2200      	movs	r2, #0
 8001776:	641a      	str	r2, [r3, #64]	; 0x40
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001778:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 800177c:	4620      	mov	r0, r4
 800177e:	f7ff fd54 	bl	800122a <HAL_PCD_DataInStageCallback>
 8001782:	e579      	b.n	8001278 <HAL_PCD_IRQHandler+0x18>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001784:	f200 4506 	addw	r5, r0, #1030	; 0x406
 8001788:	fa15 f383 	uxtah	r3, r5, r3
 800178c:	f833 5032 	ldrh.w	r5, [r3, r2, lsl #3]
 8001790:	f3c5 0509 	ubfx	r5, r5, #0, #10
              if (count != 0U)
 8001794:	2d00      	cmp	r5, #0
 8001796:	d0a5      	beq.n	80016e4 <HAL_PCD_IRQHandler+0x484>
 8001798:	e77f      	b.n	800169a <HAL_PCD_IRQHandler+0x43a>
        ep = &hpcd->OUT_ep[epindex];
 800179a:	fb01 4106 	mla	r1, r1, r6, r4
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800179e:	6820      	ldr	r0, [r4, #0]
 80017a0:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 80017a4:	f001 f95c 	bl	8002a60 <USB_EPStartXfer>
 80017a8:	e7b8      	b.n	800171c <HAL_PCD_IRQHandler+0x4bc>
            ep->xfer_len -= TxByteNbre;
 80017aa:	1aad      	subs	r5, r5, r2
 80017ac:	641d      	str	r5, [r3, #64]	; 0x40
          if (ep->xfer_len == 0U)
 80017ae:	2d00      	cmp	r5, #0
 80017b0:	d0e2      	beq.n	8001778 <HAL_PCD_IRQHandler+0x518>
            ep->xfer_buff += TxByteNbre;
 80017b2:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 80017b4:	4415      	add	r5, r2
 80017b6:	63dd      	str	r5, [r3, #60]	; 0x3c
            ep->xfer_count += TxByteNbre;
 80017b8:	6c5d      	ldr	r5, [r3, #68]	; 0x44
        ep = &hpcd->IN_ep[epindex];
 80017ba:	fb06 cc0c 	mla	ip, r6, ip, ip
            ep->xfer_count += TxByteNbre;
 80017be:	442a      	add	r2, r5
 80017c0:	645a      	str	r2, [r3, #68]	; 0x44
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80017c2:	eb04 010c 	add.w	r1, r4, ip
 80017c6:	f001 f94b 	bl	8002a60 <USB_EPStartXfer>
 80017ca:	e555      	b.n	8001278 <HAL_PCD_IRQHandler+0x18>
 80017cc:	2328      	movs	r3, #40	; 0x28
 80017ce:	fb03 4306 	mla	r3, r3, r6, r4
{
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80017d2:	f018 0b40 	ands.w	fp, r8, #64	; 0x40
 80017d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80017d8:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80017dc:	fa0f fe81 	sxth.w	lr, r1
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80017e0:	f408 4580 	and.w	r5, r8, #16384	; 0x4000
 80017e4:	f000 80a2 	beq.w	800192c <HAL_PCD_IRQHandler+0x6cc>
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80017e8:	f200 4c02 	addw	ip, r0, #1026	; 0x402
 80017ec:	fa1c f282 	uxtah	r2, ip, r2
 80017f0:	f04f 0828 	mov.w	r8, #40	; 0x28
 80017f4:	f832 203e 	ldrh.w	r2, [r2, lr, lsl #3]

    if (ep->xfer_len > TxByteNbre)
 80017f8:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80017fc:	429a      	cmp	r2, r3
    {
      ep->xfer_len -= TxByteNbre;
 80017fe:	fb08 4806 	mla	r8, r8, r6, r4
 8001802:	bf34      	ite	cc
 8001804:	1a9b      	subcc	r3, r3, r2
    }
    else
    {
      ep->xfer_len = 0U;
 8001806:	2300      	movcs	r3, #0
 8001808:	f8c8 3040 	str.w	r3, [r8, #64]	; 0x40
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800180c:	b2ad      	uxth	r5, r5
 800180e:	b9bb      	cbnz	r3, 8001840 <HAL_PCD_IRQHandler+0x5e0>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001810:	4620      	mov	r0, r4
 8001812:	f7ff fd0a 	bl	800122a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001816:	2d00      	cmp	r5, #0
 8001818:	f000 80a2 	beq.w	8001960 <HAL_PCD_IRQHandler+0x700>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800181c:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8001820:	6822      	ldr	r2, [r4, #0]
 8001822:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8001826:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800182a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800182e:	041b      	lsls	r3, r3, #16
 8001830:	0c1b      	lsrs	r3, r3, #16
 8001832:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001836:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800183a:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 800183e:	e08f      	b.n	8001960 <HAL_PCD_IRQHandler+0x700>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001840:	b16d      	cbz	r5, 800185e <HAL_PCD_IRQHandler+0x5fe>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001842:	f830 302e 	ldrh.w	r3, [r0, lr, lsl #2]
 8001846:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800184a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800184e:	041b      	lsls	r3, r3, #16
 8001850:	0c1b      	lsrs	r3, r3, #16
 8001852:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001856:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800185a:	f820 302e 	strh.w	r3, [r0, lr, lsl #2]
      if (ep->xfer_fill_db == 1U)
 800185e:	2528      	movs	r5, #40	; 0x28
 8001860:	fb05 4506 	mla	r5, r5, r6, r4
 8001864:	f895 304c 	ldrb.w	r3, [r5, #76]	; 0x4c
 8001868:	2b01      	cmp	r3, #1
 800186a:	d179      	bne.n	8001960 <HAL_PCD_IRQHandler+0x700>
        ep->xfer_count += TxByteNbre;
 800186c:	6c6b      	ldr	r3, [r5, #68]	; 0x44
        ep->xfer_buff += TxByteNbre;
 800186e:	6be9      	ldr	r1, [r5, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 8001870:	f8d5 e048 	ldr.w	lr, [r5, #72]	; 0x48
        ep->xfer_count += TxByteNbre;
 8001874:	4413      	add	r3, r2
 8001876:	646b      	str	r3, [r5, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 8001878:	6bab      	ldr	r3, [r5, #56]	; 0x38
        ep->xfer_buff += TxByteNbre;
 800187a:	4411      	add	r1, r2
        if (ep->xfer_len_db >= ep->maxpacket)
 800187c:	459e      	cmp	lr, r3
        ep->xfer_buff += TxByteNbre;
 800187e:	63e9      	str	r1, [r5, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 8001880:	d327      	bcc.n	80018d2 <HAL_PCD_IRQHandler+0x672>
          ep->xfer_len_db -= len;
 8001882:	ebae 0203 	sub.w	r2, lr, r3
 8001886:	64aa      	str	r2, [r5, #72]	; 0x48
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001888:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 800188c:	b29d      	uxth	r5, r3
 800188e:	2a00      	cmp	r2, #0
 8001890:	d13f      	bne.n	8001912 <HAL_PCD_IRQHandler+0x6b2>
 8001892:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8001896:	f897 e028 	ldrb.w	lr, [r7, #40]	; 0x28
 800189a:	fa1c fc82 	uxtah	ip, ip, r2
 800189e:	eb0c 0cce 	add.w	ip, ip, lr, lsl #3
 80018a2:	bb1b      	cbnz	r3, 80018ec <HAL_PCD_IRQHandler+0x68c>
 80018a4:	f8bc 3000 	ldrh.w	r3, [ip]
 80018a8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80018ac:	041b      	lsls	r3, r3, #16
 80018ae:	0c1b      	lsrs	r3, r3, #16
 80018b0:	f8ac 3000 	strh.w	r3, [ip]
 80018b4:	f8bc 3000 	ldrh.w	r3, [ip]
 80018b8:	b29b      	uxth	r3, r3
 80018ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018be:	f8ac 3000 	strh.w	r3, [ip]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80018c2:	2328      	movs	r3, #40	; 0x28
 80018c4:	fb03 4606 	mla	r6, r3, r6, r4
 80018c8:	462b      	mov	r3, r5
 80018ca:	8e32      	ldrh	r2, [r6, #48]	; 0x30

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80018cc:	f001 f8b9 	bl	8002a42 <USB_WritePMA>
 80018d0:	e046      	b.n	8001960 <HAL_PCD_IRQHandler+0x700>
        else if (ep->xfer_len_db == 0U)
 80018d2:	f1be 0f00 	cmp.w	lr, #0
 80018d6:	d103      	bne.n	80018e0 <HAL_PCD_IRQHandler+0x680>
          ep->xfer_fill_db = 0U;
 80018d8:	f885 e04c 	strb.w	lr, [r5, #76]	; 0x4c
    if (ep->xfer_len > TxByteNbre)
 80018dc:	4613      	mov	r3, r2
 80018de:	e7d3      	b.n	8001888 <HAL_PCD_IRQHandler+0x628>
          ep->xfer_fill_db = 0U;
 80018e0:	2300      	movs	r3, #0
 80018e2:	f885 304c 	strb.w	r3, [r5, #76]	; 0x4c
          ep->xfer_len_db = 0U;
 80018e6:	64ab      	str	r3, [r5, #72]	; 0x48
 80018e8:	4673      	mov	r3, lr
 80018ea:	e7cd      	b.n	8001888 <HAL_PCD_IRQHandler+0x628>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80018ec:	2b3e      	cmp	r3, #62	; 0x3e
 80018ee:	d808      	bhi.n	8001902 <HAL_PCD_IRQHandler+0x6a2>
 80018f0:	085a      	lsrs	r2, r3, #1
 80018f2:	07db      	lsls	r3, r3, #31
 80018f4:	bf48      	it	mi
 80018f6:	3201      	addmi	r2, #1
 80018f8:	0292      	lsls	r2, r2, #10
 80018fa:	b292      	uxth	r2, r2
 80018fc:	f8ac 2000 	strh.w	r2, [ip]
 8001900:	e7df      	b.n	80018c2 <HAL_PCD_IRQHandler+0x662>
 8001902:	095a      	lsrs	r2, r3, #5
 8001904:	06db      	lsls	r3, r3, #27
 8001906:	bf08      	it	eq
 8001908:	f102 32ff 	addeq.w	r2, r2, #4294967295
 800190c:	ea49 2282 	orr.w	r2, r9, r2, lsl #10
 8001910:	e7f3      	b.n	80018fa <HAL_PCD_IRQHandler+0x69a>
 8001912:	2a01      	cmp	r2, #1
 8001914:	d1d5      	bne.n	80018c2 <HAL_PCD_IRQHandler+0x662>
 8001916:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800191a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800191e:	fa1c fc83 	uxtah	ip, ip, r3
 8001922:	eb0c 0cc2 	add.w	ip, ip, r2, lsl #3
 8001926:	f8ac 5000 	strh.w	r5, [ip]
 800192a:	e7ca      	b.n	80018c2 <HAL_PCD_IRQHandler+0x662>
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800192c:	f200 4c06 	addw	ip, r0, #1030	; 0x406
 8001930:	fa1c f282 	uxtah	r2, ip, r2
 8001934:	f04f 0828 	mov.w	r8, #40	; 0x28
 8001938:	f832 203e 	ldrh.w	r2, [r2, lr, lsl #3]
    if (ep->xfer_len >= TxByteNbre)
 800193c:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001940:	429a      	cmp	r2, r3
      ep->xfer_len -= TxByteNbre;
 8001942:	fb08 4806 	mla	r8, r8, r6, r4
 8001946:	bf94      	ite	ls
 8001948:	1a9b      	subls	r3, r3, r2
      ep->xfer_len = 0U;
 800194a:	465b      	movhi	r3, fp
 800194c:	f8c8 3040 	str.w	r3, [r8, #64]	; 0x40
    if (ep->xfer_len == 0U)
 8001950:	b2ad      	uxth	r5, r5
 8001952:	b9c3      	cbnz	r3, 8001986 <HAL_PCD_IRQHandler+0x726>
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001954:	4620      	mov	r0, r4
 8001956:	f7ff fc68 	bl	800122a <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800195a:	2d00      	cmp	r5, #0
 800195c:	f43f af5e 	beq.w	800181c <HAL_PCD_IRQHandler+0x5bc>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8001960:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8001964:	6822      	ldr	r2, [r4, #0]
 8001966:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800196a:	b29b      	uxth	r3, r3
 800196c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001970:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001974:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8001978:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800197c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001980:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 8001984:	e478      	b.n	8001278 <HAL_PCD_IRQHandler+0x18>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8001986:	b96d      	cbnz	r5, 80019a4 <HAL_PCD_IRQHandler+0x744>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001988:	f830 302e 	ldrh.w	r3, [r0, lr, lsl #2]
 800198c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001990:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001994:	041b      	lsls	r3, r3, #16
 8001996:	0c1b      	lsrs	r3, r3, #16
 8001998:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800199c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019a0:	f820 302e 	strh.w	r3, [r0, lr, lsl #2]
      if (ep->xfer_fill_db == 1U)
 80019a4:	2328      	movs	r3, #40	; 0x28
 80019a6:	fb03 4306 	mla	r3, r3, r6, r4
 80019aa:	f893 104c 	ldrb.w	r1, [r3, #76]	; 0x4c
 80019ae:	2901      	cmp	r1, #1
 80019b0:	d1d6      	bne.n	8001960 <HAL_PCD_IRQHandler+0x700>
        ep->xfer_count += TxByteNbre;
 80019b2:	6c5d      	ldr	r5, [r3, #68]	; 0x44
        ep->xfer_buff += TxByteNbre;
 80019b4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 80019b6:	f8d3 e048 	ldr.w	lr, [r3, #72]	; 0x48
        ep->xfer_count += TxByteNbre;
 80019ba:	4415      	add	r5, r2
 80019bc:	645d      	str	r5, [r3, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 80019be:	6b9d      	ldr	r5, [r3, #56]	; 0x38
        ep->xfer_buff += TxByteNbre;
 80019c0:	4411      	add	r1, r2
        if (ep->xfer_len_db >= ep->maxpacket)
 80019c2:	45ae      	cmp	lr, r5
        ep->xfer_buff += TxByteNbre;
 80019c4:	63d9      	str	r1, [r3, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 80019c6:	d324      	bcc.n	8001a12 <HAL_PCD_IRQHandler+0x7b2>
          ep->xfer_len_db -= len;
 80019c8:	ebae 0205 	sub.w	r2, lr, r5
 80019cc:	649a      	str	r2, [r3, #72]	; 0x48
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80019ce:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 80019d2:	b2ab      	uxth	r3, r5
 80019d4:	2a00      	cmp	r2, #0
 80019d6:	d13a      	bne.n	8001a4e <HAL_PCD_IRQHandler+0x7ee>
 80019d8:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80019dc:	f897 e028 	ldrb.w	lr, [r7, #40]	; 0x28
 80019e0:	fa1c fc82 	uxtah	ip, ip, r2
 80019e4:	eb0c 0cce 	add.w	ip, ip, lr, lsl #3
 80019e8:	bb05      	cbnz	r5, 8001a2c <HAL_PCD_IRQHandler+0x7cc>
 80019ea:	f8bc 2000 	ldrh.w	r2, [ip]
 80019ee:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80019f2:	0412      	lsls	r2, r2, #16
 80019f4:	0c12      	lsrs	r2, r2, #16
 80019f6:	f8ac 2000 	strh.w	r2, [ip]
 80019fa:	f8bc 2000 	ldrh.w	r2, [ip]
 80019fe:	b292      	uxth	r2, r2
 8001a00:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a04:	f8ac 2000 	strh.w	r2, [ip]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8001a08:	2228      	movs	r2, #40	; 0x28
 8001a0a:	fb02 4606 	mla	r6, r2, r6, r4
 8001a0e:	8e72      	ldrh	r2, [r6, #50]	; 0x32
 8001a10:	e75c      	b.n	80018cc <HAL_PCD_IRQHandler+0x66c>
        else if (ep->xfer_len_db == 0U)
 8001a12:	f1be 0f00 	cmp.w	lr, #0
 8001a16:	d103      	bne.n	8001a20 <HAL_PCD_IRQHandler+0x7c0>
          ep->xfer_fill_db = 0U;
 8001a18:	f883 e04c 	strb.w	lr, [r3, #76]	; 0x4c
    if (ep->xfer_len >= TxByteNbre)
 8001a1c:	4615      	mov	r5, r2
 8001a1e:	e7d6      	b.n	80019ce <HAL_PCD_IRQHandler+0x76e>
          ep->xfer_len_db = 0U;
 8001a20:	2200      	movs	r2, #0
 8001a22:	649a      	str	r2, [r3, #72]	; 0x48
          ep->xfer_fill_db = 0;
 8001a24:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8001a28:	4675      	mov	r5, lr
 8001a2a:	e7d0      	b.n	80019ce <HAL_PCD_IRQHandler+0x76e>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001a2c:	2d3e      	cmp	r5, #62	; 0x3e
 8001a2e:	d806      	bhi.n	8001a3e <HAL_PCD_IRQHandler+0x7de>
 8001a30:	086a      	lsrs	r2, r5, #1
 8001a32:	07ed      	lsls	r5, r5, #31
 8001a34:	bf48      	it	mi
 8001a36:	3201      	addmi	r2, #1
 8001a38:	0292      	lsls	r2, r2, #10
 8001a3a:	b292      	uxth	r2, r2
 8001a3c:	e7e2      	b.n	8001a04 <HAL_PCD_IRQHandler+0x7a4>
 8001a3e:	096a      	lsrs	r2, r5, #5
 8001a40:	06ed      	lsls	r5, r5, #27
 8001a42:	bf08      	it	eq
 8001a44:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8001a48:	ea49 2282 	orr.w	r2, r9, r2, lsl #10
 8001a4c:	e7f5      	b.n	8001a3a <HAL_PCD_IRQHandler+0x7da>
 8001a4e:	2a01      	cmp	r2, #1
 8001a50:	d1da      	bne.n	8001a08 <HAL_PCD_IRQHandler+0x7a8>
 8001a52:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8001a56:	f897 5028 	ldrb.w	r5, [r7, #40]	; 0x28
 8001a5a:	fa1c fc82 	uxtah	ip, ip, r2
 8001a5e:	eb0c 0cc5 	add.w	ip, ip, r5, lsl #3
 8001a62:	f8ac 3000 	strh.w	r3, [ip]
 8001a66:	e7cf      	b.n	8001a08 <HAL_PCD_IRQHandler+0x7a8>
 8001a68:	ffff8f0f 	.word	0xffff8f0f
 8001a6c:	ffff8000 	.word	0xffff8000

08001a70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a70:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a74:	4605      	mov	r5, r0
 8001a76:	2800      	cmp	r0, #0
 8001a78:	d038      	beq.n	8001aec <HAL_RCC_OscConfig+0x7c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a7a:	6803      	ldr	r3, [r0, #0]
 8001a7c:	07df      	lsls	r7, r3, #31
 8001a7e:	d411      	bmi.n	8001aa4 <HAL_RCC_OscConfig+0x34>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a80:	682b      	ldr	r3, [r5, #0]
 8001a82:	079e      	lsls	r6, r3, #30
 8001a84:	f100 808b 	bmi.w	8001b9e <HAL_RCC_OscConfig+0x12e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a88:	682b      	ldr	r3, [r5, #0]
 8001a8a:	071c      	lsls	r4, r3, #28
 8001a8c:	f100 80fe 	bmi.w	8001c8c <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a90:	682b      	ldr	r3, [r5, #0]
 8001a92:	0758      	lsls	r0, r3, #29
 8001a94:	f100 8147 	bmi.w	8001d26 <HAL_RCC_OscConfig+0x2b6>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a98:	69a8      	ldr	r0, [r5, #24]
 8001a9a:	2800      	cmp	r0, #0
 8001a9c:	f040 81dd 	bne.w	8001e5a <HAL_RCC_OscConfig+0x3ea>
        }
      }
    }
  }

  return HAL_OK;
 8001aa0:	2000      	movs	r0, #0
 8001aa2:	e047      	b.n	8001b34 <HAL_RCC_OscConfig+0xc4>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001aa4:	4cbd      	ldr	r4, [pc, #756]	; (8001d9c <HAL_RCC_OscConfig+0x32c>)
 8001aa6:	6863      	ldr	r3, [r4, #4]
 8001aa8:	f003 030c 	and.w	r3, r3, #12
 8001aac:	2b04      	cmp	r3, #4
 8001aae:	d00a      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x56>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ab0:	6863      	ldr	r3, [r4, #4]
 8001ab2:	f003 030c 	and.w	r3, r3, #12
 8001ab6:	2b08      	cmp	r3, #8
 8001ab8:	d11a      	bne.n	8001af0 <HAL_RCC_OscConfig+0x80>
 8001aba:	6863      	ldr	r3, [r4, #4]
 8001abc:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001ac0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ac4:	d114      	bne.n	8001af0 <HAL_RCC_OscConfig+0x80>
 8001ac6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001aca:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ace:	6821      	ldr	r1, [r4, #0]
 8001ad0:	fa93 f3a3 	rbit	r3, r3
 8001ad4:	fab3 f383 	clz	r3, r3
 8001ad8:	f003 031f 	and.w	r3, r3, #31
 8001adc:	2201      	movs	r2, #1
 8001ade:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae2:	420b      	tst	r3, r1
 8001ae4:	d0cc      	beq.n	8001a80 <HAL_RCC_OscConfig+0x10>
 8001ae6:	686b      	ldr	r3, [r5, #4]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d1c9      	bne.n	8001a80 <HAL_RCC_OscConfig+0x10>
          return HAL_ERROR;
 8001aec:	2001      	movs	r0, #1
 8001aee:	e021      	b.n	8001b34 <HAL_RCC_OscConfig+0xc4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001af0:	686b      	ldr	r3, [r5, #4]
 8001af2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001af6:	d120      	bne.n	8001b3a <HAL_RCC_OscConfig+0xca>
 8001af8:	6823      	ldr	r3, [r4, #0]
 8001afa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001afe:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001b00:	f7fe ff00 	bl	8000904 <HAL_GetTick>
 8001b04:	f44f 3700 	mov.w	r7, #131072	; 0x20000
 8001b08:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b0a:	f04f 0801 	mov.w	r8, #1
 8001b0e:	fa97 f3a7 	rbit	r3, r7
 8001b12:	6822      	ldr	r2, [r4, #0]
 8001b14:	fa97 f3a7 	rbit	r3, r7
 8001b18:	fab3 f383 	clz	r3, r3
 8001b1c:	f003 031f 	and.w	r3, r3, #31
 8001b20:	fa08 f303 	lsl.w	r3, r8, r3
 8001b24:	4213      	tst	r3, r2
 8001b26:	d1ab      	bne.n	8001a80 <HAL_RCC_OscConfig+0x10>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b28:	f7fe feec 	bl	8000904 <HAL_GetTick>
 8001b2c:	1b83      	subs	r3, r0, r6
 8001b2e:	2b64      	cmp	r3, #100	; 0x64
 8001b30:	d9ed      	bls.n	8001b0e <HAL_RCC_OscConfig+0x9e>
            return HAL_TIMEOUT;
 8001b32:	2003      	movs	r0, #3
}
 8001b34:	b002      	add	sp, #8
 8001b36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b3a:	bb0b      	cbnz	r3, 8001b80 <HAL_RCC_OscConfig+0x110>
 8001b3c:	6823      	ldr	r3, [r4, #0]
 8001b3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b42:	6023      	str	r3, [r4, #0]
 8001b44:	6823      	ldr	r3, [r4, #0]
 8001b46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b4a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001b4c:	f7fe feda 	bl	8000904 <HAL_GetTick>
 8001b50:	f44f 3700 	mov.w	r7, #131072	; 0x20000
 8001b54:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b56:	f04f 0801 	mov.w	r8, #1
 8001b5a:	fa97 f3a7 	rbit	r3, r7
 8001b5e:	6822      	ldr	r2, [r4, #0]
 8001b60:	fa97 f3a7 	rbit	r3, r7
 8001b64:	fab3 f383 	clz	r3, r3
 8001b68:	f003 031f 	and.w	r3, r3, #31
 8001b6c:	fa08 f303 	lsl.w	r3, r8, r3
 8001b70:	4213      	tst	r3, r2
 8001b72:	d085      	beq.n	8001a80 <HAL_RCC_OscConfig+0x10>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b74:	f7fe fec6 	bl	8000904 <HAL_GetTick>
 8001b78:	1b83      	subs	r3, r0, r6
 8001b7a:	2b64      	cmp	r3, #100	; 0x64
 8001b7c:	d9ed      	bls.n	8001b5a <HAL_RCC_OscConfig+0xea>
 8001b7e:	e7d8      	b.n	8001b32 <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b84:	6823      	ldr	r3, [r4, #0]
 8001b86:	d103      	bne.n	8001b90 <HAL_RCC_OscConfig+0x120>
 8001b88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b8c:	6023      	str	r3, [r4, #0]
 8001b8e:	e7b3      	b.n	8001af8 <HAL_RCC_OscConfig+0x88>
 8001b90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b94:	6023      	str	r3, [r4, #0]
 8001b96:	6823      	ldr	r3, [r4, #0]
 8001b98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b9c:	e7af      	b.n	8001afe <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001b9e:	4c7f      	ldr	r4, [pc, #508]	; (8001d9c <HAL_RCC_OscConfig+0x32c>)
 8001ba0:	6863      	ldr	r3, [r4, #4]
 8001ba2:	f013 0f0c 	tst.w	r3, #12
 8001ba6:	d00a      	beq.n	8001bbe <HAL_RCC_OscConfig+0x14e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001ba8:	6863      	ldr	r3, [r4, #4]
 8001baa:	f003 030c 	and.w	r3, r3, #12
 8001bae:	2b08      	cmp	r3, #8
 8001bb0:	d124      	bne.n	8001bfc <HAL_RCC_OscConfig+0x18c>
 8001bb2:	6863      	ldr	r3, [r4, #4]
 8001bb4:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001bb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001bbc:	d11e      	bne.n	8001bfc <HAL_RCC_OscConfig+0x18c>
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bc4:	6821      	ldr	r1, [r4, #0]
 8001bc6:	fa93 f3a3 	rbit	r3, r3
 8001bca:	fab3 f383 	clz	r3, r3
 8001bce:	f003 031f 	and.w	r3, r3, #31
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd8:	420b      	tst	r3, r1
 8001bda:	d002      	beq.n	8001be2 <HAL_RCC_OscConfig+0x172>
 8001bdc:	68eb      	ldr	r3, [r5, #12]
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d184      	bne.n	8001aec <HAL_RCC_OscConfig+0x7c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001be2:	6821      	ldr	r1, [r4, #0]
 8001be4:	23f8      	movs	r3, #248	; 0xf8
 8001be6:	fa93 f3a3 	rbit	r3, r3
 8001bea:	fab3 f283 	clz	r2, r3
 8001bee:	692b      	ldr	r3, [r5, #16]
 8001bf0:	4093      	lsls	r3, r2
 8001bf2:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	6023      	str	r3, [r4, #0]
 8001bfa:	e745      	b.n	8001a88 <HAL_RCC_OscConfig+0x18>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bfc:	68ea      	ldr	r2, [r5, #12]
 8001bfe:	2601      	movs	r6, #1
 8001c00:	b30a      	cbz	r2, 8001c46 <HAL_RCC_OscConfig+0x1d6>
 8001c02:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_ENABLE();
 8001c06:	fab3 f383 	clz	r3, r3
 8001c0a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c0e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	f04f 0802 	mov.w	r8, #2
 8001c18:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8001c1a:	f7fe fe73 	bl	8000904 <HAL_GetTick>
 8001c1e:	4607      	mov	r7, r0
 8001c20:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c24:	6822      	ldr	r2, [r4, #0]
 8001c26:	fa98 f3a8 	rbit	r3, r8
 8001c2a:	fab3 f383 	clz	r3, r3
 8001c2e:	f003 031f 	and.w	r3, r3, #31
 8001c32:	fa06 f303 	lsl.w	r3, r6, r3
 8001c36:	4213      	tst	r3, r2
 8001c38:	d1d3      	bne.n	8001be2 <HAL_RCC_OscConfig+0x172>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c3a:	f7fe fe63 	bl	8000904 <HAL_GetTick>
 8001c3e:	1bc3      	subs	r3, r0, r7
 8001c40:	2b02      	cmp	r3, #2
 8001c42:	d9ed      	bls.n	8001c20 <HAL_RCC_OscConfig+0x1b0>
 8001c44:	e775      	b.n	8001b32 <HAL_RCC_OscConfig+0xc2>
 8001c46:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 8001c4a:	fab3 f383 	clz	r3, r3
 8001c4e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c52:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	f04f 0802 	mov.w	r8, #2
 8001c5c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001c5e:	f7fe fe51 	bl	8000904 <HAL_GetTick>
 8001c62:	4607      	mov	r7, r0
 8001c64:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c68:	6822      	ldr	r2, [r4, #0]
 8001c6a:	fa98 f3a8 	rbit	r3, r8
 8001c6e:	fab3 f383 	clz	r3, r3
 8001c72:	f003 031f 	and.w	r3, r3, #31
 8001c76:	fa06 f303 	lsl.w	r3, r6, r3
 8001c7a:	4213      	tst	r3, r2
 8001c7c:	f43f af04 	beq.w	8001a88 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c80:	f7fe fe40 	bl	8000904 <HAL_GetTick>
 8001c84:	1bc3      	subs	r3, r0, r7
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d9ec      	bls.n	8001c64 <HAL_RCC_OscConfig+0x1f4>
 8001c8a:	e752      	b.n	8001b32 <HAL_RCC_OscConfig+0xc2>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c8c:	696a      	ldr	r2, [r5, #20]
 8001c8e:	4e43      	ldr	r6, [pc, #268]	; (8001d9c <HAL_RCC_OscConfig+0x32c>)
 8001c90:	4943      	ldr	r1, [pc, #268]	; (8001da0 <HAL_RCC_OscConfig+0x330>)
 8001c92:	2401      	movs	r4, #1
 8001c94:	b31a      	cbz	r2, 8001cde <HAL_RCC_OscConfig+0x26e>
 8001c96:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_ENABLE();
 8001c9a:	fab3 f383 	clz	r3, r3
 8001c9e:	440b      	add	r3, r1
 8001ca0:	009b      	lsls	r3, r3, #2
 8001ca2:	2702      	movs	r7, #2
 8001ca4:	601c      	str	r4, [r3, #0]
      tickstart = HAL_GetTick();
 8001ca6:	f7fe fe2d 	bl	8000904 <HAL_GetTick>
 8001caa:	4680      	mov	r8, r0
 8001cac:	fa97 f3a7 	rbit	r3, r7
 8001cb0:	fa97 f3a7 	rbit	r3, r7
 8001cb4:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cb8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8001cba:	fa97 f3a7 	rbit	r3, r7
 8001cbe:	fab3 f383 	clz	r3, r3
 8001cc2:	f003 031f 	and.w	r3, r3, #31
 8001cc6:	fa04 f303 	lsl.w	r3, r4, r3
 8001cca:	4213      	tst	r3, r2
 8001ccc:	f47f aee0 	bne.w	8001a90 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cd0:	f7fe fe18 	bl	8000904 <HAL_GetTick>
 8001cd4:	eba0 0308 	sub.w	r3, r0, r8
 8001cd8:	2b02      	cmp	r3, #2
 8001cda:	d9e7      	bls.n	8001cac <HAL_RCC_OscConfig+0x23c>
 8001cdc:	e729      	b.n	8001b32 <HAL_RCC_OscConfig+0xc2>
 8001cde:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_DISABLE();
 8001ce2:	fab3 f383 	clz	r3, r3
 8001ce6:	440b      	add	r3, r1
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	2702      	movs	r7, #2
 8001cec:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001cee:	f7fe fe09 	bl	8000904 <HAL_GetTick>
 8001cf2:	4680      	mov	r8, r0
 8001cf4:	fa97 f3a7 	rbit	r3, r7
 8001cf8:	fa97 f3a7 	rbit	r3, r7
 8001cfc:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d00:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8001d02:	fa97 f3a7 	rbit	r3, r7
 8001d06:	fab3 f383 	clz	r3, r3
 8001d0a:	f003 031f 	and.w	r3, r3, #31
 8001d0e:	fa04 f303 	lsl.w	r3, r4, r3
 8001d12:	4213      	tst	r3, r2
 8001d14:	f43f aebc 	beq.w	8001a90 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d18:	f7fe fdf4 	bl	8000904 <HAL_GetTick>
 8001d1c:	eba0 0308 	sub.w	r3, r0, r8
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	d9e7      	bls.n	8001cf4 <HAL_RCC_OscConfig+0x284>
 8001d24:	e705      	b.n	8001b32 <HAL_RCC_OscConfig+0xc2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d26:	4c1d      	ldr	r4, [pc, #116]	; (8001d9c <HAL_RCC_OscConfig+0x32c>)
 8001d28:	69e3      	ldr	r3, [r4, #28]
 8001d2a:	00d9      	lsls	r1, r3, #3
 8001d2c:	d434      	bmi.n	8001d98 <HAL_RCC_OscConfig+0x328>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d2e:	69e3      	ldr	r3, [r4, #28]
 8001d30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d34:	61e3      	str	r3, [r4, #28]
 8001d36:	69e3      	ldr	r3, [r4, #28]
 8001d38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d3c:	9301      	str	r3, [sp, #4]
 8001d3e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001d40:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d42:	4f18      	ldr	r7, [pc, #96]	; (8001da4 <HAL_RCC_OscConfig+0x334>)
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	05da      	lsls	r2, r3, #23
 8001d48:	d52e      	bpl.n	8001da8 <HAL_RCC_OscConfig+0x338>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d4a:	68ab      	ldr	r3, [r5, #8]
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d13c      	bne.n	8001dca <HAL_RCC_OscConfig+0x35a>
 8001d50:	6a23      	ldr	r3, [r4, #32]
 8001d52:	f043 0301 	orr.w	r3, r3, #1
 8001d56:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001d58:	f7fe fdd4 	bl	8000904 <HAL_GetTick>
 8001d5c:	2702      	movs	r7, #2
 8001d5e:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d60:	46ba      	mov	sl, r7
 8001d62:	f04f 0901 	mov.w	r9, #1
 8001d66:	fa97 f3a7 	rbit	r3, r7
 8001d6a:	fa97 f3a7 	rbit	r3, r7
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d06b      	beq.n	8001e4a <HAL_RCC_OscConfig+0x3da>
 8001d72:	6a22      	ldr	r2, [r4, #32]
 8001d74:	fa9a f3aa 	rbit	r3, sl
 8001d78:	fab3 f383 	clz	r3, r3
 8001d7c:	f003 031f 	and.w	r3, r3, #31
 8001d80:	fa09 f303 	lsl.w	r3, r9, r3
 8001d84:	4213      	tst	r3, r2
 8001d86:	d057      	beq.n	8001e38 <HAL_RCC_OscConfig+0x3c8>
    if(pwrclkchanged == SET)
 8001d88:	2e00      	cmp	r6, #0
 8001d8a:	f43f ae85 	beq.w	8001a98 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d8e:	69e3      	ldr	r3, [r4, #28]
 8001d90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d94:	61e3      	str	r3, [r4, #28]
 8001d96:	e67f      	b.n	8001a98 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8001d98:	2600      	movs	r6, #0
 8001d9a:	e7d2      	b.n	8001d42 <HAL_RCC_OscConfig+0x2d2>
 8001d9c:	40021000 	.word	0x40021000
 8001da0:	10908120 	.word	0x10908120
 8001da4:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dae:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8001db0:	f7fe fda8 	bl	8000904 <HAL_GetTick>
 8001db4:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	05db      	lsls	r3, r3, #23
 8001dba:	d4c6      	bmi.n	8001d4a <HAL_RCC_OscConfig+0x2da>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dbc:	f7fe fda2 	bl	8000904 <HAL_GetTick>
 8001dc0:	eba0 0008 	sub.w	r0, r0, r8
 8001dc4:	2864      	cmp	r0, #100	; 0x64
 8001dc6:	d9f6      	bls.n	8001db6 <HAL_RCC_OscConfig+0x346>
 8001dc8:	e6b3      	b.n	8001b32 <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dca:	bb3b      	cbnz	r3, 8001e1c <HAL_RCC_OscConfig+0x3ac>
 8001dcc:	6a23      	ldr	r3, [r4, #32]
 8001dce:	f023 0301 	bic.w	r3, r3, #1
 8001dd2:	6223      	str	r3, [r4, #32]
 8001dd4:	6a23      	ldr	r3, [r4, #32]
 8001dd6:	f023 0304 	bic.w	r3, r3, #4
 8001dda:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001ddc:	f7fe fd92 	bl	8000904 <HAL_GetTick>
 8001de0:	2702      	movs	r7, #2
 8001de2:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001de4:	46ba      	mov	sl, r7
 8001de6:	f04f 0901 	mov.w	r9, #1
 8001dea:	fa97 f3a7 	rbit	r3, r7
 8001dee:	fa97 f3a7 	rbit	r3, r7
 8001df2:	b373      	cbz	r3, 8001e52 <HAL_RCC_OscConfig+0x3e2>
 8001df4:	6a22      	ldr	r2, [r4, #32]
 8001df6:	fa9a f3aa 	rbit	r3, sl
 8001dfa:	fab3 f383 	clz	r3, r3
 8001dfe:	f003 031f 	and.w	r3, r3, #31
 8001e02:	fa09 f303 	lsl.w	r3, r9, r3
 8001e06:	4213      	tst	r3, r2
 8001e08:	d0be      	beq.n	8001d88 <HAL_RCC_OscConfig+0x318>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e0a:	f7fe fd7b 	bl	8000904 <HAL_GetTick>
 8001e0e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001e12:	eba0 0008 	sub.w	r0, r0, r8
 8001e16:	4298      	cmp	r0, r3
 8001e18:	d9e7      	bls.n	8001dea <HAL_RCC_OscConfig+0x37a>
 8001e1a:	e68a      	b.n	8001b32 <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e1c:	2b05      	cmp	r3, #5
 8001e1e:	6a23      	ldr	r3, [r4, #32]
 8001e20:	d103      	bne.n	8001e2a <HAL_RCC_OscConfig+0x3ba>
 8001e22:	f043 0304 	orr.w	r3, r3, #4
 8001e26:	6223      	str	r3, [r4, #32]
 8001e28:	e792      	b.n	8001d50 <HAL_RCC_OscConfig+0x2e0>
 8001e2a:	f023 0301 	bic.w	r3, r3, #1
 8001e2e:	6223      	str	r3, [r4, #32]
 8001e30:	6a23      	ldr	r3, [r4, #32]
 8001e32:	f023 0304 	bic.w	r3, r3, #4
 8001e36:	e78e      	b.n	8001d56 <HAL_RCC_OscConfig+0x2e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e38:	f7fe fd64 	bl	8000904 <HAL_GetTick>
 8001e3c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001e40:	eba0 0008 	sub.w	r0, r0, r8
 8001e44:	4298      	cmp	r0, r3
 8001e46:	d98e      	bls.n	8001d66 <HAL_RCC_OscConfig+0x2f6>
 8001e48:	e673      	b.n	8001b32 <HAL_RCC_OscConfig+0xc2>
 8001e4a:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e4e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001e50:	e790      	b.n	8001d74 <HAL_RCC_OscConfig+0x304>
 8001e52:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e56:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001e58:	e7cd      	b.n	8001df6 <HAL_RCC_OscConfig+0x386>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e5a:	4a50      	ldr	r2, [pc, #320]	; (8001f9c <HAL_RCC_OscConfig+0x52c>)
 8001e5c:	6853      	ldr	r3, [r2, #4]
 8001e5e:	f003 030c 	and.w	r3, r3, #12
 8001e62:	2b08      	cmp	r3, #8
 8001e64:	4614      	mov	r4, r2
 8001e66:	f000 8081 	beq.w	8001f6c <HAL_RCC_OscConfig+0x4fc>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e6a:	2802      	cmp	r0, #2
 8001e6c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e70:	d157      	bne.n	8001f22 <HAL_RCC_OscConfig+0x4b2>
 8001e72:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8001e76:	fab3 f383 	clz	r3, r3
 8001e7a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e7e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	2200      	movs	r2, #0
 8001e86:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001e88:	f7fe fd3c 	bl	8000904 <HAL_GetTick>
 8001e8c:	f04f 7800 	mov.w	r8, #33554432	; 0x2000000
 8001e90:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e92:	2601      	movs	r6, #1
 8001e94:	fa98 f3a8 	rbit	r3, r8
 8001e98:	6822      	ldr	r2, [r4, #0]
 8001e9a:	fa98 f3a8 	rbit	r3, r8
 8001e9e:	fab3 f383 	clz	r3, r3
 8001ea2:	f003 031f 	and.w	r3, r3, #31
 8001ea6:	fa06 f303 	lsl.w	r3, r6, r3
 8001eaa:	4213      	tst	r3, r2
 8001eac:	d133      	bne.n	8001f16 <HAL_RCC_OscConfig+0x4a6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001eae:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001eb0:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8001eb2:	f023 030f 	bic.w	r3, r3, #15
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001eba:	e9d5 1307 	ldrd	r1, r3, [r5, #28]
 8001ebe:	6862      	ldr	r2, [r4, #4]
 8001ec0:	430b      	orrs	r3, r1
 8001ec2:	f422 1276 	bic.w	r2, r2, #4030464	; 0x3d8000
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	6063      	str	r3, [r4, #4]
 8001eca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ece:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8001ed2:	fab3 f383 	clz	r3, r3
 8001ed6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001eda:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ede:	009b      	lsls	r3, r3, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ee0:	2701      	movs	r7, #1
        __HAL_RCC_PLL_ENABLE();
 8001ee2:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8001ee4:	f7fe fd0e 	bl	8000904 <HAL_GetTick>
 8001ee8:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 8001eec:	4605      	mov	r5, r0
 8001eee:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ef2:	6822      	ldr	r2, [r4, #0]
 8001ef4:	fa96 f3a6 	rbit	r3, r6
 8001ef8:	fab3 f383 	clz	r3, r3
 8001efc:	f003 031f 	and.w	r3, r3, #31
 8001f00:	fa07 f303 	lsl.w	r3, r7, r3
 8001f04:	4213      	tst	r3, r2
 8001f06:	f47f adcb 	bne.w	8001aa0 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f0a:	f7fe fcfb 	bl	8000904 <HAL_GetTick>
 8001f0e:	1b40      	subs	r0, r0, r5
 8001f10:	2802      	cmp	r0, #2
 8001f12:	d9ec      	bls.n	8001eee <HAL_RCC_OscConfig+0x47e>
 8001f14:	e60d      	b.n	8001b32 <HAL_RCC_OscConfig+0xc2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f16:	f7fe fcf5 	bl	8000904 <HAL_GetTick>
 8001f1a:	1bc3      	subs	r3, r0, r7
 8001f1c:	2b02      	cmp	r3, #2
 8001f1e:	d9b9      	bls.n	8001e94 <HAL_RCC_OscConfig+0x424>
 8001f20:	e607      	b.n	8001b32 <HAL_RCC_OscConfig+0xc2>
 8001f22:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8001f26:	fab3 f383 	clz	r3, r3
 8001f2a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f2e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	2200      	movs	r2, #0
 8001f36:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001f38:	f7fe fce4 	bl	8000904 <HAL_GetTick>
 8001f3c:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 8001f40:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f42:	2701      	movs	r7, #1
 8001f44:	fa96 f3a6 	rbit	r3, r6
 8001f48:	6822      	ldr	r2, [r4, #0]
 8001f4a:	fa96 f3a6 	rbit	r3, r6
 8001f4e:	fab3 f383 	clz	r3, r3
 8001f52:	f003 031f 	and.w	r3, r3, #31
 8001f56:	fa07 f303 	lsl.w	r3, r7, r3
 8001f5a:	4213      	tst	r3, r2
 8001f5c:	f43f ada0 	beq.w	8001aa0 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f60:	f7fe fcd0 	bl	8000904 <HAL_GetTick>
 8001f64:	1b40      	subs	r0, r0, r5
 8001f66:	2802      	cmp	r0, #2
 8001f68:	d9ec      	bls.n	8001f44 <HAL_RCC_OscConfig+0x4d4>
 8001f6a:	e5e2      	b.n	8001b32 <HAL_RCC_OscConfig+0xc2>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f6c:	2801      	cmp	r0, #1
 8001f6e:	f43f ade1 	beq.w	8001b34 <HAL_RCC_OscConfig+0xc4>
        pll_config = RCC->CFGR;
 8001f72:	6853      	ldr	r3, [r2, #4]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001f74:	69e9      	ldr	r1, [r5, #28]
        pll_config2 = RCC->CFGR2;
 8001f76:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001f78:	f403 30c0 	and.w	r0, r3, #98304	; 0x18000
 8001f7c:	4288      	cmp	r0, r1
 8001f7e:	f47f adb5 	bne.w	8001aec <HAL_RCC_OscConfig+0x7c>
 8001f82:	6a29      	ldr	r1, [r5, #32]
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001f84:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001f88:	428b      	cmp	r3, r1
 8001f8a:	f47f adaf 	bne.w	8001aec <HAL_RCC_OscConfig+0x7c>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8001f8e:	f002 030f 	and.w	r3, r2, #15
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001f92:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8001f94:	4293      	cmp	r3, r2
 8001f96:	f43f ad83 	beq.w	8001aa0 <HAL_RCC_OscConfig+0x30>
 8001f9a:	e5a7      	b.n	8001aec <HAL_RCC_OscConfig+0x7c>
 8001f9c:	40021000 	.word	0x40021000

08001fa0 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8001fa0:	4911      	ldr	r1, [pc, #68]	; (8001fe8 <HAL_RCC_GetSysClockFreq+0x48>)
 8001fa2:	684b      	ldr	r3, [r1, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001fa4:	f003 020c 	and.w	r2, r3, #12
 8001fa8:	2a08      	cmp	r2, #8
 8001faa:	d11a      	bne.n	8001fe2 <HAL_RCC_GetSysClockFreq+0x42>
 8001fac:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001fb0:	fa92 f2a2 	rbit	r2, r2
 8001fb4:	200f      	movs	r0, #15
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001fb6:	fab2 f282 	clz	r2, r2
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001fba:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8001fbc:	fa90 f0a0 	rbit	r0, r0
 8001fc0:	fab0 f080 	clz	r0, r0
 8001fc4:	f001 010f 	and.w	r1, r1, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001fc8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001fcc:	40d3      	lsrs	r3, r2
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001fce:	40c1      	lsrs	r1, r0
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001fd0:	4a06      	ldr	r2, [pc, #24]	; (8001fec <HAL_RCC_GetSysClockFreq+0x4c>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001fd2:	4807      	ldr	r0, [pc, #28]	; (8001ff0 <HAL_RCC_GetSysClockFreq+0x50>)
 8001fd4:	5c41      	ldrb	r1, [r0, r1]
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001fd6:	4807      	ldr	r0, [pc, #28]	; (8001ff4 <HAL_RCC_GetSysClockFreq+0x54>)
 8001fd8:	fbb0 f1f1 	udiv	r1, r0, r1
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001fdc:	5cd0      	ldrb	r0, [r2, r3]
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001fde:	4348      	muls	r0, r1
 8001fe0:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8001fe2:	4804      	ldr	r0, [pc, #16]	; (8001ff4 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001fe4:	4770      	bx	lr
 8001fe6:	bf00      	nop
 8001fe8:	40021000 	.word	0x40021000
 8001fec:	0800446c 	.word	0x0800446c
 8001ff0:	0800447c 	.word	0x0800447c
 8001ff4:	007a1200 	.word	0x007a1200

08001ff8 <HAL_RCC_ClockConfig>:
{
 8001ff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ffc:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001ffe:	4604      	mov	r4, r0
 8002000:	b910      	cbnz	r0, 8002008 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8002002:	2001      	movs	r0, #1
}
 8002004:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002008:	4a4c      	ldr	r2, [pc, #304]	; (800213c <HAL_RCC_ClockConfig+0x144>)
 800200a:	6813      	ldr	r3, [r2, #0]
 800200c:	f003 0307 	and.w	r3, r3, #7
 8002010:	428b      	cmp	r3, r1
 8002012:	d32e      	bcc.n	8002072 <HAL_RCC_ClockConfig+0x7a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002014:	6822      	ldr	r2, [r4, #0]
 8002016:	0791      	lsls	r1, r2, #30
 8002018:	d436      	bmi.n	8002088 <HAL_RCC_ClockConfig+0x90>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800201a:	07d2      	lsls	r2, r2, #31
 800201c:	d43c      	bmi.n	8002098 <HAL_RCC_ClockConfig+0xa0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800201e:	4a47      	ldr	r2, [pc, #284]	; (800213c <HAL_RCC_ClockConfig+0x144>)
 8002020:	6813      	ldr	r3, [r2, #0]
 8002022:	f003 0307 	and.w	r3, r3, #7
 8002026:	42ab      	cmp	r3, r5
 8002028:	d874      	bhi.n	8002114 <HAL_RCC_ClockConfig+0x11c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800202a:	6822      	ldr	r2, [r4, #0]
 800202c:	4d44      	ldr	r5, [pc, #272]	; (8002140 <HAL_RCC_ClockConfig+0x148>)
 800202e:	f012 0f04 	tst.w	r2, #4
 8002032:	d17b      	bne.n	800212c <HAL_RCC_ClockConfig+0x134>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002034:	0713      	lsls	r3, r2, #28
 8002036:	d506      	bpl.n	8002046 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002038:	686b      	ldr	r3, [r5, #4]
 800203a:	6922      	ldr	r2, [r4, #16]
 800203c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002040:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002044:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002046:	f7ff ffab 	bl	8001fa0 <HAL_RCC_GetSysClockFreq>
 800204a:	686b      	ldr	r3, [r5, #4]
 800204c:	22f0      	movs	r2, #240	; 0xf0
 800204e:	fa92 f2a2 	rbit	r2, r2
 8002052:	fab2 f282 	clz	r2, r2
 8002056:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800205a:	40d3      	lsrs	r3, r2
 800205c:	4a39      	ldr	r2, [pc, #228]	; (8002144 <HAL_RCC_ClockConfig+0x14c>)
 800205e:	5cd3      	ldrb	r3, [r2, r3]
 8002060:	40d8      	lsrs	r0, r3
 8002062:	4b39      	ldr	r3, [pc, #228]	; (8002148 <HAL_RCC_ClockConfig+0x150>)
 8002064:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8002066:	4b39      	ldr	r3, [pc, #228]	; (800214c <HAL_RCC_ClockConfig+0x154>)
 8002068:	6818      	ldr	r0, [r3, #0]
 800206a:	f7fe fc09 	bl	8000880 <HAL_InitTick>
  return HAL_OK;
 800206e:	2000      	movs	r0, #0
 8002070:	e7c8      	b.n	8002004 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002072:	6813      	ldr	r3, [r2, #0]
 8002074:	f023 0307 	bic.w	r3, r3, #7
 8002078:	430b      	orrs	r3, r1
 800207a:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800207c:	6813      	ldr	r3, [r2, #0]
 800207e:	f003 0307 	and.w	r3, r3, #7
 8002082:	428b      	cmp	r3, r1
 8002084:	d1bd      	bne.n	8002002 <HAL_RCC_ClockConfig+0xa>
 8002086:	e7c5      	b.n	8002014 <HAL_RCC_ClockConfig+0x1c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002088:	492d      	ldr	r1, [pc, #180]	; (8002140 <HAL_RCC_ClockConfig+0x148>)
 800208a:	68a0      	ldr	r0, [r4, #8]
 800208c:	684b      	ldr	r3, [r1, #4]
 800208e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002092:	4303      	orrs	r3, r0
 8002094:	604b      	str	r3, [r1, #4]
 8002096:	e7c0      	b.n	800201a <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002098:	6862      	ldr	r2, [r4, #4]
 800209a:	4e29      	ldr	r6, [pc, #164]	; (8002140 <HAL_RCC_ClockConfig+0x148>)
 800209c:	2a01      	cmp	r2, #1
 800209e:	d126      	bne.n	80020ee <HAL_RCC_ClockConfig+0xf6>
 80020a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020a4:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020a8:	6831      	ldr	r1, [r6, #0]
 80020aa:	fa93 f3a3 	rbit	r3, r3
 80020ae:	fab3 f383 	clz	r3, r3
 80020b2:	f003 031f 	and.w	r3, r3, #31
 80020b6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ba:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020bc:	d0a1      	beq.n	8002002 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020be:	6873      	ldr	r3, [r6, #4]
 80020c0:	f023 0303 	bic.w	r3, r3, #3
 80020c4:	431a      	orrs	r2, r3
 80020c6:	6072      	str	r2, [r6, #4]
    tickstart = HAL_GetTick();
 80020c8:	f7fe fc1c 	bl	8000904 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020cc:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80020d0:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020d2:	6873      	ldr	r3, [r6, #4]
 80020d4:	6862      	ldr	r2, [r4, #4]
 80020d6:	f003 030c 	and.w	r3, r3, #12
 80020da:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80020de:	d09e      	beq.n	800201e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020e0:	f7fe fc10 	bl	8000904 <HAL_GetTick>
 80020e4:	1bc0      	subs	r0, r0, r7
 80020e6:	4540      	cmp	r0, r8
 80020e8:	d9f3      	bls.n	80020d2 <HAL_RCC_ClockConfig+0xda>
        return HAL_TIMEOUT;
 80020ea:	2003      	movs	r0, #3
 80020ec:	e78a      	b.n	8002004 <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020ee:	2a02      	cmp	r2, #2
 80020f0:	bf0c      	ite	eq
 80020f2:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 80020f6:	2302      	movne	r3, #2
 80020f8:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020fc:	6830      	ldr	r0, [r6, #0]
 80020fe:	fa93 f3a3 	rbit	r3, r3
 8002102:	fab3 f383 	clz	r3, r3
 8002106:	f003 031f 	and.w	r3, r3, #31
 800210a:	2101      	movs	r1, #1
 800210c:	fa01 f303 	lsl.w	r3, r1, r3
 8002110:	4203      	tst	r3, r0
 8002112:	e7d3      	b.n	80020bc <HAL_RCC_ClockConfig+0xc4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002114:	6813      	ldr	r3, [r2, #0]
 8002116:	f023 0307 	bic.w	r3, r3, #7
 800211a:	432b      	orrs	r3, r5
 800211c:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800211e:	6813      	ldr	r3, [r2, #0]
 8002120:	f003 0307 	and.w	r3, r3, #7
 8002124:	42ab      	cmp	r3, r5
 8002126:	f47f af6c 	bne.w	8002002 <HAL_RCC_ClockConfig+0xa>
 800212a:	e77e      	b.n	800202a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800212c:	686b      	ldr	r3, [r5, #4]
 800212e:	68e1      	ldr	r1, [r4, #12]
 8002130:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002134:	430b      	orrs	r3, r1
 8002136:	606b      	str	r3, [r5, #4]
 8002138:	e77c      	b.n	8002034 <HAL_RCC_ClockConfig+0x3c>
 800213a:	bf00      	nop
 800213c:	40022000 	.word	0x40022000
 8002140:	40021000 	.word	0x40021000
 8002144:	08004454 	.word	0x08004454
 8002148:	20000000 	.word	0x20000000
 800214c:	20000008 	.word	0x20000008

08002150 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002150:	4b08      	ldr	r3, [pc, #32]	; (8002174 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002152:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	fa92 f2a2 	rbit	r2, r2
 800215c:	fab2 f282 	clz	r2, r2
 8002160:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002164:	40d3      	lsrs	r3, r2
 8002166:	4a04      	ldr	r2, [pc, #16]	; (8002178 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002168:	5cd3      	ldrb	r3, [r2, r3]
 800216a:	4a04      	ldr	r2, [pc, #16]	; (800217c <HAL_RCC_GetPCLK1Freq+0x2c>)
 800216c:	6810      	ldr	r0, [r2, #0]
}    
 800216e:	40d8      	lsrs	r0, r3
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	40021000 	.word	0x40021000
 8002178:	08004464 	.word	0x08004464
 800217c:	20000000 	.word	0x20000000

08002180 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002180:	4b08      	ldr	r3, [pc, #32]	; (80021a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002182:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	fa92 f2a2 	rbit	r2, r2
 800218c:	fab2 f282 	clz	r2, r2
 8002190:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002194:	40d3      	lsrs	r3, r2
 8002196:	4a04      	ldr	r2, [pc, #16]	; (80021a8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002198:	5cd3      	ldrb	r3, [r2, r3]
 800219a:	4a04      	ldr	r2, [pc, #16]	; (80021ac <HAL_RCC_GetPCLK2Freq+0x2c>)
 800219c:	6810      	ldr	r0, [r2, #0]
} 
 800219e:	40d8      	lsrs	r0, r3
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop
 80021a4:	40021000 	.word	0x40021000
 80021a8:	08004464 	.word	0x08004464
 80021ac:	20000000 	.word	0x20000000

080021b0 <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80021b0:	6803      	ldr	r3, [r0, #0]
{
 80021b2:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80021b6:	03d9      	lsls	r1, r3, #15
{
 80021b8:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80021ba:	d523      	bpl.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x54>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021bc:	4d9c      	ldr	r5, [pc, #624]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80021be:	69eb      	ldr	r3, [r5, #28]
 80021c0:	00da      	lsls	r2, r3, #3
 80021c2:	f100 80d9 	bmi.w	8002378 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021c6:	69eb      	ldr	r3, [r5, #28]
 80021c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021cc:	61eb      	str	r3, [r5, #28]
 80021ce:	69eb      	ldr	r3, [r5, #28]
 80021d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021d4:	9301      	str	r3, [sp, #4]
 80021d6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80021d8:	2601      	movs	r6, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021da:	4f96      	ldr	r7, [pc, #600]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	05db      	lsls	r3, r3, #23
 80021e0:	f140 80cc 	bpl.w	800237c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80021e4:	6a2b      	ldr	r3, [r5, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80021e6:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80021ea:	f040 80dc 	bne.w	80023a6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80021ee:	6a2b      	ldr	r3, [r5, #32]
 80021f0:	6862      	ldr	r2, [r4, #4]
 80021f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021f6:	4313      	orrs	r3, r2
 80021f8:	622b      	str	r3, [r5, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80021fa:	b11e      	cbz	r6, 8002204 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021fc:	69eb      	ldr	r3, [r5, #28]
 80021fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002202:	61eb      	str	r3, [r5, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002204:	6823      	ldr	r3, [r4, #0]
 8002206:	07da      	lsls	r2, r3, #31
 8002208:	d506      	bpl.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800220a:	4989      	ldr	r1, [pc, #548]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800220c:	68a0      	ldr	r0, [r4, #8]
 800220e:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8002210:	f022 0203 	bic.w	r2, r2, #3
 8002214:	4302      	orrs	r2, r0
 8002216:	630a      	str	r2, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002218:	079f      	lsls	r7, r3, #30
 800221a:	d506      	bpl.n	800222a <HAL_RCCEx_PeriphCLKConfig+0x7a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800221c:	4984      	ldr	r1, [pc, #528]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800221e:	68e0      	ldr	r0, [r4, #12]
 8002220:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8002222:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8002226:	4302      	orrs	r2, r0
 8002228:	630a      	str	r2, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800222a:	075e      	lsls	r6, r3, #29
 800222c:	d506      	bpl.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800222e:	4980      	ldr	r1, [pc, #512]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002230:	6920      	ldr	r0, [r4, #16]
 8002232:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8002234:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8002238:	4302      	orrs	r2, r0
 800223a:	630a      	str	r2, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800223c:	069d      	lsls	r5, r3, #26
 800223e:	d506      	bpl.n	800224e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002240:	497b      	ldr	r1, [pc, #492]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002242:	69e0      	ldr	r0, [r4, #28]
 8002244:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8002246:	f022 0210 	bic.w	r2, r2, #16
 800224a:	4302      	orrs	r2, r0
 800224c:	630a      	str	r2, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800224e:	0398      	lsls	r0, r3, #14
 8002250:	d506      	bpl.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002252:	4977      	ldr	r1, [pc, #476]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002254:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002256:	684a      	ldr	r2, [r1, #4]
 8002258:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 800225c:	4302      	orrs	r2, r0
 800225e:	604a      	str	r2, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002260:	0659      	lsls	r1, r3, #25
 8002262:	d506      	bpl.n	8002272 <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002264:	4972      	ldr	r1, [pc, #456]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002266:	6a20      	ldr	r0, [r4, #32]
 8002268:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800226a:	f022 0220 	bic.w	r2, r2, #32
 800226e:	4302      	orrs	r2, r0
 8002270:	630a      	str	r2, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002272:	035a      	lsls	r2, r3, #13
 8002274:	d506      	bpl.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002276:	496e      	ldr	r1, [pc, #440]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002278:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800227a:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800227c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002280:	4302      	orrs	r2, r0
 8002282:	630a      	str	r2, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002284:	071f      	lsls	r7, r3, #28
 8002286:	d506      	bpl.n	8002296 <HAL_RCCEx_PeriphCLKConfig+0xe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002288:	4969      	ldr	r1, [pc, #420]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800228a:	6960      	ldr	r0, [r4, #20]
 800228c:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800228e:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8002292:	4302      	orrs	r2, r0
 8002294:	630a      	str	r2, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002296:	06de      	lsls	r6, r3, #27
 8002298:	d506      	bpl.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800229a:	4965      	ldr	r1, [pc, #404]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800229c:	69a0      	ldr	r0, [r4, #24]
 800229e:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80022a0:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 80022a4:	4302      	orrs	r2, r0
 80022a6:	630a      	str	r2, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80022a8:	059d      	lsls	r5, r3, #22
 80022aa:	d506      	bpl.n	80022ba <HAL_RCCEx_PeriphCLKConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80022ac:	4960      	ldr	r1, [pc, #384]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80022ae:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80022b0:	684a      	ldr	r2, [r1, #4]
 80022b2:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80022b6:	4302      	orrs	r2, r0
 80022b8:	604a      	str	r2, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80022ba:	0618      	lsls	r0, r3, #24
 80022bc:	d506      	bpl.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80022be:	495c      	ldr	r1, [pc, #368]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80022c0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80022c2:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80022c4:	f422 72f8 	bic.w	r2, r2, #496	; 0x1f0
 80022c8:	4302      	orrs	r2, r0
 80022ca:	62ca      	str	r2, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80022cc:	05d9      	lsls	r1, r3, #23
 80022ce:	d506      	bpl.n	80022de <HAL_RCCEx_PeriphCLKConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80022d0:	4957      	ldr	r1, [pc, #348]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80022d2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80022d4:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80022d6:	f422 5278 	bic.w	r2, r2, #15872	; 0x3e00
 80022da:	4302      	orrs	r2, r0
 80022dc:	62ca      	str	r2, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80022de:	04da      	lsls	r2, r3, #19
 80022e0:	d506      	bpl.n	80022f0 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80022e2:	4953      	ldr	r1, [pc, #332]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80022e4:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80022e6:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80022e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80022ec:	4302      	orrs	r2, r0
 80022ee:	630a      	str	r2, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80022f0:	049f      	lsls	r7, r3, #18
 80022f2:	d506      	bpl.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0x152>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80022f4:	494e      	ldr	r1, [pc, #312]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80022f6:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80022f8:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80022fa:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80022fe:	4302      	orrs	r2, r0
 8002300:	630a      	str	r2, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002302:	02de      	lsls	r6, r3, #11
 8002304:	d506      	bpl.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x164>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002306:	494a      	ldr	r1, [pc, #296]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002308:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800230a:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800230c:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8002310:	4302      	orrs	r2, r0
 8002312:	630a      	str	r2, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002314:	029d      	lsls	r5, r3, #10
 8002316:	d506      	bpl.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002318:	4945      	ldr	r1, [pc, #276]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800231a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800231c:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800231e:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8002322:	4302      	orrs	r2, r0
 8002324:	630a      	str	r2, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002326:	0258      	lsls	r0, r3, #9
 8002328:	d506      	bpl.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800232a:	4941      	ldr	r1, [pc, #260]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800232c:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800232e:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8002330:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002334:	4302      	orrs	r2, r0
 8002336:	630a      	str	r2, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002338:	0219      	lsls	r1, r3, #8
 800233a:	d506      	bpl.n	800234a <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800233c:	493c      	ldr	r1, [pc, #240]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800233e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8002340:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8002342:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002346:	4302      	orrs	r2, r0
 8002348:	630a      	str	r2, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800234a:	01da      	lsls	r2, r3, #7
 800234c:	d506      	bpl.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800234e:	4938      	ldr	r1, [pc, #224]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002350:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8002352:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8002354:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002358:	4302      	orrs	r2, r0
 800235a:	630a      	str	r2, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800235c:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002360:	bf1f      	itttt	ne
 8002362:	4a33      	ldrne	r2, [pc, #204]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002364:	6d21      	ldrne	r1, [r4, #80]	; 0x50
 8002366:	6b13      	ldrne	r3, [r2, #48]	; 0x30
 8002368:	f423 4300 	bicne.w	r3, r3, #32768	; 0x8000
 800236c:	bf1d      	ittte	ne
 800236e:	430b      	orrne	r3, r1
 8002370:	6313      	strne	r3, [r2, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002372:	2000      	movne	r0, #0
 8002374:	4618      	moveq	r0, r3
 8002376:	e013      	b.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  FlagStatus       pwrclkchanged = RESET;
 8002378:	2600      	movs	r6, #0
 800237a:	e72e      	b.n	80021da <HAL_RCCEx_PeriphCLKConfig+0x2a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002382:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8002384:	f7fe fabe 	bl	8000904 <HAL_GetTick>
 8002388:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	05d8      	lsls	r0, r3, #23
 800238e:	f53f af29 	bmi.w	80021e4 <HAL_RCCEx_PeriphCLKConfig+0x34>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002392:	f7fe fab7 	bl	8000904 <HAL_GetTick>
 8002396:	eba0 0008 	sub.w	r0, r0, r8
 800239a:	2864      	cmp	r0, #100	; 0x64
 800239c:	d9f5      	bls.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x1da>
          return HAL_TIMEOUT;
 800239e:	2003      	movs	r0, #3
}
 80023a0:	b002      	add	sp, #8
 80023a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80023a6:	6862      	ldr	r2, [r4, #4]
 80023a8:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80023ac:	429a      	cmp	r2, r3
 80023ae:	f43f af1e 	beq.w	80021ee <HAL_RCCEx_PeriphCLKConfig+0x3e>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80023b2:	6a29      	ldr	r1, [r5, #32]
 80023b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023b8:	f421 7040 	bic.w	r0, r1, #768	; 0x300
 80023bc:	fa93 f2a3 	rbit	r2, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 80023c0:	f8df c074 	ldr.w	ip, [pc, #116]	; 8002438 <HAL_RCCEx_PeriphCLKConfig+0x288>
 80023c4:	fab2 f282 	clz	r2, r2
 80023c8:	4462      	add	r2, ip
 80023ca:	0092      	lsls	r2, r2, #2
 80023cc:	2701      	movs	r7, #1
 80023ce:	6017      	str	r7, [r2, #0]
 80023d0:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 80023d4:	fab3 f383 	clz	r3, r3
 80023d8:	4463      	add	r3, ip
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	2200      	movs	r2, #0
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80023de:	07c9      	lsls	r1, r1, #31
      __HAL_RCC_BACKUPRESET_RELEASE();
 80023e0:	601a      	str	r2, [r3, #0]
      RCC->BDCR = temp_reg;
 80023e2:	6228      	str	r0, [r5, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80023e4:	f57f af03 	bpl.w	80021ee <HAL_RCCEx_PeriphCLKConfig+0x3e>
        tickstart = HAL_GetTick();
 80023e8:	f7fe fa8c 	bl	8000904 <HAL_GetTick>
 80023ec:	f04f 0802 	mov.w	r8, #2
 80023f0:	4681      	mov	r9, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023f2:	46c2      	mov	sl, r8
 80023f4:	fa98 f3a8 	rbit	r3, r8
 80023f8:	fa98 f3a8 	rbit	r3, r8
 80023fc:	b1a3      	cbz	r3, 8002428 <HAL_RCCEx_PeriphCLKConfig+0x278>
 80023fe:	6a2a      	ldr	r2, [r5, #32]
 8002400:	fa9a f3aa 	rbit	r3, sl
 8002404:	fab3 f383 	clz	r3, r3
 8002408:	f003 031f 	and.w	r3, r3, #31
 800240c:	fa07 f303 	lsl.w	r3, r7, r3
 8002410:	4213      	tst	r3, r2
 8002412:	f47f aeec 	bne.w	80021ee <HAL_RCCEx_PeriphCLKConfig+0x3e>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002416:	f7fe fa75 	bl	8000904 <HAL_GetTick>
 800241a:	f241 3388 	movw	r3, #5000	; 0x1388
 800241e:	eba0 0009 	sub.w	r0, r0, r9
 8002422:	4298      	cmp	r0, r3
 8002424:	d9e6      	bls.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8002426:	e7ba      	b.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002428:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800242c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800242e:	e7e7      	b.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x250>
 8002430:	40021000 	.word	0x40021000
 8002434:	40007000 	.word	0x40007000
 8002438:	10908100 	.word	0x10908100

0800243c <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
  uint32_t tickstart = 0U;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800243c:	6802      	ldr	r2, [r0, #0]
{
 800243e:	b538      	push	{r3, r4, r5, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002440:	68d3      	ldr	r3, [r2, #12]
 8002442:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002446:	60d3      	str	r3, [r2, #12]
{
 8002448:	4604      	mov	r4, r0

  tickstart = HAL_GetTick();
 800244a:	f7fe fa5b 	bl	8000904 <HAL_GetTick>
 800244e:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002450:	6823      	ldr	r3, [r4, #0]
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	069b      	lsls	r3, r3, #26
 8002456:	d501      	bpl.n	800245c <HAL_RTC_WaitForSynchro+0x20>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8002458:	2000      	movs	r0, #0
}
 800245a:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800245c:	f7fe fa52 	bl	8000904 <HAL_GetTick>
 8002460:	1b40      	subs	r0, r0, r5
 8002462:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002466:	d9f3      	bls.n	8002450 <HAL_RTC_WaitForSynchro+0x14>
      return HAL_TIMEOUT;
 8002468:	2003      	movs	r0, #3
 800246a:	e7f6      	b.n	800245a <HAL_RTC_WaitForSynchro+0x1e>

0800246c <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - HAL_OK : RTC is in Init mode
  *          - HAL_TIMEOUT : RTC is not in Init mode and in Timeout
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800246c:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800246e:	6803      	ldr	r3, [r0, #0]
 8002470:	68da      	ldr	r2, [r3, #12]
 8002472:	0652      	lsls	r2, r2, #25
{
 8002474:	4604      	mov	r4, r0
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002476:	d501      	bpl.n	800247c <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8002478:	2000      	movs	r0, #0
}
 800247a:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800247c:	f04f 32ff 	mov.w	r2, #4294967295
 8002480:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8002482:	f7fe fa3f 	bl	8000904 <HAL_GetTick>
 8002486:	4605      	mov	r5, r0
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002488:	6823      	ldr	r3, [r4, #0]
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	065b      	lsls	r3, r3, #25
 800248e:	d4f3      	bmi.n	8002478 <RTC_EnterInitMode+0xc>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002490:	f7fe fa38 	bl	8000904 <HAL_GetTick>
 8002494:	1b40      	subs	r0, r0, r5
 8002496:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800249a:	d9f5      	bls.n	8002488 <RTC_EnterInitMode+0x1c>
        return HAL_TIMEOUT;
 800249c:	2003      	movs	r0, #3
 800249e:	e7ec      	b.n	800247a <RTC_EnterInitMode+0xe>

080024a0 <HAL_RTC_Init>:
{
 80024a0:	b538      	push	{r3, r4, r5, lr}
  if (hrtc == NULL)
 80024a2:	4604      	mov	r4, r0
 80024a4:	b1b8      	cbz	r0, 80024d6 <HAL_RTC_Init+0x36>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80024a6:	7f43      	ldrb	r3, [r0, #29]
 80024a8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80024ac:	b913      	cbnz	r3, 80024b4 <HAL_RTC_Init+0x14>
    hrtc->Lock = HAL_UNLOCKED;
 80024ae:	7702      	strb	r2, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 80024b0:	f7fe f8a2 	bl	80005f8 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 80024b4:	2302      	movs	r3, #2
 80024b6:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80024b8:	6823      	ldr	r3, [r4, #0]
 80024ba:	22ca      	movs	r2, #202	; 0xca
 80024bc:	625a      	str	r2, [r3, #36]	; 0x24
 80024be:	2253      	movs	r2, #83	; 0x53
 80024c0:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80024c2:	4620      	mov	r0, r4
 80024c4:	f7ff ffd2 	bl	800246c <RTC_EnterInitMode>
 80024c8:	6823      	ldr	r3, [r4, #0]
 80024ca:	4605      	mov	r5, r0
 80024cc:	b128      	cbz	r0, 80024da <HAL_RTC_Init+0x3a>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80024ce:	22ff      	movs	r2, #255	; 0xff
 80024d0:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 80024d2:	2304      	movs	r3, #4
 80024d4:	7763      	strb	r3, [r4, #29]
    return HAL_ERROR;
 80024d6:	2501      	movs	r5, #1
 80024d8:	e02e      	b.n	8002538 <HAL_RTC_Init+0x98>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80024da:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80024dc:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80024de:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 80024e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024e6:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80024e8:	6862      	ldr	r2, [r4, #4]
 80024ea:	6899      	ldr	r1, [r3, #8]
 80024ec:	4302      	orrs	r2, r0
 80024ee:	6960      	ldr	r0, [r4, #20]
 80024f0:	4302      	orrs	r2, r0
 80024f2:	430a      	orrs	r2, r1
 80024f4:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80024f6:	68e2      	ldr	r2, [r4, #12]
 80024f8:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80024fa:	691a      	ldr	r2, [r3, #16]
 80024fc:	68a1      	ldr	r1, [r4, #8]
 80024fe:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002502:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002504:	68da      	ldr	r2, [r3, #12]
 8002506:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800250a:	60da      	str	r2, [r3, #12]
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	069b      	lsls	r3, r3, #26
 8002510:	d405      	bmi.n	800251e <HAL_RTC_Init+0x7e>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002512:	4620      	mov	r0, r4
 8002514:	f7ff ff92 	bl	800243c <HAL_RTC_WaitForSynchro>
 8002518:	b108      	cbz	r0, 800251e <HAL_RTC_Init+0x7e>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800251a:	6823      	ldr	r3, [r4, #0]
 800251c:	e7d7      	b.n	80024ce <HAL_RTC_Init+0x2e>
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800251e:	6823      	ldr	r3, [r4, #0]
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002520:	69a1      	ldr	r1, [r4, #24]
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8002522:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002524:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002528:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800252a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800252c:	430a      	orrs	r2, r1
 800252e:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002530:	22ff      	movs	r2, #255	; 0xff
 8002532:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8002534:	2301      	movs	r3, #1
 8002536:	7763      	strb	r3, [r4, #29]
}
 8002538:	4628      	mov	r0, r5
 800253a:	bd38      	pop	{r3, r4, r5, pc}

0800253c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800253c:	b538      	push	{r3, r4, r5, lr}
 800253e:	4604      	mov	r4, r0
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002540:	69c0      	ldr	r0, [r0, #28]
 8002542:	6921      	ldr	r1, [r4, #16]
 8002544:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002546:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002548:	430a      	orrs	r2, r1
 800254a:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800254c:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800254e:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002550:	4974      	ldr	r1, [pc, #464]	; (8002724 <UART_SetConfig+0x1e8>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002552:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002554:	4029      	ands	r1, r5
 8002556:	430a      	orrs	r2, r1
 8002558:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800255a:	685a      	ldr	r2, [r3, #4]
 800255c:	68e1      	ldr	r1, [r4, #12]
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  tmpreg |= huart->Init.OneBitSampling;
 800255e:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002560:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002564:	430a      	orrs	r2, r1
 8002566:	605a      	str	r2, [r3, #4]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002568:	6899      	ldr	r1, [r3, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800256a:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800256c:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
  tmpreg |= huart->Init.OneBitSampling;
 8002570:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002572:	430a      	orrs	r2, r1
 8002574:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002576:	4a6c      	ldr	r2, [pc, #432]	; (8002728 <UART_SetConfig+0x1ec>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d115      	bne.n	80025a8 <UART_SetConfig+0x6c>
 800257c:	4b6b      	ldr	r3, [pc, #428]	; (800272c <UART_SetConfig+0x1f0>)
 800257e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002580:	f003 0303 	and.w	r3, r3, #3
 8002584:	3b01      	subs	r3, #1
 8002586:	2b02      	cmp	r3, #2
 8002588:	f200 80ad 	bhi.w	80026e6 <UART_SetConfig+0x1aa>
 800258c:	4a68      	ldr	r2, [pc, #416]	; (8002730 <UART_SetConfig+0x1f4>)

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800258e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002592:	5cd3      	ldrb	r3, [r2, r3]
 8002594:	d176      	bne.n	8002684 <UART_SetConfig+0x148>
  {
    switch (clocksource)
 8002596:	2b08      	cmp	r3, #8
 8002598:	d819      	bhi.n	80025ce <UART_SetConfig+0x92>
 800259a:	e8df f003 	tbb	[pc, r3]
 800259e:	a7b9      	.short	0xa7b9
 80025a0:	18b3185c 	.word	0x18b3185c
 80025a4:	1818      	.short	0x1818
 80025a6:	5d          	.byte	0x5d
 80025a7:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 80025a8:	4a62      	ldr	r2, [pc, #392]	; (8002734 <UART_SetConfig+0x1f8>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d119      	bne.n	80025e2 <UART_SetConfig+0xa6>
 80025ae:	4b5f      	ldr	r3, [pc, #380]	; (800272c <UART_SetConfig+0x1f0>)
 80025b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80025b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80025ba:	f000 809a 	beq.w	80026f2 <UART_SetConfig+0x1b6>
 80025be:	d808      	bhi.n	80025d2 <UART_SetConfig+0x96>
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	f000 80a2 	beq.w	800270a <UART_SetConfig+0x1ce>
 80025c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025ca:	f000 8098 	beq.w	80026fe <UART_SetConfig+0x1c2>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80025ce:	2001      	movs	r0, #1
 80025d0:	e0a3      	b.n	800271a <UART_SetConfig+0x1de>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80025d2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80025d6:	d1fa      	bne.n	80025ce <UART_SetConfig+0x92>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80025d8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80025dc:	d03b      	beq.n	8002656 <UART_SetConfig+0x11a>
        break;
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
        break;
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80025de:	4856      	ldr	r0, [pc, #344]	; (8002738 <UART_SetConfig+0x1fc>)
 80025e0:	e06b      	b.n	80026ba <UART_SetConfig+0x17e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80025e2:	4a56      	ldr	r2, [pc, #344]	; (800273c <UART_SetConfig+0x200>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d110      	bne.n	800260a <UART_SetConfig+0xce>
 80025e8:	4b50      	ldr	r3, [pc, #320]	; (800272c <UART_SetConfig+0x1f0>)
 80025ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ec:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80025f0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80025f4:	d07d      	beq.n	80026f2 <UART_SetConfig+0x1b6>
 80025f6:	d805      	bhi.n	8002604 <UART_SetConfig+0xc8>
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	f000 8086 	beq.w	800270a <UART_SetConfig+0x1ce>
 80025fe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002602:	e7e2      	b.n	80025ca <UART_SetConfig+0x8e>
 8002604:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002608:	e7e5      	b.n	80025d6 <UART_SetConfig+0x9a>
 800260a:	4a4d      	ldr	r2, [pc, #308]	; (8002740 <UART_SetConfig+0x204>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d10f      	bne.n	8002630 <UART_SetConfig+0xf4>
 8002610:	4b46      	ldr	r3, [pc, #280]	; (800272c <UART_SetConfig+0x1f0>)
 8002612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002614:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002618:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800261c:	d069      	beq.n	80026f2 <UART_SetConfig+0x1b6>
 800261e:	d804      	bhi.n	800262a <UART_SetConfig+0xee>
 8002620:	2b00      	cmp	r3, #0
 8002622:	d072      	beq.n	800270a <UART_SetConfig+0x1ce>
 8002624:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002628:	e7cf      	b.n	80025ca <UART_SetConfig+0x8e>
 800262a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800262e:	e7d2      	b.n	80025d6 <UART_SetConfig+0x9a>
 8002630:	4a44      	ldr	r2, [pc, #272]	; (8002744 <UART_SetConfig+0x208>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d1cb      	bne.n	80025ce <UART_SetConfig+0x92>
 8002636:	4b3d      	ldr	r3, [pc, #244]	; (800272c <UART_SetConfig+0x1f0>)
 8002638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263a:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800263e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002642:	d056      	beq.n	80026f2 <UART_SetConfig+0x1b6>
 8002644:	d804      	bhi.n	8002650 <UART_SetConfig+0x114>
 8002646:	2b00      	cmp	r3, #0
 8002648:	d05f      	beq.n	800270a <UART_SetConfig+0x1ce>
 800264a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800264e:	e7bc      	b.n	80025ca <UART_SetConfig+0x8e>
 8002650:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002654:	e7bf      	b.n	80025d6 <UART_SetConfig+0x9a>
        pclk = (uint32_t) HSI_VALUE;
 8002656:	4838      	ldr	r0, [pc, #224]	; (8002738 <UART_SetConfig+0x1fc>)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002658:	6862      	ldr	r2, [r4, #4]
 800265a:	0853      	lsrs	r3, r2, #1
 800265c:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8002660:	fbb0 f0f2 	udiv	r0, r0, r2
 8002664:	b283      	uxth	r3, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002666:	f1a3 0110 	sub.w	r1, r3, #16
 800266a:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800266e:	4291      	cmp	r1, r2
 8002670:	d8ad      	bhi.n	80025ce <UART_SetConfig+0x92>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002672:	f020 000f 	bic.w	r0, r0, #15
        huart->Instance->BRR = brrtemp;
 8002676:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002678:	b280      	uxth	r0, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800267a:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 800267e:	4318      	orrs	r0, r3
 8002680:	60d0      	str	r0, [r2, #12]
 8002682:	e049      	b.n	8002718 <UART_SetConfig+0x1dc>
    switch (clocksource)
 8002684:	2b08      	cmp	r3, #8
 8002686:	d8a2      	bhi.n	80025ce <UART_SetConfig+0x92>
 8002688:	a201      	add	r2, pc, #4	; (adr r2, 8002690 <UART_SetConfig+0x154>)
 800268a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800268e:	bf00      	nop
 8002690:	080026b5 	.word	0x080026b5
 8002694:	080026db 	.word	0x080026db
 8002698:	080025df 	.word	0x080025df
 800269c:	080025cf 	.word	0x080025cf
 80026a0:	080026e1 	.word	0x080026e1
 80026a4:	080025cf 	.word	0x080025cf
 80026a8:	080025cf 	.word	0x080025cf
 80026ac:	080025cf 	.word	0x080025cf
 80026b0:	080026f9 	.word	0x080026f9
        pclk = HAL_RCC_GetPCLK1Freq();
 80026b4:	f7ff fd4c 	bl	8002150 <HAL_RCC_GetPCLK1Freq>
        pclk = 0U;
        ret = HAL_ERROR;
        break;
    }

    if (pclk != 0U)
 80026b8:	b370      	cbz	r0, 8002718 <UART_SetConfig+0x1dc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80026ba:	6862      	ldr	r2, [r4, #4]
 80026bc:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 80026c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80026c4:	b29b      	uxth	r3, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80026c6:	f1a3 0110 	sub.w	r1, r3, #16
 80026ca:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80026ce:	4291      	cmp	r1, r2
 80026d0:	f63f af7d 	bhi.w	80025ce <UART_SetConfig+0x92>
      {
        huart->Instance->BRR = usartdiv;
 80026d4:	6822      	ldr	r2, [r4, #0]
 80026d6:	60d3      	str	r3, [r2, #12]
 80026d8:	e01e      	b.n	8002718 <UART_SetConfig+0x1dc>
        pclk = HAL_RCC_GetPCLK2Freq();
 80026da:	f7ff fd51 	bl	8002180 <HAL_RCC_GetPCLK2Freq>
        break;
 80026de:	e7eb      	b.n	80026b8 <UART_SetConfig+0x17c>
        pclk = HAL_RCC_GetSysClockFreq();
 80026e0:	f7ff fc5e 	bl	8001fa0 <HAL_RCC_GetSysClockFreq>
        break;
 80026e4:	e7e8      	b.n	80026b8 <UART_SetConfig+0x17c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80026e6:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80026ea:	d1f6      	bne.n	80026da <UART_SetConfig+0x19e>
        pclk = HAL_RCC_GetPCLK2Freq();
 80026ec:	f7ff fd48 	bl	8002180 <HAL_RCC_GetPCLK2Freq>
        break;
 80026f0:	e010      	b.n	8002714 <UART_SetConfig+0x1d8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80026f2:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80026f6:	d0af      	beq.n	8002658 <UART_SetConfig+0x11c>
        pclk = (uint32_t) LSE_VALUE;
 80026f8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80026fc:	e7dd      	b.n	80026ba <UART_SetConfig+0x17e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80026fe:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002702:	d1ed      	bne.n	80026e0 <UART_SetConfig+0x1a4>
        pclk = HAL_RCC_GetSysClockFreq();
 8002704:	f7ff fc4c 	bl	8001fa0 <HAL_RCC_GetSysClockFreq>
        break;
 8002708:	e004      	b.n	8002714 <UART_SetConfig+0x1d8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800270a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800270e:	d1d1      	bne.n	80026b4 <UART_SetConfig+0x178>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002710:	f7ff fd1e 	bl	8002150 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8002714:	2800      	cmp	r0, #0
 8002716:	d19f      	bne.n	8002658 <UART_SetConfig+0x11c>
 8002718:	2000      	movs	r0, #0
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800271a:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 800271c:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64

  return ret;
}
 8002720:	bd38      	pop	{r3, r4, r5, pc}
 8002722:	bf00      	nop
 8002724:	efff69f3 	.word	0xefff69f3
 8002728:	40013800 	.word	0x40013800
 800272c:	40021000 	.word	0x40021000
 8002730:	0800448c 	.word	0x0800448c
 8002734:	40004400 	.word	0x40004400
 8002738:	007a1200 	.word	0x007a1200
 800273c:	40004800 	.word	0x40004800
 8002740:	40004c00 	.word	0x40004c00
 8002744:	40005000 	.word	0x40005000

08002748 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002748:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800274a:	07da      	lsls	r2, r3, #31
{
 800274c:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800274e:	d506      	bpl.n	800275e <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002750:	6801      	ldr	r1, [r0, #0]
 8002752:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8002754:	684a      	ldr	r2, [r1, #4]
 8002756:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800275a:	4322      	orrs	r2, r4
 800275c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800275e:	079c      	lsls	r4, r3, #30
 8002760:	d506      	bpl.n	8002770 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002762:	6801      	ldr	r1, [r0, #0]
 8002764:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8002766:	684a      	ldr	r2, [r1, #4]
 8002768:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800276c:	4322      	orrs	r2, r4
 800276e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002770:	0759      	lsls	r1, r3, #29
 8002772:	d506      	bpl.n	8002782 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002774:	6801      	ldr	r1, [r0, #0]
 8002776:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8002778:	684a      	ldr	r2, [r1, #4]
 800277a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800277e:	4322      	orrs	r2, r4
 8002780:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002782:	071a      	lsls	r2, r3, #28
 8002784:	d506      	bpl.n	8002794 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002786:	6801      	ldr	r1, [r0, #0]
 8002788:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800278a:	684a      	ldr	r2, [r1, #4]
 800278c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002790:	4322      	orrs	r2, r4
 8002792:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002794:	06dc      	lsls	r4, r3, #27
 8002796:	d506      	bpl.n	80027a6 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002798:	6801      	ldr	r1, [r0, #0]
 800279a:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800279c:	688a      	ldr	r2, [r1, #8]
 800279e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80027a2:	4322      	orrs	r2, r4
 80027a4:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80027a6:	0699      	lsls	r1, r3, #26
 80027a8:	d506      	bpl.n	80027b8 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80027aa:	6801      	ldr	r1, [r0, #0]
 80027ac:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80027ae:	688a      	ldr	r2, [r1, #8]
 80027b0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80027b4:	4322      	orrs	r2, r4
 80027b6:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80027b8:	065a      	lsls	r2, r3, #25
 80027ba:	d50f      	bpl.n	80027dc <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80027bc:	6801      	ldr	r1, [r0, #0]
 80027be:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80027c0:	684a      	ldr	r2, [r1, #4]
 80027c2:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80027c6:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80027c8:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80027cc:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80027ce:	d105      	bne.n	80027dc <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80027d0:	684a      	ldr	r2, [r1, #4]
 80027d2:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80027d4:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80027d8:	4322      	orrs	r2, r4
 80027da:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80027dc:	061b      	lsls	r3, r3, #24
 80027de:	d506      	bpl.n	80027ee <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80027e0:	6802      	ldr	r2, [r0, #0]
 80027e2:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80027e4:	6853      	ldr	r3, [r2, #4]
 80027e6:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80027ea:	430b      	orrs	r3, r1
 80027ec:	6053      	str	r3, [r2, #4]
  }
}
 80027ee:	bd10      	pop	{r4, pc}

080027f0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80027f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80027f4:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80027f8:	4604      	mov	r4, r0
 80027fa:	460e      	mov	r6, r1
 80027fc:	4615      	mov	r5, r2
 80027fe:	461f      	mov	r7, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002800:	6822      	ldr	r2, [r4, #0]
 8002802:	69d3      	ldr	r3, [r2, #28]
 8002804:	ea36 0303 	bics.w	r3, r6, r3
 8002808:	bf0c      	ite	eq
 800280a:	2301      	moveq	r3, #1
 800280c:	2300      	movne	r3, #0
 800280e:	42ab      	cmp	r3, r5
 8002810:	d001      	beq.n	8002816 <UART_WaitOnFlagUntilTimeout+0x26>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 8002812:	2000      	movs	r0, #0
 8002814:	e01a      	b.n	800284c <UART_WaitOnFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 8002816:	f1b8 3fff 	cmp.w	r8, #4294967295
 800281a:	d0f2      	beq.n	8002802 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800281c:	f7fe f872 	bl	8000904 <HAL_GetTick>
 8002820:	1bc0      	subs	r0, r0, r7
 8002822:	4540      	cmp	r0, r8
 8002824:	6820      	ldr	r0, [r4, #0]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002826:	6803      	ldr	r3, [r0, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002828:	d802      	bhi.n	8002830 <UART_WaitOnFlagUntilTimeout+0x40>
 800282a:	f1b8 0f00 	cmp.w	r8, #0
 800282e:	d10f      	bne.n	8002850 <UART_WaitOnFlagUntilTimeout+0x60>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002830:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002834:	6003      	str	r3, [r0, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002836:	6883      	ldr	r3, [r0, #8]
 8002838:	f023 0301 	bic.w	r3, r3, #1
 800283c:	6083      	str	r3, [r0, #8]
        huart->gState = HAL_UART_STATE_READY;
 800283e:	2320      	movs	r3, #32
 8002840:	67a3      	str	r3, [r4, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002842:	67e3      	str	r3, [r4, #124]	; 0x7c
          __HAL_UNLOCK(huart);
 8002844:	2300      	movs	r3, #0
 8002846:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
          return HAL_TIMEOUT;
 800284a:	2003      	movs	r0, #3
}
 800284c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002850:	075a      	lsls	r2, r3, #29
 8002852:	d5d5      	bpl.n	8002800 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002854:	69c3      	ldr	r3, [r0, #28]
 8002856:	051b      	lsls	r3, r3, #20
 8002858:	d5d2      	bpl.n	8002800 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800285a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800285e:	6203      	str	r3, [r0, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002860:	6803      	ldr	r3, [r0, #0]
 8002862:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002866:	6003      	str	r3, [r0, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002868:	6883      	ldr	r3, [r0, #8]
 800286a:	f023 0301 	bic.w	r3, r3, #1
 800286e:	6083      	str	r3, [r0, #8]
          huart->gState = HAL_UART_STATE_READY;
 8002870:	2320      	movs	r3, #32
 8002872:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002874:	67e3      	str	r3, [r4, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002876:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 800287a:	e7e3      	b.n	8002844 <UART_WaitOnFlagUntilTimeout+0x54>

0800287c <HAL_UART_Transmit>:
{
 800287c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8002880:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8002882:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8002884:	2b20      	cmp	r3, #32
{
 8002886:	4604      	mov	r4, r0
 8002888:	460e      	mov	r6, r1
 800288a:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 800288c:	d14e      	bne.n	800292c <HAL_UART_Transmit+0xb0>
    if ((pData == NULL) || (Size == 0U))
 800288e:	2900      	cmp	r1, #0
 8002890:	d04a      	beq.n	8002928 <HAL_UART_Transmit+0xac>
 8002892:	2a00      	cmp	r2, #0
 8002894:	d048      	beq.n	8002928 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 8002896:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 800289a:	2b01      	cmp	r3, #1
 800289c:	d046      	beq.n	800292c <HAL_UART_Transmit+0xb0>
 800289e:	2301      	movs	r3, #1
 80028a0:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028a4:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80028a6:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028a8:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80028ac:	6783      	str	r3, [r0, #120]	; 0x78
    tickstart = HAL_GetTick();
 80028ae:	f7fe f829 	bl	8000904 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028b2:	68a2      	ldr	r2, [r4, #8]
    huart->TxXferSize  = Size;
 80028b4:	f8a4 7050 	strh.w	r7, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028b8:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    tickstart = HAL_GetTick();
 80028bc:	4603      	mov	r3, r0
    huart->TxXferCount = Size;
 80028be:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028c2:	d103      	bne.n	80028cc <HAL_UART_Transmit+0x50>
 80028c4:	6922      	ldr	r2, [r4, #16]
 80028c6:	b90a      	cbnz	r2, 80028cc <HAL_UART_Transmit+0x50>
 80028c8:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 80028ca:	4616      	mov	r6, r2
    __HAL_UNLOCK(huart);
 80028cc:	2200      	movs	r2, #0
 80028ce:	f884 2074 	strb.w	r2, [r4, #116]	; 0x74
    while (huart->TxXferCount > 0U)
 80028d2:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80028d6:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 80028da:	b292      	uxth	r2, r2
 80028dc:	b93a      	cbnz	r2, 80028ee <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80028de:	2140      	movs	r1, #64	; 0x40
 80028e0:	4620      	mov	r0, r4
 80028e2:	f7ff ff85 	bl	80027f0 <UART_WaitOnFlagUntilTimeout>
 80028e6:	b950      	cbnz	r0, 80028fe <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 80028e8:	2320      	movs	r3, #32
 80028ea:	67a3      	str	r3, [r4, #120]	; 0x78
    return HAL_OK;
 80028ec:	e008      	b.n	8002900 <HAL_UART_Transmit+0x84>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80028ee:	2200      	movs	r2, #0
 80028f0:	2180      	movs	r1, #128	; 0x80
 80028f2:	4620      	mov	r0, r4
 80028f4:	9303      	str	r3, [sp, #12]
 80028f6:	f7ff ff7b 	bl	80027f0 <UART_WaitOnFlagUntilTimeout>
 80028fa:	9b03      	ldr	r3, [sp, #12]
 80028fc:	b118      	cbz	r0, 8002906 <HAL_UART_Transmit+0x8a>
        return HAL_TIMEOUT;
 80028fe:	2003      	movs	r0, #3
}
 8002900:	b004      	add	sp, #16
 8002902:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (pdata8bits == NULL)
 8002906:	6821      	ldr	r1, [r4, #0]
 8002908:	b95e      	cbnz	r6, 8002922 <HAL_UART_Transmit+0xa6>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800290a:	f835 2b02 	ldrh.w	r2, [r5], #2
 800290e:	f3c2 0208 	ubfx	r2, r2, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002912:	850a      	strh	r2, [r1, #40]	; 0x28
      huart->TxXferCount--;
 8002914:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8002918:	3a01      	subs	r2, #1
 800291a:	b292      	uxth	r2, r2
 800291c:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 8002920:	e7d7      	b.n	80028d2 <HAL_UART_Transmit+0x56>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002922:	f816 2b01 	ldrb.w	r2, [r6], #1
 8002926:	e7f4      	b.n	8002912 <HAL_UART_Transmit+0x96>
      return  HAL_ERROR;
 8002928:	2001      	movs	r0, #1
 800292a:	e7e9      	b.n	8002900 <HAL_UART_Transmit+0x84>
    return HAL_BUSY;
 800292c:	2002      	movs	r0, #2
 800292e:	e7e7      	b.n	8002900 <HAL_UART_Transmit+0x84>

08002930 <UART_CheckIdleState>:
{
 8002930:	b530      	push	{r4, r5, lr}
 8002932:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002934:	2500      	movs	r5, #0
{
 8002936:	b085      	sub	sp, #20
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002938:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
  tickstart = HAL_GetTick();
 800293c:	f7fd ffe2 	bl	8000904 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002940:	6822      	ldr	r2, [r4, #0]
 8002942:	6812      	ldr	r2, [r2, #0]
 8002944:	0711      	lsls	r1, r2, #28
  tickstart = HAL_GetTick();
 8002946:	4603      	mov	r3, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002948:	d415      	bmi.n	8002976 <UART_CheckIdleState+0x46>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800294a:	6822      	ldr	r2, [r4, #0]
 800294c:	6812      	ldr	r2, [r2, #0]
 800294e:	0752      	lsls	r2, r2, #29
 8002950:	d509      	bpl.n	8002966 <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002952:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8002956:	9200      	str	r2, [sp, #0]
 8002958:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800295c:	2200      	movs	r2, #0
 800295e:	4620      	mov	r0, r4
 8002960:	f7ff ff46 	bl	80027f0 <UART_WaitOnFlagUntilTimeout>
 8002964:	b9a0      	cbnz	r0, 8002990 <UART_CheckIdleState+0x60>
  huart->gState = HAL_UART_STATE_READY;
 8002966:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002968:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800296a:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 800296c:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8002970:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002972:	6620      	str	r0, [r4, #96]	; 0x60
  return HAL_OK;
 8002974:	e00d      	b.n	8002992 <UART_CheckIdleState+0x62>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002976:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 800297a:	9200      	str	r2, [sp, #0]
 800297c:	9003      	str	r0, [sp, #12]
 800297e:	462a      	mov	r2, r5
 8002980:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002984:	4620      	mov	r0, r4
 8002986:	f7ff ff33 	bl	80027f0 <UART_WaitOnFlagUntilTimeout>
 800298a:	9b03      	ldr	r3, [sp, #12]
 800298c:	2800      	cmp	r0, #0
 800298e:	d0dc      	beq.n	800294a <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 8002990:	2003      	movs	r0, #3
}
 8002992:	b005      	add	sp, #20
 8002994:	bd30      	pop	{r4, r5, pc}

08002996 <HAL_UART_Init>:
{
 8002996:	b510      	push	{r4, lr}
  if (huart == NULL)
 8002998:	4604      	mov	r4, r0
 800299a:	b340      	cbz	r0, 80029ee <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 800299c:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800299e:	b91b      	cbnz	r3, 80029a8 <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 80029a0:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    HAL_UART_MspInit(huart);
 80029a4:	f7fd fe3c 	bl	8000620 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80029a8:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80029aa:	2324      	movs	r3, #36	; 0x24
 80029ac:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 80029ae:	6813      	ldr	r3, [r2, #0]
 80029b0:	f023 0301 	bic.w	r3, r3, #1
 80029b4:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80029b6:	4620      	mov	r0, r4
 80029b8:	f7ff fdc0 	bl	800253c <UART_SetConfig>
 80029bc:	2801      	cmp	r0, #1
 80029be:	d016      	beq.n	80029ee <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80029c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80029c2:	b113      	cbz	r3, 80029ca <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 80029c4:	4620      	mov	r0, r4
 80029c6:	f7ff febf 	bl	8002748 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029ca:	6823      	ldr	r3, [r4, #0]
 80029cc:	685a      	ldr	r2, [r3, #4]
 80029ce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80029d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029d4:	689a      	ldr	r2, [r3, #8]
 80029d6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80029da:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 80029e2:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 80029e4:	601a      	str	r2, [r3, #0]
}
 80029e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 80029ea:	f7ff bfa1 	b.w	8002930 <UART_CheckIdleState>
}
 80029ee:	2001      	movs	r0, #1
 80029f0:	bd10      	pop	{r4, pc}

080029f2 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80029f2:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 80029f6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80029fa:	045b      	lsls	r3, r3, #17
 80029fc:	0c5b      	lsrs	r3, r3, #17
 80029fe:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 8002a02:	2000      	movs	r0, #0
 8002a04:	4770      	bx	lr

08002a06 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002a06:	b084      	sub	sp, #16
 8002a08:	b510      	push	{r4, lr}
 8002a0a:	ac03      	add	r4, sp, #12
 8002a0c:	e884 000e 	stmia.w	r4, {r1, r2, r3}

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;

  return HAL_OK;
}
 8002a10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8002a14:	2301      	movs	r3, #1
 8002a16:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  USBx->CNTR = 0U;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
}
 8002a20:	b004      	add	sp, #16
  USBx->ISTR = 0U;
 8002a22:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  USBx->BTABLE = BTABLE_ADDRESS;
 8002a26:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	4770      	bx	lr

08002a2e <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 8002a2e:	b911      	cbnz	r1, 8002a36 <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8002a30:	2380      	movs	r3, #128	; 0x80
 8002a32:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }

  return HAL_OK;
}
 8002a36:	2000      	movs	r0, #0
 8002a38:	4770      	bx	lr

08002a3a <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8002a3a:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 8002a3e:	b280      	uxth	r0, r0
 8002a40:	4770      	bx	lr

08002a42 <USB_WritePMA>:
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8002a42:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8002a46:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8002a48:	4410      	add	r0, r2
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8002a4a:	085b      	lsrs	r3, r3, #1
 8002a4c:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8002a50:	1a40      	subs	r0, r0, r1

  for (i = n; i != 0U; i--)
 8002a52:	4299      	cmp	r1, r3
 8002a54:	d100      	bne.n	8002a58 <USB_WritePMA+0x16>
    pdwVal++;
#endif

    pBuf++;
  }
}
 8002a56:	4770      	bx	lr
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8002a58:	880a      	ldrh	r2, [r1, #0]
    *pdwVal = (uint16_t)temp2;
 8002a5a:	5242      	strh	r2, [r0, r1]
    pBuf++;
 8002a5c:	3102      	adds	r1, #2
  for (i = n; i != 0U; i--)
 8002a5e:	e7f8      	b.n	8002a52 <USB_WritePMA+0x10>

08002a60 <USB_EPStartXfer>:
{
 8002a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (ep->is_in == 1U)
 8002a62:	784a      	ldrb	r2, [r1, #1]
 8002a64:	7b0f      	ldrb	r7, [r1, #12]
 8002a66:	2a01      	cmp	r2, #1
{
 8002a68:	4605      	mov	r5, r0
 8002a6a:	460c      	mov	r4, r1
  if (ep->is_in == 1U)
 8002a6c:	f040 81ab 	bne.w	8002dc6 <USB_EPStartXfer+0x366>
    if (ep->xfer_len > ep->maxpacket)
 8002a70:	690a      	ldr	r2, [r1, #16]
 8002a72:	698e      	ldr	r6, [r1, #24]
 8002a74:	6949      	ldr	r1, [r1, #20]
 8002a76:	4296      	cmp	r6, r2
 8002a78:	bf28      	it	cs
 8002a7a:	4616      	movcs	r6, r2
    if (ep->doublebuffer == 0U)
 8002a7c:	bb0f      	cbnz	r7, 8002ac2 <USB_EPStartXfer+0x62>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8002a7e:	b2b6      	uxth	r6, r6
 8002a80:	88e2      	ldrh	r2, [r4, #6]
 8002a82:	4633      	mov	r3, r6
 8002a84:	f7ff ffdd 	bl	8002a42 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8002a88:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8002a8c:	7823      	ldrb	r3, [r4, #0]
 8002a8e:	f205 4102 	addw	r1, r5, #1026	; 0x402
 8002a92:	fa11 f282 	uxtah	r2, r1, r2
 8002a96:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8002a9a:	8016      	strh	r6, [r2, #0]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8002a9c:	7822      	ldrb	r2, [r4, #0]
 8002a9e:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8002aa2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002aa6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002aaa:	041b      	lsls	r3, r3, #16
 8002aac:	0c1b      	lsrs	r3, r3, #16
 8002aae:	f083 0330 	eor.w	r3, r3, #48	; 0x30
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002ab2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ab6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002aba:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
  return HAL_OK;
 8002abe:	2000      	movs	r0, #0
}
 8002ac0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (ep->type == EP_TYPE_BULK)
 8002ac2:	78e3      	ldrb	r3, [r4, #3]
 8002ac4:	7827      	ldrb	r7, [r4, #0]
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	f040 813f 	bne.w	8002d4a <USB_EPStartXfer+0x2ea>
        if (ep->xfer_len_db > ep->maxpacket)
 8002acc:	6a23      	ldr	r3, [r4, #32]
 8002ace:	429a      	cmp	r2, r3
          PCD_SET_EP_DBUF(USBx, ep->num);
 8002ad0:	f830 2027 	ldrh.w	r2, [r0, r7, lsl #2]
        if (ep->xfer_len_db > ep->maxpacket)
 8002ad4:	f080 8120 	bcs.w	8002d18 <USB_EPStartXfer+0x2b8>
          PCD_SET_EP_DBUF(USBx, ep->num);
 8002ad8:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002adc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002ae0:	0412      	lsls	r2, r2, #16
 8002ae2:	0c12      	lsrs	r2, r2, #16
 8002ae4:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 8002ae8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002aec:	f820 2027 	strh.w	r2, [r0, r7, lsl #2]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8002af0:	7820      	ldrb	r0, [r4, #0]
 8002af2:	f835 2020 	ldrh.w	r2, [r5, r0, lsl #2]
          ep->xfer_len_db -= len;
 8002af6:	1b9b      	subs	r3, r3, r6
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8002af8:	f012 0f40 	tst.w	r2, #64	; 0x40
          ep->xfer_len_db -= len;
 8002afc:	6223      	str	r3, [r4, #32]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8002afe:	7862      	ldrb	r2, [r4, #1]
 8002b00:	b2b3      	uxth	r3, r6
 8002b02:	f000 8086 	beq.w	8002c12 <USB_EPStartXfer+0x1b2>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002b06:	2a00      	cmp	r2, #0
 8002b08:	d153      	bne.n	8002bb2 <USB_EPStartXfer+0x152>
 8002b0a:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8002b0e:	f205 4706 	addw	r7, r5, #1030	; 0x406
 8002b12:	fa17 f282 	uxtah	r2, r7, r2
 8002b16:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8002b1a:	2e00      	cmp	r6, #0
 8002b1c:	d138      	bne.n	8002b90 <USB_EPStartXfer+0x130>
 8002b1e:	8810      	ldrh	r0, [r2, #0]
 8002b20:	f420 40f8 	bic.w	r0, r0, #31744	; 0x7c00
 8002b24:	0400      	lsls	r0, r0, #16
 8002b26:	0c00      	lsrs	r0, r0, #16
 8002b28:	8010      	strh	r0, [r2, #0]
 8002b2a:	8810      	ldrh	r0, [r2, #0]
 8002b2c:	ea6f 4040 	mvn.w	r0, r0, lsl #17
 8002b30:	ea6f 4050 	mvn.w	r0, r0, lsr #17
 8002b34:	b280      	uxth	r0, r0
 8002b36:	8010      	strh	r0, [r2, #0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002b38:	8962      	ldrh	r2, [r4, #10]
 8002b3a:	4628      	mov	r0, r5
 8002b3c:	f7ff ff81 	bl	8002a42 <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 8002b40:	6a20      	ldr	r0, [r4, #32]
 8002b42:	6923      	ldr	r3, [r4, #16]
            ep->xfer_buff += len;
 8002b44:	6961      	ldr	r1, [r4, #20]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002b46:	7862      	ldrb	r2, [r4, #1]
            if (ep->xfer_len_db > ep->maxpacket)
 8002b48:	4298      	cmp	r0, r3
              ep->xfer_len_db -= len;
 8002b4a:	bf8c      	ite	hi
 8002b4c:	1b83      	subhi	r3, r0, r6
              ep->xfer_len_db = 0U;
 8002b4e:	2300      	movls	r3, #0
            ep->xfer_buff += len;
 8002b50:	4431      	add	r1, r6
 8002b52:	bf88      	it	hi
 8002b54:	4630      	movhi	r0, r6
 8002b56:	6223      	str	r3, [r4, #32]
 8002b58:	6161      	str	r1, [r4, #20]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002b5a:	b283      	uxth	r3, r0
 8002b5c:	2a00      	cmp	r2, #0
 8002b5e:	d14b      	bne.n	8002bf8 <USB_EPStartXfer+0x198>
 8002b60:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8002b64:	7826      	ldrb	r6, [r4, #0]
 8002b66:	f205 4702 	addw	r7, r5, #1026	; 0x402
 8002b6a:	fa17 f282 	uxtah	r2, r7, r2
 8002b6e:	eb02 02c6 	add.w	r2, r2, r6, lsl #3
 8002b72:	bb50      	cbnz	r0, 8002bca <USB_EPStartXfer+0x16a>
 8002b74:	8810      	ldrh	r0, [r2, #0]
 8002b76:	f420 40f8 	bic.w	r0, r0, #31744	; 0x7c00
 8002b7a:	0400      	lsls	r0, r0, #16
 8002b7c:	0c00      	lsrs	r0, r0, #16
 8002b7e:	8010      	strh	r0, [r2, #0]
 8002b80:	8810      	ldrh	r0, [r2, #0]
 8002b82:	ea6f 4040 	mvn.w	r0, r0, lsl #17
 8002b86:	ea6f 4050 	mvn.w	r0, r0, lsr #17
 8002b8a:	b280      	uxth	r0, r0
 8002b8c:	8010      	strh	r0, [r2, #0]
 8002b8e:	e025      	b.n	8002bdc <USB_EPStartXfer+0x17c>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002b90:	2e3e      	cmp	r6, #62	; 0x3e
 8002b92:	d805      	bhi.n	8002ba0 <USB_EPStartXfer+0x140>
 8002b94:	0870      	lsrs	r0, r6, #1
 8002b96:	07f7      	lsls	r7, r6, #31
 8002b98:	bf48      	it	mi
 8002b9a:	3001      	addmi	r0, #1
 8002b9c:	0280      	lsls	r0, r0, #10
 8002b9e:	e7c9      	b.n	8002b34 <USB_EPStartXfer+0xd4>
 8002ba0:	0977      	lsrs	r7, r6, #5
 8002ba2:	06f0      	lsls	r0, r6, #27
 8002ba4:	48a7      	ldr	r0, [pc, #668]	; (8002e44 <USB_EPStartXfer+0x3e4>)
 8002ba6:	bf08      	it	eq
 8002ba8:	f107 37ff 	addeq.w	r7, r7, #4294967295
 8002bac:	ea40 2087 	orr.w	r0, r0, r7, lsl #10
 8002bb0:	e7c0      	b.n	8002b34 <USB_EPStartXfer+0xd4>
 8002bb2:	2a01      	cmp	r2, #1
 8002bb4:	d1c0      	bne.n	8002b38 <USB_EPStartXfer+0xd8>
 8002bb6:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8002bba:	f205 4706 	addw	r7, r5, #1030	; 0x406
 8002bbe:	fa17 f282 	uxtah	r2, r7, r2
 8002bc2:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8002bc6:	8013      	strh	r3, [r2, #0]
 8002bc8:	e7b6      	b.n	8002b38 <USB_EPStartXfer+0xd8>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002bca:	283e      	cmp	r0, #62	; 0x3e
 8002bcc:	d80b      	bhi.n	8002be6 <USB_EPStartXfer+0x186>
 8002bce:	0846      	lsrs	r6, r0, #1
 8002bd0:	07c7      	lsls	r7, r0, #31
 8002bd2:	bf48      	it	mi
 8002bd4:	3601      	addmi	r6, #1
 8002bd6:	02b6      	lsls	r6, r6, #10
 8002bd8:	b2b6      	uxth	r6, r6
 8002bda:	8016      	strh	r6, [r2, #0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002bdc:	8922      	ldrh	r2, [r4, #8]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002bde:	4628      	mov	r0, r5
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002be0:	f7ff ff2f 	bl	8002a42 <USB_WritePMA>
 8002be4:	e75a      	b.n	8002a9c <USB_EPStartXfer+0x3c>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002be6:	0946      	lsrs	r6, r0, #5
 8002be8:	06c0      	lsls	r0, r0, #27
 8002bea:	4896      	ldr	r0, [pc, #600]	; (8002e44 <USB_EPStartXfer+0x3e4>)
 8002bec:	bf08      	it	eq
 8002bee:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8002bf2:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
 8002bf6:	e7c8      	b.n	8002b8a <USB_EPStartXfer+0x12a>
 8002bf8:	2a01      	cmp	r2, #1
 8002bfa:	d1ef      	bne.n	8002bdc <USB_EPStartXfer+0x17c>
 8002bfc:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8002c00:	7820      	ldrb	r0, [r4, #0]
 8002c02:	f205 4602 	addw	r6, r5, #1026	; 0x402
 8002c06:	fa16 f282 	uxtah	r2, r6, r2
 8002c0a:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8002c0e:	8013      	strh	r3, [r2, #0]
 8002c10:	e7e4      	b.n	8002bdc <USB_EPStartXfer+0x17c>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002c12:	2a00      	cmp	r2, #0
 8002c14:	d153      	bne.n	8002cbe <USB_EPStartXfer+0x25e>
 8002c16:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8002c1a:	f205 4702 	addw	r7, r5, #1026	; 0x402
 8002c1e:	fa17 f282 	uxtah	r2, r7, r2
 8002c22:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8002c26:	2e00      	cmp	r6, #0
 8002c28:	d138      	bne.n	8002c9c <USB_EPStartXfer+0x23c>
 8002c2a:	8810      	ldrh	r0, [r2, #0]
 8002c2c:	f420 40f8 	bic.w	r0, r0, #31744	; 0x7c00
 8002c30:	0400      	lsls	r0, r0, #16
 8002c32:	0c00      	lsrs	r0, r0, #16
 8002c34:	8010      	strh	r0, [r2, #0]
 8002c36:	8810      	ldrh	r0, [r2, #0]
 8002c38:	ea6f 4040 	mvn.w	r0, r0, lsl #17
 8002c3c:	ea6f 4050 	mvn.w	r0, r0, lsr #17
 8002c40:	b280      	uxth	r0, r0
 8002c42:	8010      	strh	r0, [r2, #0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002c44:	8922      	ldrh	r2, [r4, #8]
 8002c46:	4628      	mov	r0, r5
 8002c48:	f7ff fefb 	bl	8002a42 <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 8002c4c:	6a20      	ldr	r0, [r4, #32]
 8002c4e:	6923      	ldr	r3, [r4, #16]
            ep->xfer_buff += len;
 8002c50:	6961      	ldr	r1, [r4, #20]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002c52:	7862      	ldrb	r2, [r4, #1]
            if (ep->xfer_len_db > ep->maxpacket)
 8002c54:	4298      	cmp	r0, r3
              ep->xfer_len_db -= len;
 8002c56:	bf8c      	ite	hi
 8002c58:	1b83      	subhi	r3, r0, r6
              ep->xfer_len_db = 0U;
 8002c5a:	2300      	movls	r3, #0
            ep->xfer_buff += len;
 8002c5c:	4431      	add	r1, r6
 8002c5e:	bf88      	it	hi
 8002c60:	4630      	movhi	r0, r6
 8002c62:	6223      	str	r3, [r4, #32]
 8002c64:	6161      	str	r1, [r4, #20]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002c66:	b283      	uxth	r3, r0
 8002c68:	2a00      	cmp	r2, #0
 8002c6a:	d148      	bne.n	8002cfe <USB_EPStartXfer+0x29e>
 8002c6c:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8002c70:	7826      	ldrb	r6, [r4, #0]
 8002c72:	f205 4706 	addw	r7, r5, #1030	; 0x406
 8002c76:	fa17 f282 	uxtah	r2, r7, r2
 8002c7a:	eb02 02c6 	add.w	r2, r2, r6, lsl #3
 8002c7e:	bb50      	cbnz	r0, 8002cd6 <USB_EPStartXfer+0x276>
 8002c80:	8810      	ldrh	r0, [r2, #0]
 8002c82:	f420 40f8 	bic.w	r0, r0, #31744	; 0x7c00
 8002c86:	0400      	lsls	r0, r0, #16
 8002c88:	0c00      	lsrs	r0, r0, #16
 8002c8a:	8010      	strh	r0, [r2, #0]
 8002c8c:	8810      	ldrh	r0, [r2, #0]
 8002c8e:	ea6f 4040 	mvn.w	r0, r0, lsl #17
 8002c92:	ea6f 4050 	mvn.w	r0, r0, lsr #17
 8002c96:	b280      	uxth	r0, r0
 8002c98:	8010      	strh	r0, [r2, #0]
 8002c9a:	e025      	b.n	8002ce8 <USB_EPStartXfer+0x288>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002c9c:	2e3e      	cmp	r6, #62	; 0x3e
 8002c9e:	d805      	bhi.n	8002cac <USB_EPStartXfer+0x24c>
 8002ca0:	0870      	lsrs	r0, r6, #1
 8002ca2:	07f7      	lsls	r7, r6, #31
 8002ca4:	bf48      	it	mi
 8002ca6:	3001      	addmi	r0, #1
 8002ca8:	0280      	lsls	r0, r0, #10
 8002caa:	e7c9      	b.n	8002c40 <USB_EPStartXfer+0x1e0>
 8002cac:	0977      	lsrs	r7, r6, #5
 8002cae:	06f0      	lsls	r0, r6, #27
 8002cb0:	4864      	ldr	r0, [pc, #400]	; (8002e44 <USB_EPStartXfer+0x3e4>)
 8002cb2:	bf08      	it	eq
 8002cb4:	f107 37ff 	addeq.w	r7, r7, #4294967295
 8002cb8:	ea40 2087 	orr.w	r0, r0, r7, lsl #10
 8002cbc:	e7c0      	b.n	8002c40 <USB_EPStartXfer+0x1e0>
 8002cbe:	2a01      	cmp	r2, #1
 8002cc0:	d1c0      	bne.n	8002c44 <USB_EPStartXfer+0x1e4>
 8002cc2:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8002cc6:	f205 4702 	addw	r7, r5, #1026	; 0x402
 8002cca:	fa17 f282 	uxtah	r2, r7, r2
 8002cce:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8002cd2:	8013      	strh	r3, [r2, #0]
 8002cd4:	e7b6      	b.n	8002c44 <USB_EPStartXfer+0x1e4>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002cd6:	283e      	cmp	r0, #62	; 0x3e
 8002cd8:	d808      	bhi.n	8002cec <USB_EPStartXfer+0x28c>
 8002cda:	0846      	lsrs	r6, r0, #1
 8002cdc:	07c0      	lsls	r0, r0, #31
 8002cde:	bf48      	it	mi
 8002ce0:	3601      	addmi	r6, #1
 8002ce2:	02b6      	lsls	r6, r6, #10
 8002ce4:	b2b6      	uxth	r6, r6
 8002ce6:	8016      	strh	r6, [r2, #0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002ce8:	8962      	ldrh	r2, [r4, #10]
 8002cea:	e778      	b.n	8002bde <USB_EPStartXfer+0x17e>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002cec:	0946      	lsrs	r6, r0, #5
 8002cee:	06c7      	lsls	r7, r0, #27
 8002cf0:	4854      	ldr	r0, [pc, #336]	; (8002e44 <USB_EPStartXfer+0x3e4>)
 8002cf2:	bf08      	it	eq
 8002cf4:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8002cf8:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
 8002cfc:	e7cb      	b.n	8002c96 <USB_EPStartXfer+0x236>
 8002cfe:	2a01      	cmp	r2, #1
 8002d00:	d1f2      	bne.n	8002ce8 <USB_EPStartXfer+0x288>
 8002d02:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8002d06:	7820      	ldrb	r0, [r4, #0]
 8002d08:	f205 4606 	addw	r6, r5, #1030	; 0x406
 8002d0c:	fa16 f282 	uxtah	r2, r6, r2
 8002d10:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8002d14:	8013      	strh	r3, [r2, #0]
 8002d16:	e7e7      	b.n	8002ce8 <USB_EPStartXfer+0x288>
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8002d18:	f422 42e2 	bic.w	r2, r2, #28928	; 0x7100
 8002d1c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002d20:	0412      	lsls	r2, r2, #16
 8002d22:	0c12      	lsrs	r2, r2, #16
 8002d24:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d28:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002d2c:	f820 2027 	strh.w	r2, [r0, r7, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8002d30:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002d34:	7826      	ldrb	r6, [r4, #0]
 8002d36:	f200 4702 	addw	r7, r0, #1026	; 0x402
 8002d3a:	fa17 f282 	uxtah	r2, r7, r2
 8002d3e:	eb02 02c6 	add.w	r2, r2, r6, lsl #3
 8002d42:	b29b      	uxth	r3, r3
 8002d44:	8013      	strh	r3, [r2, #0]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002d46:	8922      	ldrh	r2, [r4, #8]
 8002d48:	e74a      	b.n	8002be0 <USB_EPStartXfer+0x180>
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8002d4a:	f830 2027 	ldrh.w	r2, [r0, r7, lsl #2]
 8002d4e:	f012 0f40 	tst.w	r2, #64	; 0x40
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002d52:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002d56:	bf15      	itete	ne
 8002d58:	f200 4006 	addwne	r0, r0, #1030	; 0x406
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002d5c:	f205 4002 	addweq	r0, r5, #1026	; 0x402
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002d60:	fa10 f282 	uxtahne	r2, r0, r2
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002d64:	fa10 f282 	uxtaheq	r2, r0, r2
 8002d68:	b2b3      	uxth	r3, r6
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002d6a:	bf15      	itete	ne
 8002d6c:	f822 3037 	strhne.w	r3, [r2, r7, lsl #3]
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002d70:	f822 3037 	strheq.w	r3, [r2, r7, lsl #3]
          pmabuffer = ep->pmaaddr1;
 8002d74:	8962      	ldrhne	r2, [r4, #10]
          pmabuffer = ep->pmaaddr0;
 8002d76:	8922      	ldrheq	r2, [r4, #8]
        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002d78:	4628      	mov	r0, r5
 8002d7a:	f7ff fe62 	bl	8002a42 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8002d7e:	7863      	ldrb	r3, [r4, #1]
 8002d80:	7822      	ldrb	r2, [r4, #0]
 8002d82:	b97b      	cbnz	r3, 8002da4 <USB_EPStartXfer+0x344>
 8002d84:	b212      	sxth	r2, r2
 8002d86:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8002d8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d92:	041b      	lsls	r3, r3, #16
 8002d94:	0c1b      	lsrs	r3, r3, #16
 8002d96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d9a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002d9e:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 8002da2:	e67b      	b.n	8002a9c <USB_EPStartXfer+0x3c>
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	f47f ae79 	bne.w	8002a9c <USB_EPStartXfer+0x3c>
 8002daa:	b212      	sxth	r2, r2
 8002dac:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8002db0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002db4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002db8:	041b      	lsls	r3, r3, #16
 8002dba:	0c1b      	lsrs	r3, r3, #16
 8002dbc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002dc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dc4:	e7eb      	b.n	8002d9e <USB_EPStartXfer+0x33e>
    if (ep->doublebuffer == 0U)
 8002dc6:	2f00      	cmp	r7, #0
 8002dc8:	d13e      	bne.n	8002e48 <USB_EPStartXfer+0x3e8>
      if (ep->xfer_len > ep->maxpacket)
 8002dca:	698a      	ldr	r2, [r1, #24]
 8002dcc:	690b      	ldr	r3, [r1, #16]
 8002dce:	429a      	cmp	r2, r3
        ep->xfer_len -= len;
 8002dd0:	bf84      	itt	hi
 8002dd2:	1ad7      	subhi	r7, r2, r3
 8002dd4:	461a      	movhi	r2, r3
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8002dd6:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002dda:	618f      	str	r7, [r1, #24]
 8002ddc:	f200 4006 	addw	r0, r0, #1030	; 0x406
 8002de0:	7809      	ldrb	r1, [r1, #0]
 8002de2:	fa10 f383 	uxtah	r3, r0, r3
 8002de6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8002dea:	b96a      	cbnz	r2, 8002e08 <USB_EPStartXfer+0x3a8>
 8002dec:	881a      	ldrh	r2, [r3, #0]
 8002dee:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8002df2:	0412      	lsls	r2, r2, #16
 8002df4:	0c12      	lsrs	r2, r2, #16
 8002df6:	801a      	strh	r2, [r3, #0]
 8002df8:	881a      	ldrh	r2, [r3, #0]
 8002dfa:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8002dfe:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002e02:	b292      	uxth	r2, r2
 8002e04:	801a      	strh	r2, [r3, #0]
 8002e06:	e008      	b.n	8002e1a <USB_EPStartXfer+0x3ba>
 8002e08:	2a3e      	cmp	r2, #62	; 0x3e
 8002e0a:	d812      	bhi.n	8002e32 <USB_EPStartXfer+0x3d2>
 8002e0c:	0851      	lsrs	r1, r2, #1
 8002e0e:	07d0      	lsls	r0, r2, #31
 8002e10:	bf48      	it	mi
 8002e12:	3101      	addmi	r1, #1
 8002e14:	0289      	lsls	r1, r1, #10
 8002e16:	b289      	uxth	r1, r1
 8002e18:	8019      	strh	r1, [r3, #0]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002e1a:	7822      	ldrb	r2, [r4, #0]
 8002e1c:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8002e20:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e28:	041b      	lsls	r3, r3, #16
 8002e2a:	0c1b      	lsrs	r3, r3, #16
 8002e2c:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002e30:	e63f      	b.n	8002ab2 <USB_EPStartXfer+0x52>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8002e32:	0951      	lsrs	r1, r2, #5
 8002e34:	06d2      	lsls	r2, r2, #27
 8002e36:	4a03      	ldr	r2, [pc, #12]	; (8002e44 <USB_EPStartXfer+0x3e4>)
 8002e38:	bf08      	it	eq
 8002e3a:	f101 31ff 	addeq.w	r1, r1, #4294967295
 8002e3e:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8002e42:	e7de      	b.n	8002e02 <USB_EPStartXfer+0x3a2>
 8002e44:	ffff8000 	.word	0xffff8000
      if (ep->type == EP_TYPE_BULK)
 8002e48:	78cb      	ldrb	r3, [r1, #3]
 8002e4a:	2b02      	cmp	r3, #2
 8002e4c:	f040 8081 	bne.w	8002f52 <USB_EPStartXfer+0x4f2>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8002e50:	b9c2      	cbnz	r2, 8002e84 <USB_EPStartXfer+0x424>
 8002e52:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002e56:	780a      	ldrb	r2, [r1, #0]
 8002e58:	f200 4102 	addw	r1, r0, #1026	; 0x402
 8002e5c:	fa11 f383 	uxtah	r3, r1, r3
 8002e60:	6921      	ldr	r1, [r4, #16]
 8002e62:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002e66:	2900      	cmp	r1, #0
 8002e68:	d145      	bne.n	8002ef6 <USB_EPStartXfer+0x496>
 8002e6a:	881a      	ldrh	r2, [r3, #0]
 8002e6c:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8002e70:	0412      	lsls	r2, r2, #16
 8002e72:	0c12      	lsrs	r2, r2, #16
 8002e74:	801a      	strh	r2, [r3, #0]
 8002e76:	881a      	ldrh	r2, [r3, #0]
 8002e78:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8002e7c:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002e80:	b292      	uxth	r2, r2
 8002e82:	801a      	strh	r2, [r3, #0]
 8002e84:	7862      	ldrb	r2, [r4, #1]
 8002e86:	7823      	ldrb	r3, [r4, #0]
 8002e88:	2a00      	cmp	r2, #0
 8002e8a:	d156      	bne.n	8002f3a <USB_EPStartXfer+0x4da>
 8002e8c:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8002e90:	f205 4106 	addw	r1, r5, #1030	; 0x406
 8002e94:	fa11 f282 	uxtah	r2, r1, r2
 8002e98:	6921      	ldr	r1, [r4, #16]
 8002e9a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8002e9e:	2900      	cmp	r1, #0
 8002ea0:	d13a      	bne.n	8002f18 <USB_EPStartXfer+0x4b8>
 8002ea2:	881a      	ldrh	r2, [r3, #0]
 8002ea4:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8002ea8:	0412      	lsls	r2, r2, #16
 8002eaa:	0c12      	lsrs	r2, r2, #16
 8002eac:	801a      	strh	r2, [r3, #0]
 8002eae:	881a      	ldrh	r2, [r3, #0]
 8002eb0:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8002eb4:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002eb8:	b292      	uxth	r2, r2
 8002eba:	801a      	strh	r2, [r3, #0]
        if (ep->xfer_count != 0U)
 8002ebc:	69e3      	ldr	r3, [r4, #28]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d0ab      	beq.n	8002e1a <USB_EPStartXfer+0x3ba>
 8002ec2:	7822      	ldrb	r2, [r4, #0]
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8002ec4:	f835 1022 	ldrh.w	r1, [r5, r2, lsl #2]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8002ec8:	f244 0340 	movw	r3, #16448	; 0x4040
 8002ecc:	ea03 0001 	and.w	r0, r3, r1
 8002ed0:	438b      	bics	r3, r1
 8002ed2:	d001      	beq.n	8002ed8 <USB_EPStartXfer+0x478>
 8002ed4:	2800      	cmp	r0, #0
 8002ed6:	d1a0      	bne.n	8002e1a <USB_EPStartXfer+0x3ba>
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8002ed8:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8002edc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ee0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ee4:	041b      	lsls	r3, r3, #16
 8002ee6:	0c1b      	lsrs	r3, r3, #16
 8002ee8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002eec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002ef0:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 8002ef4:	e791      	b.n	8002e1a <USB_EPStartXfer+0x3ba>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8002ef6:	293e      	cmp	r1, #62	; 0x3e
 8002ef8:	d805      	bhi.n	8002f06 <USB_EPStartXfer+0x4a6>
 8002efa:	084a      	lsrs	r2, r1, #1
 8002efc:	07cf      	lsls	r7, r1, #31
 8002efe:	bf48      	it	mi
 8002f00:	3201      	addmi	r2, #1
 8002f02:	0292      	lsls	r2, r2, #10
 8002f04:	e7bc      	b.n	8002e80 <USB_EPStartXfer+0x420>
 8002f06:	0948      	lsrs	r0, r1, #5
 8002f08:	4a49      	ldr	r2, [pc, #292]	; (8003030 <USB_EPStartXfer+0x5d0>)
 8002f0a:	06ce      	lsls	r6, r1, #27
 8002f0c:	bf08      	it	eq
 8002f0e:	f100 30ff 	addeq.w	r0, r0, #4294967295
 8002f12:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 8002f16:	e7b3      	b.n	8002e80 <USB_EPStartXfer+0x420>
 8002f18:	293e      	cmp	r1, #62	; 0x3e
 8002f1a:	d805      	bhi.n	8002f28 <USB_EPStartXfer+0x4c8>
 8002f1c:	084a      	lsrs	r2, r1, #1
 8002f1e:	07c9      	lsls	r1, r1, #31
 8002f20:	bf48      	it	mi
 8002f22:	3201      	addmi	r2, #1
 8002f24:	0292      	lsls	r2, r2, #10
 8002f26:	e7c7      	b.n	8002eb8 <USB_EPStartXfer+0x458>
 8002f28:	0948      	lsrs	r0, r1, #5
 8002f2a:	06ca      	lsls	r2, r1, #27
 8002f2c:	4a40      	ldr	r2, [pc, #256]	; (8003030 <USB_EPStartXfer+0x5d0>)
 8002f2e:	bf08      	it	eq
 8002f30:	f100 30ff 	addeq.w	r0, r0, #4294967295
 8002f34:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 8002f38:	e7be      	b.n	8002eb8 <USB_EPStartXfer+0x458>
 8002f3a:	2a01      	cmp	r2, #1
 8002f3c:	d1be      	bne.n	8002ebc <USB_EPStartXfer+0x45c>
 8002f3e:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8002f42:	f205 4106 	addw	r1, r5, #1030	; 0x406
 8002f46:	fa11 f282 	uxtah	r2, r1, r2
 8002f4a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8002f4e:	8a22      	ldrh	r2, [r4, #16]
 8002f50:	e7b3      	b.n	8002eba <USB_EPStartXfer+0x45a>
      else if (ep->type == EP_TYPE_ISOC)
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d16a      	bne.n	800302c <USB_EPStartXfer+0x5cc>
        if (ep->xfer_len > ep->maxpacket)
 8002f56:	698b      	ldr	r3, [r1, #24]
 8002f58:	6909      	ldr	r1, [r1, #16]
 8002f5a:	428b      	cmp	r3, r1
          ep->xfer_len -= len;
 8002f5c:	bf8a      	itet	hi
 8002f5e:	1a58      	subhi	r0, r3, r1
          ep->xfer_len = 0U;
 8002f60:	2000      	movls	r0, #0
 8002f62:	460b      	movhi	r3, r1
 8002f64:	61a0      	str	r0, [r4, #24]
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8002f66:	b9b2      	cbnz	r2, 8002f96 <USB_EPStartXfer+0x536>
 8002f68:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8002f6c:	7821      	ldrb	r1, [r4, #0]
 8002f6e:	f205 4002 	addw	r0, r5, #1026	; 0x402
 8002f72:	fa10 f282 	uxtah	r2, r0, r2
 8002f76:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8002f7a:	bb3b      	cbnz	r3, 8002fcc <USB_EPStartXfer+0x56c>
 8002f7c:	8811      	ldrh	r1, [r2, #0]
 8002f7e:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 8002f82:	0409      	lsls	r1, r1, #16
 8002f84:	0c09      	lsrs	r1, r1, #16
 8002f86:	8011      	strh	r1, [r2, #0]
 8002f88:	8811      	ldrh	r1, [r2, #0]
 8002f8a:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8002f8e:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8002f92:	b289      	uxth	r1, r1
 8002f94:	8011      	strh	r1, [r2, #0]
 8002f96:	7861      	ldrb	r1, [r4, #1]
 8002f98:	7822      	ldrb	r2, [r4, #0]
 8002f9a:	2900      	cmp	r1, #0
 8002f9c:	d13a      	bne.n	8003014 <USB_EPStartXfer+0x5b4>
 8002f9e:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 8002fa2:	f205 4006 	addw	r0, r5, #1030	; 0x406
 8002fa6:	fa10 f181 	uxtah	r1, r0, r1
 8002faa:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8002fae:	b9f3      	cbnz	r3, 8002fee <USB_EPStartXfer+0x58e>
 8002fb0:	8813      	ldrh	r3, [r2, #0]
 8002fb2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002fb6:	041b      	lsls	r3, r3, #16
 8002fb8:	0c1b      	lsrs	r3, r3, #16
 8002fba:	8013      	strh	r3, [r2, #0]
 8002fbc:	8813      	ldrh	r3, [r2, #0]
 8002fbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002fc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	8013      	strh	r3, [r2, #0]
 8002fca:	e726      	b.n	8002e1a <USB_EPStartXfer+0x3ba>
 8002fcc:	2b3e      	cmp	r3, #62	; 0x3e
 8002fce:	d805      	bhi.n	8002fdc <USB_EPStartXfer+0x57c>
 8002fd0:	0859      	lsrs	r1, r3, #1
 8002fd2:	07df      	lsls	r7, r3, #31
 8002fd4:	bf48      	it	mi
 8002fd6:	3101      	addmi	r1, #1
 8002fd8:	0289      	lsls	r1, r1, #10
 8002fda:	e7da      	b.n	8002f92 <USB_EPStartXfer+0x532>
 8002fdc:	0958      	lsrs	r0, r3, #5
 8002fde:	4914      	ldr	r1, [pc, #80]	; (8003030 <USB_EPStartXfer+0x5d0>)
 8002fe0:	06de      	lsls	r6, r3, #27
 8002fe2:	bf08      	it	eq
 8002fe4:	f100 30ff 	addeq.w	r0, r0, #4294967295
 8002fe8:	ea41 2180 	orr.w	r1, r1, r0, lsl #10
 8002fec:	e7d1      	b.n	8002f92 <USB_EPStartXfer+0x532>
 8002fee:	2b3e      	cmp	r3, #62	; 0x3e
 8002ff0:	d807      	bhi.n	8003002 <USB_EPStartXfer+0x5a2>
 8002ff2:	0859      	lsrs	r1, r3, #1
 8002ff4:	07d8      	lsls	r0, r3, #31
 8002ff6:	bf48      	it	mi
 8002ff8:	3101      	addmi	r1, #1
 8002ffa:	0289      	lsls	r1, r1, #10
 8002ffc:	b289      	uxth	r1, r1
 8002ffe:	8011      	strh	r1, [r2, #0]
 8003000:	e70b      	b.n	8002e1a <USB_EPStartXfer+0x3ba>
 8003002:	0959      	lsrs	r1, r3, #5
 8003004:	06db      	lsls	r3, r3, #27
 8003006:	4b0a      	ldr	r3, [pc, #40]	; (8003030 <USB_EPStartXfer+0x5d0>)
 8003008:	bf08      	it	eq
 800300a:	f101 31ff 	addeq.w	r1, r1, #4294967295
 800300e:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8003012:	e7d8      	b.n	8002fc6 <USB_EPStartXfer+0x566>
 8003014:	2901      	cmp	r1, #1
 8003016:	f47f af00 	bne.w	8002e1a <USB_EPStartXfer+0x3ba>
 800301a:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 800301e:	f205 4006 	addw	r0, r5, #1030	; 0x406
 8003022:	fa10 f181 	uxtah	r1, r0, r1
 8003026:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800302a:	e7cc      	b.n	8002fc6 <USB_EPStartXfer+0x566>
        return HAL_ERROR;
 800302c:	2001      	movs	r0, #1
 800302e:	e547      	b.n	8002ac0 <USB_EPStartXfer+0x60>
 8003030:	ffff8000 	.word	0xffff8000

08003034 <USB_ReadPMA>:
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003034:	f502 6280 	add.w	r2, r2, #1024	; 0x400
{
 8003038:	b5f0      	push	{r4, r5, r6, r7, lr}
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800303a:	4410      	add	r0, r2
  uint32_t n = (uint32_t)wNBytes >> 1;
 800303c:	085e      	lsrs	r6, r3, #1

  for (i = n; i != 0U; i--)
 800303e:	460d      	mov	r5, r1
 8003040:	4632      	mov	r2, r6
 8003042:	1a47      	subs	r7, r0, r1
 8003044:	197c      	adds	r4, r7, r5
 8003046:	3502      	adds	r5, #2
 8003048:	b932      	cbnz	r2, 8003058 <USB_ReadPMA+0x24>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800304a:	07db      	lsls	r3, r3, #31
  {
    temp = *pdwVal;
 800304c:	bf44      	itt	mi
 800304e:	f830 3016 	ldrhmi.w	r3, [r0, r6, lsl #1]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8003052:	f801 3016 	strbmi.w	r3, [r1, r6, lsl #1]
  }
}
 8003056:	bdf0      	pop	{r4, r5, r6, r7, pc}
    temp = *(__IO uint16_t *)pdwVal;
 8003058:	8824      	ldrh	r4, [r4, #0]
 800305a:	b2a4      	uxth	r4, r4
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800305c:	f805 4c02 	strb.w	r4, [r5, #-2]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8003060:	0a24      	lsrs	r4, r4, #8
 8003062:	f805 4c01 	strb.w	r4, [r5, #-1]
  for (i = n; i != 0U; i--)
 8003066:	3a01      	subs	r2, #1
 8003068:	e7ec      	b.n	8003044 <USB_ReadPMA+0x10>
	...

0800306c <registerWrite>:




uint8_t registerWrite(uint8_t address, uint8_t cmd)
{
 800306c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t data[3];
	data[0] = address;
	data[1] = cmd;
	char result = 1;

	result = HAL_I2C_Master_Transmit(&HandleI2C, GESTURE_ADDRESS_I2C << 1, data, 2, 10);
 800306e:	230a      	movs	r3, #10
	data[0] = address;
 8003070:	f88d 000c 	strb.w	r0, [sp, #12]
	data[1] = cmd;
 8003074:	f88d 100d 	strb.w	r1, [sp, #13]
	result = HAL_I2C_Master_Transmit(&HandleI2C, GESTURE_ADDRESS_I2C << 1, data, 2, 10);
 8003078:	9300      	str	r3, [sp, #0]
 800307a:	4810      	ldr	r0, [pc, #64]	; (80030bc <registerWrite+0x50>)
 800307c:	2302      	movs	r3, #2
 800307e:	aa03      	add	r2, sp, #12
 8003080:	21e6      	movs	r1, #230	; 0xe6
 8003082:	f7fd ff01 	bl	8000e88 <HAL_I2C_Master_Transmit>

	if (result != 0)
 8003086:	4604      	mov	r4, r0
 8003088:	b130      	cbz	r0, 8003098 <registerWrite+0x2c>
	{
		strcpy((char*)ref, "\r\n Transmission Error");
 800308a:	490d      	ldr	r1, [pc, #52]	; (80030c0 <registerWrite+0x54>)
 800308c:	480d      	ldr	r0, [pc, #52]	; (80030c4 <registerWrite+0x58>)
 800308e:	f000 fa8f 	bl	80035b0 <strcpy>
		printf("Transmission Error \n");
 8003092:	480d      	ldr	r0, [pc, #52]	; (80030c8 <registerWrite+0x5c>)
 8003094:	f000 fa84 	bl	80035a0 <puts>
	}
	HAL_UART_Transmit(&huart3, ref, strlen((char*)ref), HAL_MAX_DELAY);
 8003098:	480a      	ldr	r0, [pc, #40]	; (80030c4 <registerWrite+0x58>)
 800309a:	f7fd f8a1 	bl	80001e0 <strlen>
 800309e:	4909      	ldr	r1, [pc, #36]	; (80030c4 <registerWrite+0x58>)
 80030a0:	b282      	uxth	r2, r0
 80030a2:	f04f 33ff 	mov.w	r3, #4294967295
 80030a6:	4809      	ldr	r0, [pc, #36]	; (80030cc <registerWrite+0x60>)
 80030a8:	f7ff fbe8 	bl	800287c <HAL_UART_Transmit>
	HAL_Delay(1000);
 80030ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80030b0:	f7fd fc2e 	bl	8000910 <HAL_Delay>
	return result;
};
 80030b4:	4620      	mov	r0, r4
 80030b6:	b004      	add	sp, #16
 80030b8:	bd10      	pop	{r4, pc}
 80030ba:	bf00      	nop
 80030bc:	200003c4 	.word	0x200003c4
 80030c0:	0800448f 	.word	0x0800448f
 80030c4:	20000808 	.word	0x20000808
 80030c8:	080044a5 	.word	0x080044a5
 80030cc:	20000250 	.word	0x20000250

080030d0 <registerRead>:

uint8_t registerRead(uint8_t address, uint8_t qty, uint8_t data[])
{
 80030d0:	b530      	push	{r4, r5, lr}
 80030d2:	b085      	sub	sp, #20
	uint8_t tmp[3];
	tmp[0] = address;
	char result = 1;

	result = HAL_I2C_Master_Transmit(&HandleI2C, GESTURE_ADDRESS_I2C << 1, tmp, 1, 10);
 80030d4:	230a      	movs	r3, #10
{
 80030d6:	460d      	mov	r5, r1
 80030d8:	4614      	mov	r4, r2
	tmp[0] = address;
 80030da:	f88d 000c 	strb.w	r0, [sp, #12]
	result = HAL_I2C_Master_Transmit(&HandleI2C, GESTURE_ADDRESS_I2C << 1, tmp, 1, 10);
 80030de:	9300      	str	r3, [sp, #0]
 80030e0:	4817      	ldr	r0, [pc, #92]	; (8003140 <registerRead+0x70>)
 80030e2:	2301      	movs	r3, #1
 80030e4:	aa03      	add	r2, sp, #12
 80030e6:	21e6      	movs	r1, #230	; 0xe6
 80030e8:	f7fd fece 	bl	8000e88 <HAL_I2C_Master_Transmit>

	if (result != 0)
 80030ec:	b130      	cbz	r0, 80030fc <registerRead+0x2c>
	{
		strcpy((char*)ref, "\r\n Error TX");
 80030ee:	4915      	ldr	r1, [pc, #84]	; (8003144 <registerRead+0x74>)
 80030f0:	4815      	ldr	r0, [pc, #84]	; (8003148 <registerRead+0x78>)
 80030f2:	f000 fa5d 	bl	80035b0 <strcpy>
		printf("Error TX \n");
 80030f6:	4815      	ldr	r0, [pc, #84]	; (800314c <registerRead+0x7c>)
 80030f8:	f000 fa52 	bl	80035a0 <puts>
	}

	result = 1;
	result = HAL_I2C_Master_Receive(&HandleI2C, (GESTURE_ADDRESS_I2C << 1) + 1, data, qty, 10);
 80030fc:	230a      	movs	r3, #10
 80030fe:	9300      	str	r3, [sp, #0]
 8003100:	4622      	mov	r2, r4
 8003102:	480f      	ldr	r0, [pc, #60]	; (8003140 <registerRead+0x70>)
 8003104:	462b      	mov	r3, r5
 8003106:	21e7      	movs	r1, #231	; 0xe7
 8003108:	f7fd ff54 	bl	8000fb4 <HAL_I2C_Master_Receive>
	if (result != 0){
 800310c:	4604      	mov	r4, r0
 800310e:	b130      	cbz	r0, 800311e <registerRead+0x4e>
		strcpy((char*)ref, "\r\n Error RX");
 8003110:	490f      	ldr	r1, [pc, #60]	; (8003150 <registerRead+0x80>)
 8003112:	480d      	ldr	r0, [pc, #52]	; (8003148 <registerRead+0x78>)
 8003114:	f000 fa4c 	bl	80035b0 <strcpy>
		printf("Error RX \n");
 8003118:	480e      	ldr	r0, [pc, #56]	; (8003154 <registerRead+0x84>)
 800311a:	f000 fa41 	bl	80035a0 <puts>
	}
	HAL_UART_Transmit(&huart3, ref, strlen((char*)ref), HAL_MAX_DELAY);
 800311e:	480a      	ldr	r0, [pc, #40]	; (8003148 <registerRead+0x78>)
 8003120:	f7fd f85e 	bl	80001e0 <strlen>
 8003124:	4908      	ldr	r1, [pc, #32]	; (8003148 <registerRead+0x78>)
 8003126:	b282      	uxth	r2, r0
 8003128:	f04f 33ff 	mov.w	r3, #4294967295
 800312c:	480a      	ldr	r0, [pc, #40]	; (8003158 <registerRead+0x88>)
 800312e:	f7ff fba5 	bl	800287c <HAL_UART_Transmit>
	HAL_Delay(1000);
 8003132:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003136:	f7fd fbeb 	bl	8000910 <HAL_Delay>
	return result;
};
 800313a:	4620      	mov	r0, r4
 800313c:	b005      	add	sp, #20
 800313e:	bd30      	pop	{r4, r5, pc}
 8003140:	200003c4 	.word	0x200003c4
 8003144:	080044b9 	.word	0x080044b9
 8003148:	20000808 	.word	0x20000808
 800314c:	080044c5 	.word	0x080044c5
 8003150:	080044cf 	.word	0x080044cf
 8003154:	080044db 	.word	0x080044db
 8003158:	20000250 	.word	0x20000250

0800315c <GESTURE_Actions>:
{
 800315c:	b507      	push	{r0, r1, r2, lr}
	uint8_t data0 = 0, error;
 800315e:	2300      	movs	r3, #0
	error = registerRead(0x43, 1, &data0); /* Read Bank 0 for gestures */
 8003160:	f10d 0207 	add.w	r2, sp, #7
 8003164:	2101      	movs	r1, #1
 8003166:	2043      	movs	r0, #67	; 0x43
	uint8_t data0 = 0, error;
 8003168:	f88d 3007 	strb.w	r3, [sp, #7]
	error = registerRead(0x43, 1, &data0); /* Read Bank 0 for gestures */
 800316c:	f7ff ffb0 	bl	80030d0 <registerRead>
	if(!error){
 8003170:	b9c8      	cbnz	r0, 80031a6 <GESTURE_Actions+0x4a>
		switch(data0){ /* When will gestures be detected, the "data" will change */
 8003172:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003176:	2b10      	cmp	r3, #16
 8003178:	f000 809d 	beq.w	80032b6 <GESTURE_Actions+0x15a>
 800317c:	d80b      	bhi.n	8003196 <GESTURE_Actions+0x3a>
 800317e:	3b01      	subs	r3, #1
 8003180:	b2da      	uxtb	r2, r3
 8003182:	2a07      	cmp	r2, #7
 8003184:	d80f      	bhi.n	80031a6 <GESTURE_Actions+0x4a>
 8003186:	2b07      	cmp	r3, #7
 8003188:	d80d      	bhi.n	80031a6 <GESTURE_Actions+0x4a>
 800318a:	e8df f003 	tbb	[pc, r3]
 800318e:	3f1d      	.short	0x3f1d
 8003190:	0c0c560c 	.word	0x0c0c560c
 8003194:	770c      	.short	0x770c
 8003196:	2b40      	cmp	r3, #64	; 0x40
 8003198:	d046      	beq.n	8003228 <GESTURE_Actions+0xcc>
 800319a:	2b80      	cmp	r3, #128	; 0x80
 800319c:	f000 8095 	beq.w	80032ca <GESTURE_Actions+0x16e>
 80031a0:	2b20      	cmp	r3, #32
 80031a2:	f000 808d 	beq.w	80032c0 <GESTURE_Actions+0x164>
	HAL_UART_Transmit(&huart3, ref, strlen((char*)ref), HAL_MAX_DELAY);
 80031a6:	484a      	ldr	r0, [pc, #296]	; (80032d0 <GESTURE_Actions+0x174>)
 80031a8:	f7fd f81a 	bl	80001e0 <strlen>
 80031ac:	4948      	ldr	r1, [pc, #288]	; (80032d0 <GESTURE_Actions+0x174>)
 80031ae:	b282      	uxth	r2, r0
 80031b0:	f04f 33ff 	mov.w	r3, #4294967295
 80031b4:	4847      	ldr	r0, [pc, #284]	; (80032d4 <GESTURE_Actions+0x178>)
 80031b6:	f7ff fb61 	bl	800287c <HAL_UART_Transmit>
	HAL_Delay(1000);
 80031ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80031be:	f7fd fba7 	bl	8000910 <HAL_Delay>
};
 80031c2:	b003      	add	sp, #12
 80031c4:	f85d fb04 	ldr.w	pc, [sp], #4
			HAL_Delay(GEST_ENTR_T);
 80031c8:	f44f 7016 	mov.w	r0, #600	; 0x258
 80031cc:	f7fd fba0 	bl	8000910 <HAL_Delay>
			registerRead(0x43, 1, &data0);
 80031d0:	f10d 0207 	add.w	r2, sp, #7
 80031d4:	2101      	movs	r1, #1
 80031d6:	2043      	movs	r0, #67	; 0x43
 80031d8:	f7ff ff7a 	bl	80030d0 <registerRead>
			if(data0 == GestureForward){
 80031dc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80031e0:	2b40      	cmp	r3, #64	; 0x40
 80031e2:	d104      	bne.n	80031ee <GESTURE_Actions+0x92>
				printf("Forward Gesture \n");
 80031e4:	483c      	ldr	r0, [pc, #240]	; (80032d8 <GESTURE_Actions+0x17c>)
			printf("Forward \n");
 80031e6:	f000 f9db 	bl	80035a0 <puts>
			strcpy((char*)ref, "\r\n Forward Gesture");
 80031ea:	493c      	ldr	r1, [pc, #240]	; (80032dc <GESTURE_Actions+0x180>)
 80031ec:	e037      	b.n	800325e <GESTURE_Actions+0x102>
			}else if(data0 == GestureBackwards){
 80031ee:	2b80      	cmp	r3, #128	; 0x80
 80031f0:	d104      	bne.n	80031fc <GESTURE_Actions+0xa0>
				printf("Backwards \n");
 80031f2:	483b      	ldr	r0, [pc, #236]	; (80032e0 <GESTURE_Actions+0x184>)
			printf("Backwards Gesture \n");
 80031f4:	f000 f9d4 	bl	80035a0 <puts>
			strcpy((char*)ref, "\r\n Backwards Gesture");
 80031f8:	493a      	ldr	r1, [pc, #232]	; (80032e4 <GESTURE_Actions+0x188>)
 80031fa:	e030      	b.n	800325e <GESTURE_Actions+0x102>
				printf("Right \n");
 80031fc:	483a      	ldr	r0, [pc, #232]	; (80032e8 <GESTURE_Actions+0x18c>)
 80031fe:	f000 f9cf 	bl	80035a0 <puts>
				strcpy((char*)ref, "\r\n Gesture Right");
 8003202:	493a      	ldr	r1, [pc, #232]	; (80032ec <GESTURE_Actions+0x190>)
				strcpy((char*)ref, "\r\n Upwards Gesture");
 8003204:	4832      	ldr	r0, [pc, #200]	; (80032d0 <GESTURE_Actions+0x174>)
 8003206:	f000 f9d3 	bl	80035b0 <strcpy>
 800320a:	e7cc      	b.n	80031a6 <GESTURE_Actions+0x4a>
			HAL_Delay(GEST_ENTR_T);
 800320c:	f44f 7016 	mov.w	r0, #600	; 0x258
 8003210:	f7fd fb7e 	bl	8000910 <HAL_Delay>
			registerRead(0x43, 1, &data0);
 8003214:	f10d 0207 	add.w	r2, sp, #7
 8003218:	2101      	movs	r1, #1
 800321a:	2043      	movs	r0, #67	; 0x43
 800321c:	f7ff ff58 	bl	80030d0 <registerRead>
			if(data0 == GestureForward){
 8003220:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003224:	2b40      	cmp	r3, #64	; 0x40
 8003226:	d101      	bne.n	800322c <GESTURE_Actions+0xd0>
			printf("Forward \n");
 8003228:	4831      	ldr	r0, [pc, #196]	; (80032f0 <GESTURE_Actions+0x194>)
 800322a:	e7dc      	b.n	80031e6 <GESTURE_Actions+0x8a>
			}else if(data0 == GestureBackwards){
 800322c:	2b80      	cmp	r3, #128	; 0x80
 800322e:	d0e0      	beq.n	80031f2 <GESTURE_Actions+0x96>
				printf("Left \n");
 8003230:	4830      	ldr	r0, [pc, #192]	; (80032f4 <GESTURE_Actions+0x198>)
 8003232:	f000 f9b5 	bl	80035a0 <puts>
				strcpy((char*)ref, "\r\n Gesture Left");
 8003236:	4930      	ldr	r1, [pc, #192]	; (80032f8 <GESTURE_Actions+0x19c>)
 8003238:	e7e4      	b.n	8003204 <GESTURE_Actions+0xa8>
			HAL_Delay(GEST_ENTR_T);
 800323a:	f44f 7016 	mov.w	r0, #600	; 0x258
 800323e:	f7fd fb67 	bl	8000910 <HAL_Delay>
			registerRead(0x43, 1, &data0);
 8003242:	f10d 0207 	add.w	r2, sp, #7
 8003246:	2101      	movs	r1, #1
 8003248:	2043      	movs	r0, #67	; 0x43
 800324a:	f7ff ff41 	bl	80030d0 <registerRead>
			if(data0 == GestureForward){
 800324e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003252:	2b40      	cmp	r3, #64	; 0x40
 8003254:	d10b      	bne.n	800326e <GESTURE_Actions+0x112>
				printf("Forward \n");
 8003256:	4826      	ldr	r0, [pc, #152]	; (80032f0 <GESTURE_Actions+0x194>)
 8003258:	f000 f9a2 	bl	80035a0 <puts>
				strcpy((char*)ref, "\n\r Forward Gesture");
 800325c:	4927      	ldr	r1, [pc, #156]	; (80032fc <GESTURE_Actions+0x1a0>)
			strcpy((char*)ref, "\r\n Backwards Gesture");
 800325e:	481c      	ldr	r0, [pc, #112]	; (80032d0 <GESTURE_Actions+0x174>)
 8003260:	f000 f9a6 	bl	80035b0 <strcpy>
			HAL_Delay(GEST_QUIT_T);
 8003264:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003268:	f7fd fb52 	bl	8000910 <HAL_Delay>
			break;
 800326c:	e79b      	b.n	80031a6 <GESTURE_Actions+0x4a>
			}else if(data0 == GestureBackwards){
 800326e:	2b80      	cmp	r3, #128	; 0x80
 8003270:	d0bf      	beq.n	80031f2 <GESTURE_Actions+0x96>
				printf("Up \n");
 8003272:	4823      	ldr	r0, [pc, #140]	; (8003300 <GESTURE_Actions+0x1a4>)
 8003274:	f000 f994 	bl	80035a0 <puts>
				strcpy((char*)ref, "\r\n Upwards Gesture");
 8003278:	4922      	ldr	r1, [pc, #136]	; (8003304 <GESTURE_Actions+0x1a8>)
 800327a:	e7c3      	b.n	8003204 <GESTURE_Actions+0xa8>
			HAL_Delay(GEST_ENTR_T);
 800327c:	f44f 7016 	mov.w	r0, #600	; 0x258
 8003280:	f7fd fb46 	bl	8000910 <HAL_Delay>
			registerRead(0x43, 1, &data0);
 8003284:	f10d 0207 	add.w	r2, sp, #7
 8003288:	2101      	movs	r1, #1
 800328a:	2043      	movs	r0, #67	; 0x43
 800328c:	f7ff ff20 	bl	80030d0 <registerRead>
			if(data0 == GestureForward){
 8003290:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003294:	2b40      	cmp	r3, #64	; 0x40
 8003296:	d0c7      	beq.n	8003228 <GESTURE_Actions+0xcc>
			}else if(data0 == GestureBackwards){
 8003298:	2b80      	cmp	r3, #128	; 0x80
 800329a:	d104      	bne.n	80032a6 <GESTURE_Actions+0x14a>
				printf("Backwards \n");
 800329c:	4810      	ldr	r0, [pc, #64]	; (80032e0 <GESTURE_Actions+0x184>)
 800329e:	f000 f97f 	bl	80035a0 <puts>
				strcpy((char*)ref, "\n\r Backwards Gesture");
 80032a2:	4919      	ldr	r1, [pc, #100]	; (8003308 <GESTURE_Actions+0x1ac>)
 80032a4:	e7db      	b.n	800325e <GESTURE_Actions+0x102>
				strcpy((char*)ref, "\r\n Downwards Gesture");
 80032a6:	4919      	ldr	r1, [pc, #100]	; (800330c <GESTURE_Actions+0x1b0>)
 80032a8:	4809      	ldr	r0, [pc, #36]	; (80032d0 <GESTURE_Actions+0x174>)
 80032aa:	f000 f981 	bl	80035b0 <strcpy>
				printf("Downwards Gesture \n");
 80032ae:	4818      	ldr	r0, [pc, #96]	; (8003310 <GESTURE_Actions+0x1b4>)
 80032b0:	f000 f976 	bl	80035a0 <puts>
 80032b4:	e777      	b.n	80031a6 <GESTURE_Actions+0x4a>
			printf("Clockwise Gesture \n");
 80032b6:	4817      	ldr	r0, [pc, #92]	; (8003314 <GESTURE_Actions+0x1b8>)
 80032b8:	f000 f972 	bl	80035a0 <puts>
			strcpy((char*)ref, "\r\n Clockwise Gesture");
 80032bc:	4916      	ldr	r1, [pc, #88]	; (8003318 <GESTURE_Actions+0x1bc>)
 80032be:	e7ce      	b.n	800325e <GESTURE_Actions+0x102>
			printf("Anti-Clockwise Gesture \n");
 80032c0:	4816      	ldr	r0, [pc, #88]	; (800331c <GESTURE_Actions+0x1c0>)
 80032c2:	f000 f96d 	bl	80035a0 <puts>
			strcpy((char*)ref, "\r\n Anti-clockwise Gesture");
 80032c6:	4916      	ldr	r1, [pc, #88]	; (8003320 <GESTURE_Actions+0x1c4>)
 80032c8:	e7c9      	b.n	800325e <GESTURE_Actions+0x102>
			printf("Backwards Gesture \n");
 80032ca:	4816      	ldr	r0, [pc, #88]	; (8003324 <GESTURE_Actions+0x1c8>)
 80032cc:	e792      	b.n	80031f4 <GESTURE_Actions+0x98>
 80032ce:	bf00      	nop
 80032d0:	20000808 	.word	0x20000808
 80032d4:	20000250 	.word	0x20000250
 80032d8:	080044e5 	.word	0x080044e5
 80032dc:	080044f6 	.word	0x080044f6
 80032e0:	08004509 	.word	0x08004509
 80032e4:	08004514 	.word	0x08004514
 80032e8:	08004529 	.word	0x08004529
 80032ec:	08004530 	.word	0x08004530
 80032f0:	08004541 	.word	0x08004541
 80032f4:	0800454a 	.word	0x0800454a
 80032f8:	08004550 	.word	0x08004550
 80032fc:	08004560 	.word	0x08004560
 8003300:	08004573 	.word	0x08004573
 8003304:	08004577 	.word	0x08004577
 8003308:	0800458a 	.word	0x0800458a
 800330c:	0800459f 	.word	0x0800459f
 8003310:	080045b4 	.word	0x080045b4
 8003314:	080045e1 	.word	0x080045e1
 8003318:	080045c7 	.word	0x080045c7
 800331c:	080045dc 	.word	0x080045dc
 8003320:	080045f4 	.word	0x080045f4
 8003324:	0800460e 	.word	0x0800460e

08003328 <gestureInit>:

uint8_t gestureInit(void)
{
 8003328:	b573      	push	{r0, r1, r4, r5, r6, lr}
	uint8_t data0 = 0;
 800332a:	2500      	movs	r5, #0
	uint8_t data1 = 1;
 800332c:	2401      	movs	r4, #1
	int result = 0;

	registerWrite(GESTURE_REG_BANK_SEL, GESTURE_BANK0);
 800332e:	4629      	mov	r1, r5
 8003330:	20ef      	movs	r0, #239	; 0xef
	uint8_t data0 = 0;
 8003332:	f88d 5006 	strb.w	r5, [sp, #6]
	uint8_t data1 = 1;
 8003336:	f88d 4007 	strb.w	r4, [sp, #7]
	registerWrite(GESTURE_REG_BANK_SEL, GESTURE_BANK0);
 800333a:	f7ff fe97 	bl	800306c <registerWrite>
	registerWrite(GESTURE_REG_BANK_SEL, GESTURE_BANK0);
 800333e:	4629      	mov	r1, r5
 8003340:	20ef      	movs	r0, #239	; 0xef
 8003342:	f7ff fe93 	bl	800306c <registerWrite>

	registerRead(0,1, &data0);
 8003346:	f10d 0206 	add.w	r2, sp, #6
 800334a:	4621      	mov	r1, r4
 800334c:	4628      	mov	r0, r5
 800334e:	f7ff febf 	bl	80030d0 <registerRead>
	registerRead(1,1, &data1);
 8003352:	f10d 0207 	add.w	r2, sp, #7
 8003356:	4621      	mov	r1, r4
 8003358:	4620      	mov	r0, r4
 800335a:	f7ff feb9 	bl	80030d0 <registerRead>

	if ((data0 != 0x20) || (data1 != 0x76)){
 800335e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8003362:	2b20      	cmp	r3, #32
 8003364:	d10b      	bne.n	800337e <gestureInit+0x56>
 8003366:	f89d 4007 	ldrb.w	r4, [sp, #7]
		result = 1;
	}

	if(data0 == 0x20){
		strcpy((char*)ref, "\n\r Wake Up");
 800336a:	4914      	ldr	r1, [pc, #80]	; (80033bc <gestureInit+0x94>)
 800336c:	4814      	ldr	r0, [pc, #80]	; (80033c0 <gestureInit+0x98>)
	if ((data0 != 0x20) || (data1 != 0x76)){
 800336e:	3c76      	subs	r4, #118	; 0x76
 8003370:	bf18      	it	ne
 8003372:	2401      	movne	r4, #1
		strcpy((char*)ref, "\n\r Wake Up");
 8003374:	f000 f91c 	bl	80035b0 <strcpy>
		printf("\n\rWake Up");
 8003378:	4812      	ldr	r0, [pc, #72]	; (80033c4 <gestureInit+0x9c>)
 800337a:	f000 f88b 	bl	8003494 <iprintf>
	}

	for(int i = 1; i < InitialRegister; i++){
 800337e:	4e12      	ldr	r6, [pc, #72]	; (80033c8 <gestureInit+0xa0>)
		result = 1;
 8003380:	2501      	movs	r5, #1
		registerWrite(RegisterArray[i][0], RegisterArray[i][1]);
 8003382:	78f1      	ldrb	r1, [r6, #3]
 8003384:	f816 0f02 	ldrb.w	r0, [r6, #2]!
	for(int i = 1; i < InitialRegister; i++){
 8003388:	3501      	adds	r5, #1
		registerWrite(RegisterArray[i][0], RegisterArray[i][1]);
 800338a:	f7ff fe6f 	bl	800306c <registerWrite>
	for(int i = 1; i < InitialRegister; i++){
 800338e:	2ddb      	cmp	r5, #219	; 0xdb
 8003390:	d1f7      	bne.n	8003382 <gestureInit+0x5a>
	}

	registerWrite(GESTURE_REG_BANK_SEL, GESTURE_BANK0);
 8003392:	2100      	movs	r1, #0
 8003394:	20ef      	movs	r0, #239	; 0xef
 8003396:	f7ff fe69 	bl	800306c <registerWrite>
	HAL_UART_Transmit(&huart3, ref, strlen((char*)ref), HAL_MAX_DELAY);
 800339a:	4809      	ldr	r0, [pc, #36]	; (80033c0 <gestureInit+0x98>)
 800339c:	f7fc ff20 	bl	80001e0 <strlen>
 80033a0:	4907      	ldr	r1, [pc, #28]	; (80033c0 <gestureInit+0x98>)
 80033a2:	b282      	uxth	r2, r0
 80033a4:	f04f 33ff 	mov.w	r3, #4294967295
 80033a8:	4808      	ldr	r0, [pc, #32]	; (80033cc <gestureInit+0xa4>)
 80033aa:	f7ff fa67 	bl	800287c <HAL_UART_Transmit>
	HAL_Delay(1000);
 80033ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80033b2:	f7fd faad 	bl	8000910 <HAL_Delay>
	return result;
};
 80033b6:	4620      	mov	r0, r4
 80033b8:	b002      	add	sp, #8
 80033ba:	bd70      	pop	{r4, r5, r6, pc}
 80033bc:	08004621 	.word	0x08004621
 80033c0:	20000808 	.word	0x20000808
 80033c4:	0800462c 	.word	0x0800462c
 80033c8:	2000000c 	.word	0x2000000c
 80033cc:	20000250 	.word	0x20000250

080033d0 <initializeRegisters>:
void initializeRegisters(void){
 80033d0:	b508      	push	{r3, lr}
	error = gestureInit();
 80033d2:	f7ff ffa9 	bl	8003328 <gestureInit>
	if(error){
 80033d6:	b1b0      	cbz	r0, 8003406 <initializeRegisters+0x36>
		strcpy((char*)ref, "\r\nInitializing Error");
 80033d8:	490f      	ldr	r1, [pc, #60]	; (8003418 <initializeRegisters+0x48>)
 80033da:	4810      	ldr	r0, [pc, #64]	; (800341c <initializeRegisters+0x4c>)
 80033dc:	f000 f8e8 	bl	80035b0 <strcpy>
		printf("Initializing Error");
 80033e0:	480f      	ldr	r0, [pc, #60]	; (8003420 <initializeRegisters+0x50>)
 80033e2:	f000 f857 	bl	8003494 <iprintf>
	HAL_UART_Transmit(&huart3, ref, strlen((char*)ref), HAL_MAX_DELAY);
 80033e6:	480d      	ldr	r0, [pc, #52]	; (800341c <initializeRegisters+0x4c>)
 80033e8:	f7fc fefa 	bl	80001e0 <strlen>
 80033ec:	f04f 33ff 	mov.w	r3, #4294967295
 80033f0:	b282      	uxth	r2, r0
 80033f2:	490a      	ldr	r1, [pc, #40]	; (800341c <initializeRegisters+0x4c>)
 80033f4:	480b      	ldr	r0, [pc, #44]	; (8003424 <initializeRegisters+0x54>)
 80033f6:	f7ff fa41 	bl	800287c <HAL_UART_Transmit>
};
 80033fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_Delay(1000);
 80033fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003402:	f7fd ba85 	b.w	8000910 <HAL_Delay>
		strcpy((char*)ref, "\n\r Initialized");
 8003406:	4908      	ldr	r1, [pc, #32]	; (8003428 <initializeRegisters+0x58>)
 8003408:	4804      	ldr	r0, [pc, #16]	; (800341c <initializeRegisters+0x4c>)
 800340a:	f000 f8d1 	bl	80035b0 <strcpy>
		printf("Initialized \n");
 800340e:	4807      	ldr	r0, [pc, #28]	; (800342c <initializeRegisters+0x5c>)
 8003410:	f000 f8c6 	bl	80035a0 <puts>
 8003414:	e7e7      	b.n	80033e6 <initializeRegisters+0x16>
 8003416:	bf00      	nop
 8003418:	08004636 	.word	0x08004636
 800341c:	20000808 	.word	0x20000808
 8003420:	08004638 	.word	0x08004638
 8003424:	20000250 	.word	0x20000250
 8003428:	0800464b 	.word	0x0800464b
 800342c:	0800465a 	.word	0x0800465a

08003430 <__errno>:
 8003430:	4b01      	ldr	r3, [pc, #4]	; (8003438 <__errno+0x8>)
 8003432:	6818      	ldr	r0, [r3, #0]
 8003434:	4770      	bx	lr
 8003436:	bf00      	nop
 8003438:	200001c4 	.word	0x200001c4

0800343c <__libc_init_array>:
 800343c:	b570      	push	{r4, r5, r6, lr}
 800343e:	4d0d      	ldr	r5, [pc, #52]	; (8003474 <__libc_init_array+0x38>)
 8003440:	4c0d      	ldr	r4, [pc, #52]	; (8003478 <__libc_init_array+0x3c>)
 8003442:	1b64      	subs	r4, r4, r5
 8003444:	10a4      	asrs	r4, r4, #2
 8003446:	2600      	movs	r6, #0
 8003448:	42a6      	cmp	r6, r4
 800344a:	d109      	bne.n	8003460 <__libc_init_array+0x24>
 800344c:	4d0b      	ldr	r5, [pc, #44]	; (800347c <__libc_init_array+0x40>)
 800344e:	4c0c      	ldr	r4, [pc, #48]	; (8003480 <__libc_init_array+0x44>)
 8003450:	f000 fff4 	bl	800443c <_init>
 8003454:	1b64      	subs	r4, r4, r5
 8003456:	10a4      	asrs	r4, r4, #2
 8003458:	2600      	movs	r6, #0
 800345a:	42a6      	cmp	r6, r4
 800345c:	d105      	bne.n	800346a <__libc_init_array+0x2e>
 800345e:	bd70      	pop	{r4, r5, r6, pc}
 8003460:	f855 3b04 	ldr.w	r3, [r5], #4
 8003464:	4798      	blx	r3
 8003466:	3601      	adds	r6, #1
 8003468:	e7ee      	b.n	8003448 <__libc_init_array+0xc>
 800346a:	f855 3b04 	ldr.w	r3, [r5], #4
 800346e:	4798      	blx	r3
 8003470:	3601      	adds	r6, #1
 8003472:	e7f2      	b.n	800345a <__libc_init_array+0x1e>
 8003474:	08004700 	.word	0x08004700
 8003478:	08004700 	.word	0x08004700
 800347c:	08004700 	.word	0x08004700
 8003480:	08004704 	.word	0x08004704

08003484 <memset>:
 8003484:	4402      	add	r2, r0
 8003486:	4603      	mov	r3, r0
 8003488:	4293      	cmp	r3, r2
 800348a:	d100      	bne.n	800348e <memset+0xa>
 800348c:	4770      	bx	lr
 800348e:	f803 1b01 	strb.w	r1, [r3], #1
 8003492:	e7f9      	b.n	8003488 <memset+0x4>

08003494 <iprintf>:
 8003494:	b40f      	push	{r0, r1, r2, r3}
 8003496:	4b0a      	ldr	r3, [pc, #40]	; (80034c0 <iprintf+0x2c>)
 8003498:	b513      	push	{r0, r1, r4, lr}
 800349a:	681c      	ldr	r4, [r3, #0]
 800349c:	b124      	cbz	r4, 80034a8 <iprintf+0x14>
 800349e:	69a3      	ldr	r3, [r4, #24]
 80034a0:	b913      	cbnz	r3, 80034a8 <iprintf+0x14>
 80034a2:	4620      	mov	r0, r4
 80034a4:	f000 fa66 	bl	8003974 <__sinit>
 80034a8:	ab05      	add	r3, sp, #20
 80034aa:	9a04      	ldr	r2, [sp, #16]
 80034ac:	68a1      	ldr	r1, [r4, #8]
 80034ae:	9301      	str	r3, [sp, #4]
 80034b0:	4620      	mov	r0, r4
 80034b2:	f000 fc37 	bl	8003d24 <_vfiprintf_r>
 80034b6:	b002      	add	sp, #8
 80034b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80034bc:	b004      	add	sp, #16
 80034be:	4770      	bx	lr
 80034c0:	200001c4 	.word	0x200001c4

080034c4 <_puts_r>:
 80034c4:	b570      	push	{r4, r5, r6, lr}
 80034c6:	460e      	mov	r6, r1
 80034c8:	4605      	mov	r5, r0
 80034ca:	b118      	cbz	r0, 80034d4 <_puts_r+0x10>
 80034cc:	6983      	ldr	r3, [r0, #24]
 80034ce:	b90b      	cbnz	r3, 80034d4 <_puts_r+0x10>
 80034d0:	f000 fa50 	bl	8003974 <__sinit>
 80034d4:	69ab      	ldr	r3, [r5, #24]
 80034d6:	68ac      	ldr	r4, [r5, #8]
 80034d8:	b913      	cbnz	r3, 80034e0 <_puts_r+0x1c>
 80034da:	4628      	mov	r0, r5
 80034dc:	f000 fa4a 	bl	8003974 <__sinit>
 80034e0:	4b2c      	ldr	r3, [pc, #176]	; (8003594 <_puts_r+0xd0>)
 80034e2:	429c      	cmp	r4, r3
 80034e4:	d120      	bne.n	8003528 <_puts_r+0x64>
 80034e6:	686c      	ldr	r4, [r5, #4]
 80034e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80034ea:	07db      	lsls	r3, r3, #31
 80034ec:	d405      	bmi.n	80034fa <_puts_r+0x36>
 80034ee:	89a3      	ldrh	r3, [r4, #12]
 80034f0:	0598      	lsls	r0, r3, #22
 80034f2:	d402      	bmi.n	80034fa <_puts_r+0x36>
 80034f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80034f6:	f000 fadb 	bl	8003ab0 <__retarget_lock_acquire_recursive>
 80034fa:	89a3      	ldrh	r3, [r4, #12]
 80034fc:	0719      	lsls	r1, r3, #28
 80034fe:	d51d      	bpl.n	800353c <_puts_r+0x78>
 8003500:	6923      	ldr	r3, [r4, #16]
 8003502:	b1db      	cbz	r3, 800353c <_puts_r+0x78>
 8003504:	3e01      	subs	r6, #1
 8003506:	68a3      	ldr	r3, [r4, #8]
 8003508:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800350c:	3b01      	subs	r3, #1
 800350e:	60a3      	str	r3, [r4, #8]
 8003510:	bb39      	cbnz	r1, 8003562 <_puts_r+0x9e>
 8003512:	2b00      	cmp	r3, #0
 8003514:	da38      	bge.n	8003588 <_puts_r+0xc4>
 8003516:	4622      	mov	r2, r4
 8003518:	210a      	movs	r1, #10
 800351a:	4628      	mov	r0, r5
 800351c:	f000 f850 	bl	80035c0 <__swbuf_r>
 8003520:	3001      	adds	r0, #1
 8003522:	d011      	beq.n	8003548 <_puts_r+0x84>
 8003524:	250a      	movs	r5, #10
 8003526:	e011      	b.n	800354c <_puts_r+0x88>
 8003528:	4b1b      	ldr	r3, [pc, #108]	; (8003598 <_puts_r+0xd4>)
 800352a:	429c      	cmp	r4, r3
 800352c:	d101      	bne.n	8003532 <_puts_r+0x6e>
 800352e:	68ac      	ldr	r4, [r5, #8]
 8003530:	e7da      	b.n	80034e8 <_puts_r+0x24>
 8003532:	4b1a      	ldr	r3, [pc, #104]	; (800359c <_puts_r+0xd8>)
 8003534:	429c      	cmp	r4, r3
 8003536:	bf08      	it	eq
 8003538:	68ec      	ldreq	r4, [r5, #12]
 800353a:	e7d5      	b.n	80034e8 <_puts_r+0x24>
 800353c:	4621      	mov	r1, r4
 800353e:	4628      	mov	r0, r5
 8003540:	f000 f890 	bl	8003664 <__swsetup_r>
 8003544:	2800      	cmp	r0, #0
 8003546:	d0dd      	beq.n	8003504 <_puts_r+0x40>
 8003548:	f04f 35ff 	mov.w	r5, #4294967295
 800354c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800354e:	07da      	lsls	r2, r3, #31
 8003550:	d405      	bmi.n	800355e <_puts_r+0x9a>
 8003552:	89a3      	ldrh	r3, [r4, #12]
 8003554:	059b      	lsls	r3, r3, #22
 8003556:	d402      	bmi.n	800355e <_puts_r+0x9a>
 8003558:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800355a:	f000 faaa 	bl	8003ab2 <__retarget_lock_release_recursive>
 800355e:	4628      	mov	r0, r5
 8003560:	bd70      	pop	{r4, r5, r6, pc}
 8003562:	2b00      	cmp	r3, #0
 8003564:	da04      	bge.n	8003570 <_puts_r+0xac>
 8003566:	69a2      	ldr	r2, [r4, #24]
 8003568:	429a      	cmp	r2, r3
 800356a:	dc06      	bgt.n	800357a <_puts_r+0xb6>
 800356c:	290a      	cmp	r1, #10
 800356e:	d004      	beq.n	800357a <_puts_r+0xb6>
 8003570:	6823      	ldr	r3, [r4, #0]
 8003572:	1c5a      	adds	r2, r3, #1
 8003574:	6022      	str	r2, [r4, #0]
 8003576:	7019      	strb	r1, [r3, #0]
 8003578:	e7c5      	b.n	8003506 <_puts_r+0x42>
 800357a:	4622      	mov	r2, r4
 800357c:	4628      	mov	r0, r5
 800357e:	f000 f81f 	bl	80035c0 <__swbuf_r>
 8003582:	3001      	adds	r0, #1
 8003584:	d1bf      	bne.n	8003506 <_puts_r+0x42>
 8003586:	e7df      	b.n	8003548 <_puts_r+0x84>
 8003588:	6823      	ldr	r3, [r4, #0]
 800358a:	250a      	movs	r5, #10
 800358c:	1c5a      	adds	r2, r3, #1
 800358e:	6022      	str	r2, [r4, #0]
 8003590:	701d      	strb	r5, [r3, #0]
 8003592:	e7db      	b.n	800354c <_puts_r+0x88>
 8003594:	0800468c 	.word	0x0800468c
 8003598:	080046ac 	.word	0x080046ac
 800359c:	0800466c 	.word	0x0800466c

080035a0 <puts>:
 80035a0:	4b02      	ldr	r3, [pc, #8]	; (80035ac <puts+0xc>)
 80035a2:	4601      	mov	r1, r0
 80035a4:	6818      	ldr	r0, [r3, #0]
 80035a6:	f7ff bf8d 	b.w	80034c4 <_puts_r>
 80035aa:	bf00      	nop
 80035ac:	200001c4 	.word	0x200001c4

080035b0 <strcpy>:
 80035b0:	4603      	mov	r3, r0
 80035b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80035b6:	f803 2b01 	strb.w	r2, [r3], #1
 80035ba:	2a00      	cmp	r2, #0
 80035bc:	d1f9      	bne.n	80035b2 <strcpy+0x2>
 80035be:	4770      	bx	lr

080035c0 <__swbuf_r>:
 80035c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035c2:	460e      	mov	r6, r1
 80035c4:	4614      	mov	r4, r2
 80035c6:	4605      	mov	r5, r0
 80035c8:	b118      	cbz	r0, 80035d2 <__swbuf_r+0x12>
 80035ca:	6983      	ldr	r3, [r0, #24]
 80035cc:	b90b      	cbnz	r3, 80035d2 <__swbuf_r+0x12>
 80035ce:	f000 f9d1 	bl	8003974 <__sinit>
 80035d2:	4b21      	ldr	r3, [pc, #132]	; (8003658 <__swbuf_r+0x98>)
 80035d4:	429c      	cmp	r4, r3
 80035d6:	d12b      	bne.n	8003630 <__swbuf_r+0x70>
 80035d8:	686c      	ldr	r4, [r5, #4]
 80035da:	69a3      	ldr	r3, [r4, #24]
 80035dc:	60a3      	str	r3, [r4, #8]
 80035de:	89a3      	ldrh	r3, [r4, #12]
 80035e0:	071a      	lsls	r2, r3, #28
 80035e2:	d52f      	bpl.n	8003644 <__swbuf_r+0x84>
 80035e4:	6923      	ldr	r3, [r4, #16]
 80035e6:	b36b      	cbz	r3, 8003644 <__swbuf_r+0x84>
 80035e8:	6923      	ldr	r3, [r4, #16]
 80035ea:	6820      	ldr	r0, [r4, #0]
 80035ec:	1ac0      	subs	r0, r0, r3
 80035ee:	6963      	ldr	r3, [r4, #20]
 80035f0:	b2f6      	uxtb	r6, r6
 80035f2:	4283      	cmp	r3, r0
 80035f4:	4637      	mov	r7, r6
 80035f6:	dc04      	bgt.n	8003602 <__swbuf_r+0x42>
 80035f8:	4621      	mov	r1, r4
 80035fa:	4628      	mov	r0, r5
 80035fc:	f000 f926 	bl	800384c <_fflush_r>
 8003600:	bb30      	cbnz	r0, 8003650 <__swbuf_r+0x90>
 8003602:	68a3      	ldr	r3, [r4, #8]
 8003604:	3b01      	subs	r3, #1
 8003606:	60a3      	str	r3, [r4, #8]
 8003608:	6823      	ldr	r3, [r4, #0]
 800360a:	1c5a      	adds	r2, r3, #1
 800360c:	6022      	str	r2, [r4, #0]
 800360e:	701e      	strb	r6, [r3, #0]
 8003610:	6963      	ldr	r3, [r4, #20]
 8003612:	3001      	adds	r0, #1
 8003614:	4283      	cmp	r3, r0
 8003616:	d004      	beq.n	8003622 <__swbuf_r+0x62>
 8003618:	89a3      	ldrh	r3, [r4, #12]
 800361a:	07db      	lsls	r3, r3, #31
 800361c:	d506      	bpl.n	800362c <__swbuf_r+0x6c>
 800361e:	2e0a      	cmp	r6, #10
 8003620:	d104      	bne.n	800362c <__swbuf_r+0x6c>
 8003622:	4621      	mov	r1, r4
 8003624:	4628      	mov	r0, r5
 8003626:	f000 f911 	bl	800384c <_fflush_r>
 800362a:	b988      	cbnz	r0, 8003650 <__swbuf_r+0x90>
 800362c:	4638      	mov	r0, r7
 800362e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003630:	4b0a      	ldr	r3, [pc, #40]	; (800365c <__swbuf_r+0x9c>)
 8003632:	429c      	cmp	r4, r3
 8003634:	d101      	bne.n	800363a <__swbuf_r+0x7a>
 8003636:	68ac      	ldr	r4, [r5, #8]
 8003638:	e7cf      	b.n	80035da <__swbuf_r+0x1a>
 800363a:	4b09      	ldr	r3, [pc, #36]	; (8003660 <__swbuf_r+0xa0>)
 800363c:	429c      	cmp	r4, r3
 800363e:	bf08      	it	eq
 8003640:	68ec      	ldreq	r4, [r5, #12]
 8003642:	e7ca      	b.n	80035da <__swbuf_r+0x1a>
 8003644:	4621      	mov	r1, r4
 8003646:	4628      	mov	r0, r5
 8003648:	f000 f80c 	bl	8003664 <__swsetup_r>
 800364c:	2800      	cmp	r0, #0
 800364e:	d0cb      	beq.n	80035e8 <__swbuf_r+0x28>
 8003650:	f04f 37ff 	mov.w	r7, #4294967295
 8003654:	e7ea      	b.n	800362c <__swbuf_r+0x6c>
 8003656:	bf00      	nop
 8003658:	0800468c 	.word	0x0800468c
 800365c:	080046ac 	.word	0x080046ac
 8003660:	0800466c 	.word	0x0800466c

08003664 <__swsetup_r>:
 8003664:	4b32      	ldr	r3, [pc, #200]	; (8003730 <__swsetup_r+0xcc>)
 8003666:	b570      	push	{r4, r5, r6, lr}
 8003668:	681d      	ldr	r5, [r3, #0]
 800366a:	4606      	mov	r6, r0
 800366c:	460c      	mov	r4, r1
 800366e:	b125      	cbz	r5, 800367a <__swsetup_r+0x16>
 8003670:	69ab      	ldr	r3, [r5, #24]
 8003672:	b913      	cbnz	r3, 800367a <__swsetup_r+0x16>
 8003674:	4628      	mov	r0, r5
 8003676:	f000 f97d 	bl	8003974 <__sinit>
 800367a:	4b2e      	ldr	r3, [pc, #184]	; (8003734 <__swsetup_r+0xd0>)
 800367c:	429c      	cmp	r4, r3
 800367e:	d10f      	bne.n	80036a0 <__swsetup_r+0x3c>
 8003680:	686c      	ldr	r4, [r5, #4]
 8003682:	89a3      	ldrh	r3, [r4, #12]
 8003684:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003688:	0719      	lsls	r1, r3, #28
 800368a:	d42c      	bmi.n	80036e6 <__swsetup_r+0x82>
 800368c:	06dd      	lsls	r5, r3, #27
 800368e:	d411      	bmi.n	80036b4 <__swsetup_r+0x50>
 8003690:	2309      	movs	r3, #9
 8003692:	6033      	str	r3, [r6, #0]
 8003694:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003698:	81a3      	strh	r3, [r4, #12]
 800369a:	f04f 30ff 	mov.w	r0, #4294967295
 800369e:	e03e      	b.n	800371e <__swsetup_r+0xba>
 80036a0:	4b25      	ldr	r3, [pc, #148]	; (8003738 <__swsetup_r+0xd4>)
 80036a2:	429c      	cmp	r4, r3
 80036a4:	d101      	bne.n	80036aa <__swsetup_r+0x46>
 80036a6:	68ac      	ldr	r4, [r5, #8]
 80036a8:	e7eb      	b.n	8003682 <__swsetup_r+0x1e>
 80036aa:	4b24      	ldr	r3, [pc, #144]	; (800373c <__swsetup_r+0xd8>)
 80036ac:	429c      	cmp	r4, r3
 80036ae:	bf08      	it	eq
 80036b0:	68ec      	ldreq	r4, [r5, #12]
 80036b2:	e7e6      	b.n	8003682 <__swsetup_r+0x1e>
 80036b4:	0758      	lsls	r0, r3, #29
 80036b6:	d512      	bpl.n	80036de <__swsetup_r+0x7a>
 80036b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80036ba:	b141      	cbz	r1, 80036ce <__swsetup_r+0x6a>
 80036bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80036c0:	4299      	cmp	r1, r3
 80036c2:	d002      	beq.n	80036ca <__swsetup_r+0x66>
 80036c4:	4630      	mov	r0, r6
 80036c6:	f000 fa59 	bl	8003b7c <_free_r>
 80036ca:	2300      	movs	r3, #0
 80036cc:	6363      	str	r3, [r4, #52]	; 0x34
 80036ce:	89a3      	ldrh	r3, [r4, #12]
 80036d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80036d4:	81a3      	strh	r3, [r4, #12]
 80036d6:	2300      	movs	r3, #0
 80036d8:	6063      	str	r3, [r4, #4]
 80036da:	6923      	ldr	r3, [r4, #16]
 80036dc:	6023      	str	r3, [r4, #0]
 80036de:	89a3      	ldrh	r3, [r4, #12]
 80036e0:	f043 0308 	orr.w	r3, r3, #8
 80036e4:	81a3      	strh	r3, [r4, #12]
 80036e6:	6923      	ldr	r3, [r4, #16]
 80036e8:	b94b      	cbnz	r3, 80036fe <__swsetup_r+0x9a>
 80036ea:	89a3      	ldrh	r3, [r4, #12]
 80036ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80036f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036f4:	d003      	beq.n	80036fe <__swsetup_r+0x9a>
 80036f6:	4621      	mov	r1, r4
 80036f8:	4630      	mov	r0, r6
 80036fa:	f000 f9ff 	bl	8003afc <__smakebuf_r>
 80036fe:	89a0      	ldrh	r0, [r4, #12]
 8003700:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003704:	f010 0301 	ands.w	r3, r0, #1
 8003708:	d00a      	beq.n	8003720 <__swsetup_r+0xbc>
 800370a:	2300      	movs	r3, #0
 800370c:	60a3      	str	r3, [r4, #8]
 800370e:	6963      	ldr	r3, [r4, #20]
 8003710:	425b      	negs	r3, r3
 8003712:	61a3      	str	r3, [r4, #24]
 8003714:	6923      	ldr	r3, [r4, #16]
 8003716:	b943      	cbnz	r3, 800372a <__swsetup_r+0xc6>
 8003718:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800371c:	d1ba      	bne.n	8003694 <__swsetup_r+0x30>
 800371e:	bd70      	pop	{r4, r5, r6, pc}
 8003720:	0781      	lsls	r1, r0, #30
 8003722:	bf58      	it	pl
 8003724:	6963      	ldrpl	r3, [r4, #20]
 8003726:	60a3      	str	r3, [r4, #8]
 8003728:	e7f4      	b.n	8003714 <__swsetup_r+0xb0>
 800372a:	2000      	movs	r0, #0
 800372c:	e7f7      	b.n	800371e <__swsetup_r+0xba>
 800372e:	bf00      	nop
 8003730:	200001c4 	.word	0x200001c4
 8003734:	0800468c 	.word	0x0800468c
 8003738:	080046ac 	.word	0x080046ac
 800373c:	0800466c 	.word	0x0800466c

08003740 <__sflush_r>:
 8003740:	898a      	ldrh	r2, [r1, #12]
 8003742:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003746:	4605      	mov	r5, r0
 8003748:	0710      	lsls	r0, r2, #28
 800374a:	460c      	mov	r4, r1
 800374c:	d458      	bmi.n	8003800 <__sflush_r+0xc0>
 800374e:	684b      	ldr	r3, [r1, #4]
 8003750:	2b00      	cmp	r3, #0
 8003752:	dc05      	bgt.n	8003760 <__sflush_r+0x20>
 8003754:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003756:	2b00      	cmp	r3, #0
 8003758:	dc02      	bgt.n	8003760 <__sflush_r+0x20>
 800375a:	2000      	movs	r0, #0
 800375c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003760:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003762:	2e00      	cmp	r6, #0
 8003764:	d0f9      	beq.n	800375a <__sflush_r+0x1a>
 8003766:	2300      	movs	r3, #0
 8003768:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800376c:	682f      	ldr	r7, [r5, #0]
 800376e:	602b      	str	r3, [r5, #0]
 8003770:	d032      	beq.n	80037d8 <__sflush_r+0x98>
 8003772:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003774:	89a3      	ldrh	r3, [r4, #12]
 8003776:	075a      	lsls	r2, r3, #29
 8003778:	d505      	bpl.n	8003786 <__sflush_r+0x46>
 800377a:	6863      	ldr	r3, [r4, #4]
 800377c:	1ac0      	subs	r0, r0, r3
 800377e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003780:	b10b      	cbz	r3, 8003786 <__sflush_r+0x46>
 8003782:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003784:	1ac0      	subs	r0, r0, r3
 8003786:	2300      	movs	r3, #0
 8003788:	4602      	mov	r2, r0
 800378a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800378c:	6a21      	ldr	r1, [r4, #32]
 800378e:	4628      	mov	r0, r5
 8003790:	47b0      	blx	r6
 8003792:	1c43      	adds	r3, r0, #1
 8003794:	89a3      	ldrh	r3, [r4, #12]
 8003796:	d106      	bne.n	80037a6 <__sflush_r+0x66>
 8003798:	6829      	ldr	r1, [r5, #0]
 800379a:	291d      	cmp	r1, #29
 800379c:	d82c      	bhi.n	80037f8 <__sflush_r+0xb8>
 800379e:	4a2a      	ldr	r2, [pc, #168]	; (8003848 <__sflush_r+0x108>)
 80037a0:	40ca      	lsrs	r2, r1
 80037a2:	07d6      	lsls	r6, r2, #31
 80037a4:	d528      	bpl.n	80037f8 <__sflush_r+0xb8>
 80037a6:	2200      	movs	r2, #0
 80037a8:	6062      	str	r2, [r4, #4]
 80037aa:	04d9      	lsls	r1, r3, #19
 80037ac:	6922      	ldr	r2, [r4, #16]
 80037ae:	6022      	str	r2, [r4, #0]
 80037b0:	d504      	bpl.n	80037bc <__sflush_r+0x7c>
 80037b2:	1c42      	adds	r2, r0, #1
 80037b4:	d101      	bne.n	80037ba <__sflush_r+0x7a>
 80037b6:	682b      	ldr	r3, [r5, #0]
 80037b8:	b903      	cbnz	r3, 80037bc <__sflush_r+0x7c>
 80037ba:	6560      	str	r0, [r4, #84]	; 0x54
 80037bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80037be:	602f      	str	r7, [r5, #0]
 80037c0:	2900      	cmp	r1, #0
 80037c2:	d0ca      	beq.n	800375a <__sflush_r+0x1a>
 80037c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80037c8:	4299      	cmp	r1, r3
 80037ca:	d002      	beq.n	80037d2 <__sflush_r+0x92>
 80037cc:	4628      	mov	r0, r5
 80037ce:	f000 f9d5 	bl	8003b7c <_free_r>
 80037d2:	2000      	movs	r0, #0
 80037d4:	6360      	str	r0, [r4, #52]	; 0x34
 80037d6:	e7c1      	b.n	800375c <__sflush_r+0x1c>
 80037d8:	6a21      	ldr	r1, [r4, #32]
 80037da:	2301      	movs	r3, #1
 80037dc:	4628      	mov	r0, r5
 80037de:	47b0      	blx	r6
 80037e0:	1c41      	adds	r1, r0, #1
 80037e2:	d1c7      	bne.n	8003774 <__sflush_r+0x34>
 80037e4:	682b      	ldr	r3, [r5, #0]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d0c4      	beq.n	8003774 <__sflush_r+0x34>
 80037ea:	2b1d      	cmp	r3, #29
 80037ec:	d001      	beq.n	80037f2 <__sflush_r+0xb2>
 80037ee:	2b16      	cmp	r3, #22
 80037f0:	d101      	bne.n	80037f6 <__sflush_r+0xb6>
 80037f2:	602f      	str	r7, [r5, #0]
 80037f4:	e7b1      	b.n	800375a <__sflush_r+0x1a>
 80037f6:	89a3      	ldrh	r3, [r4, #12]
 80037f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80037fc:	81a3      	strh	r3, [r4, #12]
 80037fe:	e7ad      	b.n	800375c <__sflush_r+0x1c>
 8003800:	690f      	ldr	r7, [r1, #16]
 8003802:	2f00      	cmp	r7, #0
 8003804:	d0a9      	beq.n	800375a <__sflush_r+0x1a>
 8003806:	0793      	lsls	r3, r2, #30
 8003808:	680e      	ldr	r6, [r1, #0]
 800380a:	bf08      	it	eq
 800380c:	694b      	ldreq	r3, [r1, #20]
 800380e:	600f      	str	r7, [r1, #0]
 8003810:	bf18      	it	ne
 8003812:	2300      	movne	r3, #0
 8003814:	eba6 0807 	sub.w	r8, r6, r7
 8003818:	608b      	str	r3, [r1, #8]
 800381a:	f1b8 0f00 	cmp.w	r8, #0
 800381e:	dd9c      	ble.n	800375a <__sflush_r+0x1a>
 8003820:	6a21      	ldr	r1, [r4, #32]
 8003822:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003824:	4643      	mov	r3, r8
 8003826:	463a      	mov	r2, r7
 8003828:	4628      	mov	r0, r5
 800382a:	47b0      	blx	r6
 800382c:	2800      	cmp	r0, #0
 800382e:	dc06      	bgt.n	800383e <__sflush_r+0xfe>
 8003830:	89a3      	ldrh	r3, [r4, #12]
 8003832:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003836:	81a3      	strh	r3, [r4, #12]
 8003838:	f04f 30ff 	mov.w	r0, #4294967295
 800383c:	e78e      	b.n	800375c <__sflush_r+0x1c>
 800383e:	4407      	add	r7, r0
 8003840:	eba8 0800 	sub.w	r8, r8, r0
 8003844:	e7e9      	b.n	800381a <__sflush_r+0xda>
 8003846:	bf00      	nop
 8003848:	20400001 	.word	0x20400001

0800384c <_fflush_r>:
 800384c:	b538      	push	{r3, r4, r5, lr}
 800384e:	690b      	ldr	r3, [r1, #16]
 8003850:	4605      	mov	r5, r0
 8003852:	460c      	mov	r4, r1
 8003854:	b913      	cbnz	r3, 800385c <_fflush_r+0x10>
 8003856:	2500      	movs	r5, #0
 8003858:	4628      	mov	r0, r5
 800385a:	bd38      	pop	{r3, r4, r5, pc}
 800385c:	b118      	cbz	r0, 8003866 <_fflush_r+0x1a>
 800385e:	6983      	ldr	r3, [r0, #24]
 8003860:	b90b      	cbnz	r3, 8003866 <_fflush_r+0x1a>
 8003862:	f000 f887 	bl	8003974 <__sinit>
 8003866:	4b14      	ldr	r3, [pc, #80]	; (80038b8 <_fflush_r+0x6c>)
 8003868:	429c      	cmp	r4, r3
 800386a:	d11b      	bne.n	80038a4 <_fflush_r+0x58>
 800386c:	686c      	ldr	r4, [r5, #4]
 800386e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d0ef      	beq.n	8003856 <_fflush_r+0xa>
 8003876:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003878:	07d0      	lsls	r0, r2, #31
 800387a:	d404      	bmi.n	8003886 <_fflush_r+0x3a>
 800387c:	0599      	lsls	r1, r3, #22
 800387e:	d402      	bmi.n	8003886 <_fflush_r+0x3a>
 8003880:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003882:	f000 f915 	bl	8003ab0 <__retarget_lock_acquire_recursive>
 8003886:	4628      	mov	r0, r5
 8003888:	4621      	mov	r1, r4
 800388a:	f7ff ff59 	bl	8003740 <__sflush_r>
 800388e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003890:	07da      	lsls	r2, r3, #31
 8003892:	4605      	mov	r5, r0
 8003894:	d4e0      	bmi.n	8003858 <_fflush_r+0xc>
 8003896:	89a3      	ldrh	r3, [r4, #12]
 8003898:	059b      	lsls	r3, r3, #22
 800389a:	d4dd      	bmi.n	8003858 <_fflush_r+0xc>
 800389c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800389e:	f000 f908 	bl	8003ab2 <__retarget_lock_release_recursive>
 80038a2:	e7d9      	b.n	8003858 <_fflush_r+0xc>
 80038a4:	4b05      	ldr	r3, [pc, #20]	; (80038bc <_fflush_r+0x70>)
 80038a6:	429c      	cmp	r4, r3
 80038a8:	d101      	bne.n	80038ae <_fflush_r+0x62>
 80038aa:	68ac      	ldr	r4, [r5, #8]
 80038ac:	e7df      	b.n	800386e <_fflush_r+0x22>
 80038ae:	4b04      	ldr	r3, [pc, #16]	; (80038c0 <_fflush_r+0x74>)
 80038b0:	429c      	cmp	r4, r3
 80038b2:	bf08      	it	eq
 80038b4:	68ec      	ldreq	r4, [r5, #12]
 80038b6:	e7da      	b.n	800386e <_fflush_r+0x22>
 80038b8:	0800468c 	.word	0x0800468c
 80038bc:	080046ac 	.word	0x080046ac
 80038c0:	0800466c 	.word	0x0800466c

080038c4 <std>:
 80038c4:	2300      	movs	r3, #0
 80038c6:	b510      	push	{r4, lr}
 80038c8:	4604      	mov	r4, r0
 80038ca:	e9c0 3300 	strd	r3, r3, [r0]
 80038ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80038d2:	6083      	str	r3, [r0, #8]
 80038d4:	8181      	strh	r1, [r0, #12]
 80038d6:	6643      	str	r3, [r0, #100]	; 0x64
 80038d8:	81c2      	strh	r2, [r0, #14]
 80038da:	6183      	str	r3, [r0, #24]
 80038dc:	4619      	mov	r1, r3
 80038de:	2208      	movs	r2, #8
 80038e0:	305c      	adds	r0, #92	; 0x5c
 80038e2:	f7ff fdcf 	bl	8003484 <memset>
 80038e6:	4b05      	ldr	r3, [pc, #20]	; (80038fc <std+0x38>)
 80038e8:	6263      	str	r3, [r4, #36]	; 0x24
 80038ea:	4b05      	ldr	r3, [pc, #20]	; (8003900 <std+0x3c>)
 80038ec:	62a3      	str	r3, [r4, #40]	; 0x28
 80038ee:	4b05      	ldr	r3, [pc, #20]	; (8003904 <std+0x40>)
 80038f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80038f2:	4b05      	ldr	r3, [pc, #20]	; (8003908 <std+0x44>)
 80038f4:	6224      	str	r4, [r4, #32]
 80038f6:	6323      	str	r3, [r4, #48]	; 0x30
 80038f8:	bd10      	pop	{r4, pc}
 80038fa:	bf00      	nop
 80038fc:	080042cd 	.word	0x080042cd
 8003900:	080042ef 	.word	0x080042ef
 8003904:	08004327 	.word	0x08004327
 8003908:	0800434b 	.word	0x0800434b

0800390c <_cleanup_r>:
 800390c:	4901      	ldr	r1, [pc, #4]	; (8003914 <_cleanup_r+0x8>)
 800390e:	f000 b8af 	b.w	8003a70 <_fwalk_reent>
 8003912:	bf00      	nop
 8003914:	0800384d 	.word	0x0800384d

08003918 <__sfmoreglue>:
 8003918:	b570      	push	{r4, r5, r6, lr}
 800391a:	1e4a      	subs	r2, r1, #1
 800391c:	2568      	movs	r5, #104	; 0x68
 800391e:	4355      	muls	r5, r2
 8003920:	460e      	mov	r6, r1
 8003922:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003926:	f000 f979 	bl	8003c1c <_malloc_r>
 800392a:	4604      	mov	r4, r0
 800392c:	b140      	cbz	r0, 8003940 <__sfmoreglue+0x28>
 800392e:	2100      	movs	r1, #0
 8003930:	e9c0 1600 	strd	r1, r6, [r0]
 8003934:	300c      	adds	r0, #12
 8003936:	60a0      	str	r0, [r4, #8]
 8003938:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800393c:	f7ff fda2 	bl	8003484 <memset>
 8003940:	4620      	mov	r0, r4
 8003942:	bd70      	pop	{r4, r5, r6, pc}

08003944 <__sfp_lock_acquire>:
 8003944:	4801      	ldr	r0, [pc, #4]	; (800394c <__sfp_lock_acquire+0x8>)
 8003946:	f000 b8b3 	b.w	8003ab0 <__retarget_lock_acquire_recursive>
 800394a:	bf00      	nop
 800394c:	20000842 	.word	0x20000842

08003950 <__sfp_lock_release>:
 8003950:	4801      	ldr	r0, [pc, #4]	; (8003958 <__sfp_lock_release+0x8>)
 8003952:	f000 b8ae 	b.w	8003ab2 <__retarget_lock_release_recursive>
 8003956:	bf00      	nop
 8003958:	20000842 	.word	0x20000842

0800395c <__sinit_lock_acquire>:
 800395c:	4801      	ldr	r0, [pc, #4]	; (8003964 <__sinit_lock_acquire+0x8>)
 800395e:	f000 b8a7 	b.w	8003ab0 <__retarget_lock_acquire_recursive>
 8003962:	bf00      	nop
 8003964:	2000083d 	.word	0x2000083d

08003968 <__sinit_lock_release>:
 8003968:	4801      	ldr	r0, [pc, #4]	; (8003970 <__sinit_lock_release+0x8>)
 800396a:	f000 b8a2 	b.w	8003ab2 <__retarget_lock_release_recursive>
 800396e:	bf00      	nop
 8003970:	2000083d 	.word	0x2000083d

08003974 <__sinit>:
 8003974:	b510      	push	{r4, lr}
 8003976:	4604      	mov	r4, r0
 8003978:	f7ff fff0 	bl	800395c <__sinit_lock_acquire>
 800397c:	69a3      	ldr	r3, [r4, #24]
 800397e:	b11b      	cbz	r3, 8003988 <__sinit+0x14>
 8003980:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003984:	f7ff bff0 	b.w	8003968 <__sinit_lock_release>
 8003988:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800398c:	6523      	str	r3, [r4, #80]	; 0x50
 800398e:	4b13      	ldr	r3, [pc, #76]	; (80039dc <__sinit+0x68>)
 8003990:	4a13      	ldr	r2, [pc, #76]	; (80039e0 <__sinit+0x6c>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	62a2      	str	r2, [r4, #40]	; 0x28
 8003996:	42a3      	cmp	r3, r4
 8003998:	bf04      	itt	eq
 800399a:	2301      	moveq	r3, #1
 800399c:	61a3      	streq	r3, [r4, #24]
 800399e:	4620      	mov	r0, r4
 80039a0:	f000 f820 	bl	80039e4 <__sfp>
 80039a4:	6060      	str	r0, [r4, #4]
 80039a6:	4620      	mov	r0, r4
 80039a8:	f000 f81c 	bl	80039e4 <__sfp>
 80039ac:	60a0      	str	r0, [r4, #8]
 80039ae:	4620      	mov	r0, r4
 80039b0:	f000 f818 	bl	80039e4 <__sfp>
 80039b4:	2200      	movs	r2, #0
 80039b6:	60e0      	str	r0, [r4, #12]
 80039b8:	2104      	movs	r1, #4
 80039ba:	6860      	ldr	r0, [r4, #4]
 80039bc:	f7ff ff82 	bl	80038c4 <std>
 80039c0:	68a0      	ldr	r0, [r4, #8]
 80039c2:	2201      	movs	r2, #1
 80039c4:	2109      	movs	r1, #9
 80039c6:	f7ff ff7d 	bl	80038c4 <std>
 80039ca:	68e0      	ldr	r0, [r4, #12]
 80039cc:	2202      	movs	r2, #2
 80039ce:	2112      	movs	r1, #18
 80039d0:	f7ff ff78 	bl	80038c4 <std>
 80039d4:	2301      	movs	r3, #1
 80039d6:	61a3      	str	r3, [r4, #24]
 80039d8:	e7d2      	b.n	8003980 <__sinit+0xc>
 80039da:	bf00      	nop
 80039dc:	08004668 	.word	0x08004668
 80039e0:	0800390d 	.word	0x0800390d

080039e4 <__sfp>:
 80039e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039e6:	4607      	mov	r7, r0
 80039e8:	f7ff ffac 	bl	8003944 <__sfp_lock_acquire>
 80039ec:	4b1e      	ldr	r3, [pc, #120]	; (8003a68 <__sfp+0x84>)
 80039ee:	681e      	ldr	r6, [r3, #0]
 80039f0:	69b3      	ldr	r3, [r6, #24]
 80039f2:	b913      	cbnz	r3, 80039fa <__sfp+0x16>
 80039f4:	4630      	mov	r0, r6
 80039f6:	f7ff ffbd 	bl	8003974 <__sinit>
 80039fa:	3648      	adds	r6, #72	; 0x48
 80039fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003a00:	3b01      	subs	r3, #1
 8003a02:	d503      	bpl.n	8003a0c <__sfp+0x28>
 8003a04:	6833      	ldr	r3, [r6, #0]
 8003a06:	b30b      	cbz	r3, 8003a4c <__sfp+0x68>
 8003a08:	6836      	ldr	r6, [r6, #0]
 8003a0a:	e7f7      	b.n	80039fc <__sfp+0x18>
 8003a0c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003a10:	b9d5      	cbnz	r5, 8003a48 <__sfp+0x64>
 8003a12:	4b16      	ldr	r3, [pc, #88]	; (8003a6c <__sfp+0x88>)
 8003a14:	60e3      	str	r3, [r4, #12]
 8003a16:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003a1a:	6665      	str	r5, [r4, #100]	; 0x64
 8003a1c:	f000 f847 	bl	8003aae <__retarget_lock_init_recursive>
 8003a20:	f7ff ff96 	bl	8003950 <__sfp_lock_release>
 8003a24:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003a28:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003a2c:	6025      	str	r5, [r4, #0]
 8003a2e:	61a5      	str	r5, [r4, #24]
 8003a30:	2208      	movs	r2, #8
 8003a32:	4629      	mov	r1, r5
 8003a34:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003a38:	f7ff fd24 	bl	8003484 <memset>
 8003a3c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003a40:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003a44:	4620      	mov	r0, r4
 8003a46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a48:	3468      	adds	r4, #104	; 0x68
 8003a4a:	e7d9      	b.n	8003a00 <__sfp+0x1c>
 8003a4c:	2104      	movs	r1, #4
 8003a4e:	4638      	mov	r0, r7
 8003a50:	f7ff ff62 	bl	8003918 <__sfmoreglue>
 8003a54:	4604      	mov	r4, r0
 8003a56:	6030      	str	r0, [r6, #0]
 8003a58:	2800      	cmp	r0, #0
 8003a5a:	d1d5      	bne.n	8003a08 <__sfp+0x24>
 8003a5c:	f7ff ff78 	bl	8003950 <__sfp_lock_release>
 8003a60:	230c      	movs	r3, #12
 8003a62:	603b      	str	r3, [r7, #0]
 8003a64:	e7ee      	b.n	8003a44 <__sfp+0x60>
 8003a66:	bf00      	nop
 8003a68:	08004668 	.word	0x08004668
 8003a6c:	ffff0001 	.word	0xffff0001

08003a70 <_fwalk_reent>:
 8003a70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a74:	4606      	mov	r6, r0
 8003a76:	4688      	mov	r8, r1
 8003a78:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003a7c:	2700      	movs	r7, #0
 8003a7e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003a82:	f1b9 0901 	subs.w	r9, r9, #1
 8003a86:	d505      	bpl.n	8003a94 <_fwalk_reent+0x24>
 8003a88:	6824      	ldr	r4, [r4, #0]
 8003a8a:	2c00      	cmp	r4, #0
 8003a8c:	d1f7      	bne.n	8003a7e <_fwalk_reent+0xe>
 8003a8e:	4638      	mov	r0, r7
 8003a90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a94:	89ab      	ldrh	r3, [r5, #12]
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d907      	bls.n	8003aaa <_fwalk_reent+0x3a>
 8003a9a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003a9e:	3301      	adds	r3, #1
 8003aa0:	d003      	beq.n	8003aaa <_fwalk_reent+0x3a>
 8003aa2:	4629      	mov	r1, r5
 8003aa4:	4630      	mov	r0, r6
 8003aa6:	47c0      	blx	r8
 8003aa8:	4307      	orrs	r7, r0
 8003aaa:	3568      	adds	r5, #104	; 0x68
 8003aac:	e7e9      	b.n	8003a82 <_fwalk_reent+0x12>

08003aae <__retarget_lock_init_recursive>:
 8003aae:	4770      	bx	lr

08003ab0 <__retarget_lock_acquire_recursive>:
 8003ab0:	4770      	bx	lr

08003ab2 <__retarget_lock_release_recursive>:
 8003ab2:	4770      	bx	lr

08003ab4 <__swhatbuf_r>:
 8003ab4:	b570      	push	{r4, r5, r6, lr}
 8003ab6:	460e      	mov	r6, r1
 8003ab8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003abc:	2900      	cmp	r1, #0
 8003abe:	b096      	sub	sp, #88	; 0x58
 8003ac0:	4614      	mov	r4, r2
 8003ac2:	461d      	mov	r5, r3
 8003ac4:	da07      	bge.n	8003ad6 <__swhatbuf_r+0x22>
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	602b      	str	r3, [r5, #0]
 8003aca:	89b3      	ldrh	r3, [r6, #12]
 8003acc:	061a      	lsls	r2, r3, #24
 8003ace:	d410      	bmi.n	8003af2 <__swhatbuf_r+0x3e>
 8003ad0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ad4:	e00e      	b.n	8003af4 <__swhatbuf_r+0x40>
 8003ad6:	466a      	mov	r2, sp
 8003ad8:	f000 fc5e 	bl	8004398 <_fstat_r>
 8003adc:	2800      	cmp	r0, #0
 8003ade:	dbf2      	blt.n	8003ac6 <__swhatbuf_r+0x12>
 8003ae0:	9a01      	ldr	r2, [sp, #4]
 8003ae2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003ae6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003aea:	425a      	negs	r2, r3
 8003aec:	415a      	adcs	r2, r3
 8003aee:	602a      	str	r2, [r5, #0]
 8003af0:	e7ee      	b.n	8003ad0 <__swhatbuf_r+0x1c>
 8003af2:	2340      	movs	r3, #64	; 0x40
 8003af4:	2000      	movs	r0, #0
 8003af6:	6023      	str	r3, [r4, #0]
 8003af8:	b016      	add	sp, #88	; 0x58
 8003afa:	bd70      	pop	{r4, r5, r6, pc}

08003afc <__smakebuf_r>:
 8003afc:	898b      	ldrh	r3, [r1, #12]
 8003afe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003b00:	079d      	lsls	r5, r3, #30
 8003b02:	4606      	mov	r6, r0
 8003b04:	460c      	mov	r4, r1
 8003b06:	d507      	bpl.n	8003b18 <__smakebuf_r+0x1c>
 8003b08:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003b0c:	6023      	str	r3, [r4, #0]
 8003b0e:	6123      	str	r3, [r4, #16]
 8003b10:	2301      	movs	r3, #1
 8003b12:	6163      	str	r3, [r4, #20]
 8003b14:	b002      	add	sp, #8
 8003b16:	bd70      	pop	{r4, r5, r6, pc}
 8003b18:	ab01      	add	r3, sp, #4
 8003b1a:	466a      	mov	r2, sp
 8003b1c:	f7ff ffca 	bl	8003ab4 <__swhatbuf_r>
 8003b20:	9900      	ldr	r1, [sp, #0]
 8003b22:	4605      	mov	r5, r0
 8003b24:	4630      	mov	r0, r6
 8003b26:	f000 f879 	bl	8003c1c <_malloc_r>
 8003b2a:	b948      	cbnz	r0, 8003b40 <__smakebuf_r+0x44>
 8003b2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b30:	059a      	lsls	r2, r3, #22
 8003b32:	d4ef      	bmi.n	8003b14 <__smakebuf_r+0x18>
 8003b34:	f023 0303 	bic.w	r3, r3, #3
 8003b38:	f043 0302 	orr.w	r3, r3, #2
 8003b3c:	81a3      	strh	r3, [r4, #12]
 8003b3e:	e7e3      	b.n	8003b08 <__smakebuf_r+0xc>
 8003b40:	4b0d      	ldr	r3, [pc, #52]	; (8003b78 <__smakebuf_r+0x7c>)
 8003b42:	62b3      	str	r3, [r6, #40]	; 0x28
 8003b44:	89a3      	ldrh	r3, [r4, #12]
 8003b46:	6020      	str	r0, [r4, #0]
 8003b48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b4c:	81a3      	strh	r3, [r4, #12]
 8003b4e:	9b00      	ldr	r3, [sp, #0]
 8003b50:	6163      	str	r3, [r4, #20]
 8003b52:	9b01      	ldr	r3, [sp, #4]
 8003b54:	6120      	str	r0, [r4, #16]
 8003b56:	b15b      	cbz	r3, 8003b70 <__smakebuf_r+0x74>
 8003b58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003b5c:	4630      	mov	r0, r6
 8003b5e:	f000 fc2d 	bl	80043bc <_isatty_r>
 8003b62:	b128      	cbz	r0, 8003b70 <__smakebuf_r+0x74>
 8003b64:	89a3      	ldrh	r3, [r4, #12]
 8003b66:	f023 0303 	bic.w	r3, r3, #3
 8003b6a:	f043 0301 	orr.w	r3, r3, #1
 8003b6e:	81a3      	strh	r3, [r4, #12]
 8003b70:	89a0      	ldrh	r0, [r4, #12]
 8003b72:	4305      	orrs	r5, r0
 8003b74:	81a5      	strh	r5, [r4, #12]
 8003b76:	e7cd      	b.n	8003b14 <__smakebuf_r+0x18>
 8003b78:	0800390d 	.word	0x0800390d

08003b7c <_free_r>:
 8003b7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003b7e:	2900      	cmp	r1, #0
 8003b80:	d048      	beq.n	8003c14 <_free_r+0x98>
 8003b82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b86:	9001      	str	r0, [sp, #4]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	f1a1 0404 	sub.w	r4, r1, #4
 8003b8e:	bfb8      	it	lt
 8003b90:	18e4      	addlt	r4, r4, r3
 8003b92:	f000 fc35 	bl	8004400 <__malloc_lock>
 8003b96:	4a20      	ldr	r2, [pc, #128]	; (8003c18 <_free_r+0x9c>)
 8003b98:	9801      	ldr	r0, [sp, #4]
 8003b9a:	6813      	ldr	r3, [r2, #0]
 8003b9c:	4615      	mov	r5, r2
 8003b9e:	b933      	cbnz	r3, 8003bae <_free_r+0x32>
 8003ba0:	6063      	str	r3, [r4, #4]
 8003ba2:	6014      	str	r4, [r2, #0]
 8003ba4:	b003      	add	sp, #12
 8003ba6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003baa:	f000 bc2f 	b.w	800440c <__malloc_unlock>
 8003bae:	42a3      	cmp	r3, r4
 8003bb0:	d90b      	bls.n	8003bca <_free_r+0x4e>
 8003bb2:	6821      	ldr	r1, [r4, #0]
 8003bb4:	1862      	adds	r2, r4, r1
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	bf04      	itt	eq
 8003bba:	681a      	ldreq	r2, [r3, #0]
 8003bbc:	685b      	ldreq	r3, [r3, #4]
 8003bbe:	6063      	str	r3, [r4, #4]
 8003bc0:	bf04      	itt	eq
 8003bc2:	1852      	addeq	r2, r2, r1
 8003bc4:	6022      	streq	r2, [r4, #0]
 8003bc6:	602c      	str	r4, [r5, #0]
 8003bc8:	e7ec      	b.n	8003ba4 <_free_r+0x28>
 8003bca:	461a      	mov	r2, r3
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	b10b      	cbz	r3, 8003bd4 <_free_r+0x58>
 8003bd0:	42a3      	cmp	r3, r4
 8003bd2:	d9fa      	bls.n	8003bca <_free_r+0x4e>
 8003bd4:	6811      	ldr	r1, [r2, #0]
 8003bd6:	1855      	adds	r5, r2, r1
 8003bd8:	42a5      	cmp	r5, r4
 8003bda:	d10b      	bne.n	8003bf4 <_free_r+0x78>
 8003bdc:	6824      	ldr	r4, [r4, #0]
 8003bde:	4421      	add	r1, r4
 8003be0:	1854      	adds	r4, r2, r1
 8003be2:	42a3      	cmp	r3, r4
 8003be4:	6011      	str	r1, [r2, #0]
 8003be6:	d1dd      	bne.n	8003ba4 <_free_r+0x28>
 8003be8:	681c      	ldr	r4, [r3, #0]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	6053      	str	r3, [r2, #4]
 8003bee:	4421      	add	r1, r4
 8003bf0:	6011      	str	r1, [r2, #0]
 8003bf2:	e7d7      	b.n	8003ba4 <_free_r+0x28>
 8003bf4:	d902      	bls.n	8003bfc <_free_r+0x80>
 8003bf6:	230c      	movs	r3, #12
 8003bf8:	6003      	str	r3, [r0, #0]
 8003bfa:	e7d3      	b.n	8003ba4 <_free_r+0x28>
 8003bfc:	6825      	ldr	r5, [r4, #0]
 8003bfe:	1961      	adds	r1, r4, r5
 8003c00:	428b      	cmp	r3, r1
 8003c02:	bf04      	itt	eq
 8003c04:	6819      	ldreq	r1, [r3, #0]
 8003c06:	685b      	ldreq	r3, [r3, #4]
 8003c08:	6063      	str	r3, [r4, #4]
 8003c0a:	bf04      	itt	eq
 8003c0c:	1949      	addeq	r1, r1, r5
 8003c0e:	6021      	streq	r1, [r4, #0]
 8003c10:	6054      	str	r4, [r2, #4]
 8003c12:	e7c7      	b.n	8003ba4 <_free_r+0x28>
 8003c14:	b003      	add	sp, #12
 8003c16:	bd30      	pop	{r4, r5, pc}
 8003c18:	20000248 	.word	0x20000248

08003c1c <_malloc_r>:
 8003c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c1e:	1ccd      	adds	r5, r1, #3
 8003c20:	f025 0503 	bic.w	r5, r5, #3
 8003c24:	3508      	adds	r5, #8
 8003c26:	2d0c      	cmp	r5, #12
 8003c28:	bf38      	it	cc
 8003c2a:	250c      	movcc	r5, #12
 8003c2c:	2d00      	cmp	r5, #0
 8003c2e:	4606      	mov	r6, r0
 8003c30:	db01      	blt.n	8003c36 <_malloc_r+0x1a>
 8003c32:	42a9      	cmp	r1, r5
 8003c34:	d903      	bls.n	8003c3e <_malloc_r+0x22>
 8003c36:	230c      	movs	r3, #12
 8003c38:	6033      	str	r3, [r6, #0]
 8003c3a:	2000      	movs	r0, #0
 8003c3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c3e:	f000 fbdf 	bl	8004400 <__malloc_lock>
 8003c42:	4921      	ldr	r1, [pc, #132]	; (8003cc8 <_malloc_r+0xac>)
 8003c44:	680a      	ldr	r2, [r1, #0]
 8003c46:	4614      	mov	r4, r2
 8003c48:	b99c      	cbnz	r4, 8003c72 <_malloc_r+0x56>
 8003c4a:	4f20      	ldr	r7, [pc, #128]	; (8003ccc <_malloc_r+0xb0>)
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	b923      	cbnz	r3, 8003c5a <_malloc_r+0x3e>
 8003c50:	4621      	mov	r1, r4
 8003c52:	4630      	mov	r0, r6
 8003c54:	f000 fb2a 	bl	80042ac <_sbrk_r>
 8003c58:	6038      	str	r0, [r7, #0]
 8003c5a:	4629      	mov	r1, r5
 8003c5c:	4630      	mov	r0, r6
 8003c5e:	f000 fb25 	bl	80042ac <_sbrk_r>
 8003c62:	1c43      	adds	r3, r0, #1
 8003c64:	d123      	bne.n	8003cae <_malloc_r+0x92>
 8003c66:	230c      	movs	r3, #12
 8003c68:	6033      	str	r3, [r6, #0]
 8003c6a:	4630      	mov	r0, r6
 8003c6c:	f000 fbce 	bl	800440c <__malloc_unlock>
 8003c70:	e7e3      	b.n	8003c3a <_malloc_r+0x1e>
 8003c72:	6823      	ldr	r3, [r4, #0]
 8003c74:	1b5b      	subs	r3, r3, r5
 8003c76:	d417      	bmi.n	8003ca8 <_malloc_r+0x8c>
 8003c78:	2b0b      	cmp	r3, #11
 8003c7a:	d903      	bls.n	8003c84 <_malloc_r+0x68>
 8003c7c:	6023      	str	r3, [r4, #0]
 8003c7e:	441c      	add	r4, r3
 8003c80:	6025      	str	r5, [r4, #0]
 8003c82:	e004      	b.n	8003c8e <_malloc_r+0x72>
 8003c84:	6863      	ldr	r3, [r4, #4]
 8003c86:	42a2      	cmp	r2, r4
 8003c88:	bf0c      	ite	eq
 8003c8a:	600b      	streq	r3, [r1, #0]
 8003c8c:	6053      	strne	r3, [r2, #4]
 8003c8e:	4630      	mov	r0, r6
 8003c90:	f000 fbbc 	bl	800440c <__malloc_unlock>
 8003c94:	f104 000b 	add.w	r0, r4, #11
 8003c98:	1d23      	adds	r3, r4, #4
 8003c9a:	f020 0007 	bic.w	r0, r0, #7
 8003c9e:	1ac2      	subs	r2, r0, r3
 8003ca0:	d0cc      	beq.n	8003c3c <_malloc_r+0x20>
 8003ca2:	1a1b      	subs	r3, r3, r0
 8003ca4:	50a3      	str	r3, [r4, r2]
 8003ca6:	e7c9      	b.n	8003c3c <_malloc_r+0x20>
 8003ca8:	4622      	mov	r2, r4
 8003caa:	6864      	ldr	r4, [r4, #4]
 8003cac:	e7cc      	b.n	8003c48 <_malloc_r+0x2c>
 8003cae:	1cc4      	adds	r4, r0, #3
 8003cb0:	f024 0403 	bic.w	r4, r4, #3
 8003cb4:	42a0      	cmp	r0, r4
 8003cb6:	d0e3      	beq.n	8003c80 <_malloc_r+0x64>
 8003cb8:	1a21      	subs	r1, r4, r0
 8003cba:	4630      	mov	r0, r6
 8003cbc:	f000 faf6 	bl	80042ac <_sbrk_r>
 8003cc0:	3001      	adds	r0, #1
 8003cc2:	d1dd      	bne.n	8003c80 <_malloc_r+0x64>
 8003cc4:	e7cf      	b.n	8003c66 <_malloc_r+0x4a>
 8003cc6:	bf00      	nop
 8003cc8:	20000248 	.word	0x20000248
 8003ccc:	2000024c 	.word	0x2000024c

08003cd0 <__sfputc_r>:
 8003cd0:	6893      	ldr	r3, [r2, #8]
 8003cd2:	3b01      	subs	r3, #1
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	b410      	push	{r4}
 8003cd8:	6093      	str	r3, [r2, #8]
 8003cda:	da08      	bge.n	8003cee <__sfputc_r+0x1e>
 8003cdc:	6994      	ldr	r4, [r2, #24]
 8003cde:	42a3      	cmp	r3, r4
 8003ce0:	db01      	blt.n	8003ce6 <__sfputc_r+0x16>
 8003ce2:	290a      	cmp	r1, #10
 8003ce4:	d103      	bne.n	8003cee <__sfputc_r+0x1e>
 8003ce6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003cea:	f7ff bc69 	b.w	80035c0 <__swbuf_r>
 8003cee:	6813      	ldr	r3, [r2, #0]
 8003cf0:	1c58      	adds	r0, r3, #1
 8003cf2:	6010      	str	r0, [r2, #0]
 8003cf4:	7019      	strb	r1, [r3, #0]
 8003cf6:	4608      	mov	r0, r1
 8003cf8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003cfc:	4770      	bx	lr

08003cfe <__sfputs_r>:
 8003cfe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d00:	4606      	mov	r6, r0
 8003d02:	460f      	mov	r7, r1
 8003d04:	4614      	mov	r4, r2
 8003d06:	18d5      	adds	r5, r2, r3
 8003d08:	42ac      	cmp	r4, r5
 8003d0a:	d101      	bne.n	8003d10 <__sfputs_r+0x12>
 8003d0c:	2000      	movs	r0, #0
 8003d0e:	e007      	b.n	8003d20 <__sfputs_r+0x22>
 8003d10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d14:	463a      	mov	r2, r7
 8003d16:	4630      	mov	r0, r6
 8003d18:	f7ff ffda 	bl	8003cd0 <__sfputc_r>
 8003d1c:	1c43      	adds	r3, r0, #1
 8003d1e:	d1f3      	bne.n	8003d08 <__sfputs_r+0xa>
 8003d20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003d24 <_vfiprintf_r>:
 8003d24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d28:	460d      	mov	r5, r1
 8003d2a:	b09d      	sub	sp, #116	; 0x74
 8003d2c:	4614      	mov	r4, r2
 8003d2e:	4698      	mov	r8, r3
 8003d30:	4606      	mov	r6, r0
 8003d32:	b118      	cbz	r0, 8003d3c <_vfiprintf_r+0x18>
 8003d34:	6983      	ldr	r3, [r0, #24]
 8003d36:	b90b      	cbnz	r3, 8003d3c <_vfiprintf_r+0x18>
 8003d38:	f7ff fe1c 	bl	8003974 <__sinit>
 8003d3c:	4b89      	ldr	r3, [pc, #548]	; (8003f64 <_vfiprintf_r+0x240>)
 8003d3e:	429d      	cmp	r5, r3
 8003d40:	d11b      	bne.n	8003d7a <_vfiprintf_r+0x56>
 8003d42:	6875      	ldr	r5, [r6, #4]
 8003d44:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003d46:	07d9      	lsls	r1, r3, #31
 8003d48:	d405      	bmi.n	8003d56 <_vfiprintf_r+0x32>
 8003d4a:	89ab      	ldrh	r3, [r5, #12]
 8003d4c:	059a      	lsls	r2, r3, #22
 8003d4e:	d402      	bmi.n	8003d56 <_vfiprintf_r+0x32>
 8003d50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003d52:	f7ff fead 	bl	8003ab0 <__retarget_lock_acquire_recursive>
 8003d56:	89ab      	ldrh	r3, [r5, #12]
 8003d58:	071b      	lsls	r3, r3, #28
 8003d5a:	d501      	bpl.n	8003d60 <_vfiprintf_r+0x3c>
 8003d5c:	692b      	ldr	r3, [r5, #16]
 8003d5e:	b9eb      	cbnz	r3, 8003d9c <_vfiprintf_r+0x78>
 8003d60:	4629      	mov	r1, r5
 8003d62:	4630      	mov	r0, r6
 8003d64:	f7ff fc7e 	bl	8003664 <__swsetup_r>
 8003d68:	b1c0      	cbz	r0, 8003d9c <_vfiprintf_r+0x78>
 8003d6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003d6c:	07dc      	lsls	r4, r3, #31
 8003d6e:	d50e      	bpl.n	8003d8e <_vfiprintf_r+0x6a>
 8003d70:	f04f 30ff 	mov.w	r0, #4294967295
 8003d74:	b01d      	add	sp, #116	; 0x74
 8003d76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d7a:	4b7b      	ldr	r3, [pc, #492]	; (8003f68 <_vfiprintf_r+0x244>)
 8003d7c:	429d      	cmp	r5, r3
 8003d7e:	d101      	bne.n	8003d84 <_vfiprintf_r+0x60>
 8003d80:	68b5      	ldr	r5, [r6, #8]
 8003d82:	e7df      	b.n	8003d44 <_vfiprintf_r+0x20>
 8003d84:	4b79      	ldr	r3, [pc, #484]	; (8003f6c <_vfiprintf_r+0x248>)
 8003d86:	429d      	cmp	r5, r3
 8003d88:	bf08      	it	eq
 8003d8a:	68f5      	ldreq	r5, [r6, #12]
 8003d8c:	e7da      	b.n	8003d44 <_vfiprintf_r+0x20>
 8003d8e:	89ab      	ldrh	r3, [r5, #12]
 8003d90:	0598      	lsls	r0, r3, #22
 8003d92:	d4ed      	bmi.n	8003d70 <_vfiprintf_r+0x4c>
 8003d94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003d96:	f7ff fe8c 	bl	8003ab2 <__retarget_lock_release_recursive>
 8003d9a:	e7e9      	b.n	8003d70 <_vfiprintf_r+0x4c>
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	9309      	str	r3, [sp, #36]	; 0x24
 8003da0:	2320      	movs	r3, #32
 8003da2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003da6:	f8cd 800c 	str.w	r8, [sp, #12]
 8003daa:	2330      	movs	r3, #48	; 0x30
 8003dac:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003f70 <_vfiprintf_r+0x24c>
 8003db0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003db4:	f04f 0901 	mov.w	r9, #1
 8003db8:	4623      	mov	r3, r4
 8003dba:	469a      	mov	sl, r3
 8003dbc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003dc0:	b10a      	cbz	r2, 8003dc6 <_vfiprintf_r+0xa2>
 8003dc2:	2a25      	cmp	r2, #37	; 0x25
 8003dc4:	d1f9      	bne.n	8003dba <_vfiprintf_r+0x96>
 8003dc6:	ebba 0b04 	subs.w	fp, sl, r4
 8003dca:	d00b      	beq.n	8003de4 <_vfiprintf_r+0xc0>
 8003dcc:	465b      	mov	r3, fp
 8003dce:	4622      	mov	r2, r4
 8003dd0:	4629      	mov	r1, r5
 8003dd2:	4630      	mov	r0, r6
 8003dd4:	f7ff ff93 	bl	8003cfe <__sfputs_r>
 8003dd8:	3001      	adds	r0, #1
 8003dda:	f000 80aa 	beq.w	8003f32 <_vfiprintf_r+0x20e>
 8003dde:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003de0:	445a      	add	r2, fp
 8003de2:	9209      	str	r2, [sp, #36]	; 0x24
 8003de4:	f89a 3000 	ldrb.w	r3, [sl]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	f000 80a2 	beq.w	8003f32 <_vfiprintf_r+0x20e>
 8003dee:	2300      	movs	r3, #0
 8003df0:	f04f 32ff 	mov.w	r2, #4294967295
 8003df4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003df8:	f10a 0a01 	add.w	sl, sl, #1
 8003dfc:	9304      	str	r3, [sp, #16]
 8003dfe:	9307      	str	r3, [sp, #28]
 8003e00:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003e04:	931a      	str	r3, [sp, #104]	; 0x68
 8003e06:	4654      	mov	r4, sl
 8003e08:	2205      	movs	r2, #5
 8003e0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e0e:	4858      	ldr	r0, [pc, #352]	; (8003f70 <_vfiprintf_r+0x24c>)
 8003e10:	f7fc f9ee 	bl	80001f0 <memchr>
 8003e14:	9a04      	ldr	r2, [sp, #16]
 8003e16:	b9d8      	cbnz	r0, 8003e50 <_vfiprintf_r+0x12c>
 8003e18:	06d1      	lsls	r1, r2, #27
 8003e1a:	bf44      	itt	mi
 8003e1c:	2320      	movmi	r3, #32
 8003e1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003e22:	0713      	lsls	r3, r2, #28
 8003e24:	bf44      	itt	mi
 8003e26:	232b      	movmi	r3, #43	; 0x2b
 8003e28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003e2c:	f89a 3000 	ldrb.w	r3, [sl]
 8003e30:	2b2a      	cmp	r3, #42	; 0x2a
 8003e32:	d015      	beq.n	8003e60 <_vfiprintf_r+0x13c>
 8003e34:	9a07      	ldr	r2, [sp, #28]
 8003e36:	4654      	mov	r4, sl
 8003e38:	2000      	movs	r0, #0
 8003e3a:	f04f 0c0a 	mov.w	ip, #10
 8003e3e:	4621      	mov	r1, r4
 8003e40:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003e44:	3b30      	subs	r3, #48	; 0x30
 8003e46:	2b09      	cmp	r3, #9
 8003e48:	d94e      	bls.n	8003ee8 <_vfiprintf_r+0x1c4>
 8003e4a:	b1b0      	cbz	r0, 8003e7a <_vfiprintf_r+0x156>
 8003e4c:	9207      	str	r2, [sp, #28]
 8003e4e:	e014      	b.n	8003e7a <_vfiprintf_r+0x156>
 8003e50:	eba0 0308 	sub.w	r3, r0, r8
 8003e54:	fa09 f303 	lsl.w	r3, r9, r3
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	9304      	str	r3, [sp, #16]
 8003e5c:	46a2      	mov	sl, r4
 8003e5e:	e7d2      	b.n	8003e06 <_vfiprintf_r+0xe2>
 8003e60:	9b03      	ldr	r3, [sp, #12]
 8003e62:	1d19      	adds	r1, r3, #4
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	9103      	str	r1, [sp, #12]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	bfbb      	ittet	lt
 8003e6c:	425b      	neglt	r3, r3
 8003e6e:	f042 0202 	orrlt.w	r2, r2, #2
 8003e72:	9307      	strge	r3, [sp, #28]
 8003e74:	9307      	strlt	r3, [sp, #28]
 8003e76:	bfb8      	it	lt
 8003e78:	9204      	strlt	r2, [sp, #16]
 8003e7a:	7823      	ldrb	r3, [r4, #0]
 8003e7c:	2b2e      	cmp	r3, #46	; 0x2e
 8003e7e:	d10c      	bne.n	8003e9a <_vfiprintf_r+0x176>
 8003e80:	7863      	ldrb	r3, [r4, #1]
 8003e82:	2b2a      	cmp	r3, #42	; 0x2a
 8003e84:	d135      	bne.n	8003ef2 <_vfiprintf_r+0x1ce>
 8003e86:	9b03      	ldr	r3, [sp, #12]
 8003e88:	1d1a      	adds	r2, r3, #4
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	9203      	str	r2, [sp, #12]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	bfb8      	it	lt
 8003e92:	f04f 33ff 	movlt.w	r3, #4294967295
 8003e96:	3402      	adds	r4, #2
 8003e98:	9305      	str	r3, [sp, #20]
 8003e9a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003f80 <_vfiprintf_r+0x25c>
 8003e9e:	7821      	ldrb	r1, [r4, #0]
 8003ea0:	2203      	movs	r2, #3
 8003ea2:	4650      	mov	r0, sl
 8003ea4:	f7fc f9a4 	bl	80001f0 <memchr>
 8003ea8:	b140      	cbz	r0, 8003ebc <_vfiprintf_r+0x198>
 8003eaa:	2340      	movs	r3, #64	; 0x40
 8003eac:	eba0 000a 	sub.w	r0, r0, sl
 8003eb0:	fa03 f000 	lsl.w	r0, r3, r0
 8003eb4:	9b04      	ldr	r3, [sp, #16]
 8003eb6:	4303      	orrs	r3, r0
 8003eb8:	3401      	adds	r4, #1
 8003eba:	9304      	str	r3, [sp, #16]
 8003ebc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ec0:	482c      	ldr	r0, [pc, #176]	; (8003f74 <_vfiprintf_r+0x250>)
 8003ec2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003ec6:	2206      	movs	r2, #6
 8003ec8:	f7fc f992 	bl	80001f0 <memchr>
 8003ecc:	2800      	cmp	r0, #0
 8003ece:	d03f      	beq.n	8003f50 <_vfiprintf_r+0x22c>
 8003ed0:	4b29      	ldr	r3, [pc, #164]	; (8003f78 <_vfiprintf_r+0x254>)
 8003ed2:	bb1b      	cbnz	r3, 8003f1c <_vfiprintf_r+0x1f8>
 8003ed4:	9b03      	ldr	r3, [sp, #12]
 8003ed6:	3307      	adds	r3, #7
 8003ed8:	f023 0307 	bic.w	r3, r3, #7
 8003edc:	3308      	adds	r3, #8
 8003ede:	9303      	str	r3, [sp, #12]
 8003ee0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ee2:	443b      	add	r3, r7
 8003ee4:	9309      	str	r3, [sp, #36]	; 0x24
 8003ee6:	e767      	b.n	8003db8 <_vfiprintf_r+0x94>
 8003ee8:	fb0c 3202 	mla	r2, ip, r2, r3
 8003eec:	460c      	mov	r4, r1
 8003eee:	2001      	movs	r0, #1
 8003ef0:	e7a5      	b.n	8003e3e <_vfiprintf_r+0x11a>
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	3401      	adds	r4, #1
 8003ef6:	9305      	str	r3, [sp, #20]
 8003ef8:	4619      	mov	r1, r3
 8003efa:	f04f 0c0a 	mov.w	ip, #10
 8003efe:	4620      	mov	r0, r4
 8003f00:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003f04:	3a30      	subs	r2, #48	; 0x30
 8003f06:	2a09      	cmp	r2, #9
 8003f08:	d903      	bls.n	8003f12 <_vfiprintf_r+0x1ee>
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d0c5      	beq.n	8003e9a <_vfiprintf_r+0x176>
 8003f0e:	9105      	str	r1, [sp, #20]
 8003f10:	e7c3      	b.n	8003e9a <_vfiprintf_r+0x176>
 8003f12:	fb0c 2101 	mla	r1, ip, r1, r2
 8003f16:	4604      	mov	r4, r0
 8003f18:	2301      	movs	r3, #1
 8003f1a:	e7f0      	b.n	8003efe <_vfiprintf_r+0x1da>
 8003f1c:	ab03      	add	r3, sp, #12
 8003f1e:	9300      	str	r3, [sp, #0]
 8003f20:	462a      	mov	r2, r5
 8003f22:	4b16      	ldr	r3, [pc, #88]	; (8003f7c <_vfiprintf_r+0x258>)
 8003f24:	a904      	add	r1, sp, #16
 8003f26:	4630      	mov	r0, r6
 8003f28:	f3af 8000 	nop.w
 8003f2c:	4607      	mov	r7, r0
 8003f2e:	1c78      	adds	r0, r7, #1
 8003f30:	d1d6      	bne.n	8003ee0 <_vfiprintf_r+0x1bc>
 8003f32:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003f34:	07d9      	lsls	r1, r3, #31
 8003f36:	d405      	bmi.n	8003f44 <_vfiprintf_r+0x220>
 8003f38:	89ab      	ldrh	r3, [r5, #12]
 8003f3a:	059a      	lsls	r2, r3, #22
 8003f3c:	d402      	bmi.n	8003f44 <_vfiprintf_r+0x220>
 8003f3e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003f40:	f7ff fdb7 	bl	8003ab2 <__retarget_lock_release_recursive>
 8003f44:	89ab      	ldrh	r3, [r5, #12]
 8003f46:	065b      	lsls	r3, r3, #25
 8003f48:	f53f af12 	bmi.w	8003d70 <_vfiprintf_r+0x4c>
 8003f4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003f4e:	e711      	b.n	8003d74 <_vfiprintf_r+0x50>
 8003f50:	ab03      	add	r3, sp, #12
 8003f52:	9300      	str	r3, [sp, #0]
 8003f54:	462a      	mov	r2, r5
 8003f56:	4b09      	ldr	r3, [pc, #36]	; (8003f7c <_vfiprintf_r+0x258>)
 8003f58:	a904      	add	r1, sp, #16
 8003f5a:	4630      	mov	r0, r6
 8003f5c:	f000 f880 	bl	8004060 <_printf_i>
 8003f60:	e7e4      	b.n	8003f2c <_vfiprintf_r+0x208>
 8003f62:	bf00      	nop
 8003f64:	0800468c 	.word	0x0800468c
 8003f68:	080046ac 	.word	0x080046ac
 8003f6c:	0800466c 	.word	0x0800466c
 8003f70:	080046cc 	.word	0x080046cc
 8003f74:	080046d6 	.word	0x080046d6
 8003f78:	00000000 	.word	0x00000000
 8003f7c:	08003cff 	.word	0x08003cff
 8003f80:	080046d2 	.word	0x080046d2

08003f84 <_printf_common>:
 8003f84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f88:	4616      	mov	r6, r2
 8003f8a:	4699      	mov	r9, r3
 8003f8c:	688a      	ldr	r2, [r1, #8]
 8003f8e:	690b      	ldr	r3, [r1, #16]
 8003f90:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003f94:	4293      	cmp	r3, r2
 8003f96:	bfb8      	it	lt
 8003f98:	4613      	movlt	r3, r2
 8003f9a:	6033      	str	r3, [r6, #0]
 8003f9c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003fa0:	4607      	mov	r7, r0
 8003fa2:	460c      	mov	r4, r1
 8003fa4:	b10a      	cbz	r2, 8003faa <_printf_common+0x26>
 8003fa6:	3301      	adds	r3, #1
 8003fa8:	6033      	str	r3, [r6, #0]
 8003faa:	6823      	ldr	r3, [r4, #0]
 8003fac:	0699      	lsls	r1, r3, #26
 8003fae:	bf42      	ittt	mi
 8003fb0:	6833      	ldrmi	r3, [r6, #0]
 8003fb2:	3302      	addmi	r3, #2
 8003fb4:	6033      	strmi	r3, [r6, #0]
 8003fb6:	6825      	ldr	r5, [r4, #0]
 8003fb8:	f015 0506 	ands.w	r5, r5, #6
 8003fbc:	d106      	bne.n	8003fcc <_printf_common+0x48>
 8003fbe:	f104 0a19 	add.w	sl, r4, #25
 8003fc2:	68e3      	ldr	r3, [r4, #12]
 8003fc4:	6832      	ldr	r2, [r6, #0]
 8003fc6:	1a9b      	subs	r3, r3, r2
 8003fc8:	42ab      	cmp	r3, r5
 8003fca:	dc26      	bgt.n	800401a <_printf_common+0x96>
 8003fcc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003fd0:	1e13      	subs	r3, r2, #0
 8003fd2:	6822      	ldr	r2, [r4, #0]
 8003fd4:	bf18      	it	ne
 8003fd6:	2301      	movne	r3, #1
 8003fd8:	0692      	lsls	r2, r2, #26
 8003fda:	d42b      	bmi.n	8004034 <_printf_common+0xb0>
 8003fdc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003fe0:	4649      	mov	r1, r9
 8003fe2:	4638      	mov	r0, r7
 8003fe4:	47c0      	blx	r8
 8003fe6:	3001      	adds	r0, #1
 8003fe8:	d01e      	beq.n	8004028 <_printf_common+0xa4>
 8003fea:	6823      	ldr	r3, [r4, #0]
 8003fec:	68e5      	ldr	r5, [r4, #12]
 8003fee:	6832      	ldr	r2, [r6, #0]
 8003ff0:	f003 0306 	and.w	r3, r3, #6
 8003ff4:	2b04      	cmp	r3, #4
 8003ff6:	bf08      	it	eq
 8003ff8:	1aad      	subeq	r5, r5, r2
 8003ffa:	68a3      	ldr	r3, [r4, #8]
 8003ffc:	6922      	ldr	r2, [r4, #16]
 8003ffe:	bf0c      	ite	eq
 8004000:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004004:	2500      	movne	r5, #0
 8004006:	4293      	cmp	r3, r2
 8004008:	bfc4      	itt	gt
 800400a:	1a9b      	subgt	r3, r3, r2
 800400c:	18ed      	addgt	r5, r5, r3
 800400e:	2600      	movs	r6, #0
 8004010:	341a      	adds	r4, #26
 8004012:	42b5      	cmp	r5, r6
 8004014:	d11a      	bne.n	800404c <_printf_common+0xc8>
 8004016:	2000      	movs	r0, #0
 8004018:	e008      	b.n	800402c <_printf_common+0xa8>
 800401a:	2301      	movs	r3, #1
 800401c:	4652      	mov	r2, sl
 800401e:	4649      	mov	r1, r9
 8004020:	4638      	mov	r0, r7
 8004022:	47c0      	blx	r8
 8004024:	3001      	adds	r0, #1
 8004026:	d103      	bne.n	8004030 <_printf_common+0xac>
 8004028:	f04f 30ff 	mov.w	r0, #4294967295
 800402c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004030:	3501      	adds	r5, #1
 8004032:	e7c6      	b.n	8003fc2 <_printf_common+0x3e>
 8004034:	18e1      	adds	r1, r4, r3
 8004036:	1c5a      	adds	r2, r3, #1
 8004038:	2030      	movs	r0, #48	; 0x30
 800403a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800403e:	4422      	add	r2, r4
 8004040:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004044:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004048:	3302      	adds	r3, #2
 800404a:	e7c7      	b.n	8003fdc <_printf_common+0x58>
 800404c:	2301      	movs	r3, #1
 800404e:	4622      	mov	r2, r4
 8004050:	4649      	mov	r1, r9
 8004052:	4638      	mov	r0, r7
 8004054:	47c0      	blx	r8
 8004056:	3001      	adds	r0, #1
 8004058:	d0e6      	beq.n	8004028 <_printf_common+0xa4>
 800405a:	3601      	adds	r6, #1
 800405c:	e7d9      	b.n	8004012 <_printf_common+0x8e>
	...

08004060 <_printf_i>:
 8004060:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004064:	460c      	mov	r4, r1
 8004066:	4691      	mov	r9, r2
 8004068:	7e27      	ldrb	r7, [r4, #24]
 800406a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800406c:	2f78      	cmp	r7, #120	; 0x78
 800406e:	4680      	mov	r8, r0
 8004070:	469a      	mov	sl, r3
 8004072:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004076:	d807      	bhi.n	8004088 <_printf_i+0x28>
 8004078:	2f62      	cmp	r7, #98	; 0x62
 800407a:	d80a      	bhi.n	8004092 <_printf_i+0x32>
 800407c:	2f00      	cmp	r7, #0
 800407e:	f000 80d8 	beq.w	8004232 <_printf_i+0x1d2>
 8004082:	2f58      	cmp	r7, #88	; 0x58
 8004084:	f000 80a3 	beq.w	80041ce <_printf_i+0x16e>
 8004088:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800408c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004090:	e03a      	b.n	8004108 <_printf_i+0xa8>
 8004092:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004096:	2b15      	cmp	r3, #21
 8004098:	d8f6      	bhi.n	8004088 <_printf_i+0x28>
 800409a:	a001      	add	r0, pc, #4	; (adr r0, 80040a0 <_printf_i+0x40>)
 800409c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80040a0:	080040f9 	.word	0x080040f9
 80040a4:	0800410d 	.word	0x0800410d
 80040a8:	08004089 	.word	0x08004089
 80040ac:	08004089 	.word	0x08004089
 80040b0:	08004089 	.word	0x08004089
 80040b4:	08004089 	.word	0x08004089
 80040b8:	0800410d 	.word	0x0800410d
 80040bc:	08004089 	.word	0x08004089
 80040c0:	08004089 	.word	0x08004089
 80040c4:	08004089 	.word	0x08004089
 80040c8:	08004089 	.word	0x08004089
 80040cc:	08004219 	.word	0x08004219
 80040d0:	0800413d 	.word	0x0800413d
 80040d4:	080041fb 	.word	0x080041fb
 80040d8:	08004089 	.word	0x08004089
 80040dc:	08004089 	.word	0x08004089
 80040e0:	0800423b 	.word	0x0800423b
 80040e4:	08004089 	.word	0x08004089
 80040e8:	0800413d 	.word	0x0800413d
 80040ec:	08004089 	.word	0x08004089
 80040f0:	08004089 	.word	0x08004089
 80040f4:	08004203 	.word	0x08004203
 80040f8:	680b      	ldr	r3, [r1, #0]
 80040fa:	1d1a      	adds	r2, r3, #4
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	600a      	str	r2, [r1, #0]
 8004100:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004104:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004108:	2301      	movs	r3, #1
 800410a:	e0a3      	b.n	8004254 <_printf_i+0x1f4>
 800410c:	6825      	ldr	r5, [r4, #0]
 800410e:	6808      	ldr	r0, [r1, #0]
 8004110:	062e      	lsls	r6, r5, #24
 8004112:	f100 0304 	add.w	r3, r0, #4
 8004116:	d50a      	bpl.n	800412e <_printf_i+0xce>
 8004118:	6805      	ldr	r5, [r0, #0]
 800411a:	600b      	str	r3, [r1, #0]
 800411c:	2d00      	cmp	r5, #0
 800411e:	da03      	bge.n	8004128 <_printf_i+0xc8>
 8004120:	232d      	movs	r3, #45	; 0x2d
 8004122:	426d      	negs	r5, r5
 8004124:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004128:	485e      	ldr	r0, [pc, #376]	; (80042a4 <_printf_i+0x244>)
 800412a:	230a      	movs	r3, #10
 800412c:	e019      	b.n	8004162 <_printf_i+0x102>
 800412e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004132:	6805      	ldr	r5, [r0, #0]
 8004134:	600b      	str	r3, [r1, #0]
 8004136:	bf18      	it	ne
 8004138:	b22d      	sxthne	r5, r5
 800413a:	e7ef      	b.n	800411c <_printf_i+0xbc>
 800413c:	680b      	ldr	r3, [r1, #0]
 800413e:	6825      	ldr	r5, [r4, #0]
 8004140:	1d18      	adds	r0, r3, #4
 8004142:	6008      	str	r0, [r1, #0]
 8004144:	0628      	lsls	r0, r5, #24
 8004146:	d501      	bpl.n	800414c <_printf_i+0xec>
 8004148:	681d      	ldr	r5, [r3, #0]
 800414a:	e002      	b.n	8004152 <_printf_i+0xf2>
 800414c:	0669      	lsls	r1, r5, #25
 800414e:	d5fb      	bpl.n	8004148 <_printf_i+0xe8>
 8004150:	881d      	ldrh	r5, [r3, #0]
 8004152:	4854      	ldr	r0, [pc, #336]	; (80042a4 <_printf_i+0x244>)
 8004154:	2f6f      	cmp	r7, #111	; 0x6f
 8004156:	bf0c      	ite	eq
 8004158:	2308      	moveq	r3, #8
 800415a:	230a      	movne	r3, #10
 800415c:	2100      	movs	r1, #0
 800415e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004162:	6866      	ldr	r6, [r4, #4]
 8004164:	60a6      	str	r6, [r4, #8]
 8004166:	2e00      	cmp	r6, #0
 8004168:	bfa2      	ittt	ge
 800416a:	6821      	ldrge	r1, [r4, #0]
 800416c:	f021 0104 	bicge.w	r1, r1, #4
 8004170:	6021      	strge	r1, [r4, #0]
 8004172:	b90d      	cbnz	r5, 8004178 <_printf_i+0x118>
 8004174:	2e00      	cmp	r6, #0
 8004176:	d04d      	beq.n	8004214 <_printf_i+0x1b4>
 8004178:	4616      	mov	r6, r2
 800417a:	fbb5 f1f3 	udiv	r1, r5, r3
 800417e:	fb03 5711 	mls	r7, r3, r1, r5
 8004182:	5dc7      	ldrb	r7, [r0, r7]
 8004184:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004188:	462f      	mov	r7, r5
 800418a:	42bb      	cmp	r3, r7
 800418c:	460d      	mov	r5, r1
 800418e:	d9f4      	bls.n	800417a <_printf_i+0x11a>
 8004190:	2b08      	cmp	r3, #8
 8004192:	d10b      	bne.n	80041ac <_printf_i+0x14c>
 8004194:	6823      	ldr	r3, [r4, #0]
 8004196:	07df      	lsls	r7, r3, #31
 8004198:	d508      	bpl.n	80041ac <_printf_i+0x14c>
 800419a:	6923      	ldr	r3, [r4, #16]
 800419c:	6861      	ldr	r1, [r4, #4]
 800419e:	4299      	cmp	r1, r3
 80041a0:	bfde      	ittt	le
 80041a2:	2330      	movle	r3, #48	; 0x30
 80041a4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80041a8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80041ac:	1b92      	subs	r2, r2, r6
 80041ae:	6122      	str	r2, [r4, #16]
 80041b0:	f8cd a000 	str.w	sl, [sp]
 80041b4:	464b      	mov	r3, r9
 80041b6:	aa03      	add	r2, sp, #12
 80041b8:	4621      	mov	r1, r4
 80041ba:	4640      	mov	r0, r8
 80041bc:	f7ff fee2 	bl	8003f84 <_printf_common>
 80041c0:	3001      	adds	r0, #1
 80041c2:	d14c      	bne.n	800425e <_printf_i+0x1fe>
 80041c4:	f04f 30ff 	mov.w	r0, #4294967295
 80041c8:	b004      	add	sp, #16
 80041ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041ce:	4835      	ldr	r0, [pc, #212]	; (80042a4 <_printf_i+0x244>)
 80041d0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80041d4:	6823      	ldr	r3, [r4, #0]
 80041d6:	680e      	ldr	r6, [r1, #0]
 80041d8:	061f      	lsls	r7, r3, #24
 80041da:	f856 5b04 	ldr.w	r5, [r6], #4
 80041de:	600e      	str	r6, [r1, #0]
 80041e0:	d514      	bpl.n	800420c <_printf_i+0x1ac>
 80041e2:	07d9      	lsls	r1, r3, #31
 80041e4:	bf44      	itt	mi
 80041e6:	f043 0320 	orrmi.w	r3, r3, #32
 80041ea:	6023      	strmi	r3, [r4, #0]
 80041ec:	b91d      	cbnz	r5, 80041f6 <_printf_i+0x196>
 80041ee:	6823      	ldr	r3, [r4, #0]
 80041f0:	f023 0320 	bic.w	r3, r3, #32
 80041f4:	6023      	str	r3, [r4, #0]
 80041f6:	2310      	movs	r3, #16
 80041f8:	e7b0      	b.n	800415c <_printf_i+0xfc>
 80041fa:	6823      	ldr	r3, [r4, #0]
 80041fc:	f043 0320 	orr.w	r3, r3, #32
 8004200:	6023      	str	r3, [r4, #0]
 8004202:	2378      	movs	r3, #120	; 0x78
 8004204:	4828      	ldr	r0, [pc, #160]	; (80042a8 <_printf_i+0x248>)
 8004206:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800420a:	e7e3      	b.n	80041d4 <_printf_i+0x174>
 800420c:	065e      	lsls	r6, r3, #25
 800420e:	bf48      	it	mi
 8004210:	b2ad      	uxthmi	r5, r5
 8004212:	e7e6      	b.n	80041e2 <_printf_i+0x182>
 8004214:	4616      	mov	r6, r2
 8004216:	e7bb      	b.n	8004190 <_printf_i+0x130>
 8004218:	680b      	ldr	r3, [r1, #0]
 800421a:	6826      	ldr	r6, [r4, #0]
 800421c:	6960      	ldr	r0, [r4, #20]
 800421e:	1d1d      	adds	r5, r3, #4
 8004220:	600d      	str	r5, [r1, #0]
 8004222:	0635      	lsls	r5, r6, #24
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	d501      	bpl.n	800422c <_printf_i+0x1cc>
 8004228:	6018      	str	r0, [r3, #0]
 800422a:	e002      	b.n	8004232 <_printf_i+0x1d2>
 800422c:	0671      	lsls	r1, r6, #25
 800422e:	d5fb      	bpl.n	8004228 <_printf_i+0x1c8>
 8004230:	8018      	strh	r0, [r3, #0]
 8004232:	2300      	movs	r3, #0
 8004234:	6123      	str	r3, [r4, #16]
 8004236:	4616      	mov	r6, r2
 8004238:	e7ba      	b.n	80041b0 <_printf_i+0x150>
 800423a:	680b      	ldr	r3, [r1, #0]
 800423c:	1d1a      	adds	r2, r3, #4
 800423e:	600a      	str	r2, [r1, #0]
 8004240:	681e      	ldr	r6, [r3, #0]
 8004242:	6862      	ldr	r2, [r4, #4]
 8004244:	2100      	movs	r1, #0
 8004246:	4630      	mov	r0, r6
 8004248:	f7fb ffd2 	bl	80001f0 <memchr>
 800424c:	b108      	cbz	r0, 8004252 <_printf_i+0x1f2>
 800424e:	1b80      	subs	r0, r0, r6
 8004250:	6060      	str	r0, [r4, #4]
 8004252:	6863      	ldr	r3, [r4, #4]
 8004254:	6123      	str	r3, [r4, #16]
 8004256:	2300      	movs	r3, #0
 8004258:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800425c:	e7a8      	b.n	80041b0 <_printf_i+0x150>
 800425e:	6923      	ldr	r3, [r4, #16]
 8004260:	4632      	mov	r2, r6
 8004262:	4649      	mov	r1, r9
 8004264:	4640      	mov	r0, r8
 8004266:	47d0      	blx	sl
 8004268:	3001      	adds	r0, #1
 800426a:	d0ab      	beq.n	80041c4 <_printf_i+0x164>
 800426c:	6823      	ldr	r3, [r4, #0]
 800426e:	079b      	lsls	r3, r3, #30
 8004270:	d413      	bmi.n	800429a <_printf_i+0x23a>
 8004272:	68e0      	ldr	r0, [r4, #12]
 8004274:	9b03      	ldr	r3, [sp, #12]
 8004276:	4298      	cmp	r0, r3
 8004278:	bfb8      	it	lt
 800427a:	4618      	movlt	r0, r3
 800427c:	e7a4      	b.n	80041c8 <_printf_i+0x168>
 800427e:	2301      	movs	r3, #1
 8004280:	4632      	mov	r2, r6
 8004282:	4649      	mov	r1, r9
 8004284:	4640      	mov	r0, r8
 8004286:	47d0      	blx	sl
 8004288:	3001      	adds	r0, #1
 800428a:	d09b      	beq.n	80041c4 <_printf_i+0x164>
 800428c:	3501      	adds	r5, #1
 800428e:	68e3      	ldr	r3, [r4, #12]
 8004290:	9903      	ldr	r1, [sp, #12]
 8004292:	1a5b      	subs	r3, r3, r1
 8004294:	42ab      	cmp	r3, r5
 8004296:	dcf2      	bgt.n	800427e <_printf_i+0x21e>
 8004298:	e7eb      	b.n	8004272 <_printf_i+0x212>
 800429a:	2500      	movs	r5, #0
 800429c:	f104 0619 	add.w	r6, r4, #25
 80042a0:	e7f5      	b.n	800428e <_printf_i+0x22e>
 80042a2:	bf00      	nop
 80042a4:	080046dd 	.word	0x080046dd
 80042a8:	080046ee 	.word	0x080046ee

080042ac <_sbrk_r>:
 80042ac:	b538      	push	{r3, r4, r5, lr}
 80042ae:	4d06      	ldr	r5, [pc, #24]	; (80042c8 <_sbrk_r+0x1c>)
 80042b0:	2300      	movs	r3, #0
 80042b2:	4604      	mov	r4, r0
 80042b4:	4608      	mov	r0, r1
 80042b6:	602b      	str	r3, [r5, #0]
 80042b8:	f7fc fa8e 	bl	80007d8 <_sbrk>
 80042bc:	1c43      	adds	r3, r0, #1
 80042be:	d102      	bne.n	80042c6 <_sbrk_r+0x1a>
 80042c0:	682b      	ldr	r3, [r5, #0]
 80042c2:	b103      	cbz	r3, 80042c6 <_sbrk_r+0x1a>
 80042c4:	6023      	str	r3, [r4, #0]
 80042c6:	bd38      	pop	{r3, r4, r5, pc}
 80042c8:	20000844 	.word	0x20000844

080042cc <__sread>:
 80042cc:	b510      	push	{r4, lr}
 80042ce:	460c      	mov	r4, r1
 80042d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042d4:	f000 f8a0 	bl	8004418 <_read_r>
 80042d8:	2800      	cmp	r0, #0
 80042da:	bfab      	itete	ge
 80042dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80042de:	89a3      	ldrhlt	r3, [r4, #12]
 80042e0:	181b      	addge	r3, r3, r0
 80042e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80042e6:	bfac      	ite	ge
 80042e8:	6563      	strge	r3, [r4, #84]	; 0x54
 80042ea:	81a3      	strhlt	r3, [r4, #12]
 80042ec:	bd10      	pop	{r4, pc}

080042ee <__swrite>:
 80042ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042f2:	461f      	mov	r7, r3
 80042f4:	898b      	ldrh	r3, [r1, #12]
 80042f6:	05db      	lsls	r3, r3, #23
 80042f8:	4605      	mov	r5, r0
 80042fa:	460c      	mov	r4, r1
 80042fc:	4616      	mov	r6, r2
 80042fe:	d505      	bpl.n	800430c <__swrite+0x1e>
 8004300:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004304:	2302      	movs	r3, #2
 8004306:	2200      	movs	r2, #0
 8004308:	f000 f868 	bl	80043dc <_lseek_r>
 800430c:	89a3      	ldrh	r3, [r4, #12]
 800430e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004312:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004316:	81a3      	strh	r3, [r4, #12]
 8004318:	4632      	mov	r2, r6
 800431a:	463b      	mov	r3, r7
 800431c:	4628      	mov	r0, r5
 800431e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004322:	f000 b817 	b.w	8004354 <_write_r>

08004326 <__sseek>:
 8004326:	b510      	push	{r4, lr}
 8004328:	460c      	mov	r4, r1
 800432a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800432e:	f000 f855 	bl	80043dc <_lseek_r>
 8004332:	1c43      	adds	r3, r0, #1
 8004334:	89a3      	ldrh	r3, [r4, #12]
 8004336:	bf15      	itete	ne
 8004338:	6560      	strne	r0, [r4, #84]	; 0x54
 800433a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800433e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004342:	81a3      	strheq	r3, [r4, #12]
 8004344:	bf18      	it	ne
 8004346:	81a3      	strhne	r3, [r4, #12]
 8004348:	bd10      	pop	{r4, pc}

0800434a <__sclose>:
 800434a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800434e:	f000 b813 	b.w	8004378 <_close_r>
	...

08004354 <_write_r>:
 8004354:	b538      	push	{r3, r4, r5, lr}
 8004356:	4d07      	ldr	r5, [pc, #28]	; (8004374 <_write_r+0x20>)
 8004358:	4604      	mov	r4, r0
 800435a:	4608      	mov	r0, r1
 800435c:	4611      	mov	r1, r2
 800435e:	2200      	movs	r2, #0
 8004360:	602a      	str	r2, [r5, #0]
 8004362:	461a      	mov	r2, r3
 8004364:	f7fc fa1f 	bl	80007a6 <_write>
 8004368:	1c43      	adds	r3, r0, #1
 800436a:	d102      	bne.n	8004372 <_write_r+0x1e>
 800436c:	682b      	ldr	r3, [r5, #0]
 800436e:	b103      	cbz	r3, 8004372 <_write_r+0x1e>
 8004370:	6023      	str	r3, [r4, #0]
 8004372:	bd38      	pop	{r3, r4, r5, pc}
 8004374:	20000844 	.word	0x20000844

08004378 <_close_r>:
 8004378:	b538      	push	{r3, r4, r5, lr}
 800437a:	4d06      	ldr	r5, [pc, #24]	; (8004394 <_close_r+0x1c>)
 800437c:	2300      	movs	r3, #0
 800437e:	4604      	mov	r4, r0
 8004380:	4608      	mov	r0, r1
 8004382:	602b      	str	r3, [r5, #0]
 8004384:	f7fc fa1c 	bl	80007c0 <_close>
 8004388:	1c43      	adds	r3, r0, #1
 800438a:	d102      	bne.n	8004392 <_close_r+0x1a>
 800438c:	682b      	ldr	r3, [r5, #0]
 800438e:	b103      	cbz	r3, 8004392 <_close_r+0x1a>
 8004390:	6023      	str	r3, [r4, #0]
 8004392:	bd38      	pop	{r3, r4, r5, pc}
 8004394:	20000844 	.word	0x20000844

08004398 <_fstat_r>:
 8004398:	b538      	push	{r3, r4, r5, lr}
 800439a:	4d07      	ldr	r5, [pc, #28]	; (80043b8 <_fstat_r+0x20>)
 800439c:	2300      	movs	r3, #0
 800439e:	4604      	mov	r4, r0
 80043a0:	4608      	mov	r0, r1
 80043a2:	4611      	mov	r1, r2
 80043a4:	602b      	str	r3, [r5, #0]
 80043a6:	f7fc fa0e 	bl	80007c6 <_fstat>
 80043aa:	1c43      	adds	r3, r0, #1
 80043ac:	d102      	bne.n	80043b4 <_fstat_r+0x1c>
 80043ae:	682b      	ldr	r3, [r5, #0]
 80043b0:	b103      	cbz	r3, 80043b4 <_fstat_r+0x1c>
 80043b2:	6023      	str	r3, [r4, #0]
 80043b4:	bd38      	pop	{r3, r4, r5, pc}
 80043b6:	bf00      	nop
 80043b8:	20000844 	.word	0x20000844

080043bc <_isatty_r>:
 80043bc:	b538      	push	{r3, r4, r5, lr}
 80043be:	4d06      	ldr	r5, [pc, #24]	; (80043d8 <_isatty_r+0x1c>)
 80043c0:	2300      	movs	r3, #0
 80043c2:	4604      	mov	r4, r0
 80043c4:	4608      	mov	r0, r1
 80043c6:	602b      	str	r3, [r5, #0]
 80043c8:	f7fc fa02 	bl	80007d0 <_isatty>
 80043cc:	1c43      	adds	r3, r0, #1
 80043ce:	d102      	bne.n	80043d6 <_isatty_r+0x1a>
 80043d0:	682b      	ldr	r3, [r5, #0]
 80043d2:	b103      	cbz	r3, 80043d6 <_isatty_r+0x1a>
 80043d4:	6023      	str	r3, [r4, #0]
 80043d6:	bd38      	pop	{r3, r4, r5, pc}
 80043d8:	20000844 	.word	0x20000844

080043dc <_lseek_r>:
 80043dc:	b538      	push	{r3, r4, r5, lr}
 80043de:	4d07      	ldr	r5, [pc, #28]	; (80043fc <_lseek_r+0x20>)
 80043e0:	4604      	mov	r4, r0
 80043e2:	4608      	mov	r0, r1
 80043e4:	4611      	mov	r1, r2
 80043e6:	2200      	movs	r2, #0
 80043e8:	602a      	str	r2, [r5, #0]
 80043ea:	461a      	mov	r2, r3
 80043ec:	f7fc f9f2 	bl	80007d4 <_lseek>
 80043f0:	1c43      	adds	r3, r0, #1
 80043f2:	d102      	bne.n	80043fa <_lseek_r+0x1e>
 80043f4:	682b      	ldr	r3, [r5, #0]
 80043f6:	b103      	cbz	r3, 80043fa <_lseek_r+0x1e>
 80043f8:	6023      	str	r3, [r4, #0]
 80043fa:	bd38      	pop	{r3, r4, r5, pc}
 80043fc:	20000844 	.word	0x20000844

08004400 <__malloc_lock>:
 8004400:	4801      	ldr	r0, [pc, #4]	; (8004408 <__malloc_lock+0x8>)
 8004402:	f7ff bb55 	b.w	8003ab0 <__retarget_lock_acquire_recursive>
 8004406:	bf00      	nop
 8004408:	2000083e 	.word	0x2000083e

0800440c <__malloc_unlock>:
 800440c:	4801      	ldr	r0, [pc, #4]	; (8004414 <__malloc_unlock+0x8>)
 800440e:	f7ff bb50 	b.w	8003ab2 <__retarget_lock_release_recursive>
 8004412:	bf00      	nop
 8004414:	2000083e 	.word	0x2000083e

08004418 <_read_r>:
 8004418:	b538      	push	{r3, r4, r5, lr}
 800441a:	4d07      	ldr	r5, [pc, #28]	; (8004438 <_read_r+0x20>)
 800441c:	4604      	mov	r4, r0
 800441e:	4608      	mov	r0, r1
 8004420:	4611      	mov	r1, r2
 8004422:	2200      	movs	r2, #0
 8004424:	602a      	str	r2, [r5, #0]
 8004426:	461a      	mov	r2, r3
 8004428:	f7fc f9b0 	bl	800078c <_read>
 800442c:	1c43      	adds	r3, r0, #1
 800442e:	d102      	bne.n	8004436 <_read_r+0x1e>
 8004430:	682b      	ldr	r3, [r5, #0]
 8004432:	b103      	cbz	r3, 8004436 <_read_r+0x1e>
 8004434:	6023      	str	r3, [r4, #0]
 8004436:	bd38      	pop	{r3, r4, r5, pc}
 8004438:	20000844 	.word	0x20000844

0800443c <_init>:
 800443c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800443e:	bf00      	nop
 8004440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004442:	bc08      	pop	{r3}
 8004444:	469e      	mov	lr, r3
 8004446:	4770      	bx	lr

08004448 <_fini>:
 8004448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800444a:	bf00      	nop
 800444c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800444e:	bc08      	pop	{r3}
 8004450:	469e      	mov	lr, r3
 8004452:	4770      	bx	lr
